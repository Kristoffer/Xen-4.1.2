00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios-debug_.c"
00003                                           ! 1 # 5
00004                                           ! 5 typedef unsigned char Bit8u;
00005                                           !BCC_EOS
00006                                           ! 6 typedef unsigned short Bit16u;
00007                                           !BCC_EOS
00008                                           ! 7 typedef unsigned long Bit32u;
00009                                           !BCC_EOS
00010                                           ! 8 typedef unsigned short Boolean;
00011                                           !BCC_EOS
00012                                           ! 9 void dispi_set_enable(enable);
00013                                           !BCC_EOS
00014                                           ! 10 
00015                                           ! 11 
00016                                           ! 12 
00017                                           ! 13 Boolean vbe_has_vbe_display();
00018                                           !BCC_EOS
00019                                           ! 14 void vbe_biosfn_return_controller_information(AX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 15 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00022                                           !BCC_EOS
00023                                           ! 16 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00024                                           !BCC_EOS
00025                                           ! 17 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00026                                           !BCC_EOS
00027                                           ! 18 void vbe_biosfn_set_get_palette_data(AX);
00028                                           !BCC_EOS
00029                                           ! 19 void vbe_biosfn_return_protected_mode_interface(AX);
00030                                           !BCC_EOS
00031                                           ! 20 
00032                                           ! 21 
00033                                           ! 22 typedef struct VbeInfoBlock
00034                                           ! 23 {
00035                                           ! 24    Bit8u VbeSignature[4];
00036                                           !BCC_EOS
00037                                           ! 25    Bit16u VbeVersion;
00038                                           !BCC_EOS
00039                                           ! 26    Bit16u OemStringPtr_Off;
00040                                           !BCC_EOS
00041                                           ! 27    Bit16u OemStringPtr_Seg;
00042                                           !BCC_EOS
00043                                           ! 28    Bit8u Capabilities[4];
00044                                           !BCC_EOS
00045                                           ! 29    Bit16u VideoModePtr_Off;
00046                                           !BCC_EOS
00047                                           ! 30    Bit16u VideoModePtr_Seg;
00048                                           !BCC_EOS
00049                                           ! 31    Bit16u TotalMemory;
00050                                           !BCC_EOS
00051                                           ! 32    Bit16u OemSoftwareRev;
00052                                           !BCC_EOS
00053                                           ! 33    Bit16u OemVendorNamePtr_Off;
00054                                           !BCC_EOS
00055                                           ! 34    Bit16u OemVendorNamePtr_Seg;
00056                                           !BCC_EOS
00057                                           ! 35    Bit16u OemProductNamePtr_Off;
00058                                           !BCC_EOS
00059                                           ! 36    Bit16u OemProductNamePtr_Seg;
00060                                           !BCC_EOS
00061                                           ! 37    Bit16u OemProductRevPtr_Off;
00062                                           !BCC_EOS
00063                                           ! 38    Bit16u OemProductRevPtr_Seg;
00064                                           !BCC_EOS
00065                                           ! 39    Bit16u Reserved[111];
00066                                           !BCC_EOS
00067                                           ! 40    Bit8u OemData[256];
00068                                           !BCC_EOS
00069                                           ! 41 } VbeInfoBlock;
00070                                           !BCC_EOS
00071                                           ! 42 # 46
00072                                           ! 46 typedef struct ModeInfoBlockCompact
00073                                           ! 47 {
00074                                           ! 48 
00075                                           ! 49    Bit16u ModeAttributes;
00076                                           !BCC_EOS
00077                                           ! 50    Bit8u WinAAttributes;
00078                                           !BCC_EOS
00079                                           ! 51    Bit8u WinBAttributes;
00080                                           !BCC_EOS
00081                                           ! 52    Bit16u WinGranularity;
00082                                           !BCC_EOS
00083                                           ! 53    Bit16u WinSize;
00084                                           !BCC_EOS
00085                                           ! 54    Bit16u WinASegment;
00086                                           !BCC_EOS
00087                                           ! 55    Bit16u WinBSegment;
00088                                           !BCC_EOS
00089                                           ! 56    Bit32u WinFuncPtr;
00090                                           !BCC_EOS
00091                                           ! 57    Bit16u BytesPerScanLine;
00092                                           !BCC_EOS
00093                                           ! 58 
00094                                           ! 59    Bit16u XResolution;
00095                                           !BCC_EOS
00096                                           ! 60    Bit16u YResolution;
00097                                           !BCC_EOS
00098                                           ! 61    Bit8u XCharSize;
00099                                           !BCC_EOS
00100                                           ! 62    Bit8u YCharSize;
00101                                           !BCC_EOS
00102                                           ! 63    Bit8u NumberOfPlanes;
00103                                           !BCC_EOS
00104                                           ! 64    Bit8u BitsPerPixel;
00105                                           !BCC_EOS
00106                                           ! 65    Bit8u NumberOfBanks;
00107                                           !BCC_EOS
00108                                           ! 66    Bit8u MemoryModel;
00109                                           !BCC_EOS
00110                                           ! 67    Bit8u BankSize;
00111                                           !BCC_EOS
00112                                           ! 68    Bit8u NumberOfImagePages;
00113                                           !BCC_EOS
00114                                           ! 69    Bit8u Reserved_page;
00115                                           !BCC_EOS
00116                                           ! 70 
00117                                           ! 71    Bit8u RedMaskSize;
00118                                           !BCC_EOS
00119                                           ! 72    Bit8u RedFieldPosition;
00120                                           !BCC_EOS
00121                                           ! 73    Bit8u GreenMaskSize;
00122                                           !BCC_EOS
00123                                           ! 74    Bit8u GreenFieldPosition;
00124                                           !BCC_EOS
00125                                           ! 75    Bit8u BlueMaskSize;
00126                                           !BCC_EOS
00127                                           ! 76    Bit8u BlueFieldPosition;
00128                                           !BCC_EOS
00129                                           ! 77    Bit8u RsvdMaskSize;
00130                                           !BCC_EOS
00131                                           ! 78    Bit8u RsvdFieldPosition;
00132                                           !BCC_EOS
00133                                           ! 79    Bit8u DirectColorModeInfo;
00134                                           !BCC_EOS
00135                                           ! 80 
00136                                           ! 81    Bit32u PhysBasePtr;
00137                                           !BCC_EOS
00138                                           ! 82    Bit32u OffScreenMemOffset;
00139                                           !BCC_EOS
00140                                           ! 83    Bit16u OffScreenMemSize;
00141                                           !BCC_EOS
00142                                           ! 84 
00143                                           ! 85    Bit16u LinBytesPerScanLine;
00144                                           !BCC_EOS
00145                                           ! 86    Bit8u BnkNumberOfPages;
00146                                           !BCC_EOS
00147                                           ! 87    Bit8u LinNumberOfPages;
00148                                           !BCC_EOS
00149                                           ! 88    Bit8u LinRedMaskSize;
00150                                           !BCC_EOS
00151                                           ! 89    Bit8u LinRedFieldPosition;
00152                                           !BCC_EOS
00153                                           ! 90    Bit8u LinGreenMaskSize;
00154                                           !BCC_EOS
00155                                           ! 91 
00156                                           ! 91    Bit8u LinGreenFieldPosition;
00157                                           !BCC_EOS
00158                                           ! 92    Bit8u LinBlueMaskSize;
00159                                           !BCC_EOS
00160                                           ! 93    Bit8u LinBlueFieldPosition;
00161                                           !BCC_EOS
00162                                           ! 94    Bit8u LinRsvdMaskSize;
00163                                           !BCC_EOS
00164                                           ! 95    Bit8u LinRsvdFieldPosition;
00165                                           !BCC_EOS
00166                                           ! 96    Bit32u MaxPixelClock;
00167                                           !BCC_EOS
00168                                           ! 97 
00169                                           ! 98 } ModeInfoBlockCompact;
00170                                           !BCC_EOS
00171                                           ! 99 
00172                                           ! 100 typedef struct ModeInfoBlock
00173                                           ! 101 {
00174                                           ! 102 
00175                                           ! 103    Bit16u ModeAttributes;
00176                                           !BCC_EOS
00177                                           ! 104    Bit8u WinAAttributes;
00178                                           !BCC_EOS
00179                                           ! 105    Bit8u WinBAttributes;
00180                                           !BCC_EOS
00181                                           ! 106    Bit16u WinGranularity;
00182                                           !BCC_EOS
00183                                           ! 107    Bit16u WinSize;
00184                                           !BCC_EOS
00185                                           ! 108    Bit16u WinASegment;
00186                                           !BCC_EOS
00187                                           ! 109    Bit16u WinBSegment;
00188                                           !BCC_EOS
00189                                           ! 110    Bit32u WinFuncPtr;
00190                                           !BCC_EOS
00191                                           ! 111    Bit16u BytesPerScanLine;
00192                                           !BCC_EOS
00193                                           ! 112 
00194                                           ! 113    Bit16u XResolution;
00195                                           !BCC_EOS
00196                                           ! 114    Bit16u YResolution;
00197                                           !BCC_EOS
00198                                           ! 115    Bit8u XCharSize;
00199                                           !BCC_EOS
00200                                           ! 116    Bit8u YCharSize;
00201                                           !BCC_EOS
00202                                           ! 117    Bit8u NumberOfPlanes;
00203                                           !BCC_EOS
00204                                           ! 118    Bit8u BitsPerPixel;
00205                                           !BCC_EOS
00206                                           ! 119    Bit8u NumberOfBanks;
00207                                           !BCC_EOS
00208                                           ! 120    Bit8u MemoryModel;
00209                                           !BCC_EOS
00210                                           ! 121    Bit8u BankSize;
00211                                           !BCC_EOS
00212                                           ! 122    Bit8u NumberOfImagePages;
00213                                           !BCC_EOS
00214                                           ! 123    Bit8u Reserved_page;
00215                                           !BCC_EOS
00216                                           ! 124 
00217                                           ! 125    Bit8u RedMaskSize;
00218                                           !BCC_EOS
00219                                           ! 126    Bit8u RedFieldPosition;
00220                                           !BCC_EOS
00221                                           ! 127    Bit8u GreenMaskSize;
00222                                           !BCC_EOS
00223                                           ! 128    Bit8u GreenFieldPosition;
00224                                           !BCC_EOS
00225                                           ! 129    Bit8u BlueMaskSize;
00226                                           !BCC_EOS
00227                                           ! 130    Bit8u BlueFieldPosition;
00228                                           !BCC_EOS
00229                                           ! 131    Bit8u RsvdMaskSize;
00230                                           !BCC_EOS
00231                                           ! 132    Bit8u RsvdFieldPosition;
00232                                           !BCC_EOS
00233                                           ! 133    Bit8u DirectColorModeInfo;
00234                                           !BCC_EOS
00235                                           ! 134 
00236                                           ! 135    Bit32u PhysBasePtr;
00237                                           !BCC_EOS
00238                                           ! 136    Bit32u OffScreenMemOffset;
00239                                           !BCC_EOS
00240                                           ! 137    Bit16u OffScreenMemSize;
00241                                           !BCC_EOS
00242                                           ! 138 
00243                                           ! 139    Bit16u LinBytesPerScanLine;
00244                                           !BCC_EOS
00245                                           ! 140    Bit8u BnkNumberOfPages;
00246                                           !BCC_EOS
00247                                           ! 141    Bit8u LinNumberOfPages;
00248                                           !BCC_EOS
00249                                           ! 142    Bit8u LinRedMaskSize;
00250                                           !BCC_EOS
00251                                           ! 143    Bit8u LinRedFieldPosition;
00252                                           !BCC_EOS
00253                                           ! 144    Bit8u LinGreenMaskSize;
00254                                           !BCC_EOS
00255                                           ! 145    Bit8u LinGreenFieldPosition;
00256                                           !BCC_EOS
00257                                           ! 146    Bit8u LinBlueMaskSize;
00258                                           !BCC_EOS
00259                                           ! 147    Bit8u LinBlueFieldPosition;
00260                                           !BCC_EOS
00261                                           ! 148    Bit8u LinRsvdMaskSize;
00262                                           !BCC_EOS
00263                                           ! 149    Bit8u LinRsvdFieldPosition;
00264                                           !BCC_EOS
00265                                           ! 150    Bit32u MaxPixelClock;
00266                                           !BCC_EOS
00267                                           ! 151    Bit8u Reserved[189];
00268                                           !BCC_EOS
00269                                           ! 152 } ModeInfoBlock;
00270                                           !BCC_EOS
00271                                           ! 153 
00272                                           ! 154 typedef struct ModeInfoListItem
00273                                           ! 155 {
00274                                           ! 156   Bit16u mode;
00275                                           !BCC_EOS
00276                                           ! 157   ModeInfoBlockCompact info;
00277                                           !BCC_EOS
00278                                           ! 158 } ModeInfoListItem;
00279                                           !BCC_EOS
00280                                           ! 159 static Bit8u read_byte();
00281                                           !BCC_EOS
00282                                           ! 160 static Bit16u read_word();
00283                                           !BCC_EOS
00284                                           ! 161 static void write_byte();
00285                                           !BCC_EOS
00286                                           ! 162 static void write_word();
00287                                           !BCC_EOS
00288                                           ! 163 static Bit8u inb();
00289                                           !BCC_EOS
00290                                           ! 164 static Bit16u inw();
00291                                           !BCC_EOS
00292                                           ! 165 static void outb();
00293                                           !BCC_EOS
00294                                           ! 166 static void outw();
00295                                           !BCC_EOS
00296                                           ! 167 static Bit16u get_SS();
00297                                           !BCC_EOS
00298                                           ! 168 static void printf();
00299                                           !BCC_EOS
00300                                           ! 169 static void unimplemented();
00301                                           !BCC_EOS
00302                                           ! 170 static void unknown();
00303                                           !BCC_EOS
00304                                           ! 171 static Bit8u find_vga_entry();
00305                                           !BCC_EOS
00306                                           ! 172 static void memsetb();
00307                                           !BCC_EOS
00308                                           ! 173 static void memsetw();
00309                                           !BCC_EOS
00310                                           ! 174 static void memcpyb();
00311                                           !BCC_EOS
00312                                           ! 175 static void memcpyw();
00313                                           !BCC_EOS
00314                                           ! 176 static void biosfn_set_video_mode();
00315                                           !BCC_EOS
00316                                           ! 177 static void biosfn_set_cursor_shape();
00317                                           !BCC_EOS
00318                                           ! 178 static void biosfn_set_cursor_pos();
00319                                           !BCC_EOS
00320                                           ! 179 static void biosfn_get_cursor_pos
00321                                           ! 179 ();
00322                                           !BCC_EOS
00323                                           ! 180 static void biosfn_set_active_page();
00324                                           !BCC_EOS
00325                                           ! 181 static void biosfn_scroll();
00326                                           !BCC_EOS
00327                                           ! 182 static void biosfn_read_char_attr();
00328                                           !BCC_EOS
00329                                           ! 183 static void biosfn_write_char_attr();
00330                                           !BCC_EOS
00331                                           ! 184 static void biosfn_write_char_only();
00332                                           !BCC_EOS
00333                                           ! 185 static void biosfn_write_pixel();
00334                                           !BCC_EOS
00335                                           ! 186 static void biosfn_read_pixel();
00336                                           !BCC_EOS
00337                                           ! 187 static void biosfn_write_teletype();
00338                                           !BCC_EOS
00339                                           ! 188 static void biosfn_perform_gray_scale_summing();
00340                                           !BCC_EOS
00341                                           ! 189 static void biosfn_load_text_user_pat();
00342                                           !BCC_EOS
00343                                           ! 190 static void biosfn_load_text_8_14_pat();
00344                                           !BCC_EOS
00345                                           ! 191 static void biosfn_load_text_8_8_pat();
00346                                           !BCC_EOS
00347                                           ! 192 static void biosfn_load_text_8_16_pat();
00348                                           !BCC_EOS
00349                                           ! 193 static void biosfn_load_gfx_8_8_chars();
00350                                           !BCC_EOS
00351                                           ! 194 static void biosfn_load_gfx_user_chars();
00352                                           !BCC_EOS
00353                                           ! 195 static void biosfn_load_gfx_8_14_chars();
00354                                           !BCC_EOS
00355                                           ! 196 static void biosfn_load_gfx_8_8_dd_chars();
00356                                           !BCC_EOS
00357                                           ! 197 static void biosfn_load_gfx_8_16_chars();
00358                                           !BCC_EOS
00359                                           ! 198 static void biosfn_get_font_info();
00360                                           !BCC_EOS
00361                                           ! 199 static void biosfn_alternate_prtsc();
00362                                           !BCC_EOS
00363                                           ! 200 static void biosfn_switch_video_interface();
00364                                           !BCC_EOS
00365                                           ! 201 static void biosfn_enable_video_refresh_control();
00366                                           !BCC_EOS
00367                                           ! 202 static void biosfn_write_string();
00368                                           !BCC_EOS
00369                                           ! 203 static void biosfn_read_state_info();
00370                                           !BCC_EOS
00371                                           ! 204 static void biosfn_read_video_state_size();
00372                                           !BCC_EOS
00373                                           ! 205 static Bit16u biosfn_save_video_state();
00374                                           !BCC_EOS
00375                                           ! 206 static Bit16u biosfn_restore_video_state();
00376                                           !BCC_EOS
00377                                           ! 207 extern Bit8u video_save_pointer_table[];
00378                                           !BCC_EOS
00379                                           ! 208 #asm
00380                                           !BCC_ASM
00381                                           MACRO SET_INT_VECTOR
00382                                             push ds
00383                                             xor ax, ax
00384                                             mov ds, ax
00385                                             mov ax, ?3
00386                                             mov ?1*4, ax
00387                                             mov ax, ?2
00388                                             mov ?1*4+2, ax
00389                                             pop ds
00390                                           MEND
00391                                           ! 219 endasm
00392                                           !BCC_ENDASM
00393                                           ! 220 #asm
00394                                           !BCC_ASM
00395                                           
00396 0000                                      .rom
00397 0000                                      .org 0
00398                                           use16 386
00399                       00000000            vgabios_start:
00400 0000                        55            .byte 0x55, 0xaa
00401 0002                        40            .byte 0x40
00402                       00000003            vgabios_entry_point:
00403 0003           E9         0103              jmp vgabios_init_func
00404 001E                                      .org 0x1e
00405 001E                        49            .ascii "IBM"
00406 0021                        00            .byte 0x00
00407                       00000022            vgabios_name:
00408 0022                        50            .ascii "Plex86/Bochs VGABios"
00409 0036                        20            .ascii " "
00410 0037                        00            .byte 0x00
00411                       00000038            vgabios_version:
00412 0038                        63            .ascii "current-cvs"
00413 0043                        20            .ascii " "
00414                       00000044            vgabios_date:
00415 0044                        31            .ascii "10 Feb 2012"
00416 004F                        0A            .byte 0x0a,0x0d
00417 0051                        00            .byte 0x00
00418                       00000052            vgabios_copyright:
00419 0052                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00420 007B                        0A            .byte 0x0a,0x0d
00421 007D                        00            .byte 0x00
00422                       0000007E            vgabios_license:
00423 007E                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00424 00AE                        0A            .byte 0x0a,0x0d
00425 00B0                        0A            .byte 0x0a,0x0d
00426 00B2                        00            .byte 0x00
00427                       000000B3            vgabios_website:
00428 00B3                        50            .ascii "Please visit :"
00429 00C1                        0A            .byte 0x0a,0x0d
00430                                           ;;.ascii " . http://www.plex86.org"
00431                                           ;;.byte 0x0a,0x0d
00432 00C3                        20            .ascii " . http://bochs.sourceforge.net"
00433 00E2                        0A            .byte 0x0a,0x0d
00434 00E4                        20            .ascii " . http://www.nongnu.org/vgabios"
00435 0104                        0A            .byte 0x0a,0x0d
00436 0106                        0A            .byte 0x0a,0x0d
00437 0108                        00            .byte 0x00
00438                                           ;; ============================================================================================
00439                                           ;;
00440                                           ;; Init Entry point
00441                                           ;;
00442                                           ;; ============================================================================================
00443                       00000109            vgabios_init_func:
00444                                           ;; init vga card
00445 0109           E8         3465              call init_vga_card
00446                                           ;; init basic bios vars
00447 010C           E8         34C1              call init_bios_area
00448                                           ;; init vbe functions
00449 010F           E8         93B3              call vbe_init
00450                                           ;; set int10 vect
00451                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   0112           1E                           push ds
 +a   0113           31C0                         xor ax, ax
 +a   0115           8ED8                         mov ds, ax
 +a   0117           B8                   0133    mov ax,  #vgabios_int10_handler
 +a   011A           A3         0040              mov 0x10*4, ax
 +a   011D           B8                   C000    mov ax,  #0xC000
 +a   0120           A3         0042              mov 0x10*4+2, ax
 +a   0123           1F                           pop ds
00452                                           ;; display splash screen
00453 0124           E8         34FD              call _display_splash_screen
00454                                           ;; init video mode and clear the screen
00455 0127           B8                   0003    mov ax,#0x0003
00456 012A           CD                     10    int #0x10
00457                                           ;; show info
00458 012C           E8         34F6              call _display_info
00459                                           ;; show vbe info
00460 012F           E8         93C1              call vbe_display_info
00461 0132           CB                           retf
00462                                           ! 288 endasm
00463                                           !BCC_ENDASM
00464                                           ! 289 #asm
00465                                           !BCC_ASM
00466                       00000133            vgabios_int10_handler:
00467 0133           9C                           pushf
00468 0134           06                           push es
00469 0135           1E                           push ds
00470 0136           60                           pusha
00471 0137           BB                   C000    mov bx, #0xc000
00472 013A           8EDB                         mov ds, bx
00473 013C           E8         352B              call _int10_debugmsg
00474 013F           61                           popa
00475 0140           1F                           pop ds
00476 0141           07                           pop es
00477 0142           80FC                   0F    cmp ah, #0x0f
00478 0145           75           06              jne int10_test_1A
00479 0147           E8         6177              call biosfn_get_video_mode
00480 014A           E9         00BC              jmp int10_end
00481                       0000014D            int10_test_1A:
00482 014D           80FC                   1A    cmp ah, #0x1a
00483 0150           75           06              jne int10_test_0B
00484 0152           E8         6D1B              call biosfn_group_1A
00485 0155           E9         00B1              jmp int10_end
00486                       00000158            int10_test_0B:
00487 0158           80FC                   0B    cmp ah, #0x0b
00488 015B           75           06              jne int10_test_1103
00489 015D           E8         58D0              call biosfn_group_0B
00490 0160           E9         00A6              jmp int10_end
00491                       00000163            int10_test_1103:
00492 0163           3D                   1103    cmp ax, #0x1103
00493 0166           75           06              jne int10_test_12
00494 0168           E8         6854              call biosfn_set_text_block_specifier
00495 016B           E9         009B              jmp int10_end
00496                       0000016E            int10_test_12:
00497 016E           80FC                   12    cmp ah, #0x12
00498 0171           75           3E              jne int10_test_101B
00499 0173           80FB                   10    cmp bl, #0x10
00500 0176           75           06              jne int10_test_BL30
00501 0178           E8         6AD2              call biosfn_get_ega_info
00502 017B           E9         008B              jmp int10_end
00503                       0000017E            int10_test_BL30:
00504 017E           80FB                   30    cmp bl, #0x30
00505 0181           75           06              jne int10_test_BL31
00506 0183           E8         6AF2              call biosfn_select_vert_res
00507 0186           E9         0080              jmp int10_end
00508                       00000189            int10_test_BL31:
00509 0189           80FB                   31    cmp bl, #0x31
00510 018C           75           05              jne int10_test_BL32
00511 018E           E8         6B70              call biosfn_enable_default_palette_loading
00512 0191           EB           76              jmp int10_end
00513                       00000193            int10_test_BL32:
00514 0193           80FB                   32    cmp bl, #0x32
00515 0196           75           05              jne int10_test_BL33
00516 0198           E8         6B88              call biosfn_enable_video_addressing
00517 019B           EB           6C              jmp int10_end
00518                       0000019D            int10_test_BL33:
00519 019D           80FB                   33    cmp bl, #0x33
00520 01A0           75           05              jne int10_test_BL34
00521 01A2           E8         6B9C              call biosfn_enable_grayscale_summing
00522 01A5           EB           62              jmp int10_end
00523                       000001A7            int10_test_BL34:
00524 01A7           80FB                   34    cmp bl, #0x34
00525 01AA           75           4F              jne int10_normal
00526 01AC           E8         6BB6              call biosfn_enable_cursor_emulation
00527 01AF           EB           58              jmp int10_end
00528                       000001B1            int10_test_101B:
00529 01B1           3D                   101B    cmp ax, #0x101b
00530 01B4           74           45              je int10_normal
00531 01B6           80FC                   10    cmp ah, #0x10
00532 01B9           75           05              jne int10_test_4F
00533 01BB           E8         612A              call biosfn_group_10
00534 01BE           EB           49              jmp int10_end
00535                       000001C0            int10_test_4F:
00536 01C0           80FC                   4F    cmp ah, #0x4f
00537 01C3           75           36              jne int10_normal
00538 01C5           3C                     03    cmp al, #0x03
00539 01C7           75           05              jne int10_test_vbe_05
00540 01C9           E8         98BA              call vbe_biosfn_return_current_mode
00541 01CC           EB           3B              jmp int10_end
00542                       000001CE            int10_test_vbe_05:
00543 01CE           3C                     05    cmp al, #0x05
00544 01D0           75           05              jne int10_test_vbe_06
00545 01D2           E8         9BAC              call vbe_biosfn_display_window_control
00546 01D5           EB           32              jmp int10_end
00547                       000001D7            int10_test_vbe_06:
00548 01D7           3C                     06    cmp al, #0x06
00549 01D9           75           05              jne int10_test_vbe_07
00550 01DB           E8         9BD0              call vbe_biosfn_set_get_logical_scan_line_length
00551 01DE           EB           29              jmp int10_end
00552                       000001E0            int10_test_vbe_07:
00553 01E0           3C                     07    cmp al, #0x07
00554 01E2           75           05              jne int10_test_vbe_08
00555 01E4           E8         9C14              call vbe_biosfn_set_get_display_start
00556 01E7           EB           20              jmp int10_end
00557                       000001E9            int10_test_vbe_08:
00558 01E9           3C                     08    cmp al, #0x08
00559 01EB           75           05              jne int10_test_vbe_0A
00560 01ED           E8         9C39              call vbe_biosfn_set_get_dac_palette_format
00561 01F0           EB           17              jmp int10_end
00562                       000001F2            int10_test_vbe_0A:
00563 01F2           3C                     0A    cmp al, #0x0A
00564 01F4           75           05              jne int10_normal
00565 01F6           E8         9C68              call vbe_biosfn_return_protected_mode_interface
00566 01F9           EB           0E              jmp int10_end
00567                       000001FB            int10_normal:
00568 01FB           06                           push es
00569 01FC           1E                           push ds
00570 01FD           60                           pusha
00571                                           ;; We have to set ds to access the right data segment
00572 01FE           BB                   C000    mov bx, #0xc000
00573 0201           8EDB                         mov ds, bx
00574 0203           E8         3495              call _int10_func
00575                                           
00576 0206           61                           popa
00577 0207           1F                           pop ds
00578 0208           07                           pop es
00579                       00000209            int10_end:
00580 0209           9D                           popf
00581 020A           CF                           iret
00582                                           ! 406 endasm
00583                                           !BCC_ENDASM
00584                                           ! 407 typedef struct
00585                                           ! 408 {Bit8u svgamode;
00586                                           !BCC_EOS
00587                                           ! 409  Bit8u class;
00588                                           !BCC_EOS
00589                                           ! 410  Bit8u memmodel;
00590                                           !BCC_EOS
00591                                           ! 411  Bit8u pixbits;
00592                                           !BCC_EOS
00593                                           ! 412  Bit16u sstart;
00594                                           !BCC_EOS
00595                                           ! 413  Bit8u pelmask;
00596                                           !BCC_EOS
00597                                           ! 414  Bit8u dacmodel;
00598                                           !BCC_EOS
00599                                           ! 415 } VGAMODES;
00600                                           !BCC_EOS
00601                                           ! 416 static VGAMODES vga_modes[15 +1]=
00602                                           ! 417 {
00603                                           
00604                       0000020B            _vga_modes:
00605                                           ! 418  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00606 020B                        00            .byte	0
00607 020C                        00            .byte	0
00608 020D                        00            .byte	0
00609 020E                        04            .byte	4
00610 020F                      B800            .word	$B800
00611 0211                        FF            .byte	$FF
00612 0212                        02            .byte	2
00613                                           ! 419  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00614 0213                        01            .byte	1
00615 0214                        00            .byte	0
00616 0215                        00            .byte	0
00617 0216                        04            .byte	4
00618 0217                      B800            .word	$B800
00619 0219                        FF            .byte	$FF
00620 021A                        02            .byte	2
00621                                           ! 420  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00622 021B                        02            .byte	2
00623 021C                        00            .byte	0
00624 021D                        00            .byte	0
00625 021E                        04            .byte	4
00626 021F                      B800            .word	$B800
00627 0221                        FF            .byte	$FF
00628 0222                        02            .byte	2
00629                                           ! 421  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00630 0223                        03            .byte	3
00631 0224                        00            .byte	0
00632 0225                        00            .byte	0
00633 0226                        04            .byte	4
00634 0227                      B800            .word	$B800
00635 0229                        FF            .byte	$FF
00636 022A                        02            .byte	2
00637                                           ! 422  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00638 022B                        04            .byte	4
00639 022C                        01            .byte	1
00640 022D                        02            .byte	2
00641 022E                        02            .byte	2
00642 022F                      B800            .word	$B800
00643 0231                        FF            .byte	$FF
00644 0232                        01            .byte	1
00645                                           ! 423  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00646 0233                        05            .byte	5
00647 0234                        01            .byte	1
00648 0235                        02            .byte	2
00649 0236                        02            .byte	2
00650 0237                      B800            .word	$B800
00651 0239                        FF            .byte	$FF
00652 023A                        01            .byte	1
00653                                           ! 424  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00654 023B                        06            .byte	6
00655 023C                        01            .byte	1
00656 023D                        02            .byte	2
00657 023E                        01            .byte	1
00658 023F                      B800            .word	$B800
00659 0241                        FF            .byte	$FF
00660 0242                        01            .byte	1
00661                                           ! 425  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00662 0243                        07            .byte	7
00663 0244                        00            .byte	0
00664 0245                        01            .byte	1
00665 0246                        04            .byte	4
00666 0247                      B000            .word	$B000
00667 0249                        FF            .byte	$FF
00668 024A                        00            .byte	0
00669                                           ! 426  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00670 024B                        0D            .byte	$D
00671 024C                        01            .byte	1
00672 024D                        04            .byte	4
00673 024E                        04            .byte	4
00674 024F                      A000            .word	$A000
00675 0251                        FF            .byte	$FF
00676 0252                        01            .byte	1
00677                                           ! 427  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00678 0253                        0E            .byte	$E
00679 0254                        01            .byte	1
00680 0255                        04            .byte	4
00681 0256                        04            .byte	4
00682 0257                      A000            .word	$A000
00683 0259                        FF            .byte	$FF
00684 025A                        01            .byte	1
00685                                           ! 428  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00686 025B                        0F            .byte	$F
00687 025C                        01            .byte	1
00688 025D                        03            .byte	3
00689 025E                        01            .byte	1
00690 025F                      A000            .word	$A000
00691 0261                        FF            .byte	$FF
00692 0262                        00            .byte	0
00693                                           ! 429  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00694 0263                        10            .byte	$10
00695 0264                        01            .byte	1
00696 0265                        04            .byte	4
00697 0266                        04            .byte	4
00698 0267                      A000            .word	$A000
00699 0269                        FF            .byte	$FF
00700 026A                        02            .byte	2
00701                                           ! 430  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00702 026B                        11            .byte	$11
00703 026C                        01            .byte	1
00704 026D                        03            .byte	3
00705 026E                        01            .byte	1
00706 026F                      A000            .word	$A000
00707 0271                        FF            .byte	$FF
00708 0272                        02            .byte	2
00709                                           ! 431  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00710 0273                        12            .byte	$12
00711 0274                        01            .byte	1
00712 0275                        04            .byte	4
00713 0276                        04            .byte	4
00714 0277                      A000            .word	$A000
00715 0279                        FF            .byte	$FF
00716 027A                        02            .byte	2
00717                                           ! 432  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00718 027B                        13            .byte	$13
00719 027C                        01            .byte	1
00720 027D                        05            .byte	5
00721 027E                        08            .byte	8
00722 027F                      A000            .word	$A000
00723 0281                        FF            .byte	$FF
00724 0282                        03            .byte	3
00725                                           ! 433  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00726 0283                        6A            .byte	$6A
00727 0284                        01            .byte	1
00728 0285                        04            .byte	4
00729 0286                        04            .byte	4
00730 0287                      A000            .word	$A000
00731 0289                        FF            .byte	$FF
00732 028A                        02            .byte	2
00733                                           ! 434 };
00734                                           !BCC_EOS
00735                                           ! 435 static Bit8u line_to_vpti[15 +1]={
00736                       0000028B            _line_to_vpti:
00737                                           ! 436     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00738 028B                        17            .byte	$17
00739 028C                        17            .byte	$17
00740 028D                        18            .byte	$18
00741 028E                        18            .byte	$18
00742 028F                        04            .byte	4
00743 0290                        05            .byte	5
00744 0291                        06            .byte	6
00745 0292                        07            .byte	7
00746                                           ! 437     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00747 0293                        0D            .byte	$D
00748 0294                        0E            .byte	$E
00749 0295                        11            .byte	$11
00750 0296                        12            .byte	$12
00751 0297                        1A            .byte	$1A
00752 0298                        1B            .byte	$1B
00753 0299                        1C            .byte	$1C
00754 029A                        1D            .byte	$1D
00755                                           ! 438 };
00756                                           !BCC_EOS
00757                                           ! 439 static Bit8u dac_regs[3 +1]=
00758                                           ! 440 {0x3f,0x3f,0x3f,0xff};
00759                       0000029B            _dac_regs:
00760 029B                        3F            .byte	$3F
00761 029C                        3F            .byte	$3F
00762 029D                        3F            .byte	$3F
00763 029E                        FF            .byte	$FF
00764                                           !BCC_EOS
00765                                           ! 441 typedef struct {
00766                                           ! 442     Bit8u twidth;
00767                                           !BCC_EOS
00768                                           ! 443     Bit8u theightm1;
00769                                           !BCC_EOS
00770                                           ! 444     Bit8u cheight;
00771                                           !BCC_EOS
00772                                           ! 445     Bit8u slen
00773                                           ! 445 gth_l;
00774                                           !BCC_EOS
00775                                           ! 446     Bit8u slength_h;
00776                                           !BCC_EOS
00777                                           ! 447     Bit8u sequ_regs[4];
00778                                           !BCC_EOS
00779                                           ! 448     Bit8u miscreg;
00780                                           !BCC_EOS
00781                                           ! 449     Bit8u crtc_regs[25];
00782                                           !BCC_EOS
00783                                           ! 450     Bit8u actl_regs[20];
00784                                           !BCC_EOS
00785                                           ! 451     Bit8u grdc_regs[9];
00786                                           !BCC_EOS
00787                                           ! 452 } VideoParamTableEntry;
00788                                           !BCC_EOS
00789                                           ! 453 static VideoParamTableEntry video_param_table[30] = {
00790                       0000029F            _video_param_table:
00791                                           ! 454 {
00792                                           ! 455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00793 029F                        00            .byte	0
00794 02A0                        00            .byte	0
00795 02A1                        00            .byte	0
00796 02A2                        00            .byte	0
00797 02A3                        00            .byte	0
00798 02A4                        00            .byte	0
00799 02A5                        00            .byte	0
00800 02A6                        00            .byte	0
00801                                           ! 456  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00802 02A7                        00            .byte	0
00803 02A8                        00            .byte	0
00804 02A9                        00            .byte	0
00805 02AA                        00            .byte	0
00806 02AB                        00            .byte	0
00807 02AC                        00            .byte	0
00808 02AD                        00            .byte	0
00809 02AE                        00            .byte	0
00810                                           ! 457  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00811 02AF                        00            .byte	0
00812 02B0                        00            .byte	0
00813 02B1                        00            .byte	0
00814 02B2                        00            .byte	0
00815 02B3                        00            .byte	0
00816 02B4                        00            .byte	0
00817 02B5                        00            .byte	0
00818 02B6                        00            .byte	0
00819                                           ! 458  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00820 02B7                        00            .byte	0
00821 02B8                        00            .byte	0
00822 02B9                        00            .byte	0
00823 02BA                        00            .byte	0
00824 02BB                        00            .byte	0
00825 02BC                        00            .byte	0
00826 02BD                        00            .byte	0
00827 02BE                        00            .byte	0
00828                                           ! 459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00829 02BF                        00            .byte	0
00830 02C0                        00            .byte	0
00831 02C1                        00            .byte	0
00832 02C2                        00            .byte	0
00833 02C3                        00            .byte	0
00834 02C4                        00            .byte	0
00835 02C5                        00            .byte	0
00836 02C6                        00            .byte	0
00837                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00838 02C7                        00            .byte	0
00839 02C8                        00            .byte	0
00840 02C9                        00            .byte	0
00841 02CA                        00            .byte	0
00842 02CB                        00            .byte	0
00843 02CC                        00            .byte	0
00844 02CD                        00            .byte	0
00845 02CE                        00            .byte	0
00846                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00847 02CF                        00            .byte	0
00848 02D0                        00            .byte	0
00849 02D1                        00            .byte	0
00850 02D2                        00            .byte	0
00851 02D3                        00            .byte	0
00852 02D4                        00            .byte	0
00853 02D5                        00            .byte	0
00854 02D6                        00            .byte	0
00855                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00856 02D7                        00            .byte	0
00857 02D8                        00            .byte	0
00858 02D9                        00            .byte	0
00859 02DA                        00            .byte	0
00860 02DB                        00            .byte	0
00861 02DC                        00            .byte	0
00862 02DD                        00            .byte	0
00863 02DE                        00            .byte	0
00864                                           ! 463 },
00865                                           ! 464 {
00866                                           ! 465  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00867 02DF                        00            .byte	0
00868 02E0                        00            .byte	0
00869 02E1                        00            .byte	0
00870 02E2                        00            .byte	0
00871 02E3                        00            .byte	0
00872 02E4                        00            .byte	0
00873 02E5                        00            .byte	0
00874 02E6                        00            .byte	0
00875                                           ! 466  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00876 02E7                        00            .byte	0
00877 02E8                        00            .byte	0
00878 02E9                        00            .byte	0
00879 02EA                        00            .byte	0
00880 02EB                        00            .byte	0
00881 02EC                        00            .byte	0
00882 02ED                        00            .byte	0
00883 02EE                        00            .byte	0
00884                                           ! 467  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00885 02EF                        00            .byte	0
00886 02F0                        00            .byte	0
00887 02F1                        00            .byte	0
00888 02F2                        00            .byte	0
00889 02F3                        00            .byte	0
00890 02F4                        00            .byte	0
00891 02F5                        00            .byte	0
00892 02F6                        00            .byte	0
00893                                           ! 468  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00894 02F7                        00            .byte	0
00895 02F8                        00            .byte	0
00896 02F9                        00            .byte	0
00897 02FA                        00            .byte	0
00898 02FB                        00            .byte	0
00899 02FC                        00            .byte	0
00900 02FD                        00            .byte	0
00901 02FE                        00            .byte	0
00902                                           ! 469  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00903 02FF                        00            .byte	0
00904 0300                        00            .byte	0
00905 0301                        00            .byte	0
00906 0302                        00            .byte	0
00907 0303                        00            .byte	0
00908 0304                        00            .byte	0
00909 0305                        00            .byte	0
00910 0306                        00            .byte	0
00911                                           ! 470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00912 0307                        00            .byte	0
00913 0308                        00            .byte	0
00914 0309                        00            .byte	0
00915 030A                        00            .byte	0
00916 030B                        00            .byte	0
00917 030C                        00            .byte	0
00918 030D                        00            .byte	0
00919 030E                        00            .byte	0
00920                                           ! 471  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00921 030F                        00            .byte	0
00922 0310                        00            .byte	0
00923 0311                        00            .byte	0
00924 0312                        00            .byte	0
00925 0313                        00            .byte	0
00926 0314                        00            .byte	0
00927 0315                        00            .byte	0
00928 0316                        00            .byte	0
00929                                           ! 472  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00930 0317                        00            .byte	0
00931 0318                        00            .byte	0
00932 0319                        00            .byte	0
00933 031A                        00            .byte	0
00934 031B                        00            .byte	0
00935 031C                        00            .byte	0
00936 031D                        00            .byte	0
00937 031E                        00            .byte	0
00938                                           ! 473 },
00939                                           ! 474 {
00940                                           ! 475  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00941 031F                        00            .byte	0
00942 0320                        00            .byte	0
00943 0321                        00            .byte	0
00944 0322                        00            .byte	0
00945 0323                        00            .byte	0
00946 0324                        00            .byte	0
00947 0325                        00            .byte	0
00948 0326                        00            .byte	0
00949                                           ! 476  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00950 0327                        00            .byte	0
00951 0328                        00            .byte	0
00952 0329                        00            .byte	0
00953 032A                        00            .byte	0
00954 032B                        00            .byte	0
00955 032C                        00            .byte	0
00956 032D                        00            .byte	0
00957 032E                        00            .byte	0
00958                                           ! 477  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00959 032F                        00            .byte	0
00960 0330                        00            .byte	0
00961 0331                        00            .byte	0
00962 0332                        00            .byte	0
00963 0333                        00            .byte	0
00964 0334                        00            .byte	0
00965 0335                        00            .byte	0
00966 0336                        00            .byte	0
00967                                           ! 478  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00968 0337                        00            .byte	0
00969 0338                        00            .byte	0
00970 0339                        00            .byte	0
00971 033A                        00            .byte	0
00972 033B                        00            .byte	0
00973 033C                        00            .byte	0
00974 033D                        00            .byte	0
00975 033E                        00            .byte	0
00976                                           ! 479  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00977 033F                        00            .byte	0
00978 0340                        00            .byte	0
00979 0341                        00            .byte	0
00980 0342                        00            .byte	0
00981 0343                        00            .byte	0
00982 0344                        00            .byte	0
00983 0345                        00            .byte	0
00984 0346                        00            .byte	0
00985                                           ! 480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00986 0347                        00            .byte	0
00987 0348                        00            .byte	0
00988 0349                        00            .byte	0
00989 034A                        00            .byte	0
00990 034B                        00            .byte	0
00991 034C                        00            .byte	0
00992 034D                        00            .byte	0
00993 034E                        00            .byte	0
00994                                           ! 481  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00995 034F                        00            .byte	0
00996 0350                        00            .byte	0
00997 0351                        00            .byte	0
00998 0352                        00            .byte	0
00999 0353                        00            .byte	0
01000 0354                        00            .byte	0
01001 0355                        00            .byte	0
01002 0356                        00            .byte	0
01003                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01004 0357                        00            .byte	0
01005 0358                        00            .byte	0
01006 0359                        00            .byte	0
01007 035A                        00            .byte	0
01008 035B                        00            .byte	0
01009 035C                        00            .byte	0
01010 035D                        00            .byte	0
01011 035E                        00            .byte	0
01012                                           ! 483 },
01013                                           ! 484 {
01014                                           ! 485  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01015 035F                        00            .byte	0
01016 0360                        00            .byte	0
01017 0361                        00            .byte	0
01018 0362                        00            .byte	0
01019 0363                        00            .byte	0
01020 0364                        00            .byte	0
01021 0365                        00            .byte	0
01022 0366                        00            .byte	0
01023                                           ! 486  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01024 0367                        00            .byte	0
01025 0368                        00            .byte	0
01026 0369                        00            .byte	0
01027 036A                        00            .byte	0
01028 036B                        00            .byte	0
01029 036C                        00            .byte	0
01030 036D                        00            .byte	0
01031 036E                        00            .byte	0
01032                                           ! 487  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01033 036F                        00            .byte	0
01034 0370                        00            .byte	0
01035 0371                        00            .byte	0
01036 0372                        00            .byte	0
01037 0373                        00            .byte	0
01038 0374                        00            .byte	0
01039 0375                        00            .byte	0
01040 0376                        00            .byte	0
01041                                           ! 488  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01042 0377                        00            .byte	0
01043 0378                        00            .byte	0
01044 0379                        00            .byte	0
01045 037A                        00            .byte	0
01046 037B                        00            .byte	0
01047 037C                        00            .byte	0
01048 037D                        00            .byte	0
01049 037E                        00            .byte	0
01050                                           ! 489  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01051 037F                        00            .byte	0
01052 0380                        00            .byte	0
01053 0381                        00            .byte	0
01054 0382                        00            .byte	0
01055 0383                        00            .byte	0
01056 0384                        00            .byte	0
01057 0385                        00            .byte	0
01058 0386                        00            .byte	0
01059                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01060 0387                        00            .byte	0
01061 0388                        00            .byte	0
01062 0389                        00            .byte	0
01063 038A                        00            .byte	0
01064 038B                        00            .byte	0
01065 038C                        00            .byte	0
01066 038D                        00            .byte	0
01067 038E                        00            .byte	0
01068                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01069 038F                        00            .byte	0
01070 0390                        00            .byte	0
01071 0391                        00            .byte	0
01072 0392                        00            .byte	0
01073 0393                        00            .byte	0
01074 0394                        00            .byte	0
01075 0395                        00            .byte	0
01076 0396                        00            .byte	0
01077                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01078 0397                        00            .byte	0
01079 0398                        00            .byte	0
01080 0399                        00            .byte	0
01081 039A                        00            .byte	0
01082 039B                        00            .byte	0
01083 039C                        00            .byte	0
01084 039D                        00            .byte	0
01085 039E                        00            .byte	0
01086                                           ! 493 },
01087                                           ! 494 {
01088                                           ! 495  40, 24, 8, 0x00, 0x08,
01089 039F                        28            .byte	$28
01090 03A0                        18            .byte	$18
01091 03A1                        08            .byte	8
01092 03A2                        00            .byte	0
01093 03A3                        08            .byte	8
01094                                           ! 496  0x09, 0x03, 0x00, 0x02,
01095 03A4                        09            .byte	9
01096 03A5                        03            .byte	3
01097 03A6                        00            .byte	0
01098 03A7                        02            .byte	2
01099                                           ! 497  0x63,
01100 03A8                        63            .byte	$63
01101                                           ! 498  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01102 03A9                        2D            .byte	$2D
01103 03AA                        27            .byte	$27
01104 03AB                        28            .byte	$28
01105 03AC                        90            .byte	$90
01106 03AD                        2B            .byte	$2B
01107 03AE                        80            .byte	$80
01108 03AF                        BF            .byte	$BF
01109 03B0                        1F            .byte	$1F
01110                                           ! 499  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01111 03B1                        00            .byte	0
01112 03B2                        C1            .byte	$C1
01113 03B3                        00            .byte	0
01114 03B4                        00            .byte	0
01115 03B5                        00            .byte	0
01116 03B6                        00            .byte	0
01117 03B7                        00            .byte	0
01118 03B8                        00            .byte	0
01119                                           ! 500  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01120 03B9                        9C            .byte	$9C
01121 03BA                        8E            .byte	$8E
01122 03BB                        8F            .byte	$8F
01123 03BC                        14            .byte	$14
01124 03BD                        00            .byte	0
01125 03BE                        96            .byte	$96
01126 03BF                        B9            .byte	$B9
01127 03C0                        A2            .byte	$A2
01128                                           ! 501  0xff,
01129 03C1                        FF            .byte	$FF
01130                                           ! 502  0x00, 0x13, 0x15, 0x17, 
01131 03C2                        00            .byte	0
01132 03C3                        13            .byte	$13
01133 03C4                        15            .byte	$15
01134 03C5                        17            .byte	$17
01135                                           ! 502 0x02, 0x04, 0x06, 0x07,
01136 03C6                        02            .byte	2
01137 03C7                        04            .byte	4
01138 03C8                        06            .byte	6
01139 03C9                        07            .byte	7
01140                                           ! 503  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01141 03CA                        10            .byte	$10
01142 03CB                        11            .byte	$11
01143 03CC                        12            .byte	$12
01144 03CD                        13            .byte	$13
01145 03CE                        14            .byte	$14
01146 03CF                        15            .byte	$15
01147 03D0                        16            .byte	$16
01148 03D1                        17            .byte	$17
01149                                           ! 504  0x01, 0x00, 0x03, 0x00,
01150 03D2                        01            .byte	1
01151 03D3                        00            .byte	0
01152 03D4                        03            .byte	3
01153 03D5                        00            .byte	0
01154                                           ! 505  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01155 03D6                        00            .byte	0
01156 03D7                        00            .byte	0
01157 03D8                        00            .byte	0
01158 03D9                        00            .byte	0
01159 03DA                        00            .byte	0
01160 03DB                        30            .byte	$30
01161 03DC                        0F            .byte	$F
01162 03DD                        0F            .byte	$F
01163 03DE                        FF            .byte	$FF
01164                                           ! 506 },
01165                                           ! 507 {
01166                                           ! 508  40, 24, 8, 0x00, 0x08,
01167 03DF                        28            .byte	$28
01168 03E0                        18            .byte	$18
01169 03E1                        08            .byte	8
01170 03E2                        00            .byte	0
01171 03E3                        08            .byte	8
01172                                           ! 509  0x09, 0x03, 0x00, 0x02,
01173 03E4                        09            .byte	9
01174 03E5                        03            .byte	3
01175 03E6                        00            .byte	0
01176 03E7                        02            .byte	2
01177                                           ! 510  0x63,
01178 03E8                        63            .byte	$63
01179                                           ! 511  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01180 03E9                        2D            .byte	$2D
01181 03EA                        27            .byte	$27
01182 03EB                        28            .byte	$28
01183 03EC                        90            .byte	$90
01184 03ED                        2B            .byte	$2B
01185 03EE                        80            .byte	$80
01186 03EF                        BF            .byte	$BF
01187 03F0                        1F            .byte	$1F
01188                                           ! 512  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01189 03F1                        00            .byte	0
01190 03F2                        C1            .byte	$C1
01191 03F3                        00            .byte	0
01192 03F4                        00            .byte	0
01193 03F5                        00            .byte	0
01194 03F6                        00            .byte	0
01195 03F7                        00            .byte	0
01196 03F8                        00            .byte	0
01197                                           ! 513  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01198 03F9                        9C            .byte	$9C
01199 03FA                        8E            .byte	$8E
01200 03FB                        8F            .byte	$8F
01201 03FC                        14            .byte	$14
01202 03FD                        00            .byte	0
01203 03FE                        96            .byte	$96
01204 03FF                        B9            .byte	$B9
01205 0400                        A2            .byte	$A2
01206                                           ! 514  0xff,
01207 0401                        FF            .byte	$FF
01208                                           ! 515  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01209 0402                        00            .byte	0
01210 0403                        13            .byte	$13
01211 0404                        15            .byte	$15
01212 0405                        17            .byte	$17
01213 0406                        02            .byte	2
01214 0407                        04            .byte	4
01215 0408                        06            .byte	6
01216 0409                        07            .byte	7
01217                                           ! 516  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01218 040A                        10            .byte	$10
01219 040B                        11            .byte	$11
01220 040C                        12            .byte	$12
01221 040D                        13            .byte	$13
01222 040E                        14            .byte	$14
01223 040F                        15            .byte	$15
01224 0410                        16            .byte	$16
01225 0411                        17            .byte	$17
01226                                           ! 517  0x01, 0x00, 0x03, 0x00,
01227 0412                        01            .byte	1
01228 0413                        00            .byte	0
01229 0414                        03            .byte	3
01230 0415                        00            .byte	0
01231                                           ! 518  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01232 0416                        00            .byte	0
01233 0417                        00            .byte	0
01234 0418                        00            .byte	0
01235 0419                        00            .byte	0
01236 041A                        00            .byte	0
01237 041B                        30            .byte	$30
01238 041C                        0F            .byte	$F
01239 041D                        0F            .byte	$F
01240 041E                        FF            .byte	$FF
01241                                           ! 519 },
01242                                           ! 520 {
01243                                           ! 521  80, 24, 8, 0x00, 0x10,
01244 041F                        50            .byte	$50
01245 0420                        18            .byte	$18
01246 0421                        08            .byte	8
01247 0422                        00            .byte	0
01248 0423                        10            .byte	$10
01249                                           ! 522  0x01, 0x01, 0x00, 0x06,
01250 0424                        01            .byte	1
01251 0425                        01            .byte	1
01252 0426                        00            .byte	0
01253 0427                        06            .byte	6
01254                                           ! 523  0x63,
01255 0428                        63            .byte	$63
01256                                           ! 524  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01257 0429                        5F            .byte	$5F
01258 042A                        4F            .byte	$4F
01259 042B                        50            .byte	$50
01260 042C                        82            .byte	$82
01261 042D                        54            .byte	$54
01262 042E                        80            .byte	$80
01263 042F                        BF            .byte	$BF
01264 0430                        1F            .byte	$1F
01265                                           ! 525  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01266 0431                        00            .byte	0
01267 0432                        C1            .byte	$C1
01268 0433                        00            .byte	0
01269 0434                        00            .byte	0
01270 0435                        00            .byte	0
01271 0436                        00            .byte	0
01272 0437                        00            .byte	0
01273 0438                        00            .byte	0
01274                                           ! 526  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01275 0439                        9C            .byte	$9C
01276 043A                        8E            .byte	$8E
01277 043B                        8F            .byte	$8F
01278 043C                        28            .byte	$28
01279 043D                        00            .byte	0
01280 043E                        96            .byte	$96
01281 043F                        B9            .byte	$B9
01282 0440                        C2            .byte	$C2
01283                                           ! 527  0xff,
01284 0441                        FF            .byte	$FF
01285                                           ! 528  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01286 0442                        00            .byte	0
01287 0443                        17            .byte	$17
01288 0444                        17            .byte	$17
01289 0445                        17            .byte	$17
01290 0446                        17            .byte	$17
01291 0447                        17            .byte	$17
01292 0448                        17            .byte	$17
01293 0449                        17            .byte	$17
01294                                           ! 529  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01295 044A                        17            .byte	$17
01296 044B                        17            .byte	$17
01297 044C                        17            .byte	$17
01298 044D                        17            .byte	$17
01299 044E                        17            .byte	$17
01300 044F                        17            .byte	$17
01301 0450                        17            .byte	$17
01302 0451                        17            .byte	$17
01303                                           ! 530  0x01, 0x00, 0x01, 0x00,
01304 0452                        01            .byte	1
01305 0453                        00            .byte	0
01306 0454                        01            .byte	1
01307 0455                        00            .byte	0
01308                                           ! 531  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01309 0456                        00            .byte	0
01310 0457                        00            .byte	0
01311 0458                        00            .byte	0
01312 0459                        00            .byte	0
01313 045A                        00            .byte	0
01314 045B                        00            .byte	0
01315 045C                        0D            .byte	$D
01316 045D                        0F            .byte	$F
01317 045E                        FF            .byte	$FF
01318                                           ! 532 },
01319                                           ! 533 {
01320                                           ! 534  80, 24, 16, 0x00, 0x10,
01321 045F                        50            .byte	$50
01322 0460                        18            .byte	$18
01323 0461                        10            .byte	$10
01324 0462                        00            .byte	0
01325 0463                        10            .byte	$10
01326                                           ! 535  0x00, 0x03, 0x00, 0x02,
01327 0464                        00            .byte	0
01328 0465                        03            .byte	3
01329 0466                        00            .byte	0
01330 0467                        02            .byte	2
01331                                           ! 536  0x66,
01332 0468                        66            .byte	$66
01333                                           ! 537  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01334 0469                        5F            .byte	$5F
01335 046A                        4F            .byte	$4F
01336 046B                        50            .byte	$50
01337 046C                        82            .byte	$82
01338 046D                        55            .byte	$55
01339 046E                        81            .byte	$81
01340 046F                        BF            .byte	$BF
01341 0470                        1F            .byte	$1F
01342                                           ! 538  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01343 0471                        00            .byte	0
01344 0472                        4F            .byte	$4F
01345 0473                        0D            .byte	$D
01346 0474                        0E            .byte	$E
01347 0475                        00            .byte	0
01348 0476                        00            .byte	0
01349 0477                        00            .byte	0
01350 0478                        00            .byte	0
01351                                           ! 539  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01352 0479                        9C            .byte	$9C
01353 047A                        8E            .byte	$8E
01354 047B                        8F            .byte	$8F
01355 047C                        28            .byte	$28
01356 047D                        0F            .byte	$F
01357 047E                        96            .byte	$96
01358 047F                        B9            .byte	$B9
01359 0480                        A3            .byte	$A3
01360                                           ! 540  0xff,
01361 0481                        FF            .byte	$FF
01362                                           ! 541  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01363 0482                        00            .byte	0
01364 0483                        08            .byte	8
01365 0484                        08            .byte	8
01366 0485                        08            .byte	8
01367 0486                        08            .byte	8
01368 0487                        08            .byte	8
01369 0488                        08            .byte	8
01370 0489                        08            .byte	8
01371                                           ! 542  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01372 048A                        10            .byte	$10
01373 048B                        18            .byte	$18
01374 048C                        18            .byte	$18
01375 048D                        18            .byte	$18
01376 048E                        18            .byte	$18
01377 048F                        18            .byte	$18
01378 0490                        18            .byte	$18
01379 0491                        18            .byte	$18
01380                                           ! 543  0x0e, 0x00, 0x0f, 0x08,
01381 0492                        0E            .byte	$E
01382 0493                        00            .byte	0
01383 0494                        0F            .byte	$F
01384 0495                        08            .byte	8
01385                                           ! 544  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01386 0496                        00            .byte	0
01387 0497                        00            .byte	0
01388 0498                        00            .byte	0
01389 0499                        00            .byte	0
01390 049A                        00            .byte	0
01391 049B                        10            .byte	$10
01392 049C                        0A            .byte	$A
01393 049D                        0F            .byte	$F
01394 049E                        FF            .byte	$FF
01395                                           ! 545 },
01396                                           ! 546 {
01397                                           ! 547  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01398 049F                        00            .byte	0
01399 04A0                        00            .byte	0
01400 04A1                        00            .byte	0
01401 04A2                        00            .byte	0
01402 04A3                        00            .byte	0
01403 04A4                        00            .byte	0
01404 04A5                        00            .byte	0
01405 04A6                        00            .byte	0
01406                                           ! 548  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01407 04A7                        00            .byte	0
01408 04A8                        00            .byte	0
01409 04A9                        00            .byte	0
01410 04AA                        00            .byte	0
01411 04AB                        00            .byte	0
01412 04AC                        00            .byte	0
01413 04AD                        00            .byte	0
01414 04AE                        00            .byte	0
01415                                           ! 549  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01416 04AF                        00            .byte	0
01417 04B0                        00            .byte	0
01418 04B1                        00            .byte	0
01419 04B2                        00            .byte	0
01420 04B3                        00            .byte	0
01421 04B4                        00            .byte	0
01422 04B5                        00            .byte	0
01423 04B6                        00            .byte	0
01424                                           ! 550  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01425 04B7                        00            .byte	0
01426 04B8                        00            .byte	0
01427 04B9                        00            .byte	0
01428 04BA                        00            .byte	0
01429 04BB                        00            .byte	0
01430 04BC                        00            .byte	0
01431 04BD                        00            .byte	0
01432 04BE                        00            .byte	0
01433                                           ! 551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01434 04BF                        00            .byte	0
01435 04C0                        00            .byte	0
01436 04C1                        00            .byte	0
01437 04C2                        00            .byte	0
01438 04C3                        00            .byte	0
01439 04C4                        00            .byte	0
01440 04C5                        00            .byte	0
01441 04C6                        00            .byte	0
01442                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01443 04C7                        00            .byte	0
01444 04C8                        00            .byte	0
01445 04C9                        00            .byte	0
01446 04CA                        00            .byte	0
01447 04CB                        00            .byte	0
01448 04CC                        00            .byte	0
01449 04CD                        00            .byte	0
01450 04CE                        00            .byte	0
01451                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01452 04CF                        00            .byte	0
01453 04D0                        00            .byte	0
01454 04D1                        00            .byte	0
01455 04D2                        00            .byte	0
01456 04D3                        00            .byte	0
01457 04D4                        00            .byte	0
01458 04D5                        00            .byte	0
01459 04D6                        00            .byte	0
01460                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01461 04D7                        00            .byte	0
01462 04D8                        00            .byte	0
01463 04D9                        00            .byte	0
01464 04DA                        00            .byte	0
01465 04DB                        00            .byte	0
01466 04DC                        00            .byte	0
01467 04DD                        00            .byte	0
01468 04DE                        00            .byte	0
01469                                           ! 555 },
01470                                           ! 556 {
01471                                           ! 557  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01472 04DF                        00            .byte	0
01473 04E0                        00            .byte	0
01474 04E1                        00            .byte	0
01475 04E2                        00            .byte	0
01476 04E3                        00            .byte	0
01477 04E4                        00            .byte	0
01478 04E5                        00            .byte	0
01479 04E6                        00            .byte	0
01480                                           ! 558  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01481 04E7                        00            .byte	0
01482 04E8                        00            .byte	0
01483 04E9                        00            .byte	0
01484 04EA                        00            .byte	0
01485 04EB                        00            .byte	0
01486 04EC                        00            .byte	0
01487 04ED                        00            .byte	0
01488 04EE                        00            .byte	0
01489                                           ! 559  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01490 04EF                        00            .byte	0
01491 04F0                        00            .byte	0
01492 04F1                        00            .byte	0
01493 04F2                        00            .byte	0
01494 04F3                        00            .byte	0
01495 04F4                        00            .byte	0
01496 04F5                        00            .byte	0
01497 04F6                        00            .byte	0
01498                                           ! 560  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01499 04F7                        00            .byte	0
01500 04F8                        00            .byte	0
01501 04F9                        00            .byte	0
01502 04FA                        00            .byte	0
01503 04FB                        00            .byte	0
01504 04FC                        00            .byte	0
01505 04FD                        00            .byte	0
01506 04FE                        00            .byte	0
01507                                           ! 561  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01508 04FF                        00            .byte	0
01509 0500                        00            .byte	0
01510 0501                        00            .byte	0
01511 0502                        00            .byte	0
01512 0503                        00            .byte	0
01513 0504                        00            .byte	0
01514 0505                        00            .byte	0
01515 0506                        00            .byte	0
01516                                           ! 562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01517 0507                        00            .byte	0
01518 0508                        00            .byte	0
01519 0509                        00            .byte	0
01520 050A                        00            .byte	0
01521 050B                        00            .byte	0
01522 050C                        00            .byte	0
01523 050D                        00            .byte	0
01524 050E                        00            .byte	0
01525                                           ! 563  0x00, 0x00, 0x00, 
01526 050F                        00            .byte	0
01527 0510                        00            .byte	0
01528 0511                        00            .byte	0
01529                                           ! 563 0x00, 0x00, 0x00, 0x00, 0x00,
01530 0512                        00            .byte	0
01531 0513                        00            .byte	0
01532 0514                        00            .byte	0
01533 0515                        00            .byte	0
01534 0516                        00            .byte	0
01535                                           ! 564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01536 0517                        00            .byte	0
01537 0518                        00            .byte	0
01538 0519                        00            .byte	0
01539 051A                        00            .byte	0
01540 051B                        00            .byte	0
01541 051C                        00            .byte	0
01542 051D                        00            .byte	0
01543 051E                        00            .byte	0
01544                                           ! 565 },
01545                                           ! 566 {
01546                                           ! 567  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01547 051F                        00            .byte	0
01548 0520                        00            .byte	0
01549 0521                        00            .byte	0
01550 0522                        00            .byte	0
01551 0523                        00            .byte	0
01552 0524                        00            .byte	0
01553 0525                        00            .byte	0
01554 0526                        00            .byte	0
01555                                           ! 568  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01556 0527                        00            .byte	0
01557 0528                        00            .byte	0
01558 0529                        00            .byte	0
01559 052A                        00            .byte	0
01560 052B                        00            .byte	0
01561 052C                        00            .byte	0
01562 052D                        00            .byte	0
01563 052E                        00            .byte	0
01564                                           ! 569  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01565 052F                        00            .byte	0
01566 0530                        00            .byte	0
01567 0531                        00            .byte	0
01568 0532                        00            .byte	0
01569 0533                        00            .byte	0
01570 0534                        00            .byte	0
01571 0535                        00            .byte	0
01572 0536                        00            .byte	0
01573                                           ! 570  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01574 0537                        00            .byte	0
01575 0538                        00            .byte	0
01576 0539                        00            .byte	0
01577 053A                        00            .byte	0
01578 053B                        00            .byte	0
01579 053C                        00            .byte	0
01580 053D                        00            .byte	0
01581 053E                        00            .byte	0
01582                                           ! 571  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01583 053F                        00            .byte	0
01584 0540                        00            .byte	0
01585 0541                        00            .byte	0
01586 0542                        00            .byte	0
01587 0543                        00            .byte	0
01588 0544                        00            .byte	0
01589 0545                        00            .byte	0
01590 0546                        00            .byte	0
01591                                           ! 572  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01592 0547                        00            .byte	0
01593 0548                        00            .byte	0
01594 0549                        00            .byte	0
01595 054A                        00            .byte	0
01596 054B                        00            .byte	0
01597 054C                        00            .byte	0
01598 054D                        00            .byte	0
01599 054E                        00            .byte	0
01600                                           ! 573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01601 054F                        00            .byte	0
01602 0550                        00            .byte	0
01603 0551                        00            .byte	0
01604 0552                        00            .byte	0
01605 0553                        00            .byte	0
01606 0554                        00            .byte	0
01607 0555                        00            .byte	0
01608 0556                        00            .byte	0
01609                                           ! 574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01610 0557                        00            .byte	0
01611 0558                        00            .byte	0
01612 0559                        00            .byte	0
01613 055A                        00            .byte	0
01614 055B                        00            .byte	0
01615 055C                        00            .byte	0
01616 055D                        00            .byte	0
01617 055E                        00            .byte	0
01618                                           ! 575 },
01619                                           ! 576 {
01620                                           ! 577  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01621 055F                        00            .byte	0
01622 0560                        00            .byte	0
01623 0561                        00            .byte	0
01624 0562                        00            .byte	0
01625 0563                        00            .byte	0
01626 0564                        00            .byte	0
01627 0565                        00            .byte	0
01628 0566                        00            .byte	0
01629                                           ! 578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01630 0567                        00            .byte	0
01631 0568                        00            .byte	0
01632 0569                        00            .byte	0
01633 056A                        00            .byte	0
01634 056B                        00            .byte	0
01635 056C                        00            .byte	0
01636 056D                        00            .byte	0
01637 056E                        00            .byte	0
01638                                           ! 579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01639 056F                        00            .byte	0
01640 0570                        00            .byte	0
01641 0571                        00            .byte	0
01642 0572                        00            .byte	0
01643 0573                        00            .byte	0
01644 0574                        00            .byte	0
01645 0575                        00            .byte	0
01646 0576                        00            .byte	0
01647                                           ! 580  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01648 0577                        00            .byte	0
01649 0578                        00            .byte	0
01650 0579                        00            .byte	0
01651 057A                        00            .byte	0
01652 057B                        00            .byte	0
01653 057C                        00            .byte	0
01654 057D                        00            .byte	0
01655 057E                        00            .byte	0
01656                                           ! 581  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01657 057F                        00            .byte	0
01658 0580                        00            .byte	0
01659 0581                        00            .byte	0
01660 0582                        00            .byte	0
01661 0583                        00            .byte	0
01662 0584                        00            .byte	0
01663 0585                        00            .byte	0
01664 0586                        00            .byte	0
01665                                           ! 582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01666 0587                        00            .byte	0
01667 0588                        00            .byte	0
01668 0589                        00            .byte	0
01669 058A                        00            .byte	0
01670 058B                        00            .byte	0
01671 058C                        00            .byte	0
01672 058D                        00            .byte	0
01673 058E                        00            .byte	0
01674                                           ! 583  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01675 058F                        00            .byte	0
01676 0590                        00            .byte	0
01677 0591                        00            .byte	0
01678 0592                        00            .byte	0
01679 0593                        00            .byte	0
01680 0594                        00            .byte	0
01681 0595                        00            .byte	0
01682 0596                        00            .byte	0
01683                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01684 0597                        00            .byte	0
01685 0598                        00            .byte	0
01686 0599                        00            .byte	0
01687 059A                        00            .byte	0
01688 059B                        00            .byte	0
01689 059C                        00            .byte	0
01690 059D                        00            .byte	0
01691 059E                        00            .byte	0
01692                                           ! 585 },
01693                                           ! 586 {
01694                                           ! 587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01695 059F                        00            .byte	0
01696 05A0                        00            .byte	0
01697 05A1                        00            .byte	0
01698 05A2                        00            .byte	0
01699 05A3                        00            .byte	0
01700 05A4                        00            .byte	0
01701 05A5                        00            .byte	0
01702 05A6                        00            .byte	0
01703                                           ! 588  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01704 05A7                        00            .byte	0
01705 05A8                        00            .byte	0
01706 05A9                        00            .byte	0
01707 05AA                        00            .byte	0
01708 05AB                        00            .byte	0
01709 05AC                        00            .byte	0
01710 05AD                        00            .byte	0
01711 05AE                        00            .byte	0
01712                                           ! 589  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01713 05AF                        00            .byte	0
01714 05B0                        00            .byte	0
01715 05B1                        00            .byte	0
01716 05B2                        00            .byte	0
01717 05B3                        00            .byte	0
01718 05B4                        00            .byte	0
01719 05B5                        00            .byte	0
01720 05B6                        00            .byte	0
01721                                           ! 590  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01722 05B7                        00            .byte	0
01723 05B8                        00            .byte	0
01724 05B9                        00            .byte	0
01725 05BA                        00            .byte	0
01726 05BB                        00            .byte	0
01727 05BC                        00            .byte	0
01728 05BD                        00            .byte	0
01729 05BE                        00            .byte	0
01730                                           ! 591  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01731 05BF                        00            .byte	0
01732 05C0                        00            .byte	0
01733 05C1                        00            .byte	0
01734 05C2                        00            .byte	0
01735 05C3                        00            .byte	0
01736 05C4                        00            .byte	0
01737 05C5                        00            .byte	0
01738 05C6                        00            .byte	0
01739                                           ! 592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01740 05C7                        00            .byte	0
01741 05C8                        00            .byte	0
01742 05C9                        00            .byte	0
01743 05CA                        00            .byte	0
01744 05CB                        00            .byte	0
01745 05CC                        00            .byte	0
01746 05CD                        00            .byte	0
01747 05CE                        00            .byte	0
01748                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01749 05CF                        00            .byte	0
01750 05D0                        00            .byte	0
01751 05D1                        00            .byte	0
01752 05D2                        00            .byte	0
01753 05D3                        00            .byte	0
01754 05D4                        00            .byte	0
01755 05D5                        00            .byte	0
01756 05D6                        00            .byte	0
01757                                           ! 594  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01758 05D7                        00            .byte	0
01759 05D8                        00            .byte	0
01760 05D9                        00            .byte	0
01761 05DA                        00            .byte	0
01762 05DB                        00            .byte	0
01763 05DC                        00            .byte	0
01764 05DD                        00            .byte	0
01765 05DE                        00            .byte	0
01766                                           ! 595 },
01767                                           ! 596 {
01768                                           ! 597  40, 24, 8, 0x00, 0x20,
01769 05DF                        28            .byte	$28
01770 05E0                        18            .byte	$18
01771 05E1                        08            .byte	8
01772 05E2                        00            .byte	0
01773 05E3                        20            .byte	$20
01774                                           ! 598  0x09, 0x0f, 0x00, 0x06,
01775 05E4                        09            .byte	9
01776 05E5                        0F            .byte	$F
01777 05E6                        00            .byte	0
01778 05E7                        06            .byte	6
01779                                           ! 599  0x63,
01780 05E8                        63            .byte	$63
01781                                           ! 600  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01782 05E9                        2D            .byte	$2D
01783 05EA                        27            .byte	$27
01784 05EB                        28            .byte	$28
01785 05EC                        90            .byte	$90
01786 05ED                        2B            .byte	$2B
01787 05EE                        80            .byte	$80
01788 05EF                        BF            .byte	$BF
01789 05F0                        1F            .byte	$1F
01790                                           ! 601  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01791 05F1                        00            .byte	0
01792 05F2                        C0            .byte	$C0
01793 05F3                        00            .byte	0
01794 05F4                        00            .byte	0
01795 05F5                        00            .byte	0
01796 05F6                        00            .byte	0
01797 05F7                        00            .byte	0
01798 05F8                        00            .byte	0
01799                                           ! 602  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01800 05F9                        9C            .byte	$9C
01801 05FA                        8E            .byte	$8E
01802 05FB                        8F            .byte	$8F
01803 05FC                        14            .byte	$14
01804 05FD                        00            .byte	0
01805 05FE                        96            .byte	$96
01806 05FF                        B9            .byte	$B9
01807 0600                        E3            .byte	$E3
01808                                           ! 603  0xff,
01809 0601                        FF            .byte	$FF
01810                                           ! 604  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01811 0602                        00            .byte	0
01812 0603                        01            .byte	1
01813 0604                        02            .byte	2
01814 0605                        03            .byte	3
01815 0606                        04            .byte	4
01816 0607                        05            .byte	5
01817 0608                        06            .byte	6
01818 0609                        07            .byte	7
01819                                           ! 605  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01820 060A                        10            .byte	$10
01821 060B                        11            .byte	$11
01822 060C                        12            .byte	$12
01823 060D                        13            .byte	$13
01824 060E                        14            .byte	$14
01825 060F                        15            .byte	$15
01826 0610                        16            .byte	$16
01827 0611                        17            .byte	$17
01828                                           ! 606  0x01, 0x00, 0x0f, 0x00,
01829 0612                        01            .byte	1
01830 0613                        00            .byte	0
01831 0614                        0F            .byte	$F
01832 0615                        00            .byte	0
01833                                           ! 607  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01834 0616                        00            .byte	0
01835 0617                        00            .byte	0
01836 0618                        00            .byte	0
01837 0619                        00            .byte	0
01838 061A                        00            .byte	0
01839 061B                        00            .byte	0
01840 061C                        05            .byte	5
01841 061D                        0F            .byte	$F
01842 061E                        FF            .byte	$FF
01843                                           ! 608 },
01844                                           ! 609 {
01845                                           ! 610  80, 24, 8, 0x00, 0x40,
01846 061F                        50            .byte	$50
01847 0620                        18            .byte	$18
01848 0621                        08            .byte	8
01849 0622                        00            .byte	0
01850 0623                        40            .byte	$40
01851                                           ! 611  0x01, 0x0f, 0x00, 0x06,
01852 0624                        01            .byte	1
01853 0625                        0F            .byte	$F
01854 0626                        00            .byte	0
01855 0627                        06            .byte	6
01856                                           ! 612  0x63,
01857 0628                        63            .byte	$63
01858                                           ! 613  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01859 0629                        5F            .byte	$5F
01860 062A                        4F            .byte	$4F
01861 062B                        50            .byte	$50
01862 062C                        82            .byte	$82
01863 062D                        54            .byte	$54
01864 062E                        80            .byte	$80
01865 062F                        BF            .byte	$BF
01866 0630                        1F            .byte	$1F
01867                                           ! 614  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01868 0631                        00            .byte	0
01869 0632                        C0            .byte	$C0
01870 0633                        00            .byte	0
01871 0634                        00            .byte	0
01872 0635                        00            .byte	0
01873 0636                        00            .byte	0
01874 0637                        00            .byte	0
01875 0638                        00            .byte	0
01876                                           ! 615  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01877 0639                        9C            .byte	$9C
01878 063A                        8E            .byte	$8E
01879 063B                        8F            .byte	$8F
01880 063C                        28            .byte	$28
01881 063D                        00            .byte	0
01882 063E                        96            .byte	$96
01883 063F                        B9            .byte	$B9
01884 0640                        E3            .byte	$E3
01885                                           ! 616  0xff,
01886 0641                        FF            .byte	$FF
01887                                           ! 617  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01888 0642                        00            .byte	0
01889 0643                        01            .byte	1
01890 0644                        02            .byte	2
01891 0645                        03            .byte	3
01892 0646                        04            .byte	4
01893 0647                        05            .byte	5
01894 0648                        06            .byte	6
01895 0649                        07            .byte	7
01896                                           ! 618  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01897 064A                        10            .byte	$10
01898 064B                        11            .byte	$11
01899 064C                        12            .byte	$12
01900 064D                        13            .byte	$13
01901 064E                        14            .byte	$14
01902 064F                        15            .byte	$15
01903 0650                        16            .byte	$16
01904 0651                        17            .byte	$17
01905                                           ! 619  0x01, 0x00, 0x0f, 0x00,
01906 0652                        01            .byte	1
01907 0653                        00            .byte	0
01908 0654                        0F            .byte	$F
01909 0655                        00            .byte	0
01910                                           ! 620  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f
01911 0656                        00            .byte	0
01912 0657                        00            .byte	0
01913 0658                        00            .byte	0
01914 0659                        00            .byte	0
01915 065A                        00            .byte	0
01916 065B                        00            .byte	0
01917 065C                        05            .byte	5
01918                                           ! 620 , 0xff,
01919 065D                        0F            .byte	$F
01920 065E                        FF            .byte	$FF
01921                                           ! 621 },
01922                                           ! 622 {
01923                                           ! 623  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01924 065F                        00            .byte	0
01925 0660                        00            .byte	0
01926 0661                        00            .byte	0
01927 0662                        00            .byte	0
01928 0663                        00            .byte	0
01929 0664                        00            .byte	0
01930 0665                        00            .byte	0
01931 0666                        00            .byte	0
01932                                           ! 624  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01933 0667                        00            .byte	0
01934 0668                        00            .byte	0
01935 0669                        00            .byte	0
01936 066A                        00            .byte	0
01937 066B                        00            .byte	0
01938 066C                        00            .byte	0
01939 066D                        00            .byte	0
01940 066E                        00            .byte	0
01941                                           ! 625  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01942 066F                        00            .byte	0
01943 0670                        00            .byte	0
01944 0671                        00            .byte	0
01945 0672                        00            .byte	0
01946 0673                        00            .byte	0
01947 0674                        00            .byte	0
01948 0675                        00            .byte	0
01949 0676                        00            .byte	0
01950                                           ! 626  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01951 0677                        00            .byte	0
01952 0678                        00            .byte	0
01953 0679                        00            .byte	0
01954 067A                        00            .byte	0
01955 067B                        00            .byte	0
01956 067C                        00            .byte	0
01957 067D                        00            .byte	0
01958 067E                        00            .byte	0
01959                                           ! 627  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01960 067F                        00            .byte	0
01961 0680                        00            .byte	0
01962 0681                        00            .byte	0
01963 0682                        00            .byte	0
01964 0683                        00            .byte	0
01965 0684                        00            .byte	0
01966 0685                        00            .byte	0
01967 0686                        00            .byte	0
01968                                           ! 628  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01969 0687                        00            .byte	0
01970 0688                        00            .byte	0
01971 0689                        00            .byte	0
01972 068A                        00            .byte	0
01973 068B                        00            .byte	0
01974 068C                        00            .byte	0
01975 068D                        00            .byte	0
01976 068E                        00            .byte	0
01977                                           ! 629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01978 068F                        00            .byte	0
01979 0690                        00            .byte	0
01980 0691                        00            .byte	0
01981 0692                        00            .byte	0
01982 0693                        00            .byte	0
01983 0694                        00            .byte	0
01984 0695                        00            .byte	0
01985 0696                        00            .byte	0
01986                                           ! 630  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01987 0697                        00            .byte	0
01988 0698                        00            .byte	0
01989 0699                        00            .byte	0
01990 069A                        00            .byte	0
01991 069B                        00            .byte	0
01992 069C                        00            .byte	0
01993 069D                        00            .byte	0
01994 069E                        00            .byte	0
01995                                           ! 631 },
01996                                           ! 632 {
01997                                           ! 633  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01998 069F                        00            .byte	0
01999 06A0                        00            .byte	0
02000 06A1                        00            .byte	0
02001 06A2                        00            .byte	0
02002 06A3                        00            .byte	0
02003 06A4                        00            .byte	0
02004 06A5                        00            .byte	0
02005 06A6                        00            .byte	0
02006                                           ! 634  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02007 06A7                        00            .byte	0
02008 06A8                        00            .byte	0
02009 06A9                        00            .byte	0
02010 06AA                        00            .byte	0
02011 06AB                        00            .byte	0
02012 06AC                        00            .byte	0
02013 06AD                        00            .byte	0
02014 06AE                        00            .byte	0
02015                                           ! 635  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02016 06AF                        00            .byte	0
02017 06B0                        00            .byte	0
02018 06B1                        00            .byte	0
02019 06B2                        00            .byte	0
02020 06B3                        00            .byte	0
02021 06B4                        00            .byte	0
02022 06B5                        00            .byte	0
02023 06B6                        00            .byte	0
02024                                           ! 636  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02025 06B7                        00            .byte	0
02026 06B8                        00            .byte	0
02027 06B9                        00            .byte	0
02028 06BA                        00            .byte	0
02029 06BB                        00            .byte	0
02030 06BC                        00            .byte	0
02031 06BD                        00            .byte	0
02032 06BE                        00            .byte	0
02033                                           ! 637  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02034 06BF                        00            .byte	0
02035 06C0                        00            .byte	0
02036 06C1                        00            .byte	0
02037 06C2                        00            .byte	0
02038 06C3                        00            .byte	0
02039 06C4                        00            .byte	0
02040 06C5                        00            .byte	0
02041 06C6                        00            .byte	0
02042                                           ! 638  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02043 06C7                        00            .byte	0
02044 06C8                        00            .byte	0
02045 06C9                        00            .byte	0
02046 06CA                        00            .byte	0
02047 06CB                        00            .byte	0
02048 06CC                        00            .byte	0
02049 06CD                        00            .byte	0
02050 06CE                        00            .byte	0
02051                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02052 06CF                        00            .byte	0
02053 06D0                        00            .byte	0
02054 06D1                        00            .byte	0
02055 06D2                        00            .byte	0
02056 06D3                        00            .byte	0
02057 06D4                        00            .byte	0
02058 06D5                        00            .byte	0
02059 06D6                        00            .byte	0
02060                                           ! 640  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02061 06D7                        00            .byte	0
02062 06D8                        00            .byte	0
02063 06D9                        00            .byte	0
02064 06DA                        00            .byte	0
02065 06DB                        00            .byte	0
02066 06DC                        00            .byte	0
02067 06DD                        00            .byte	0
02068 06DE                        00            .byte	0
02069                                           ! 641 },
02070                                           ! 642 {
02071                                           ! 643  80, 24, 14, 0x00, 0x80,
02072 06DF                        50            .byte	$50
02073 06E0                        18            .byte	$18
02074 06E1                        0E            .byte	$E
02075 06E2                        00            .byte	0
02076 06E3                        80            .byte	$80
02077                                           ! 644  0x01, 0x0f, 0x00, 0x06,
02078 06E4                        01            .byte	1
02079 06E5                        0F            .byte	$F
02080 06E6                        00            .byte	0
02081 06E7                        06            .byte	6
02082                                           ! 645  0xa3,
02083 06E8                        A3            .byte	$A3
02084                                           ! 646  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02085 06E9                        5F            .byte	$5F
02086 06EA                        4F            .byte	$4F
02087 06EB                        50            .byte	$50
02088 06EC                        82            .byte	$82
02089 06ED                        54            .byte	$54
02090 06EE                        80            .byte	$80
02091 06EF                        BF            .byte	$BF
02092 06F0                        1F            .byte	$1F
02093                                           ! 647  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02094 06F1                        00            .byte	0
02095 06F2                        40            .byte	$40
02096 06F3                        00            .byte	0
02097 06F4                        00            .byte	0
02098 06F5                        00            .byte	0
02099 06F6                        00            .byte	0
02100 06F7                        00            .byte	0
02101 06F8                        00            .byte	0
02102                                           ! 648  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02103 06F9                        83            .byte	$83
02104 06FA                        85            .byte	$85
02105 06FB                        5D            .byte	$5D
02106 06FC                        28            .byte	$28
02107 06FD                        0F            .byte	$F
02108 06FE                        63            .byte	$63
02109 06FF                        BA            .byte	$BA
02110 0700                        E3            .byte	$E3
02111                                           ! 649  0xff,
02112 0701                        FF            .byte	$FF
02113                                           ! 650  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02114 0702                        00            .byte	0
02115 0703                        08            .byte	8
02116 0704                        00            .byte	0
02117 0705                        00            .byte	0
02118 0706                        18            .byte	$18
02119 0707                        18            .byte	$18
02120 0708                        00            .byte	0
02121 0709                        00            .byte	0
02122                                           ! 651  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02123 070A                        00            .byte	0
02124 070B                        08            .byte	8
02125 070C                        00            .byte	0
02126 070D                        00            .byte	0
02127 070E                        00            .byte	0
02128 070F                        18            .byte	$18
02129 0710                        00            .byte	0
02130 0711                        00            .byte	0
02131                                           ! 652  0x01, 0x00, 0x01, 0x00,
02132 0712                        01            .byte	1
02133 0713                        00            .byte	0
02134 0714                        01            .byte	1
02135 0715                        00            .byte	0
02136                                           ! 653  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02137 0716                        00            .byte	0
02138 0717                        00            .byte	0
02139 0718                        00            .byte	0
02140 0719                        00            .byte	0
02141 071A                        00            .byte	0
02142 071B                        00            .byte	0
02143 071C                        05            .byte	5
02144 071D                        0F            .byte	$F
02145 071E                        FF            .byte	$FF
02146                                           ! 654 },
02147                                           ! 655 {
02148                                           ! 656  80, 24, 14, 0x00, 0x80,
02149 071F                        50            .byte	$50
02150 0720                        18            .byte	$18
02151 0721                        0E            .byte	$E
02152 0722                        00            .byte	0
02153 0723                        80            .byte	$80
02154                                           ! 657  0x01, 0x0f, 0x00, 0x06,
02155 0724                        01            .byte	1
02156 0725                        0F            .byte	$F
02157 0726                        00            .byte	0
02158 0727                        06            .byte	6
02159                                           ! 658  0xa3,
02160 0728                        A3            .byte	$A3
02161                                           ! 659  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02162 0729                        5F            .byte	$5F
02163 072A                        4F            .byte	$4F
02164 072B                        50            .byte	$50
02165 072C                        82            .byte	$82
02166 072D                        54            .byte	$54
02167 072E                        80            .byte	$80
02168 072F                        BF            .byte	$BF
02169 0730                        1F            .byte	$1F
02170                                           ! 660  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02171 0731                        00            .byte	0
02172 0732                        40            .byte	$40
02173 0733                        00            .byte	0
02174 0734                        00            .byte	0
02175 0735                        00            .byte	0
02176 0736                        00            .byte	0
02177 0737                        00            .byte	0
02178 0738                        00            .byte	0
02179                                           ! 661  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02180 0739                        83            .byte	$83
02181 073A                        85            .byte	$85
02182 073B                        5D            .byte	$5D
02183 073C                        28            .byte	$28
02184 073D                        0F            .byte	$F
02185 073E                        63            .byte	$63
02186 073F                        BA            .byte	$BA
02187 0740                        E3            .byte	$E3
02188                                           ! 662  0xff,
02189 0741                        FF            .byte	$FF
02190                                           ! 663  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02191 0742                        00            .byte	0
02192 0743                        01            .byte	1
02193 0744                        02            .byte	2
02194 0745                        03            .byte	3
02195 0746                        04            .byte	4
02196 0747                        05            .byte	5
02197 0748                        14            .byte	$14
02198 0749                        07            .byte	7
02199                                           ! 664  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02200 074A                        38            .byte	$38
02201 074B                        39            .byte	$39
02202 074C                        3A            .byte	$3A
02203 074D                        3B            .byte	$3B
02204 074E                        3C            .byte	$3C
02205 074F                        3D            .byte	$3D
02206 0750                        3E            .byte	$3E
02207 0751                        3F            .byte	$3F
02208                                           ! 665  0x01, 0x00, 0x0f, 0x00,
02209 0752                        01            .byte	1
02210 0753                        00            .byte	0
02211 0754                        0F            .byte	$F
02212 0755                        00            .byte	0
02213                                           ! 666  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02214 0756                        00            .byte	0
02215 0757                        00            .byte	0
02216 0758                        00            .byte	0
02217 0759                        00            .byte	0
02218 075A                        00            .byte	0
02219 075B                        00            .byte	0
02220 075C                        05            .byte	5
02221 075D                        0F            .byte	$F
02222 075E                        FF            .byte	$FF
02223                                           ! 667 },
02224                                           ! 668 {
02225                                           ! 669  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02226 075F                        00            .byte	0
02227 0760                        00            .byte	0
02228 0761                        00            .byte	0
02229 0762                        00            .byte	0
02230 0763                        00            .byte	0
02231 0764                        00            .byte	0
02232 0765                        00            .byte	0
02233 0766                        00            .byte	0
02234                                           ! 670  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02235 0767                        00            .byte	0
02236 0768                        00            .byte	0
02237 0769                        00            .byte	0
02238 076A                        00            .byte	0
02239 076B                        00            .byte	0
02240 076C                        00            .byte	0
02241 076D                        00            .byte	0
02242 076E                        00            .byte	0
02243                                           ! 671  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02244 076F                        00            .byte	0
02245 0770                        00            .byte	0
02246 0771                        00            .byte	0
02247 0772                        00            .byte	0
02248 0773                        00            .byte	0
02249 0774                        00            .byte	0
02250 0775                        00            .byte	0
02251 0776                        00            .byte	0
02252                                           ! 672  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02253 0777                        00            .byte	0
02254 0778                        00            .byte	0
02255 0779                        00            .byte	0
02256 077A                        00            .byte	0
02257 077B                        00            .byte	0
02258 077C                        00            .byte	0
02259 077D                        00            .byte	0
02260 077E                        00            .byte	0
02261                                           ! 673  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02262 077F                        00            .byte	0
02263 0780                        00            .byte	0
02264 0781                        00            .byte	0
02265 0782                        00            .byte	0
02266 0783                        00            .byte	0
02267 0784                        00            .byte	0
02268 0785                        00            .byte	0
02269 0786                        00            .byte	0
02270                                           ! 674  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02271 0787                        00            .byte	0
02272 0788                        00            .byte	0
02273 0789                        00            .byte	0
02274 078A                        00            .byte	0
02275 078B                        00            .byte	0
02276 078C                        00            .byte	0
02277 078D                        00            .byte	0
02278 078E                        00            .byte	0
02279                                           ! 675  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02280 078F                        00            .byte	0
02281 0790                        00            .byte	0
02282 0791                        00            .byte	0
02283 0792                        00            .byte	0
02284 0793                        00            .byte	0
02285 0794                        00            .byte	0
02286 0795                        00            .byte	0
02287 0796                        00            .byte	0
02288                                           ! 676  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02289 0797                        00            .byte	0
02290 0798                        00            .byte	0
02291 0799                        00            .byte	0
02292 079A                        00            .byte	0
02293 079B                        00            .byte	0
02294 079C                        00            .byte	0
02295 079D                        00            .byte	0
02296 079E                        00            .byte	0
02297                                           ! 677 },
02298                                           ! 678 {
02299                                           ! 679  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02300 079F                        00            .byte	0
02301 07A0                        00            .byte	0
02302 07A1                        00            .byte	0
02303 07A2                        00            .byte	0
02304 07A3                        00            .byte	0
02305 07A4                        00            .byte	0
02306 07A5                        00            .byte	0
02307 07A6                        00            .byte	0
02308                                           ! 680  0x00, 
02309 07A7                        00            .byte	0
02310                                           ! 680 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02311 07A8                        00            .byte	0
02312 07A9                        00            .byte	0
02313 07AA                        00            .byte	0
02314 07AB                        00            .byte	0
02315 07AC                        00            .byte	0
02316 07AD                        00            .byte	0
02317 07AE                        00            .byte	0
02318                                           ! 681  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02319 07AF                        00            .byte	0
02320 07B0                        00            .byte	0
02321 07B1                        00            .byte	0
02322 07B2                        00            .byte	0
02323 07B3                        00            .byte	0
02324 07B4                        00            .byte	0
02325 07B5                        00            .byte	0
02326 07B6                        00            .byte	0
02327                                           ! 682  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02328 07B7                        00            .byte	0
02329 07B8                        00            .byte	0
02330 07B9                        00            .byte	0
02331 07BA                        00            .byte	0
02332 07BB                        00            .byte	0
02333 07BC                        00            .byte	0
02334 07BD                        00            .byte	0
02335 07BE                        00            .byte	0
02336                                           ! 683  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02337 07BF                        00            .byte	0
02338 07C0                        00            .byte	0
02339 07C1                        00            .byte	0
02340 07C2                        00            .byte	0
02341 07C3                        00            .byte	0
02342 07C4                        00            .byte	0
02343 07C5                        00            .byte	0
02344 07C6                        00            .byte	0
02345                                           ! 684  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02346 07C7                        00            .byte	0
02347 07C8                        00            .byte	0
02348 07C9                        00            .byte	0
02349 07CA                        00            .byte	0
02350 07CB                        00            .byte	0
02351 07CC                        00            .byte	0
02352 07CD                        00            .byte	0
02353 07CE                        00            .byte	0
02354                                           ! 685  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02355 07CF                        00            .byte	0
02356 07D0                        00            .byte	0
02357 07D1                        00            .byte	0
02358 07D2                        00            .byte	0
02359 07D3                        00            .byte	0
02360 07D4                        00            .byte	0
02361 07D5                        00            .byte	0
02362 07D6                        00            .byte	0
02363                                           ! 686  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02364 07D7                        00            .byte	0
02365 07D8                        00            .byte	0
02366 07D9                        00            .byte	0
02367 07DA                        00            .byte	0
02368 07DB                        00            .byte	0
02369 07DC                        00            .byte	0
02370 07DD                        00            .byte	0
02371 07DE                        00            .byte	0
02372                                           ! 687 },
02373                                           ! 688 {
02374                                           ! 689  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02375 07DF                        00            .byte	0
02376 07E0                        00            .byte	0
02377 07E1                        00            .byte	0
02378 07E2                        00            .byte	0
02379 07E3                        00            .byte	0
02380 07E4                        00            .byte	0
02381 07E5                        00            .byte	0
02382 07E6                        00            .byte	0
02383                                           ! 690  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02384 07E7                        00            .byte	0
02385 07E8                        00            .byte	0
02386 07E9                        00            .byte	0
02387 07EA                        00            .byte	0
02388 07EB                        00            .byte	0
02389 07EC                        00            .byte	0
02390 07ED                        00            .byte	0
02391 07EE                        00            .byte	0
02392                                           ! 691  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02393 07EF                        00            .byte	0
02394 07F0                        00            .byte	0
02395 07F1                        00            .byte	0
02396 07F2                        00            .byte	0
02397 07F3                        00            .byte	0
02398 07F4                        00            .byte	0
02399 07F5                        00            .byte	0
02400 07F6                        00            .byte	0
02401                                           ! 692  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02402 07F7                        00            .byte	0
02403 07F8                        00            .byte	0
02404 07F9                        00            .byte	0
02405 07FA                        00            .byte	0
02406 07FB                        00            .byte	0
02407 07FC                        00            .byte	0
02408 07FD                        00            .byte	0
02409 07FE                        00            .byte	0
02410                                           ! 693  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02411 07FF                        00            .byte	0
02412 0800                        00            .byte	0
02413 0801                        00            .byte	0
02414 0802                        00            .byte	0
02415 0803                        00            .byte	0
02416 0804                        00            .byte	0
02417 0805                        00            .byte	0
02418 0806                        00            .byte	0
02419                                           ! 694  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02420 0807                        00            .byte	0
02421 0808                        00            .byte	0
02422 0809                        00            .byte	0
02423 080A                        00            .byte	0
02424 080B                        00            .byte	0
02425 080C                        00            .byte	0
02426 080D                        00            .byte	0
02427 080E                        00            .byte	0
02428                                           ! 695  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02429 080F                        00            .byte	0
02430 0810                        00            .byte	0
02431 0811                        00            .byte	0
02432 0812                        00            .byte	0
02433 0813                        00            .byte	0
02434 0814                        00            .byte	0
02435 0815                        00            .byte	0
02436 0816                        00            .byte	0
02437                                           ! 696  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02438 0817                        00            .byte	0
02439 0818                        00            .byte	0
02440 0819                        00            .byte	0
02441 081A                        00            .byte	0
02442 081B                        00            .byte	0
02443 081C                        00            .byte	0
02444 081D                        00            .byte	0
02445 081E                        00            .byte	0
02446                                           ! 697 },
02447                                           ! 698 {
02448                                           ! 699  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02449 081F                        00            .byte	0
02450 0820                        00            .byte	0
02451 0821                        00            .byte	0
02452 0822                        00            .byte	0
02453 0823                        00            .byte	0
02454 0824                        00            .byte	0
02455 0825                        00            .byte	0
02456 0826                        00            .byte	0
02457                                           ! 700  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02458 0827                        00            .byte	0
02459 0828                        00            .byte	0
02460 0829                        00            .byte	0
02461 082A                        00            .byte	0
02462 082B                        00            .byte	0
02463 082C                        00            .byte	0
02464 082D                        00            .byte	0
02465 082E                        00            .byte	0
02466                                           ! 701  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02467 082F                        00            .byte	0
02468 0830                        00            .byte	0
02469 0831                        00            .byte	0
02470 0832                        00            .byte	0
02471 0833                        00            .byte	0
02472 0834                        00            .byte	0
02473 0835                        00            .byte	0
02474 0836                        00            .byte	0
02475                                           ! 702  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02476 0837                        00            .byte	0
02477 0838                        00            .byte	0
02478 0839                        00            .byte	0
02479 083A                        00            .byte	0
02480 083B                        00            .byte	0
02481 083C                        00            .byte	0
02482 083D                        00            .byte	0
02483 083E                        00            .byte	0
02484                                           ! 703  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02485 083F                        00            .byte	0
02486 0840                        00            .byte	0
02487 0841                        00            .byte	0
02488 0842                        00            .byte	0
02489 0843                        00            .byte	0
02490 0844                        00            .byte	0
02491 0845                        00            .byte	0
02492 0846                        00            .byte	0
02493                                           ! 704  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02494 0847                        00            .byte	0
02495 0848                        00            .byte	0
02496 0849                        00            .byte	0
02497 084A                        00            .byte	0
02498 084B                        00            .byte	0
02499 084C                        00            .byte	0
02500 084D                        00            .byte	0
02501 084E                        00            .byte	0
02502                                           ! 705  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02503 084F                        00            .byte	0
02504 0850                        00            .byte	0
02505 0851                        00            .byte	0
02506 0852                        00            .byte	0
02507 0853                        00            .byte	0
02508 0854                        00            .byte	0
02509 0855                        00            .byte	0
02510 0856                        00            .byte	0
02511                                           ! 706  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02512 0857                        00            .byte	0
02513 0858                        00            .byte	0
02514 0859                        00            .byte	0
02515 085A                        00            .byte	0
02516 085B                        00            .byte	0
02517 085C                        00            .byte	0
02518 085D                        00            .byte	0
02519 085E                        00            .byte	0
02520                                           ! 707 },
02521                                           ! 708 {
02522                                           ! 709  40, 24, 16, 0x00, 0x08,
02523 085F                        28            .byte	$28
02524 0860                        18            .byte	$18
02525 0861                        10            .byte	$10
02526 0862                        00            .byte	0
02527 0863                        08            .byte	8
02528                                           ! 710  0x08, 0x03, 0x00, 0x02,
02529 0864                        08            .byte	8
02530 0865                        03            .byte	3
02531 0866                        00            .byte	0
02532 0867                        02            .byte	2
02533                                           ! 711  0x67,
02534 0868                        67            .byte	$67
02535                                           ! 712  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02536 0869                        2D            .byte	$2D
02537 086A                        27            .byte	$27
02538 086B                        28            .byte	$28
02539 086C                        90            .byte	$90
02540 086D                        2B            .byte	$2B
02541 086E                        A0            .byte	$A0
02542 086F                        BF            .byte	$BF
02543 0870                        1F            .byte	$1F
02544                                           ! 713  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02545 0871                        00            .byte	0
02546 0872                        4F            .byte	$4F
02547 0873                        0D            .byte	$D
02548 0874                        0E            .byte	$E
02549 0875                        00            .byte	0
02550 0876                        00            .byte	0
02551 0877                        00            .byte	0
02552 0878                        00            .byte	0
02553                                           ! 714  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02554 0879                        9C            .byte	$9C
02555 087A                        8E            .byte	$8E
02556 087B                        8F            .byte	$8F
02557 087C                        14            .byte	$14
02558 087D                        1F            .byte	$1F
02559 087E                        96            .byte	$96
02560 087F                        B9            .byte	$B9
02561 0880                        A3            .byte	$A3
02562                                           ! 715  0xff,
02563 0881                        FF            .byte	$FF
02564                                           ! 716  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02565 0882                        00            .byte	0
02566 0883                        01            .byte	1
02567 0884                        02            .byte	2
02568 0885                        03            .byte	3
02569 0886                        04            .byte	4
02570 0887                        05            .byte	5
02571 0888                        14            .byte	$14
02572 0889                        07            .byte	7
02573                                           ! 717  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02574 088A                        38            .byte	$38
02575 088B                        39            .byte	$39
02576 088C                        3A            .byte	$3A
02577 088D                        3B            .byte	$3B
02578 088E                        3C            .byte	$3C
02579 088F                        3D            .byte	$3D
02580 0890                        3E            .byte	$3E
02581 0891                        3F            .byte	$3F
02582                                           ! 718  0x0c, 0x00, 0x0f, 0x08,
02583 0892                        0C            .byte	$C
02584 0893                        00            .byte	0
02585 0894                        0F            .byte	$F
02586 0895                        08            .byte	8
02587                                           ! 719  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02588 0896                        00            .byte	0
02589 0897                        00            .byte	0
02590 0898                        00            .byte	0
02591 0899                        00            .byte	0
02592 089A                        00            .byte	0
02593 089B                        10            .byte	$10
02594 089C                        0E            .byte	$E
02595 089D                        0F            .byte	$F
02596 089E                        FF            .byte	$FF
02597                                           ! 720 },
02598                                           ! 721 {
02599                                           ! 722  80, 24, 16, 0x00, 0x10,
02600 089F                        50            .byte	$50
02601 08A0                        18            .byte	$18
02602 08A1                        10            .byte	$10
02603 08A2                        00            .byte	0
02604 08A3                        10            .byte	$10
02605                                           ! 723  0x00, 0x03, 0x00, 0x02,
02606 08A4                        00            .byte	0
02607 08A5                        03            .byte	3
02608 08A6                        00            .byte	0
02609 08A7                        02            .byte	2
02610                                           ! 724  0x67,
02611 08A8                        67            .byte	$67
02612                                           ! 725  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02613 08A9                        5F            .byte	$5F
02614 08AA                        4F            .byte	$4F
02615 08AB                        50            .byte	$50
02616 08AC                        82            .byte	$82
02617 08AD                        55            .byte	$55
02618 08AE                        81            .byte	$81
02619 08AF                        BF            .byte	$BF
02620 08B0                        1F            .byte	$1F
02621                                           ! 726  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02622 08B1                        00            .byte	0
02623 08B2                        4F            .byte	$4F
02624 08B3                        0D            .byte	$D
02625 08B4                        0E            .byte	$E
02626 08B5                        00            .byte	0
02627 08B6                        00            .byte	0
02628 08B7                        00            .byte	0
02629 08B8                        00            .byte	0
02630                                           ! 727  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02631 08B9                        9C            .byte	$9C
02632 08BA                        8E            .byte	$8E
02633 08BB                        8F            .byte	$8F
02634 08BC                        28            .byte	$28
02635 08BD                        1F            .byte	$1F
02636 08BE                        96            .byte	$96
02637 08BF                        B9            .byte	$B9
02638 08C0                        A3            .byte	$A3
02639                                           ! 728  0xff,
02640 08C1                        FF            .byte	$FF
02641                                           ! 729  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02642 08C2                        00            .byte	0
02643 08C3                        01            .byte	1
02644 08C4                        02            .byte	2
02645 08C5                        03            .byte	3
02646 08C6                        04            .byte	4
02647 08C7                        05            .byte	5
02648 08C8                        14            .byte	$14
02649 08C9                        07            .byte	7
02650                                           ! 730  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02651 08CA                        38            .byte	$38
02652 08CB                        39            .byte	$39
02653 08CC                        3A            .byte	$3A
02654 08CD                        3B            .byte	$3B
02655 08CE                        3C            .byte	$3C
02656 08CF                        3D            .byte	$3D
02657 08D0                        3E            .byte	$3E
02658 08D1                        3F            .byte	$3F
02659                                           ! 731  0x0c, 0x00, 0x0f, 0x08,
02660 08D2                        0C            .byte	$C
02661 08D3                        00            .byte	0
02662 08D4                        0F            .byte	$F
02663 08D5                        08            .byte	8
02664                                           ! 732  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02665 08D6                        00            .byte	0
02666 08D7                        00            .byte	0
02667 08D8                        00            .byte	0
02668 08D9                        00            .byte	0
02669 08DA                        00            .byte	0
02670 08DB                        10            .byte	$10
02671 08DC                        0E            .byte	$E
02672 08DD                        0F            .byte	$F
02673 08DE                        FF            .byte	$FF
02674                                           ! 733 },
02675                                           ! 734 {
02676                                           ! 735  80, 24, 16, 0x00, 0x10,
02677 08DF                        50            .byte	$50
02678 08E0                        18            .byte	$18
02679 08E1                        10            .byte	$10
02680 08E2                        00            .byte	0
02681 08E3                        10            .byte	$10
02682                                           ! 736  0x00, 0x03, 0x00, 0x02,
02683 08E4                        00            .byte	0
02684 08E5                        03            .byte	3
02685 08E6                        00            .byte	0
02686 08E7                        02            .byte	2
02687                                           ! 737  0x66,
02688 08E8                        66            .byte	$66
02689                                           ! 738  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02690 08E9                        5F            .byte	$5F
02691 08EA                        4F            .byte	$4F
02692 08EB                        50            .byte	$50
02693 08EC                        82            .byte	$82
02694 08ED                        55            .byte	$55
02695 08EE                        81            .byte	$81
02696 08EF                        BF            .byte	$BF
02697 08F0                        1F            .byte	$1F
02698                                           ! 739  0x00, 0x4f, 0x0d, 
02699 08F1                        00            .byte	0
02700 08F2                        4F            .byte	$4F
02701 08F3                        0D            .byte	$D
02702                                           ! 739 0x0e, 0x00, 0x00, 0x00, 0x00,
02703 08F4                        0E            .byte	$E
02704 08F5                        00            .byte	0
02705 08F6                        00            .byte	0
02706 08F7                        00            .byte	0
02707 08F8                        00            .byte	0
02708                                           ! 740  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02709 08F9                        9C            .byte	$9C
02710 08FA                        8E            .byte	$8E
02711 08FB                        8F            .byte	$8F
02712 08FC                        28            .byte	$28
02713 08FD                        0F            .byte	$F
02714 08FE                        96            .byte	$96
02715 08FF                        B9            .byte	$B9
02716 0900                        A3            .byte	$A3
02717                                           ! 741  0xff,
02718 0901                        FF            .byte	$FF
02719                                           ! 742  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02720 0902                        00            .byte	0
02721 0903                        08            .byte	8
02722 0904                        08            .byte	8
02723 0905                        08            .byte	8
02724 0906                        08            .byte	8
02725 0907                        08            .byte	8
02726 0908                        08            .byte	8
02727 0909                        08            .byte	8
02728                                           ! 743  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02729 090A                        10            .byte	$10
02730 090B                        18            .byte	$18
02731 090C                        18            .byte	$18
02732 090D                        18            .byte	$18
02733 090E                        18            .byte	$18
02734 090F                        18            .byte	$18
02735 0910                        18            .byte	$18
02736 0911                        18            .byte	$18
02737                                           ! 744  0x0e, 0x00, 0x0f, 0x08,
02738 0912                        0E            .byte	$E
02739 0913                        00            .byte	0
02740 0914                        0F            .byte	$F
02741 0915                        08            .byte	8
02742                                           ! 745  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02743 0916                        00            .byte	0
02744 0917                        00            .byte	0
02745 0918                        00            .byte	0
02746 0919                        00            .byte	0
02747 091A                        00            .byte	0
02748 091B                        10            .byte	$10
02749 091C                        0A            .byte	$A
02750 091D                        0F            .byte	$F
02751 091E                        FF            .byte	$FF
02752                                           ! 746 },
02753                                           ! 747 {
02754                                           ! 748  80, 29, 16, 0x00, 0x00,
02755 091F                        50            .byte	$50
02756 0920                        1D            .byte	$1D
02757 0921                        10            .byte	$10
02758 0922                        00            .byte	0
02759 0923                        00            .byte	0
02760                                           ! 749  0x01, 0x0f, 0x00, 0x06,
02761 0924                        01            .byte	1
02762 0925                        0F            .byte	$F
02763 0926                        00            .byte	0
02764 0927                        06            .byte	6
02765                                           ! 750  0xe3,
02766 0928                        E3            .byte	$E3
02767                                           ! 751  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02768 0929                        5F            .byte	$5F
02769 092A                        4F            .byte	$4F
02770 092B                        50            .byte	$50
02771 092C                        82            .byte	$82
02772 092D                        54            .byte	$54
02773 092E                        80            .byte	$80
02774 092F                        0B            .byte	$B
02775 0930                        3E            .byte	$3E
02776                                           ! 752  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02777 0931                        00            .byte	0
02778 0932                        40            .byte	$40
02779 0933                        00            .byte	0
02780 0934                        00            .byte	0
02781 0935                        00            .byte	0
02782 0936                        00            .byte	0
02783 0937                        00            .byte	0
02784 0938                        00            .byte	0
02785                                           ! 753  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02786 0939                        EA            .byte	$EA
02787 093A                        8C            .byte	$8C
02788 093B                        DF            .byte	$DF
02789 093C                        28            .byte	$28
02790 093D                        00            .byte	0
02791 093E                        E7            .byte	$E7
02792 093F                        04            .byte	4
02793 0940                        E3            .byte	$E3
02794                                           ! 754  0xff,
02795 0941                        FF            .byte	$FF
02796                                           ! 755  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02797 0942                        00            .byte	0
02798 0943                        3F            .byte	$3F
02799 0944                        00            .byte	0
02800 0945                        3F            .byte	$3F
02801 0946                        00            .byte	0
02802 0947                        3F            .byte	$3F
02803 0948                        00            .byte	0
02804 0949                        3F            .byte	$3F
02805                                           ! 756  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02806 094A                        00            .byte	0
02807 094B                        3F            .byte	$3F
02808 094C                        00            .byte	0
02809 094D                        3F            .byte	$3F
02810 094E                        00            .byte	0
02811 094F                        3F            .byte	$3F
02812 0950                        00            .byte	0
02813 0951                        3F            .byte	$3F
02814                                           ! 757  0x01, 0x00, 0x0f, 0x00,
02815 0952                        01            .byte	1
02816 0953                        00            .byte	0
02817 0954                        0F            .byte	$F
02818 0955                        00            .byte	0
02819                                           ! 758  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02820 0956                        00            .byte	0
02821 0957                        00            .byte	0
02822 0958                        00            .byte	0
02823 0959                        00            .byte	0
02824 095A                        00            .byte	0
02825 095B                        00            .byte	0
02826 095C                        05            .byte	5
02827 095D                        0F            .byte	$F
02828 095E                        FF            .byte	$FF
02829                                           ! 759 },
02830                                           ! 760 {
02831                                           ! 761  80, 29, 16, 0x00, 0x00,
02832 095F                        50            .byte	$50
02833 0960                        1D            .byte	$1D
02834 0961                        10            .byte	$10
02835 0962                        00            .byte	0
02836 0963                        00            .byte	0
02837                                           ! 762  0x01, 0x0f, 0x00, 0x06,
02838 0964                        01            .byte	1
02839 0965                        0F            .byte	$F
02840 0966                        00            .byte	0
02841 0967                        06            .byte	6
02842                                           ! 763  0xe3,
02843 0968                        E3            .byte	$E3
02844                                           ! 764  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02845 0969                        5F            .byte	$5F
02846 096A                        4F            .byte	$4F
02847 096B                        50            .byte	$50
02848 096C                        82            .byte	$82
02849 096D                        54            .byte	$54
02850 096E                        80            .byte	$80
02851 096F                        0B            .byte	$B
02852 0970                        3E            .byte	$3E
02853                                           ! 765  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02854 0971                        00            .byte	0
02855 0972                        40            .byte	$40
02856 0973                        00            .byte	0
02857 0974                        00            .byte	0
02858 0975                        00            .byte	0
02859 0976                        00            .byte	0
02860 0977                        00            .byte	0
02861 0978                        00            .byte	0
02862                                           ! 766  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02863 0979                        EA            .byte	$EA
02864 097A                        8C            .byte	$8C
02865 097B                        DF            .byte	$DF
02866 097C                        28            .byte	$28
02867 097D                        00            .byte	0
02868 097E                        E7            .byte	$E7
02869 097F                        04            .byte	4
02870 0980                        E3            .byte	$E3
02871                                           ! 767  0xff,
02872 0981                        FF            .byte	$FF
02873                                           ! 768  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02874 0982                        00            .byte	0
02875 0983                        01            .byte	1
02876 0984                        02            .byte	2
02877 0985                        03            .byte	3
02878 0986                        04            .byte	4
02879 0987                        05            .byte	5
02880 0988                        14            .byte	$14
02881 0989                        07            .byte	7
02882                                           ! 769  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02883 098A                        38            .byte	$38
02884 098B                        39            .byte	$39
02885 098C                        3A            .byte	$3A
02886 098D                        3B            .byte	$3B
02887 098E                        3C            .byte	$3C
02888 098F                        3D            .byte	$3D
02889 0990                        3E            .byte	$3E
02890 0991                        3F            .byte	$3F
02891                                           ! 770  0x01, 0x00, 0x0f, 0x00,
02892 0992                        01            .byte	1
02893 0993                        00            .byte	0
02894 0994                        0F            .byte	$F
02895 0995                        00            .byte	0
02896                                           ! 771  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02897 0996                        00            .byte	0
02898 0997                        00            .byte	0
02899 0998                        00            .byte	0
02900 0999                        00            .byte	0
02901 099A                        00            .byte	0
02902 099B                        00            .byte	0
02903 099C                        05            .byte	5
02904 099D                        0F            .byte	$F
02905 099E                        FF            .byte	$FF
02906                                           ! 772 },
02907                                           ! 773 {
02908                                           ! 774  40, 24, 8, 0x00, 0x00,
02909 099F                        28            .byte	$28
02910 09A0                        18            .byte	$18
02911 09A1                        08            .byte	8
02912 09A2                        00            .byte	0
02913 09A3                        00            .byte	0
02914                                           ! 775  0x01, 0x0f, 0x00, 0x0e,
02915 09A4                        01            .byte	1
02916 09A5                        0F            .byte	$F
02917 09A6                        00            .byte	0
02918 09A7                        0E            .byte	$E
02919                                           ! 776  0x63,
02920 09A8                        63            .byte	$63
02921                                           ! 777  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02922 09A9                        5F            .byte	$5F
02923 09AA                        4F            .byte	$4F
02924 09AB                        50            .byte	$50
02925 09AC                        82            .byte	$82
02926 09AD                        54            .byte	$54
02927 09AE                        80            .byte	$80
02928 09AF                        BF            .byte	$BF
02929 09B0                        1F            .byte	$1F
02930                                           ! 778  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02931 09B1                        00            .byte	0
02932 09B2                        41            .byte	$41
02933 09B3                        00            .byte	0
02934 09B4                        00            .byte	0
02935 09B5                        00            .byte	0
02936 09B6                        00            .byte	0
02937 09B7                        00            .byte	0
02938 09B8                        00            .byte	0
02939                                           ! 779  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02940 09B9                        9C            .byte	$9C
02941 09BA                        8E            .byte	$8E
02942 09BB                        8F            .byte	$8F
02943 09BC                        28            .byte	$28
02944 09BD                        40            .byte	$40
02945 09BE                        96            .byte	$96
02946 09BF                        B9            .byte	$B9
02947 09C0                        A3            .byte	$A3
02948                                           ! 780  0xff,
02949 09C1                        FF            .byte	$FF
02950                                           ! 781  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02951 09C2                        00            .byte	0
02952 09C3                        01            .byte	1
02953 09C4                        02            .byte	2
02954 09C5                        03            .byte	3
02955 09C6                        04            .byte	4
02956 09C7                        05            .byte	5
02957 09C8                        06            .byte	6
02958 09C9                        07            .byte	7
02959                                           ! 782  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02960 09CA                        08            .byte	8
02961 09CB                        09            .byte	9
02962 09CC                        0A            .byte	$A
02963 09CD                        0B            .byte	$B
02964 09CE                        0C            .byte	$C
02965 09CF                        0D            .byte	$D
02966 09D0                        0E            .byte	$E
02967 09D1                        0F            .byte	$F
02968                                           ! 783  0x41, 0x00, 0x0f, 0x00,
02969 09D2                        41            .byte	$41
02970 09D3                        00            .byte	0
02971 09D4                        0F            .byte	$F
02972 09D5                        00            .byte	0
02973                                           ! 784  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02974 09D6                        00            .byte	0
02975 09D7                        00            .byte	0
02976 09D8                        00            .byte	0
02977 09D9                        00            .byte	0
02978 09DA                        00            .byte	0
02979 09DB                        40            .byte	$40
02980 09DC                        05            .byte	5
02981 09DD                        0F            .byte	$F
02982 09DE                        FF            .byte	$FF
02983                                           ! 785 },
02984                                           ! 786 {
02985                                           ! 787  100, 36, 16, 0x00, 0x00,
02986 09DF                        64            .byte	$64
02987 09E0                        24            .byte	$24
02988 09E1                        10            .byte	$10
02989 09E2                        00            .byte	0
02990 09E3                        00            .byte	0
02991                                           ! 788  0x01, 0x0f, 0x00, 0x06,
02992 09E4                        01            .byte	1
02993 09E5                        0F            .byte	$F
02994 09E6                        00            .byte	0
02995 09E7                        06            .byte	6
02996                                           ! 789  0xe3,
02997 09E8                        E3            .byte	$E3
02998                                           ! 790  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02999 09E9                        7F            .byte	$7F
03000 09EA                        63            .byte	$63
03001 09EB                        63            .byte	$63
03002 09EC                        83            .byte	$83
03003 09ED                        6B            .byte	$6B
03004 09EE                        1B            .byte	$1B
03005 09EF                        72            .byte	$72
03006 09F0                        F0            .byte	$F0
03007                                           ! 791  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
03008 09F1                        00            .byte	0
03009 09F2                        60            .byte	$60
03010 09F3                        00            .byte	0
03011 09F4                        00            .byte	0
03012 09F5                        00            .byte	0
03013 09F6                        00            .byte	0
03014 09F7                        00            .byte	0
03015 09F8                        00            .byte	0
03016                                           ! 792  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
03017 09F9                        59            .byte	$59
03018 09FA                        8D            .byte	$8D
03019 09FB                        57            .byte	$57
03020 09FC                        32            .byte	$32
03021 09FD                        00            .byte	0
03022 09FE                        57            .byte	$57
03023 09FF                        73            .byte	$73
03024 0A00                        E3            .byte	$E3
03025                                           ! 793  0xff,
03026 0A01                        FF            .byte	$FF
03027                                           ! 794  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
03028 0A02                        00            .byte	0
03029 0A03                        01            .byte	1
03030 0A04                        02            .byte	2
03031 0A05                        03            .byte	3
03032 0A06                        04            .byte	4
03033 0A07                        05            .byte	5
03034 0A08                        14            .byte	$14
03035 0A09                        07            .byte	7
03036                                           ! 795  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03037 0A0A                        38            .byte	$38
03038 0A0B                        39            .byte	$39
03039 0A0C                        3A            .byte	$3A
03040 0A0D                        3B            .byte	$3B
03041 0A0E                        3C            .byte	$3C
03042 0A0F                        3D            .byte	$3D
03043 0A10                        3E            .byte	$3E
03044 0A11                        3F            .byte	$3F
03045                                           ! 796  0x01, 0x00, 0x0f, 0x00,
03046 0A12                        01            .byte	1
03047 0A13                        00            .byte	0
03048 0A14                        0F            .byte	$F
03049 0A15                        00            .byte	0
03050                                           ! 797  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03051 0A16                        00            .byte	0
03052 0A17                        00            .byte	0
03053 0A18                        00            .byte	0
03054 0A19                        00            .byte	0
03055 0A1A                        00            .byte	0
03056 0A1B                        00            .byte	0
03057 0A1C                        05            .byte	5
03058 0A1D                        0F            .byte	$F
03059 0A1E                        FF            .byte	$FF
03060                                           ! 798 },
03061                                           ! 799 };
03062                                           !BCC_EOS
03063                                           ! 800 static Bit8u palette0[63+1][3]=
03064                                           ! 801 {
03065                       00000A1F            _palette0:
03066                                           ! 802   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03067 0A1F                        00            .byte	0
03068 0A20                        00            .byte	0
03069 0A21                        00            .byte	0
03070 0A22                        00            .byte	0
03071 0A23                        00            .byte	0
03072 0A24                        00            .byte	0
03073 0A25                        00            .byte	0
03074 0A26                        00            .byte	0
03075 0A27                        00            .byte	0
03076 0A28                        00            .byte	0
03077 0A29                        00            .byte	0
03078 0A2A                        00            .byte	0
03079 0A2B                        00            .byte	0
03080 0A2C                        00            .byte	0
03081 0A2D                        00            .byte	0
03082 0A2E                        00            .byte	0
03083 0A2F                        00            .byte	0
03084 0A30                        00            .byte	0
03085 0A31                        00            .byte	0
03086 0A32                        00            .byte	0
03087 0A33                        00            .byte	0
03088 0A34                        00            .byte	0
03089 0A35                        00            .byte	0
03090 0A36                        00            .byte	0
03091                                           ! 803   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a
03092 0A37                        2A            .byte	$2A
03093 0A38                        2A            .byte	$2A
03094 0A39                        2A            .byte	$2A
03095 0A3A                        2A            .byte	$2A
03096 0A3B                        2A            .byte	$2A
03097 0A3C                        2A            .byte	$2A
03098                                           ! 803 ,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03099 0A3D                        2A            .byte	$2A
03100 0A3E                        2A            .byte	$2A
03101 0A3F                        2A            .byte	$2A
03102 0A40                        2A            .byte	$2A
03103 0A41                        2A            .byte	$2A
03104 0A42                        2A            .byte	$2A
03105 0A43                        2A            .byte	$2A
03106 0A44                        2A            .byte	$2A
03107 0A45                        2A            .byte	$2A
03108 0A46                        2A            .byte	$2A
03109 0A47                        2A            .byte	$2A
03110 0A48                        2A            .byte	$2A
03111 0A49                        2A            .byte	$2A
03112 0A4A                        2A            .byte	$2A
03113 0A4B                        2A            .byte	$2A
03114 0A4C                        2A            .byte	$2A
03115 0A4D                        2A            .byte	$2A
03116 0A4E                        2A            .byte	$2A
03117                                           ! 804   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03118 0A4F                        2A            .byte	$2A
03119 0A50                        2A            .byte	$2A
03120 0A51                        2A            .byte	$2A
03121 0A52                        2A            .byte	$2A
03122 0A53                        2A            .byte	$2A
03123 0A54                        2A            .byte	$2A
03124 0A55                        2A            .byte	$2A
03125 0A56                        2A            .byte	$2A
03126 0A57                        2A            .byte	$2A
03127 0A58                        2A            .byte	$2A
03128 0A59                        2A            .byte	$2A
03129 0A5A                        2A            .byte	$2A
03130 0A5B                        2A            .byte	$2A
03131 0A5C                        2A            .byte	$2A
03132 0A5D                        2A            .byte	$2A
03133 0A5E                        2A            .byte	$2A
03134 0A5F                        2A            .byte	$2A
03135 0A60                        2A            .byte	$2A
03136 0A61                        2A            .byte	$2A
03137 0A62                        2A            .byte	$2A
03138 0A63                        2A            .byte	$2A
03139 0A64                        2A            .byte	$2A
03140 0A65                        2A            .byte	$2A
03141 0A66                        2A            .byte	$2A
03142                                           ! 805   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03143 0A67                        3F            .byte	$3F
03144 0A68                        3F            .byte	$3F
03145 0A69                        3F            .byte	$3F
03146 0A6A                        3F            .byte	$3F
03147 0A6B                        3F            .byte	$3F
03148 0A6C                        3F            .byte	$3F
03149 0A6D                        3F            .byte	$3F
03150 0A6E                        3F            .byte	$3F
03151 0A6F                        3F            .byte	$3F
03152 0A70                        3F            .byte	$3F
03153 0A71                        3F            .byte	$3F
03154 0A72                        3F            .byte	$3F
03155 0A73                        3F            .byte	$3F
03156 0A74                        3F            .byte	$3F
03157 0A75                        3F            .byte	$3F
03158 0A76                        3F            .byte	$3F
03159 0A77                        3F            .byte	$3F
03160 0A78                        3F            .byte	$3F
03161 0A79                        3F            .byte	$3F
03162 0A7A                        3F            .byte	$3F
03163 0A7B                        3F            .byte	$3F
03164 0A7C                        3F            .byte	$3F
03165 0A7D                        3F            .byte	$3F
03166 0A7E                        3F            .byte	$3F
03167                                           ! 806   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03168 0A7F                        00            .byte	0
03169 0A80                        00            .byte	0
03170 0A81                        00            .byte	0
03171 0A82                        00            .byte	0
03172 0A83                        00            .byte	0
03173 0A84                        00            .byte	0
03174 0A85                        00            .byte	0
03175 0A86                        00            .byte	0
03176 0A87                        00            .byte	0
03177 0A88                        00            .byte	0
03178 0A89                        00            .byte	0
03179 0A8A                        00            .byte	0
03180 0A8B                        00            .byte	0
03181 0A8C                        00            .byte	0
03182 0A8D                        00            .byte	0
03183 0A8E                        00            .byte	0
03184 0A8F                        00            .byte	0
03185 0A90                        00            .byte	0
03186 0A91                        00            .byte	0
03187 0A92                        00            .byte	0
03188 0A93                        00            .byte	0
03189 0A94                        00            .byte	0
03190 0A95                        00            .byte	0
03191 0A96                        00            .byte	0
03192                                           ! 807   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03193 0A97                        2A            .byte	$2A
03194 0A98                        2A            .byte	$2A
03195 0A99                        2A            .byte	$2A
03196 0A9A                        2A            .byte	$2A
03197 0A9B                        2A            .byte	$2A
03198 0A9C                        2A            .byte	$2A
03199 0A9D                        2A            .byte	$2A
03200 0A9E                        2A            .byte	$2A
03201 0A9F                        2A            .byte	$2A
03202 0AA0                        2A            .byte	$2A
03203 0AA1                        2A            .byte	$2A
03204 0AA2                        2A            .byte	$2A
03205 0AA3                        2A            .byte	$2A
03206 0AA4                        2A            .byte	$2A
03207 0AA5                        2A            .byte	$2A
03208 0AA6                        2A            .byte	$2A
03209 0AA7                        2A            .byte	$2A
03210 0AA8                        2A            .byte	$2A
03211 0AA9                        2A            .byte	$2A
03212 0AAA                        2A            .byte	$2A
03213 0AAB                        2A            .byte	$2A
03214 0AAC                        2A            .byte	$2A
03215 0AAD                        2A            .byte	$2A
03216 0AAE                        2A            .byte	$2A
03217                                           ! 808   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03218 0AAF                        2A            .byte	$2A
03219 0AB0                        2A            .byte	$2A
03220 0AB1                        2A            .byte	$2A
03221 0AB2                        2A            .byte	$2A
03222 0AB3                        2A            .byte	$2A
03223 0AB4                        2A            .byte	$2A
03224 0AB5                        2A            .byte	$2A
03225 0AB6                        2A            .byte	$2A
03226 0AB7                        2A            .byte	$2A
03227 0AB8                        2A            .byte	$2A
03228 0AB9                        2A            .byte	$2A
03229 0ABA                        2A            .byte	$2A
03230 0ABB                        2A            .byte	$2A
03231 0ABC                        2A            .byte	$2A
03232 0ABD                        2A            .byte	$2A
03233 0ABE                        2A            .byte	$2A
03234 0ABF                        2A            .byte	$2A
03235 0AC0                        2A            .byte	$2A
03236 0AC1                        2A            .byte	$2A
03237 0AC2                        2A            .byte	$2A
03238 0AC3                        2A            .byte	$2A
03239 0AC4                        2A            .byte	$2A
03240 0AC5                        2A            .byte	$2A
03241 0AC6                        2A            .byte	$2A
03242                                           ! 809   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03243 0AC7                        3F            .byte	$3F
03244 0AC8                        3F            .byte	$3F
03245 0AC9                        3F            .byte	$3F
03246 0ACA                        3F            .byte	$3F
03247 0ACB                        3F            .byte	$3F
03248 0ACC                        3F            .byte	$3F
03249 0ACD                        3F            .byte	$3F
03250 0ACE                        3F            .byte	$3F
03251 0ACF                        3F            .byte	$3F
03252 0AD0                        3F            .byte	$3F
03253 0AD1                        3F            .byte	$3F
03254 0AD2                        3F            .byte	$3F
03255 0AD3                        3F            .byte	$3F
03256 0AD4                        3F            .byte	$3F
03257 0AD5                        3F            .byte	$3F
03258 0AD6                        3F            .byte	$3F
03259 0AD7                        3F            .byte	$3F
03260 0AD8                        3F            .byte	$3F
03261 0AD9                        3F            .byte	$3F
03262 0ADA                        3F            .byte	$3F
03263 0ADB                        3F            .byte	$3F
03264 0ADC                        3F            .byte	$3F
03265 0ADD                        3F            .byte	$3F
03266                                           ! 810 };
03267 0ADE                        3F            .byte	$3F
03268                                           !BCC_EOS
03269                                           ! 811 static Bit8u palette1[63+1][3]=
03270                                           ! 812 {
03271                       00000ADF            _palette1:
03272                                           ! 813   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03273 0ADF                        00            .byte	0
03274 0AE0                        00            .byte	0
03275 0AE1                        00            .byte	0
03276 0AE2                        00            .byte	0
03277 0AE3                        00            .byte	0
03278 0AE4                        2A            .byte	$2A
03279 0AE5                        00            .byte	0
03280 0AE6                        2A            .byte	$2A
03281 0AE7                        00            .byte	0
03282 0AE8                        00            .byte	0
03283 0AE9                        2A            .byte	$2A
03284 0AEA                        2A            .byte	$2A
03285 0AEB                        2A            .byte	$2A
03286 0AEC                        00            .byte	0
03287 0AED                        00            .byte	0
03288 0AEE                        2A            .byte	$2A
03289 0AEF                        00            .byte	0
03290 0AF0                        2A            .byte	$2A
03291 0AF1                        2A            .byte	$2A
03292 0AF2                        15            .byte	$15
03293 0AF3                        00            .byte	0
03294 0AF4                        2A            .byte	$2A
03295 0AF5                        2A            .byte	$2A
03296 0AF6                        2A            .byte	$2A
03297                                           ! 814   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03298 0AF7                        00            .byte	0
03299 0AF8                        00            .byte	0
03300 0AF9                        00            .byte	0
03301 0AFA                        00            .byte	0
03302 0AFB                        00            .byte	0
03303 0AFC                        2A            .byte	$2A
03304 0AFD                        00            .byte	0
03305 0AFE                        2A            .byte	$2A
03306 0AFF                        00            .byte	0
03307 0B00                        00            .byte	0
03308 0B01                        2A            .byte	$2A
03309 0B02                        2A            .byte	$2A
03310 0B03                        2A            .byte	$2A
03311 0B04                        00            .byte	0
03312 0B05                        00            .byte	0
03313 0B06                        2A            .byte	$2A
03314 0B07                        00            .byte	0
03315 0B08                        2A            .byte	$2A
03316 0B09                        2A            .byte	$2A
03317 0B0A                        15            .byte	$15
03318 0B0B                        00            .byte	0
03319 0B0C                        2A            .byte	$2A
03320 0B0D                        2A            .byte	$2A
03321 0B0E                        2A            .byte	$2A
03322                                           ! 815   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03323 0B0F                        15            .byte	$15
03324 0B10                        15            .byte	$15
03325 0B11                        15            .byte	$15
03326 0B12                        15            .byte	$15
03327 0B13                        15            .byte	$15
03328 0B14                        3F            .byte	$3F
03329 0B15                        15            .byte	$15
03330 0B16                        3F            .byte	$3F
03331 0B17                        15            .byte	$15
03332 0B18                        15            .byte	$15
03333 0B19                        3F            .byte	$3F
03334 0B1A                        3F            .byte	$3F
03335 0B1B                        3F            .byte	$3F
03336 0B1C                        15            .byte	$15
03337 0B1D                        15            .byte	$15
03338 0B1E                        3F            .byte	$3F
03339 0B1F                        15            .byte	$15
03340 0B20                        3F            .byte	$3F
03341 0B21                        3F            .byte	$3F
03342 0B22                        3F            .byte	$3F
03343 0B23                        15            .byte	$15
03344 0B24                        3F            .byte	$3F
03345 0B25                        3F            .byte	$3F
03346 0B26                        3F            .byte	$3F
03347                                           ! 816   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03348 0B27                        15            .byte	$15
03349 0B28                        15            .byte	$15
03350 0B29                        15            .byte	$15
03351 0B2A                        15            .byte	$15
03352 0B2B                        15            .byte	$15
03353 0B2C                        3F            .byte	$3F
03354 0B2D                        15            .byte	$15
03355 0B2E                        3F            .byte	$3F
03356 0B2F                        15            .byte	$15
03357 0B30                        15            .byte	$15
03358 0B31                        3F            .byte	$3F
03359 0B32                        3F            .byte	$3F
03360 0B33                        3F            .byte	$3F
03361 0B34                        15            .byte	$15
03362 0B35                        15            .byte	$15
03363 0B36                        3F            .byte	$3F
03364 0B37                        15            .byte	$15
03365 0B38                        3F            .byte	$3F
03366 0B39                        3F            .byte	$3F
03367 0B3A                        3F            .byte	$3F
03368 0B3B                        15            .byte	$15
03369 0B3C                        3F            .byte	$3F
03370 0B3D                        3F            .byte	$3F
03371 0B3E                        3F            .byte	$3F
03372                                           ! 817   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03373 0B3F                        00            .byte	0
03374 0B40                        00            .byte	0
03375 0B41                        00            .byte	0
03376 0B42                        00            .byte	0
03377 0B43                        00            .byte	0
03378 0B44                        2A            .byte	$2A
03379 0B45                        00            .byte	0
03380 0B46                        2A            .byte	$2A
03381 0B47                        00            .byte	0
03382 0B48                        00            .byte	0
03383 0B49                        2A            .byte	$2A
03384 0B4A                        2A            .byte	$2A
03385 0B4B                        2A            .byte	$2A
03386 0B4C                        00            .byte	0
03387 0B4D                        00            .byte	0
03388 0B4E                        2A            .byte	$2A
03389 0B4F                        00            .byte	0
03390 0B50                        2A            .byte	$2A
03391 0B51                        2A            .byte	$2A
03392 0B52                        15            .byte	$15
03393 0B53                        00            .byte	0
03394 0B54                        2A            .byte	$2A
03395 0B55                        2A            .byte	$2A
03396 0B56                        2A            .byte	$2A
03397                                           ! 818   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03398 0B57                        00            .byte	0
03399 0B58                        00            .byte	0
03400 0B59                        00            .byte	0
03401 0B5A                        00            .byte	0
03402 0B5B                        00            .byte	0
03403 0B5C                        2A            .byte	$2A
03404 0B5D                        00            .byte	0
03405 0B5E                        2A            .byte	$2A
03406 0B5F                        00            .byte	0
03407 0B60                        00            .byte	0
03408 0B61                        2A            .byte	$2A
03409 0B62                        2A            .byte	$2A
03410 0B63                        2A            .byte	$2A
03411 0B64                        00            .byte	0
03412 0B65                        00            .byte	0
03413 0B66                        2A            .byte	$2A
03414 0B67                        00            .byte	0
03415 0B68                        2A            .byte	$2A
03416 0B69                        2A            .byte	$2A
03417 0B6A                        15            .byte	$15
03418 0B6B                        00            .byte	0
03419 0B6C                        2A            .byte	$2A
03420 0B6D                        2A            .byte	$2A
03421 0B6E                        2A            .byte	$2A
03422                                           ! 819   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03423 0B6F                        15            .byte	$15
03424 0B70                        15            .byte	$15
03425 0B71                        15            .byte	$15
03426 0B72                        15            .byte	$15
03427 0B73                        15            .byte	$15
03428 0B74                        3F            .byte	$3F
03429 0B75                        15            .byte	$15
03430 0B76                        3F            .byte	$3F
03431 0B77                        15            .byte	$15
03432 0B78                        15            .byte	$15
03433 0B79                        3F            .byte	$3F
03434 0B7A                        3F            .byte	$3F
03435 0B7B                        3F            .byte	$3F
03436 0B7C                        15            .byte	$15
03437 0B7D                        15            .byte	$15
03438 0B7E                        3F            .byte	$3F
03439 0B7F                        15            .byte	$15
03440 0B80                        3F            .byte	$3F
03441 0B81                        3F            .byte	$3F
03442 0B82                        3F            .byte	$3F
03443 0B83                        15            .byte	$15
03444 0B84                        3F            .byte	$3F
03445 0B85                        3F            .byte	$3F
03446 0B86                        3F            .byte	$3F
03447                                           ! 820   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03448 0B87                        15            .byte	$15
03449 0B88                        15            .byte	$15
03450 0B89                        15            .byte	$15
03451 0B8A                        15            .byte	$15
03452 0B8B                        15            .byte	$15
03453 0B8C                        3F            .byte	$3F
03454 0B8D                        15            .byte	$15
03455 0B8E                        3F            .byte	$3F
03456 0B8F                        15            .byte	$15
03457 0B90                        15            .byte	$15
03458 0B91                        3F            .byte	$3F
03459 0B92                        3F            .byte	$3F
03460 0B93                        3F            .byte	$3F
03461 0B94                        15            .byte	$15
03462 0B95                        15            .byte	$15
03463 0B96                        3F            .byte	$3F
03464 0B97                        15            .byte	$15
03465 0B98                        3F            .byte	$3F
03466 0B99                        3F            .byte	$3F
03467 0B9A                        3F            .byte	$3F
03468 0B9B                        15            .byte	$15
03469 0B9C                        3F            .byte	$3F
03470 0B9D                        3F            .byte	$3F
03471                                           ! 821 };
03472 0B9E                        3F            .byte	$3F
03473                                           !BCC_EOS
03474                                           ! 822 static Bit8u palette2[63+1][3]=
03475                                           ! 823 {
03476                       00000B9F            _palette2:
03477                                           ! 824   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a
03478 0B9F                        00            .byte	0
03479 0BA0                        00            .byte	0
03480 0BA1                        00            .byte	0
03481 0BA2                        00            .byte	0
03482 0BA3                        00            .byte	0
03483 0BA4                        2A            .byte	$2A
03484 0BA5                        00            .byte	0
03485 0BA6                        2A            .byte	$2A
03486 0BA7                        00            .byte	0
03487 0BA8                        00            .byte	0
03488 0BA9                        2A            .byte	$2A
03489                                           ! 824 , 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03490 0BAA                        2A            .byte	$2A
03491 0BAB                        2A            .byte	$2A
03492 0BAC                        00            .byte	0
03493 0BAD                        00            .byte	0
03494 0BAE                        2A            .byte	$2A
03495 0BAF                        00            .byte	0
03496 0BB0                        2A            .byte	$2A
03497 0BB1                        2A            .byte	$2A
03498 0BB2                        2A            .byte	$2A
03499 0BB3                        00            .byte	0
03500 0BB4                        2A            .byte	$2A
03501 0BB5                        2A            .byte	$2A
03502 0BB6                        2A            .byte	$2A
03503                                           ! 825   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03504 0BB7                        00            .byte	0
03505 0BB8                        00            .byte	0
03506 0BB9                        15            .byte	$15
03507 0BBA                        00            .byte	0
03508 0BBB                        00            .byte	0
03509 0BBC                        3F            .byte	$3F
03510 0BBD                        00            .byte	0
03511 0BBE                        2A            .byte	$2A
03512 0BBF                        15            .byte	$15
03513 0BC0                        00            .byte	0
03514 0BC1                        2A            .byte	$2A
03515 0BC2                        3F            .byte	$3F
03516 0BC3                        2A            .byte	$2A
03517 0BC4                        00            .byte	0
03518 0BC5                        15            .byte	$15
03519 0BC6                        2A            .byte	$2A
03520 0BC7                        00            .byte	0
03521 0BC8                        3F            .byte	$3F
03522 0BC9                        2A            .byte	$2A
03523 0BCA                        2A            .byte	$2A
03524 0BCB                        15            .byte	$15
03525 0BCC                        2A            .byte	$2A
03526 0BCD                        2A            .byte	$2A
03527 0BCE                        3F            .byte	$3F
03528                                           ! 826   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03529 0BCF                        00            .byte	0
03530 0BD0                        15            .byte	$15
03531 0BD1                        00            .byte	0
03532 0BD2                        00            .byte	0
03533 0BD3                        15            .byte	$15
03534 0BD4                        2A            .byte	$2A
03535 0BD5                        00            .byte	0
03536 0BD6                        3F            .byte	$3F
03537 0BD7                        00            .byte	0
03538 0BD8                        00            .byte	0
03539 0BD9                        3F            .byte	$3F
03540 0BDA                        2A            .byte	$2A
03541 0BDB                        2A            .byte	$2A
03542 0BDC                        15            .byte	$15
03543 0BDD                        00            .byte	0
03544 0BDE                        2A            .byte	$2A
03545 0BDF                        15            .byte	$15
03546 0BE0                        2A            .byte	$2A
03547 0BE1                        2A            .byte	$2A
03548 0BE2                        3F            .byte	$3F
03549 0BE3                        00            .byte	0
03550 0BE4                        2A            .byte	$2A
03551 0BE5                        3F            .byte	$3F
03552 0BE6                        2A            .byte	$2A
03553                                           ! 827   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03554 0BE7                        00            .byte	0
03555 0BE8                        15            .byte	$15
03556 0BE9                        15            .byte	$15
03557 0BEA                        00            .byte	0
03558 0BEB                        15            .byte	$15
03559 0BEC                        3F            .byte	$3F
03560 0BED                        00            .byte	0
03561 0BEE                        3F            .byte	$3F
03562 0BEF                        15            .byte	$15
03563 0BF0                        00            .byte	0
03564 0BF1                        3F            .byte	$3F
03565 0BF2                        3F            .byte	$3F
03566 0BF3                        2A            .byte	$2A
03567 0BF4                        15            .byte	$15
03568 0BF5                        15            .byte	$15
03569 0BF6                        2A            .byte	$2A
03570 0BF7                        15            .byte	$15
03571 0BF8                        3F            .byte	$3F
03572 0BF9                        2A            .byte	$2A
03573 0BFA                        3F            .byte	$3F
03574 0BFB                        15            .byte	$15
03575 0BFC                        2A            .byte	$2A
03576 0BFD                        3F            .byte	$3F
03577 0BFE                        3F            .byte	$3F
03578                                           ! 828   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03579 0BFF                        15            .byte	$15
03580 0C00                        00            .byte	0
03581 0C01                        00            .byte	0
03582 0C02                        15            .byte	$15
03583 0C03                        00            .byte	0
03584 0C04                        2A            .byte	$2A
03585 0C05                        15            .byte	$15
03586 0C06                        2A            .byte	$2A
03587 0C07                        00            .byte	0
03588 0C08                        15            .byte	$15
03589 0C09                        2A            .byte	$2A
03590 0C0A                        2A            .byte	$2A
03591 0C0B                        3F            .byte	$3F
03592 0C0C                        00            .byte	0
03593 0C0D                        00            .byte	0
03594 0C0E                        3F            .byte	$3F
03595 0C0F                        00            .byte	0
03596 0C10                        2A            .byte	$2A
03597 0C11                        3F            .byte	$3F
03598 0C12                        2A            .byte	$2A
03599 0C13                        00            .byte	0
03600 0C14                        3F            .byte	$3F
03601 0C15                        2A            .byte	$2A
03602 0C16                        2A            .byte	$2A
03603                                           ! 829   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03604 0C17                        15            .byte	$15
03605 0C18                        00            .byte	0
03606 0C19                        15            .byte	$15
03607 0C1A                        15            .byte	$15
03608 0C1B                        00            .byte	0
03609 0C1C                        3F            .byte	$3F
03610 0C1D                        15            .byte	$15
03611 0C1E                        2A            .byte	$2A
03612 0C1F                        15            .byte	$15
03613 0C20                        15            .byte	$15
03614 0C21                        2A            .byte	$2A
03615 0C22                        3F            .byte	$3F
03616 0C23                        3F            .byte	$3F
03617 0C24                        00            .byte	0
03618 0C25                        15            .byte	$15
03619 0C26                        3F            .byte	$3F
03620 0C27                        00            .byte	0
03621 0C28                        3F            .byte	$3F
03622 0C29                        3F            .byte	$3F
03623 0C2A                        2A            .byte	$2A
03624 0C2B                        15            .byte	$15
03625 0C2C                        3F            .byte	$3F
03626 0C2D                        2A            .byte	$2A
03627 0C2E                        3F            .byte	$3F
03628                                           ! 830   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03629 0C2F                        15            .byte	$15
03630 0C30                        15            .byte	$15
03631 0C31                        00            .byte	0
03632 0C32                        15            .byte	$15
03633 0C33                        15            .byte	$15
03634 0C34                        2A            .byte	$2A
03635 0C35                        15            .byte	$15
03636 0C36                        3F            .byte	$3F
03637 0C37                        00            .byte	0
03638 0C38                        15            .byte	$15
03639 0C39                        3F            .byte	$3F
03640 0C3A                        2A            .byte	$2A
03641 0C3B                        3F            .byte	$3F
03642 0C3C                        15            .byte	$15
03643 0C3D                        00            .byte	0
03644 0C3E                        3F            .byte	$3F
03645 0C3F                        15            .byte	$15
03646 0C40                        2A            .byte	$2A
03647 0C41                        3F            .byte	$3F
03648 0C42                        3F            .byte	$3F
03649 0C43                        00            .byte	0
03650 0C44                        3F            .byte	$3F
03651 0C45                        3F            .byte	$3F
03652 0C46                        2A            .byte	$2A
03653                                           ! 831   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03654 0C47                        15            .byte	$15
03655 0C48                        15            .byte	$15
03656 0C49                        15            .byte	$15
03657 0C4A                        15            .byte	$15
03658 0C4B                        15            .byte	$15
03659 0C4C                        3F            .byte	$3F
03660 0C4D                        15            .byte	$15
03661 0C4E                        3F            .byte	$3F
03662 0C4F                        15            .byte	$15
03663 0C50                        15            .byte	$15
03664 0C51                        3F            .byte	$3F
03665 0C52                        3F            .byte	$3F
03666 0C53                        3F            .byte	$3F
03667 0C54                        15            .byte	$15
03668 0C55                        15            .byte	$15
03669 0C56                        3F            .byte	$3F
03670 0C57                        15            .byte	$15
03671 0C58                        3F            .byte	$3F
03672 0C59                        3F            .byte	$3F
03673 0C5A                        3F            .byte	$3F
03674 0C5B                        15            .byte	$15
03675 0C5C                        3F            .byte	$3F
03676 0C5D                        3F            .byte	$3F
03677                                           ! 832 };
03678 0C5E                        3F            .byte	$3F
03679                                           !BCC_EOS
03680                                           ! 833 static Bit8u palette3[256][3]=
03681                                           ! 834 {
03682                       00000C5F            _palette3:
03683                                           ! 835   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03684 0C5F                        00            .byte	0
03685 0C60                        00            .byte	0
03686 0C61                        00            .byte	0
03687 0C62                        00            .byte	0
03688 0C63                        00            .byte	0
03689 0C64                        2A            .byte	$2A
03690 0C65                        00            .byte	0
03691 0C66                        2A            .byte	$2A
03692 0C67                        00            .byte	0
03693 0C68                        00            .byte	0
03694 0C69                        2A            .byte	$2A
03695 0C6A                        2A            .byte	$2A
03696 0C6B                        2A            .byte	$2A
03697 0C6C                        00            .byte	0
03698 0C6D                        00            .byte	0
03699 0C6E                        2A            .byte	$2A
03700 0C6F                        00            .byte	0
03701 0C70                        2A            .byte	$2A
03702 0C71                        2A            .byte	$2A
03703 0C72                        15            .byte	$15
03704 0C73                        00            .byte	0
03705 0C74                        2A            .byte	$2A
03706 0C75                        2A            .byte	$2A
03707 0C76                        2A            .byte	$2A
03708                                           ! 836   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03709 0C77                        15            .byte	$15
03710 0C78                        15            .byte	$15
03711 0C79                        15            .byte	$15
03712 0C7A                        15            .byte	$15
03713 0C7B                        15            .byte	$15
03714 0C7C                        3F            .byte	$3F
03715 0C7D                        15            .byte	$15
03716 0C7E                        3F            .byte	$3F
03717 0C7F                        15            .byte	$15
03718 0C80                        15            .byte	$15
03719 0C81                        3F            .byte	$3F
03720 0C82                        3F            .byte	$3F
03721 0C83                        3F            .byte	$3F
03722 0C84                        15            .byte	$15
03723 0C85                        15            .byte	$15
03724 0C86                        3F            .byte	$3F
03725 0C87                        15            .byte	$15
03726 0C88                        3F            .byte	$3F
03727 0C89                        3F            .byte	$3F
03728 0C8A                        3F            .byte	$3F
03729 0C8B                        15            .byte	$15
03730 0C8C                        3F            .byte	$3F
03731 0C8D                        3F            .byte	$3F
03732 0C8E                        3F            .byte	$3F
03733                                           ! 837   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03734 0C8F                        00            .byte	0
03735 0C90                        00            .byte	0
03736 0C91                        00            .byte	0
03737 0C92                        05            .byte	5
03738 0C93                        05            .byte	5
03739 0C94                        05            .byte	5
03740 0C95                        08            .byte	8
03741 0C96                        08            .byte	8
03742 0C97                        08            .byte	8
03743 0C98                        0B            .byte	$B
03744 0C99                        0B            .byte	$B
03745 0C9A                        0B            .byte	$B
03746 0C9B                        0E            .byte	$E
03747 0C9C                        0E            .byte	$E
03748 0C9D                        0E            .byte	$E
03749 0C9E                        11            .byte	$11
03750 0C9F                        11            .byte	$11
03751 0CA0                        11            .byte	$11
03752 0CA1                        14            .byte	$14
03753 0CA2                        14            .byte	$14
03754 0CA3                        14            .byte	$14
03755 0CA4                        18            .byte	$18
03756 0CA5                        18            .byte	$18
03757 0CA6                        18            .byte	$18
03758                                           ! 838   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03759 0CA7                        1C            .byte	$1C
03760 0CA8                        1C            .byte	$1C
03761 0CA9                        1C            .byte	$1C
03762 0CAA                        20            .byte	$20
03763 0CAB                        20            .byte	$20
03764 0CAC                        20            .byte	$20
03765 0CAD                        24            .byte	$24
03766 0CAE                        24            .byte	$24
03767 0CAF                        24            .byte	$24
03768 0CB0                        28            .byte	$28
03769 0CB1                        28            .byte	$28
03770 0CB2                        28            .byte	$28
03771 0CB3                        2D            .byte	$2D
03772 0CB4                        2D            .byte	$2D
03773 0CB5                        2D            .byte	$2D
03774 0CB6                        32            .byte	$32
03775 0CB7                        32            .byte	$32
03776 0CB8                        32            .byte	$32
03777 0CB9                        38            .byte	$38
03778 0CBA                        38            .byte	$38
03779 0CBB                        38            .byte	$38
03780 0CBC                        3F            .byte	$3F
03781 0CBD                        3F            .byte	$3F
03782 0CBE                        3F            .byte	$3F
03783                                           ! 839   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03784 0CBF                        00            .byte	0
03785 0CC0                        00            .byte	0
03786 0CC1                        3F            .byte	$3F
03787 0CC2                        10            .byte	$10
03788 0CC3                        00            .byte	0
03789 0CC4                        3F            .byte	$3F
03790 0CC5                        1F            .byte	$1F
03791 0CC6                        00            .byte	0
03792 0CC7                        3F            .byte	$3F
03793 0CC8                        2F            .byte	$2F
03794 0CC9                        00            .byte	0
03795 0CCA                        3F            .byte	$3F
03796 0CCB                        3F            .byte	$3F
03797 0CCC                        00            .byte	0
03798 0CCD                        3F            .byte	$3F
03799 0CCE                        3F            .byte	$3F
03800 0CCF                        00            .byte	0
03801 0CD0                        2F            .byte	$2F
03802 0CD1                        3F            .byte	$3F
03803 0CD2                        00            .byte	0
03804 0CD3                        1F            .byte	$1F
03805 0CD4                        3F            .byte	$3F
03806 0CD5                        00            .byte	0
03807 0CD6                        10            .byte	$10
03808                                           ! 840   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03809 0CD7                        3F            .byte	$3F
03810 0CD8                        00            .byte	0
03811 0CD9                        00            .byte	0
03812 0CDA                        3F            .byte	$3F
03813 0CDB                        10            .byte	$10
03814 0CDC                        00            .byte	0
03815 0CDD                        3F            .byte	$3F
03816 0CDE                        1F            .byte	$1F
03817 0CDF                        00            .byte	0
03818 0CE0                        3F            .byte	$3F
03819 0CE1                        2F            .byte	$2F
03820 0CE2                        00            .byte	0
03821 0CE3                        3F            .byte	$3F
03822 0CE4                        3F            .byte	$3F
03823 0CE5                        00            .byte	0
03824 0CE6                        2F            .byte	$2F
03825 0CE7                        3F            .byte	$3F
03826 0CE8                        00            .byte	0
03827 0CE9                        1F            .byte	$1F
03828 0CEA                        3F            .byte	$3F
03829 0CEB                        00            .byte	0
03830 0CEC                        10            .byte	$10
03831 0CED                        3F            .byte	$3F
03832 0CEE                        00            .byte	0
03833                                           ! 841   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03834 0CEF                        00            .byte	0
03835 0CF0                        3F            .byte	$3F
03836 0CF1                        00            .byte	0
03837 0CF2                        00            .byte	0
03838 0CF3                        3F            .byte	$3F
03839 0CF4                        10            .byte	$10
03840 0CF5                        00            .byte	0
03841 0CF6                        3F            .byte	$3F
03842 0CF7                        1F            .byte	$1F
03843 0CF8                        00            .byte	0
03844 0CF9                        3F            .byte	$3F
03845 0CFA                        2F            .byte	$2F
03846 0CFB                        00            .byte	0
03847 0CFC                        3F            .byte	$3F
03848 0CFD                        3F            .byte	$3F
03849 0CFE                        00            .byte	0
03850 0CFF                        2F            .byte	$2F
03851 0D00                        3F            .byte	$3F
03852 0D01                        00            .byte	0
03853 0D02                        1F            .byte	$1F
03854 0D03                        3F            .byte	$3F
03855 0D04                        00            .byte	0
03856 0D05                        10            .byte	$10
03857 0D06                        3F            .byte	$3F
03858                                           ! 842   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x2
03859 0D07                        1F            .byte	$1F
03860 0D08                        1F            .byte	$1F
03861 0D09                        3F            .byte	$3F
03862 0D0A                        27            .byte	$27
03863 0D0B                        1F            .byte	$1F
03864 0D0C                        3F            .byte	$3F
03865 0D0D                        2F            .byte	$2F
03866 0D0E                        1F            .byte	$1F
03867 0D0F                        3F            .byte	$3F
03868 0D10                        37            .byte	$37
03869 0D11                        1F            .byte	$1F
03870 0D12                        3F            .byte	$3F
03871 0D13                        3F            .byte	$3F
03872 0D14                        1F            .byte	$1F
03873 0D15                        3F            .byte	$3F
03874 0D16                        3F            .byte	$3F
03875 0D17                        1F            .byte	$1F
03876 0D18                        37            .byte	$37
03877 0D19                        3F            .byte	$3F
03878 0D1A                        1F            .byte	$1F
03879 0D1B                        2F            .byte	$2F
03880 0D1C                        3F            .byte	$3F
03881 0D1D                        1F            .byte	$1F
03882                                           ! 842 7,
03883 0D1E                        27            .byte	$27
03884                                           ! 843   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03885 0D1F                        3F            .byte	$3F
03886 0D20                        1F            .byte	$1F
03887 0D21                        1F            .byte	$1F
03888 0D22                        3F            .byte	$3F
03889 0D23                        27            .byte	$27
03890 0D24                        1F            .byte	$1F
03891 0D25                        3F            .byte	$3F
03892 0D26                        2F            .byte	$2F
03893 0D27                        1F            .byte	$1F
03894 0D28                        3F            .byte	$3F
03895 0D29                        37            .byte	$37
03896 0D2A                        1F            .byte	$1F
03897 0D2B                        3F            .byte	$3F
03898 0D2C                        3F            .byte	$3F
03899 0D2D                        1F            .byte	$1F
03900 0D2E                        37            .byte	$37
03901 0D2F                        3F            .byte	$3F
03902 0D30                        1F            .byte	$1F
03903 0D31                        2F            .byte	$2F
03904 0D32                        3F            .byte	$3F
03905 0D33                        1F            .byte	$1F
03906 0D34                        27            .byte	$27
03907 0D35                        3F            .byte	$3F
03908 0D36                        1F            .byte	$1F
03909                                           ! 844   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03910 0D37                        1F            .byte	$1F
03911 0D38                        3F            .byte	$3F
03912 0D39                        1F            .byte	$1F
03913 0D3A                        1F            .byte	$1F
03914 0D3B                        3F            .byte	$3F
03915 0D3C                        27            .byte	$27
03916 0D3D                        1F            .byte	$1F
03917 0D3E                        3F            .byte	$3F
03918 0D3F                        2F            .byte	$2F
03919 0D40                        1F            .byte	$1F
03920 0D41                        3F            .byte	$3F
03921 0D42                        37            .byte	$37
03922 0D43                        1F            .byte	$1F
03923 0D44                        3F            .byte	$3F
03924 0D45                        3F            .byte	$3F
03925 0D46                        1F            .byte	$1F
03926 0D47                        37            .byte	$37
03927 0D48                        3F            .byte	$3F
03928 0D49                        1F            .byte	$1F
03929 0D4A                        2F            .byte	$2F
03930 0D4B                        3F            .byte	$3F
03931 0D4C                        1F            .byte	$1F
03932 0D4D                        27            .byte	$27
03933 0D4E                        3F            .byte	$3F
03934                                           ! 845   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03935 0D4F                        2D            .byte	$2D
03936 0D50                        2D            .byte	$2D
03937 0D51                        3F            .byte	$3F
03938 0D52                        31            .byte	$31
03939 0D53                        2D            .byte	$2D
03940 0D54                        3F            .byte	$3F
03941 0D55                        36            .byte	$36
03942 0D56                        2D            .byte	$2D
03943 0D57                        3F            .byte	$3F
03944 0D58                        3A            .byte	$3A
03945 0D59                        2D            .byte	$2D
03946 0D5A                        3F            .byte	$3F
03947 0D5B                        3F            .byte	$3F
03948 0D5C                        2D            .byte	$2D
03949 0D5D                        3F            .byte	$3F
03950 0D5E                        3F            .byte	$3F
03951 0D5F                        2D            .byte	$2D
03952 0D60                        3A            .byte	$3A
03953 0D61                        3F            .byte	$3F
03954 0D62                        2D            .byte	$2D
03955 0D63                        36            .byte	$36
03956 0D64                        3F            .byte	$3F
03957 0D65                        2D            .byte	$2D
03958 0D66                        31            .byte	$31
03959                                           ! 846   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03960 0D67                        3F            .byte	$3F
03961 0D68                        2D            .byte	$2D
03962 0D69                        2D            .byte	$2D
03963 0D6A                        3F            .byte	$3F
03964 0D6B                        31            .byte	$31
03965 0D6C                        2D            .byte	$2D
03966 0D6D                        3F            .byte	$3F
03967 0D6E                        36            .byte	$36
03968 0D6F                        2D            .byte	$2D
03969 0D70                        3F            .byte	$3F
03970 0D71                        3A            .byte	$3A
03971 0D72                        2D            .byte	$2D
03972 0D73                        3F            .byte	$3F
03973 0D74                        3F            .byte	$3F
03974 0D75                        2D            .byte	$2D
03975 0D76                        3A            .byte	$3A
03976 0D77                        3F            .byte	$3F
03977 0D78                        2D            .byte	$2D
03978 0D79                        36            .byte	$36
03979 0D7A                        3F            .byte	$3F
03980 0D7B                        2D            .byte	$2D
03981 0D7C                        31            .byte	$31
03982 0D7D                        3F            .byte	$3F
03983 0D7E                        2D            .byte	$2D
03984                                           ! 847   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03985 0D7F                        2D            .byte	$2D
03986 0D80                        3F            .byte	$3F
03987 0D81                        2D            .byte	$2D
03988 0D82                        2D            .byte	$2D
03989 0D83                        3F            .byte	$3F
03990 0D84                        31            .byte	$31
03991 0D85                        2D            .byte	$2D
03992 0D86                        3F            .byte	$3F
03993 0D87                        36            .byte	$36
03994 0D88                        2D            .byte	$2D
03995 0D89                        3F            .byte	$3F
03996 0D8A                        3A            .byte	$3A
03997 0D8B                        2D            .byte	$2D
03998 0D8C                        3F            .byte	$3F
03999 0D8D                        3F            .byte	$3F
04000 0D8E                        2D            .byte	$2D
04001 0D8F                        3A            .byte	$3A
04002 0D90                        3F            .byte	$3F
04003 0D91                        2D            .byte	$2D
04004 0D92                        36            .byte	$36
04005 0D93                        3F            .byte	$3F
04006 0D94                        2D            .byte	$2D
04007 0D95                        31            .byte	$31
04008 0D96                        3F            .byte	$3F
04009                                           ! 848   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
04010 0D97                        00            .byte	0
04011 0D98                        00            .byte	0
04012 0D99                        1C            .byte	$1C
04013 0D9A                        07            .byte	7
04014 0D9B                        00            .byte	0
04015 0D9C                        1C            .byte	$1C
04016 0D9D                        0E            .byte	$E
04017 0D9E                        00            .byte	0
04018 0D9F                        1C            .byte	$1C
04019 0DA0                        15            .byte	$15
04020 0DA1                        00            .byte	0
04021 0DA2                        1C            .byte	$1C
04022 0DA3                        1C            .byte	$1C
04023 0DA4                        00            .byte	0
04024 0DA5                        1C            .byte	$1C
04025 0DA6                        1C            .byte	$1C
04026 0DA7                        00            .byte	0
04027 0DA8                        15            .byte	$15
04028 0DA9                        1C            .byte	$1C
04029 0DAA                        00            .byte	0
04030 0DAB                        0E            .byte	$E
04031 0DAC                        1C            .byte	$1C
04032 0DAD                        00            .byte	0
04033 0DAE                        07            .byte	7
04034                                           ! 849   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04035 0DAF                        1C            .byte	$1C
04036 0DB0                        00            .byte	0
04037 0DB1                        00            .byte	0
04038 0DB2                        1C            .byte	$1C
04039 0DB3                        07            .byte	7
04040 0DB4                        00            .byte	0
04041 0DB5                        1C            .byte	$1C
04042 0DB6                        0E            .byte	$E
04043 0DB7                        00            .byte	0
04044 0DB8                        1C            .byte	$1C
04045 0DB9                        15            .byte	$15
04046 0DBA                        00            .byte	0
04047 0DBB                        1C            .byte	$1C
04048 0DBC                        1C            .byte	$1C
04049 0DBD                        00            .byte	0
04050 0DBE                        15            .byte	$15
04051 0DBF                        1C            .byte	$1C
04052 0DC0                        00            .byte	0
04053 0DC1                        0E            .byte	$E
04054 0DC2                        1C            .byte	$1C
04055 0DC3                        00            .byte	0
04056 0DC4                        07            .byte	7
04057 0DC5                        1C            .byte	$1C
04058 0DC6                        00            .byte	0
04059                                           ! 850   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04060 0DC7                        00            .byte	0
04061 0DC8                        1C            .byte	$1C
04062 0DC9                        00            .byte	0
04063 0DCA                        00            .byte	0
04064 0DCB                        1C            .byte	$1C
04065 0DCC                        07            .byte	7
04066 0DCD                        00            .byte	0
04067 0DCE                        1C            .byte	$1C
04068 0DCF                        0E            .byte	$E
04069 0DD0                        00            .byte	0
04070 0DD1                        1C            .byte	$1C
04071 0DD2                        15            .byte	$15
04072 0DD3                        00            .byte	0
04073 0DD4                        1C            .byte	$1C
04074 0DD5                        1C            .byte	$1C
04075 0DD6                        00            .byte	0
04076 0DD7                        15            .byte	$15
04077 0DD8                        1C            .byte	$1C
04078 0DD9                        00            .byte	0
04079 0DDA                        0E            .byte	$E
04080 0DDB                        1C            .byte	$1C
04081 0DDC                        00            .byte	0
04082 0DDD                        07            .byte	7
04083 0DDE                        1C            .byte	$1C
04084                                           ! 851   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04085 0DDF                        0E            .byte	$E
04086 0DE0                        0E            .byte	$E
04087 0DE1                        1C            .byte	$1C
04088 0DE2                        11            .byte	$11
04089 0DE3                        0E            .byte	$E
04090 0DE4                        1C            .byte	$1C
04091 0DE5                        15            .byte	$15
04092 0DE6                        0E            .byte	$E
04093 0DE7                        1C            .byte	$1C
04094 0DE8                        18            .byte	$18
04095 0DE9                        0E            .byte	$E
04096 0DEA                        1C            .byte	$1C
04097 0DEB                        1C            .byte	$1C
04098 0DEC                        0E            .byte	$E
04099 0DED                        1C            .byte	$1C
04100 0DEE                        1C            .byte	$1C
04101 0DEF                        0E            .byte	$E
04102 0DF0                        18            .byte	$18
04103 0DF1                        1C            .byte	$1C
04104 0DF2                        0E            .byte	$E
04105 0DF3                        15            .byte	$15
04106 0DF4                        1C            .byte	$1C
04107 0DF5                        0E            .byte	$E
04108 0DF6                        11            .byte	$11
04109                                           ! 852   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04110 0DF7                        1C            .byte	$1C
04111 0DF8                        0E            .byte	$E
04112 0DF9                        0E            .byte	$E
04113 0DFA                        1C            .byte	$1C
04114 0DFB                        11            .byte	$11
04115 0DFC                        0E            .byte	$E
04116 0DFD                        1C            .byte	$1C
04117 0DFE                        15            .byte	$15
04118 0DFF                        0E            .byte	$E
04119 0E00                        1C            .byte	$1C
04120 0E01                        18            .byte	$18
04121 0E02                        0E            .byte	$E
04122 0E03                        1C            .byte	$1C
04123 0E04                        1C            .byte	$1C
04124 0E05                        0E            .byte	$E
04125 0E06                        18            .byte	$18
04126 0E07                        1C            .byte	$1C
04127 0E08                        0E            .byte	$E
04128 0E09                        15            .byte	$15
04129 0E0A                        1C            .byte	$1C
04130 0E0B                        0E            .byte	$E
04131 0E0C                        11            .byte	$11
04132 0E0D                        1C            .byte	$1C
04133 0E0E                        0E            .byte	$E
04134                                           ! 853   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04135 0E0F                        0E            .byte	$E
04136 0E10                        1C            .byte	$1C
04137 0E11                        0E            .byte	$E
04138 0E12                        0E            .byte	$E
04139 0E13                        1C            .byte	$1C
04140 0E14                        11            .byte	$11
04141 0E15                        0E            .byte	$E
04142 0E16                        1C            .byte	$1C
04143 0E17                        15            .byte	$15
04144 0E18                        0E            .byte	$E
04145 0E19                        1C            .byte	$1C
04146 0E1A                        18            .byte	$18
04147 0E1B                        0E            .byte	$E
04148 0E1C                        1C            .byte	$1C
04149 0E1D                        1C            .byte	$1C
04150 0E1E                        0E            .byte	$E
04151 0E1F                        18            .byte	$18
04152 0E20                        1C            .byte	$1C
04153 0E21                        0E            .byte	$E
04154 0E22                        15            .byte	$15
04155 0E23                        1C            .byte	$1C
04156 0E24                        0E            .byte	$E
04157 0E25                        11            .byte	$11
04158 0E26                        1C            .byte	$1C
04159                                           ! 854   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04160 0E27                        14            .byte	$14
04161 0E28                        14            .byte	$14
04162 0E29                        1C            .byte	$1C
04163 0E2A                        16            .byte	$16
04164 0E2B                        14            .byte	$14
04165 0E2C                        1C            .byte	$1C
04166 0E2D                        18            .byte	$18
04167 0E2E                        14            .byte	$14
04168 0E2F                        1C            .byte	$1C
04169 0E30                        1A            .byte	$1A
04170 0E31                        14            .byte	$14
04171 0E32                        1C            .byte	$1C
04172 0E33                        1C            .byte	$1C
04173 0E34                        14            .byte	$14
04174 0E35                        1C            .byte	$1C
04175 0E36                        1C            .byte	$1C
04176 0E37                        14            .byte	$14
04177 0E38                        1A            .byte	$1A
04178 0E39                        1C            .byte	$1C
04179 0E3A                        14            .byte	$14
04180 0E3B                        18            .byte	$18
04181 0E3C                        1C            .byte	$1C
04182 0E3D                        14            .byte	$14
04183 0E3E                        16            .byte	$16
04184                                           ! 855   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04185 0E3F                        1C            .byte	$1C
04186 0E40                        14            .byte	$14
04187 0E41                        14            .byte	$14
04188 0E42                        1C            .byte	$1C
04189 0E43                        16            .byte	$16
04190 0E44                        14            .byte	$14
04191 0E45                        1C            .byte	$1C
04192 0E46                        18            .byte	$18
04193 0E47                        14            .byte	$14
04194 0E48                        1C            .byte	$1C
04195 0E49                        1A            .byte	$1A
04196 0E4A                        14            .byte	$14
04197 0E4B                        1C            .byte	$1C
04198 0E4C                        1C            .byte	$1C
04199 0E4D                        14            .byte	$14
04200 0E4E                        1A            .byte	$1A
04201 0E4F                        1C            .byte	$1C
04202 0E50                        14            .byte	$14
04203 0E51                        18            .byte	$18
04204 0E52                        1C            .byte	$1C
04205 0E53                        14            .byte	$14
04206 0E54                        16            .byte	$16
04207 0E55                        1C            .byte	$1C
04208 0E56                        14            .byte	$14
04209                                           ! 856   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04210 0E57                        14            .byte	$14
04211 0E58                        1C            .byte	$1C
04212 0E59                        14            .byte	$14
04213 0E5A                        14            .byte	$14
04214 0E5B                        1C            .byte	$1C
04215 0E5C                        16            .byte	$16
04216 0E5D                        14            .byte	$14
04217 0E5E                        1C            .byte	$1C
04218 0E5F                        18            .byte	$18
04219 0E60                        14            .byte	$14
04220 0E61                        1C            .byte	$1C
04221 0E62                        1A            .byte	$1A
04222 0E63                        14            .byte	$14
04223 0E64                        1C            .byte	$1C
04224 0E65                        1C            .byte	$1C
04225 0E66                        14            .byte	$14
04226 0E67                        1A            .byte	$1A
04227 0E68                        1C            .byte	$1C
04228 0E69                        14            .byte	$14
04229 0E6A                        18            .byte	$18
04230 0E6B                        1C            .byte	$1C
04231 0E6C                        14            .byte	$14
04232 0E6D                        16            .byte	$16
04233 0E6E                        1C            .byte	$1C
04234                                           ! 857   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04235 0E6F                        00            .byte	0
04236 0E70                        00            .byte	0
04237 0E71                        10            .byte	$10
04238 0E72                        04            .byte	4
04239 0E73                        00            .byte	0
04240 0E74                        10            .byte	$10
04241 0E75                        08            .byte	8
04242 0E76                        00            .byte	0
04243 0E77                        10            .byte	$10
04244 0E78                        0C            .byte	$C
04245 0E79                        00            .byte	0
04246 0E7A                        10            .byte	$10
04247 0E7B                        10            .byte	$10
04248 0E7C                        00            .byte	0
04249 0E7D                        10            .byte	$10
04250 0E7E                        10            .byte	$10
04251 0E7F                        00            .byte	0
04252 0E80                        0C            .byte	$C
04253 0E81                        10            .byte	$10
04254 0E82                        00            .byte	0
04255 0E83                        08            .byte	8
04256 0E84                        10            .byte	$10
04257 0E85                        00            .byte	0
04258 0E86                        04            .byte	4
04259                                           ! 858   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x0
04260 0E87                        10            .byte	$10
04261 0E88                        00            .byte	0
04262 0E89                        00            .byte	0
04263 0E8A                        10            .byte	$10
04264 0E8B                        04            .byte	4
04265 0E8C                        00            .byte	0
04266 0E8D                        10            .byte	$10
04267 0E8E                        08            .byte	8
04268 0E8F                        00            .byte	0
04269 0E90                        10            .byte	$10
04270 0E91                        0C            .byte	$C
04271 0E92                        00            .byte	0
04272 0E93                        10            .byte	$10
04273 0E94                        10            .byte	$10
04274 0E95                        00            .byte	0
04275 0E96                        0C            .byte	$C
04276 0E97                        10            .byte	$10
04277                                           ! 858 0, 0x08,0x10,0x00, 0x04,0x10,0x00,
04278 0E98                        00            .byte	0
04279 0E99                        08            .byte	8
04280 0E9A                        10            .byte	$10
04281 0E9B                        00            .byte	0
04282 0E9C                        04            .byte	4
04283 0E9D                        10            .byte	$10
04284 0E9E                        00            .byte	0
04285                                           ! 859   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04286 0E9F                        00            .byte	0
04287 0EA0                        10            .byte	$10
04288 0EA1                        00            .byte	0
04289 0EA2                        00            .byte	0
04290 0EA3                        10            .byte	$10
04291 0EA4                        04            .byte	4
04292 0EA5                        00            .byte	0
04293 0EA6                        10            .byte	$10
04294 0EA7                        08            .byte	8
04295 0EA8                        00            .byte	0
04296 0EA9                        10            .byte	$10
04297 0EAA                        0C            .byte	$C
04298 0EAB                        00            .byte	0
04299 0EAC                        10            .byte	$10
04300 0EAD                        10            .byte	$10
04301 0EAE                        00            .byte	0
04302 0EAF                        0C            .byte	$C
04303 0EB0                        10            .byte	$10
04304 0EB1                        00            .byte	0
04305 0EB2                        08            .byte	8
04306 0EB3                        10            .byte	$10
04307 0EB4                        00            .byte	0
04308 0EB5                        04            .byte	4
04309 0EB6                        10            .byte	$10
04310                                           ! 860   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04311 0EB7                        08            .byte	8
04312 0EB8                        08            .byte	8
04313 0EB9                        10            .byte	$10
04314 0EBA                        0A            .byte	$A
04315 0EBB                        08            .byte	8
04316 0EBC                        10            .byte	$10
04317 0EBD                        0C            .byte	$C
04318 0EBE                        08            .byte	8
04319 0EBF                        10            .byte	$10
04320 0EC0                        0E            .byte	$E
04321 0EC1                        08            .byte	8
04322 0EC2                        10            .byte	$10
04323 0EC3                        10            .byte	$10
04324 0EC4                        08            .byte	8
04325 0EC5                        10            .byte	$10
04326 0EC6                        10            .byte	$10
04327 0EC7                        08            .byte	8
04328 0EC8                        0E            .byte	$E
04329 0EC9                        10            .byte	$10
04330 0ECA                        08            .byte	8
04331 0ECB                        0C            .byte	$C
04332 0ECC                        10            .byte	$10
04333 0ECD                        08            .byte	8
04334 0ECE                        0A            .byte	$A
04335                                           ! 861   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04336 0ECF                        10            .byte	$10
04337 0ED0                        08            .byte	8
04338 0ED1                        08            .byte	8
04339 0ED2                        10            .byte	$10
04340 0ED3                        0A            .byte	$A
04341 0ED4                        08            .byte	8
04342 0ED5                        10            .byte	$10
04343 0ED6                        0C            .byte	$C
04344 0ED7                        08            .byte	8
04345 0ED8                        10            .byte	$10
04346 0ED9                        0E            .byte	$E
04347 0EDA                        08            .byte	8
04348 0EDB                        10            .byte	$10
04349 0EDC                        10            .byte	$10
04350 0EDD                        08            .byte	8
04351 0EDE                        0E            .byte	$E
04352 0EDF                        10            .byte	$10
04353 0EE0                        08            .byte	8
04354 0EE1                        0C            .byte	$C
04355 0EE2                        10            .byte	$10
04356 0EE3                        08            .byte	8
04357 0EE4                        0A            .byte	$A
04358 0EE5                        10            .byte	$10
04359 0EE6                        08            .byte	8
04360                                           ! 862   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04361 0EE7                        08            .byte	8
04362 0EE8                        10            .byte	$10
04363 0EE9                        08            .byte	8
04364 0EEA                        08            .byte	8
04365 0EEB                        10            .byte	$10
04366 0EEC                        0A            .byte	$A
04367 0EED                        08            .byte	8
04368 0EEE                        10            .byte	$10
04369 0EEF                        0C            .byte	$C
04370 0EF0                        08            .byte	8
04371 0EF1                        10            .byte	$10
04372 0EF2                        0E            .byte	$E
04373 0EF3                        08            .byte	8
04374 0EF4                        10            .byte	$10
04375 0EF5                        10            .byte	$10
04376 0EF6                        08            .byte	8
04377 0EF7                        0E            .byte	$E
04378 0EF8                        10            .byte	$10
04379 0EF9                        08            .byte	8
04380 0EFA                        0C            .byte	$C
04381 0EFB                        10            .byte	$10
04382 0EFC                        08            .byte	8
04383 0EFD                        0A            .byte	$A
04384 0EFE                        10            .byte	$10
04385                                           ! 863   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04386 0EFF                        0B            .byte	$B
04387 0F00                        0B            .byte	$B
04388 0F01                        10            .byte	$10
04389 0F02                        0C            .byte	$C
04390 0F03                        0B            .byte	$B
04391 0F04                        10            .byte	$10
04392 0F05                        0D            .byte	$D
04393 0F06                        0B            .byte	$B
04394 0F07                        10            .byte	$10
04395 0F08                        0F            .byte	$F
04396 0F09                        0B            .byte	$B
04397 0F0A                        10            .byte	$10
04398 0F0B                        10            .byte	$10
04399 0F0C                        0B            .byte	$B
04400 0F0D                        10            .byte	$10
04401 0F0E                        10            .byte	$10
04402 0F0F                        0B            .byte	$B
04403 0F10                        0F            .byte	$F
04404 0F11                        10            .byte	$10
04405 0F12                        0B            .byte	$B
04406 0F13                        0D            .byte	$D
04407 0F14                        10            .byte	$10
04408 0F15                        0B            .byte	$B
04409 0F16                        0C            .byte	$C
04410                                           ! 864   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04411 0F17                        10            .byte	$10
04412 0F18                        0B            .byte	$B
04413 0F19                        0B            .byte	$B
04414 0F1A                        10            .byte	$10
04415 0F1B                        0C            .byte	$C
04416 0F1C                        0B            .byte	$B
04417 0F1D                        10            .byte	$10
04418 0F1E                        0D            .byte	$D
04419 0F1F                        0B            .byte	$B
04420 0F20                        10            .byte	$10
04421 0F21                        0F            .byte	$F
04422 0F22                        0B            .byte	$B
04423 0F23                        10            .byte	$10
04424 0F24                        10            .byte	$10
04425 0F25                        0B            .byte	$B
04426 0F26                        0F            .byte	$F
04427 0F27                        10            .byte	$10
04428 0F28                        0B            .byte	$B
04429 0F29                        0D            .byte	$D
04430 0F2A                        10            .byte	$10
04431 0F2B                        0B            .byte	$B
04432 0F2C                        0C            .byte	$C
04433 0F2D                        10            .byte	$10
04434 0F2E                        0B            .byte	$B
04435                                           ! 865   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04436 0F2F                        0B            .byte	$B
04437 0F30                        10            .byte	$10
04438 0F31                        0B            .byte	$B
04439 0F32                        0B            .byte	$B
04440 0F33                        10            .byte	$10
04441 0F34                        0C            .byte	$C
04442 0F35                        0B            .byte	$B
04443 0F36                        10            .byte	$10
04444 0F37                        0D            .byte	$D
04445 0F38                        0B            .byte	$B
04446 0F39                        10            .byte	$10
04447 0F3A                        0F            .byte	$F
04448 0F3B                        0B            .byte	$B
04449 0F3C                        10            .byte	$10
04450 0F3D                        10            .byte	$10
04451 0F3E                        0B            .byte	$B
04452 0F3F                        0F            .byte	$F
04453 0F40                        10            .byte	$10
04454 0F41                        0B            .byte	$B
04455 0F42                        0D            .byte	$D
04456 0F43                        10            .byte	$10
04457 0F44                        0B            .byte	$B
04458 0F45                        0C            .byte	$C
04459 0F46                        10            .byte	$10
04460                                           ! 866   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04461 0F47                        00            .byte	0
04462 0F48                        00            .byte	0
04463 0F49                        00            .byte	0
04464 0F4A                        00            .byte	0
04465 0F4B                        00            .byte	0
04466 0F4C                        00            .byte	0
04467 0F4D                        00            .byte	0
04468 0F4E                        00            .byte	0
04469 0F4F                        00            .byte	0
04470 0F50                        00            .byte	0
04471 0F51                        00            .byte	0
04472 0F52                        00            .byte	0
04473 0F53                        00            .byte	0
04474 0F54                        00            .byte	0
04475 0F55                        00            .byte	0
04476 0F56                        00            .byte	0
04477 0F57                        00            .byte	0
04478 0F58                        00            .byte	0
04479 0F59                        00            .byte	0
04480 0F5A                        00            .byte	0
04481 0F5B                        00            .byte	0
04482 0F5C                        00            .byte	0
04483 0F5D                        00            .byte	0
04484                                           ! 867 };
04485 0F5E                        00            .byte	0
04486                                           !BCC_EOS
04487                                           ! 868 static Bit8u static_functionality[0x10]=
04488                                           ! 869 {
04489                       00000F5F            _static_functionality:
04490                                           ! 870          0xff,
04491 0F5F                        FF            .byte	$FF
04492                                           ! 871          0xe0,
04493 0F60                        E0            .byte	$E0
04494                                           ! 872          0x0f,
04495 0F61                        0F            .byte	$F
04496                                           ! 873          0x00, 0x00, 0x00, 0x00,
04497 0F62                        00            .byte	0
04498 0F63                        00            .byte	0
04499 0F64                        00            .byte	0
04500 0F65                        00            .byte	0
04501                                           ! 874          0x07,
04502 0F66                        07            .byte	7
04503                                           ! 875          0x02,
04504 0F67                        02            .byte	2
04505                                           ! 876          0x08,
04506 0F68                        08            .byte	8
04507                                           ! 877          0xe7,
04508 0F69                        E7            .byte	$E7
04509                                           ! 878          0x0c,
04510 0F6A                        0C            .byte	$C
04511                                           ! 879          0x00,
04512 0F6B                        00            .byte	0
04513                                           ! 880          0x00,
04514 0F6C                        00            .byte	0
04515                                           ! 881          0x00,
04516 0F6D                        00            .byte	0
04517                                           ! 882          0x00
04518                                           ! 883 };
04519 0F6E                        00            .byte	0
04520                                           !BCC_EOS
04521                                           ! 884 static Bit8u vgafont8[256*8]=
04522                                           ! 885 {
04523                       00000F6F            _vgafont8:
04524                                           ! 886  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04525 0F6F                        00            .byte	0
04526 0F70                        00            .byte	0
04527 0F71                        00            .byte	0
04528 0F72                        00            .byte	0
04529 0F73                        00            .byte	0
04530 0F74                        00            .byte	0
04531 0F75                        00            .byte	0
04532 0F76                        00            .byte	0
04533                                           ! 887  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04534 0F77                        7E            .byte	$7E
04535 0F78                        81            .byte	$81
04536 0F79                        A5            .byte	$A5
04537 0F7A                        81            .byte	$81
04538 0F7B                        BD            .byte	$BD
04539 0F7C                        99            .byte	$99
04540 0F7D                        81            .byte	$81
04541 0F7E                        7E            .byte	$7E
04542                                           ! 888  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04543 0F7F                        7E            .byte	$7E
04544 0F80                        FF            .byte	$FF
04545 0F81                        DB            .byte	$DB
04546 0F82                        FF            .byte	$FF
04547 0F83                        C3            .byte	$C3
04548 0F84                        E7            .byte	$E7
04549 0F85                        FF            .byte	$FF
04550 0F86                        7E            .byte	$7E
04551                                           ! 889  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04552 0F87                        6C            .byte	$6C
04553 0F88                        FE            .byte	$FE
04554 0F89                        FE            .byte	$FE
04555 0F8A                        FE            .byte	$FE
04556 0F8B                        7C            .byte	$7C
04557 0F8C                        38            .byte	$38
04558 0F8D                        10            .byte	$10
04559 0F8E                        00            .byte	0
04560                                           ! 890  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04561 0F8F                        10            .byte	$10
04562 0F90                        38            .byte	$38
04563 0F91                        7C            .byte	$7C
04564 0F92                        FE            .byte	$FE
04565 0F93                        7C            .byte	$7C
04566 0F94                        38            .byte	$38
04567 0F95                        10            .byte	$10
04568 0F96                        00            .byte	0
04569                                           ! 891  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04570 0F97                        38            .byte	$38
04571 0F98                        7C            .byte	$7C
04572 0F99                        38            .byte	$38
04573 0F9A                        FE            .byte	$FE
04574 0F9B                        FE            .byte	$FE
04575 0F9C                        7C            .byte	$7C
04576 0F9D                        38            .byte	$38
04577 0F9E                        7C            .byte	$7C
04578                                           ! 892  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04579 0F9F                        10            .byte	$10
04580 0FA0                        10            .byte	$10
04581 0FA1                        38            .byte	$38
04582 0FA2                        7C            .byte	$7C
04583 0FA3                        FE            .byte	$FE
04584 0FA4                        7C            .byte	$7C
04585 0FA5                        38            .byte	$38
04586 0FA6                        7C            .byte	$7C
04587                                           ! 893  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04588 0FA7                        00            .byte	0
04589 0FA8                        00            .byte	0
04590 0FA9                        18            .byte	$18
04591 0FAA                        3C            .byte	$3C
04592 0FAB                        3C            .byte	$3C
04593 0FAC                        18            .byte	$18
04594 0FAD                        00            .byte	0
04595 0FAE                        00            .byte	0
04596                                           ! 894  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04597 0FAF                        FF            .byte	$FF
04598 0FB0                        FF            .byte	$FF
04599 0FB1                        E7            .byte	$E7
04600 0FB2                        C3            .byte	$C3
04601 0FB3                        C3            .byte	$C3
04602 0FB4                        E7            .byte	$E7
04603 0FB5                        FF            .byte	$FF
04604 0FB6                        FF            .byte	$FF
04605                                           ! 895  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04606 0FB7                        00            .byte	0
04607 0FB8                        3C            .byte	$3C
04608 0FB9                        66            .byte	$66
04609 0FBA                        42            .byte	$42
04610 0FBB                        42            .byte	$42
04611 0FBC                        66            .byte	$66
04612 0FBD                        3C            .byte	$3C
04613 0FBE                        00            .byte	0
04614                                           ! 896  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04615 0FBF                        FF            .byte	$FF
04616 0FC0                        C3            .byte	$C3
04617 0FC1                        99            .byte	$99
04618 0FC2                        BD            .byte	$BD
04619 0FC3                        BD            .byte	$BD
04620 0FC4                        99            .byte	$99
04621 0FC5                        C3            .byte	$C3
04622 0FC6                        FF            .byte	$FF
04623                                           ! 897  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04624 0FC7                        0F            .byte	$F
04625 0FC8                        07            .byte	7
04626 0FC9                        0F            .byte	$F
04627 0FCA                        7D            .byte	$7D
04628 0FCB                        CC            .byte	$CC
04629 0FCC                        CC            .byte	$CC
04630 0FCD                        CC            .byte	$CC
04631 0FCE                        78            .byte	$78
04632                                           ! 898  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04633 0FCF                        3C            .byte	$3C
04634 0FD0                        66            .byte	$66
04635 0FD1                        66            .byte	$66
04636 0FD2                        66            .byte	$66
04637 0FD3                        3C            .byte	$3C
04638 0FD4                        18            .byte	$18
04639 0FD5                        7E            .byte	$7E
04640 0FD6                        18            .byte	$18
04641                                           ! 899  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0
04642 0FD7                        3F            .byte	$3F
04643 0FD8                        33            .byte	$33
04644 0FD9                        3F            .byte	$3F
04645 0FDA                        30            .byte	$30
04646 0FDB                        30            .byte	$30
04647 0FDC                        70            .byte	$70
04648 0FDD                        F0            .byte	$F0
04649                                           ! 899 xe0,
04650 0FDE                        E0            .byte	$E0
04651                                           ! 900  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04652 0FDF                        7F            .byte	$7F
04653 0FE0                        63            .byte	$63
04654 0FE1                        7F            .byte	$7F
04655 0FE2                        63            .byte	$63
04656 0FE3                        63            .byte	$63
04657 0FE4                        67            .byte	$67
04658 0FE5                        E6            .byte	$E6
04659 0FE6                        C0            .byte	$C0
04660                                           ! 901  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04661 0FE7                        99            .byte	$99
04662 0FE8                        5A            .byte	$5A
04663 0FE9                        3C            .byte	$3C
04664 0FEA                        E7            .byte	$E7
04665 0FEB                        E7            .byte	$E7
04666 0FEC                        3C            .byte	$3C
04667 0FED                        5A            .byte	$5A
04668 0FEE                        99            .byte	$99
04669                                           ! 902  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04670 0FEF                        80            .byte	$80
04671 0FF0                        E0            .byte	$E0
04672 0FF1                        F8            .byte	$F8
04673 0FF2                        FE            .byte	$FE
04674 0FF3                        F8            .byte	$F8
04675 0FF4                        E0            .byte	$E0
04676 0FF5                        80            .byte	$80
04677 0FF6                        00            .byte	0
04678                                           ! 903  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04679 0FF7                        02            .byte	2
04680 0FF8                        0E            .byte	$E
04681 0FF9                        3E            .byte	$3E
04682 0FFA                        FE            .byte	$FE
04683 0FFB                        3E            .byte	$3E
04684 0FFC                        0E            .byte	$E
04685 0FFD                        02            .byte	2
04686 0FFE                        00            .byte	0
04687                                           ! 904  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04688 0FFF                        18            .byte	$18
04689 1000                        3C            .byte	$3C
04690 1001                        7E            .byte	$7E
04691 1002                        18            .byte	$18
04692 1003                        18            .byte	$18
04693 1004                        7E            .byte	$7E
04694 1005                        3C            .byte	$3C
04695 1006                        18            .byte	$18
04696                                           ! 905  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04697 1007                        66            .byte	$66
04698 1008                        66            .byte	$66
04699 1009                        66            .byte	$66
04700 100A                        66            .byte	$66
04701 100B                        66            .byte	$66
04702 100C                        00            .byte	0
04703 100D                        66            .byte	$66
04704 100E                        00            .byte	0
04705                                           ! 906  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04706 100F                        7F            .byte	$7F
04707 1010                        DB            .byte	$DB
04708 1011                        DB            .byte	$DB
04709 1012                        7B            .byte	$7B
04710 1013                        1B            .byte	$1B
04711 1014                        1B            .byte	$1B
04712 1015                        1B            .byte	$1B
04713 1016                        00            .byte	0
04714                                           ! 907  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04715 1017                        3E            .byte	$3E
04716 1018                        63            .byte	$63
04717 1019                        38            .byte	$38
04718 101A                        6C            .byte	$6C
04719 101B                        6C            .byte	$6C
04720 101C                        38            .byte	$38
04721 101D                        CC            .byte	$CC
04722 101E                        78            .byte	$78
04723                                           ! 908  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04724 101F                        00            .byte	0
04725 1020                        00            .byte	0
04726 1021                        00            .byte	0
04727 1022                        00            .byte	0
04728 1023                        7E            .byte	$7E
04729 1024                        7E            .byte	$7E
04730 1025                        7E            .byte	$7E
04731 1026                        00            .byte	0
04732                                           ! 909  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04733 1027                        18            .byte	$18
04734 1028                        3C            .byte	$3C
04735 1029                        7E            .byte	$7E
04736 102A                        18            .byte	$18
04737 102B                        7E            .byte	$7E
04738 102C                        3C            .byte	$3C
04739 102D                        18            .byte	$18
04740 102E                        FF            .byte	$FF
04741                                           ! 910  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04742 102F                        18            .byte	$18
04743 1030                        3C            .byte	$3C
04744 1031                        7E            .byte	$7E
04745 1032                        18            .byte	$18
04746 1033                        18            .byte	$18
04747 1034                        18            .byte	$18
04748 1035                        18            .byte	$18
04749 1036                        00            .byte	0
04750                                           ! 911  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04751 1037                        18            .byte	$18
04752 1038                        18            .byte	$18
04753 1039                        18            .byte	$18
04754 103A                        18            .byte	$18
04755 103B                        7E            .byte	$7E
04756 103C                        3C            .byte	$3C
04757 103D                        18            .byte	$18
04758 103E                        00            .byte	0
04759                                           ! 912  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04760 103F                        00            .byte	0
04761 1040                        18            .byte	$18
04762 1041                        0C            .byte	$C
04763 1042                        FE            .byte	$FE
04764 1043                        0C            .byte	$C
04765 1044                        18            .byte	$18
04766 1045                        00            .byte	0
04767 1046                        00            .byte	0
04768                                           ! 913  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04769 1047                        00            .byte	0
04770 1048                        30            .byte	$30
04771 1049                        60            .byte	$60
04772 104A                        FE            .byte	$FE
04773 104B                        60            .byte	$60
04774 104C                        30            .byte	$30
04775 104D                        00            .byte	0
04776 104E                        00            .byte	0
04777                                           ! 914  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04778 104F                        00            .byte	0
04779 1050                        00            .byte	0
04780 1051                        C0            .byte	$C0
04781 1052                        C0            .byte	$C0
04782 1053                        C0            .byte	$C0
04783 1054                        FE            .byte	$FE
04784 1055                        00            .byte	0
04785 1056                        00            .byte	0
04786                                           ! 915  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04787 1057                        00            .byte	0
04788 1058                        24            .byte	$24
04789 1059                        66            .byte	$66
04790 105A                        FF            .byte	$FF
04791 105B                        66            .byte	$66
04792 105C                        24            .byte	$24
04793 105D                        00            .byte	0
04794 105E                        00            .byte	0
04795                                           ! 916  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04796 105F                        00            .byte	0
04797 1060                        18            .byte	$18
04798 1061                        3C            .byte	$3C
04799 1062                        7E            .byte	$7E
04800 1063                        FF            .byte	$FF
04801 1064                        FF            .byte	$FF
04802 1065                        00            .byte	0
04803 1066                        00            .byte	0
04804                                           ! 917  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04805 1067                        00            .byte	0
04806 1068                        FF            .byte	$FF
04807 1069                        FF            .byte	$FF
04808 106A                        7E            .byte	$7E
04809 106B                        3C            .byte	$3C
04810 106C                        18            .byte	$18
04811 106D                        00            .byte	0
04812 106E                        00            .byte	0
04813                                           ! 918  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04814 106F                        00            .byte	0
04815 1070                        00            .byte	0
04816 1071                        00            .byte	0
04817 1072                        00            .byte	0
04818 1073                        00            .byte	0
04819 1074                        00            .byte	0
04820 1075                        00            .byte	0
04821 1076                        00            .byte	0
04822                                           ! 919  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04823 1077                        30            .byte	$30
04824 1078                        78            .byte	$78
04825 1079                        78            .byte	$78
04826 107A                        30            .byte	$30
04827 107B                        30            .byte	$30
04828 107C                        00            .byte	0
04829 107D                        30            .byte	$30
04830 107E                        00            .byte	0
04831                                           ! 920  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04832 107F                        6C            .byte	$6C
04833 1080                        6C            .byte	$6C
04834 1081                        6C            .byte	$6C
04835 1082                        00            .byte	0
04836 1083                        00            .byte	0
04837 1084                        00            .byte	0
04838 1085                        00            .byte	0
04839 1086                        00            .byte	0
04840                                           ! 921  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04841 1087                        6C            .byte	$6C
04842 1088                        6C            .byte	$6C
04843 1089                        FE            .byte	$FE
04844 108A                        6C            .byte	$6C
04845 108B                        FE            .byte	$FE
04846 108C                        6C            .byte	$6C
04847 108D                        6C            .byte	$6C
04848 108E                        00            .byte	0
04849                                           ! 922  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04850 108F                        30            .byte	$30
04851 1090                        7C            .byte	$7C
04852 1091                        C0            .byte	$C0
04853 1092                        78            .byte	$78
04854 1093                        0C            .byte	$C
04855 1094                        F8            .byte	$F8
04856 1095                        30            .byte	$30
04857 1096                        00            .byte	0
04858                                           ! 923  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04859 1097                        00            .byte	0
04860 1098                        C6            .byte	$C6
04861 1099                        CC            .byte	$CC
04862 109A                        18            .byte	$18
04863 109B                        30            .byte	$30
04864 109C                        66            .byte	$66
04865 109D                        C6            .byte	$C6
04866 109E                        00            .byte	0
04867                                           ! 924  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04868 109F                        38            .byte	$38
04869 10A0                        6C            .byte	$6C
04870 10A1                        38            .byte	$38
04871 10A2                        76            .byte	$76
04872 10A3                        DC            .byte	$DC
04873 10A4                        CC            .byte	$CC
04874 10A5                        76            .byte	$76
04875 10A6                        00            .byte	0
04876                                           ! 925  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04877 10A7                        60            .byte	$60
04878 10A8                        60            .byte	$60
04879 10A9                        C0            .byte	$C0
04880 10AA                        00            .byte	0
04881 10AB                        00            .byte	0
04882 10AC                        00            .byte	0
04883 10AD                        00            .byte	0
04884 10AE                        00            .byte	0
04885                                           ! 926  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04886 10AF                        18            .byte	$18
04887 10B0                        30            .byte	$30
04888 10B1                        60            .byte	$60
04889 10B2                        60            .byte	$60
04890 10B3                        60            .byte	$60
04891 10B4                        30            .byte	$30
04892 10B5                        18            .byte	$18
04893 10B6                        00            .byte	0
04894                                           ! 927  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04895 10B7                        60            .byte	$60
04896 10B8                        30            .byte	$30
04897 10B9                        18            .byte	$18
04898 10BA                        18            .byte	$18
04899 10BB                        18            .byte	$18
04900 10BC                        30            .byte	$30
04901 10BD                        60            .byte	$60
04902 10BE                        00            .byte	0
04903                                           ! 928  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04904 10BF                        00            .byte	0
04905 10C0                        66            .byte	$66
04906 10C1                        3C            .byte	$3C
04907 10C2                        FF            .byte	$FF
04908 10C3                        3C            .byte	$3C
04909 10C4                        66            .byte	$66
04910 10C5                        00            .byte	0
04911 10C6                        00            .byte	0
04912                                           ! 929  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04913 10C7                        00            .byte	0
04914 10C8                        30            .byte	$30
04915 10C9                        30            .byte	$30
04916 10CA                        FC            .byte	$FC
04917 10CB                        30            .byte	$30
04918 10CC                        30            .byte	$30
04919 10CD                        00            .byte	0
04920 10CE                        00            .byte	0
04921                                           ! 930  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04922 10CF                        00            .byte	0
04923 10D0                        00            .byte	0
04924 10D1                        00            .byte	0
04925 10D2                        00            .byte	0
04926 10D3                        00            .byte	0
04927 10D4                        30            .byte	$30
04928 10D5                        30            .byte	$30
04929 10D6                        60            .byte	$60
04930                                           ! 931  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04931 10D7                        00            .byte	0
04932 10D8                        00            .byte	0
04933 10D9                        00            .byte	0
04934 10DA                        FC            .byte	$FC
04935 10DB                        00            .byte	0
04936 10DC                        00            .byte	0
04937 10DD                        00            .byte	0
04938 10DE                        00            .byte	0
04939                                           ! 932  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04940 10DF                        00            .byte	0
04941 10E0                        00            .byte	0
04942 10E1                        00            .byte	0
04943 10E2                        00            .byte	0
04944 10E3                        00            .byte	0
04945 10E4                        30            .byte	$30
04946 10E5                        30            .byte	$30
04947 10E6                        00            .byte	0
04948                                           ! 933  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04949 10E7                        06            .byte	6
04950 10E8                        0C            .byte	$C
04951 10E9                        18            .byte	$18
04952 10EA                        30            .byte	$30
04953 10EB                        60            .byte	$60
04954 10EC                        C0            .byte	$C0
04955 10ED                        80            .byte	$80
04956 10EE                        00            .byte	0
04957                                           ! 934  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04958 10EF                        7C            .byte	$7C
04959 10F0                        C6            .byte	$C6
04960 10F1                        CE            .byte	$CE
04961 10F2                        DE            .byte	$DE
04962 10F3                        F6            .byte	$F6
04963 10F4                        E6            .byte	$E6
04964 10F5                        7C            .byte	$7C
04965 10F6                        00            .byte	0
04966                                           ! 935  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04967 10F7                        30            .byte	$30
04968 10F8                        70            .byte	$70
04969 10F9                        30            .byte	$30
04970 10FA                        30            .byte	$30
04971 10FB                        30            .byte	$30
04972 10FC                        30            .byte	$30
04973 10FD                        FC            .byte	$FC
04974 10FE                        00            .byte	0
04975                                           ! 936  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04976 10FF                        78            .byte	$78
04977 1100                        CC            .byte	$CC
04978 1101                        0C            .byte	$C
04979 1102                        38            .byte	$38
04980 1103                        60            .byte	$60
04981 1104                        CC            .byte	$CC
04982 1105                        FC            .byte	$FC
04983 1106                        00            .byte	0
04984                                           ! 937  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04985 1107                        78            .byte	$78
04986 1108                        CC            .byte	$CC
04987 1109                        0C            .byte	$C
04988 110A                        38            .byte	$38
04989 110B                        0C            .byte	$C
04990 110C                        CC            .byte	$CC
04991 110D                        78            .byte	$78
04992 110E                        00            .byte	0
04993                                           ! 938  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04994 110F                        1C            .byte	$1C
04995 1110                        3C            .byte	$3C
04996 1111                        6C            .byte	$6C
04997 1112                        CC            .byte	$CC
04998 1113                        FE            .byte	$FE
04999 1114                        0C            .byte	$C
05000 1115                        1E            .byte	$1E
05001 1116                        00            .byte	0
05002                                           ! 939  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
05003 1117                        FC            .byte	$FC
05004 1118                        C0            .byte	$C0
05005 1119                        F8            .byte	$F8
05006 111A                        0C            .byte	$C
05007 111B                        0C            .byte	$C
05008 111C                        CC            .byte	$CC
05009 111D                        78            .byte	$78
05010 111E                        00            .byte	0
05011                                           ! 940  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
05012 111F                        38            .byte	$38
05013 1120                        60            .byte	$60
05014 1121                        C0            .byte	$C0
05015 1122                        F8            .byte	$F8
05016 1123                        CC            .byte	$CC
05017 1124                        CC            .byte	$CC
05018 1125                        78            .byte	$78
05019 1126                        00            .byte	0
05020                                           ! 941  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x3
05021 1127                        FC            .byte	$FC
05022 1128                        CC            .byte	$CC
05023 1129                        0C            .byte	$C
05024 112A                        18            .byte	$18
05025 112B                        30            .byte	$30
05026                                           ! 941 0, 0x30, 0x00,
05027 112C                        30            .byte	$30
05028 112D                        30            .byte	$30
05029 112E                        00            .byte	0
05030                                           ! 942  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05031 112F                        78            .byte	$78
05032 1130                        CC            .byte	$CC
05033 1131                        CC            .byte	$CC
05034 1132                        78            .byte	$78
05035 1133                        CC            .byte	$CC
05036 1134                        CC            .byte	$CC
05037 1135                        78            .byte	$78
05038 1136                        00            .byte	0
05039                                           ! 943  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
05040 1137                        78            .byte	$78
05041 1138                        CC            .byte	$CC
05042 1139                        CC            .byte	$CC
05043 113A                        7C            .byte	$7C
05044 113B                        0C            .byte	$C
05045 113C                        18            .byte	$18
05046 113D                        70            .byte	$70
05047 113E                        00            .byte	0
05048                                           ! 944  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
05049 113F                        00            .byte	0
05050 1140                        30            .byte	$30
05051 1141                        30            .byte	$30
05052 1142                        00            .byte	0
05053 1143                        00            .byte	0
05054 1144                        30            .byte	$30
05055 1145                        30            .byte	$30
05056 1146                        00            .byte	0
05057                                           ! 945  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05058 1147                        00            .byte	0
05059 1148                        30            .byte	$30
05060 1149                        30            .byte	$30
05061 114A                        00            .byte	0
05062 114B                        00            .byte	0
05063 114C                        30            .byte	$30
05064 114D                        30            .byte	$30
05065 114E                        60            .byte	$60
05066                                           ! 946  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05067 114F                        18            .byte	$18
05068 1150                        30            .byte	$30
05069 1151                        60            .byte	$60
05070 1152                        C0            .byte	$C0
05071 1153                        60            .byte	$60
05072 1154                        30            .byte	$30
05073 1155                        18            .byte	$18
05074 1156                        00            .byte	0
05075                                           ! 947  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05076 1157                        00            .byte	0
05077 1158                        00            .byte	0
05078 1159                        FC            .byte	$FC
05079 115A                        00            .byte	0
05080 115B                        00            .byte	0
05081 115C                        FC            .byte	$FC
05082 115D                        00            .byte	0
05083 115E                        00            .byte	0
05084                                           ! 948  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05085 115F                        60            .byte	$60
05086 1160                        30            .byte	$30
05087 1161                        18            .byte	$18
05088 1162                        0C            .byte	$C
05089 1163                        18            .byte	$18
05090 1164                        30            .byte	$30
05091 1165                        60            .byte	$60
05092 1166                        00            .byte	0
05093                                           ! 949  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05094 1167                        78            .byte	$78
05095 1168                        CC            .byte	$CC
05096 1169                        0C            .byte	$C
05097 116A                        18            .byte	$18
05098 116B                        30            .byte	$30
05099 116C                        00            .byte	0
05100 116D                        30            .byte	$30
05101 116E                        00            .byte	0
05102                                           ! 950  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05103 116F                        7C            .byte	$7C
05104 1170                        C6            .byte	$C6
05105 1171                        DE            .byte	$DE
05106 1172                        DE            .byte	$DE
05107 1173                        DE            .byte	$DE
05108 1174                        C0            .byte	$C0
05109 1175                        78            .byte	$78
05110 1176                        00            .byte	0
05111                                           ! 951  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05112 1177                        30            .byte	$30
05113 1178                        78            .byte	$78
05114 1179                        CC            .byte	$CC
05115 117A                        CC            .byte	$CC
05116 117B                        FC            .byte	$FC
05117 117C                        CC            .byte	$CC
05118 117D                        CC            .byte	$CC
05119 117E                        00            .byte	0
05120                                           ! 952  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05121 117F                        FC            .byte	$FC
05122 1180                        66            .byte	$66
05123 1181                        66            .byte	$66
05124 1182                        7C            .byte	$7C
05125 1183                        66            .byte	$66
05126 1184                        66            .byte	$66
05127 1185                        FC            .byte	$FC
05128 1186                        00            .byte	0
05129                                           ! 953  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05130 1187                        3C            .byte	$3C
05131 1188                        66            .byte	$66
05132 1189                        C0            .byte	$C0
05133 118A                        C0            .byte	$C0
05134 118B                        C0            .byte	$C0
05135 118C                        66            .byte	$66
05136 118D                        3C            .byte	$3C
05137 118E                        00            .byte	0
05138                                           ! 954  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05139 118F                        F8            .byte	$F8
05140 1190                        6C            .byte	$6C
05141 1191                        66            .byte	$66
05142 1192                        66            .byte	$66
05143 1193                        66            .byte	$66
05144 1194                        6C            .byte	$6C
05145 1195                        F8            .byte	$F8
05146 1196                        00            .byte	0
05147                                           ! 955  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05148 1197                        FE            .byte	$FE
05149 1198                        62            .byte	$62
05150 1199                        68            .byte	$68
05151 119A                        78            .byte	$78
05152 119B                        68            .byte	$68
05153 119C                        62            .byte	$62
05154 119D                        FE            .byte	$FE
05155 119E                        00            .byte	0
05156                                           ! 956  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05157 119F                        FE            .byte	$FE
05158 11A0                        62            .byte	$62
05159 11A1                        68            .byte	$68
05160 11A2                        78            .byte	$78
05161 11A3                        68            .byte	$68
05162 11A4                        60            .byte	$60
05163 11A5                        F0            .byte	$F0
05164 11A6                        00            .byte	0
05165                                           ! 957  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05166 11A7                        3C            .byte	$3C
05167 11A8                        66            .byte	$66
05168 11A9                        C0            .byte	$C0
05169 11AA                        C0            .byte	$C0
05170 11AB                        CE            .byte	$CE
05171 11AC                        66            .byte	$66
05172 11AD                        3E            .byte	$3E
05173 11AE                        00            .byte	0
05174                                           ! 958  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05175 11AF                        CC            .byte	$CC
05176 11B0                        CC            .byte	$CC
05177 11B1                        CC            .byte	$CC
05178 11B2                        FC            .byte	$FC
05179 11B3                        CC            .byte	$CC
05180 11B4                        CC            .byte	$CC
05181 11B5                        CC            .byte	$CC
05182 11B6                        00            .byte	0
05183                                           ! 959  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05184 11B7                        78            .byte	$78
05185 11B8                        30            .byte	$30
05186 11B9                        30            .byte	$30
05187 11BA                        30            .byte	$30
05188 11BB                        30            .byte	$30
05189 11BC                        30            .byte	$30
05190 11BD                        78            .byte	$78
05191 11BE                        00            .byte	0
05192                                           ! 960  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05193 11BF                        1E            .byte	$1E
05194 11C0                        0C            .byte	$C
05195 11C1                        0C            .byte	$C
05196 11C2                        0C            .byte	$C
05197 11C3                        CC            .byte	$CC
05198 11C4                        CC            .byte	$CC
05199 11C5                        78            .byte	$78
05200 11C6                        00            .byte	0
05201                                           ! 961  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05202 11C7                        E6            .byte	$E6
05203 11C8                        66            .byte	$66
05204 11C9                        6C            .byte	$6C
05205 11CA                        78            .byte	$78
05206 11CB                        6C            .byte	$6C
05207 11CC                        66            .byte	$66
05208 11CD                        E6            .byte	$E6
05209 11CE                        00            .byte	0
05210                                           ! 962  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05211 11CF                        F0            .byte	$F0
05212 11D0                        60            .byte	$60
05213 11D1                        60            .byte	$60
05214 11D2                        60            .byte	$60
05215 11D3                        62            .byte	$62
05216 11D4                        66            .byte	$66
05217 11D5                        FE            .byte	$FE
05218 11D6                        00            .byte	0
05219                                           ! 963  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05220 11D7                        C6            .byte	$C6
05221 11D8                        EE            .byte	$EE
05222 11D9                        FE            .byte	$FE
05223 11DA                        FE            .byte	$FE
05224 11DB                        D6            .byte	$D6
05225 11DC                        C6            .byte	$C6
05226 11DD                        C6            .byte	$C6
05227 11DE                        00            .byte	0
05228                                           ! 964  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05229 11DF                        C6            .byte	$C6
05230 11E0                        E6            .byte	$E6
05231 11E1                        F6            .byte	$F6
05232 11E2                        DE            .byte	$DE
05233 11E3                        CE            .byte	$CE
05234 11E4                        C6            .byte	$C6
05235 11E5                        C6            .byte	$C6
05236 11E6                        00            .byte	0
05237                                           ! 965  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05238 11E7                        38            .byte	$38
05239 11E8                        6C            .byte	$6C
05240 11E9                        C6            .byte	$C6
05241 11EA                        C6            .byte	$C6
05242 11EB                        C6            .byte	$C6
05243 11EC                        6C            .byte	$6C
05244 11ED                        38            .byte	$38
05245 11EE                        00            .byte	0
05246                                           ! 966  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05247 11EF                        FC            .byte	$FC
05248 11F0                        66            .byte	$66
05249 11F1                        66            .byte	$66
05250 11F2                        7C            .byte	$7C
05251 11F3                        60            .byte	$60
05252 11F4                        60            .byte	$60
05253 11F5                        F0            .byte	$F0
05254 11F6                        00            .byte	0
05255                                           ! 967  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05256 11F7                        78            .byte	$78
05257 11F8                        CC            .byte	$CC
05258 11F9                        CC            .byte	$CC
05259 11FA                        CC            .byte	$CC
05260 11FB                        DC            .byte	$DC
05261 11FC                        78            .byte	$78
05262 11FD                        1C            .byte	$1C
05263 11FE                        00            .byte	0
05264                                           ! 968  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05265 11FF                        FC            .byte	$FC
05266 1200                        66            .byte	$66
05267 1201                        66            .byte	$66
05268 1202                        7C            .byte	$7C
05269 1203                        6C            .byte	$6C
05270 1204                        66            .byte	$66
05271 1205                        E6            .byte	$E6
05272 1206                        00            .byte	0
05273                                           ! 969  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05274 1207                        78            .byte	$78
05275 1208                        CC            .byte	$CC
05276 1209                        E0            .byte	$E0
05277 120A                        70            .byte	$70
05278 120B                        1C            .byte	$1C
05279 120C                        CC            .byte	$CC
05280 120D                        78            .byte	$78
05281 120E                        00            .byte	0
05282                                           ! 970  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05283 120F                        FC            .byte	$FC
05284 1210                        B4            .byte	$B4
05285 1211                        30            .byte	$30
05286 1212                        30            .byte	$30
05287 1213                        30            .byte	$30
05288 1214                        30            .byte	$30
05289 1215                        78            .byte	$78
05290 1216                        00            .byte	0
05291                                           ! 971  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05292 1217                        CC            .byte	$CC
05293 1218                        CC            .byte	$CC
05294 1219                        CC            .byte	$CC
05295 121A                        CC            .byte	$CC
05296 121B                        CC            .byte	$CC
05297 121C                        CC            .byte	$CC
05298 121D                        FC            .byte	$FC
05299 121E                        00            .byte	0
05300                                           ! 972  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05301 121F                        CC            .byte	$CC
05302 1220                        CC            .byte	$CC
05303 1221                        CC            .byte	$CC
05304 1222                        CC            .byte	$CC
05305 1223                        CC            .byte	$CC
05306 1224                        78            .byte	$78
05307 1225                        30            .byte	$30
05308 1226                        00            .byte	0
05309                                           ! 973  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05310 1227                        C6            .byte	$C6
05311 1228                        C6            .byte	$C6
05312 1229                        C6            .byte	$C6
05313 122A                        D6            .byte	$D6
05314 122B                        FE            .byte	$FE
05315 122C                        EE            .byte	$EE
05316 122D                        C6            .byte	$C6
05317 122E                        00            .byte	0
05318                                           ! 974  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05319 122F                        C6            .byte	$C6
05320 1230                        C6            .byte	$C6
05321 1231                        6C            .byte	$6C
05322 1232                        38            .byte	$38
05323 1233                        38            .byte	$38
05324 1234                        6C            .byte	$6C
05325 1235                        C6            .byte	$C6
05326 1236                        00            .byte	0
05327                                           ! 975  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05328 1237                        CC            .byte	$CC
05329 1238                        CC            .byte	$CC
05330 1239                        CC            .byte	$CC
05331 123A                        78            .byte	$78
05332 123B                        30            .byte	$30
05333 123C                        30            .byte	$30
05334 123D                        78            .byte	$78
05335 123E                        00            .byte	0
05336                                           ! 976  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05337 123F                        FE            .byte	$FE
05338 1240                        C6            .byte	$C6
05339 1241                        8C            .byte	$8C
05340 1242                        18            .byte	$18
05341 1243                        32            .byte	$32
05342 1244                        66            .byte	$66
05343 1245                        FE            .byte	$FE
05344 1246                        00            .byte	0
05345                                           ! 977  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05346 1247                        78            .byte	$78
05347 1248                        60            .byte	$60
05348 1249                        60            .byte	$60
05349 124A                        60            .byte	$60
05350 124B                        60            .byte	$60
05351 124C                        60            .byte	$60
05352 124D                        78            .byte	$78
05353 124E                        00            .byte	0
05354                                           ! 978  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05355 124F                        C0            .byte	$C0
05356 1250                        60            .byte	$60
05357 1251                        30            .byte	$30
05358 1252                        18            .byte	$18
05359 1253                        0C            .byte	$C
05360 1254                        06            .byte	6
05361 1255                        02            .byte	2
05362 1256                        00            .byte	0
05363                                           ! 979  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05364 1257                        78            .byte	$78
05365 1258                        18            .byte	$18
05366 1259                        18            .byte	$18
05367 125A                        18            .byte	$18
05368 125B                        18            .byte	$18
05369 125C                        18            .byte	$18
05370 125D                        78            .byte	$78
05371 125E                        00            .byte	0
05372                                           ! 980  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05373 125F                        10            .byte	$10
05374 1260                        38            .byte	$38
05375 1261                        6C            .byte	$6C
05376 1262                        C6            .byte	$C6
05377 1263                        00            .byte	0
05378 1264                        00            .byte	0
05379 1265                        00            .byte	0
05380 1266                        00            .byte	0
05381                                           ! 981  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05382 1267                        00            .byte	0
05383 1268                        00            .byte	0
05384 1269                        00            .byte	0
05385 126A                        00            .byte	0
05386 126B                        00            .byte	0
05387 126C                        00            .byte	0
05388 126D                        00            .byte	0
05389 126E                        FF            .byte	$FF
05390                                           ! 982  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05391 126F                        30            .byte	$30
05392 1270                        30            .byte	$30
05393 1271                        18            .byte	$18
05394 1272                        00            .byte	0
05395 1273                        00            .byte	0
05396 1274                        00            .byte	0
05397 1275                        00            .byte	0
05398 1276                        00            .byte	0
05399                                           ! 983  0x00, 0x00, 0x78, 0x0c,
05400 1277                        00            .byte	0
05401 1278                        00            .byte	0
05402 1279                        78            .byte	$78
05403                                           ! 983  0x7c, 0xcc, 0x76, 0x00,
05404 127A                        0C            .byte	$C
05405 127B                        7C            .byte	$7C
05406 127C                        CC            .byte	$CC
05407 127D                        76            .byte	$76
05408 127E                        00            .byte	0
05409                                           ! 984  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05410 127F                        E0            .byte	$E0
05411 1280                        60            .byte	$60
05412 1281                        60            .byte	$60
05413 1282                        7C            .byte	$7C
05414 1283                        66            .byte	$66
05415 1284                        66            .byte	$66
05416 1285                        DC            .byte	$DC
05417 1286                        00            .byte	0
05418                                           ! 985  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05419 1287                        00            .byte	0
05420 1288                        00            .byte	0
05421 1289                        78            .byte	$78
05422 128A                        CC            .byte	$CC
05423 128B                        C0            .byte	$C0
05424 128C                        CC            .byte	$CC
05425 128D                        78            .byte	$78
05426 128E                        00            .byte	0
05427                                           ! 986  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05428 128F                        1C            .byte	$1C
05429 1290                        0C            .byte	$C
05430 1291                        0C            .byte	$C
05431 1292                        7C            .byte	$7C
05432 1293                        CC            .byte	$CC
05433 1294                        CC            .byte	$CC
05434 1295                        76            .byte	$76
05435 1296                        00            .byte	0
05436                                           ! 987  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05437 1297                        00            .byte	0
05438 1298                        00            .byte	0
05439 1299                        78            .byte	$78
05440 129A                        CC            .byte	$CC
05441 129B                        FC            .byte	$FC
05442 129C                        C0            .byte	$C0
05443 129D                        78            .byte	$78
05444 129E                        00            .byte	0
05445                                           ! 988  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05446 129F                        38            .byte	$38
05447 12A0                        6C            .byte	$6C
05448 12A1                        60            .byte	$60
05449 12A2                        F0            .byte	$F0
05450 12A3                        60            .byte	$60
05451 12A4                        60            .byte	$60
05452 12A5                        F0            .byte	$F0
05453 12A6                        00            .byte	0
05454                                           ! 989  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05455 12A7                        00            .byte	0
05456 12A8                        00            .byte	0
05457 12A9                        76            .byte	$76
05458 12AA                        CC            .byte	$CC
05459 12AB                        CC            .byte	$CC
05460 12AC                        7C            .byte	$7C
05461 12AD                        0C            .byte	$C
05462 12AE                        F8            .byte	$F8
05463                                           ! 990  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05464 12AF                        E0            .byte	$E0
05465 12B0                        60            .byte	$60
05466 12B1                        6C            .byte	$6C
05467 12B2                        76            .byte	$76
05468 12B3                        66            .byte	$66
05469 12B4                        66            .byte	$66
05470 12B5                        E6            .byte	$E6
05471 12B6                        00            .byte	0
05472                                           ! 991  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05473 12B7                        30            .byte	$30
05474 12B8                        00            .byte	0
05475 12B9                        70            .byte	$70
05476 12BA                        30            .byte	$30
05477 12BB                        30            .byte	$30
05478 12BC                        30            .byte	$30
05479 12BD                        78            .byte	$78
05480 12BE                        00            .byte	0
05481                                           ! 992  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05482 12BF                        0C            .byte	$C
05483 12C0                        00            .byte	0
05484 12C1                        0C            .byte	$C
05485 12C2                        0C            .byte	$C
05486 12C3                        0C            .byte	$C
05487 12C4                        CC            .byte	$CC
05488 12C5                        CC            .byte	$CC
05489 12C6                        78            .byte	$78
05490                                           ! 993  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05491 12C7                        E0            .byte	$E0
05492 12C8                        60            .byte	$60
05493 12C9                        66            .byte	$66
05494 12CA                        6C            .byte	$6C
05495 12CB                        78            .byte	$78
05496 12CC                        6C            .byte	$6C
05497 12CD                        E6            .byte	$E6
05498 12CE                        00            .byte	0
05499                                           ! 994  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05500 12CF                        70            .byte	$70
05501 12D0                        30            .byte	$30
05502 12D1                        30            .byte	$30
05503 12D2                        30            .byte	$30
05504 12D3                        30            .byte	$30
05505 12D4                        30            .byte	$30
05506 12D5                        78            .byte	$78
05507 12D6                        00            .byte	0
05508                                           ! 995  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05509 12D7                        00            .byte	0
05510 12D8                        00            .byte	0
05511 12D9                        CC            .byte	$CC
05512 12DA                        FE            .byte	$FE
05513 12DB                        FE            .byte	$FE
05514 12DC                        D6            .byte	$D6
05515 12DD                        C6            .byte	$C6
05516 12DE                        00            .byte	0
05517                                           ! 996  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05518 12DF                        00            .byte	0
05519 12E0                        00            .byte	0
05520 12E1                        F8            .byte	$F8
05521 12E2                        CC            .byte	$CC
05522 12E3                        CC            .byte	$CC
05523 12E4                        CC            .byte	$CC
05524 12E5                        CC            .byte	$CC
05525 12E6                        00            .byte	0
05526                                           ! 997  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05527 12E7                        00            .byte	0
05528 12E8                        00            .byte	0
05529 12E9                        78            .byte	$78
05530 12EA                        CC            .byte	$CC
05531 12EB                        CC            .byte	$CC
05532 12EC                        CC            .byte	$CC
05533 12ED                        78            .byte	$78
05534 12EE                        00            .byte	0
05535                                           ! 998  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05536 12EF                        00            .byte	0
05537 12F0                        00            .byte	0
05538 12F1                        DC            .byte	$DC
05539 12F2                        66            .byte	$66
05540 12F3                        66            .byte	$66
05541 12F4                        7C            .byte	$7C
05542 12F5                        60            .byte	$60
05543 12F6                        F0            .byte	$F0
05544                                           ! 999  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05545 12F7                        00            .byte	0
05546 12F8                        00            .byte	0
05547 12F9                        76            .byte	$76
05548 12FA                        CC            .byte	$CC
05549 12FB                        CC            .byte	$CC
05550 12FC                        7C            .byte	$7C
05551 12FD                        0C            .byte	$C
05552 12FE                        1E            .byte	$1E
05553                                           ! 1000  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05554 12FF                        00            .byte	0
05555 1300                        00            .byte	0
05556 1301                        DC            .byte	$DC
05557 1302                        76            .byte	$76
05558 1303                        66            .byte	$66
05559 1304                        60            .byte	$60
05560 1305                        F0            .byte	$F0
05561 1306                        00            .byte	0
05562                                           ! 1001  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05563 1307                        00            .byte	0
05564 1308                        00            .byte	0
05565 1309                        7C            .byte	$7C
05566 130A                        C0            .byte	$C0
05567 130B                        78            .byte	$78
05568 130C                        0C            .byte	$C
05569 130D                        F8            .byte	$F8
05570 130E                        00            .byte	0
05571                                           ! 1002  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05572 130F                        10            .byte	$10
05573 1310                        30            .byte	$30
05574 1311                        7C            .byte	$7C
05575 1312                        30            .byte	$30
05576 1313                        30            .byte	$30
05577 1314                        34            .byte	$34
05578 1315                        18            .byte	$18
05579 1316                        00            .byte	0
05580                                           ! 1003  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05581 1317                        00            .byte	0
05582 1318                        00            .byte	0
05583 1319                        CC            .byte	$CC
05584 131A                        CC            .byte	$CC
05585 131B                        CC            .byte	$CC
05586 131C                        CC            .byte	$CC
05587 131D                        76            .byte	$76
05588 131E                        00            .byte	0
05589                                           ! 1004  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05590 131F                        00            .byte	0
05591 1320                        00            .byte	0
05592 1321                        CC            .byte	$CC
05593 1322                        CC            .byte	$CC
05594 1323                        CC            .byte	$CC
05595 1324                        78            .byte	$78
05596 1325                        30            .byte	$30
05597 1326                        00            .byte	0
05598                                           ! 1005  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05599 1327                        00            .byte	0
05600 1328                        00            .byte	0
05601 1329                        C6            .byte	$C6
05602 132A                        D6            .byte	$D6
05603 132B                        FE            .byte	$FE
05604 132C                        FE            .byte	$FE
05605 132D                        6C            .byte	$6C
05606 132E                        00            .byte	0
05607                                           ! 1006  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05608 132F                        00            .byte	0
05609 1330                        00            .byte	0
05610 1331                        C6            .byte	$C6
05611 1332                        6C            .byte	$6C
05612 1333                        38            .byte	$38
05613 1334                        6C            .byte	$6C
05614 1335                        C6            .byte	$C6
05615 1336                        00            .byte	0
05616                                           ! 1007  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05617 1337                        00            .byte	0
05618 1338                        00            .byte	0
05619 1339                        CC            .byte	$CC
05620 133A                        CC            .byte	$CC
05621 133B                        CC            .byte	$CC
05622 133C                        7C            .byte	$7C
05623 133D                        0C            .byte	$C
05624 133E                        F8            .byte	$F8
05625                                           ! 1008  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05626 133F                        00            .byte	0
05627 1340                        00            .byte	0
05628 1341                        FC            .byte	$FC
05629 1342                        98            .byte	$98
05630 1343                        30            .byte	$30
05631 1344                        64            .byte	$64
05632 1345                        FC            .byte	$FC
05633 1346                        00            .byte	0
05634                                           ! 1009  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05635 1347                        1C            .byte	$1C
05636 1348                        30            .byte	$30
05637 1349                        30            .byte	$30
05638 134A                        E0            .byte	$E0
05639 134B                        30            .byte	$30
05640 134C                        30            .byte	$30
05641 134D                        1C            .byte	$1C
05642 134E                        00            .byte	0
05643                                           ! 1010  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05644 134F                        18            .byte	$18
05645 1350                        18            .byte	$18
05646 1351                        18            .byte	$18
05647 1352                        00            .byte	0
05648 1353                        18            .byte	$18
05649 1354                        18            .byte	$18
05650 1355                        18            .byte	$18
05651 1356                        00            .byte	0
05652                                           ! 1011  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05653 1357                        E0            .byte	$E0
05654 1358                        30            .byte	$30
05655 1359                        30            .byte	$30
05656 135A                        1C            .byte	$1C
05657 135B                        30            .byte	$30
05658 135C                        30            .byte	$30
05659 135D                        E0            .byte	$E0
05660 135E                        00            .byte	0
05661                                           ! 1012  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05662 135F                        76            .byte	$76
05663 1360                        DC            .byte	$DC
05664 1361                        00            .byte	0
05665 1362                        00            .byte	0
05666 1363                        00            .byte	0
05667 1364                        00            .byte	0
05668 1365                        00            .byte	0
05669 1366                        00            .byte	0
05670                                           ! 1013  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05671 1367                        00            .byte	0
05672 1368                        10            .byte	$10
05673 1369                        38            .byte	$38
05674 136A                        6C            .byte	$6C
05675 136B                        C6            .byte	$C6
05676 136C                        C6            .byte	$C6
05677 136D                        FE            .byte	$FE
05678 136E                        00            .byte	0
05679                                           ! 1014  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05680 136F                        78            .byte	$78
05681 1370                        CC            .byte	$CC
05682 1371                        C0            .byte	$C0
05683 1372                        CC            .byte	$CC
05684 1373                        78            .byte	$78
05685 1374                        18            .byte	$18
05686 1375                        0C            .byte	$C
05687 1376                        78            .byte	$78
05688                                           ! 1015  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05689 1377                        00            .byte	0
05690 1378                        CC            .byte	$CC
05691 1379                        00            .byte	0
05692 137A                        CC            .byte	$CC
05693 137B                        CC            .byte	$CC
05694 137C                        CC            .byte	$CC
05695 137D                        7E            .byte	$7E
05696 137E                        00            .byte	0
05697                                           ! 1016  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05698 137F                        1C            .byte	$1C
05699 1380                        00            .byte	0
05700 1381                        78            .byte	$78
05701 1382                        CC            .byte	$CC
05702 1383                        FC            .byte	$FC
05703 1384                        C0            .byte	$C0
05704 1385                        78            .byte	$78
05705 1386                        00            .byte	0
05706                                           ! 1017  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05707 1387                        7E            .byte	$7E
05708 1388                        C3            .byte	$C3
05709 1389                        3C            .byte	$3C
05710 138A                        06            .byte	6
05711 138B                        3E            .byte	$3E
05712 138C                        66            .byte	$66
05713 138D                        3F            .byte	$3F
05714 138E                        00            .byte	0
05715                                           ! 1018  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05716 138F                        CC            .byte	$CC
05717 1390                        00            .byte	0
05718 1391                        78            .byte	$78
05719 1392                        0C            .byte	$C
05720 1393                        7C            .byte	$7C
05721 1394                        CC            .byte	$CC
05722 1395                        7E            .byte	$7E
05723 1396                        00            .byte	0
05724                                           ! 1019  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05725 1397                        E0            .byte	$E0
05726 1398                        00            .byte	0
05727 1399                        78            .byte	$78
05728 139A                        0C            .byte	$C
05729 139B                        7C            .byte	$7C
05730 139C                        CC            .byte	$CC
05731 139D                        7E            .byte	$7E
05732 139E                        00            .byte	0
05733                                           ! 1020  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05734 139F                        30            .byte	$30
05735 13A0                        30            .byte	$30
05736 13A1                        78            .byte	$78
05737 13A2                        0C            .byte	$C
05738 13A3                        7C            .byte	$7C
05739 13A4                        CC            .byte	$CC
05740 13A5                        7E            .byte	$7E
05741 13A6                        00            .byte	0
05742                                           ! 1021  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05743 13A7                        00            .byte	0
05744 13A8                        00            .byte	0
05745 13A9                        78            .byte	$78
05746 13AA                        C0            .byte	$C0
05747 13AB                        C0            .byte	$C0
05748 13AC                        78            .byte	$78
05749 13AD                        0C            .byte	$C
05750 13AE                        38            .byte	$38
05751                                           ! 1022  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05752 13AF                        7E            .byte	$7E
05753 13B0                        C3            .byte	$C3
05754 13B1                        3C            .byte	$3C
05755 13B2                        66            .byte	$66
05756 13B3                        7E            .byte	$7E
05757 13B4                        60            .byte	$60
05758 13B5                        3C            .byte	$3C
05759 13B6                        00            .byte	0
05760                                           ! 1023  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05761 13B7                        CC            .byte	$CC
05762 13B8                        00            .byte	0
05763 13B9                        78            .byte	$78
05764 13BA                        CC            .byte	$CC
05765 13BB                        FC            .byte	$FC
05766 13BC                        C0            .byte	$C0
05767 13BD                        78            .byte	$78
05768 13BE                        00            .byte	0
05769                                           ! 1024  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05770 13BF                        E0            .byte	$E0
05771 13C0                        00            .byte	0
05772 13C1                        78            .byte	$78
05773 13C2                        CC            .byte	$CC
05774 13C3                        FC            .byte	$FC
05775 13C4                        C0            .byte	$C0
05776 13C5                        78            .byte	$78
05777 13C6                        00            .byte	0
05778                                           ! 1025  0xcc, 0x00, 0
05779 13C7                        CC            .byte	$CC
05780 13C8                        00            .byte	0
05781                                           ! 1025 x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05782 13C9                        70            .byte	$70
05783 13CA                        30            .byte	$30
05784 13CB                        30            .byte	$30
05785 13CC                        30            .byte	$30
05786 13CD                        78            .byte	$78
05787 13CE                        00            .byte	0
05788                                           ! 1026  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05789 13CF                        7C            .byte	$7C
05790 13D0                        C6            .byte	$C6
05791 13D1                        38            .byte	$38
05792 13D2                        18            .byte	$18
05793 13D3                        18            .byte	$18
05794 13D4                        18            .byte	$18
05795 13D5                        3C            .byte	$3C
05796 13D6                        00            .byte	0
05797                                           ! 1027  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05798 13D7                        E0            .byte	$E0
05799 13D8                        00            .byte	0
05800 13D9                        70            .byte	$70
05801 13DA                        30            .byte	$30
05802 13DB                        30            .byte	$30
05803 13DC                        30            .byte	$30
05804 13DD                        78            .byte	$78
05805 13DE                        00            .byte	0
05806                                           ! 1028  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05807 13DF                        C6            .byte	$C6
05808 13E0                        38            .byte	$38
05809 13E1                        6C            .byte	$6C
05810 13E2                        C6            .byte	$C6
05811 13E3                        FE            .byte	$FE
05812 13E4                        C6            .byte	$C6
05813 13E5                        C6            .byte	$C6
05814 13E6                        00            .byte	0
05815                                           ! 1029  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05816 13E7                        30            .byte	$30
05817 13E8                        30            .byte	$30
05818 13E9                        00            .byte	0
05819 13EA                        78            .byte	$78
05820 13EB                        CC            .byte	$CC
05821 13EC                        FC            .byte	$FC
05822 13ED                        CC            .byte	$CC
05823 13EE                        00            .byte	0
05824                                           ! 1030  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05825 13EF                        1C            .byte	$1C
05826 13F0                        00            .byte	0
05827 13F1                        FC            .byte	$FC
05828 13F2                        60            .byte	$60
05829 13F3                        78            .byte	$78
05830 13F4                        60            .byte	$60
05831 13F5                        FC            .byte	$FC
05832 13F6                        00            .byte	0
05833                                           ! 1031  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05834 13F7                        00            .byte	0
05835 13F8                        00            .byte	0
05836 13F9                        7F            .byte	$7F
05837 13FA                        0C            .byte	$C
05838 13FB                        7F            .byte	$7F
05839 13FC                        CC            .byte	$CC
05840 13FD                        7F            .byte	$7F
05841 13FE                        00            .byte	0
05842                                           ! 1032  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05843 13FF                        3E            .byte	$3E
05844 1400                        6C            .byte	$6C
05845 1401                        CC            .byte	$CC
05846 1402                        FE            .byte	$FE
05847 1403                        CC            .byte	$CC
05848 1404                        CC            .byte	$CC
05849 1405                        CE            .byte	$CE
05850 1406                        00            .byte	0
05851                                           ! 1033  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05852 1407                        78            .byte	$78
05853 1408                        CC            .byte	$CC
05854 1409                        00            .byte	0
05855 140A                        78            .byte	$78
05856 140B                        CC            .byte	$CC
05857 140C                        CC            .byte	$CC
05858 140D                        78            .byte	$78
05859 140E                        00            .byte	0
05860                                           ! 1034  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05861 140F                        00            .byte	0
05862 1410                        CC            .byte	$CC
05863 1411                        00            .byte	0
05864 1412                        78            .byte	$78
05865 1413                        CC            .byte	$CC
05866 1414                        CC            .byte	$CC
05867 1415                        78            .byte	$78
05868 1416                        00            .byte	0
05869                                           ! 1035  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05870 1417                        00            .byte	0
05871 1418                        E0            .byte	$E0
05872 1419                        00            .byte	0
05873 141A                        78            .byte	$78
05874 141B                        CC            .byte	$CC
05875 141C                        CC            .byte	$CC
05876 141D                        78            .byte	$78
05877 141E                        00            .byte	0
05878                                           ! 1036  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05879 141F                        78            .byte	$78
05880 1420                        CC            .byte	$CC
05881 1421                        00            .byte	0
05882 1422                        CC            .byte	$CC
05883 1423                        CC            .byte	$CC
05884 1424                        CC            .byte	$CC
05885 1425                        7E            .byte	$7E
05886 1426                        00            .byte	0
05887                                           ! 1037  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05888 1427                        00            .byte	0
05889 1428                        E0            .byte	$E0
05890 1429                        00            .byte	0
05891 142A                        CC            .byte	$CC
05892 142B                        CC            .byte	$CC
05893 142C                        CC            .byte	$CC
05894 142D                        7E            .byte	$7E
05895 142E                        00            .byte	0
05896                                           ! 1038  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05897 142F                        00            .byte	0
05898 1430                        CC            .byte	$CC
05899 1431                        00            .byte	0
05900 1432                        CC            .byte	$CC
05901 1433                        CC            .byte	$CC
05902 1434                        7C            .byte	$7C
05903 1435                        0C            .byte	$C
05904 1436                        F8            .byte	$F8
05905                                           ! 1039  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05906 1437                        C3            .byte	$C3
05907 1438                        18            .byte	$18
05908 1439                        3C            .byte	$3C
05909 143A                        66            .byte	$66
05910 143B                        66            .byte	$66
05911 143C                        3C            .byte	$3C
05912 143D                        18            .byte	$18
05913 143E                        00            .byte	0
05914                                           ! 1040  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05915 143F                        CC            .byte	$CC
05916 1440                        00            .byte	0
05917 1441                        CC            .byte	$CC
05918 1442                        CC            .byte	$CC
05919 1443                        CC            .byte	$CC
05920 1444                        CC            .byte	$CC
05921 1445                        78            .byte	$78
05922 1446                        00            .byte	0
05923                                           ! 1041  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05924 1447                        18            .byte	$18
05925 1448                        18            .byte	$18
05926 1449                        7E            .byte	$7E
05927 144A                        C0            .byte	$C0
05928 144B                        C0            .byte	$C0
05929 144C                        7E            .byte	$7E
05930 144D                        18            .byte	$18
05931 144E                        18            .byte	$18
05932                                           ! 1042  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05933 144F                        38            .byte	$38
05934 1450                        6C            .byte	$6C
05935 1451                        64            .byte	$64
05936 1452                        F0            .byte	$F0
05937 1453                        60            .byte	$60
05938 1454                        E6            .byte	$E6
05939 1455                        FC            .byte	$FC
05940 1456                        00            .byte	0
05941                                           ! 1043  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05942 1457                        CC            .byte	$CC
05943 1458                        CC            .byte	$CC
05944 1459                        78            .byte	$78
05945 145A                        FC            .byte	$FC
05946 145B                        30            .byte	$30
05947 145C                        FC            .byte	$FC
05948 145D                        30            .byte	$30
05949 145E                        30            .byte	$30
05950                                           ! 1044  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05951 145F                        F8            .byte	$F8
05952 1460                        CC            .byte	$CC
05953 1461                        CC            .byte	$CC
05954 1462                        FA            .byte	$FA
05955 1463                        C6            .byte	$C6
05956 1464                        CF            .byte	$CF
05957 1465                        C6            .byte	$C6
05958 1466                        C7            .byte	$C7
05959                                           ! 1045  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05960 1467                        0E            .byte	$E
05961 1468                        1B            .byte	$1B
05962 1469                        18            .byte	$18
05963 146A                        3C            .byte	$3C
05964 146B                        18            .byte	$18
05965 146C                        18            .byte	$18
05966 146D                        D8            .byte	$D8
05967 146E                        70            .byte	$70
05968                                           ! 1046  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05969 146F                        1C            .byte	$1C
05970 1470                        00            .byte	0
05971 1471                        78            .byte	$78
05972 1472                        0C            .byte	$C
05973 1473                        7C            .byte	$7C
05974 1474                        CC            .byte	$CC
05975 1475                        7E            .byte	$7E
05976 1476                        00            .byte	0
05977                                           ! 1047  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05978 1477                        38            .byte	$38
05979 1478                        00            .byte	0
05980 1479                        70            .byte	$70
05981 147A                        30            .byte	$30
05982 147B                        30            .byte	$30
05983 147C                        30            .byte	$30
05984 147D                        78            .byte	$78
05985 147E                        00            .byte	0
05986                                           ! 1048  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05987 147F                        00            .byte	0
05988 1480                        1C            .byte	$1C
05989 1481                        00            .byte	0
05990 1482                        78            .byte	$78
05991 1483                        CC            .byte	$CC
05992 1484                        CC            .byte	$CC
05993 1485                        78            .byte	$78
05994 1486                        00            .byte	0
05995                                           ! 1049  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05996 1487                        00            .byte	0
05997 1488                        1C            .byte	$1C
05998 1489                        00            .byte	0
05999 148A                        CC            .byte	$CC
06000 148B                        CC            .byte	$CC
06001 148C                        CC            .byte	$CC
06002 148D                        7E            .byte	$7E
06003 148E                        00            .byte	0
06004                                           ! 1050  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
06005 148F                        00            .byte	0
06006 1490                        F8            .byte	$F8
06007 1491                        00            .byte	0
06008 1492                        F8            .byte	$F8
06009 1493                        CC            .byte	$CC
06010 1494                        CC            .byte	$CC
06011 1495                        CC            .byte	$CC
06012 1496                        00            .byte	0
06013                                           ! 1051  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
06014 1497                        FC            .byte	$FC
06015 1498                        00            .byte	0
06016 1499                        CC            .byte	$CC
06017 149A                        EC            .byte	$EC
06018 149B                        FC            .byte	$FC
06019 149C                        DC            .byte	$DC
06020 149D                        CC            .byte	$CC
06021 149E                        00            .byte	0
06022                                           ! 1052  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
06023 149F                        3C            .byte	$3C
06024 14A0                        6C            .byte	$6C
06025 14A1                        6C            .byte	$6C
06026 14A2                        3E            .byte	$3E
06027 14A3                        00            .byte	0
06028 14A4                        7E            .byte	$7E
06029 14A5                        00            .byte	0
06030 14A6                        00            .byte	0
06031                                           ! 1053  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06032 14A7                        38            .byte	$38
06033 14A8                        6C            .byte	$6C
06034 14A9                        6C            .byte	$6C
06035 14AA                        38            .byte	$38
06036 14AB                        00            .byte	0
06037 14AC                        7C            .byte	$7C
06038 14AD                        00            .byte	0
06039 14AE                        00            .byte	0
06040                                           ! 1054  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06041 14AF                        30            .byte	$30
06042 14B0                        00            .byte	0
06043 14B1                        30            .byte	$30
06044 14B2                        60            .byte	$60
06045 14B3                        C0            .byte	$C0
06046 14B4                        CC            .byte	$CC
06047 14B5                        78            .byte	$78
06048 14B6                        00            .byte	0
06049                                           ! 1055  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06050 14B7                        00            .byte	0
06051 14B8                        00            .byte	0
06052 14B9                        00            .byte	0
06053 14BA                        FC            .byte	$FC
06054 14BB                        C0            .byte	$C0
06055 14BC                        C0            .byte	$C0
06056 14BD                        00            .byte	0
06057 14BE                        00            .byte	0
06058                                           ! 1056  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06059 14BF                        00            .byte	0
06060 14C0                        00            .byte	0
06061 14C1                        00            .byte	0
06062 14C2                        FC            .byte	$FC
06063 14C3                        0C            .byte	$C
06064 14C4                        0C            .byte	$C
06065 14C5                        00            .byte	0
06066 14C6                        00            .byte	0
06067                                           ! 1057  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06068 14C7                        C3            .byte	$C3
06069 14C8                        C6            .byte	$C6
06070 14C9                        CC            .byte	$CC
06071 14CA                        DE            .byte	$DE
06072 14CB                        33            .byte	$33
06073 14CC                        66            .byte	$66
06074 14CD                        CC            .byte	$CC
06075 14CE                        0F            .byte	$F
06076                                           ! 1058  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06077 14CF                        C3            .byte	$C3
06078 14D0                        C6            .byte	$C6
06079 14D1                        CC            .byte	$CC
06080 14D2                        DB            .byte	$DB
06081 14D3                        37            .byte	$37
06082 14D4                        6F            .byte	$6F
06083 14D5                        CF            .byte	$CF
06084 14D6                        03            .byte	3
06085                                           ! 1059  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06086 14D7                        18            .byte	$18
06087 14D8                        18            .byte	$18
06088 14D9                        00            .byte	0
06089 14DA                        18            .byte	$18
06090 14DB                        18            .byte	$18
06091 14DC                        18            .byte	$18
06092 14DD                        18            .byte	$18
06093 14DE                        00            .byte	0
06094                                           ! 1060  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06095 14DF                        00            .byte	0
06096 14E0                        33            .byte	$33
06097 14E1                        66            .byte	$66
06098 14E2                        CC            .byte	$CC
06099 14E3                        66            .byte	$66
06100 14E4                        33            .byte	$33
06101 14E5                        00            .byte	0
06102 14E6                        00            .byte	0
06103                                           ! 1061  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06104 14E7                        00            .byte	0
06105 14E8                        CC            .byte	$CC
06106 14E9                        66            .byte	$66
06107 14EA                        33            .byte	$33
06108 14EB                        66            .byte	$66
06109 14EC                        CC            .byte	$CC
06110 14ED                        00            .byte	0
06111 14EE                        00            .byte	0
06112                                           ! 1062  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06113 14EF                        22            .byte	$22
06114 14F0                        88            .byte	$88
06115 14F1                        22            .byte	$22
06116 14F2                        88            .byte	$88
06117 14F3                        22            .byte	$22
06118 14F4                        88            .byte	$88
06119 14F5                        22            .byte	$22
06120 14F6                        88            .byte	$88
06121                                           ! 1063  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06122 14F7                        55            .byte	$55
06123 14F8                        AA            .byte	$AA
06124 14F9                        55            .byte	$55
06125 14FA                        AA            .byte	$AA
06126 14FB                        55            .byte	$55
06127 14FC                        AA            .byte	$AA
06128 14FD                        55            .byte	$55
06129 14FE                        AA            .byte	$AA
06130                                           ! 1064  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06131 14FF                        DB            .byte	$DB
06132 1500                        77            .byte	$77
06133 1501                        DB            .byte	$DB
06134 1502                        EE            .byte	$EE
06135 1503                        DB            .byte	$DB
06136 1504                        77            .byte	$77
06137 1505                        DB            .byte	$DB
06138 1506                        EE            .byte	$EE
06139                                           ! 1065  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06140 1507                        18            .byte	$18
06141 1508                        18            .byte	$18
06142 1509                        18            .byte	$18
06143 150A                        18            .byte	$18
06144 150B                        18            .byte	$18
06145 150C                        18            .byte	$18
06146 150D                        18            .byte	$18
06147 150E                        18            .byte	$18
06148                                           ! 1066  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06149 150F                        18            .byte	$18
06150 1510                        18            .byte	$18
06151 1511                        18            .byte	$18
06152 1512                        18            .byte	$18
06153 1513                        F8            .byte	$F8
06154 1514                        18            .byte	$18
06155 1515                        18            .byte	$18
06156 1516                        18            .byte	$18
06157                                           ! 1067  0x1
06158                                           ! 1067 8, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06159 1517                        18            .byte	$18
06160 1518                        18            .byte	$18
06161 1519                        F8            .byte	$F8
06162 151A                        18            .byte	$18
06163 151B                        F8            .byte	$F8
06164 151C                        18            .byte	$18
06165 151D                        18            .byte	$18
06166 151E                        18            .byte	$18
06167                                           ! 1068  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06168 151F                        36            .byte	$36
06169 1520                        36            .byte	$36
06170 1521                        36            .byte	$36
06171 1522                        36            .byte	$36
06172 1523                        F6            .byte	$F6
06173 1524                        36            .byte	$36
06174 1525                        36            .byte	$36
06175 1526                        36            .byte	$36
06176                                           ! 1069  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
06177 1527                        00            .byte	0
06178 1528                        00            .byte	0
06179 1529                        00            .byte	0
06180 152A                        00            .byte	0
06181 152B                        FE            .byte	$FE
06182 152C                        36            .byte	$36
06183 152D                        36            .byte	$36
06184 152E                        36            .byte	$36
06185                                           ! 1070  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06186 152F                        00            .byte	0
06187 1530                        00            .byte	0
06188 1531                        F8            .byte	$F8
06189 1532                        18            .byte	$18
06190 1533                        F8            .byte	$F8
06191 1534                        18            .byte	$18
06192 1535                        18            .byte	$18
06193 1536                        18            .byte	$18
06194                                           ! 1071  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06195 1537                        36            .byte	$36
06196 1538                        36            .byte	$36
06197 1539                        F6            .byte	$F6
06198 153A                        06            .byte	6
06199 153B                        F6            .byte	$F6
06200 153C                        36            .byte	$36
06201 153D                        36            .byte	$36
06202 153E                        36            .byte	$36
06203                                           ! 1072  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06204 153F                        36            .byte	$36
06205 1540                        36            .byte	$36
06206 1541                        36            .byte	$36
06207 1542                        36            .byte	$36
06208 1543                        36            .byte	$36
06209 1544                        36            .byte	$36
06210 1545                        36            .byte	$36
06211 1546                        36            .byte	$36
06212                                           ! 1073  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06213 1547                        00            .byte	0
06214 1548                        00            .byte	0
06215 1549                        FE            .byte	$FE
06216 154A                        06            .byte	6
06217 154B                        F6            .byte	$F6
06218 154C                        36            .byte	$36
06219 154D                        36            .byte	$36
06220 154E                        36            .byte	$36
06221                                           ! 1074  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06222 154F                        36            .byte	$36
06223 1550                        36            .byte	$36
06224 1551                        F6            .byte	$F6
06225 1552                        06            .byte	6
06226 1553                        FE            .byte	$FE
06227 1554                        00            .byte	0
06228 1555                        00            .byte	0
06229 1556                        00            .byte	0
06230                                           ! 1075  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06231 1557                        36            .byte	$36
06232 1558                        36            .byte	$36
06233 1559                        36            .byte	$36
06234 155A                        36            .byte	$36
06235 155B                        FE            .byte	$FE
06236 155C                        00            .byte	0
06237 155D                        00            .byte	0
06238 155E                        00            .byte	0
06239                                           ! 1076  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06240 155F                        18            .byte	$18
06241 1560                        18            .byte	$18
06242 1561                        F8            .byte	$F8
06243 1562                        18            .byte	$18
06244 1563                        F8            .byte	$F8
06245 1564                        00            .byte	0
06246 1565                        00            .byte	0
06247 1566                        00            .byte	0
06248                                           ! 1077  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06249 1567                        00            .byte	0
06250 1568                        00            .byte	0
06251 1569                        00            .byte	0
06252 156A                        00            .byte	0
06253 156B                        F8            .byte	$F8
06254 156C                        18            .byte	$18
06255 156D                        18            .byte	$18
06256 156E                        18            .byte	$18
06257                                           ! 1078  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06258 156F                        18            .byte	$18
06259 1570                        18            .byte	$18
06260 1571                        18            .byte	$18
06261 1572                        18            .byte	$18
06262 1573                        1F            .byte	$1F
06263 1574                        00            .byte	0
06264 1575                        00            .byte	0
06265 1576                        00            .byte	0
06266                                           ! 1079  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06267 1577                        18            .byte	$18
06268 1578                        18            .byte	$18
06269 1579                        18            .byte	$18
06270 157A                        18            .byte	$18
06271 157B                        FF            .byte	$FF
06272 157C                        00            .byte	0
06273 157D                        00            .byte	0
06274 157E                        00            .byte	0
06275                                           ! 1080  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06276 157F                        00            .byte	0
06277 1580                        00            .byte	0
06278 1581                        00            .byte	0
06279 1582                        00            .byte	0
06280 1583                        FF            .byte	$FF
06281 1584                        18            .byte	$18
06282 1585                        18            .byte	$18
06283 1586                        18            .byte	$18
06284                                           ! 1081  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06285 1587                        18            .byte	$18
06286 1588                        18            .byte	$18
06287 1589                        18            .byte	$18
06288 158A                        18            .byte	$18
06289 158B                        1F            .byte	$1F
06290 158C                        18            .byte	$18
06291 158D                        18            .byte	$18
06292 158E                        18            .byte	$18
06293                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06294 158F                        00            .byte	0
06295 1590                        00            .byte	0
06296 1591                        00            .byte	0
06297 1592                        00            .byte	0
06298 1593                        FF            .byte	$FF
06299 1594                        00            .byte	0
06300 1595                        00            .byte	0
06301 1596                        00            .byte	0
06302                                           ! 1083  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06303 1597                        18            .byte	$18
06304 1598                        18            .byte	$18
06305 1599                        18            .byte	$18
06306 159A                        18            .byte	$18
06307 159B                        FF            .byte	$FF
06308 159C                        18            .byte	$18
06309 159D                        18            .byte	$18
06310 159E                        18            .byte	$18
06311                                           ! 1084  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06312 159F                        18            .byte	$18
06313 15A0                        18            .byte	$18
06314 15A1                        1F            .byte	$1F
06315 15A2                        18            .byte	$18
06316 15A3                        1F            .byte	$1F
06317 15A4                        18            .byte	$18
06318 15A5                        18            .byte	$18
06319 15A6                        18            .byte	$18
06320                                           ! 1085  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06321 15A7                        36            .byte	$36
06322 15A8                        36            .byte	$36
06323 15A9                        36            .byte	$36
06324 15AA                        36            .byte	$36
06325 15AB                        37            .byte	$37
06326 15AC                        36            .byte	$36
06327 15AD                        36            .byte	$36
06328 15AE                        36            .byte	$36
06329                                           ! 1086  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06330 15AF                        36            .byte	$36
06331 15B0                        36            .byte	$36
06332 15B1                        37            .byte	$37
06333 15B2                        30            .byte	$30
06334 15B3                        3F            .byte	$3F
06335 15B4                        00            .byte	0
06336 15B5                        00            .byte	0
06337 15B6                        00            .byte	0
06338                                           ! 1087  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06339 15B7                        00            .byte	0
06340 15B8                        00            .byte	0
06341 15B9                        3F            .byte	$3F
06342 15BA                        30            .byte	$30
06343 15BB                        37            .byte	$37
06344 15BC                        36            .byte	$36
06345 15BD                        36            .byte	$36
06346 15BE                        36            .byte	$36
06347                                           ! 1088  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06348 15BF                        36            .byte	$36
06349 15C0                        36            .byte	$36
06350 15C1                        F7            .byte	$F7
06351 15C2                        00            .byte	0
06352 15C3                        FF            .byte	$FF
06353 15C4                        00            .byte	0
06354 15C5                        00            .byte	0
06355 15C6                        00            .byte	0
06356                                           ! 1089  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06357 15C7                        00            .byte	0
06358 15C8                        00            .byte	0
06359 15C9                        FF            .byte	$FF
06360 15CA                        00            .byte	0
06361 15CB                        F7            .byte	$F7
06362 15CC                        36            .byte	$36
06363 15CD                        36            .byte	$36
06364 15CE                        36            .byte	$36
06365                                           ! 1090  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06366 15CF                        36            .byte	$36
06367 15D0                        36            .byte	$36
06368 15D1                        37            .byte	$37
06369 15D2                        30            .byte	$30
06370 15D3                        37            .byte	$37
06371 15D4                        36            .byte	$36
06372 15D5                        36            .byte	$36
06373 15D6                        36            .byte	$36
06374                                           ! 1091  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06375 15D7                        00            .byte	0
06376 15D8                        00            .byte	0
06377 15D9                        FF            .byte	$FF
06378 15DA                        00            .byte	0
06379 15DB                        FF            .byte	$FF
06380 15DC                        00            .byte	0
06381 15DD                        00            .byte	0
06382 15DE                        00            .byte	0
06383                                           ! 1092  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06384 15DF                        36            .byte	$36
06385 15E0                        36            .byte	$36
06386 15E1                        F7            .byte	$F7
06387 15E2                        00            .byte	0
06388 15E3                        F7            .byte	$F7
06389 15E4                        36            .byte	$36
06390 15E5                        36            .byte	$36
06391 15E6                        36            .byte	$36
06392                                           ! 1093  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06393 15E7                        18            .byte	$18
06394 15E8                        18            .byte	$18
06395 15E9                        FF            .byte	$FF
06396 15EA                        00            .byte	0
06397 15EB                        FF            .byte	$FF
06398 15EC                        00            .byte	0
06399 15ED                        00            .byte	0
06400 15EE                        00            .byte	0
06401                                           ! 1094  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06402 15EF                        36            .byte	$36
06403 15F0                        36            .byte	$36
06404 15F1                        36            .byte	$36
06405 15F2                        36            .byte	$36
06406 15F3                        FF            .byte	$FF
06407 15F4                        00            .byte	0
06408 15F5                        00            .byte	0
06409 15F6                        00            .byte	0
06410                                           ! 1095  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06411 15F7                        00            .byte	0
06412 15F8                        00            .byte	0
06413 15F9                        FF            .byte	$FF
06414 15FA                        00            .byte	0
06415 15FB                        FF            .byte	$FF
06416 15FC                        18            .byte	$18
06417 15FD                        18            .byte	$18
06418 15FE                        18            .byte	$18
06419                                           ! 1096  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06420 15FF                        00            .byte	0
06421 1600                        00            .byte	0
06422 1601                        00            .byte	0
06423 1602                        00            .byte	0
06424 1603                        FF            .byte	$FF
06425 1604                        36            .byte	$36
06426 1605                        36            .byte	$36
06427 1606                        36            .byte	$36
06428                                           ! 1097  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06429 1607                        36            .byte	$36
06430 1608                        36            .byte	$36
06431 1609                        36            .byte	$36
06432 160A                        36            .byte	$36
06433 160B                        3F            .byte	$3F
06434 160C                        00            .byte	0
06435 160D                        00            .byte	0
06436 160E                        00            .byte	0
06437                                           ! 1098  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06438 160F                        18            .byte	$18
06439 1610                        18            .byte	$18
06440 1611                        1F            .byte	$1F
06441 1612                        18            .byte	$18
06442 1613                        1F            .byte	$1F
06443 1614                        00            .byte	0
06444 1615                        00            .byte	0
06445 1616                        00            .byte	0
06446                                           ! 1099  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06447 1617                        00            .byte	0
06448 1618                        00            .byte	0
06449 1619                        1F            .byte	$1F
06450 161A                        18            .byte	$18
06451 161B                        1F            .byte	$1F
06452 161C                        18            .byte	$18
06453 161D                        18            .byte	$18
06454 161E                        18            .byte	$18
06455                                           ! 1100  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06456 161F                        00            .byte	0
06457 1620                        00            .byte	0
06458 1621                        00            .byte	0
06459 1622                        00            .byte	0
06460 1623                        3F            .byte	$3F
06461 1624                        36            .byte	$36
06462 1625                        36            .byte	$36
06463 1626                        36            .byte	$36
06464                                           ! 1101  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06465 1627                        36            .byte	$36
06466 1628                        36            .byte	$36
06467 1629                        36            .byte	$36
06468 162A                        36            .byte	$36
06469 162B                        FF            .byte	$FF
06470 162C                        36            .byte	$36
06471 162D                        36            .byte	$36
06472 162E                        36            .byte	$36
06473                                           ! 1102  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06474 162F                        18            .byte	$18
06475 1630                        18            .byte	$18
06476 1631                        FF            .byte	$FF
06477 1632                        18            .byte	$18
06478 1633                        FF            .byte	$FF
06479 1634                        18            .byte	$18
06480 1635                        18            .byte	$18
06481 1636                        18            .byte	$18
06482                                           ! 1103  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06483 1637                        18            .byte	$18
06484 1638                        18            .byte	$18
06485 1639                        18            .byte	$18
06486 163A                        18            .byte	$18
06487 163B                        F8            .byte	$F8
06488 163C                        00            .byte	0
06489 163D                        00            .byte	0
06490 163E                        00            .byte	0
06491                                           ! 1104  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06492 163F                        00            .byte	0
06493 1640                        00            .byte	0
06494 1641                        00            .byte	0
06495 1642                        00            .byte	0
06496 1643                        1F            .byte	$1F
06497 1644                        18            .byte	$18
06498 1645                        18            .byte	$18
06499 1646                        18            .byte	$18
06500                                           ! 1105  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06501 1647                        FF            .byte	$FF
06502 1648                        FF            .byte	$FF
06503 1649                        FF            .byte	$FF
06504 164A                        FF            .byte	$FF
06505 164B                        FF            .byte	$FF
06506 164C                        FF            .byte	$FF
06507 164D                        FF            .byte	$FF
06508 164E                        FF            .byte	$FF
06509                                           ! 1106  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06510 164F                        00            .byte	0
06511 1650                        00            .byte	0
06512 1651                        00            .byte	0
06513 1652                        00            .byte	0
06514 1653                        FF            .byte	$FF
06515 1654                        FF            .byte	$FF
06516 1655                        FF            .byte	$FF
06517 1656                        FF            .byte	$FF
06518                                           ! 1107  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06519 1657                        F0            .byte	$F0
06520 1658                        F0            .byte	$F0
06521 1659                        F0            .byte	$F0
06522 165A                        F0            .byte	$F0
06523 165B                        F0            .byte	$F0
06524 165C                        F0            .byte	$F0
06525 165D                        F0            .byte	$F0
06526 165E                        F0            .byte	$F0
06527                                           ! 1108  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
06528 165F                        0F            .byte	$F
06529 1660                        0F            .byte	$F
06530 1661                        0F            .byte	$F
06531 1662                        0F            .byte	$F
06532 1663                        0F            .byte	$F
06533 1664                        0F            .byte	$F
06534 1665                        0F            .byte	$F
06535                                           ! 1108 0x0f,
06536 1666                        0F            .byte	$F
06537                                           ! 1109  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06538 1667                        FF            .byte	$FF
06539 1668                        FF            .byte	$FF
06540 1669                        FF            .byte	$FF
06541 166A                        FF            .byte	$FF
06542 166B                        00            .byte	0
06543 166C                        00            .byte	0
06544 166D                        00            .byte	0
06545 166E                        00            .byte	0
06546                                           ! 1110  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06547 166F                        00            .byte	0
06548 1670                        00            .byte	0
06549 1671                        76            .byte	$76
06550 1672                        DC            .byte	$DC
06551 1673                        C8            .byte	$C8
06552 1674                        DC            .byte	$DC
06553 1675                        76            .byte	$76
06554 1676                        00            .byte	0
06555                                           ! 1111  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06556 1677                        00            .byte	0
06557 1678                        78            .byte	$78
06558 1679                        CC            .byte	$CC
06559 167A                        F8            .byte	$F8
06560 167B                        CC            .byte	$CC
06561 167C                        F8            .byte	$F8
06562 167D                        C0            .byte	$C0
06563 167E                        C0            .byte	$C0
06564                                           ! 1112  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06565 167F                        00            .byte	0
06566 1680                        FC            .byte	$FC
06567 1681                        CC            .byte	$CC
06568 1682                        C0            .byte	$C0
06569 1683                        C0            .byte	$C0
06570 1684                        C0            .byte	$C0
06571 1685                        C0            .byte	$C0
06572 1686                        00            .byte	0
06573                                           ! 1113  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06574 1687                        00            .byte	0
06575 1688                        FE            .byte	$FE
06576 1689                        6C            .byte	$6C
06577 168A                        6C            .byte	$6C
06578 168B                        6C            .byte	$6C
06579 168C                        6C            .byte	$6C
06580 168D                        6C            .byte	$6C
06581 168E                        00            .byte	0
06582                                           ! 1114  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06583 168F                        FC            .byte	$FC
06584 1690                        CC            .byte	$CC
06585 1691                        60            .byte	$60
06586 1692                        30            .byte	$30
06587 1693                        60            .byte	$60
06588 1694                        CC            .byte	$CC
06589 1695                        FC            .byte	$FC
06590 1696                        00            .byte	0
06591                                           ! 1115  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06592 1697                        00            .byte	0
06593 1698                        00            .byte	0
06594 1699                        7E            .byte	$7E
06595 169A                        D8            .byte	$D8
06596 169B                        D8            .byte	$D8
06597 169C                        D8            .byte	$D8
06598 169D                        70            .byte	$70
06599 169E                        00            .byte	0
06600                                           ! 1116  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06601 169F                        00            .byte	0
06602 16A0                        66            .byte	$66
06603 16A1                        66            .byte	$66
06604 16A2                        66            .byte	$66
06605 16A3                        66            .byte	$66
06606 16A4                        7C            .byte	$7C
06607 16A5                        60            .byte	$60
06608 16A6                        C0            .byte	$C0
06609                                           ! 1117  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06610 16A7                        00            .byte	0
06611 16A8                        76            .byte	$76
06612 16A9                        DC            .byte	$DC
06613 16AA                        18            .byte	$18
06614 16AB                        18            .byte	$18
06615 16AC                        18            .byte	$18
06616 16AD                        18            .byte	$18
06617 16AE                        00            .byte	0
06618                                           ! 1118  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06619 16AF                        FC            .byte	$FC
06620 16B0                        30            .byte	$30
06621 16B1                        78            .byte	$78
06622 16B2                        CC            .byte	$CC
06623 16B3                        CC            .byte	$CC
06624 16B4                        78            .byte	$78
06625 16B5                        30            .byte	$30
06626 16B6                        FC            .byte	$FC
06627                                           ! 1119  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06628 16B7                        38            .byte	$38
06629 16B8                        6C            .byte	$6C
06630 16B9                        C6            .byte	$C6
06631 16BA                        FE            .byte	$FE
06632 16BB                        C6            .byte	$C6
06633 16BC                        6C            .byte	$6C
06634 16BD                        38            .byte	$38
06635 16BE                        00            .byte	0
06636                                           ! 1120  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06637 16BF                        38            .byte	$38
06638 16C0                        6C            .byte	$6C
06639 16C1                        C6            .byte	$C6
06640 16C2                        C6            .byte	$C6
06641 16C3                        6C            .byte	$6C
06642 16C4                        6C            .byte	$6C
06643 16C5                        EE            .byte	$EE
06644 16C6                        00            .byte	0
06645                                           ! 1121  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06646 16C7                        1C            .byte	$1C
06647 16C8                        30            .byte	$30
06648 16C9                        18            .byte	$18
06649 16CA                        7C            .byte	$7C
06650 16CB                        CC            .byte	$CC
06651 16CC                        CC            .byte	$CC
06652 16CD                        78            .byte	$78
06653 16CE                        00            .byte	0
06654                                           ! 1122  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06655 16CF                        00            .byte	0
06656 16D0                        00            .byte	0
06657 16D1                        7E            .byte	$7E
06658 16D2                        DB            .byte	$DB
06659 16D3                        DB            .byte	$DB
06660 16D4                        7E            .byte	$7E
06661 16D5                        00            .byte	0
06662 16D6                        00            .byte	0
06663                                           ! 1123  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06664 16D7                        06            .byte	6
06665 16D8                        0C            .byte	$C
06666 16D9                        7E            .byte	$7E
06667 16DA                        DB            .byte	$DB
06668 16DB                        DB            .byte	$DB
06669 16DC                        7E            .byte	$7E
06670 16DD                        60            .byte	$60
06671 16DE                        C0            .byte	$C0
06672                                           ! 1124  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06673 16DF                        38            .byte	$38
06674 16E0                        60            .byte	$60
06675 16E1                        C0            .byte	$C0
06676 16E2                        F8            .byte	$F8
06677 16E3                        C0            .byte	$C0
06678 16E4                        60            .byte	$60
06679 16E5                        38            .byte	$38
06680 16E6                        00            .byte	0
06681                                           ! 1125  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06682 16E7                        78            .byte	$78
06683 16E8                        CC            .byte	$CC
06684 16E9                        CC            .byte	$CC
06685 16EA                        CC            .byte	$CC
06686 16EB                        CC            .byte	$CC
06687 16EC                        CC            .byte	$CC
06688 16ED                        CC            .byte	$CC
06689 16EE                        00            .byte	0
06690                                           ! 1126  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06691 16EF                        00            .byte	0
06692 16F0                        FC            .byte	$FC
06693 16F1                        00            .byte	0
06694 16F2                        FC            .byte	$FC
06695 16F3                        00            .byte	0
06696 16F4                        FC            .byte	$FC
06697 16F5                        00            .byte	0
06698 16F6                        00            .byte	0
06699                                           ! 1127  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06700 16F7                        30            .byte	$30
06701 16F8                        30            .byte	$30
06702 16F9                        FC            .byte	$FC
06703 16FA                        30            .byte	$30
06704 16FB                        30            .byte	$30
06705 16FC                        00            .byte	0
06706 16FD                        FC            .byte	$FC
06707 16FE                        00            .byte	0
06708                                           ! 1128  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06709 16FF                        60            .byte	$60
06710 1700                        30            .byte	$30
06711 1701                        18            .byte	$18
06712 1702                        30            .byte	$30
06713 1703                        60            .byte	$60
06714 1704                        00            .byte	0
06715 1705                        FC            .byte	$FC
06716 1706                        00            .byte	0
06717                                           ! 1129  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06718 1707                        18            .byte	$18
06719 1708                        30            .byte	$30
06720 1709                        60            .byte	$60
06721 170A                        30            .byte	$30
06722 170B                        18            .byte	$18
06723 170C                        00            .byte	0
06724 170D                        FC            .byte	$FC
06725 170E                        00            .byte	0
06726                                           ! 1130  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06727 170F                        0E            .byte	$E
06728 1710                        1B            .byte	$1B
06729 1711                        1B            .byte	$1B
06730 1712                        18            .byte	$18
06731 1713                        18            .byte	$18
06732 1714                        18            .byte	$18
06733 1715                        18            .byte	$18
06734 1716                        18            .byte	$18
06735                                           ! 1131  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06736 1717                        18            .byte	$18
06737 1718                        18            .byte	$18
06738 1719                        18            .byte	$18
06739 171A                        18            .byte	$18
06740 171B                        18            .byte	$18
06741 171C                        D8            .byte	$D8
06742 171D                        D8            .byte	$D8
06743 171E                        70            .byte	$70
06744                                           ! 1132  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06745 171F                        30            .byte	$30
06746 1720                        30            .byte	$30
06747 1721                        00            .byte	0
06748 1722                        FC            .byte	$FC
06749 1723                        00            .byte	0
06750 1724                        30            .byte	$30
06751 1725                        30            .byte	$30
06752 1726                        00            .byte	0
06753                                           ! 1133  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06754 1727                        00            .byte	0
06755 1728                        76            .byte	$76
06756 1729                        DC            .byte	$DC
06757 172A                        00            .byte	0
06758 172B                        76            .byte	$76
06759 172C                        DC            .byte	$DC
06760 172D                        00            .byte	0
06761 172E                        00            .byte	0
06762                                           ! 1134  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06763 172F                        38            .byte	$38
06764 1730                        6C            .byte	$6C
06765 1731                        6C            .byte	$6C
06766 1732                        38            .byte	$38
06767 1733                        00            .byte	0
06768 1734                        00            .byte	0
06769 1735                        00            .byte	0
06770 1736                        00            .byte	0
06771                                           ! 1135  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06772 1737                        00            .byte	0
06773 1738                        00            .byte	0
06774 1739                        00            .byte	0
06775 173A                        18            .byte	$18
06776 173B                        18            .byte	$18
06777 173C                        00            .byte	0
06778 173D                        00            .byte	0
06779 173E                        00            .byte	0
06780                                           ! 1136  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06781 173F                        00            .byte	0
06782 1740                        00            .byte	0
06783 1741                        00            .byte	0
06784 1742                        00            .byte	0
06785 1743                        18            .byte	$18
06786 1744                        00            .byte	0
06787 1745                        00            .byte	0
06788 1746                        00            .byte	0
06789                                           ! 1137  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06790 1747                        0F            .byte	$F
06791 1748                        0C            .byte	$C
06792 1749                        0C            .byte	$C
06793 174A                        0C            .byte	$C
06794 174B                        EC            .byte	$EC
06795 174C                        6C            .byte	$6C
06796 174D                        3C            .byte	$3C
06797 174E                        1C            .byte	$1C
06798                                           ! 1138  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06799 174F                        78            .byte	$78
06800 1750                        6C            .byte	$6C
06801 1751                        6C            .byte	$6C
06802 1752                        6C            .byte	$6C
06803 1753                        6C            .byte	$6C
06804 1754                        00            .byte	0
06805 1755                        00            .byte	0
06806 1756                        00            .byte	0
06807                                           ! 1139  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06808 1757                        70            .byte	$70
06809 1758                        18            .byte	$18
06810 1759                        30            .byte	$30
06811 175A                        60            .byte	$60
06812 175B                        78            .byte	$78
06813 175C                        00            .byte	0
06814 175D                        00            .byte	0
06815 175E                        00            .byte	0
06816                                           ! 1140  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06817 175F                        00            .byte	0
06818 1760                        00            .byte	0
06819 1761                        3C            .byte	$3C
06820 1762                        3C            .byte	$3C
06821 1763                        3C            .byte	$3C
06822 1764                        3C            .byte	$3C
06823 1765                        00            .byte	0
06824 1766                        00            .byte	0
06825                                           ! 1141  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06826 1767                        00            .byte	0
06827 1768                        00            .byte	0
06828 1769                        00            .byte	0
06829 176A                        00            .byte	0
06830 176B                        00            .byte	0
06831 176C                        00            .byte	0
06832 176D                        00            .byte	0
06833                                           ! 1142 };
06834 176E                        00            .byte	0
06835                                           !BCC_EOS
06836                                           ! 1143 static Bit8u vgafont14[256*14]=
06837                                           ! 1144 {
06838                       0000176F            _vgafont14:
06839                                           ! 1145  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06840 176F                        00            .byte	0
06841 1770                        00            .byte	0
06842 1771                        00            .byte	0
06843 1772                        00            .byte	0
06844 1773                        00            .byte	0
06845 1774                        00            .byte	0
06846 1775                        00            .byte	0
06847 1776                        00            .byte	0
06848 1777                        00            .byte	0
06849 1778                        00            .byte	0
06850 1779                        00            .byte	0
06851 177A                        00            .byte	0
06852 177B                        00            .byte	0
06853 177C                        00            .byte	0
06854                                           ! 1146  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06855 177D                        00            .byte	0
06856 177E                        00            .byte	0
06857 177F                        7E            .byte	$7E
06858 1780                        81            .byte	$81
06859 1781                        A5            .byte	$A5
06860 1782                        81            .byte	$81
06861 1783                        81            .byte	$81
06862 1784                        BD            .byte	$BD
06863 1785                        99            .byte	$99
06864 1786                        81            .byte	$81
06865 1787                        7E            .byte	$7E
06866 1788                        00            .byte	0
06867 1789                        00            .byte	0
06868 178A                        00            .byte	0
06869                                           ! 1147  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06870 178B                        00            .byte	0
06871 178C                        00            .byte	0
06872 178D                        7E            .byte	$7E
06873 178E                        FF            .byte	$FF
06874 178F                        DB            .byte	$DB
06875 1790                        FF            .byte	$FF
06876 1791                        FF            .byte	$FF
06877 1792                        C3            .byte	$C3
06878 1793                        E7            .byte	$E7
06879 1794                        FF            .byte	$FF
06880 1795                        7E            .byte	$7E
06881 1796                        00            .byte	0
06882 1797                        00            .byte	0
06883 1798                        00            .byte	0
06884                                           ! 1148  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06885 1799                        00            .byte	0
06886 179A                        00            .byte	0
06887 179B                        00            .byte	0
06888 179C                        6C            .byte	$6C
06889 179D                        FE            .byte	$FE
06890 179E                        FE            .byte	$FE
06891 179F                        FE            .byte	$FE
06892 17A0                        FE            .byte	$FE
06893 17A1                        7C            .byte	$7C
06894 17A2                        38            .byte	$38
06895 17A3                        10            .byte	$10
06896 17A4                        00            .byte	0
06897 17A5                        00            .byte	0
06898 17A6                        00            .byte	0
06899                                           ! 1149  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 
06900 17A7                        00            .byte	0
06901 17A8                        00            .byte	0
06902 17A9                        00            .byte	0
06903 17AA                        10            .byte	$10
06904 17AB                        38            .byte	$38
06905 17AC                        7C            .byte	$7C
06906 17AD                        FE            .byte	$FE
06907 17AE                        7C            .byte	$7C
06908                                           ! 1149 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06909 17AF                        38            .byte	$38
06910 17B0                        10            .byte	$10
06911 17B1                        00            .byte	0
06912 17B2                        00            .byte	0
06913 17B3                        00            .byte	0
06914 17B4                        00            .byte	0
06915                                           ! 1150  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06916 17B5                        00            .byte	0
06917 17B6                        00            .byte	0
06918 17B7                        18            .byte	$18
06919 17B8                        3C            .byte	$3C
06920 17B9                        3C            .byte	$3C
06921 17BA                        E7            .byte	$E7
06922 17BB                        E7            .byte	$E7
06923 17BC                        E7            .byte	$E7
06924 17BD                        18            .byte	$18
06925 17BE                        18            .byte	$18
06926 17BF                        3C            .byte	$3C
06927 17C0                        00            .byte	0
06928 17C1                        00            .byte	0
06929 17C2                        00            .byte	0
06930                                           ! 1151  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06931 17C3                        00            .byte	0
06932 17C4                        00            .byte	0
06933 17C5                        18            .byte	$18
06934 17C6                        3C            .byte	$3C
06935 17C7                        7E            .byte	$7E
06936 17C8                        FF            .byte	$FF
06937 17C9                        FF            .byte	$FF
06938 17CA                        7E            .byte	$7E
06939 17CB                        18            .byte	$18
06940 17CC                        18            .byte	$18
06941 17CD                        3C            .byte	$3C
06942 17CE                        00            .byte	0
06943 17CF                        00            .byte	0
06944 17D0                        00            .byte	0
06945                                           ! 1152  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06946 17D1                        00            .byte	0
06947 17D2                        00            .byte	0
06948 17D3                        00            .byte	0
06949 17D4                        00            .byte	0
06950 17D5                        00            .byte	0
06951 17D6                        18            .byte	$18
06952 17D7                        3C            .byte	$3C
06953 17D8                        3C            .byte	$3C
06954 17D9                        18            .byte	$18
06955 17DA                        00            .byte	0
06956 17DB                        00            .byte	0
06957 17DC                        00            .byte	0
06958 17DD                        00            .byte	0
06959 17DE                        00            .byte	0
06960                                           ! 1153  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06961 17DF                        FF            .byte	$FF
06962 17E0                        FF            .byte	$FF
06963 17E1                        FF            .byte	$FF
06964 17E2                        FF            .byte	$FF
06965 17E3                        FF            .byte	$FF
06966 17E4                        E7            .byte	$E7
06967 17E5                        C3            .byte	$C3
06968 17E6                        C3            .byte	$C3
06969 17E7                        E7            .byte	$E7
06970 17E8                        FF            .byte	$FF
06971 17E9                        FF            .byte	$FF
06972 17EA                        FF            .byte	$FF
06973 17EB                        FF            .byte	$FF
06974 17EC                        FF            .byte	$FF
06975                                           ! 1154  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06976 17ED                        00            .byte	0
06977 17EE                        00            .byte	0
06978 17EF                        00            .byte	0
06979 17F0                        00            .byte	0
06980 17F1                        3C            .byte	$3C
06981 17F2                        66            .byte	$66
06982 17F3                        42            .byte	$42
06983 17F4                        42            .byte	$42
06984 17F5                        66            .byte	$66
06985 17F6                        3C            .byte	$3C
06986 17F7                        00            .byte	0
06987 17F8                        00            .byte	0
06988 17F9                        00            .byte	0
06989 17FA                        00            .byte	0
06990                                           ! 1155  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06991 17FB                        FF            .byte	$FF
06992 17FC                        FF            .byte	$FF
06993 17FD                        FF            .byte	$FF
06994 17FE                        FF            .byte	$FF
06995 17FF                        C3            .byte	$C3
06996 1800                        99            .byte	$99
06997 1801                        BD            .byte	$BD
06998 1802                        BD            .byte	$BD
06999 1803                        99            .byte	$99
07000 1804                        C3            .byte	$C3
07001 1805                        FF            .byte	$FF
07002 1806                        FF            .byte	$FF
07003 1807                        FF            .byte	$FF
07004 1808                        FF            .byte	$FF
07005                                           ! 1156  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07006 1809                        00            .byte	0
07007 180A                        00            .byte	0
07008 180B                        1E            .byte	$1E
07009 180C                        0E            .byte	$E
07010 180D                        1A            .byte	$1A
07011 180E                        32            .byte	$32
07012 180F                        78            .byte	$78
07013 1810                        CC            .byte	$CC
07014 1811                        CC            .byte	$CC
07015 1812                        CC            .byte	$CC
07016 1813                        78            .byte	$78
07017 1814                        00            .byte	0
07018 1815                        00            .byte	0
07019 1816                        00            .byte	0
07020                                           ! 1157  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
07021 1817                        00            .byte	0
07022 1818                        00            .byte	0
07023 1819                        3C            .byte	$3C
07024 181A                        66            .byte	$66
07025 181B                        66            .byte	$66
07026 181C                        66            .byte	$66
07027 181D                        3C            .byte	$3C
07028 181E                        18            .byte	$18
07029 181F                        7E            .byte	$7E
07030 1820                        18            .byte	$18
07031 1821                        18            .byte	$18
07032 1822                        00            .byte	0
07033 1823                        00            .byte	0
07034 1824                        00            .byte	0
07035                                           ! 1158  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07036 1825                        00            .byte	0
07037 1826                        00            .byte	0
07038 1827                        3F            .byte	$3F
07039 1828                        33            .byte	$33
07040 1829                        3F            .byte	$3F
07041 182A                        30            .byte	$30
07042 182B                        30            .byte	$30
07043 182C                        30            .byte	$30
07044 182D                        70            .byte	$70
07045 182E                        F0            .byte	$F0
07046 182F                        E0            .byte	$E0
07047 1830                        00            .byte	0
07048 1831                        00            .byte	0
07049 1832                        00            .byte	0
07050                                           ! 1159  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07051 1833                        00            .byte	0
07052 1834                        00            .byte	0
07053 1835                        7F            .byte	$7F
07054 1836                        63            .byte	$63
07055 1837                        7F            .byte	$7F
07056 1838                        63            .byte	$63
07057 1839                        63            .byte	$63
07058 183A                        63            .byte	$63
07059 183B                        67            .byte	$67
07060 183C                        E7            .byte	$E7
07061 183D                        E6            .byte	$E6
07062 183E                        C0            .byte	$C0
07063 183F                        00            .byte	0
07064 1840                        00            .byte	0
07065                                           ! 1160  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07066 1841                        00            .byte	0
07067 1842                        00            .byte	0
07068 1843                        18            .byte	$18
07069 1844                        18            .byte	$18
07070 1845                        DB            .byte	$DB
07071 1846                        3C            .byte	$3C
07072 1847                        E7            .byte	$E7
07073 1848                        3C            .byte	$3C
07074 1849                        DB            .byte	$DB
07075 184A                        18            .byte	$18
07076 184B                        18            .byte	$18
07077 184C                        00            .byte	0
07078 184D                        00            .byte	0
07079 184E                        00            .byte	0
07080                                           ! 1161  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07081 184F                        00            .byte	0
07082 1850                        00            .byte	0
07083 1851                        80            .byte	$80
07084 1852                        C0            .byte	$C0
07085 1853                        E0            .byte	$E0
07086 1854                        F8            .byte	$F8
07087 1855                        FE            .byte	$FE
07088 1856                        F8            .byte	$F8
07089 1857                        E0            .byte	$E0
07090 1858                        C0            .byte	$C0
07091 1859                        80            .byte	$80
07092 185A                        00            .byte	0
07093 185B                        00            .byte	0
07094 185C                        00            .byte	0
07095                                           ! 1162  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07096 185D                        00            .byte	0
07097 185E                        00            .byte	0
07098 185F                        02            .byte	2
07099 1860                        06            .byte	6
07100 1861                        0E            .byte	$E
07101 1862                        3E            .byte	$3E
07102 1863                        FE            .byte	$FE
07103 1864                        3E            .byte	$3E
07104 1865                        0E            .byte	$E
07105 1866                        06            .byte	6
07106 1867                        02            .byte	2
07107 1868                        00            .byte	0
07108 1869                        00            .byte	0
07109 186A                        00            .byte	0
07110                                           ! 1163  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07111 186B                        00            .byte	0
07112 186C                        00            .byte	0
07113 186D                        18            .byte	$18
07114 186E                        3C            .byte	$3C
07115 186F                        7E            .byte	$7E
07116 1870                        18            .byte	$18
07117 1871                        18            .byte	$18
07118 1872                        18            .byte	$18
07119 1873                        7E            .byte	$7E
07120 1874                        3C            .byte	$3C
07121 1875                        18            .byte	$18
07122 1876                        00            .byte	0
07123 1877                        00            .byte	0
07124 1878                        00            .byte	0
07125                                           ! 1164  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07126 1879                        00            .byte	0
07127 187A                        00            .byte	0
07128 187B                        66            .byte	$66
07129 187C                        66            .byte	$66
07130 187D                        66            .byte	$66
07131 187E                        66            .byte	$66
07132 187F                        66            .byte	$66
07133 1880                        66            .byte	$66
07134 1881                        00            .byte	0
07135 1882                        66            .byte	$66
07136 1883                        66            .byte	$66
07137 1884                        00            .byte	0
07138 1885                        00            .byte	0
07139 1886                        00            .byte	0
07140                                           ! 1165  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07141 1887                        00            .byte	0
07142 1888                        00            .byte	0
07143 1889                        7F            .byte	$7F
07144 188A                        DB            .byte	$DB
07145 188B                        DB            .byte	$DB
07146 188C                        DB            .byte	$DB
07147 188D                        7B            .byte	$7B
07148 188E                        1B            .byte	$1B
07149 188F                        1B            .byte	$1B
07150 1890                        1B            .byte	$1B
07151 1891                        1B            .byte	$1B
07152 1892                        00            .byte	0
07153 1893                        00            .byte	0
07154 1894                        00            .byte	0
07155                                           ! 1166  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07156 1895                        00            .byte	0
07157 1896                        7C            .byte	$7C
07158 1897                        C6            .byte	$C6
07159 1898                        60            .byte	$60
07160 1899                        38            .byte	$38
07161 189A                        6C            .byte	$6C
07162 189B                        C6            .byte	$C6
07163 189C                        C6            .byte	$C6
07164 189D                        6C            .byte	$6C
07165 189E                        38            .byte	$38
07166 189F                        0C            .byte	$C
07167 18A0                        C6            .byte	$C6
07168 18A1                        7C            .byte	$7C
07169 18A2                        00            .byte	0
07170                                           ! 1167  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07171 18A3                        00            .byte	0
07172 18A4                        00            .byte	0
07173 18A5                        00            .byte	0
07174 18A6                        00            .byte	0
07175 18A7                        00            .byte	0
07176 18A8                        00            .byte	0
07177 18A9                        00            .byte	0
07178 18AA                        00            .byte	0
07179 18AB                        FE            .byte	$FE
07180 18AC                        FE            .byte	$FE
07181 18AD                        FE            .byte	$FE
07182 18AE                        00            .byte	0
07183 18AF                        00            .byte	0
07184 18B0                        00            .byte	0
07185                                           ! 1168  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07186 18B1                        00            .byte	0
07187 18B2                        00            .byte	0
07188 18B3                        18            .byte	$18
07189 18B4                        3C            .byte	$3C
07190 18B5                        7E            .byte	$7E
07191 18B6                        18            .byte	$18
07192 18B7                        18            .byte	$18
07193 18B8                        18            .byte	$18
07194 18B9                        7E            .byte	$7E
07195 18BA                        3C            .byte	$3C
07196 18BB                        18            .byte	$18
07197 18BC                        7E            .byte	$7E
07198 18BD                        00            .byte	0
07199 18BE                        00            .byte	0
07200                                           ! 1169  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07201 18BF                        00            .byte	0
07202 18C0                        00            .byte	0
07203 18C1                        18            .byte	$18
07204 18C2                        3C            .byte	$3C
07205 18C3                        7E            .byte	$7E
07206 18C4                        18            .byte	$18
07207 18C5                        18            .byte	$18
07208 18C6                        18            .byte	$18
07209 18C7                        18            .byte	$18
07210 18C8                        18            .byte	$18
07211 18C9                        18            .byte	$18
07212 18CA                        00            .byte	0
07213 18CB                        00            .byte	0
07214 18CC                        00            .byte	0
07215                                           ! 1170  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07216 18CD                        00            .byte	0
07217 18CE                        00            .byte	0
07218 18CF                        18            .byte	$18
07219 18D0                        18            .byte	$18
07220 18D1                        18            .byte	$18
07221 18D2                        18            .byte	$18
07222 18D3                        18            .byte	$18
07223 18D4                        18            .byte	$18
07224 18D5                        7E            .byte	$7E
07225 18D6                        3C            .byte	$3C
07226 18D7                        18            .byte	$18
07227 18D8                        00            .byte	0
07228 18D9                        00            .byte	0
07229 18DA                        00            .byte	0
07230                                           ! 1171  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07231 18DB                        00            .byte	0
07232 18DC                        00            .byte	0
07233 18DD                        00            .byte	0
07234 18DE                        00            .byte	0
07235 18DF                        18            .byte	$18
07236 18E0                        0C            .byte	$C
07237 18E1                        FE            .byte	$FE
07238 18E2                        0C            .byte	$C
07239 18E3                        18            .byte	$18
07240 18E4                        00            .byte	0
07241 18E5                        00            .byte	0
07242 18E6                        00            .byte	0
07243 18E7                        00            .byte	0
07244 18E8                        00            .byte	0
07245                                           ! 1172  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07246 18E9                        00            .byte	0
07247 18EA                        00            .byte	0
07248 18EB                        00            .byte	0
07249 18EC                        00            .byte	0
07250 18ED                        30            .byte	$30
07251 18EE                        60            .byte	$60
07252 18EF                        FE            .byte	$FE
07253 18F0                        60            .byte	$60
07254 18F1                        30            .byte	$30
07255 18F2                        00            .byte	0
07256 18F3                        00            .byte	0
07257 18F4                        00            .byte	0
07258 18F5                        00            .byte	0
07259 18F6                        00            .byte	0
07260                                           ! 1173  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x
07261 18F7                        00            .byte	0
07262 18F8                        00            .byte	0
07263 18F9                        00            .byte	0
07264 18FA                        00            .byte	0
07265 18FB                        00            .byte	0
07266 18FC                        C0            .byte	$C0
07267 18FD                        C0            .byte	$C0
07268 18FE                        C0            .byte	$C0
07269 18FF                        FE            .byte	$FE
07270                                           ! 1173 00, 0x00, 0x00, 0x00, 0x00,
07271 1900                        00            .byte	0
07272 1901                        00            .byte	0
07273 1902                        00            .byte	0
07274 1903                        00            .byte	0
07275 1904                        00            .byte	0
07276                                           ! 1174  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
07277 1905                        00            .byte	0
07278 1906                        00            .byte	0
07279 1907                        00            .byte	0
07280 1908                        00            .byte	0
07281 1909                        28            .byte	$28
07282 190A                        6C            .byte	$6C
07283 190B                        FE            .byte	$FE
07284 190C                        6C            .byte	$6C
07285 190D                        28            .byte	$28
07286 190E                        00            .byte	0
07287 190F                        00            .byte	0
07288 1910                        00            .byte	0
07289 1911                        00            .byte	0
07290 1912                        00            .byte	0
07291                                           ! 1175  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07292 1913                        00            .byte	0
07293 1914                        00            .byte	0
07294 1915                        00            .byte	0
07295 1916                        10            .byte	$10
07296 1917                        38            .byte	$38
07297 1918                        38            .byte	$38
07298 1919                        7C            .byte	$7C
07299 191A                        7C            .byte	$7C
07300 191B                        FE            .byte	$FE
07301 191C                        FE            .byte	$FE
07302 191D                        00            .byte	0
07303 191E                        00            .byte	0
07304 191F                        00            .byte	0
07305 1920                        00            .byte	0
07306                                           ! 1176  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07307 1921                        00            .byte	0
07308 1922                        00            .byte	0
07309 1923                        00            .byte	0
07310 1924                        FE            .byte	$FE
07311 1925                        FE            .byte	$FE
07312 1926                        7C            .byte	$7C
07313 1927                        7C            .byte	$7C
07314 1928                        38            .byte	$38
07315 1929                        38            .byte	$38
07316 192A                        10            .byte	$10
07317 192B                        00            .byte	0
07318 192C                        00            .byte	0
07319 192D                        00            .byte	0
07320 192E                        00            .byte	0
07321                                           ! 1177  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07322 192F                        00            .byte	0
07323 1930                        00            .byte	0
07324 1931                        00            .byte	0
07325 1932                        00            .byte	0
07326 1933                        00            .byte	0
07327 1934                        00            .byte	0
07328 1935                        00            .byte	0
07329 1936                        00            .byte	0
07330 1937                        00            .byte	0
07331 1938                        00            .byte	0
07332 1939                        00            .byte	0
07333 193A                        00            .byte	0
07334 193B                        00            .byte	0
07335 193C                        00            .byte	0
07336                                           ! 1178  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07337 193D                        00            .byte	0
07338 193E                        00            .byte	0
07339 193F                        18            .byte	$18
07340 1940                        3C            .byte	$3C
07341 1941                        3C            .byte	$3C
07342 1942                        3C            .byte	$3C
07343 1943                        18            .byte	$18
07344 1944                        18            .byte	$18
07345 1945                        00            .byte	0
07346 1946                        18            .byte	$18
07347 1947                        18            .byte	$18
07348 1948                        00            .byte	0
07349 1949                        00            .byte	0
07350 194A                        00            .byte	0
07351                                           ! 1179  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07352 194B                        00            .byte	0
07353 194C                        66            .byte	$66
07354 194D                        66            .byte	$66
07355 194E                        66            .byte	$66
07356 194F                        24            .byte	$24
07357 1950                        00            .byte	0
07358 1951                        00            .byte	0
07359 1952                        00            .byte	0
07360 1953                        00            .byte	0
07361 1954                        00            .byte	0
07362 1955                        00            .byte	0
07363 1956                        00            .byte	0
07364 1957                        00            .byte	0
07365 1958                        00            .byte	0
07366                                           ! 1180  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07367 1959                        00            .byte	0
07368 195A                        00            .byte	0
07369 195B                        6C            .byte	$6C
07370 195C                        6C            .byte	$6C
07371 195D                        FE            .byte	$FE
07372 195E                        6C            .byte	$6C
07373 195F                        6C            .byte	$6C
07374 1960                        6C            .byte	$6C
07375 1961                        FE            .byte	$FE
07376 1962                        6C            .byte	$6C
07377 1963                        6C            .byte	$6C
07378 1964                        00            .byte	0
07379 1965                        00            .byte	0
07380 1966                        00            .byte	0
07381                                           ! 1181  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07382 1967                        18            .byte	$18
07383 1968                        18            .byte	$18
07384 1969                        7C            .byte	$7C
07385 196A                        C6            .byte	$C6
07386 196B                        C2            .byte	$C2
07387 196C                        C0            .byte	$C0
07388 196D                        7C            .byte	$7C
07389 196E                        06            .byte	6
07390 196F                        86            .byte	$86
07391 1970                        C6            .byte	$C6
07392 1971                        7C            .byte	$7C
07393 1972                        18            .byte	$18
07394 1973                        18            .byte	$18
07395 1974                        00            .byte	0
07396                                           ! 1182  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07397 1975                        00            .byte	0
07398 1976                        00            .byte	0
07399 1977                        00            .byte	0
07400 1978                        00            .byte	0
07401 1979                        C2            .byte	$C2
07402 197A                        C6            .byte	$C6
07403 197B                        0C            .byte	$C
07404 197C                        18            .byte	$18
07405 197D                        30            .byte	$30
07406 197E                        66            .byte	$66
07407 197F                        C6            .byte	$C6
07408 1980                        00            .byte	0
07409 1981                        00            .byte	0
07410 1982                        00            .byte	0
07411                                           ! 1183  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07412 1983                        00            .byte	0
07413 1984                        00            .byte	0
07414 1985                        38            .byte	$38
07415 1986                        6C            .byte	$6C
07416 1987                        6C            .byte	$6C
07417 1988                        38            .byte	$38
07418 1989                        76            .byte	$76
07419 198A                        DC            .byte	$DC
07420 198B                        CC            .byte	$CC
07421 198C                        CC            .byte	$CC
07422 198D                        76            .byte	$76
07423 198E                        00            .byte	0
07424 198F                        00            .byte	0
07425 1990                        00            .byte	0
07426                                           ! 1184  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07427 1991                        00            .byte	0
07428 1992                        30            .byte	$30
07429 1993                        30            .byte	$30
07430 1994                        30            .byte	$30
07431 1995                        60            .byte	$60
07432 1996                        00            .byte	0
07433 1997                        00            .byte	0
07434 1998                        00            .byte	0
07435 1999                        00            .byte	0
07436 199A                        00            .byte	0
07437 199B                        00            .byte	0
07438 199C                        00            .byte	0
07439 199D                        00            .byte	0
07440 199E                        00            .byte	0
07441                                           ! 1185  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07442 199F                        00            .byte	0
07443 19A0                        00            .byte	0
07444 19A1                        0C            .byte	$C
07445 19A2                        18            .byte	$18
07446 19A3                        30            .byte	$30
07447 19A4                        30            .byte	$30
07448 19A5                        30            .byte	$30
07449 19A6                        30            .byte	$30
07450 19A7                        30            .byte	$30
07451 19A8                        18            .byte	$18
07452 19A9                        0C            .byte	$C
07453 19AA                        00            .byte	0
07454 19AB                        00            .byte	0
07455 19AC                        00            .byte	0
07456                                           ! 1186  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07457 19AD                        00            .byte	0
07458 19AE                        00            .byte	0
07459 19AF                        30            .byte	$30
07460 19B0                        18            .byte	$18
07461 19B1                        0C            .byte	$C
07462 19B2                        0C            .byte	$C
07463 19B3                        0C            .byte	$C
07464 19B4                        0C            .byte	$C
07465 19B5                        0C            .byte	$C
07466 19B6                        18            .byte	$18
07467 19B7                        30            .byte	$30
07468 19B8                        00            .byte	0
07469 19B9                        00            .byte	0
07470 19BA                        00            .byte	0
07471                                           ! 1187  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07472 19BB                        00            .byte	0
07473 19BC                        00            .byte	0
07474 19BD                        00            .byte	0
07475 19BE                        00            .byte	0
07476 19BF                        66            .byte	$66
07477 19C0                        3C            .byte	$3C
07478 19C1                        FF            .byte	$FF
07479 19C2                        3C            .byte	$3C
07480 19C3                        66            .byte	$66
07481 19C4                        00            .byte	0
07482 19C5                        00            .byte	0
07483 19C6                        00            .byte	0
07484 19C7                        00            .byte	0
07485 19C8                        00            .byte	0
07486                                           ! 1188  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07487 19C9                        00            .byte	0
07488 19CA                        00            .byte	0
07489 19CB                        00            .byte	0
07490 19CC                        00            .byte	0
07491 19CD                        18            .byte	$18
07492 19CE                        18            .byte	$18
07493 19CF                        7E            .byte	$7E
07494 19D0                        18            .byte	$18
07495 19D1                        18            .byte	$18
07496 19D2                        00            .byte	0
07497 19D3                        00            .byte	0
07498 19D4                        00            .byte	0
07499 19D5                        00            .byte	0
07500 19D6                        00            .byte	0
07501                                           ! 1189  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07502 19D7                        00            .byte	0
07503 19D8                        00            .byte	0
07504 19D9                        00            .byte	0
07505 19DA                        00            .byte	0
07506 19DB                        00            .byte	0
07507 19DC                        00            .byte	0
07508 19DD                        00            .byte	0
07509 19DE                        00            .byte	0
07510 19DF                        18            .byte	$18
07511 19E0                        18            .byte	$18
07512 19E1                        18            .byte	$18
07513 19E2                        30            .byte	$30
07514 19E3                        00            .byte	0
07515 19E4                        00            .byte	0
07516                                           ! 1190  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07517 19E5                        00            .byte	0
07518 19E6                        00            .byte	0
07519 19E7                        00            .byte	0
07520 19E8                        00            .byte	0
07521 19E9                        00            .byte	0
07522 19EA                        00            .byte	0
07523 19EB                        FE            .byte	$FE
07524 19EC                        00            .byte	0
07525 19ED                        00            .byte	0
07526 19EE                        00            .byte	0
07527 19EF                        00            .byte	0
07528 19F0                        00            .byte	0
07529 19F1                        00            .byte	0
07530 19F2                        00            .byte	0
07531                                           ! 1191  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07532 19F3                        00            .byte	0
07533 19F4                        00            .byte	0
07534 19F5                        00            .byte	0
07535 19F6                        00            .byte	0
07536 19F7                        00            .byte	0
07537 19F8                        00            .byte	0
07538 19F9                        00            .byte	0
07539 19FA                        00            .byte	0
07540 19FB                        00            .byte	0
07541 19FC                        18            .byte	$18
07542 19FD                        18            .byte	$18
07543 19FE                        00            .byte	0
07544 19FF                        00            .byte	0
07545 1A00                        00            .byte	0
07546                                           ! 1192  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07547 1A01                        00            .byte	0
07548 1A02                        00            .byte	0
07549 1A03                        02            .byte	2
07550 1A04                        06            .byte	6
07551 1A05                        0C            .byte	$C
07552 1A06                        18            .byte	$18
07553 1A07                        30            .byte	$30
07554 1A08                        60            .byte	$60
07555 1A09                        C0            .byte	$C0
07556 1A0A                        80            .byte	$80
07557 1A0B                        00            .byte	0
07558 1A0C                        00            .byte	0
07559 1A0D                        00            .byte	0
07560 1A0E                        00            .byte	0
07561                                           ! 1193  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07562 1A0F                        00            .byte	0
07563 1A10                        00            .byte	0
07564 1A11                        7C            .byte	$7C
07565 1A12                        C6            .byte	$C6
07566 1A13                        CE            .byte	$CE
07567 1A14                        DE            .byte	$DE
07568 1A15                        F6            .byte	$F6
07569 1A16                        E6            .byte	$E6
07570 1A17                        C6            .byte	$C6
07571 1A18                        C6            .byte	$C6
07572 1A19                        7C            .byte	$7C
07573 1A1A                        00            .byte	0
07574 1A1B                        00            .byte	0
07575 1A1C                        00            .byte	0
07576                                           ! 1194  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07577 1A1D                        00            .byte	0
07578 1A1E                        00            .byte	0
07579 1A1F                        18            .byte	$18
07580 1A20                        38            .byte	$38
07581 1A21                        78            .byte	$78
07582 1A22                        18            .byte	$18
07583 1A23                        18            .byte	$18
07584 1A24                        18            .byte	$18
07585 1A25                        18            .byte	$18
07586 1A26                        18            .byte	$18
07587 1A27                        7E            .byte	$7E
07588 1A28                        00            .byte	0
07589 1A29                        00            .byte	0
07590 1A2A                        00            .byte	0
07591                                           ! 1195  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07592 1A2B                        00            .byte	0
07593 1A2C                        00            .byte	0
07594 1A2D                        7C            .byte	$7C
07595 1A2E                        C6            .byte	$C6
07596 1A2F                        06            .byte	6
07597 1A30                        0C            .byte	$C
07598 1A31                        18            .byte	$18
07599 1A32                        30            .byte	$30
07600 1A33                        60            .byte	$60
07601 1A34                        C6            .byte	$C6
07602 1A35                        FE            .byte	$FE
07603 1A36                        00            .byte	0
07604 1A37                        00            .byte	0
07605 1A38                        00            .byte	0
07606                                           ! 1196  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07607 1A39                        00            .byte	0
07608 1A3A                        00            .byte	0
07609 1A3B                        7C            .byte	$7C
07610 1A3C                        C6            .byte	$C6
07611 1A3D                        06            .byte	6
07612 1A3E                        06            .byte	6
07613 1A3F                        3C            .byte	$3C
07614 1A40                        06            .byte	6
07615 1A41                        06            .byte	6
07616 1A42                        C6            .byte	$C6
07617 1A43                        7C            .byte	$7C
07618 1A44                        00            .byte	0
07619 1A45                        00            .byte	0
07620 1A46                        00            .byte	0
07621                                           ! 1197  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e
07622 1A47                        00            .byte	0
07623 1A48                        00            .byte	0
07624 1A49                        0C            .byte	$C
07625 1A4A                        1C            .byte	$1C
07626 1A4B                        3C            .byte	$3C
07627 1A4C                        6C            .byte	$6C
07628 1A4D                        CC            .byte	$CC
07629 1A4E                        FE            .byte	$FE
07630 1A4F                        0C            .byte	$C
07631 1A50                        0C            .byte	$C
07632                                           ! 1197 , 0x00, 0x00, 0x00,
07633 1A51                        1E            .byte	$1E
07634 1A52                        00            .byte	0
07635 1A53                        00            .byte	0
07636 1A54                        00            .byte	0
07637                                           ! 1198  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07638 1A55                        00            .byte	0
07639 1A56                        00            .byte	0
07640 1A57                        FE            .byte	$FE
07641 1A58                        C0            .byte	$C0
07642 1A59                        C0            .byte	$C0
07643 1A5A                        C0            .byte	$C0
07644 1A5B                        FC            .byte	$FC
07645 1A5C                        06            .byte	6
07646 1A5D                        06            .byte	6
07647 1A5E                        C6            .byte	$C6
07648 1A5F                        7C            .byte	$7C
07649 1A60                        00            .byte	0
07650 1A61                        00            .byte	0
07651 1A62                        00            .byte	0
07652                                           ! 1199  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07653 1A63                        00            .byte	0
07654 1A64                        00            .byte	0
07655 1A65                        38            .byte	$38
07656 1A66                        60            .byte	$60
07657 1A67                        C0            .byte	$C0
07658 1A68                        C0            .byte	$C0
07659 1A69                        FC            .byte	$FC
07660 1A6A                        C6            .byte	$C6
07661 1A6B                        C6            .byte	$C6
07662 1A6C                        C6            .byte	$C6
07663 1A6D                        7C            .byte	$7C
07664 1A6E                        00            .byte	0
07665 1A6F                        00            .byte	0
07666 1A70                        00            .byte	0
07667                                           ! 1200  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07668 1A71                        00            .byte	0
07669 1A72                        00            .byte	0
07670 1A73                        FE            .byte	$FE
07671 1A74                        C6            .byte	$C6
07672 1A75                        06            .byte	6
07673 1A76                        0C            .byte	$C
07674 1A77                        18            .byte	$18
07675 1A78                        30            .byte	$30
07676 1A79                        30            .byte	$30
07677 1A7A                        30            .byte	$30
07678 1A7B                        30            .byte	$30
07679 1A7C                        00            .byte	0
07680 1A7D                        00            .byte	0
07681 1A7E                        00            .byte	0
07682                                           ! 1201  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07683 1A7F                        00            .byte	0
07684 1A80                        00            .byte	0
07685 1A81                        7C            .byte	$7C
07686 1A82                        C6            .byte	$C6
07687 1A83                        C6            .byte	$C6
07688 1A84                        C6            .byte	$C6
07689 1A85                        7C            .byte	$7C
07690 1A86                        C6            .byte	$C6
07691 1A87                        C6            .byte	$C6
07692 1A88                        C6            .byte	$C6
07693 1A89                        7C            .byte	$7C
07694 1A8A                        00            .byte	0
07695 1A8B                        00            .byte	0
07696 1A8C                        00            .byte	0
07697                                           ! 1202  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07698 1A8D                        00            .byte	0
07699 1A8E                        00            .byte	0
07700 1A8F                        7C            .byte	$7C
07701 1A90                        C6            .byte	$C6
07702 1A91                        C6            .byte	$C6
07703 1A92                        C6            .byte	$C6
07704 1A93                        7E            .byte	$7E
07705 1A94                        06            .byte	6
07706 1A95                        06            .byte	6
07707 1A96                        0C            .byte	$C
07708 1A97                        78            .byte	$78
07709 1A98                        00            .byte	0
07710 1A99                        00            .byte	0
07711 1A9A                        00            .byte	0
07712                                           ! 1203  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07713 1A9B                        00            .byte	0
07714 1A9C                        00            .byte	0
07715 1A9D                        00            .byte	0
07716 1A9E                        18            .byte	$18
07717 1A9F                        18            .byte	$18
07718 1AA0                        00            .byte	0
07719 1AA1                        00            .byte	0
07720 1AA2                        00            .byte	0
07721 1AA3                        18            .byte	$18
07722 1AA4                        18            .byte	$18
07723 1AA5                        00            .byte	0
07724 1AA6                        00            .byte	0
07725 1AA7                        00            .byte	0
07726 1AA8                        00            .byte	0
07727                                           ! 1204  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07728 1AA9                        00            .byte	0
07729 1AAA                        00            .byte	0
07730 1AAB                        00            .byte	0
07731 1AAC                        18            .byte	$18
07732 1AAD                        18            .byte	$18
07733 1AAE                        00            .byte	0
07734 1AAF                        00            .byte	0
07735 1AB0                        00            .byte	0
07736 1AB1                        18            .byte	$18
07737 1AB2                        18            .byte	$18
07738 1AB3                        30            .byte	$30
07739 1AB4                        00            .byte	0
07740 1AB5                        00            .byte	0
07741 1AB6                        00            .byte	0
07742                                           ! 1205  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07743 1AB7                        00            .byte	0
07744 1AB8                        00            .byte	0
07745 1AB9                        06            .byte	6
07746 1ABA                        0C            .byte	$C
07747 1ABB                        18            .byte	$18
07748 1ABC                        30            .byte	$30
07749 1ABD                        60            .byte	$60
07750 1ABE                        30            .byte	$30
07751 1ABF                        18            .byte	$18
07752 1AC0                        0C            .byte	$C
07753 1AC1                        06            .byte	6
07754 1AC2                        00            .byte	0
07755 1AC3                        00            .byte	0
07756 1AC4                        00            .byte	0
07757                                           ! 1206  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07758 1AC5                        00            .byte	0
07759 1AC6                        00            .byte	0
07760 1AC7                        00            .byte	0
07761 1AC8                        00            .byte	0
07762 1AC9                        00            .byte	0
07763 1ACA                        7E            .byte	$7E
07764 1ACB                        00            .byte	0
07765 1ACC                        00            .byte	0
07766 1ACD                        7E            .byte	$7E
07767 1ACE                        00            .byte	0
07768 1ACF                        00            .byte	0
07769 1AD0                        00            .byte	0
07770 1AD1                        00            .byte	0
07771 1AD2                        00            .byte	0
07772                                           ! 1207  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07773 1AD3                        00            .byte	0
07774 1AD4                        00            .byte	0
07775 1AD5                        60            .byte	$60
07776 1AD6                        30            .byte	$30
07777 1AD7                        18            .byte	$18
07778 1AD8                        0C            .byte	$C
07779 1AD9                        06            .byte	6
07780 1ADA                        0C            .byte	$C
07781 1ADB                        18            .byte	$18
07782 1ADC                        30            .byte	$30
07783 1ADD                        60            .byte	$60
07784 1ADE                        00            .byte	0
07785 1ADF                        00            .byte	0
07786 1AE0                        00            .byte	0
07787                                           ! 1208  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07788 1AE1                        00            .byte	0
07789 1AE2                        00            .byte	0
07790 1AE3                        7C            .byte	$7C
07791 1AE4                        C6            .byte	$C6
07792 1AE5                        C6            .byte	$C6
07793 1AE6                        0C            .byte	$C
07794 1AE7                        18            .byte	$18
07795 1AE8                        18            .byte	$18
07796 1AE9                        00            .byte	0
07797 1AEA                        18            .byte	$18
07798 1AEB                        18            .byte	$18
07799 1AEC                        00            .byte	0
07800 1AED                        00            .byte	0
07801 1AEE                        00            .byte	0
07802                                           ! 1209  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07803 1AEF                        00            .byte	0
07804 1AF0                        00            .byte	0
07805 1AF1                        7C            .byte	$7C
07806 1AF2                        C6            .byte	$C6
07807 1AF3                        C6            .byte	$C6
07808 1AF4                        DE            .byte	$DE
07809 1AF5                        DE            .byte	$DE
07810 1AF6                        DE            .byte	$DE
07811 1AF7                        DC            .byte	$DC
07812 1AF8                        C0            .byte	$C0
07813 1AF9                        7C            .byte	$7C
07814 1AFA                        00            .byte	0
07815 1AFB                        00            .byte	0
07816 1AFC                        00            .byte	0
07817                                           ! 1210  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07818 1AFD                        00            .byte	0
07819 1AFE                        00            .byte	0
07820 1AFF                        10            .byte	$10
07821 1B00                        38            .byte	$38
07822 1B01                        6C            .byte	$6C
07823 1B02                        C6            .byte	$C6
07824 1B03                        C6            .byte	$C6
07825 1B04                        FE            .byte	$FE
07826 1B05                        C6            .byte	$C6
07827 1B06                        C6            .byte	$C6
07828 1B07                        C6            .byte	$C6
07829 1B08                        00            .byte	0
07830 1B09                        00            .byte	0
07831 1B0A                        00            .byte	0
07832                                           ! 1211  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07833 1B0B                        00            .byte	0
07834 1B0C                        00            .byte	0
07835 1B0D                        FC            .byte	$FC
07836 1B0E                        66            .byte	$66
07837 1B0F                        66            .byte	$66
07838 1B10                        66            .byte	$66
07839 1B11                        7C            .byte	$7C
07840 1B12                        66            .byte	$66
07841 1B13                        66            .byte	$66
07842 1B14                        66            .byte	$66
07843 1B15                        FC            .byte	$FC
07844 1B16                        00            .byte	0
07845 1B17                        00            .byte	0
07846 1B18                        00            .byte	0
07847                                           ! 1212  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07848 1B19                        00            .byte	0
07849 1B1A                        00            .byte	0
07850 1B1B                        3C            .byte	$3C
07851 1B1C                        66            .byte	$66
07852 1B1D                        C2            .byte	$C2
07853 1B1E                        C0            .byte	$C0
07854 1B1F                        C0            .byte	$C0
07855 1B20                        C0            .byte	$C0
07856 1B21                        C2            .byte	$C2
07857 1B22                        66            .byte	$66
07858 1B23                        3C            .byte	$3C
07859 1B24                        00            .byte	0
07860 1B25                        00            .byte	0
07861 1B26                        00            .byte	0
07862                                           ! 1213  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07863 1B27                        00            .byte	0
07864 1B28                        00            .byte	0
07865 1B29                        F8            .byte	$F8
07866 1B2A                        6C            .byte	$6C
07867 1B2B                        66            .byte	$66
07868 1B2C                        66            .byte	$66
07869 1B2D                        66            .byte	$66
07870 1B2E                        66            .byte	$66
07871 1B2F                        66            .byte	$66
07872 1B30                        6C            .byte	$6C
07873 1B31                        F8            .byte	$F8
07874 1B32                        00            .byte	0
07875 1B33                        00            .byte	0
07876 1B34                        00            .byte	0
07877                                           ! 1214  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07878 1B35                        00            .byte	0
07879 1B36                        00            .byte	0
07880 1B37                        FE            .byte	$FE
07881 1B38                        66            .byte	$66
07882 1B39                        62            .byte	$62
07883 1B3A                        68            .byte	$68
07884 1B3B                        78            .byte	$78
07885 1B3C                        68            .byte	$68
07886 1B3D                        62            .byte	$62
07887 1B3E                        66            .byte	$66
07888 1B3F                        FE            .byte	$FE
07889 1B40                        00            .byte	0
07890 1B41                        00            .byte	0
07891 1B42                        00            .byte	0
07892                                           ! 1215  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07893 1B43                        00            .byte	0
07894 1B44                        00            .byte	0
07895 1B45                        FE            .byte	$FE
07896 1B46                        66            .byte	$66
07897 1B47                        62            .byte	$62
07898 1B48                        68            .byte	$68
07899 1B49                        78            .byte	$78
07900 1B4A                        68            .byte	$68
07901 1B4B                        60            .byte	$60
07902 1B4C                        60            .byte	$60
07903 1B4D                        F0            .byte	$F0
07904 1B4E                        00            .byte	0
07905 1B4F                        00            .byte	0
07906 1B50                        00            .byte	0
07907                                           ! 1216  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07908 1B51                        00            .byte	0
07909 1B52                        00            .byte	0
07910 1B53                        3C            .byte	$3C
07911 1B54                        66            .byte	$66
07912 1B55                        C2            .byte	$C2
07913 1B56                        C0            .byte	$C0
07914 1B57                        C0            .byte	$C0
07915 1B58                        DE            .byte	$DE
07916 1B59                        C6            .byte	$C6
07917 1B5A                        66            .byte	$66
07918 1B5B                        3A            .byte	$3A
07919 1B5C                        00            .byte	0
07920 1B5D                        00            .byte	0
07921 1B5E                        00            .byte	0
07922                                           ! 1217  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07923 1B5F                        00            .byte	0
07924 1B60                        00            .byte	0
07925 1B61                        C6            .byte	$C6
07926 1B62                        C6            .byte	$C6
07927 1B63                        C6            .byte	$C6
07928 1B64                        C6            .byte	$C6
07929 1B65                        FE            .byte	$FE
07930 1B66                        C6            .byte	$C6
07931 1B67                        C6            .byte	$C6
07932 1B68                        C6            .byte	$C6
07933 1B69                        C6            .byte	$C6
07934 1B6A                        00            .byte	0
07935 1B6B                        00            .byte	0
07936 1B6C                        00            .byte	0
07937                                           ! 1218  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07938 1B6D                        00            .byte	0
07939 1B6E                        00            .byte	0
07940 1B6F                        3C            .byte	$3C
07941 1B70                        18            .byte	$18
07942 1B71                        18            .byte	$18
07943 1B72                        18            .byte	$18
07944 1B73                        18            .byte	$18
07945 1B74                        18            .byte	$18
07946 1B75                        18            .byte	$18
07947 1B76                        18            .byte	$18
07948 1B77                        3C            .byte	$3C
07949 1B78                        00            .byte	0
07950 1B79                        00            .byte	0
07951 1B7A                        00            .byte	0
07952                                           ! 1219  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07953 1B7B                        00            .byte	0
07954 1B7C                        00            .byte	0
07955 1B7D                        1E            .byte	$1E
07956 1B7E                        0C            .byte	$C
07957 1B7F                        0C            .byte	$C
07958 1B80                        0C            .byte	$C
07959 1B81                        0C            .byte	$C
07960 1B82                        0C            .byte	$C
07961 1B83                        CC            .byte	$CC
07962 1B84                        CC            .byte	$CC
07963 1B85                        78            .byte	$78
07964 1B86                        00            .byte	0
07965 1B87                        00            .byte	0
07966 1B88                        00            .byte	0
07967                                           ! 1220  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07968 1B89                        00            .byte	0
07969 1B8A                        00            .byte	0
07970 1B8B                        E6            .byte	$E6
07971 1B8C                        66            .byte	$66
07972 1B8D                        6C            .byte	$6C
07973 1B8E                        6C            .byte	$6C
07974 1B8F                        78            .byte	$78
07975 1B90                        6C            .byte	$6C
07976 1B91                        6C            .byte	$6C
07977 1B92                        66            .byte	$66
07978 1B93                        E6            .byte	$E6
07979 1B94                        00            .byte	0
07980 1B95                        00            .byte	0
07981 1B96                        00            .byte	0
07982                                           ! 1221  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 
07983 1B97                        00            .byte	0
07984 1B98                        00            .byte	0
07985 1B99                        F0            .byte	$F0
07986 1B9A                        60            .byte	$60
07987 1B9B                        60            .byte	$60
07988 1B9C                        60            .byte	$60
07989 1B9D                        60            .byte	$60
07990 1B9E                        60            .byte	$60
07991 1B9F                        62            .byte	$62
07992 1BA0                        66            .byte	$66
07993 1BA1                        FE            .byte	$FE
07994 1BA2                        00            .byte	0
07995                                           ! 1221 0x00, 0x00,
07996 1BA3                        00            .byte	0
07997 1BA4                        00            .byte	0
07998                                           ! 1222  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07999 1BA5                        00            .byte	0
08000 1BA6                        00            .byte	0
08001 1BA7                        C6            .byte	$C6
08002 1BA8                        EE            .byte	$EE
08003 1BA9                        FE            .byte	$FE
08004 1BAA                        FE            .byte	$FE
08005 1BAB                        D6            .byte	$D6
08006 1BAC                        C6            .byte	$C6
08007 1BAD                        C6            .byte	$C6
08008 1BAE                        C6            .byte	$C6
08009 1BAF                        C6            .byte	$C6
08010 1BB0                        00            .byte	0
08011 1BB1                        00            .byte	0
08012 1BB2                        00            .byte	0
08013                                           ! 1223  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08014 1BB3                        00            .byte	0
08015 1BB4                        00            .byte	0
08016 1BB5                        C6            .byte	$C6
08017 1BB6                        E6            .byte	$E6
08018 1BB7                        F6            .byte	$F6
08019 1BB8                        FE            .byte	$FE
08020 1BB9                        DE            .byte	$DE
08021 1BBA                        CE            .byte	$CE
08022 1BBB                        C6            .byte	$C6
08023 1BBC                        C6            .byte	$C6
08024 1BBD                        C6            .byte	$C6
08025 1BBE                        00            .byte	0
08026 1BBF                        00            .byte	0
08027 1BC0                        00            .byte	0
08028                                           ! 1224  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08029 1BC1                        00            .byte	0
08030 1BC2                        00            .byte	0
08031 1BC3                        38            .byte	$38
08032 1BC4                        6C            .byte	$6C
08033 1BC5                        C6            .byte	$C6
08034 1BC6                        C6            .byte	$C6
08035 1BC7                        C6            .byte	$C6
08036 1BC8                        C6            .byte	$C6
08037 1BC9                        C6            .byte	$C6
08038 1BCA                        6C            .byte	$6C
08039 1BCB                        38            .byte	$38
08040 1BCC                        00            .byte	0
08041 1BCD                        00            .byte	0
08042 1BCE                        00            .byte	0
08043                                           ! 1225  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08044 1BCF                        00            .byte	0
08045 1BD0                        00            .byte	0
08046 1BD1                        FC            .byte	$FC
08047 1BD2                        66            .byte	$66
08048 1BD3                        66            .byte	$66
08049 1BD4                        66            .byte	$66
08050 1BD5                        7C            .byte	$7C
08051 1BD6                        60            .byte	$60
08052 1BD7                        60            .byte	$60
08053 1BD8                        60            .byte	$60
08054 1BD9                        F0            .byte	$F0
08055 1BDA                        00            .byte	0
08056 1BDB                        00            .byte	0
08057 1BDC                        00            .byte	0
08058                                           ! 1226  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08059 1BDD                        00            .byte	0
08060 1BDE                        00            .byte	0
08061 1BDF                        7C            .byte	$7C
08062 1BE0                        C6            .byte	$C6
08063 1BE1                        C6            .byte	$C6
08064 1BE2                        C6            .byte	$C6
08065 1BE3                        C6            .byte	$C6
08066 1BE4                        D6            .byte	$D6
08067 1BE5                        DE            .byte	$DE
08068 1BE6                        7C            .byte	$7C
08069 1BE7                        0C            .byte	$C
08070 1BE8                        0E            .byte	$E
08071 1BE9                        00            .byte	0
08072 1BEA                        00            .byte	0
08073                                           ! 1227  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08074 1BEB                        00            .byte	0
08075 1BEC                        00            .byte	0
08076 1BED                        FC            .byte	$FC
08077 1BEE                        66            .byte	$66
08078 1BEF                        66            .byte	$66
08079 1BF0                        66            .byte	$66
08080 1BF1                        7C            .byte	$7C
08081 1BF2                        6C            .byte	$6C
08082 1BF3                        66            .byte	$66
08083 1BF4                        66            .byte	$66
08084 1BF5                        E6            .byte	$E6
08085 1BF6                        00            .byte	0
08086 1BF7                        00            .byte	0
08087 1BF8                        00            .byte	0
08088                                           ! 1228  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08089 1BF9                        00            .byte	0
08090 1BFA                        00            .byte	0
08091 1BFB                        7C            .byte	$7C
08092 1BFC                        C6            .byte	$C6
08093 1BFD                        C6            .byte	$C6
08094 1BFE                        60            .byte	$60
08095 1BFF                        38            .byte	$38
08096 1C00                        0C            .byte	$C
08097 1C01                        C6            .byte	$C6
08098 1C02                        C6            .byte	$C6
08099 1C03                        7C            .byte	$7C
08100 1C04                        00            .byte	0
08101 1C05                        00            .byte	0
08102 1C06                        00            .byte	0
08103                                           ! 1229  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08104 1C07                        00            .byte	0
08105 1C08                        00            .byte	0
08106 1C09                        7E            .byte	$7E
08107 1C0A                        7E            .byte	$7E
08108 1C0B                        5A            .byte	$5A
08109 1C0C                        18            .byte	$18
08110 1C0D                        18            .byte	$18
08111 1C0E                        18            .byte	$18
08112 1C0F                        18            .byte	$18
08113 1C10                        18            .byte	$18
08114 1C11                        3C            .byte	$3C
08115 1C12                        00            .byte	0
08116 1C13                        00            .byte	0
08117 1C14                        00            .byte	0
08118                                           ! 1230  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08119 1C15                        00            .byte	0
08120 1C16                        00            .byte	0
08121 1C17                        C6            .byte	$C6
08122 1C18                        C6            .byte	$C6
08123 1C19                        C6            .byte	$C6
08124 1C1A                        C6            .byte	$C6
08125 1C1B                        C6            .byte	$C6
08126 1C1C                        C6            .byte	$C6
08127 1C1D                        C6            .byte	$C6
08128 1C1E                        C6            .byte	$C6
08129 1C1F                        7C            .byte	$7C
08130 1C20                        00            .byte	0
08131 1C21                        00            .byte	0
08132 1C22                        00            .byte	0
08133                                           ! 1231  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08134 1C23                        00            .byte	0
08135 1C24                        00            .byte	0
08136 1C25                        C6            .byte	$C6
08137 1C26                        C6            .byte	$C6
08138 1C27                        C6            .byte	$C6
08139 1C28                        C6            .byte	$C6
08140 1C29                        C6            .byte	$C6
08141 1C2A                        C6            .byte	$C6
08142 1C2B                        6C            .byte	$6C
08143 1C2C                        38            .byte	$38
08144 1C2D                        10            .byte	$10
08145 1C2E                        00            .byte	0
08146 1C2F                        00            .byte	0
08147 1C30                        00            .byte	0
08148                                           ! 1232  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08149 1C31                        00            .byte	0
08150 1C32                        00            .byte	0
08151 1C33                        C6            .byte	$C6
08152 1C34                        C6            .byte	$C6
08153 1C35                        C6            .byte	$C6
08154 1C36                        C6            .byte	$C6
08155 1C37                        D6            .byte	$D6
08156 1C38                        D6            .byte	$D6
08157 1C39                        FE            .byte	$FE
08158 1C3A                        7C            .byte	$7C
08159 1C3B                        6C            .byte	$6C
08160 1C3C                        00            .byte	0
08161 1C3D                        00            .byte	0
08162 1C3E                        00            .byte	0
08163                                           ! 1233  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08164 1C3F                        00            .byte	0
08165 1C40                        00            .byte	0
08166 1C41                        C6            .byte	$C6
08167 1C42                        C6            .byte	$C6
08168 1C43                        6C            .byte	$6C
08169 1C44                        38            .byte	$38
08170 1C45                        38            .byte	$38
08171 1C46                        38            .byte	$38
08172 1C47                        6C            .byte	$6C
08173 1C48                        C6            .byte	$C6
08174 1C49                        C6            .byte	$C6
08175 1C4A                        00            .byte	0
08176 1C4B                        00            .byte	0
08177 1C4C                        00            .byte	0
08178                                           ! 1234  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08179 1C4D                        00            .byte	0
08180 1C4E                        00            .byte	0
08181 1C4F                        66            .byte	$66
08182 1C50                        66            .byte	$66
08183 1C51                        66            .byte	$66
08184 1C52                        66            .byte	$66
08185 1C53                        3C            .byte	$3C
08186 1C54                        18            .byte	$18
08187 1C55                        18            .byte	$18
08188 1C56                        18            .byte	$18
08189 1C57                        3C            .byte	$3C
08190 1C58                        00            .byte	0
08191 1C59                        00            .byte	0
08192 1C5A                        00            .byte	0
08193                                           ! 1235  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08194 1C5B                        00            .byte	0
08195 1C5C                        00            .byte	0
08196 1C5D                        FE            .byte	$FE
08197 1C5E                        C6            .byte	$C6
08198 1C5F                        8C            .byte	$8C
08199 1C60                        18            .byte	$18
08200 1C61                        30            .byte	$30
08201 1C62                        60            .byte	$60
08202 1C63                        C2            .byte	$C2
08203 1C64                        C6            .byte	$C6
08204 1C65                        FE            .byte	$FE
08205 1C66                        00            .byte	0
08206 1C67                        00            .byte	0
08207 1C68                        00            .byte	0
08208                                           ! 1236  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08209 1C69                        00            .byte	0
08210 1C6A                        00            .byte	0
08211 1C6B                        3C            .byte	$3C
08212 1C6C                        30            .byte	$30
08213 1C6D                        30            .byte	$30
08214 1C6E                        30            .byte	$30
08215 1C6F                        30            .byte	$30
08216 1C70                        30            .byte	$30
08217 1C71                        30            .byte	$30
08218 1C72                        30            .byte	$30
08219 1C73                        3C            .byte	$3C
08220 1C74                        00            .byte	0
08221 1C75                        00            .byte	0
08222 1C76                        00            .byte	0
08223                                           ! 1237  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08224 1C77                        00            .byte	0
08225 1C78                        00            .byte	0
08226 1C79                        80            .byte	$80
08227 1C7A                        C0            .byte	$C0
08228 1C7B                        E0            .byte	$E0
08229 1C7C                        70            .byte	$70
08230 1C7D                        38            .byte	$38
08231 1C7E                        1C            .byte	$1C
08232 1C7F                        0E            .byte	$E
08233 1C80                        06            .byte	6
08234 1C81                        02            .byte	2
08235 1C82                        00            .byte	0
08236 1C83                        00            .byte	0
08237 1C84                        00            .byte	0
08238                                           ! 1238  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08239 1C85                        00            .byte	0
08240 1C86                        00            .byte	0
08241 1C87                        3C            .byte	$3C
08242 1C88                        0C            .byte	$C
08243 1C89                        0C            .byte	$C
08244 1C8A                        0C            .byte	$C
08245 1C8B                        0C            .byte	$C
08246 1C8C                        0C            .byte	$C
08247 1C8D                        0C            .byte	$C
08248 1C8E                        0C            .byte	$C
08249 1C8F                        3C            .byte	$3C
08250 1C90                        00            .byte	0
08251 1C91                        00            .byte	0
08252 1C92                        00            .byte	0
08253                                           ! 1239  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08254 1C93                        10            .byte	$10
08255 1C94                        38            .byte	$38
08256 1C95                        6C            .byte	$6C
08257 1C96                        C6            .byte	$C6
08258 1C97                        00            .byte	0
08259 1C98                        00            .byte	0
08260 1C99                        00            .byte	0
08261 1C9A                        00            .byte	0
08262 1C9B                        00            .byte	0
08263 1C9C                        00            .byte	0
08264 1C9D                        00            .byte	0
08265 1C9E                        00            .byte	0
08266 1C9F                        00            .byte	0
08267 1CA0                        00            .byte	0
08268                                           ! 1240  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08269 1CA1                        00            .byte	0
08270 1CA2                        00            .byte	0
08271 1CA3                        00            .byte	0
08272 1CA4                        00            .byte	0
08273 1CA5                        00            .byte	0
08274 1CA6                        00            .byte	0
08275 1CA7                        00            .byte	0
08276 1CA8                        00            .byte	0
08277 1CA9                        00            .byte	0
08278 1CAA                        00            .byte	0
08279 1CAB                        00            .byte	0
08280 1CAC                        00            .byte	0
08281 1CAD                        FF            .byte	$FF
08282 1CAE                        00            .byte	0
08283                                           ! 1241  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08284 1CAF                        30            .byte	$30
08285 1CB0                        30            .byte	$30
08286 1CB1                        18            .byte	$18
08287 1CB2                        00            .byte	0
08288 1CB3                        00            .byte	0
08289 1CB4                        00            .byte	0
08290 1CB5                        00            .byte	0
08291 1CB6                        00            .byte	0
08292 1CB7                        00            .byte	0
08293 1CB8                        00            .byte	0
08294 1CB9                        00            .byte	0
08295 1CBA                        00            .byte	0
08296 1CBB                        00            .byte	0
08297 1CBC                        00            .byte	0
08298                                           ! 1242  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08299 1CBD                        00            .byte	0
08300 1CBE                        00            .byte	0
08301 1CBF                        00            .byte	0
08302 1CC0                        00            .byte	0
08303 1CC1                        00            .byte	0
08304 1CC2                        78            .byte	$78
08305 1CC3                        0C            .byte	$C
08306 1CC4                        7C            .byte	$7C
08307 1CC5                        CC            .byte	$CC
08308 1CC6                        CC            .byte	$CC
08309 1CC7                        76            .byte	$76
08310 1CC8                        00            .byte	0
08311 1CC9                        00            .byte	0
08312 1CCA                        00            .byte	0
08313                                           ! 1243  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08314 1CCB                        00            .byte	0
08315 1CCC                        00            .byte	0
08316 1CCD                        E0            .byte	$E0
08317 1CCE                        60            .byte	$60
08318 1CCF                        60            .byte	$60
08319 1CD0                        78            .byte	$78
08320 1CD1                        6C            .byte	$6C
08321 1CD2                        66            .byte	$66
08322 1CD3                        66            .byte	$66
08323 1CD4                        66            .byte	$66
08324 1CD5                        7C            .byte	$7C
08325 1CD6                        00            .byte	0
08326 1CD7                        00            .byte	0
08327 1CD8                        00            .byte	0
08328                                           ! 1244  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08329 1CD9                        00            .byte	0
08330 1CDA                        00            .byte	0
08331 1CDB                        00            .byte	0
08332 1CDC                        00            .byte	0
08333 1CDD                        00            .byte	0
08334 1CDE                        7C            .byte	$7C
08335 1CDF                        C6            .byte	$C6
08336 1CE0                        C0            .byte	$C0
08337 1CE1                        C0            .byte	$C0
08338 1CE2                        C6            .byte	$C6
08339 1CE3                        7C            .byte	$7C
08340 1CE4                        00            .byte	0
08341 1CE5                        00            .byte	0
08342 1CE6                        00            .byte	0
08343                                           ! 1245  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x
08344 1CE7                        00            .byte	0
08345 1CE8                        00            .byte	0
08346 1CE9                        1C            .byte	$1C
08347 1CEA                        0C            .byte	$C
08348 1CEB                        0C            .byte	$C
08349 1CEC                        3C            .byte	$3C
08350 1CED                        6C            .byte	$6C
08351 1CEE                        CC            .byte	$CC
08352 1CEF                        CC            .byte	$CC
08353 1CF0                        CC            .byte	$CC
08354 1CF1                        76            .byte	$76
08355 1CF2                        00            .byte	0
08356 1CF3                        00            .byte	0
08357                                           ! 1245 00,
08358 1CF4                        00            .byte	0
08359                                           ! 1246  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08360 1CF5                        00            .byte	0
08361 1CF6                        00            .byte	0
08362 1CF7                        00            .byte	0
08363 1CF8                        00            .byte	0
08364 1CF9                        00            .byte	0
08365 1CFA                        7C            .byte	$7C
08366 1CFB                        C6            .byte	$C6
08367 1CFC                        FE            .byte	$FE
08368 1CFD                        C0            .byte	$C0
08369 1CFE                        C6            .byte	$C6
08370 1CFF                        7C            .byte	$7C
08371 1D00                        00            .byte	0
08372 1D01                        00            .byte	0
08373 1D02                        00            .byte	0
08374                                           ! 1247  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08375 1D03                        00            .byte	0
08376 1D04                        00            .byte	0
08377 1D05                        38            .byte	$38
08378 1D06                        6C            .byte	$6C
08379 1D07                        64            .byte	$64
08380 1D08                        60            .byte	$60
08381 1D09                        F0            .byte	$F0
08382 1D0A                        60            .byte	$60
08383 1D0B                        60            .byte	$60
08384 1D0C                        60            .byte	$60
08385 1D0D                        F0            .byte	$F0
08386 1D0E                        00            .byte	0
08387 1D0F                        00            .byte	0
08388 1D10                        00            .byte	0
08389                                           ! 1248  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08390 1D11                        00            .byte	0
08391 1D12                        00            .byte	0
08392 1D13                        00            .byte	0
08393 1D14                        00            .byte	0
08394 1D15                        00            .byte	0
08395 1D16                        76            .byte	$76
08396 1D17                        CC            .byte	$CC
08397 1D18                        CC            .byte	$CC
08398 1D19                        CC            .byte	$CC
08399 1D1A                        7C            .byte	$7C
08400 1D1B                        0C            .byte	$C
08401 1D1C                        CC            .byte	$CC
08402 1D1D                        78            .byte	$78
08403 1D1E                        00            .byte	0
08404                                           ! 1249  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08405 1D1F                        00            .byte	0
08406 1D20                        00            .byte	0
08407 1D21                        E0            .byte	$E0
08408 1D22                        60            .byte	$60
08409 1D23                        60            .byte	$60
08410 1D24                        6C            .byte	$6C
08411 1D25                        76            .byte	$76
08412 1D26                        66            .byte	$66
08413 1D27                        66            .byte	$66
08414 1D28                        66            .byte	$66
08415 1D29                        E6            .byte	$E6
08416 1D2A                        00            .byte	0
08417 1D2B                        00            .byte	0
08418 1D2C                        00            .byte	0
08419                                           ! 1250  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08420 1D2D                        00            .byte	0
08421 1D2E                        00            .byte	0
08422 1D2F                        18            .byte	$18
08423 1D30                        18            .byte	$18
08424 1D31                        00            .byte	0
08425 1D32                        38            .byte	$38
08426 1D33                        18            .byte	$18
08427 1D34                        18            .byte	$18
08428 1D35                        18            .byte	$18
08429 1D36                        18            .byte	$18
08430 1D37                        3C            .byte	$3C
08431 1D38                        00            .byte	0
08432 1D39                        00            .byte	0
08433 1D3A                        00            .byte	0
08434                                           ! 1251  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08435 1D3B                        00            .byte	0
08436 1D3C                        00            .byte	0
08437 1D3D                        06            .byte	6
08438 1D3E                        06            .byte	6
08439 1D3F                        00            .byte	0
08440 1D40                        0E            .byte	$E
08441 1D41                        06            .byte	6
08442 1D42                        06            .byte	6
08443 1D43                        06            .byte	6
08444 1D44                        06            .byte	6
08445 1D45                        66            .byte	$66
08446 1D46                        66            .byte	$66
08447 1D47                        3C            .byte	$3C
08448 1D48                        00            .byte	0
08449                                           ! 1252  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08450 1D49                        00            .byte	0
08451 1D4A                        00            .byte	0
08452 1D4B                        E0            .byte	$E0
08453 1D4C                        60            .byte	$60
08454 1D4D                        60            .byte	$60
08455 1D4E                        66            .byte	$66
08456 1D4F                        6C            .byte	$6C
08457 1D50                        78            .byte	$78
08458 1D51                        6C            .byte	$6C
08459 1D52                        66            .byte	$66
08460 1D53                        E6            .byte	$E6
08461 1D54                        00            .byte	0
08462 1D55                        00            .byte	0
08463 1D56                        00            .byte	0
08464                                           ! 1253  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08465 1D57                        00            .byte	0
08466 1D58                        00            .byte	0
08467 1D59                        38            .byte	$38
08468 1D5A                        18            .byte	$18
08469 1D5B                        18            .byte	$18
08470 1D5C                        18            .byte	$18
08471 1D5D                        18            .byte	$18
08472 1D5E                        18            .byte	$18
08473 1D5F                        18            .byte	$18
08474 1D60                        18            .byte	$18
08475 1D61                        3C            .byte	$3C
08476 1D62                        00            .byte	0
08477 1D63                        00            .byte	0
08478 1D64                        00            .byte	0
08479                                           ! 1254  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08480 1D65                        00            .byte	0
08481 1D66                        00            .byte	0
08482 1D67                        00            .byte	0
08483 1D68                        00            .byte	0
08484 1D69                        00            .byte	0
08485 1D6A                        EC            .byte	$EC
08486 1D6B                        FE            .byte	$FE
08487 1D6C                        D6            .byte	$D6
08488 1D6D                        D6            .byte	$D6
08489 1D6E                        D6            .byte	$D6
08490 1D6F                        C6            .byte	$C6
08491 1D70                        00            .byte	0
08492 1D71                        00            .byte	0
08493 1D72                        00            .byte	0
08494                                           ! 1255  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08495 1D73                        00            .byte	0
08496 1D74                        00            .byte	0
08497 1D75                        00            .byte	0
08498 1D76                        00            .byte	0
08499 1D77                        00            .byte	0
08500 1D78                        DC            .byte	$DC
08501 1D79                        66            .byte	$66
08502 1D7A                        66            .byte	$66
08503 1D7B                        66            .byte	$66
08504 1D7C                        66            .byte	$66
08505 1D7D                        66            .byte	$66
08506 1D7E                        00            .byte	0
08507 1D7F                        00            .byte	0
08508 1D80                        00            .byte	0
08509                                           ! 1256  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08510 1D81                        00            .byte	0
08511 1D82                        00            .byte	0
08512 1D83                        00            .byte	0
08513 1D84                        00            .byte	0
08514 1D85                        00            .byte	0
08515 1D86                        7C            .byte	$7C
08516 1D87                        C6            .byte	$C6
08517 1D88                        C6            .byte	$C6
08518 1D89                        C6            .byte	$C6
08519 1D8A                        C6            .byte	$C6
08520 1D8B                        7C            .byte	$7C
08521 1D8C                        00            .byte	0
08522 1D8D                        00            .byte	0
08523 1D8E                        00            .byte	0
08524                                           ! 1257  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08525 1D8F                        00            .byte	0
08526 1D90                        00            .byte	0
08527 1D91                        00            .byte	0
08528 1D92                        00            .byte	0
08529 1D93                        00            .byte	0
08530 1D94                        DC            .byte	$DC
08531 1D95                        66            .byte	$66
08532 1D96                        66            .byte	$66
08533 1D97                        66            .byte	$66
08534 1D98                        7C            .byte	$7C
08535 1D99                        60            .byte	$60
08536 1D9A                        60            .byte	$60
08537 1D9B                        F0            .byte	$F0
08538 1D9C                        00            .byte	0
08539                                           ! 1258  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08540 1D9D                        00            .byte	0
08541 1D9E                        00            .byte	0
08542 1D9F                        00            .byte	0
08543 1DA0                        00            .byte	0
08544 1DA1                        00            .byte	0
08545 1DA2                        76            .byte	$76
08546 1DA3                        CC            .byte	$CC
08547 1DA4                        CC            .byte	$CC
08548 1DA5                        CC            .byte	$CC
08549 1DA6                        7C            .byte	$7C
08550 1DA7                        0C            .byte	$C
08551 1DA8                        0C            .byte	$C
08552 1DA9                        1E            .byte	$1E
08553 1DAA                        00            .byte	0
08554                                           ! 1259  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08555 1DAB                        00            .byte	0
08556 1DAC                        00            .byte	0
08557 1DAD                        00            .byte	0
08558 1DAE                        00            .byte	0
08559 1DAF                        00            .byte	0
08560 1DB0                        DC            .byte	$DC
08561 1DB1                        76            .byte	$76
08562 1DB2                        66            .byte	$66
08563 1DB3                        60            .byte	$60
08564 1DB4                        60            .byte	$60
08565 1DB5                        F0            .byte	$F0
08566 1DB6                        00            .byte	0
08567 1DB7                        00            .byte	0
08568 1DB8                        00            .byte	0
08569                                           ! 1260  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08570 1DB9                        00            .byte	0
08571 1DBA                        00            .byte	0
08572 1DBB                        00            .byte	0
08573 1DBC                        00            .byte	0
08574 1DBD                        00            .byte	0
08575 1DBE                        7C            .byte	$7C
08576 1DBF                        C6            .byte	$C6
08577 1DC0                        70            .byte	$70
08578 1DC1                        1C            .byte	$1C
08579 1DC2                        C6            .byte	$C6
08580 1DC3                        7C            .byte	$7C
08581 1DC4                        00            .byte	0
08582 1DC5                        00            .byte	0
08583 1DC6                        00            .byte	0
08584                                           ! 1261  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08585 1DC7                        00            .byte	0
08586 1DC8                        00            .byte	0
08587 1DC9                        10            .byte	$10
08588 1DCA                        30            .byte	$30
08589 1DCB                        30            .byte	$30
08590 1DCC                        FC            .byte	$FC
08591 1DCD                        30            .byte	$30
08592 1DCE                        30            .byte	$30
08593 1DCF                        30            .byte	$30
08594 1DD0                        36            .byte	$36
08595 1DD1                        1C            .byte	$1C
08596 1DD2                        00            .byte	0
08597 1DD3                        00            .byte	0
08598 1DD4                        00            .byte	0
08599                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08600 1DD5                        00            .byte	0
08601 1DD6                        00            .byte	0
08602 1DD7                        00            .byte	0
08603 1DD8                        00            .byte	0
08604 1DD9                        00            .byte	0
08605 1DDA                        CC            .byte	$CC
08606 1DDB                        CC            .byte	$CC
08607 1DDC                        CC            .byte	$CC
08608 1DDD                        CC            .byte	$CC
08609 1DDE                        CC            .byte	$CC
08610 1DDF                        76            .byte	$76
08611 1DE0                        00            .byte	0
08612 1DE1                        00            .byte	0
08613 1DE2                        00            .byte	0
08614                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08615 1DE3                        00            .byte	0
08616 1DE4                        00            .byte	0
08617 1DE5                        00            .byte	0
08618 1DE6                        00            .byte	0
08619 1DE7                        00            .byte	0
08620 1DE8                        66            .byte	$66
08621 1DE9                        66            .byte	$66
08622 1DEA                        66            .byte	$66
08623 1DEB                        66            .byte	$66
08624 1DEC                        3C            .byte	$3C
08625 1DED                        18            .byte	$18
08626 1DEE                        00            .byte	0
08627 1DEF                        00            .byte	0
08628 1DF0                        00            .byte	0
08629                                           ! 1264  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08630 1DF1                        00            .byte	0
08631 1DF2                        00            .byte	0
08632 1DF3                        00            .byte	0
08633 1DF4                        00            .byte	0
08634 1DF5                        00            .byte	0
08635 1DF6                        C6            .byte	$C6
08636 1DF7                        C6            .byte	$C6
08637 1DF8                        D6            .byte	$D6
08638 1DF9                        D6            .byte	$D6
08639 1DFA                        FE            .byte	$FE
08640 1DFB                        6C            .byte	$6C
08641 1DFC                        00            .byte	0
08642 1DFD                        00            .byte	0
08643 1DFE                        00            .byte	0
08644                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08645 1DFF                        00            .byte	0
08646 1E00                        00            .byte	0
08647 1E01                        00            .byte	0
08648 1E02                        00            .byte	0
08649 1E03                        00            .byte	0
08650 1E04                        C6            .byte	$C6
08651 1E05                        6C            .byte	$6C
08652 1E06                        38            .byte	$38
08653 1E07                        38            .byte	$38
08654 1E08                        6C            .byte	$6C
08655 1E09                        C6            .byte	$C6
08656 1E0A                        00            .byte	0
08657 1E0B                        00            .byte	0
08658 1E0C                        00            .byte	0
08659                                           ! 1266  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08660 1E0D                        00            .byte	0
08661 1E0E                        00            .byte	0
08662 1E0F                        00            .byte	0
08663 1E10                        00            .byte	0
08664 1E11                        00            .byte	0
08665 1E12                        C6            .byte	$C6
08666 1E13                        C6            .byte	$C6
08667 1E14                        C6            .byte	$C6
08668 1E15                        C6            .byte	$C6
08669 1E16                        7E            .byte	$7E
08670 1E17                        06            .byte	6
08671 1E18                        0C            .byte	$C
08672 1E19                        F8            .byte	$F8
08673 1E1A                        00            .byte	0
08674                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08675 1E1B                        00            .byte	0
08676 1E1C                        00            .byte	0
08677 1E1D                        00            .byte	0
08678 1E1E                        00            .byte	0
08679 1E1F                        00            .byte	0
08680 1E20                        FE            .byte	$FE
08681 1E21                        CC            .byte	$CC
08682 1E22                        18            .byte	$18
08683 1E23                        30            .byte	$30
08684 1E24                        66            .byte	$66
08685 1E25                        FE            .byte	$FE
08686 1E26                        00            .byte	0
08687 1E27                        00            .byte	0
08688 1E28                        00            .byte	0
08689                                           ! 1268  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08690 1E29                        00            .byte	0
08691 1E2A                        00            .byte	0
08692 1E2B                        0E            .byte	$E
08693 1E2C                        18            .byte	$18
08694 1E2D                        18            .byte	$18
08695 1E2E                        18            .byte	$18
08696 1E2F                        70            .byte	$70
08697 1E30                        18            .byte	$18
08698 1E31                        18            .byte	$18
08699 1E32                        18            .byte	$18
08700 1E33                        0E            .byte	$E
08701 1E34                        00            .byte	0
08702 1E35                        00            .byte	0
08703 1E36                        00            .byte	0
08704                                           ! 1269  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08705 1E37                        00            .byte	0
08706 1E38                        00            .byte	0
08707 1E39                        18            .byte	$18
08708 1E3A                        18            .byte	$18
08709 1E3B                        18            .byte	$18
08710 1E3C                        18            .byte	$18
08711 1E3D                        00            .byte	0
08712 1E3E                        18            .byte	$18
08713 1E3F                        18            .byte	$18
08714 1E40                        18            .byte	$18
08715 1E41                        18            .byte	$18
08716 1E42                        00            .byte	0
08717 1E43                        00            .byte	0
08718 1E44                        00            .byte	0
08719                                           ! 1270  0x0
08720                                           ! 1270 0, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08721 1E45                        00            .byte	0
08722 1E46                        00            .byte	0
08723 1E47                        70            .byte	$70
08724 1E48                        18            .byte	$18
08725 1E49                        18            .byte	$18
08726 1E4A                        18            .byte	$18
08727 1E4B                        0E            .byte	$E
08728 1E4C                        18            .byte	$18
08729 1E4D                        18            .byte	$18
08730 1E4E                        18            .byte	$18
08731 1E4F                        70            .byte	$70
08732 1E50                        00            .byte	0
08733 1E51                        00            .byte	0
08734 1E52                        00            .byte	0
08735                                           ! 1271  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08736 1E53                        00            .byte	0
08737 1E54                        00            .byte	0
08738 1E55                        76            .byte	$76
08739 1E56                        DC            .byte	$DC
08740 1E57                        00            .byte	0
08741 1E58                        00            .byte	0
08742 1E59                        00            .byte	0
08743 1E5A                        00            .byte	0
08744 1E5B                        00            .byte	0
08745 1E5C                        00            .byte	0
08746 1E5D                        00            .byte	0
08747 1E5E                        00            .byte	0
08748 1E5F                        00            .byte	0
08749 1E60                        00            .byte	0
08750                                           ! 1272  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08751 1E61                        00            .byte	0
08752 1E62                        00            .byte	0
08753 1E63                        00            .byte	0
08754 1E64                        00            .byte	0
08755 1E65                        10            .byte	$10
08756 1E66                        38            .byte	$38
08757 1E67                        6C            .byte	$6C
08758 1E68                        C6            .byte	$C6
08759 1E69                        C6            .byte	$C6
08760 1E6A                        FE            .byte	$FE
08761 1E6B                        00            .byte	0
08762 1E6C                        00            .byte	0
08763 1E6D                        00            .byte	0
08764 1E6E                        00            .byte	0
08765                                           ! 1273  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08766 1E6F                        00            .byte	0
08767 1E70                        00            .byte	0
08768 1E71                        3C            .byte	$3C
08769 1E72                        66            .byte	$66
08770 1E73                        C2            .byte	$C2
08771 1E74                        C0            .byte	$C0
08772 1E75                        C0            .byte	$C0
08773 1E76                        C2            .byte	$C2
08774 1E77                        66            .byte	$66
08775 1E78                        3C            .byte	$3C
08776 1E79                        0C            .byte	$C
08777 1E7A                        06            .byte	6
08778 1E7B                        7C            .byte	$7C
08779 1E7C                        00            .byte	0
08780                                           ! 1274  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08781 1E7D                        00            .byte	0
08782 1E7E                        00            .byte	0
08783 1E7F                        CC            .byte	$CC
08784 1E80                        CC            .byte	$CC
08785 1E81                        00            .byte	0
08786 1E82                        CC            .byte	$CC
08787 1E83                        CC            .byte	$CC
08788 1E84                        CC            .byte	$CC
08789 1E85                        CC            .byte	$CC
08790 1E86                        CC            .byte	$CC
08791 1E87                        76            .byte	$76
08792 1E88                        00            .byte	0
08793 1E89                        00            .byte	0
08794 1E8A                        00            .byte	0
08795                                           ! 1275  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08796 1E8B                        00            .byte	0
08797 1E8C                        0C            .byte	$C
08798 1E8D                        18            .byte	$18
08799 1E8E                        30            .byte	$30
08800 1E8F                        00            .byte	0
08801 1E90                        7C            .byte	$7C
08802 1E91                        C6            .byte	$C6
08803 1E92                        FE            .byte	$FE
08804 1E93                        C0            .byte	$C0
08805 1E94                        C6            .byte	$C6
08806 1E95                        7C            .byte	$7C
08807 1E96                        00            .byte	0
08808 1E97                        00            .byte	0
08809 1E98                        00            .byte	0
08810                                           ! 1276  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08811 1E99                        00            .byte	0
08812 1E9A                        10            .byte	$10
08813 1E9B                        38            .byte	$38
08814 1E9C                        6C            .byte	$6C
08815 1E9D                        00            .byte	0
08816 1E9E                        78            .byte	$78
08817 1E9F                        0C            .byte	$C
08818 1EA0                        7C            .byte	$7C
08819 1EA1                        CC            .byte	$CC
08820 1EA2                        CC            .byte	$CC
08821 1EA3                        76            .byte	$76
08822 1EA4                        00            .byte	0
08823 1EA5                        00            .byte	0
08824 1EA6                        00            .byte	0
08825                                           ! 1277  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08826 1EA7                        00            .byte	0
08827 1EA8                        00            .byte	0
08828 1EA9                        CC            .byte	$CC
08829 1EAA                        CC            .byte	$CC
08830 1EAB                        00            .byte	0
08831 1EAC                        78            .byte	$78
08832 1EAD                        0C            .byte	$C
08833 1EAE                        7C            .byte	$7C
08834 1EAF                        CC            .byte	$CC
08835 1EB0                        CC            .byte	$CC
08836 1EB1                        76            .byte	$76
08837 1EB2                        00            .byte	0
08838 1EB3                        00            .byte	0
08839 1EB4                        00            .byte	0
08840                                           ! 1278  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08841 1EB5                        00            .byte	0
08842 1EB6                        60            .byte	$60
08843 1EB7                        30            .byte	$30
08844 1EB8                        18            .byte	$18
08845 1EB9                        00            .byte	0
08846 1EBA                        78            .byte	$78
08847 1EBB                        0C            .byte	$C
08848 1EBC                        7C            .byte	$7C
08849 1EBD                        CC            .byte	$CC
08850 1EBE                        CC            .byte	$CC
08851 1EBF                        76            .byte	$76
08852 1EC0                        00            .byte	0
08853 1EC1                        00            .byte	0
08854 1EC2                        00            .byte	0
08855                                           ! 1279  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08856 1EC3                        00            .byte	0
08857 1EC4                        38            .byte	$38
08858 1EC5                        6C            .byte	$6C
08859 1EC6                        38            .byte	$38
08860 1EC7                        00            .byte	0
08861 1EC8                        78            .byte	$78
08862 1EC9                        0C            .byte	$C
08863 1ECA                        7C            .byte	$7C
08864 1ECB                        CC            .byte	$CC
08865 1ECC                        CC            .byte	$CC
08866 1ECD                        76            .byte	$76
08867 1ECE                        00            .byte	0
08868 1ECF                        00            .byte	0
08869 1ED0                        00            .byte	0
08870                                           ! 1280  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08871 1ED1                        00            .byte	0
08872 1ED2                        00            .byte	0
08873 1ED3                        00            .byte	0
08874 1ED4                        00            .byte	0
08875 1ED5                        3C            .byte	$3C
08876 1ED6                        66            .byte	$66
08877 1ED7                        60            .byte	$60
08878 1ED8                        66            .byte	$66
08879 1ED9                        3C            .byte	$3C
08880 1EDA                        0C            .byte	$C
08881 1EDB                        06            .byte	6
08882 1EDC                        3C            .byte	$3C
08883 1EDD                        00            .byte	0
08884 1EDE                        00            .byte	0
08885                                           ! 1281  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08886 1EDF                        00            .byte	0
08887 1EE0                        10            .byte	$10
08888 1EE1                        38            .byte	$38
08889 1EE2                        6C            .byte	$6C
08890 1EE3                        00            .byte	0
08891 1EE4                        7C            .byte	$7C
08892 1EE5                        C6            .byte	$C6
08893 1EE6                        FE            .byte	$FE
08894 1EE7                        C0            .byte	$C0
08895 1EE8                        C6            .byte	$C6
08896 1EE9                        7C            .byte	$7C
08897 1EEA                        00            .byte	0
08898 1EEB                        00            .byte	0
08899 1EEC                        00            .byte	0
08900                                           ! 1282  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08901 1EED                        00            .byte	0
08902 1EEE                        00            .byte	0
08903 1EEF                        CC            .byte	$CC
08904 1EF0                        CC            .byte	$CC
08905 1EF1                        00            .byte	0
08906 1EF2                        7C            .byte	$7C
08907 1EF3                        C6            .byte	$C6
08908 1EF4                        FE            .byte	$FE
08909 1EF5                        C0            .byte	$C0
08910 1EF6                        C6            .byte	$C6
08911 1EF7                        7C            .byte	$7C
08912 1EF8                        00            .byte	0
08913 1EF9                        00            .byte	0
08914 1EFA                        00            .byte	0
08915                                           ! 1283  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08916 1EFB                        00            .byte	0
08917 1EFC                        60            .byte	$60
08918 1EFD                        30            .byte	$30
08919 1EFE                        18            .byte	$18
08920 1EFF                        00            .byte	0
08921 1F00                        7C            .byte	$7C
08922 1F01                        C6            .byte	$C6
08923 1F02                        FE            .byte	$FE
08924 1F03                        C0            .byte	$C0
08925 1F04                        C6            .byte	$C6
08926 1F05                        7C            .byte	$7C
08927 1F06                        00            .byte	0
08928 1F07                        00            .byte	0
08929 1F08                        00            .byte	0
08930                                           ! 1284  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08931 1F09                        00            .byte	0
08932 1F0A                        00            .byte	0
08933 1F0B                        66            .byte	$66
08934 1F0C                        66            .byte	$66
08935 1F0D                        00            .byte	0
08936 1F0E                        38            .byte	$38
08937 1F0F                        18            .byte	$18
08938 1F10                        18            .byte	$18
08939 1F11                        18            .byte	$18
08940 1F12                        18            .byte	$18
08941 1F13                        3C            .byte	$3C
08942 1F14                        00            .byte	0
08943 1F15                        00            .byte	0
08944 1F16                        00            .byte	0
08945                                           ! 1285  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08946 1F17                        00            .byte	0
08947 1F18                        18            .byte	$18
08948 1F19                        3C            .byte	$3C
08949 1F1A                        66            .byte	$66
08950 1F1B                        00            .byte	0
08951 1F1C                        38            .byte	$38
08952 1F1D                        18            .byte	$18
08953 1F1E                        18            .byte	$18
08954 1F1F                        18            .byte	$18
08955 1F20                        18            .byte	$18
08956 1F21                        3C            .byte	$3C
08957 1F22                        00            .byte	0
08958 1F23                        00            .byte	0
08959 1F24                        00            .byte	0
08960                                           ! 1286  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08961 1F25                        00            .byte	0
08962 1F26                        60            .byte	$60
08963 1F27                        30            .byte	$30
08964 1F28                        18            .byte	$18
08965 1F29                        00            .byte	0
08966 1F2A                        38            .byte	$38
08967 1F2B                        18            .byte	$18
08968 1F2C                        18            .byte	$18
08969 1F2D                        18            .byte	$18
08970 1F2E                        18            .byte	$18
08971 1F2F                        3C            .byte	$3C
08972 1F30                        00            .byte	0
08973 1F31                        00            .byte	0
08974 1F32                        00            .byte	0
08975                                           ! 1287  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08976 1F33                        00            .byte	0
08977 1F34                        C6            .byte	$C6
08978 1F35                        C6            .byte	$C6
08979 1F36                        10            .byte	$10
08980 1F37                        38            .byte	$38
08981 1F38                        6C            .byte	$6C
08982 1F39                        C6            .byte	$C6
08983 1F3A                        C6            .byte	$C6
08984 1F3B                        FE            .byte	$FE
08985 1F3C                        C6            .byte	$C6
08986 1F3D                        C6            .byte	$C6
08987 1F3E                        00            .byte	0
08988 1F3F                        00            .byte	0
08989 1F40                        00            .byte	0
08990                                           ! 1288  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08991 1F41                        38            .byte	$38
08992 1F42                        6C            .byte	$6C
08993 1F43                        38            .byte	$38
08994 1F44                        00            .byte	0
08995 1F45                        38            .byte	$38
08996 1F46                        6C            .byte	$6C
08997 1F47                        C6            .byte	$C6
08998 1F48                        C6            .byte	$C6
08999 1F49                        FE            .byte	$FE
09000 1F4A                        C6            .byte	$C6
09001 1F4B                        C6            .byte	$C6
09002 1F4C                        00            .byte	0
09003 1F4D                        00            .byte	0
09004 1F4E                        00            .byte	0
09005                                           ! 1289  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
09006 1F4F                        18            .byte	$18
09007 1F50                        30            .byte	$30
09008 1F51                        60            .byte	$60
09009 1F52                        00            .byte	0
09010 1F53                        FE            .byte	$FE
09011 1F54                        66            .byte	$66
09012 1F55                        60            .byte	$60
09013 1F56                        7C            .byte	$7C
09014 1F57                        60            .byte	$60
09015 1F58                        66            .byte	$66
09016 1F59                        FE            .byte	$FE
09017 1F5A                        00            .byte	0
09018 1F5B                        00            .byte	0
09019 1F5C                        00            .byte	0
09020                                           ! 1290  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
09021 1F5D                        00            .byte	0
09022 1F5E                        00            .byte	0
09023 1F5F                        00            .byte	0
09024 1F60                        00            .byte	0
09025 1F61                        CC            .byte	$CC
09026 1F62                        76            .byte	$76
09027 1F63                        36            .byte	$36
09028 1F64                        7E            .byte	$7E
09029 1F65                        D8            .byte	$D8
09030 1F66                        D8            .byte	$D8
09031 1F67                        6E            .byte	$6E
09032 1F68                        00            .byte	0
09033 1F69                        00            .byte	0
09034 1F6A                        00            .byte	0
09035                                           ! 1291  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09036 1F6B                        00            .byte	0
09037 1F6C                        00            .byte	0
09038 1F6D                        3E            .byte	$3E
09039 1F6E                        6C            .byte	$6C
09040 1F6F                        CC            .byte	$CC
09041 1F70                        CC            .byte	$CC
09042 1F71                        FE            .byte	$FE
09043 1F72                        CC            .byte	$CC
09044 1F73                        CC            .byte	$CC
09045 1F74                        CC            .byte	$CC
09046 1F75                        CE            .byte	$CE
09047 1F76                        00            .byte	0
09048 1F77                        00            .byte	0
09049 1F78                        00            .byte	0
09050                                           ! 1292  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09051 1F79                        00            .byte	0
09052 1F7A                        10            .byte	$10
09053 1F7B                        38            .byte	$38
09054 1F7C                        6C            .byte	$6C
09055 1F7D                        00            .byte	0
09056 1F7E                        7C            .byte	$7C
09057 1F7F                        C6            .byte	$C6
09058 1F80                        C6            .byte	$C6
09059 1F81                        C6            .byte	$C6
09060 1F82                        C6            .byte	$C6
09061 1F83                        7C            .byte	$7C
09062 1F84                        00            .byte	0
09063 1F85                        00            .byte	0
09064 1F86                        00            .byte	0
09065                                           ! 1293  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09066 1F87                        00            .byte	0
09067 1F88                        00            .byte	0
09068 1F89                        C6            .byte	$C6
09069 1F8A                        C6            .byte	$C6
09070 1F8B                        00            .byte	0
09071 1F8C                        7C            .byte	$7C
09072 1F8D                        C6            .byte	$C6
09073 1F8E                        C6            .byte	$C6
09074 1F8F                        C6            .byte	$C6
09075 1F90                        C6            .byte	$C6
09076 1F91                        7C            .byte	$7C
09077 1F92                        00            .byte	0
09078 1F93                        00            .byte	0
09079 1F94                        00            .byte	0
09080                                           ! 1294  0x00, 0x60,
09081 1F95                        00            .byte	0
09082                                           ! 1294  0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09083 1F96                        60            .byte	$60
09084 1F97                        30            .byte	$30
09085 1F98                        18            .byte	$18
09086 1F99                        00            .byte	0
09087 1F9A                        7C            .byte	$7C
09088 1F9B                        C6            .byte	$C6
09089 1F9C                        C6            .byte	$C6
09090 1F9D                        C6            .byte	$C6
09091 1F9E                        C6            .byte	$C6
09092 1F9F                        7C            .byte	$7C
09093 1FA0                        00            .byte	0
09094 1FA1                        00            .byte	0
09095 1FA2                        00            .byte	0
09096                                           ! 1295  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09097 1FA3                        00            .byte	0
09098 1FA4                        30            .byte	$30
09099 1FA5                        78            .byte	$78
09100 1FA6                        CC            .byte	$CC
09101 1FA7                        00            .byte	0
09102 1FA8                        CC            .byte	$CC
09103 1FA9                        CC            .byte	$CC
09104 1FAA                        CC            .byte	$CC
09105 1FAB                        CC            .byte	$CC
09106 1FAC                        CC            .byte	$CC
09107 1FAD                        76            .byte	$76
09108 1FAE                        00            .byte	0
09109 1FAF                        00            .byte	0
09110 1FB0                        00            .byte	0
09111                                           ! 1296  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09112 1FB1                        00            .byte	0
09113 1FB2                        60            .byte	$60
09114 1FB3                        30            .byte	$30
09115 1FB4                        18            .byte	$18
09116 1FB5                        00            .byte	0
09117 1FB6                        CC            .byte	$CC
09118 1FB7                        CC            .byte	$CC
09119 1FB8                        CC            .byte	$CC
09120 1FB9                        CC            .byte	$CC
09121 1FBA                        CC            .byte	$CC
09122 1FBB                        76            .byte	$76
09123 1FBC                        00            .byte	0
09124 1FBD                        00            .byte	0
09125 1FBE                        00            .byte	0
09126                                           ! 1297  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09127 1FBF                        00            .byte	0
09128 1FC0                        00            .byte	0
09129 1FC1                        C6            .byte	$C6
09130 1FC2                        C6            .byte	$C6
09131 1FC3                        00            .byte	0
09132 1FC4                        C6            .byte	$C6
09133 1FC5                        C6            .byte	$C6
09134 1FC6                        C6            .byte	$C6
09135 1FC7                        C6            .byte	$C6
09136 1FC8                        7E            .byte	$7E
09137 1FC9                        06            .byte	6
09138 1FCA                        0C            .byte	$C
09139 1FCB                        78            .byte	$78
09140 1FCC                        00            .byte	0
09141                                           ! 1298  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09142 1FCD                        00            .byte	0
09143 1FCE                        C6            .byte	$C6
09144 1FCF                        C6            .byte	$C6
09145 1FD0                        38            .byte	$38
09146 1FD1                        6C            .byte	$6C
09147 1FD2                        C6            .byte	$C6
09148 1FD3                        C6            .byte	$C6
09149 1FD4                        C6            .byte	$C6
09150 1FD5                        C6            .byte	$C6
09151 1FD6                        6C            .byte	$6C
09152 1FD7                        38            .byte	$38
09153 1FD8                        00            .byte	0
09154 1FD9                        00            .byte	0
09155 1FDA                        00            .byte	0
09156                                           ! 1299  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09157 1FDB                        00            .byte	0
09158 1FDC                        C6            .byte	$C6
09159 1FDD                        C6            .byte	$C6
09160 1FDE                        00            .byte	0
09161 1FDF                        C6            .byte	$C6
09162 1FE0                        C6            .byte	$C6
09163 1FE1                        C6            .byte	$C6
09164 1FE2                        C6            .byte	$C6
09165 1FE3                        C6            .byte	$C6
09166 1FE4                        C6            .byte	$C6
09167 1FE5                        7C            .byte	$7C
09168 1FE6                        00            .byte	0
09169 1FE7                        00            .byte	0
09170 1FE8                        00            .byte	0
09171                                           ! 1300  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09172 1FE9                        00            .byte	0
09173 1FEA                        18            .byte	$18
09174 1FEB                        18            .byte	$18
09175 1FEC                        3C            .byte	$3C
09176 1FED                        66            .byte	$66
09177 1FEE                        60            .byte	$60
09178 1FEF                        60            .byte	$60
09179 1FF0                        66            .byte	$66
09180 1FF1                        3C            .byte	$3C
09181 1FF2                        18            .byte	$18
09182 1FF3                        18            .byte	$18
09183 1FF4                        00            .byte	0
09184 1FF5                        00            .byte	0
09185 1FF6                        00            .byte	0
09186                                           ! 1301  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09187 1FF7                        00            .byte	0
09188 1FF8                        38            .byte	$38
09189 1FF9                        6C            .byte	$6C
09190 1FFA                        64            .byte	$64
09191 1FFB                        60            .byte	$60
09192 1FFC                        F0            .byte	$F0
09193 1FFD                        60            .byte	$60
09194 1FFE                        60            .byte	$60
09195 1FFF                        60            .byte	$60
09196 2000                        E6            .byte	$E6
09197 2001                        FC            .byte	$FC
09198 2002                        00            .byte	0
09199 2003                        00            .byte	0
09200 2004                        00            .byte	0
09201                                           ! 1302  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09202 2005                        00            .byte	0
09203 2006                        00            .byte	0
09204 2007                        66            .byte	$66
09205 2008                        66            .byte	$66
09206 2009                        3C            .byte	$3C
09207 200A                        18            .byte	$18
09208 200B                        7E            .byte	$7E
09209 200C                        18            .byte	$18
09210 200D                        7E            .byte	$7E
09211 200E                        18            .byte	$18
09212 200F                        18            .byte	$18
09213 2010                        00            .byte	0
09214 2011                        00            .byte	0
09215 2012                        00            .byte	0
09216                                           ! 1303  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09217 2013                        00            .byte	0
09218 2014                        F8            .byte	$F8
09219 2015                        CC            .byte	$CC
09220 2016                        CC            .byte	$CC
09221 2017                        F8            .byte	$F8
09222 2018                        C4            .byte	$C4
09223 2019                        CC            .byte	$CC
09224 201A                        DE            .byte	$DE
09225 201B                        CC            .byte	$CC
09226 201C                        CC            .byte	$CC
09227 201D                        C6            .byte	$C6
09228 201E                        00            .byte	0
09229 201F                        00            .byte	0
09230 2020                        00            .byte	0
09231                                           ! 1304  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09232 2021                        00            .byte	0
09233 2022                        0E            .byte	$E
09234 2023                        1B            .byte	$1B
09235 2024                        18            .byte	$18
09236 2025                        18            .byte	$18
09237 2026                        18            .byte	$18
09238 2027                        7E            .byte	$7E
09239 2028                        18            .byte	$18
09240 2029                        18            .byte	$18
09241 202A                        18            .byte	$18
09242 202B                        18            .byte	$18
09243 202C                        D8            .byte	$D8
09244 202D                        70            .byte	$70
09245 202E                        00            .byte	0
09246                                           ! 1305  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09247 202F                        00            .byte	0
09248 2030                        18            .byte	$18
09249 2031                        30            .byte	$30
09250 2032                        60            .byte	$60
09251 2033                        00            .byte	0
09252 2034                        78            .byte	$78
09253 2035                        0C            .byte	$C
09254 2036                        7C            .byte	$7C
09255 2037                        CC            .byte	$CC
09256 2038                        CC            .byte	$CC
09257 2039                        76            .byte	$76
09258 203A                        00            .byte	0
09259 203B                        00            .byte	0
09260 203C                        00            .byte	0
09261                                           ! 1306  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09262 203D                        00            .byte	0
09263 203E                        0C            .byte	$C
09264 203F                        18            .byte	$18
09265 2040                        30            .byte	$30
09266 2041                        00            .byte	0
09267 2042                        38            .byte	$38
09268 2043                        18            .byte	$18
09269 2044                        18            .byte	$18
09270 2045                        18            .byte	$18
09271 2046                        18            .byte	$18
09272 2047                        3C            .byte	$3C
09273 2048                        00            .byte	0
09274 2049                        00            .byte	0
09275 204A                        00            .byte	0
09276                                           ! 1307  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09277 204B                        00            .byte	0
09278 204C                        18            .byte	$18
09279 204D                        30            .byte	$30
09280 204E                        60            .byte	$60
09281 204F                        00            .byte	0
09282 2050                        7C            .byte	$7C
09283 2051                        C6            .byte	$C6
09284 2052                        C6            .byte	$C6
09285 2053                        C6            .byte	$C6
09286 2054                        C6            .byte	$C6
09287 2055                        7C            .byte	$7C
09288 2056                        00            .byte	0
09289 2057                        00            .byte	0
09290 2058                        00            .byte	0
09291                                           ! 1308  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09292 2059                        00            .byte	0
09293 205A                        18            .byte	$18
09294 205B                        30            .byte	$30
09295 205C                        60            .byte	$60
09296 205D                        00            .byte	0
09297 205E                        CC            .byte	$CC
09298 205F                        CC            .byte	$CC
09299 2060                        CC            .byte	$CC
09300 2061                        CC            .byte	$CC
09301 2062                        CC            .byte	$CC
09302 2063                        76            .byte	$76
09303 2064                        00            .byte	0
09304 2065                        00            .byte	0
09305 2066                        00            .byte	0
09306                                           ! 1309  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09307 2067                        00            .byte	0
09308 2068                        00            .byte	0
09309 2069                        76            .byte	$76
09310 206A                        DC            .byte	$DC
09311 206B                        00            .byte	0
09312 206C                        DC            .byte	$DC
09313 206D                        66            .byte	$66
09314 206E                        66            .byte	$66
09315 206F                        66            .byte	$66
09316 2070                        66            .byte	$66
09317 2071                        66            .byte	$66
09318 2072                        00            .byte	0
09319 2073                        00            .byte	0
09320 2074                        00            .byte	0
09321                                           ! 1310  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09322 2075                        76            .byte	$76
09323 2076                        DC            .byte	$DC
09324 2077                        00            .byte	0
09325 2078                        C6            .byte	$C6
09326 2079                        E6            .byte	$E6
09327 207A                        F6            .byte	$F6
09328 207B                        FE            .byte	$FE
09329 207C                        DE            .byte	$DE
09330 207D                        CE            .byte	$CE
09331 207E                        C6            .byte	$C6
09332 207F                        C6            .byte	$C6
09333 2080                        00            .byte	0
09334 2081                        00            .byte	0
09335 2082                        00            .byte	0
09336                                           ! 1311  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09337 2083                        00            .byte	0
09338 2084                        3C            .byte	$3C
09339 2085                        6C            .byte	$6C
09340 2086                        6C            .byte	$6C
09341 2087                        3E            .byte	$3E
09342 2088                        00            .byte	0
09343 2089                        7E            .byte	$7E
09344 208A                        00            .byte	0
09345 208B                        00            .byte	0
09346 208C                        00            .byte	0
09347 208D                        00            .byte	0
09348 208E                        00            .byte	0
09349 208F                        00            .byte	0
09350 2090                        00            .byte	0
09351                                           ! 1312  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09352 2091                        00            .byte	0
09353 2092                        38            .byte	$38
09354 2093                        6C            .byte	$6C
09355 2094                        6C            .byte	$6C
09356 2095                        38            .byte	$38
09357 2096                        00            .byte	0
09358 2097                        7C            .byte	$7C
09359 2098                        00            .byte	0
09360 2099                        00            .byte	0
09361 209A                        00            .byte	0
09362 209B                        00            .byte	0
09363 209C                        00            .byte	0
09364 209D                        00            .byte	0
09365 209E                        00            .byte	0
09366                                           ! 1313  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09367 209F                        00            .byte	0
09368 20A0                        00            .byte	0
09369 20A1                        30            .byte	$30
09370 20A2                        30            .byte	$30
09371 20A3                        00            .byte	0
09372 20A4                        30            .byte	$30
09373 20A5                        30            .byte	$30
09374 20A6                        60            .byte	$60
09375 20A7                        C6            .byte	$C6
09376 20A8                        C6            .byte	$C6
09377 20A9                        7C            .byte	$7C
09378 20AA                        00            .byte	0
09379 20AB                        00            .byte	0
09380 20AC                        00            .byte	0
09381                                           ! 1314  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09382 20AD                        00            .byte	0
09383 20AE                        00            .byte	0
09384 20AF                        00            .byte	0
09385 20B0                        00            .byte	0
09386 20B1                        00            .byte	0
09387 20B2                        00            .byte	0
09388 20B3                        FE            .byte	$FE
09389 20B4                        C0            .byte	$C0
09390 20B5                        C0            .byte	$C0
09391 20B6                        C0            .byte	$C0
09392 20B7                        00            .byte	0
09393 20B8                        00            .byte	0
09394 20B9                        00            .byte	0
09395 20BA                        00            .byte	0
09396                                           ! 1315  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09397 20BB                        00            .byte	0
09398 20BC                        00            .byte	0
09399 20BD                        00            .byte	0
09400 20BE                        00            .byte	0
09401 20BF                        00            .byte	0
09402 20C0                        00            .byte	0
09403 20C1                        FE            .byte	$FE
09404 20C2                        06            .byte	6
09405 20C3                        06            .byte	6
09406 20C4                        06            .byte	6
09407 20C5                        00            .byte	0
09408 20C6                        00            .byte	0
09409 20C7                        00            .byte	0
09410 20C8                        00            .byte	0
09411                                           ! 1316  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09412 20C9                        00            .byte	0
09413 20CA                        C0            .byte	$C0
09414 20CB                        C0            .byte	$C0
09415 20CC                        C6            .byte	$C6
09416 20CD                        CC            .byte	$CC
09417 20CE                        D8            .byte	$D8
09418 20CF                        30            .byte	$30
09419 20D0                        60            .byte	$60
09420 20D1                        DC            .byte	$DC
09421 20D2                        86            .byte	$86
09422 20D3                        0C            .byte	$C
09423 20D4                        18            .byte	$18
09424 20D5                        3E            .byte	$3E
09425 20D6                        00            .byte	0
09426                                           ! 1317  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09427 20D7                        00            .byte	0
09428 20D8                        C0            .byte	$C0
09429 20D9                        C0            .byte	$C0
09430 20DA                        C6            .byte	$C6
09431 20DB                        CC            .byte	$CC
09432 20DC                        D8            .byte	$D8
09433 20DD                        30            .byte	$30
09434 20DE                        66            .byte	$66
09435 20DF                        CE            .byte	$CE
09436 20E0                        9E            .byte	$9E
09437 20E1                        3E            .byte	$3E
09438 20E2                        06            .byte	6
09439 20E3                        06            .byte	6
09440 20E4                        00            .byte	0
09441                                           ! 1318  0x00, 0x00, 0x18, 0
09442 20E5                        00            .byte	0
09443 20E6                        00            .byte	0
09444 20E7                        18            .byte	$18
09445                                           ! 1318 x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09446 20E8                        18            .byte	$18
09447 20E9                        00            .byte	0
09448 20EA                        18            .byte	$18
09449 20EB                        18            .byte	$18
09450 20EC                        3C            .byte	$3C
09451 20ED                        3C            .byte	$3C
09452 20EE                        3C            .byte	$3C
09453 20EF                        18            .byte	$18
09454 20F0                        00            .byte	0
09455 20F1                        00            .byte	0
09456 20F2                        00            .byte	0
09457                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09458 20F3                        00            .byte	0
09459 20F4                        00            .byte	0
09460 20F5                        00            .byte	0
09461 20F6                        00            .byte	0
09462 20F7                        36            .byte	$36
09463 20F8                        6C            .byte	$6C
09464 20F9                        D8            .byte	$D8
09465 20FA                        6C            .byte	$6C
09466 20FB                        36            .byte	$36
09467 20FC                        00            .byte	0
09468 20FD                        00            .byte	0
09469 20FE                        00            .byte	0
09470 20FF                        00            .byte	0
09471 2100                        00            .byte	0
09472                                           ! 1320  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09473 2101                        00            .byte	0
09474 2102                        00            .byte	0
09475 2103                        00            .byte	0
09476 2104                        00            .byte	0
09477 2105                        D8            .byte	$D8
09478 2106                        6C            .byte	$6C
09479 2107                        36            .byte	$36
09480 2108                        6C            .byte	$6C
09481 2109                        D8            .byte	$D8
09482 210A                        00            .byte	0
09483 210B                        00            .byte	0
09484 210C                        00            .byte	0
09485 210D                        00            .byte	0
09486 210E                        00            .byte	0
09487                                           ! 1321  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09488 210F                        11            .byte	$11
09489 2110                        44            .byte	$44
09490 2111                        11            .byte	$11
09491 2112                        44            .byte	$44
09492 2113                        11            .byte	$11
09493 2114                        44            .byte	$44
09494 2115                        11            .byte	$11
09495 2116                        44            .byte	$44
09496 2117                        11            .byte	$11
09497 2118                        44            .byte	$44
09498 2119                        11            .byte	$11
09499 211A                        44            .byte	$44
09500 211B                        11            .byte	$11
09501 211C                        44            .byte	$44
09502                                           ! 1322  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09503 211D                        55            .byte	$55
09504 211E                        AA            .byte	$AA
09505 211F                        55            .byte	$55
09506 2120                        AA            .byte	$AA
09507 2121                        55            .byte	$55
09508 2122                        AA            .byte	$AA
09509 2123                        55            .byte	$55
09510 2124                        AA            .byte	$AA
09511 2125                        55            .byte	$55
09512 2126                        AA            .byte	$AA
09513 2127                        55            .byte	$55
09514 2128                        AA            .byte	$AA
09515 2129                        55            .byte	$55
09516 212A                        AA            .byte	$AA
09517                                           ! 1323  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09518 212B                        DD            .byte	$DD
09519 212C                        77            .byte	$77
09520 212D                        DD            .byte	$DD
09521 212E                        77            .byte	$77
09522 212F                        DD            .byte	$DD
09523 2130                        77            .byte	$77
09524 2131                        DD            .byte	$DD
09525 2132                        77            .byte	$77
09526 2133                        DD            .byte	$DD
09527 2134                        77            .byte	$77
09528 2135                        DD            .byte	$DD
09529 2136                        77            .byte	$77
09530 2137                        DD            .byte	$DD
09531 2138                        77            .byte	$77
09532                                           ! 1324  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09533 2139                        18            .byte	$18
09534 213A                        18            .byte	$18
09535 213B                        18            .byte	$18
09536 213C                        18            .byte	$18
09537 213D                        18            .byte	$18
09538 213E                        18            .byte	$18
09539 213F                        18            .byte	$18
09540 2140                        18            .byte	$18
09541 2141                        18            .byte	$18
09542 2142                        18            .byte	$18
09543 2143                        18            .byte	$18
09544 2144                        18            .byte	$18
09545 2145                        18            .byte	$18
09546 2146                        18            .byte	$18
09547                                           ! 1325  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09548 2147                        18            .byte	$18
09549 2148                        18            .byte	$18
09550 2149                        18            .byte	$18
09551 214A                        18            .byte	$18
09552 214B                        18            .byte	$18
09553 214C                        18            .byte	$18
09554 214D                        18            .byte	$18
09555 214E                        F8            .byte	$F8
09556 214F                        18            .byte	$18
09557 2150                        18            .byte	$18
09558 2151                        18            .byte	$18
09559 2152                        18            .byte	$18
09560 2153                        18            .byte	$18
09561 2154                        18            .byte	$18
09562                                           ! 1326  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09563 2155                        18            .byte	$18
09564 2156                        18            .byte	$18
09565 2157                        18            .byte	$18
09566 2158                        18            .byte	$18
09567 2159                        18            .byte	$18
09568 215A                        F8            .byte	$F8
09569 215B                        18            .byte	$18
09570 215C                        F8            .byte	$F8
09571 215D                        18            .byte	$18
09572 215E                        18            .byte	$18
09573 215F                        18            .byte	$18
09574 2160                        18            .byte	$18
09575 2161                        18            .byte	$18
09576 2162                        18            .byte	$18
09577                                           ! 1327  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09578 2163                        36            .byte	$36
09579 2164                        36            .byte	$36
09580 2165                        36            .byte	$36
09581 2166                        36            .byte	$36
09582 2167                        36            .byte	$36
09583 2168                        36            .byte	$36
09584 2169                        36            .byte	$36
09585 216A                        F6            .byte	$F6
09586 216B                        36            .byte	$36
09587 216C                        36            .byte	$36
09588 216D                        36            .byte	$36
09589 216E                        36            .byte	$36
09590 216F                        36            .byte	$36
09591 2170                        36            .byte	$36
09592                                           ! 1328  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09593 2171                        00            .byte	0
09594 2172                        00            .byte	0
09595 2173                        00            .byte	0
09596 2174                        00            .byte	0
09597 2175                        00            .byte	0
09598 2176                        00            .byte	0
09599 2177                        00            .byte	0
09600 2178                        FE            .byte	$FE
09601 2179                        36            .byte	$36
09602 217A                        36            .byte	$36
09603 217B                        36            .byte	$36
09604 217C                        36            .byte	$36
09605 217D                        36            .byte	$36
09606 217E                        36            .byte	$36
09607                                           ! 1329  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09608 217F                        00            .byte	0
09609 2180                        00            .byte	0
09610 2181                        00            .byte	0
09611 2182                        00            .byte	0
09612 2183                        00            .byte	0
09613 2184                        F8            .byte	$F8
09614 2185                        18            .byte	$18
09615 2186                        F8            .byte	$F8
09616 2187                        18            .byte	$18
09617 2188                        18            .byte	$18
09618 2189                        18            .byte	$18
09619 218A                        18            .byte	$18
09620 218B                        18            .byte	$18
09621 218C                        18            .byte	$18
09622                                           ! 1330  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09623 218D                        36            .byte	$36
09624 218E                        36            .byte	$36
09625 218F                        36            .byte	$36
09626 2190                        36            .byte	$36
09627 2191                        36            .byte	$36
09628 2192                        F6            .byte	$F6
09629 2193                        06            .byte	6
09630 2194                        F6            .byte	$F6
09631 2195                        36            .byte	$36
09632 2196                        36            .byte	$36
09633 2197                        36            .byte	$36
09634 2198                        36            .byte	$36
09635 2199                        36            .byte	$36
09636 219A                        36            .byte	$36
09637                                           ! 1331  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09638 219B                        36            .byte	$36
09639 219C                        36            .byte	$36
09640 219D                        36            .byte	$36
09641 219E                        36            .byte	$36
09642 219F                        36            .byte	$36
09643 21A0                        36            .byte	$36
09644 21A1                        36            .byte	$36
09645 21A2                        36            .byte	$36
09646 21A3                        36            .byte	$36
09647 21A4                        36            .byte	$36
09648 21A5                        36            .byte	$36
09649 21A6                        36            .byte	$36
09650 21A7                        36            .byte	$36
09651 21A8                        36            .byte	$36
09652                                           ! 1332  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09653 21A9                        00            .byte	0
09654 21AA                        00            .byte	0
09655 21AB                        00            .byte	0
09656 21AC                        00            .byte	0
09657 21AD                        00            .byte	0
09658 21AE                        FE            .byte	$FE
09659 21AF                        06            .byte	6
09660 21B0                        F6            .byte	$F6
09661 21B1                        36            .byte	$36
09662 21B2                        36            .byte	$36
09663 21B3                        36            .byte	$36
09664 21B4                        36            .byte	$36
09665 21B5                        36            .byte	$36
09666 21B6                        36            .byte	$36
09667                                           ! 1333  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09668 21B7                        36            .byte	$36
09669 21B8                        36            .byte	$36
09670 21B9                        36            .byte	$36
09671 21BA                        36            .byte	$36
09672 21BB                        36            .byte	$36
09673 21BC                        F6            .byte	$F6
09674 21BD                        06            .byte	6
09675 21BE                        FE            .byte	$FE
09676 21BF                        00            .byte	0
09677 21C0                        00            .byte	0
09678 21C1                        00            .byte	0
09679 21C2                        00            .byte	0
09680 21C3                        00            .byte	0
09681 21C4                        00            .byte	0
09682                                           ! 1334  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09683 21C5                        36            .byte	$36
09684 21C6                        36            .byte	$36
09685 21C7                        36            .byte	$36
09686 21C8                        36            .byte	$36
09687 21C9                        36            .byte	$36
09688 21CA                        36            .byte	$36
09689 21CB                        36            .byte	$36
09690 21CC                        FE            .byte	$FE
09691 21CD                        00            .byte	0
09692 21CE                        00            .byte	0
09693 21CF                        00            .byte	0
09694 21D0                        00            .byte	0
09695 21D1                        00            .byte	0
09696 21D2                        00            .byte	0
09697                                           ! 1335  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09698 21D3                        18            .byte	$18
09699 21D4                        18            .byte	$18
09700 21D5                        18            .byte	$18
09701 21D6                        18            .byte	$18
09702 21D7                        18            .byte	$18
09703 21D8                        F8            .byte	$F8
09704 21D9                        18            .byte	$18
09705 21DA                        F8            .byte	$F8
09706 21DB                        00            .byte	0
09707 21DC                        00            .byte	0
09708 21DD                        00            .byte	0
09709 21DE                        00            .byte	0
09710 21DF                        00            .byte	0
09711 21E0                        00            .byte	0
09712                                           ! 1336  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09713 21E1                        00            .byte	0
09714 21E2                        00            .byte	0
09715 21E3                        00            .byte	0
09716 21E4                        00            .byte	0
09717 21E5                        00            .byte	0
09718 21E6                        00            .byte	0
09719 21E7                        00            .byte	0
09720 21E8                        F8            .byte	$F8
09721 21E9                        18            .byte	$18
09722 21EA                        18            .byte	$18
09723 21EB                        18            .byte	$18
09724 21EC                        18            .byte	$18
09725 21ED                        18            .byte	$18
09726 21EE                        18            .byte	$18
09727                                           ! 1337  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09728 21EF                        18            .byte	$18
09729 21F0                        18            .byte	$18
09730 21F1                        18            .byte	$18
09731 21F2                        18            .byte	$18
09732 21F3                        18            .byte	$18
09733 21F4                        18            .byte	$18
09734 21F5                        18            .byte	$18
09735 21F6                        1F            .byte	$1F
09736 21F7                        00            .byte	0
09737 21F8                        00            .byte	0
09738 21F9                        00            .byte	0
09739 21FA                        00            .byte	0
09740 21FB                        00            .byte	0
09741 21FC                        00            .byte	0
09742                                           ! 1338  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09743 21FD                        18            .byte	$18
09744 21FE                        18            .byte	$18
09745 21FF                        18            .byte	$18
09746 2200                        18            .byte	$18
09747 2201                        18            .byte	$18
09748 2202                        18            .byte	$18
09749 2203                        18            .byte	$18
09750 2204                        FF            .byte	$FF
09751 2205                        00            .byte	0
09752 2206                        00            .byte	0
09753 2207                        00            .byte	0
09754 2208                        00            .byte	0
09755 2209                        00            .byte	0
09756 220A                        00            .byte	0
09757                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09758 220B                        00            .byte	0
09759 220C                        00            .byte	0
09760 220D                        00            .byte	0
09761 220E                        00            .byte	0
09762 220F                        00            .byte	0
09763 2210                        00            .byte	0
09764 2211                        00            .byte	0
09765 2212                        FF            .byte	$FF
09766 2213                        18            .byte	$18
09767 2214                        18            .byte	$18
09768 2215                        18            .byte	$18
09769 2216                        18            .byte	$18
09770 2217                        18            .byte	$18
09771 2218                        18            .byte	$18
09772                                           ! 1340  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09773 2219                        18            .byte	$18
09774 221A                        18            .byte	$18
09775 221B                        18            .byte	$18
09776 221C                        18            .byte	$18
09777 221D                        18            .byte	$18
09778 221E                        18            .byte	$18
09779 221F                        18            .byte	$18
09780 2220                        1F            .byte	$1F
09781 2221                        18            .byte	$18
09782 2222                        18            .byte	$18
09783 2223                        18            .byte	$18
09784 2224                        18            .byte	$18
09785 2225                        18            .byte	$18
09786 2226                        18            .byte	$18
09787                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09788 2227                        00            .byte	0
09789 2228                        00            .byte	0
09790 2229                        00            .byte	0
09791 222A                        00            .byte	0
09792 222B                        00            .byte	0
09793 222C                        00            .byte	0
09794 222D                        00            .byte	0
09795 222E                        FF            .byte	$FF
09796 222F                        00            .byte	0
09797 2230                        00            .byte	0
09798 2231                        00            .byte	0
09799 2232                        00            .byte	0
09800 2233                        00            .byte	0
09801 2234                        00            .byte	0
09802                                           ! 1342  0x18, 0x18, 0x18, 0x18, 0x1
09803 2235                        18            .byte	$18
09804 2236                        18            .byte	$18
09805 2237                        18            .byte	$18
09806 2238                        18            .byte	$18
09807                                           ! 1342 8, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09808 2239                        18            .byte	$18
09809 223A                        18            .byte	$18
09810 223B                        18            .byte	$18
09811 223C                        FF            .byte	$FF
09812 223D                        18            .byte	$18
09813 223E                        18            .byte	$18
09814 223F                        18            .byte	$18
09815 2240                        18            .byte	$18
09816 2241                        18            .byte	$18
09817 2242                        18            .byte	$18
09818                                           ! 1343  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09819 2243                        18            .byte	$18
09820 2244                        18            .byte	$18
09821 2245                        18            .byte	$18
09822 2246                        18            .byte	$18
09823 2247                        18            .byte	$18
09824 2248                        1F            .byte	$1F
09825 2249                        18            .byte	$18
09826 224A                        1F            .byte	$1F
09827 224B                        18            .byte	$18
09828 224C                        18            .byte	$18
09829 224D                        18            .byte	$18
09830 224E                        18            .byte	$18
09831 224F                        18            .byte	$18
09832 2250                        18            .byte	$18
09833                                           ! 1344  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09834 2251                        36            .byte	$36
09835 2252                        36            .byte	$36
09836 2253                        36            .byte	$36
09837 2254                        36            .byte	$36
09838 2255                        36            .byte	$36
09839 2256                        36            .byte	$36
09840 2257                        36            .byte	$36
09841 2258                        37            .byte	$37
09842 2259                        36            .byte	$36
09843 225A                        36            .byte	$36
09844 225B                        36            .byte	$36
09845 225C                        36            .byte	$36
09846 225D                        36            .byte	$36
09847 225E                        36            .byte	$36
09848                                           ! 1345  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09849 225F                        36            .byte	$36
09850 2260                        36            .byte	$36
09851 2261                        36            .byte	$36
09852 2262                        36            .byte	$36
09853 2263                        36            .byte	$36
09854 2264                        37            .byte	$37
09855 2265                        30            .byte	$30
09856 2266                        3F            .byte	$3F
09857 2267                        00            .byte	0
09858 2268                        00            .byte	0
09859 2269                        00            .byte	0
09860 226A                        00            .byte	0
09861 226B                        00            .byte	0
09862 226C                        00            .byte	0
09863                                           ! 1346  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09864 226D                        00            .byte	0
09865 226E                        00            .byte	0
09866 226F                        00            .byte	0
09867 2270                        00            .byte	0
09868 2271                        00            .byte	0
09869 2272                        3F            .byte	$3F
09870 2273                        30            .byte	$30
09871 2274                        37            .byte	$37
09872 2275                        36            .byte	$36
09873 2276                        36            .byte	$36
09874 2277                        36            .byte	$36
09875 2278                        36            .byte	$36
09876 2279                        36            .byte	$36
09877 227A                        36            .byte	$36
09878                                           ! 1347  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09879 227B                        36            .byte	$36
09880 227C                        36            .byte	$36
09881 227D                        36            .byte	$36
09882 227E                        36            .byte	$36
09883 227F                        36            .byte	$36
09884 2280                        F7            .byte	$F7
09885 2281                        00            .byte	0
09886 2282                        FF            .byte	$FF
09887 2283                        00            .byte	0
09888 2284                        00            .byte	0
09889 2285                        00            .byte	0
09890 2286                        00            .byte	0
09891 2287                        00            .byte	0
09892 2288                        00            .byte	0
09893                                           ! 1348  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09894 2289                        00            .byte	0
09895 228A                        00            .byte	0
09896 228B                        00            .byte	0
09897 228C                        00            .byte	0
09898 228D                        00            .byte	0
09899 228E                        FF            .byte	$FF
09900 228F                        00            .byte	0
09901 2290                        F7            .byte	$F7
09902 2291                        36            .byte	$36
09903 2292                        36            .byte	$36
09904 2293                        36            .byte	$36
09905 2294                        36            .byte	$36
09906 2295                        36            .byte	$36
09907 2296                        36            .byte	$36
09908                                           ! 1349  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09909 2297                        36            .byte	$36
09910 2298                        36            .byte	$36
09911 2299                        36            .byte	$36
09912 229A                        36            .byte	$36
09913 229B                        36            .byte	$36
09914 229C                        37            .byte	$37
09915 229D                        30            .byte	$30
09916 229E                        37            .byte	$37
09917 229F                        36            .byte	$36
09918 22A0                        36            .byte	$36
09919 22A1                        36            .byte	$36
09920 22A2                        36            .byte	$36
09921 22A3                        36            .byte	$36
09922 22A4                        36            .byte	$36
09923                                           ! 1350  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09924 22A5                        00            .byte	0
09925 22A6                        00            .byte	0
09926 22A7                        00            .byte	0
09927 22A8                        00            .byte	0
09928 22A9                        00            .byte	0
09929 22AA                        FF            .byte	$FF
09930 22AB                        00            .byte	0
09931 22AC                        FF            .byte	$FF
09932 22AD                        00            .byte	0
09933 22AE                        00            .byte	0
09934 22AF                        00            .byte	0
09935 22B0                        00            .byte	0
09936 22B1                        00            .byte	0
09937 22B2                        00            .byte	0
09938                                           ! 1351  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09939 22B3                        36            .byte	$36
09940 22B4                        36            .byte	$36
09941 22B5                        36            .byte	$36
09942 22B6                        36            .byte	$36
09943 22B7                        36            .byte	$36
09944 22B8                        F7            .byte	$F7
09945 22B9                        00            .byte	0
09946 22BA                        F7            .byte	$F7
09947 22BB                        36            .byte	$36
09948 22BC                        36            .byte	$36
09949 22BD                        36            .byte	$36
09950 22BE                        36            .byte	$36
09951 22BF                        36            .byte	$36
09952 22C0                        36            .byte	$36
09953                                           ! 1352  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09954 22C1                        18            .byte	$18
09955 22C2                        18            .byte	$18
09956 22C3                        18            .byte	$18
09957 22C4                        18            .byte	$18
09958 22C5                        18            .byte	$18
09959 22C6                        FF            .byte	$FF
09960 22C7                        00            .byte	0
09961 22C8                        FF            .byte	$FF
09962 22C9                        00            .byte	0
09963 22CA                        00            .byte	0
09964 22CB                        00            .byte	0
09965 22CC                        00            .byte	0
09966 22CD                        00            .byte	0
09967 22CE                        00            .byte	0
09968                                           ! 1353  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09969 22CF                        36            .byte	$36
09970 22D0                        36            .byte	$36
09971 22D1                        36            .byte	$36
09972 22D2                        36            .byte	$36
09973 22D3                        36            .byte	$36
09974 22D4                        36            .byte	$36
09975 22D5                        36            .byte	$36
09976 22D6                        FF            .byte	$FF
09977 22D7                        00            .byte	0
09978 22D8                        00            .byte	0
09979 22D9                        00            .byte	0
09980 22DA                        00            .byte	0
09981 22DB                        00            .byte	0
09982 22DC                        00            .byte	0
09983                                           ! 1354  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09984 22DD                        00            .byte	0
09985 22DE                        00            .byte	0
09986 22DF                        00            .byte	0
09987 22E0                        00            .byte	0
09988 22E1                        00            .byte	0
09989 22E2                        FF            .byte	$FF
09990 22E3                        00            .byte	0
09991 22E4                        FF            .byte	$FF
09992 22E5                        18            .byte	$18
09993 22E6                        18            .byte	$18
09994 22E7                        18            .byte	$18
09995 22E8                        18            .byte	$18
09996 22E9                        18            .byte	$18
09997 22EA                        18            .byte	$18
09998                                           ! 1355  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09999 22EB                        00            .byte	0
10000 22EC                        00            .byte	0
10001 22ED                        00            .byte	0
10002 22EE                        00            .byte	0
10003 22EF                        00            .byte	0
10004 22F0                        00            .byte	0
10005 22F1                        00            .byte	0
10006 22F2                        FF            .byte	$FF
10007 22F3                        36            .byte	$36
10008 22F4                        36            .byte	$36
10009 22F5                        36            .byte	$36
10010 22F6                        36            .byte	$36
10011 22F7                        36            .byte	$36
10012 22F8                        36            .byte	$36
10013                                           ! 1356  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10014 22F9                        36            .byte	$36
10015 22FA                        36            .byte	$36
10016 22FB                        36            .byte	$36
10017 22FC                        36            .byte	$36
10018 22FD                        36            .byte	$36
10019 22FE                        36            .byte	$36
10020 22FF                        36            .byte	$36
10021 2300                        3F            .byte	$3F
10022 2301                        00            .byte	0
10023 2302                        00            .byte	0
10024 2303                        00            .byte	0
10025 2304                        00            .byte	0
10026 2305                        00            .byte	0
10027 2306                        00            .byte	0
10028                                           ! 1357  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10029 2307                        18            .byte	$18
10030 2308                        18            .byte	$18
10031 2309                        18            .byte	$18
10032 230A                        18            .byte	$18
10033 230B                        18            .byte	$18
10034 230C                        1F            .byte	$1F
10035 230D                        18            .byte	$18
10036 230E                        1F            .byte	$1F
10037 230F                        00            .byte	0
10038 2310                        00            .byte	0
10039 2311                        00            .byte	0
10040 2312                        00            .byte	0
10041 2313                        00            .byte	0
10042 2314                        00            .byte	0
10043                                           ! 1358  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10044 2315                        00            .byte	0
10045 2316                        00            .byte	0
10046 2317                        00            .byte	0
10047 2318                        00            .byte	0
10048 2319                        00            .byte	0
10049 231A                        1F            .byte	$1F
10050 231B                        18            .byte	$18
10051 231C                        1F            .byte	$1F
10052 231D                        18            .byte	$18
10053 231E                        18            .byte	$18
10054 231F                        18            .byte	$18
10055 2320                        18            .byte	$18
10056 2321                        18            .byte	$18
10057 2322                        18            .byte	$18
10058                                           ! 1359  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10059 2323                        00            .byte	0
10060 2324                        00            .byte	0
10061 2325                        00            .byte	0
10062 2326                        00            .byte	0
10063 2327                        00            .byte	0
10064 2328                        00            .byte	0
10065 2329                        00            .byte	0
10066 232A                        3F            .byte	$3F
10067 232B                        36            .byte	$36
10068 232C                        36            .byte	$36
10069 232D                        36            .byte	$36
10070 232E                        36            .byte	$36
10071 232F                        36            .byte	$36
10072 2330                        36            .byte	$36
10073                                           ! 1360  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10074 2331                        36            .byte	$36
10075 2332                        36            .byte	$36
10076 2333                        36            .byte	$36
10077 2334                        36            .byte	$36
10078 2335                        36            .byte	$36
10079 2336                        36            .byte	$36
10080 2337                        36            .byte	$36
10081 2338                        FF            .byte	$FF
10082 2339                        36            .byte	$36
10083 233A                        36            .byte	$36
10084 233B                        36            .byte	$36
10085 233C                        36            .byte	$36
10086 233D                        36            .byte	$36
10087 233E                        36            .byte	$36
10088                                           ! 1361  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10089 233F                        18            .byte	$18
10090 2340                        18            .byte	$18
10091 2341                        18            .byte	$18
10092 2342                        18            .byte	$18
10093 2343                        18            .byte	$18
10094 2344                        FF            .byte	$FF
10095 2345                        18            .byte	$18
10096 2346                        FF            .byte	$FF
10097 2347                        18            .byte	$18
10098 2348                        18            .byte	$18
10099 2349                        18            .byte	$18
10100 234A                        18            .byte	$18
10101 234B                        18            .byte	$18
10102 234C                        18            .byte	$18
10103                                           ! 1362  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10104 234D                        18            .byte	$18
10105 234E                        18            .byte	$18
10106 234F                        18            .byte	$18
10107 2350                        18            .byte	$18
10108 2351                        18            .byte	$18
10109 2352                        18            .byte	$18
10110 2353                        18            .byte	$18
10111 2354                        F8            .byte	$F8
10112 2355                        00            .byte	0
10113 2356                        00            .byte	0
10114 2357                        00            .byte	0
10115 2358                        00            .byte	0
10116 2359                        00            .byte	0
10117 235A                        00            .byte	0
10118                                           ! 1363  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10119 235B                        00            .byte	0
10120 235C                        00            .byte	0
10121 235D                        00            .byte	0
10122 235E                        00            .byte	0
10123 235F                        00            .byte	0
10124 2360                        00            .byte	0
10125 2361                        00            .byte	0
10126 2362                        1F            .byte	$1F
10127 2363                        18            .byte	$18
10128 2364                        18            .byte	$18
10129 2365                        18            .byte	$18
10130 2366                        18            .byte	$18
10131 2367                        18            .byte	$18
10132 2368                        18            .byte	$18
10133                                           ! 1364  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10134 2369                        FF            .byte	$FF
10135 236A                        FF            .byte	$FF
10136 236B                        FF            .byte	$FF
10137 236C                        FF            .byte	$FF
10138 236D                        FF            .byte	$FF
10139 236E                        FF            .byte	$FF
10140 236F                        FF            .byte	$FF
10141 2370                        FF            .byte	$FF
10142 2371                        FF            .byte	$FF
10143 2372                        FF            .byte	$FF
10144 2373                        FF            .byte	$FF
10145 2374                        FF            .byte	$FF
10146 2375                        FF            .byte	$FF
10147 2376                        FF            .byte	$FF
10148                                           ! 1365  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10149 2377                        00            .byte	0
10150 2378                        00            .byte	0
10151 2379                        00            .byte	0
10152 237A                        00            .byte	0
10153 237B                        00            .byte	0
10154 237C                        00            .byte	0
10155 237D                        00            .byte	0
10156 237E                        FF            .byte	$FF
10157 237F                        FF            .byte	$FF
10158 2380                        FF            .byte	$FF
10159 2381                        FF            .byte	$FF
10160 2382                        FF            .byte	$FF
10161 2383                        FF            .byte	$FF
10162 2384                        FF            .byte	$FF
10163                                           ! 1366  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10164 2385                        F0            .byte	$F0
10165 2386                        F0            .byte	$F0
10166 2387                        F0            .byte	$F0
10167 2388                        F0            .byte	$F0
10168 2389                        F0            .byte	$F0
10169                                           ! 1366  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10170 238A                        F0            .byte	$F0
10171 238B                        F0            .byte	$F0
10172 238C                        F0            .byte	$F0
10173 238D                        F0            .byte	$F0
10174 238E                        F0            .byte	$F0
10175 238F                        F0            .byte	$F0
10176 2390                        F0            .byte	$F0
10177 2391                        F0            .byte	$F0
10178 2392                        F0            .byte	$F0
10179                                           ! 1367  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10180 2393                        0F            .byte	$F
10181 2394                        0F            .byte	$F
10182 2395                        0F            .byte	$F
10183 2396                        0F            .byte	$F
10184 2397                        0F            .byte	$F
10185 2398                        0F            .byte	$F
10186 2399                        0F            .byte	$F
10187 239A                        0F            .byte	$F
10188 239B                        0F            .byte	$F
10189 239C                        0F            .byte	$F
10190 239D                        0F            .byte	$F
10191 239E                        0F            .byte	$F
10192 239F                        0F            .byte	$F
10193 23A0                        0F            .byte	$F
10194                                           ! 1368  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10195 23A1                        FF            .byte	$FF
10196 23A2                        FF            .byte	$FF
10197 23A3                        FF            .byte	$FF
10198 23A4                        FF            .byte	$FF
10199 23A5                        FF            .byte	$FF
10200 23A6                        FF            .byte	$FF
10201 23A7                        FF            .byte	$FF
10202 23A8                        00            .byte	0
10203 23A9                        00            .byte	0
10204 23AA                        00            .byte	0
10205 23AB                        00            .byte	0
10206 23AC                        00            .byte	0
10207 23AD                        00            .byte	0
10208 23AE                        00            .byte	0
10209                                           ! 1369  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10210 23AF                        00            .byte	0
10211 23B0                        00            .byte	0
10212 23B1                        00            .byte	0
10213 23B2                        00            .byte	0
10214 23B3                        00            .byte	0
10215 23B4                        76            .byte	$76
10216 23B5                        DC            .byte	$DC
10217 23B6                        D8            .byte	$D8
10218 23B7                        D8            .byte	$D8
10219 23B8                        DC            .byte	$DC
10220 23B9                        76            .byte	$76
10221 23BA                        00            .byte	0
10222 23BB                        00            .byte	0
10223 23BC                        00            .byte	0
10224                                           ! 1370  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10225 23BD                        00            .byte	0
10226 23BE                        00            .byte	0
10227 23BF                        00            .byte	0
10228 23C0                        00            .byte	0
10229 23C1                        7C            .byte	$7C
10230 23C2                        C6            .byte	$C6
10231 23C3                        FC            .byte	$FC
10232 23C4                        C6            .byte	$C6
10233 23C5                        C6            .byte	$C6
10234 23C6                        FC            .byte	$FC
10235 23C7                        C0            .byte	$C0
10236 23C8                        C0            .byte	$C0
10237 23C9                        40            .byte	$40
10238 23CA                        00            .byte	0
10239                                           ! 1371  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10240 23CB                        00            .byte	0
10241 23CC                        00            .byte	0
10242 23CD                        FE            .byte	$FE
10243 23CE                        C6            .byte	$C6
10244 23CF                        C6            .byte	$C6
10245 23D0                        C0            .byte	$C0
10246 23D1                        C0            .byte	$C0
10247 23D2                        C0            .byte	$C0
10248 23D3                        C0            .byte	$C0
10249 23D4                        C0            .byte	$C0
10250 23D5                        C0            .byte	$C0
10251 23D6                        00            .byte	0
10252 23D7                        00            .byte	0
10253 23D8                        00            .byte	0
10254                                           ! 1372  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10255 23D9                        00            .byte	0
10256 23DA                        00            .byte	0
10257 23DB                        00            .byte	0
10258 23DC                        00            .byte	0
10259 23DD                        FE            .byte	$FE
10260 23DE                        6C            .byte	$6C
10261 23DF                        6C            .byte	$6C
10262 23E0                        6C            .byte	$6C
10263 23E1                        6C            .byte	$6C
10264 23E2                        6C            .byte	$6C
10265 23E3                        6C            .byte	$6C
10266 23E4                        00            .byte	0
10267 23E5                        00            .byte	0
10268 23E6                        00            .byte	0
10269                                           ! 1373  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10270 23E7                        00            .byte	0
10271 23E8                        00            .byte	0
10272 23E9                        FE            .byte	$FE
10273 23EA                        C6            .byte	$C6
10274 23EB                        60            .byte	$60
10275 23EC                        30            .byte	$30
10276 23ED                        18            .byte	$18
10277 23EE                        30            .byte	$30
10278 23EF                        60            .byte	$60
10279 23F0                        C6            .byte	$C6
10280 23F1                        FE            .byte	$FE
10281 23F2                        00            .byte	0
10282 23F3                        00            .byte	0
10283 23F4                        00            .byte	0
10284                                           ! 1374  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10285 23F5                        00            .byte	0
10286 23F6                        00            .byte	0
10287 23F7                        00            .byte	0
10288 23F8                        00            .byte	0
10289 23F9                        00            .byte	0
10290 23FA                        7E            .byte	$7E
10291 23FB                        D8            .byte	$D8
10292 23FC                        D8            .byte	$D8
10293 23FD                        D8            .byte	$D8
10294 23FE                        D8            .byte	$D8
10295 23FF                        70            .byte	$70
10296 2400                        00            .byte	0
10297 2401                        00            .byte	0
10298 2402                        00            .byte	0
10299                                           ! 1375  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10300 2403                        00            .byte	0
10301 2404                        00            .byte	0
10302 2405                        00            .byte	0
10303 2406                        00            .byte	0
10304 2407                        66            .byte	$66
10305 2408                        66            .byte	$66
10306 2409                        66            .byte	$66
10307 240A                        66            .byte	$66
10308 240B                        7C            .byte	$7C
10309 240C                        60            .byte	$60
10310 240D                        60            .byte	$60
10311 240E                        C0            .byte	$C0
10312 240F                        00            .byte	0
10313 2410                        00            .byte	0
10314                                           ! 1376  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10315 2411                        00            .byte	0
10316 2412                        00            .byte	0
10317 2413                        00            .byte	0
10318 2414                        00            .byte	0
10319 2415                        76            .byte	$76
10320 2416                        DC            .byte	$DC
10321 2417                        18            .byte	$18
10322 2418                        18            .byte	$18
10323 2419                        18            .byte	$18
10324 241A                        18            .byte	$18
10325 241B                        18            .byte	$18
10326 241C                        00            .byte	0
10327 241D                        00            .byte	0
10328 241E                        00            .byte	0
10329                                           ! 1377  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10330 241F                        00            .byte	0
10331 2420                        00            .byte	0
10332 2421                        7E            .byte	$7E
10333 2422                        18            .byte	$18
10334 2423                        3C            .byte	$3C
10335 2424                        66            .byte	$66
10336 2425                        66            .byte	$66
10337 2426                        66            .byte	$66
10338 2427                        3C            .byte	$3C
10339 2428                        18            .byte	$18
10340 2429                        7E            .byte	$7E
10341 242A                        00            .byte	0
10342 242B                        00            .byte	0
10343 242C                        00            .byte	0
10344                                           ! 1378  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10345 242D                        00            .byte	0
10346 242E                        00            .byte	0
10347 242F                        38            .byte	$38
10348 2430                        6C            .byte	$6C
10349 2431                        C6            .byte	$C6
10350 2432                        C6            .byte	$C6
10351 2433                        FE            .byte	$FE
10352 2434                        C6            .byte	$C6
10353 2435                        C6            .byte	$C6
10354 2436                        6C            .byte	$6C
10355 2437                        38            .byte	$38
10356 2438                        00            .byte	0
10357 2439                        00            .byte	0
10358 243A                        00            .byte	0
10359                                           ! 1379  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10360 243B                        00            .byte	0
10361 243C                        00            .byte	0
10362 243D                        38            .byte	$38
10363 243E                        6C            .byte	$6C
10364 243F                        C6            .byte	$C6
10365 2440                        C6            .byte	$C6
10366 2441                        C6            .byte	$C6
10367 2442                        6C            .byte	$6C
10368 2443                        6C            .byte	$6C
10369 2444                        6C            .byte	$6C
10370 2445                        EE            .byte	$EE
10371 2446                        00            .byte	0
10372 2447                        00            .byte	0
10373 2448                        00            .byte	0
10374                                           ! 1380  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10375 2449                        00            .byte	0
10376 244A                        00            .byte	0
10377 244B                        1E            .byte	$1E
10378 244C                        30            .byte	$30
10379 244D                        18            .byte	$18
10380 244E                        0C            .byte	$C
10381 244F                        3E            .byte	$3E
10382 2450                        66            .byte	$66
10383 2451                        66            .byte	$66
10384 2452                        66            .byte	$66
10385 2453                        3C            .byte	$3C
10386 2454                        00            .byte	0
10387 2455                        00            .byte	0
10388 2456                        00            .byte	0
10389                                           ! 1381  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10390 2457                        00            .byte	0
10391 2458                        00            .byte	0
10392 2459                        00            .byte	0
10393 245A                        00            .byte	0
10394 245B                        00            .byte	0
10395 245C                        7E            .byte	$7E
10396 245D                        DB            .byte	$DB
10397 245E                        DB            .byte	$DB
10398 245F                        7E            .byte	$7E
10399 2460                        00            .byte	0
10400 2461                        00            .byte	0
10401 2462                        00            .byte	0
10402 2463                        00            .byte	0
10403 2464                        00            .byte	0
10404                                           ! 1382  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10405 2465                        00            .byte	0
10406 2466                        00            .byte	0
10407 2467                        03            .byte	3
10408 2468                        06            .byte	6
10409 2469                        7E            .byte	$7E
10410 246A                        DB            .byte	$DB
10411 246B                        DB            .byte	$DB
10412 246C                        F3            .byte	$F3
10413 246D                        7E            .byte	$7E
10414 246E                        60            .byte	$60
10415 246F                        C0            .byte	$C0
10416 2470                        00            .byte	0
10417 2471                        00            .byte	0
10418 2472                        00            .byte	0
10419                                           ! 1383  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10420 2473                        00            .byte	0
10421 2474                        00            .byte	0
10422 2475                        1C            .byte	$1C
10423 2476                        30            .byte	$30
10424 2477                        60            .byte	$60
10425 2478                        60            .byte	$60
10426 2479                        7C            .byte	$7C
10427 247A                        60            .byte	$60
10428 247B                        60            .byte	$60
10429 247C                        30            .byte	$30
10430 247D                        1C            .byte	$1C
10431 247E                        00            .byte	0
10432 247F                        00            .byte	0
10433 2480                        00            .byte	0
10434                                           ! 1384  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10435 2481                        00            .byte	0
10436 2482                        00            .byte	0
10437 2483                        00            .byte	0
10438 2484                        7C            .byte	$7C
10439 2485                        C6            .byte	$C6
10440 2486                        C6            .byte	$C6
10441 2487                        C6            .byte	$C6
10442 2488                        C6            .byte	$C6
10443 2489                        C6            .byte	$C6
10444 248A                        C6            .byte	$C6
10445 248B                        C6            .byte	$C6
10446 248C                        00            .byte	0
10447 248D                        00            .byte	0
10448 248E                        00            .byte	0
10449                                           ! 1385  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10450 248F                        00            .byte	0
10451 2490                        00            .byte	0
10452 2491                        00            .byte	0
10453 2492                        FE            .byte	$FE
10454 2493                        00            .byte	0
10455 2494                        00            .byte	0
10456 2495                        FE            .byte	$FE
10457 2496                        00            .byte	0
10458 2497                        00            .byte	0
10459 2498                        FE            .byte	$FE
10460 2499                        00            .byte	0
10461 249A                        00            .byte	0
10462 249B                        00            .byte	0
10463 249C                        00            .byte	0
10464                                           ! 1386  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10465 249D                        00            .byte	0
10466 249E                        00            .byte	0
10467 249F                        00            .byte	0
10468 24A0                        18            .byte	$18
10469 24A1                        18            .byte	$18
10470 24A2                        7E            .byte	$7E
10471 24A3                        18            .byte	$18
10472 24A4                        18            .byte	$18
10473 24A5                        00            .byte	0
10474 24A6                        00            .byte	0
10475 24A7                        FF            .byte	$FF
10476 24A8                        00            .byte	0
10477 24A9                        00            .byte	0
10478 24AA                        00            .byte	0
10479                                           ! 1387  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10480 24AB                        00            .byte	0
10481 24AC                        00            .byte	0
10482 24AD                        30            .byte	$30
10483 24AE                        18            .byte	$18
10484 24AF                        0C            .byte	$C
10485 24B0                        06            .byte	6
10486 24B1                        0C            .byte	$C
10487 24B2                        18            .byte	$18
10488 24B3                        30            .byte	$30
10489 24B4                        00            .byte	0
10490 24B5                        7E            .byte	$7E
10491 24B6                        00            .byte	0
10492 24B7                        00            .byte	0
10493 24B8                        00            .byte	0
10494                                           ! 1388  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10495 24B9                        00            .byte	0
10496 24BA                        00            .byte	0
10497 24BB                        0C            .byte	$C
10498 24BC                        18            .byte	$18
10499 24BD                        30            .byte	$30
10500 24BE                        60            .byte	$60
10501 24BF                        30            .byte	$30
10502 24C0                        18            .byte	$18
10503 24C1                        0C            .byte	$C
10504 24C2                        00            .byte	0
10505 24C3                        7E            .byte	$7E
10506 24C4                        00            .byte	0
10507 24C5                        00            .byte	0
10508 24C6                        00            .byte	0
10509                                           ! 1389  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10510 24C7                        00            .byte	0
10511 24C8                        00            .byte	0
10512 24C9                        0E            .byte	$E
10513 24CA                        1B            .byte	$1B
10514 24CB                        1B            .byte	$1B
10515 24CC                        18            .byte	$18
10516 24CD                        18            .byte	$18
10517 24CE                        18            .byte	$18
10518 24CF                        18            .byte	$18
10519 24D0                        18            .byte	$18
10520 24D1                        18            .byte	$18
10521 24D2                        18            .byte	$18
10522 24D3                        18            .byte	$18
10523 24D4                        18            .byte	$18
10524                                           ! 1390  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0
10525 24D5                        18            .byte	$18
10526 24D6                        18            .byte	$18
10527 24D7                        18            .byte	$18
10528 24D8                        18            .byte	$18
10529 24D9                        18            .byte	$18
10530 24DA                        18            .byte	$18
10531 24DB                        18            .byte	$18
10532                                           ! 1390 x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10533 24DC                        18            .byte	$18
10534 24DD                        D8            .byte	$D8
10535 24DE                        D8            .byte	$D8
10536 24DF                        70            .byte	$70
10537 24E0                        00            .byte	0
10538 24E1                        00            .byte	0
10539 24E2                        00            .byte	0
10540                                           ! 1391  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10541 24E3                        00            .byte	0
10542 24E4                        00            .byte	0
10543 24E5                        00            .byte	0
10544 24E6                        18            .byte	$18
10545 24E7                        18            .byte	$18
10546 24E8                        00            .byte	0
10547 24E9                        7E            .byte	$7E
10548 24EA                        00            .byte	0
10549 24EB                        18            .byte	$18
10550 24EC                        18            .byte	$18
10551 24ED                        00            .byte	0
10552 24EE                        00            .byte	0
10553 24EF                        00            .byte	0
10554 24F0                        00            .byte	0
10555                                           ! 1392  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10556 24F1                        00            .byte	0
10557 24F2                        00            .byte	0
10558 24F3                        00            .byte	0
10559 24F4                        00            .byte	0
10560 24F5                        76            .byte	$76
10561 24F6                        DC            .byte	$DC
10562 24F7                        00            .byte	0
10563 24F8                        76            .byte	$76
10564 24F9                        DC            .byte	$DC
10565 24FA                        00            .byte	0
10566 24FB                        00            .byte	0
10567 24FC                        00            .byte	0
10568 24FD                        00            .byte	0
10569 24FE                        00            .byte	0
10570                                           ! 1393  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10571 24FF                        00            .byte	0
10572 2500                        38            .byte	$38
10573 2501                        6C            .byte	$6C
10574 2502                        6C            .byte	$6C
10575 2503                        38            .byte	$38
10576 2504                        00            .byte	0
10577 2505                        00            .byte	0
10578 2506                        00            .byte	0
10579 2507                        00            .byte	0
10580 2508                        00            .byte	0
10581 2509                        00            .byte	0
10582 250A                        00            .byte	0
10583 250B                        00            .byte	0
10584 250C                        00            .byte	0
10585                                           ! 1394  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10586 250D                        00            .byte	0
10587 250E                        00            .byte	0
10588 250F                        00            .byte	0
10589 2510                        00            .byte	0
10590 2511                        00            .byte	0
10591 2512                        00            .byte	0
10592 2513                        18            .byte	$18
10593 2514                        18            .byte	$18
10594 2515                        00            .byte	0
10595 2516                        00            .byte	0
10596 2517                        00            .byte	0
10597 2518                        00            .byte	0
10598 2519                        00            .byte	0
10599 251A                        00            .byte	0
10600                                           ! 1395  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10601 251B                        00            .byte	0
10602 251C                        00            .byte	0
10603 251D                        00            .byte	0
10604 251E                        00            .byte	0
10605 251F                        00            .byte	0
10606 2520                        00            .byte	0
10607 2521                        00            .byte	0
10608 2522                        18            .byte	$18
10609 2523                        00            .byte	0
10610 2524                        00            .byte	0
10611 2525                        00            .byte	0
10612 2526                        00            .byte	0
10613 2527                        00            .byte	0
10614 2528                        00            .byte	0
10615                                           ! 1396  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10616 2529                        00            .byte	0
10617 252A                        0F            .byte	$F
10618 252B                        0C            .byte	$C
10619 252C                        0C            .byte	$C
10620 252D                        0C            .byte	$C
10621 252E                        0C            .byte	$C
10622 252F                        0C            .byte	$C
10623 2530                        EC            .byte	$EC
10624 2531                        6C            .byte	$6C
10625 2532                        3C            .byte	$3C
10626 2533                        1C            .byte	$1C
10627 2534                        00            .byte	0
10628 2535                        00            .byte	0
10629 2536                        00            .byte	0
10630                                           ! 1397  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10631 2537                        00            .byte	0
10632 2538                        D8            .byte	$D8
10633 2539                        6C            .byte	$6C
10634 253A                        6C            .byte	$6C
10635 253B                        6C            .byte	$6C
10636 253C                        6C            .byte	$6C
10637 253D                        6C            .byte	$6C
10638 253E                        00            .byte	0
10639 253F                        00            .byte	0
10640 2540                        00            .byte	0
10641 2541                        00            .byte	0
10642 2542                        00            .byte	0
10643 2543                        00            .byte	0
10644 2544                        00            .byte	0
10645                                           ! 1398  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10646 2545                        00            .byte	0
10647 2546                        70            .byte	$70
10648 2547                        D8            .byte	$D8
10649 2548                        30            .byte	$30
10650 2549                        60            .byte	$60
10651 254A                        C8            .byte	$C8
10652 254B                        F8            .byte	$F8
10653 254C                        00            .byte	0
10654 254D                        00            .byte	0
10655 254E                        00            .byte	0
10656 254F                        00            .byte	0
10657 2550                        00            .byte	0
10658 2551                        00            .byte	0
10659 2552                        00            .byte	0
10660                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10661 2553                        00            .byte	0
10662 2554                        00            .byte	0
10663 2555                        00            .byte	0
10664 2556                        00            .byte	0
10665 2557                        7C            .byte	$7C
10666 2558                        7C            .byte	$7C
10667 2559                        7C            .byte	$7C
10668 255A                        7C            .byte	$7C
10669 255B                        7C            .byte	$7C
10670 255C                        7C            .byte	$7C
10671 255D                        00            .byte	0
10672 255E                        00            .byte	0
10673 255F                        00            .byte	0
10674 2560                        00            .byte	0
10675                                           ! 1400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10676 2561                        00            .byte	0
10677 2562                        00            .byte	0
10678 2563                        00            .byte	0
10679 2564                        00            .byte	0
10680 2565                        00            .byte	0
10681 2566                        00            .byte	0
10682 2567                        00            .byte	0
10683 2568                        00            .byte	0
10684 2569                        00            .byte	0
10685 256A                        00            .byte	0
10686 256B                        00            .byte	0
10687 256C                        00            .byte	0
10688 256D                        00            .byte	0
10689                                           ! 1401 };
10690 256E                        00            .byte	0
10691                                           !BCC_EOS
10692                                           ! 1402 static Bit8u vgafont16[256*16]=
10693                                           ! 1403 {
10694                       0000256F            _vgafont16:
10695                                           ! 1404  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10696 256F                        00            .byte	0
10697 2570                        00            .byte	0
10698 2571                        00            .byte	0
10699 2572                        00            .byte	0
10700 2573                        00            .byte	0
10701 2574                        00            .byte	0
10702 2575                        00            .byte	0
10703 2576                        00            .byte	0
10704 2577                        00            .byte	0
10705 2578                        00            .byte	0
10706 2579                        00            .byte	0
10707 257A                        00            .byte	0
10708 257B                        00            .byte	0
10709 257C                        00            .byte	0
10710 257D                        00            .byte	0
10711 257E                        00            .byte	0
10712                                           ! 1405  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10713 257F                        00            .byte	0
10714 2580                        00            .byte	0
10715 2581                        7E            .byte	$7E
10716 2582                        81            .byte	$81
10717 2583                        A5            .byte	$A5
10718 2584                        81            .byte	$81
10719 2585                        81            .byte	$81
10720 2586                        BD            .byte	$BD
10721 2587                        99            .byte	$99
10722 2588                        81            .byte	$81
10723 2589                        81            .byte	$81
10724 258A                        7E            .byte	$7E
10725 258B                        00            .byte	0
10726 258C                        00            .byte	0
10727 258D                        00            .byte	0
10728 258E                        00            .byte	0
10729                                           ! 1406  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10730 258F                        00            .byte	0
10731 2590                        00            .byte	0
10732 2591                        7E            .byte	$7E
10733 2592                        FF            .byte	$FF
10734 2593                        DB            .byte	$DB
10735 2594                        FF            .byte	$FF
10736 2595                        FF            .byte	$FF
10737 2596                        C3            .byte	$C3
10738 2597                        E7            .byte	$E7
10739 2598                        FF            .byte	$FF
10740 2599                        FF            .byte	$FF
10741 259A                        7E            .byte	$7E
10742 259B                        00            .byte	0
10743 259C                        00            .byte	0
10744 259D                        00            .byte	0
10745 259E                        00            .byte	0
10746                                           ! 1407  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10747 259F                        00            .byte	0
10748 25A0                        00            .byte	0
10749 25A1                        00            .byte	0
10750 25A2                        00            .byte	0
10751 25A3                        6C            .byte	$6C
10752 25A4                        FE            .byte	$FE
10753 25A5                        FE            .byte	$FE
10754 25A6                        FE            .byte	$FE
10755 25A7                        FE            .byte	$FE
10756 25A8                        7C            .byte	$7C
10757 25A9                        38            .byte	$38
10758 25AA                        10            .byte	$10
10759 25AB                        00            .byte	0
10760 25AC                        00            .byte	0
10761 25AD                        00            .byte	0
10762 25AE                        00            .byte	0
10763                                           ! 1408  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10764 25AF                        00            .byte	0
10765 25B0                        00            .byte	0
10766 25B1                        00            .byte	0
10767 25B2                        00            .byte	0
10768 25B3                        10            .byte	$10
10769 25B4                        38            .byte	$38
10770 25B5                        7C            .byte	$7C
10771 25B6                        FE            .byte	$FE
10772 25B7                        7C            .byte	$7C
10773 25B8                        38            .byte	$38
10774 25B9                        10            .byte	$10
10775 25BA                        00            .byte	0
10776 25BB                        00            .byte	0
10777 25BC                        00            .byte	0
10778 25BD                        00            .byte	0
10779 25BE                        00            .byte	0
10780                                           ! 1409  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10781 25BF                        00            .byte	0
10782 25C0                        00            .byte	0
10783 25C1                        00            .byte	0
10784 25C2                        18            .byte	$18
10785 25C3                        3C            .byte	$3C
10786 25C4                        3C            .byte	$3C
10787 25C5                        E7            .byte	$E7
10788 25C6                        E7            .byte	$E7
10789 25C7                        E7            .byte	$E7
10790 25C8                        18            .byte	$18
10791 25C9                        18            .byte	$18
10792 25CA                        3C            .byte	$3C
10793 25CB                        00            .byte	0
10794 25CC                        00            .byte	0
10795 25CD                        00            .byte	0
10796 25CE                        00            .byte	0
10797                                           ! 1410  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10798 25CF                        00            .byte	0
10799 25D0                        00            .byte	0
10800 25D1                        00            .byte	0
10801 25D2                        18            .byte	$18
10802 25D3                        3C            .byte	$3C
10803 25D4                        7E            .byte	$7E
10804 25D5                        FF            .byte	$FF
10805 25D6                        FF            .byte	$FF
10806 25D7                        7E            .byte	$7E
10807 25D8                        18            .byte	$18
10808 25D9                        18            .byte	$18
10809 25DA                        3C            .byte	$3C
10810 25DB                        00            .byte	0
10811 25DC                        00            .byte	0
10812 25DD                        00            .byte	0
10813 25DE                        00            .byte	0
10814                                           ! 1411  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10815 25DF                        00            .byte	0
10816 25E0                        00            .byte	0
10817 25E1                        00            .byte	0
10818 25E2                        00            .byte	0
10819 25E3                        00            .byte	0
10820 25E4                        00            .byte	0
10821 25E5                        18            .byte	$18
10822 25E6                        3C            .byte	$3C
10823 25E7                        3C            .byte	$3C
10824 25E8                        18            .byte	$18
10825 25E9                        00            .byte	0
10826 25EA                        00            .byte	0
10827 25EB                        00            .byte	0
10828 25EC                        00            .byte	0
10829 25ED                        00            .byte	0
10830 25EE                        00            .byte	0
10831                                           ! 1412  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10832 25EF                        FF            .byte	$FF
10833 25F0                        FF            .byte	$FF
10834 25F1                        FF            .byte	$FF
10835 25F2                        FF            .byte	$FF
10836 25F3                        FF            .byte	$FF
10837 25F4                        FF            .byte	$FF
10838 25F5                        E7            .byte	$E7
10839 25F6                        C3            .byte	$C3
10840 25F7                        C3            .byte	$C3
10841 25F8                        E7            .byte	$E7
10842 25F9                        FF            .byte	$FF
10843 25FA                        FF            .byte	$FF
10844 25FB                        FF            .byte	$FF
10845 25FC                        FF            .byte	$FF
10846 25FD                        FF            .byte	$FF
10847 25FE                        FF            .byte	$FF
10848                                           ! 1413  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10849 25FF                        00            .byte	0
10850 2600                        00            .byte	0
10851 2601                        00            .byte	0
10852 2602                        00            .byte	0
10853 2603                        00            .byte	0
10854 2604                        3C            .byte	$3C
10855 2605                        66            .byte	$66
10856 2606                        42            .byte	$42
10857 2607                        42            .byte	$42
10858 2608                        66            .byte	$66
10859 2609                        3C            .byte	$3C
10860 260A                        00            .byte	0
10861 260B                        00            .byte	0
10862 260C                        00            .byte	0
10863 260D                        00            .byte	0
10864 260E                        00            .byte	0
10865                                           ! 1414  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10866 260F                        FF            .byte	$FF
10867 2610                        FF            .byte	$FF
10868 2611                        FF            .byte	$FF
10869 2612                        FF            .byte	$FF
10870 2613                        FF            .byte	$FF
10871 2614                        C3            .byte	$C3
10872 2615                        99            .byte	$99
10873 2616                        BD            .byte	$BD
10874 2617                        BD            .byte	$BD
10875 2618                        99            .byte	$99
10876 2619                        C3            .byte	$C3
10877 261A                        FF            .byte	$FF
10878 261B                        FF            .byte	$FF
10879 261C                        FF            .byte	$FF
10880 261D                        FF            .byte	$FF
10881 261E                        FF            .byte	$FF
10882                                           ! 1415  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc,
10883 261F                        00            .byte	0
10884 2620                        00            .byte	0
10885 2621                        1E            .byte	$1E
10886 2622                        0E            .byte	$E
10887 2623                        1A            .byte	$1A
10888 2624                        32            .byte	$32
10889 2625                        78            .byte	$78
10890 2626                        CC            .byte	$CC
10891                                           ! 1415  0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10892 2627                        CC            .byte	$CC
10893 2628                        CC            .byte	$CC
10894 2629                        CC            .byte	$CC
10895 262A                        78            .byte	$78
10896 262B                        00            .byte	0
10897 262C                        00            .byte	0
10898 262D                        00            .byte	0
10899 262E                        00            .byte	0
10900                                           ! 1416  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10901 262F                        00            .byte	0
10902 2630                        00            .byte	0
10903 2631                        3C            .byte	$3C
10904 2632                        66            .byte	$66
10905 2633                        66            .byte	$66
10906 2634                        66            .byte	$66
10907 2635                        66            .byte	$66
10908 2636                        3C            .byte	$3C
10909 2637                        18            .byte	$18
10910 2638                        7E            .byte	$7E
10911 2639                        18            .byte	$18
10912 263A                        18            .byte	$18
10913 263B                        00            .byte	0
10914 263C                        00            .byte	0
10915 263D                        00            .byte	0
10916 263E                        00            .byte	0
10917                                           ! 1417  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10918 263F                        00            .byte	0
10919 2640                        00            .byte	0
10920 2641                        3F            .byte	$3F
10921 2642                        33            .byte	$33
10922 2643                        3F            .byte	$3F
10923 2644                        30            .byte	$30
10924 2645                        30            .byte	$30
10925 2646                        30            .byte	$30
10926 2647                        30            .byte	$30
10927 2648                        70            .byte	$70
10928 2649                        F0            .byte	$F0
10929 264A                        E0            .byte	$E0
10930 264B                        00            .byte	0
10931 264C                        00            .byte	0
10932 264D                        00            .byte	0
10933 264E                        00            .byte	0
10934                                           ! 1418  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10935 264F                        00            .byte	0
10936 2650                        00            .byte	0
10937 2651                        7F            .byte	$7F
10938 2652                        63            .byte	$63
10939 2653                        7F            .byte	$7F
10940 2654                        63            .byte	$63
10941 2655                        63            .byte	$63
10942 2656                        63            .byte	$63
10943 2657                        63            .byte	$63
10944 2658                        67            .byte	$67
10945 2659                        E7            .byte	$E7
10946 265A                        E6            .byte	$E6
10947 265B                        C0            .byte	$C0
10948 265C                        00            .byte	0
10949 265D                        00            .byte	0
10950 265E                        00            .byte	0
10951                                           ! 1419  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10952 265F                        00            .byte	0
10953 2660                        00            .byte	0
10954 2661                        00            .byte	0
10955 2662                        18            .byte	$18
10956 2663                        18            .byte	$18
10957 2664                        DB            .byte	$DB
10958 2665                        3C            .byte	$3C
10959 2666                        E7            .byte	$E7
10960 2667                        3C            .byte	$3C
10961 2668                        DB            .byte	$DB
10962 2669                        18            .byte	$18
10963 266A                        18            .byte	$18
10964 266B                        00            .byte	0
10965 266C                        00            .byte	0
10966 266D                        00            .byte	0
10967 266E                        00            .byte	0
10968                                           ! 1420  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10969 266F                        00            .byte	0
10970 2670                        80            .byte	$80
10971 2671                        C0            .byte	$C0
10972 2672                        E0            .byte	$E0
10973 2673                        F0            .byte	$F0
10974 2674                        F8            .byte	$F8
10975 2675                        FE            .byte	$FE
10976 2676                        F8            .byte	$F8
10977 2677                        F0            .byte	$F0
10978 2678                        E0            .byte	$E0
10979 2679                        C0            .byte	$C0
10980 267A                        80            .byte	$80
10981 267B                        00            .byte	0
10982 267C                        00            .byte	0
10983 267D                        00            .byte	0
10984 267E                        00            .byte	0
10985                                           ! 1421  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10986 267F                        00            .byte	0
10987 2680                        02            .byte	2
10988 2681                        06            .byte	6
10989 2682                        0E            .byte	$E
10990 2683                        1E            .byte	$1E
10991 2684                        3E            .byte	$3E
10992 2685                        FE            .byte	$FE
10993 2686                        3E            .byte	$3E
10994 2687                        1E            .byte	$1E
10995 2688                        0E            .byte	$E
10996 2689                        06            .byte	6
10997 268A                        02            .byte	2
10998 268B                        00            .byte	0
10999 268C                        00            .byte	0
11000 268D                        00            .byte	0
11001 268E                        00            .byte	0
11002                                           ! 1422  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11003 268F                        00            .byte	0
11004 2690                        00            .byte	0
11005 2691                        18            .byte	$18
11006 2692                        3C            .byte	$3C
11007 2693                        7E            .byte	$7E
11008 2694                        18            .byte	$18
11009 2695                        18            .byte	$18
11010 2696                        18            .byte	$18
11011 2697                        7E            .byte	$7E
11012 2698                        3C            .byte	$3C
11013 2699                        18            .byte	$18
11014 269A                        00            .byte	0
11015 269B                        00            .byte	0
11016 269C                        00            .byte	0
11017 269D                        00            .byte	0
11018 269E                        00            .byte	0
11019                                           ! 1423  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11020 269F                        00            .byte	0
11021 26A0                        00            .byte	0
11022 26A1                        66            .byte	$66
11023 26A2                        66            .byte	$66
11024 26A3                        66            .byte	$66
11025 26A4                        66            .byte	$66
11026 26A5                        66            .byte	$66
11027 26A6                        66            .byte	$66
11028 26A7                        66            .byte	$66
11029 26A8                        00            .byte	0
11030 26A9                        66            .byte	$66
11031 26AA                        66            .byte	$66
11032 26AB                        00            .byte	0
11033 26AC                        00            .byte	0
11034 26AD                        00            .byte	0
11035 26AE                        00            .byte	0
11036                                           ! 1424  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11037 26AF                        00            .byte	0
11038 26B0                        00            .byte	0
11039 26B1                        7F            .byte	$7F
11040 26B2                        DB            .byte	$DB
11041 26B3                        DB            .byte	$DB
11042 26B4                        DB            .byte	$DB
11043 26B5                        7B            .byte	$7B
11044 26B6                        1B            .byte	$1B
11045 26B7                        1B            .byte	$1B
11046 26B8                        1B            .byte	$1B
11047 26B9                        1B            .byte	$1B
11048 26BA                        1B            .byte	$1B
11049 26BB                        00            .byte	0
11050 26BC                        00            .byte	0
11051 26BD                        00            .byte	0
11052 26BE                        00            .byte	0
11053                                           ! 1425  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11054 26BF                        00            .byte	0
11055 26C0                        7C            .byte	$7C
11056 26C1                        C6            .byte	$C6
11057 26C2                        60            .byte	$60
11058 26C3                        38            .byte	$38
11059 26C4                        6C            .byte	$6C
11060 26C5                        C6            .byte	$C6
11061 26C6                        C6            .byte	$C6
11062 26C7                        6C            .byte	$6C
11063 26C8                        38            .byte	$38
11064 26C9                        0C            .byte	$C
11065 26CA                        C6            .byte	$C6
11066 26CB                        7C            .byte	$7C
11067 26CC                        00            .byte	0
11068 26CD                        00            .byte	0
11069 26CE                        00            .byte	0
11070                                           ! 1426  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11071 26CF                        00            .byte	0
11072 26D0                        00            .byte	0
11073 26D1                        00            .byte	0
11074 26D2                        00            .byte	0
11075 26D3                        00            .byte	0
11076 26D4                        00            .byte	0
11077 26D5                        00            .byte	0
11078 26D6                        00            .byte	0
11079 26D7                        FE            .byte	$FE
11080 26D8                        FE            .byte	$FE
11081 26D9                        FE            .byte	$FE
11082 26DA                        FE            .byte	$FE
11083 26DB                        00            .byte	0
11084 26DC                        00            .byte	0
11085 26DD                        00            .byte	0
11086 26DE                        00            .byte	0
11087                                           ! 1427  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11088 26DF                        00            .byte	0
11089 26E0                        00            .byte	0
11090 26E1                        18            .byte	$18
11091 26E2                        3C            .byte	$3C
11092 26E3                        7E            .byte	$7E
11093 26E4                        18            .byte	$18
11094 26E5                        18            .byte	$18
11095 26E6                        18            .byte	$18
11096 26E7                        7E            .byte	$7E
11097 26E8                        3C            .byte	$3C
11098 26E9                        18            .byte	$18
11099 26EA                        7E            .byte	$7E
11100 26EB                        00            .byte	0
11101 26EC                        00            .byte	0
11102 26ED                        00            .byte	0
11103 26EE                        00            .byte	0
11104                                           ! 1428  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11105 26EF                        00            .byte	0
11106 26F0                        00            .byte	0
11107 26F1                        18            .byte	$18
11108 26F2                        3C            .byte	$3C
11109 26F3                        7E            .byte	$7E
11110 26F4                        18            .byte	$18
11111 26F5                        18            .byte	$18
11112 26F6                        18            .byte	$18
11113 26F7                        18            .byte	$18
11114 26F8                        18            .byte	$18
11115 26F9                        18            .byte	$18
11116 26FA                        18            .byte	$18
11117 26FB                        00            .byte	0
11118 26FC                        00            .byte	0
11119 26FD                        00            .byte	0
11120 26FE                        00            .byte	0
11121                                           ! 1429  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11122 26FF                        00            .byte	0
11123 2700                        00            .byte	0
11124 2701                        18            .byte	$18
11125 2702                        18            .byte	$18
11126 2703                        18            .byte	$18
11127 2704                        18            .byte	$18
11128 2705                        18            .byte	$18
11129 2706                        18            .byte	$18
11130 2707                        18            .byte	$18
11131 2708                        7E            .byte	$7E
11132 2709                        3C            .byte	$3C
11133 270A                        18            .byte	$18
11134 270B                        00            .byte	0
11135 270C                        00            .byte	0
11136 270D                        00            .byte	0
11137 270E                        00            .byte	0
11138                                           ! 1430  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11139 270F                        00            .byte	0
11140 2710                        00            .byte	0
11141 2711                        00            .byte	0
11142 2712                        00            .byte	0
11143 2713                        00            .byte	0
11144 2714                        18            .byte	$18
11145 2715                        0C            .byte	$C
11146 2716                        FE            .byte	$FE
11147 2717                        0C            .byte	$C
11148 2718                        18            .byte	$18
11149 2719                        00            .byte	0
11150 271A                        00            .byte	0
11151 271B                        00            .byte	0
11152 271C                        00            .byte	0
11153 271D                        00            .byte	0
11154 271E                        00            .byte	0
11155                                           ! 1431  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11156 271F                        00            .byte	0
11157 2720                        00            .byte	0
11158 2721                        00            .byte	0
11159 2722                        00            .byte	0
11160 2723                        00            .byte	0
11161 2724                        30            .byte	$30
11162 2725                        60            .byte	$60
11163 2726                        FE            .byte	$FE
11164 2727                        60            .byte	$60
11165 2728                        30            .byte	$30
11166 2729                        00            .byte	0
11167 272A                        00            .byte	0
11168 272B                        00            .byte	0
11169 272C                        00            .byte	0
11170 272D                        00            .byte	0
11171 272E                        00            .byte	0
11172                                           ! 1432  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11173 272F                        00            .byte	0
11174 2730                        00            .byte	0
11175 2731                        00            .byte	0
11176 2732                        00            .byte	0
11177 2733                        00            .byte	0
11178 2734                        00            .byte	0
11179 2735                        C0            .byte	$C0
11180 2736                        C0            .byte	$C0
11181 2737                        C0            .byte	$C0
11182 2738                        FE            .byte	$FE
11183 2739                        00            .byte	0
11184 273A                        00            .byte	0
11185 273B                        00            .byte	0
11186 273C                        00            .byte	0
11187 273D                        00            .byte	0
11188 273E                        00            .byte	0
11189                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11190 273F                        00            .byte	0
11191 2740                        00            .byte	0
11192 2741                        00            .byte	0
11193 2742                        00            .byte	0
11194 2743                        00            .byte	0
11195 2744                        24            .byte	$24
11196 2745                        66            .byte	$66
11197 2746                        FF            .byte	$FF
11198 2747                        66            .byte	$66
11199 2748                        24            .byte	$24
11200 2749                        00            .byte	0
11201 274A                        00            .byte	0
11202 274B                        00            .byte	0
11203 274C                        00            .byte	0
11204 274D                        00            .byte	0
11205 274E                        00            .byte	0
11206                                           ! 1434  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11207 274F                        00            .byte	0
11208 2750                        00            .byte	0
11209 2751                        00            .byte	0
11210 2752                        00            .byte	0
11211 2753                        10            .byte	$10
11212 2754                        38            .byte	$38
11213 2755                        38            .byte	$38
11214 2756                        7C            .byte	$7C
11215 2757                        7C            .byte	$7C
11216 2758                        FE            .byte	$FE
11217 2759                        FE            .byte	$FE
11218 275A                        00            .byte	0
11219 275B                        00            .byte	0
11220 275C                        00            .byte	0
11221 275D                        00            .byte	0
11222 275E                        00            .byte	0
11223                                           ! 1435  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11224 275F                        00            .byte	0
11225 2760                        00            .byte	0
11226 2761                        00            .byte	0
11227 2762                        00            .byte	0
11228 2763                        FE            .byte	$FE
11229 2764                        FE            .byte	$FE
11230 2765                        7C            .byte	$7C
11231 2766                        7C            .byte	$7C
11232 2767                        38            .byte	$38
11233 2768                        38            .byte	$38
11234 2769                        10            .byte	$10
11235 276A                        00            .byte	0
11236 276B                        00            .byte	0
11237 276C                        00            .byte	0
11238 276D                        00            .byte	0
11239 276E                        00            .byte	0
11240                                           ! 1436  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
11241 276F                        00            .byte	0
11242 2770                        00            .byte	0
11243 2771                        00            .byte	0
11244 2772                        00            .byte	0
11245 2773                        00            .byte	0
11246 2774                        00            .byte	0
11247 2775                        00            .byte	0
11248 2776                        00            .byte	0
11249 2777                        00            .byte	0
11250 2778                        00            .byte	0
11251                                           ! 1436 , 0x00, 0x00, 0x00, 0x00, 0x00,
11252 2779                        00            .byte	0
11253 277A                        00            .byte	0
11254 277B                        00            .byte	0
11255 277C                        00            .byte	0
11256 277D                        00            .byte	0
11257 277E                        00            .byte	0
11258                                           ! 1437  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11259 277F                        00            .byte	0
11260 2780                        00            .byte	0
11261 2781                        18            .byte	$18
11262 2782                        3C            .byte	$3C
11263 2783                        3C            .byte	$3C
11264 2784                        3C            .byte	$3C
11265 2785                        18            .byte	$18
11266 2786                        18            .byte	$18
11267 2787                        18            .byte	$18
11268 2788                        00            .byte	0
11269 2789                        18            .byte	$18
11270 278A                        18            .byte	$18
11271 278B                        00            .byte	0
11272 278C                        00            .byte	0
11273 278D                        00            .byte	0
11274 278E                        00            .byte	0
11275                                           ! 1438  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11276 278F                        00            .byte	0
11277 2790                        66            .byte	$66
11278 2791                        66            .byte	$66
11279 2792                        66            .byte	$66
11280 2793                        24            .byte	$24
11281 2794                        00            .byte	0
11282 2795                        00            .byte	0
11283 2796                        00            .byte	0
11284 2797                        00            .byte	0
11285 2798                        00            .byte	0
11286 2799                        00            .byte	0
11287 279A                        00            .byte	0
11288 279B                        00            .byte	0
11289 279C                        00            .byte	0
11290 279D                        00            .byte	0
11291 279E                        00            .byte	0
11292                                           ! 1439  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11293 279F                        00            .byte	0
11294 27A0                        00            .byte	0
11295 27A1                        00            .byte	0
11296 27A2                        6C            .byte	$6C
11297 27A3                        6C            .byte	$6C
11298 27A4                        FE            .byte	$FE
11299 27A5                        6C            .byte	$6C
11300 27A6                        6C            .byte	$6C
11301 27A7                        6C            .byte	$6C
11302 27A8                        FE            .byte	$FE
11303 27A9                        6C            .byte	$6C
11304 27AA                        6C            .byte	$6C
11305 27AB                        00            .byte	0
11306 27AC                        00            .byte	0
11307 27AD                        00            .byte	0
11308 27AE                        00            .byte	0
11309                                           ! 1440  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11310 27AF                        18            .byte	$18
11311 27B0                        18            .byte	$18
11312 27B1                        7C            .byte	$7C
11313 27B2                        C6            .byte	$C6
11314 27B3                        C2            .byte	$C2
11315 27B4                        C0            .byte	$C0
11316 27B5                        7C            .byte	$7C
11317 27B6                        06            .byte	6
11318 27B7                        06            .byte	6
11319 27B8                        86            .byte	$86
11320 27B9                        C6            .byte	$C6
11321 27BA                        7C            .byte	$7C
11322 27BB                        18            .byte	$18
11323 27BC                        18            .byte	$18
11324 27BD                        00            .byte	0
11325 27BE                        00            .byte	0
11326                                           ! 1441  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11327 27BF                        00            .byte	0
11328 27C0                        00            .byte	0
11329 27C1                        00            .byte	0
11330 27C2                        00            .byte	0
11331 27C3                        C2            .byte	$C2
11332 27C4                        C6            .byte	$C6
11333 27C5                        0C            .byte	$C
11334 27C6                        18            .byte	$18
11335 27C7                        30            .byte	$30
11336 27C8                        60            .byte	$60
11337 27C9                        C6            .byte	$C6
11338 27CA                        86            .byte	$86
11339 27CB                        00            .byte	0
11340 27CC                        00            .byte	0
11341 27CD                        00            .byte	0
11342 27CE                        00            .byte	0
11343                                           ! 1442  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11344 27CF                        00            .byte	0
11345 27D0                        00            .byte	0
11346 27D1                        38            .byte	$38
11347 27D2                        6C            .byte	$6C
11348 27D3                        6C            .byte	$6C
11349 27D4                        38            .byte	$38
11350 27D5                        76            .byte	$76
11351 27D6                        DC            .byte	$DC
11352 27D7                        CC            .byte	$CC
11353 27D8                        CC            .byte	$CC
11354 27D9                        CC            .byte	$CC
11355 27DA                        76            .byte	$76
11356 27DB                        00            .byte	0
11357 27DC                        00            .byte	0
11358 27DD                        00            .byte	0
11359 27DE                        00            .byte	0
11360                                           ! 1443  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11361 27DF                        00            .byte	0
11362 27E0                        30            .byte	$30
11363 27E1                        30            .byte	$30
11364 27E2                        30            .byte	$30
11365 27E3                        60            .byte	$60
11366 27E4                        00            .byte	0
11367 27E5                        00            .byte	0
11368 27E6                        00            .byte	0
11369 27E7                        00            .byte	0
11370 27E8                        00            .byte	0
11371 27E9                        00            .byte	0
11372 27EA                        00            .byte	0
11373 27EB                        00            .byte	0
11374 27EC                        00            .byte	0
11375 27ED                        00            .byte	0
11376 27EE                        00            .byte	0
11377                                           ! 1444  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11378 27EF                        00            .byte	0
11379 27F0                        00            .byte	0
11380 27F1                        0C            .byte	$C
11381 27F2                        18            .byte	$18
11382 27F3                        30            .byte	$30
11383 27F4                        30            .byte	$30
11384 27F5                        30            .byte	$30
11385 27F6                        30            .byte	$30
11386 27F7                        30            .byte	$30
11387 27F8                        30            .byte	$30
11388 27F9                        18            .byte	$18
11389 27FA                        0C            .byte	$C
11390 27FB                        00            .byte	0
11391 27FC                        00            .byte	0
11392 27FD                        00            .byte	0
11393 27FE                        00            .byte	0
11394                                           ! 1445  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11395 27FF                        00            .byte	0
11396 2800                        00            .byte	0
11397 2801                        30            .byte	$30
11398 2802                        18            .byte	$18
11399 2803                        0C            .byte	$C
11400 2804                        0C            .byte	$C
11401 2805                        0C            .byte	$C
11402 2806                        0C            .byte	$C
11403 2807                        0C            .byte	$C
11404 2808                        0C            .byte	$C
11405 2809                        18            .byte	$18
11406 280A                        30            .byte	$30
11407 280B                        00            .byte	0
11408 280C                        00            .byte	0
11409 280D                        00            .byte	0
11410 280E                        00            .byte	0
11411                                           ! 1446  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11412 280F                        00            .byte	0
11413 2810                        00            .byte	0
11414 2811                        00            .byte	0
11415 2812                        00            .byte	0
11416 2813                        00            .byte	0
11417 2814                        66            .byte	$66
11418 2815                        3C            .byte	$3C
11419 2816                        FF            .byte	$FF
11420 2817                        3C            .byte	$3C
11421 2818                        66            .byte	$66
11422 2819                        00            .byte	0
11423 281A                        00            .byte	0
11424 281B                        00            .byte	0
11425 281C                        00            .byte	0
11426 281D                        00            .byte	0
11427 281E                        00            .byte	0
11428                                           ! 1447  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11429 281F                        00            .byte	0
11430 2820                        00            .byte	0
11431 2821                        00            .byte	0
11432 2822                        00            .byte	0
11433 2823                        00            .byte	0
11434 2824                        18            .byte	$18
11435 2825                        18            .byte	$18
11436 2826                        7E            .byte	$7E
11437 2827                        18            .byte	$18
11438 2828                        18            .byte	$18
11439 2829                        00            .byte	0
11440 282A                        00            .byte	0
11441 282B                        00            .byte	0
11442 282C                        00            .byte	0
11443 282D                        00            .byte	0
11444 282E                        00            .byte	0
11445                                           ! 1448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11446 282F                        00            .byte	0
11447 2830                        00            .byte	0
11448 2831                        00            .byte	0
11449 2832                        00            .byte	0
11450 2833                        00            .byte	0
11451 2834                        00            .byte	0
11452 2835                        00            .byte	0
11453 2836                        00            .byte	0
11454 2837                        00            .byte	0
11455 2838                        18            .byte	$18
11456 2839                        18            .byte	$18
11457 283A                        18            .byte	$18
11458 283B                        30            .byte	$30
11459 283C                        00            .byte	0
11460 283D                        00            .byte	0
11461 283E                        00            .byte	0
11462                                           ! 1449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11463 283F                        00            .byte	0
11464 2840                        00            .byte	0
11465 2841                        00            .byte	0
11466 2842                        00            .byte	0
11467 2843                        00            .byte	0
11468 2844                        00            .byte	0
11469 2845                        00            .byte	0
11470 2846                        FE            .byte	$FE
11471 2847                        00            .byte	0
11472 2848                        00            .byte	0
11473 2849                        00            .byte	0
11474 284A                        00            .byte	0
11475 284B                        00            .byte	0
11476 284C                        00            .byte	0
11477 284D                        00            .byte	0
11478 284E                        00            .byte	0
11479                                           ! 1450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11480 284F                        00            .byte	0
11481 2850                        00            .byte	0
11482 2851                        00            .byte	0
11483 2852                        00            .byte	0
11484 2853                        00            .byte	0
11485 2854                        00            .byte	0
11486 2855                        00            .byte	0
11487 2856                        00            .byte	0
11488 2857                        00            .byte	0
11489 2858                        00            .byte	0
11490 2859                        18            .byte	$18
11491 285A                        18            .byte	$18
11492 285B                        00            .byte	0
11493 285C                        00            .byte	0
11494 285D                        00            .byte	0
11495 285E                        00            .byte	0
11496                                           ! 1451  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11497 285F                        00            .byte	0
11498 2860                        00            .byte	0
11499 2861                        00            .byte	0
11500 2862                        00            .byte	0
11501 2863                        02            .byte	2
11502 2864                        06            .byte	6
11503 2865                        0C            .byte	$C
11504 2866                        18            .byte	$18
11505 2867                        30            .byte	$30
11506 2868                        60            .byte	$60
11507 2869                        C0            .byte	$C0
11508 286A                        80            .byte	$80
11509 286B                        00            .byte	0
11510 286C                        00            .byte	0
11511 286D                        00            .byte	0
11512 286E                        00            .byte	0
11513                                           ! 1452  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11514 286F                        00            .byte	0
11515 2870                        00            .byte	0
11516 2871                        3C            .byte	$3C
11517 2872                        66            .byte	$66
11518 2873                        C3            .byte	$C3
11519 2874                        C3            .byte	$C3
11520 2875                        DB            .byte	$DB
11521 2876                        DB            .byte	$DB
11522 2877                        C3            .byte	$C3
11523 2878                        C3            .byte	$C3
11524 2879                        66            .byte	$66
11525 287A                        3C            .byte	$3C
11526 287B                        00            .byte	0
11527 287C                        00            .byte	0
11528 287D                        00            .byte	0
11529 287E                        00            .byte	0
11530                                           ! 1453  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11531 287F                        00            .byte	0
11532 2880                        00            .byte	0
11533 2881                        18            .byte	$18
11534 2882                        38            .byte	$38
11535 2883                        78            .byte	$78
11536 2884                        18            .byte	$18
11537 2885                        18            .byte	$18
11538 2886                        18            .byte	$18
11539 2887                        18            .byte	$18
11540 2888                        18            .byte	$18
11541 2889                        18            .byte	$18
11542 288A                        7E            .byte	$7E
11543 288B                        00            .byte	0
11544 288C                        00            .byte	0
11545 288D                        00            .byte	0
11546 288E                        00            .byte	0
11547                                           ! 1454  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11548 288F                        00            .byte	0
11549 2890                        00            .byte	0
11550 2891                        7C            .byte	$7C
11551 2892                        C6            .byte	$C6
11552 2893                        06            .byte	6
11553 2894                        0C            .byte	$C
11554 2895                        18            .byte	$18
11555 2896                        30            .byte	$30
11556 2897                        60            .byte	$60
11557 2898                        C0            .byte	$C0
11558 2899                        C6            .byte	$C6
11559 289A                        FE            .byte	$FE
11560 289B                        00            .byte	0
11561 289C                        00            .byte	0
11562 289D                        00            .byte	0
11563 289E                        00            .byte	0
11564                                           ! 1455  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11565 289F                        00            .byte	0
11566 28A0                        00            .byte	0
11567 28A1                        7C            .byte	$7C
11568 28A2                        C6            .byte	$C6
11569 28A3                        06            .byte	6
11570 28A4                        06            .byte	6
11571 28A5                        3C            .byte	$3C
11572 28A6                        06            .byte	6
11573 28A7                        06            .byte	6
11574 28A8                        06            .byte	6
11575 28A9                        C6            .byte	$C6
11576 28AA                        7C            .byte	$7C
11577 28AB                        00            .byte	0
11578 28AC                        00            .byte	0
11579 28AD                        00            .byte	0
11580 28AE                        00            .byte	0
11581                                           ! 1456  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11582 28AF                        00            .byte	0
11583 28B0                        00            .byte	0
11584 28B1                        0C            .byte	$C
11585 28B2                        1C            .byte	$1C
11586 28B3                        3C            .byte	$3C
11587 28B4                        6C            .byte	$6C
11588 28B5                        CC            .byte	$CC
11589 28B6                        FE            .byte	$FE
11590 28B7                        0C            .byte	$C
11591 28B8                        0C            .byte	$C
11592 28B9                        0C            .byte	$C
11593 28BA                        1E            .byte	$1E
11594 28BB                        00            .byte	0
11595 28BC                        00            .byte	0
11596 28BD                        00            .byte	0
11597 28BE                        00            .byte	0
11598                                           ! 1457  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x0
11599 28BF                        00            .byte	0
11600 28C0                        00            .byte	0
11601 28C1                        FE            .byte	$FE
11602 28C2                        C0            .byte	$C0
11603 28C3                        C0            .byte	$C0
11604 28C4                        C0            .byte	$C0
11605 28C5                        FC            .byte	$FC
11606 28C6                        06            .byte	6
11607 28C7                        06            .byte	6
11608 28C8                        06            .byte	6
11609 28C9                        C6            .byte	$C6
11610 28CA                        7C            .byte	$7C
11611                                           ! 1457 0, 0x00, 0x00, 0x00,
11612 28CB                        00            .byte	0
11613 28CC                        00            .byte	0
11614 28CD                        00            .byte	0
11615 28CE                        00            .byte	0
11616                                           ! 1458  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11617 28CF                        00            .byte	0
11618 28D0                        00            .byte	0
11619 28D1                        38            .byte	$38
11620 28D2                        60            .byte	$60
11621 28D3                        C0            .byte	$C0
11622 28D4                        C0            .byte	$C0
11623 28D5                        FC            .byte	$FC
11624 28D6                        C6            .byte	$C6
11625 28D7                        C6            .byte	$C6
11626 28D8                        C6            .byte	$C6
11627 28D9                        C6            .byte	$C6
11628 28DA                        7C            .byte	$7C
11629 28DB                        00            .byte	0
11630 28DC                        00            .byte	0
11631 28DD                        00            .byte	0
11632 28DE                        00            .byte	0
11633                                           ! 1459  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11634 28DF                        00            .byte	0
11635 28E0                        00            .byte	0
11636 28E1                        FE            .byte	$FE
11637 28E2                        C6            .byte	$C6
11638 28E3                        06            .byte	6
11639 28E4                        06            .byte	6
11640 28E5                        0C            .byte	$C
11641 28E6                        18            .byte	$18
11642 28E7                        30            .byte	$30
11643 28E8                        30            .byte	$30
11644 28E9                        30            .byte	$30
11645 28EA                        30            .byte	$30
11646 28EB                        00            .byte	0
11647 28EC                        00            .byte	0
11648 28ED                        00            .byte	0
11649 28EE                        00            .byte	0
11650                                           ! 1460  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11651 28EF                        00            .byte	0
11652 28F0                        00            .byte	0
11653 28F1                        7C            .byte	$7C
11654 28F2                        C6            .byte	$C6
11655 28F3                        C6            .byte	$C6
11656 28F4                        C6            .byte	$C6
11657 28F5                        7C            .byte	$7C
11658 28F6                        C6            .byte	$C6
11659 28F7                        C6            .byte	$C6
11660 28F8                        C6            .byte	$C6
11661 28F9                        C6            .byte	$C6
11662 28FA                        7C            .byte	$7C
11663 28FB                        00            .byte	0
11664 28FC                        00            .byte	0
11665 28FD                        00            .byte	0
11666 28FE                        00            .byte	0
11667                                           ! 1461  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11668 28FF                        00            .byte	0
11669 2900                        00            .byte	0
11670 2901                        7C            .byte	$7C
11671 2902                        C6            .byte	$C6
11672 2903                        C6            .byte	$C6
11673 2904                        C6            .byte	$C6
11674 2905                        7E            .byte	$7E
11675 2906                        06            .byte	6
11676 2907                        06            .byte	6
11677 2908                        06            .byte	6
11678 2909                        0C            .byte	$C
11679 290A                        78            .byte	$78
11680 290B                        00            .byte	0
11681 290C                        00            .byte	0
11682 290D                        00            .byte	0
11683 290E                        00            .byte	0
11684                                           ! 1462  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11685 290F                        00            .byte	0
11686 2910                        00            .byte	0
11687 2911                        00            .byte	0
11688 2912                        00            .byte	0
11689 2913                        18            .byte	$18
11690 2914                        18            .byte	$18
11691 2915                        00            .byte	0
11692 2916                        00            .byte	0
11693 2917                        00            .byte	0
11694 2918                        18            .byte	$18
11695 2919                        18            .byte	$18
11696 291A                        00            .byte	0
11697 291B                        00            .byte	0
11698 291C                        00            .byte	0
11699 291D                        00            .byte	0
11700 291E                        00            .byte	0
11701                                           ! 1463  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11702 291F                        00            .byte	0
11703 2920                        00            .byte	0
11704 2921                        00            .byte	0
11705 2922                        00            .byte	0
11706 2923                        18            .byte	$18
11707 2924                        18            .byte	$18
11708 2925                        00            .byte	0
11709 2926                        00            .byte	0
11710 2927                        00            .byte	0
11711 2928                        18            .byte	$18
11712 2929                        18            .byte	$18
11713 292A                        30            .byte	$30
11714 292B                        00            .byte	0
11715 292C                        00            .byte	0
11716 292D                        00            .byte	0
11717 292E                        00            .byte	0
11718                                           ! 1464  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11719 292F                        00            .byte	0
11720 2930                        00            .byte	0
11721 2931                        00            .byte	0
11722 2932                        06            .byte	6
11723 2933                        0C            .byte	$C
11724 2934                        18            .byte	$18
11725 2935                        30            .byte	$30
11726 2936                        60            .byte	$60
11727 2937                        30            .byte	$30
11728 2938                        18            .byte	$18
11729 2939                        0C            .byte	$C
11730 293A                        06            .byte	6
11731 293B                        00            .byte	0
11732 293C                        00            .byte	0
11733 293D                        00            .byte	0
11734 293E                        00            .byte	0
11735                                           ! 1465  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11736 293F                        00            .byte	0
11737 2940                        00            .byte	0
11738 2941                        00            .byte	0
11739 2942                        00            .byte	0
11740 2943                        00            .byte	0
11741 2944                        7E            .byte	$7E
11742 2945                        00            .byte	0
11743 2946                        00            .byte	0
11744 2947                        7E            .byte	$7E
11745 2948                        00            .byte	0
11746 2949                        00            .byte	0
11747 294A                        00            .byte	0
11748 294B                        00            .byte	0
11749 294C                        00            .byte	0
11750 294D                        00            .byte	0
11751 294E                        00            .byte	0
11752                                           ! 1466  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11753 294F                        00            .byte	0
11754 2950                        00            .byte	0
11755 2951                        00            .byte	0
11756 2952                        60            .byte	$60
11757 2953                        30            .byte	$30
11758 2954                        18            .byte	$18
11759 2955                        0C            .byte	$C
11760 2956                        06            .byte	6
11761 2957                        0C            .byte	$C
11762 2958                        18            .byte	$18
11763 2959                        30            .byte	$30
11764 295A                        60            .byte	$60
11765 295B                        00            .byte	0
11766 295C                        00            .byte	0
11767 295D                        00            .byte	0
11768 295E                        00            .byte	0
11769                                           ! 1467  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11770 295F                        00            .byte	0
11771 2960                        00            .byte	0
11772 2961                        7C            .byte	$7C
11773 2962                        C6            .byte	$C6
11774 2963                        C6            .byte	$C6
11775 2964                        0C            .byte	$C
11776 2965                        18            .byte	$18
11777 2966                        18            .byte	$18
11778 2967                        18            .byte	$18
11779 2968                        00            .byte	0
11780 2969                        18            .byte	$18
11781 296A                        18            .byte	$18
11782 296B                        00            .byte	0
11783 296C                        00            .byte	0
11784 296D                        00            .byte	0
11785 296E                        00            .byte	0
11786                                           ! 1468  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11787 296F                        00            .byte	0
11788 2970                        00            .byte	0
11789 2971                        00            .byte	0
11790 2972                        7C            .byte	$7C
11791 2973                        C6            .byte	$C6
11792 2974                        C6            .byte	$C6
11793 2975                        DE            .byte	$DE
11794 2976                        DE            .byte	$DE
11795 2977                        DE            .byte	$DE
11796 2978                        DC            .byte	$DC
11797 2979                        C0            .byte	$C0
11798 297A                        7C            .byte	$7C
11799 297B                        00            .byte	0
11800 297C                        00            .byte	0
11801 297D                        00            .byte	0
11802 297E                        00            .byte	0
11803                                           ! 1469  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11804 297F                        00            .byte	0
11805 2980                        00            .byte	0
11806 2981                        10            .byte	$10
11807 2982                        38            .byte	$38
11808 2983                        6C            .byte	$6C
11809 2984                        C6            .byte	$C6
11810 2985                        C6            .byte	$C6
11811 2986                        FE            .byte	$FE
11812 2987                        C6            .byte	$C6
11813 2988                        C6            .byte	$C6
11814 2989                        C6            .byte	$C6
11815 298A                        C6            .byte	$C6
11816 298B                        00            .byte	0
11817 298C                        00            .byte	0
11818 298D                        00            .byte	0
11819 298E                        00            .byte	0
11820                                           ! 1470  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11821 298F                        00            .byte	0
11822 2990                        00            .byte	0
11823 2991                        FC            .byte	$FC
11824 2992                        66            .byte	$66
11825 2993                        66            .byte	$66
11826 2994                        66            .byte	$66
11827 2995                        7C            .byte	$7C
11828 2996                        66            .byte	$66
11829 2997                        66            .byte	$66
11830 2998                        66            .byte	$66
11831 2999                        66            .byte	$66
11832 299A                        FC            .byte	$FC
11833 299B                        00            .byte	0
11834 299C                        00            .byte	0
11835 299D                        00            .byte	0
11836 299E                        00            .byte	0
11837                                           ! 1471  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11838 299F                        00            .byte	0
11839 29A0                        00            .byte	0
11840 29A1                        3C            .byte	$3C
11841 29A2                        66            .byte	$66
11842 29A3                        C2            .byte	$C2
11843 29A4                        C0            .byte	$C0
11844 29A5                        C0            .byte	$C0
11845 29A6                        C0            .byte	$C0
11846 29A7                        C0            .byte	$C0
11847 29A8                        C2            .byte	$C2
11848 29A9                        66            .byte	$66
11849 29AA                        3C            .byte	$3C
11850 29AB                        00            .byte	0
11851 29AC                        00            .byte	0
11852 29AD                        00            .byte	0
11853 29AE                        00            .byte	0
11854                                           ! 1472  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11855 29AF                        00            .byte	0
11856 29B0                        00            .byte	0
11857 29B1                        F8            .byte	$F8
11858 29B2                        6C            .byte	$6C
11859 29B3                        66            .byte	$66
11860 29B4                        66            .byte	$66
11861 29B5                        66            .byte	$66
11862 29B6                        66            .byte	$66
11863 29B7                        66            .byte	$66
11864 29B8                        66            .byte	$66
11865 29B9                        6C            .byte	$6C
11866 29BA                        F8            .byte	$F8
11867 29BB                        00            .byte	0
11868 29BC                        00            .byte	0
11869 29BD                        00            .byte	0
11870 29BE                        00            .byte	0
11871                                           ! 1473  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11872 29BF                        00            .byte	0
11873 29C0                        00            .byte	0
11874 29C1                        FE            .byte	$FE
11875 29C2                        66            .byte	$66
11876 29C3                        62            .byte	$62
11877 29C4                        68            .byte	$68
11878 29C5                        78            .byte	$78
11879 29C6                        68            .byte	$68
11880 29C7                        60            .byte	$60
11881 29C8                        62            .byte	$62
11882 29C9                        66            .byte	$66
11883 29CA                        FE            .byte	$FE
11884 29CB                        00            .byte	0
11885 29CC                        00            .byte	0
11886 29CD                        00            .byte	0
11887 29CE                        00            .byte	0
11888                                           ! 1474  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11889 29CF                        00            .byte	0
11890 29D0                        00            .byte	0
11891 29D1                        FE            .byte	$FE
11892 29D2                        66            .byte	$66
11893 29D3                        62            .byte	$62
11894 29D4                        68            .byte	$68
11895 29D5                        78            .byte	$78
11896 29D6                        68            .byte	$68
11897 29D7                        60            .byte	$60
11898 29D8                        60            .byte	$60
11899 29D9                        60            .byte	$60
11900 29DA                        F0            .byte	$F0
11901 29DB                        00            .byte	0
11902 29DC                        00            .byte	0
11903 29DD                        00            .byte	0
11904 29DE                        00            .byte	0
11905                                           ! 1475  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11906 29DF                        00            .byte	0
11907 29E0                        00            .byte	0
11908 29E1                        3C            .byte	$3C
11909 29E2                        66            .byte	$66
11910 29E3                        C2            .byte	$C2
11911 29E4                        C0            .byte	$C0
11912 29E5                        C0            .byte	$C0
11913 29E6                        DE            .byte	$DE
11914 29E7                        C6            .byte	$C6
11915 29E8                        C6            .byte	$C6
11916 29E9                        66            .byte	$66
11917 29EA                        3A            .byte	$3A
11918 29EB                        00            .byte	0
11919 29EC                        00            .byte	0
11920 29ED                        00            .byte	0
11921 29EE                        00            .byte	0
11922                                           ! 1476  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11923 29EF                        00            .byte	0
11924 29F0                        00            .byte	0
11925 29F1                        C6            .byte	$C6
11926 29F2                        C6            .byte	$C6
11927 29F3                        C6            .byte	$C6
11928 29F4                        C6            .byte	$C6
11929 29F5                        FE            .byte	$FE
11930 29F6                        C6            .byte	$C6
11931 29F7                        C6            .byte	$C6
11932 29F8                        C6            .byte	$C6
11933 29F9                        C6            .byte	$C6
11934 29FA                        C6            .byte	$C6
11935 29FB                        00            .byte	0
11936 29FC                        00            .byte	0
11937 29FD                        00            .byte	0
11938 29FE                        00            .byte	0
11939                                           ! 1477  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11940 29FF                        00            .byte	0
11941 2A00                        00            .byte	0
11942 2A01                        3C            .byte	$3C
11943 2A02                        18            .byte	$18
11944 2A03                        18            .byte	$18
11945 2A04                        18            .byte	$18
11946 2A05                        18            .byte	$18
11947 2A06                        18            .byte	$18
11948 2A07                        18            .byte	$18
11949 2A08                        18            .byte	$18
11950 2A09                        18            .byte	$18
11951 2A0A                        3C            .byte	$3C
11952 2A0B                        00            .byte	0
11953 2A0C                        00            .byte	0
11954 2A0D                        00            .byte	0
11955 2A0E                        00            .byte	0
11956                                           ! 1478  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x
11957 2A0F                        00            .byte	0
11958 2A10                        00            .byte	0
11959 2A11                        1E            .byte	$1E
11960 2A12                        0C            .byte	$C
11961 2A13                        0C            .byte	$C
11962 2A14                        0C            .byte	$C
11963 2A15                        0C            .byte	$C
11964 2A16                        0C            .byte	$C
11965 2A17                        CC            .byte	$CC
11966 2A18                        CC            .byte	$CC
11967 2A19                        CC            .byte	$CC
11968 2A1A                        78            .byte	$78
11969 2A1B                        00            .byte	0
11970 2A1C                        00            .byte	0
11971                                           ! 1478 00, 0x00,
11972 2A1D                        00            .byte	0
11973 2A1E                        00            .byte	0
11974                                           ! 1479  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11975 2A1F                        00            .byte	0
11976 2A20                        00            .byte	0
11977 2A21                        E6            .byte	$E6
11978 2A22                        66            .byte	$66
11979 2A23                        66            .byte	$66
11980 2A24                        6C            .byte	$6C
11981 2A25                        78            .byte	$78
11982 2A26                        78            .byte	$78
11983 2A27                        6C            .byte	$6C
11984 2A28                        66            .byte	$66
11985 2A29                        66            .byte	$66
11986 2A2A                        E6            .byte	$E6
11987 2A2B                        00            .byte	0
11988 2A2C                        00            .byte	0
11989 2A2D                        00            .byte	0
11990 2A2E                        00            .byte	0
11991                                           ! 1480  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11992 2A2F                        00            .byte	0
11993 2A30                        00            .byte	0
11994 2A31                        F0            .byte	$F0
11995 2A32                        60            .byte	$60
11996 2A33                        60            .byte	$60
11997 2A34                        60            .byte	$60
11998 2A35                        60            .byte	$60
11999 2A36                        60            .byte	$60
12000 2A37                        60            .byte	$60
12001 2A38                        62            .byte	$62
12002 2A39                        66            .byte	$66
12003 2A3A                        FE            .byte	$FE
12004 2A3B                        00            .byte	0
12005 2A3C                        00            .byte	0
12006 2A3D                        00            .byte	0
12007 2A3E                        00            .byte	0
12008                                           ! 1481  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12009 2A3F                        00            .byte	0
12010 2A40                        00            .byte	0
12011 2A41                        C3            .byte	$C3
12012 2A42                        E7            .byte	$E7
12013 2A43                        FF            .byte	$FF
12014 2A44                        FF            .byte	$FF
12015 2A45                        DB            .byte	$DB
12016 2A46                        C3            .byte	$C3
12017 2A47                        C3            .byte	$C3
12018 2A48                        C3            .byte	$C3
12019 2A49                        C3            .byte	$C3
12020 2A4A                        C3            .byte	$C3
12021 2A4B                        00            .byte	0
12022 2A4C                        00            .byte	0
12023 2A4D                        00            .byte	0
12024 2A4E                        00            .byte	0
12025                                           ! 1482  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12026 2A4F                        00            .byte	0
12027 2A50                        00            .byte	0
12028 2A51                        C6            .byte	$C6
12029 2A52                        E6            .byte	$E6
12030 2A53                        F6            .byte	$F6
12031 2A54                        FE            .byte	$FE
12032 2A55                        DE            .byte	$DE
12033 2A56                        CE            .byte	$CE
12034 2A57                        C6            .byte	$C6
12035 2A58                        C6            .byte	$C6
12036 2A59                        C6            .byte	$C6
12037 2A5A                        C6            .byte	$C6
12038 2A5B                        00            .byte	0
12039 2A5C                        00            .byte	0
12040 2A5D                        00            .byte	0
12041 2A5E                        00            .byte	0
12042                                           ! 1483  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12043 2A5F                        00            .byte	0
12044 2A60                        00            .byte	0
12045 2A61                        7C            .byte	$7C
12046 2A62                        C6            .byte	$C6
12047 2A63                        C6            .byte	$C6
12048 2A64                        C6            .byte	$C6
12049 2A65                        C6            .byte	$C6
12050 2A66                        C6            .byte	$C6
12051 2A67                        C6            .byte	$C6
12052 2A68                        C6            .byte	$C6
12053 2A69                        C6            .byte	$C6
12054 2A6A                        7C            .byte	$7C
12055 2A6B                        00            .byte	0
12056 2A6C                        00            .byte	0
12057 2A6D                        00            .byte	0
12058 2A6E                        00            .byte	0
12059                                           ! 1484  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12060 2A6F                        00            .byte	0
12061 2A70                        00            .byte	0
12062 2A71                        FC            .byte	$FC
12063 2A72                        66            .byte	$66
12064 2A73                        66            .byte	$66
12065 2A74                        66            .byte	$66
12066 2A75                        7C            .byte	$7C
12067 2A76                        60            .byte	$60
12068 2A77                        60            .byte	$60
12069 2A78                        60            .byte	$60
12070 2A79                        60            .byte	$60
12071 2A7A                        F0            .byte	$F0
12072 2A7B                        00            .byte	0
12073 2A7C                        00            .byte	0
12074 2A7D                        00            .byte	0
12075 2A7E                        00            .byte	0
12076                                           ! 1485  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12077 2A7F                        00            .byte	0
12078 2A80                        00            .byte	0
12079 2A81                        7C            .byte	$7C
12080 2A82                        C6            .byte	$C6
12081 2A83                        C6            .byte	$C6
12082 2A84                        C6            .byte	$C6
12083 2A85                        C6            .byte	$C6
12084 2A86                        C6            .byte	$C6
12085 2A87                        C6            .byte	$C6
12086 2A88                        D6            .byte	$D6
12087 2A89                        DE            .byte	$DE
12088 2A8A                        7C            .byte	$7C
12089 2A8B                        0C            .byte	$C
12090 2A8C                        0E            .byte	$E
12091 2A8D                        00            .byte	0
12092 2A8E                        00            .byte	0
12093                                           ! 1486  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12094 2A8F                        00            .byte	0
12095 2A90                        00            .byte	0
12096 2A91                        FC            .byte	$FC
12097 2A92                        66            .byte	$66
12098 2A93                        66            .byte	$66
12099 2A94                        66            .byte	$66
12100 2A95                        7C            .byte	$7C
12101 2A96                        6C            .byte	$6C
12102 2A97                        66            .byte	$66
12103 2A98                        66            .byte	$66
12104 2A99                        66            .byte	$66
12105 2A9A                        E6            .byte	$E6
12106 2A9B                        00            .byte	0
12107 2A9C                        00            .byte	0
12108 2A9D                        00            .byte	0
12109 2A9E                        00            .byte	0
12110                                           ! 1487  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12111 2A9F                        00            .byte	0
12112 2AA0                        00            .byte	0
12113 2AA1                        7C            .byte	$7C
12114 2AA2                        C6            .byte	$C6
12115 2AA3                        C6            .byte	$C6
12116 2AA4                        60            .byte	$60
12117 2AA5                        38            .byte	$38
12118 2AA6                        0C            .byte	$C
12119 2AA7                        06            .byte	6
12120 2AA8                        C6            .byte	$C6
12121 2AA9                        C6            .byte	$C6
12122 2AAA                        7C            .byte	$7C
12123 2AAB                        00            .byte	0
12124 2AAC                        00            .byte	0
12125 2AAD                        00            .byte	0
12126 2AAE                        00            .byte	0
12127                                           ! 1488  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12128 2AAF                        00            .byte	0
12129 2AB0                        00            .byte	0
12130 2AB1                        FF            .byte	$FF
12131 2AB2                        DB            .byte	$DB
12132 2AB3                        99            .byte	$99
12133 2AB4                        18            .byte	$18
12134 2AB5                        18            .byte	$18
12135 2AB6                        18            .byte	$18
12136 2AB7                        18            .byte	$18
12137 2AB8                        18            .byte	$18
12138 2AB9                        18            .byte	$18
12139 2ABA                        3C            .byte	$3C
12140 2ABB                        00            .byte	0
12141 2ABC                        00            .byte	0
12142 2ABD                        00            .byte	0
12143 2ABE                        00            .byte	0
12144                                           ! 1489  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12145 2ABF                        00            .byte	0
12146 2AC0                        00            .byte	0
12147 2AC1                        C6            .byte	$C6
12148 2AC2                        C6            .byte	$C6
12149 2AC3                        C6            .byte	$C6
12150 2AC4                        C6            .byte	$C6
12151 2AC5                        C6            .byte	$C6
12152 2AC6                        C6            .byte	$C6
12153 2AC7                        C6            .byte	$C6
12154 2AC8                        C6            .byte	$C6
12155 2AC9                        C6            .byte	$C6
12156 2ACA                        7C            .byte	$7C
12157 2ACB                        00            .byte	0
12158 2ACC                        00            .byte	0
12159 2ACD                        00            .byte	0
12160 2ACE                        00            .byte	0
12161                                           ! 1490  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12162 2ACF                        00            .byte	0
12163 2AD0                        00            .byte	0
12164 2AD1                        C3            .byte	$C3
12165 2AD2                        C3            .byte	$C3
12166 2AD3                        C3            .byte	$C3
12167 2AD4                        C3            .byte	$C3
12168 2AD5                        C3            .byte	$C3
12169 2AD6                        C3            .byte	$C3
12170 2AD7                        C3            .byte	$C3
12171 2AD8                        66            .byte	$66
12172 2AD9                        3C            .byte	$3C
12173 2ADA                        18            .byte	$18
12174 2ADB                        00            .byte	0
12175 2ADC                        00            .byte	0
12176 2ADD                        00            .byte	0
12177 2ADE                        00            .byte	0
12178                                           ! 1491  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12179 2ADF                        00            .byte	0
12180 2AE0                        00            .byte	0
12181 2AE1                        C3            .byte	$C3
12182 2AE2                        C3            .byte	$C3
12183 2AE3                        C3            .byte	$C3
12184 2AE4                        C3            .byte	$C3
12185 2AE5                        C3            .byte	$C3
12186 2AE6                        DB            .byte	$DB
12187 2AE7                        DB            .byte	$DB
12188 2AE8                        FF            .byte	$FF
12189 2AE9                        66            .byte	$66
12190 2AEA                        66            .byte	$66
12191 2AEB                        00            .byte	0
12192 2AEC                        00            .byte	0
12193 2AED                        00            .byte	0
12194 2AEE                        00            .byte	0
12195                                           ! 1492  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12196 2AEF                        00            .byte	0
12197 2AF0                        00            .byte	0
12198 2AF1                        C3            .byte	$C3
12199 2AF2                        C3            .byte	$C3
12200 2AF3                        66            .byte	$66
12201 2AF4                        3C            .byte	$3C
12202 2AF5                        18            .byte	$18
12203 2AF6                        18            .byte	$18
12204 2AF7                        3C            .byte	$3C
12205 2AF8                        66            .byte	$66
12206 2AF9                        C3            .byte	$C3
12207 2AFA                        C3            .byte	$C3
12208 2AFB                        00            .byte	0
12209 2AFC                        00            .byte	0
12210 2AFD                        00            .byte	0
12211 2AFE                        00            .byte	0
12212                                           ! 1493  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12213 2AFF                        00            .byte	0
12214 2B00                        00            .byte	0
12215 2B01                        C3            .byte	$C3
12216 2B02                        C3            .byte	$C3
12217 2B03                        C3            .byte	$C3
12218 2B04                        66            .byte	$66
12219 2B05                        3C            .byte	$3C
12220 2B06                        18            .byte	$18
12221 2B07                        18            .byte	$18
12222 2B08                        18            .byte	$18
12223 2B09                        18            .byte	$18
12224 2B0A                        3C            .byte	$3C
12225 2B0B                        00            .byte	0
12226 2B0C                        00            .byte	0
12227 2B0D                        00            .byte	0
12228 2B0E                        00            .byte	0
12229                                           ! 1494  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12230 2B0F                        00            .byte	0
12231 2B10                        00            .byte	0
12232 2B11                        FF            .byte	$FF
12233 2B12                        C3            .byte	$C3
12234 2B13                        86            .byte	$86
12235 2B14                        0C            .byte	$C
12236 2B15                        18            .byte	$18
12237 2B16                        30            .byte	$30
12238 2B17                        60            .byte	$60
12239 2B18                        C1            .byte	$C1
12240 2B19                        C3            .byte	$C3
12241 2B1A                        FF            .byte	$FF
12242 2B1B                        00            .byte	0
12243 2B1C                        00            .byte	0
12244 2B1D                        00            .byte	0
12245 2B1E                        00            .byte	0
12246                                           ! 1495  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12247 2B1F                        00            .byte	0
12248 2B20                        00            .byte	0
12249 2B21                        3C            .byte	$3C
12250 2B22                        30            .byte	$30
12251 2B23                        30            .byte	$30
12252 2B24                        30            .byte	$30
12253 2B25                        30            .byte	$30
12254 2B26                        30            .byte	$30
12255 2B27                        30            .byte	$30
12256 2B28                        30            .byte	$30
12257 2B29                        30            .byte	$30
12258 2B2A                        3C            .byte	$3C
12259 2B2B                        00            .byte	0
12260 2B2C                        00            .byte	0
12261 2B2D                        00            .byte	0
12262 2B2E                        00            .byte	0
12263                                           ! 1496  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12264 2B2F                        00            .byte	0
12265 2B30                        00            .byte	0
12266 2B31                        00            .byte	0
12267 2B32                        80            .byte	$80
12268 2B33                        C0            .byte	$C0
12269 2B34                        E0            .byte	$E0
12270 2B35                        70            .byte	$70
12271 2B36                        38            .byte	$38
12272 2B37                        1C            .byte	$1C
12273 2B38                        0E            .byte	$E
12274 2B39                        06            .byte	6
12275 2B3A                        02            .byte	2
12276 2B3B                        00            .byte	0
12277 2B3C                        00            .byte	0
12278 2B3D                        00            .byte	0
12279 2B3E                        00            .byte	0
12280                                           ! 1497  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12281 2B3F                        00            .byte	0
12282 2B40                        00            .byte	0
12283 2B41                        3C            .byte	$3C
12284 2B42                        0C            .byte	$C
12285 2B43                        0C            .byte	$C
12286 2B44                        0C            .byte	$C
12287 2B45                        0C            .byte	$C
12288 2B46                        0C            .byte	$C
12289 2B47                        0C            .byte	$C
12290 2B48                        0C            .byte	$C
12291 2B49                        0C            .byte	$C
12292 2B4A                        3C            .byte	$3C
12293 2B4B                        00            .byte	0
12294 2B4C                        00            .byte	0
12295 2B4D                        00            .byte	0
12296 2B4E                        00            .byte	0
12297                                           ! 1498  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12298 2B4F                        10            .byte	$10
12299 2B50                        38            .byte	$38
12300 2B51                        6C            .byte	$6C
12301 2B52                        C6            .byte	$C6
12302 2B53                        00            .byte	0
12303 2B54                        00            .byte	0
12304 2B55                        00            .byte	0
12305 2B56                        00            .byte	0
12306 2B57                        00            .byte	0
12307 2B58                        00            .byte	0
12308 2B59                        00            .byte	0
12309 2B5A                        00            .byte	0
12310 2B5B                        00            .byte	0
12311 2B5C                        00            .byte	0
12312 2B5D                        00            .byte	0
12313 2B5E                        00            .byte	0
12314                                           ! 1499  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12315 2B5F                        00            .byte	0
12316 2B60                        00            .byte	0
12317 2B61                        00            .byte	0
12318 2B62                        00            .byte	0
12319 2B63                        00            .byte	0
12320 2B64                        00            .byte	0
12321 2B65                        00            .byte	0
12322 2B66                        00            .byte	0
12323 2B67                        00            .byte	0
12324 2B68                        00            .byte	0
12325 2B69                        00            .byte	0
12326 2B6A                        00            .byte	0
12327 2B6B                        00            .byte	0
12328 2B6C                        FF            .byte	$FF
12329 2B6D                        00            .byte	0
12330 2B6E                        00            .byte	0
12331                                           ! 1500  
12332                                           ! 1500 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12333 2B6F                        30            .byte	$30
12334 2B70                        30            .byte	$30
12335 2B71                        18            .byte	$18
12336 2B72                        00            .byte	0
12337 2B73                        00            .byte	0
12338 2B74                        00            .byte	0
12339 2B75                        00            .byte	0
12340 2B76                        00            .byte	0
12341 2B77                        00            .byte	0
12342 2B78                        00            .byte	0
12343 2B79                        00            .byte	0
12344 2B7A                        00            .byte	0
12345 2B7B                        00            .byte	0
12346 2B7C                        00            .byte	0
12347 2B7D                        00            .byte	0
12348 2B7E                        00            .byte	0
12349                                           ! 1501  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12350 2B7F                        00            .byte	0
12351 2B80                        00            .byte	0
12352 2B81                        00            .byte	0
12353 2B82                        00            .byte	0
12354 2B83                        00            .byte	0
12355 2B84                        78            .byte	$78
12356 2B85                        0C            .byte	$C
12357 2B86                        7C            .byte	$7C
12358 2B87                        CC            .byte	$CC
12359 2B88                        CC            .byte	$CC
12360 2B89                        CC            .byte	$CC
12361 2B8A                        76            .byte	$76
12362 2B8B                        00            .byte	0
12363 2B8C                        00            .byte	0
12364 2B8D                        00            .byte	0
12365 2B8E                        00            .byte	0
12366                                           ! 1502  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12367 2B8F                        00            .byte	0
12368 2B90                        00            .byte	0
12369 2B91                        E0            .byte	$E0
12370 2B92                        60            .byte	$60
12371 2B93                        60            .byte	$60
12372 2B94                        78            .byte	$78
12373 2B95                        6C            .byte	$6C
12374 2B96                        66            .byte	$66
12375 2B97                        66            .byte	$66
12376 2B98                        66            .byte	$66
12377 2B99                        66            .byte	$66
12378 2B9A                        7C            .byte	$7C
12379 2B9B                        00            .byte	0
12380 2B9C                        00            .byte	0
12381 2B9D                        00            .byte	0
12382 2B9E                        00            .byte	0
12383                                           ! 1503  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12384 2B9F                        00            .byte	0
12385 2BA0                        00            .byte	0
12386 2BA1                        00            .byte	0
12387 2BA2                        00            .byte	0
12388 2BA3                        00            .byte	0
12389 2BA4                        7C            .byte	$7C
12390 2BA5                        C6            .byte	$C6
12391 2BA6                        C0            .byte	$C0
12392 2BA7                        C0            .byte	$C0
12393 2BA8                        C0            .byte	$C0
12394 2BA9                        C6            .byte	$C6
12395 2BAA                        7C            .byte	$7C
12396 2BAB                        00            .byte	0
12397 2BAC                        00            .byte	0
12398 2BAD                        00            .byte	0
12399 2BAE                        00            .byte	0
12400                                           ! 1504  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12401 2BAF                        00            .byte	0
12402 2BB0                        00            .byte	0
12403 2BB1                        1C            .byte	$1C
12404 2BB2                        0C            .byte	$C
12405 2BB3                        0C            .byte	$C
12406 2BB4                        3C            .byte	$3C
12407 2BB5                        6C            .byte	$6C
12408 2BB6                        CC            .byte	$CC
12409 2BB7                        CC            .byte	$CC
12410 2BB8                        CC            .byte	$CC
12411 2BB9                        CC            .byte	$CC
12412 2BBA                        76            .byte	$76
12413 2BBB                        00            .byte	0
12414 2BBC                        00            .byte	0
12415 2BBD                        00            .byte	0
12416 2BBE                        00            .byte	0
12417                                           ! 1505  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12418 2BBF                        00            .byte	0
12419 2BC0                        00            .byte	0
12420 2BC1                        00            .byte	0
12421 2BC2                        00            .byte	0
12422 2BC3                        00            .byte	0
12423 2BC4                        7C            .byte	$7C
12424 2BC5                        C6            .byte	$C6
12425 2BC6                        FE            .byte	$FE
12426 2BC7                        C0            .byte	$C0
12427 2BC8                        C0            .byte	$C0
12428 2BC9                        C6            .byte	$C6
12429 2BCA                        7C            .byte	$7C
12430 2BCB                        00            .byte	0
12431 2BCC                        00            .byte	0
12432 2BCD                        00            .byte	0
12433 2BCE                        00            .byte	0
12434                                           ! 1506  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12435 2BCF                        00            .byte	0
12436 2BD0                        00            .byte	0
12437 2BD1                        38            .byte	$38
12438 2BD2                        6C            .byte	$6C
12439 2BD3                        64            .byte	$64
12440 2BD4                        60            .byte	$60
12441 2BD5                        F0            .byte	$F0
12442 2BD6                        60            .byte	$60
12443 2BD7                        60            .byte	$60
12444 2BD8                        60            .byte	$60
12445 2BD9                        60            .byte	$60
12446 2BDA                        F0            .byte	$F0
12447 2BDB                        00            .byte	0
12448 2BDC                        00            .byte	0
12449 2BDD                        00            .byte	0
12450 2BDE                        00            .byte	0
12451                                           ! 1507  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12452 2BDF                        00            .byte	0
12453 2BE0                        00            .byte	0
12454 2BE1                        00            .byte	0
12455 2BE2                        00            .byte	0
12456 2BE3                        00            .byte	0
12457 2BE4                        76            .byte	$76
12458 2BE5                        CC            .byte	$CC
12459 2BE6                        CC            .byte	$CC
12460 2BE7                        CC            .byte	$CC
12461 2BE8                        CC            .byte	$CC
12462 2BE9                        CC            .byte	$CC
12463 2BEA                        7C            .byte	$7C
12464 2BEB                        0C            .byte	$C
12465 2BEC                        CC            .byte	$CC
12466 2BED                        78            .byte	$78
12467 2BEE                        00            .byte	0
12468                                           ! 1508  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12469 2BEF                        00            .byte	0
12470 2BF0                        00            .byte	0
12471 2BF1                        E0            .byte	$E0
12472 2BF2                        60            .byte	$60
12473 2BF3                        60            .byte	$60
12474 2BF4                        6C            .byte	$6C
12475 2BF5                        76            .byte	$76
12476 2BF6                        66            .byte	$66
12477 2BF7                        66            .byte	$66
12478 2BF8                        66            .byte	$66
12479 2BF9                        66            .byte	$66
12480 2BFA                        E6            .byte	$E6
12481 2BFB                        00            .byte	0
12482 2BFC                        00            .byte	0
12483 2BFD                        00            .byte	0
12484 2BFE                        00            .byte	0
12485                                           ! 1509  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12486 2BFF                        00            .byte	0
12487 2C00                        00            .byte	0
12488 2C01                        18            .byte	$18
12489 2C02                        18            .byte	$18
12490 2C03                        00            .byte	0
12491 2C04                        38            .byte	$38
12492 2C05                        18            .byte	$18
12493 2C06                        18            .byte	$18
12494 2C07                        18            .byte	$18
12495 2C08                        18            .byte	$18
12496 2C09                        18            .byte	$18
12497 2C0A                        3C            .byte	$3C
12498 2C0B                        00            .byte	0
12499 2C0C                        00            .byte	0
12500 2C0D                        00            .byte	0
12501 2C0E                        00            .byte	0
12502                                           ! 1510  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12503 2C0F                        00            .byte	0
12504 2C10                        00            .byte	0
12505 2C11                        06            .byte	6
12506 2C12                        06            .byte	6
12507 2C13                        00            .byte	0
12508 2C14                        0E            .byte	$E
12509 2C15                        06            .byte	6
12510 2C16                        06            .byte	6
12511 2C17                        06            .byte	6
12512 2C18                        06            .byte	6
12513 2C19                        06            .byte	6
12514 2C1A                        06            .byte	6
12515 2C1B                        66            .byte	$66
12516 2C1C                        66            .byte	$66
12517 2C1D                        3C            .byte	$3C
12518 2C1E                        00            .byte	0
12519                                           ! 1511  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12520 2C1F                        00            .byte	0
12521 2C20                        00            .byte	0
12522 2C21                        E0            .byte	$E0
12523 2C22                        60            .byte	$60
12524 2C23                        60            .byte	$60
12525 2C24                        66            .byte	$66
12526 2C25                        6C            .byte	$6C
12527 2C26                        78            .byte	$78
12528 2C27                        78            .byte	$78
12529 2C28                        6C            .byte	$6C
12530 2C29                        66            .byte	$66
12531 2C2A                        E6            .byte	$E6
12532 2C2B                        00            .byte	0
12533 2C2C                        00            .byte	0
12534 2C2D                        00            .byte	0
12535 2C2E                        00            .byte	0
12536                                           ! 1512  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12537 2C2F                        00            .byte	0
12538 2C30                        00            .byte	0
12539 2C31                        38            .byte	$38
12540 2C32                        18            .byte	$18
12541 2C33                        18            .byte	$18
12542 2C34                        18            .byte	$18
12543 2C35                        18            .byte	$18
12544 2C36                        18            .byte	$18
12545 2C37                        18            .byte	$18
12546 2C38                        18            .byte	$18
12547 2C39                        18            .byte	$18
12548 2C3A                        3C            .byte	$3C
12549 2C3B                        00            .byte	0
12550 2C3C                        00            .byte	0
12551 2C3D                        00            .byte	0
12552 2C3E                        00            .byte	0
12553                                           ! 1513  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12554 2C3F                        00            .byte	0
12555 2C40                        00            .byte	0
12556 2C41                        00            .byte	0
12557 2C42                        00            .byte	0
12558 2C43                        00            .byte	0
12559 2C44                        E6            .byte	$E6
12560 2C45                        FF            .byte	$FF
12561 2C46                        DB            .byte	$DB
12562 2C47                        DB            .byte	$DB
12563 2C48                        DB            .byte	$DB
12564 2C49                        DB            .byte	$DB
12565 2C4A                        DB            .byte	$DB
12566 2C4B                        00            .byte	0
12567 2C4C                        00            .byte	0
12568 2C4D                        00            .byte	0
12569 2C4E                        00            .byte	0
12570                                           ! 1514  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12571 2C4F                        00            .byte	0
12572 2C50                        00            .byte	0
12573 2C51                        00            .byte	0
12574 2C52                        00            .byte	0
12575 2C53                        00            .byte	0
12576 2C54                        DC            .byte	$DC
12577 2C55                        66            .byte	$66
12578 2C56                        66            .byte	$66
12579 2C57                        66            .byte	$66
12580 2C58                        66            .byte	$66
12581 2C59                        66            .byte	$66
12582 2C5A                        66            .byte	$66
12583 2C5B                        00            .byte	0
12584 2C5C                        00            .byte	0
12585 2C5D                        00            .byte	0
12586 2C5E                        00            .byte	0
12587                                           ! 1515  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12588 2C5F                        00            .byte	0
12589 2C60                        00            .byte	0
12590 2C61                        00            .byte	0
12591 2C62                        00            .byte	0
12592 2C63                        00            .byte	0
12593 2C64                        7C            .byte	$7C
12594 2C65                        C6            .byte	$C6
12595 2C66                        C6            .byte	$C6
12596 2C67                        C6            .byte	$C6
12597 2C68                        C6            .byte	$C6
12598 2C69                        C6            .byte	$C6
12599 2C6A                        7C            .byte	$7C
12600 2C6B                        00            .byte	0
12601 2C6C                        00            .byte	0
12602 2C6D                        00            .byte	0
12603 2C6E                        00            .byte	0
12604                                           ! 1516  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12605 2C6F                        00            .byte	0
12606 2C70                        00            .byte	0
12607 2C71                        00            .byte	0
12608 2C72                        00            .byte	0
12609 2C73                        00            .byte	0
12610 2C74                        DC            .byte	$DC
12611 2C75                        66            .byte	$66
12612 2C76                        66            .byte	$66
12613 2C77                        66            .byte	$66
12614 2C78                        66            .byte	$66
12615 2C79                        66            .byte	$66
12616 2C7A                        7C            .byte	$7C
12617 2C7B                        60            .byte	$60
12618 2C7C                        60            .byte	$60
12619 2C7D                        F0            .byte	$F0
12620 2C7E                        00            .byte	0
12621                                           ! 1517  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12622 2C7F                        00            .byte	0
12623 2C80                        00            .byte	0
12624 2C81                        00            .byte	0
12625 2C82                        00            .byte	0
12626 2C83                        00            .byte	0
12627 2C84                        76            .byte	$76
12628 2C85                        CC            .byte	$CC
12629 2C86                        CC            .byte	$CC
12630 2C87                        CC            .byte	$CC
12631 2C88                        CC            .byte	$CC
12632 2C89                        CC            .byte	$CC
12633 2C8A                        7C            .byte	$7C
12634 2C8B                        0C            .byte	$C
12635 2C8C                        0C            .byte	$C
12636 2C8D                        1E            .byte	$1E
12637 2C8E                        00            .byte	0
12638                                           ! 1518  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12639 2C8F                        00            .byte	0
12640 2C90                        00            .byte	0
12641 2C91                        00            .byte	0
12642 2C92                        00            .byte	0
12643 2C93                        00            .byte	0
12644 2C94                        DC            .byte	$DC
12645 2C95                        76            .byte	$76
12646 2C96                        66            .byte	$66
12647 2C97                        60            .byte	$60
12648 2C98                        60            .byte	$60
12649 2C99                        60            .byte	$60
12650 2C9A                        F0            .byte	$F0
12651 2C9B                        00            .byte	0
12652 2C9C                        00            .byte	0
12653 2C9D                        00            .byte	0
12654 2C9E                        00            .byte	0
12655                                           ! 1519  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12656 2C9F                        00            .byte	0
12657 2CA0                        00            .byte	0
12658 2CA1                        00            .byte	0
12659 2CA2                        00            .byte	0
12660 2CA3                        00            .byte	0
12661 2CA4                        7C            .byte	$7C
12662 2CA5                        C6            .byte	$C6
12663 2CA6                        60            .byte	$60
12664 2CA7                        38            .byte	$38
12665 2CA8                        0C            .byte	$C
12666 2CA9                        C6            .byte	$C6
12667 2CAA                        7C            .byte	$7C
12668 2CAB                        00            .byte	0
12669 2CAC                        00            .byte	0
12670 2CAD                        00            .byte	0
12671 2CAE                        00            .byte	0
12672                                           ! 1520  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12673 2CAF                        00            .byte	0
12674 2CB0                        00            .byte	0
12675 2CB1                        10            .byte	$10
12676 2CB2                        30            .byte	$30
12677 2CB3                        30            .byte	$30
12678 2CB4                        FC            .byte	$FC
12679 2CB5                        30            .byte	$30
12680 2CB6                        30            .byte	$30
12681 2CB7                        30            .byte	$30
12682 2CB8                        30            .byte	$30
12683 2CB9                        36            .byte	$36
12684 2CBA                        1C            .byte	$1C
12685 2CBB                        00            .byte	0
12686 2CBC                        00            .byte	0
12687 2CBD                        00            .byte	0
12688 2CBE                        00            .byte	0
12689                                           ! 1521  0x00, 0x00,
12690 2CBF                        00            .byte	0
12691                                           ! 1521  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12692 2CC0                        00            .byte	0
12693 2CC1                        00            .byte	0
12694 2CC2                        00            .byte	0
12695 2CC3                        00            .byte	0
12696 2CC4                        CC            .byte	$CC
12697 2CC5                        CC            .byte	$CC
12698 2CC6                        CC            .byte	$CC
12699 2CC7                        CC            .byte	$CC
12700 2CC8                        CC            .byte	$CC
12701 2CC9                        CC            .byte	$CC
12702 2CCA                        76            .byte	$76
12703 2CCB                        00            .byte	0
12704 2CCC                        00            .byte	0
12705 2CCD                        00            .byte	0
12706 2CCE                        00            .byte	0
12707                                           ! 1522  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12708 2CCF                        00            .byte	0
12709 2CD0                        00            .byte	0
12710 2CD1                        00            .byte	0
12711 2CD2                        00            .byte	0
12712 2CD3                        00            .byte	0
12713 2CD4                        C3            .byte	$C3
12714 2CD5                        C3            .byte	$C3
12715 2CD6                        C3            .byte	$C3
12716 2CD7                        C3            .byte	$C3
12717 2CD8                        66            .byte	$66
12718 2CD9                        3C            .byte	$3C
12719 2CDA                        18            .byte	$18
12720 2CDB                        00            .byte	0
12721 2CDC                        00            .byte	0
12722 2CDD                        00            .byte	0
12723 2CDE                        00            .byte	0
12724                                           ! 1523  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12725 2CDF                        00            .byte	0
12726 2CE0                        00            .byte	0
12727 2CE1                        00            .byte	0
12728 2CE2                        00            .byte	0
12729 2CE3                        00            .byte	0
12730 2CE4                        C3            .byte	$C3
12731 2CE5                        C3            .byte	$C3
12732 2CE6                        C3            .byte	$C3
12733 2CE7                        DB            .byte	$DB
12734 2CE8                        DB            .byte	$DB
12735 2CE9                        FF            .byte	$FF
12736 2CEA                        66            .byte	$66
12737 2CEB                        00            .byte	0
12738 2CEC                        00            .byte	0
12739 2CED                        00            .byte	0
12740 2CEE                        00            .byte	0
12741                                           ! 1524  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12742 2CEF                        00            .byte	0
12743 2CF0                        00            .byte	0
12744 2CF1                        00            .byte	0
12745 2CF2                        00            .byte	0
12746 2CF3                        00            .byte	0
12747 2CF4                        C3            .byte	$C3
12748 2CF5                        66            .byte	$66
12749 2CF6                        3C            .byte	$3C
12750 2CF7                        18            .byte	$18
12751 2CF8                        3C            .byte	$3C
12752 2CF9                        66            .byte	$66
12753 2CFA                        C3            .byte	$C3
12754 2CFB                        00            .byte	0
12755 2CFC                        00            .byte	0
12756 2CFD                        00            .byte	0
12757 2CFE                        00            .byte	0
12758                                           ! 1525  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12759 2CFF                        00            .byte	0
12760 2D00                        00            .byte	0
12761 2D01                        00            .byte	0
12762 2D02                        00            .byte	0
12763 2D03                        00            .byte	0
12764 2D04                        C6            .byte	$C6
12765 2D05                        C6            .byte	$C6
12766 2D06                        C6            .byte	$C6
12767 2D07                        C6            .byte	$C6
12768 2D08                        C6            .byte	$C6
12769 2D09                        C6            .byte	$C6
12770 2D0A                        7E            .byte	$7E
12771 2D0B                        06            .byte	6
12772 2D0C                        0C            .byte	$C
12773 2D0D                        F8            .byte	$F8
12774 2D0E                        00            .byte	0
12775                                           ! 1526  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12776 2D0F                        00            .byte	0
12777 2D10                        00            .byte	0
12778 2D11                        00            .byte	0
12779 2D12                        00            .byte	0
12780 2D13                        00            .byte	0
12781 2D14                        FE            .byte	$FE
12782 2D15                        CC            .byte	$CC
12783 2D16                        18            .byte	$18
12784 2D17                        30            .byte	$30
12785 2D18                        60            .byte	$60
12786 2D19                        C6            .byte	$C6
12787 2D1A                        FE            .byte	$FE
12788 2D1B                        00            .byte	0
12789 2D1C                        00            .byte	0
12790 2D1D                        00            .byte	0
12791 2D1E                        00            .byte	0
12792                                           ! 1527  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12793 2D1F                        00            .byte	0
12794 2D20                        00            .byte	0
12795 2D21                        0E            .byte	$E
12796 2D22                        18            .byte	$18
12797 2D23                        18            .byte	$18
12798 2D24                        18            .byte	$18
12799 2D25                        70            .byte	$70
12800 2D26                        18            .byte	$18
12801 2D27                        18            .byte	$18
12802 2D28                        18            .byte	$18
12803 2D29                        18            .byte	$18
12804 2D2A                        0E            .byte	$E
12805 2D2B                        00            .byte	0
12806 2D2C                        00            .byte	0
12807 2D2D                        00            .byte	0
12808 2D2E                        00            .byte	0
12809                                           ! 1528  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12810 2D2F                        00            .byte	0
12811 2D30                        00            .byte	0
12812 2D31                        18            .byte	$18
12813 2D32                        18            .byte	$18
12814 2D33                        18            .byte	$18
12815 2D34                        18            .byte	$18
12816 2D35                        00            .byte	0
12817 2D36                        18            .byte	$18
12818 2D37                        18            .byte	$18
12819 2D38                        18            .byte	$18
12820 2D39                        18            .byte	$18
12821 2D3A                        18            .byte	$18
12822 2D3B                        00            .byte	0
12823 2D3C                        00            .byte	0
12824 2D3D                        00            .byte	0
12825 2D3E                        00            .byte	0
12826                                           ! 1529  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12827 2D3F                        00            .byte	0
12828 2D40                        00            .byte	0
12829 2D41                        70            .byte	$70
12830 2D42                        18            .byte	$18
12831 2D43                        18            .byte	$18
12832 2D44                        18            .byte	$18
12833 2D45                        0E            .byte	$E
12834 2D46                        18            .byte	$18
12835 2D47                        18            .byte	$18
12836 2D48                        18            .byte	$18
12837 2D49                        18            .byte	$18
12838 2D4A                        70            .byte	$70
12839 2D4B                        00            .byte	0
12840 2D4C                        00            .byte	0
12841 2D4D                        00            .byte	0
12842 2D4E                        00            .byte	0
12843                                           ! 1530  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12844 2D4F                        00            .byte	0
12845 2D50                        00            .byte	0
12846 2D51                        76            .byte	$76
12847 2D52                        DC            .byte	$DC
12848 2D53                        00            .byte	0
12849 2D54                        00            .byte	0
12850 2D55                        00            .byte	0
12851 2D56                        00            .byte	0
12852 2D57                        00            .byte	0
12853 2D58                        00            .byte	0
12854 2D59                        00            .byte	0
12855 2D5A                        00            .byte	0
12856 2D5B                        00            .byte	0
12857 2D5C                        00            .byte	0
12858 2D5D                        00            .byte	0
12859 2D5E                        00            .byte	0
12860                                           ! 1531  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12861 2D5F                        00            .byte	0
12862 2D60                        00            .byte	0
12863 2D61                        00            .byte	0
12864 2D62                        00            .byte	0
12865 2D63                        10            .byte	$10
12866 2D64                        38            .byte	$38
12867 2D65                        6C            .byte	$6C
12868 2D66                        C6            .byte	$C6
12869 2D67                        C6            .byte	$C6
12870 2D68                        C6            .byte	$C6
12871 2D69                        FE            .byte	$FE
12872 2D6A                        00            .byte	0
12873 2D6B                        00            .byte	0
12874 2D6C                        00            .byte	0
12875 2D6D                        00            .byte	0
12876 2D6E                        00            .byte	0
12877                                           ! 1532  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12878 2D6F                        00            .byte	0
12879 2D70                        00            .byte	0
12880 2D71                        3C            .byte	$3C
12881 2D72                        66            .byte	$66
12882 2D73                        C2            .byte	$C2
12883 2D74                        C0            .byte	$C0
12884 2D75                        C0            .byte	$C0
12885 2D76                        C0            .byte	$C0
12886 2D77                        C2            .byte	$C2
12887 2D78                        66            .byte	$66
12888 2D79                        3C            .byte	$3C
12889 2D7A                        0C            .byte	$C
12890 2D7B                        06            .byte	6
12891 2D7C                        7C            .byte	$7C
12892 2D7D                        00            .byte	0
12893 2D7E                        00            .byte	0
12894                                           ! 1533  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12895 2D7F                        00            .byte	0
12896 2D80                        00            .byte	0
12897 2D81                        CC            .byte	$CC
12898 2D82                        00            .byte	0
12899 2D83                        00            .byte	0
12900 2D84                        CC            .byte	$CC
12901 2D85                        CC            .byte	$CC
12902 2D86                        CC            .byte	$CC
12903 2D87                        CC            .byte	$CC
12904 2D88                        CC            .byte	$CC
12905 2D89                        CC            .byte	$CC
12906 2D8A                        76            .byte	$76
12907 2D8B                        00            .byte	0
12908 2D8C                        00            .byte	0
12909 2D8D                        00            .byte	0
12910 2D8E                        00            .byte	0
12911                                           ! 1534  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12912 2D8F                        00            .byte	0
12913 2D90                        0C            .byte	$C
12914 2D91                        18            .byte	$18
12915 2D92                        30            .byte	$30
12916 2D93                        00            .byte	0
12917 2D94                        7C            .byte	$7C
12918 2D95                        C6            .byte	$C6
12919 2D96                        FE            .byte	$FE
12920 2D97                        C0            .byte	$C0
12921 2D98                        C0            .byte	$C0
12922 2D99                        C6            .byte	$C6
12923 2D9A                        7C            .byte	$7C
12924 2D9B                        00            .byte	0
12925 2D9C                        00            .byte	0
12926 2D9D                        00            .byte	0
12927 2D9E                        00            .byte	0
12928                                           ! 1535  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12929 2D9F                        00            .byte	0
12930 2DA0                        10            .byte	$10
12931 2DA1                        38            .byte	$38
12932 2DA2                        6C            .byte	$6C
12933 2DA3                        00            .byte	0
12934 2DA4                        78            .byte	$78
12935 2DA5                        0C            .byte	$C
12936 2DA6                        7C            .byte	$7C
12937 2DA7                        CC            .byte	$CC
12938 2DA8                        CC            .byte	$CC
12939 2DA9                        CC            .byte	$CC
12940 2DAA                        76            .byte	$76
12941 2DAB                        00            .byte	0
12942 2DAC                        00            .byte	0
12943 2DAD                        00            .byte	0
12944 2DAE                        00            .byte	0
12945                                           ! 1536  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12946 2DAF                        00            .byte	0
12947 2DB0                        00            .byte	0
12948 2DB1                        CC            .byte	$CC
12949 2DB2                        00            .byte	0
12950 2DB3                        00            .byte	0
12951 2DB4                        78            .byte	$78
12952 2DB5                        0C            .byte	$C
12953 2DB6                        7C            .byte	$7C
12954 2DB7                        CC            .byte	$CC
12955 2DB8                        CC            .byte	$CC
12956 2DB9                        CC            .byte	$CC
12957 2DBA                        76            .byte	$76
12958 2DBB                        00            .byte	0
12959 2DBC                        00            .byte	0
12960 2DBD                        00            .byte	0
12961 2DBE                        00            .byte	0
12962                                           ! 1537  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12963 2DBF                        00            .byte	0
12964 2DC0                        60            .byte	$60
12965 2DC1                        30            .byte	$30
12966 2DC2                        18            .byte	$18
12967 2DC3                        00            .byte	0
12968 2DC4                        78            .byte	$78
12969 2DC5                        0C            .byte	$C
12970 2DC6                        7C            .byte	$7C
12971 2DC7                        CC            .byte	$CC
12972 2DC8                        CC            .byte	$CC
12973 2DC9                        CC            .byte	$CC
12974 2DCA                        76            .byte	$76
12975 2DCB                        00            .byte	0
12976 2DCC                        00            .byte	0
12977 2DCD                        00            .byte	0
12978 2DCE                        00            .byte	0
12979                                           ! 1538  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12980 2DCF                        00            .byte	0
12981 2DD0                        38            .byte	$38
12982 2DD1                        6C            .byte	$6C
12983 2DD2                        38            .byte	$38
12984 2DD3                        00            .byte	0
12985 2DD4                        78            .byte	$78
12986 2DD5                        0C            .byte	$C
12987 2DD6                        7C            .byte	$7C
12988 2DD7                        CC            .byte	$CC
12989 2DD8                        CC            .byte	$CC
12990 2DD9                        CC            .byte	$CC
12991 2DDA                        76            .byte	$76
12992 2DDB                        00            .byte	0
12993 2DDC                        00            .byte	0
12994 2DDD                        00            .byte	0
12995 2DDE                        00            .byte	0
12996                                           ! 1539  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12997 2DDF                        00            .byte	0
12998 2DE0                        00            .byte	0
12999 2DE1                        00            .byte	0
13000 2DE2                        00            .byte	0
13001 2DE3                        3C            .byte	$3C
13002 2DE4                        66            .byte	$66
13003 2DE5                        60            .byte	$60
13004 2DE6                        60            .byte	$60
13005 2DE7                        66            .byte	$66
13006 2DE8                        3C            .byte	$3C
13007 2DE9                        0C            .byte	$C
13008 2DEA                        06            .byte	6
13009 2DEB                        3C            .byte	$3C
13010 2DEC                        00            .byte	0
13011 2DED                        00            .byte	0
13012 2DEE                        00            .byte	0
13013                                           ! 1540  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13014 2DEF                        00            .byte	0
13015 2DF0                        10            .byte	$10
13016 2DF1                        38            .byte	$38
13017 2DF2                        6C            .byte	$6C
13018 2DF3                        00            .byte	0
13019 2DF4                        7C            .byte	$7C
13020 2DF5                        C6            .byte	$C6
13021 2DF6                        FE            .byte	$FE
13022 2DF7                        C0            .byte	$C0
13023 2DF8                        C0            .byte	$C0
13024 2DF9                        C6            .byte	$C6
13025 2DFA                        7C            .byte	$7C
13026 2DFB                        00            .byte	0
13027 2DFC                        00            .byte	0
13028 2DFD                        00            .byte	0
13029 2DFE                        00            .byte	0
13030                                           ! 1541  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13031 2DFF                        00            .byte	0
13032 2E00                        00            .byte	0
13033 2E01                        C6            .byte	$C6
13034 2E02                        00            .byte	0
13035 2E03                        00            .byte	0
13036 2E04                        7C            .byte	$7C
13037 2E05                        C6            .byte	$C6
13038 2E06                        FE            .byte	$FE
13039 2E07                        C0            .byte	$C0
13040 2E08                        C0            .byte	$C0
13041 2E09                        C6            .byte	$C6
13042 2E0A                        7C            .byte	$7C
13043 2E0B                        00            .byte	0
13044 2E0C                        00            .byte	0
13045 2E0D                        00            .byte	0
13046 2E0E                        00            .byte	0
13047                                           ! 1542  0x00, 0x60, 0x30, 0x18
13048 2E0F                        00            .byte	0
13049 2E10                        60            .byte	$60
13050 2E11                        30            .byte	$30
13051                                           ! 1542 , 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13052 2E12                        18            .byte	$18
13053 2E13                        00            .byte	0
13054 2E14                        7C            .byte	$7C
13055 2E15                        C6            .byte	$C6
13056 2E16                        FE            .byte	$FE
13057 2E17                        C0            .byte	$C0
13058 2E18                        C0            .byte	$C0
13059 2E19                        C6            .byte	$C6
13060 2E1A                        7C            .byte	$7C
13061 2E1B                        00            .byte	0
13062 2E1C                        00            .byte	0
13063 2E1D                        00            .byte	0
13064 2E1E                        00            .byte	0
13065                                           ! 1543  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13066 2E1F                        00            .byte	0
13067 2E20                        00            .byte	0
13068 2E21                        66            .byte	$66
13069 2E22                        00            .byte	0
13070 2E23                        00            .byte	0
13071 2E24                        38            .byte	$38
13072 2E25                        18            .byte	$18
13073 2E26                        18            .byte	$18
13074 2E27                        18            .byte	$18
13075 2E28                        18            .byte	$18
13076 2E29                        18            .byte	$18
13077 2E2A                        3C            .byte	$3C
13078 2E2B                        00            .byte	0
13079 2E2C                        00            .byte	0
13080 2E2D                        00            .byte	0
13081 2E2E                        00            .byte	0
13082                                           ! 1544  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13083 2E2F                        00            .byte	0
13084 2E30                        18            .byte	$18
13085 2E31                        3C            .byte	$3C
13086 2E32                        66            .byte	$66
13087 2E33                        00            .byte	0
13088 2E34                        38            .byte	$38
13089 2E35                        18            .byte	$18
13090 2E36                        18            .byte	$18
13091 2E37                        18            .byte	$18
13092 2E38                        18            .byte	$18
13093 2E39                        18            .byte	$18
13094 2E3A                        3C            .byte	$3C
13095 2E3B                        00            .byte	0
13096 2E3C                        00            .byte	0
13097 2E3D                        00            .byte	0
13098 2E3E                        00            .byte	0
13099                                           ! 1545  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13100 2E3F                        00            .byte	0
13101 2E40                        60            .byte	$60
13102 2E41                        30            .byte	$30
13103 2E42                        18            .byte	$18
13104 2E43                        00            .byte	0
13105 2E44                        38            .byte	$38
13106 2E45                        18            .byte	$18
13107 2E46                        18            .byte	$18
13108 2E47                        18            .byte	$18
13109 2E48                        18            .byte	$18
13110 2E49                        18            .byte	$18
13111 2E4A                        3C            .byte	$3C
13112 2E4B                        00            .byte	0
13113 2E4C                        00            .byte	0
13114 2E4D                        00            .byte	0
13115 2E4E                        00            .byte	0
13116                                           ! 1546  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13117 2E4F                        00            .byte	0
13118 2E50                        C6            .byte	$C6
13119 2E51                        00            .byte	0
13120 2E52                        10            .byte	$10
13121 2E53                        38            .byte	$38
13122 2E54                        6C            .byte	$6C
13123 2E55                        C6            .byte	$C6
13124 2E56                        C6            .byte	$C6
13125 2E57                        FE            .byte	$FE
13126 2E58                        C6            .byte	$C6
13127 2E59                        C6            .byte	$C6
13128 2E5A                        C6            .byte	$C6
13129 2E5B                        00            .byte	0
13130 2E5C                        00            .byte	0
13131 2E5D                        00            .byte	0
13132 2E5E                        00            .byte	0
13133                                           ! 1547  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13134 2E5F                        38            .byte	$38
13135 2E60                        6C            .byte	$6C
13136 2E61                        38            .byte	$38
13137 2E62                        00            .byte	0
13138 2E63                        38            .byte	$38
13139 2E64                        6C            .byte	$6C
13140 2E65                        C6            .byte	$C6
13141 2E66                        C6            .byte	$C6
13142 2E67                        FE            .byte	$FE
13143 2E68                        C6            .byte	$C6
13144 2E69                        C6            .byte	$C6
13145 2E6A                        C6            .byte	$C6
13146 2E6B                        00            .byte	0
13147 2E6C                        00            .byte	0
13148 2E6D                        00            .byte	0
13149 2E6E                        00            .byte	0
13150                                           ! 1548  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13151 2E6F                        18            .byte	$18
13152 2E70                        30            .byte	$30
13153 2E71                        60            .byte	$60
13154 2E72                        00            .byte	0
13155 2E73                        FE            .byte	$FE
13156 2E74                        66            .byte	$66
13157 2E75                        60            .byte	$60
13158 2E76                        7C            .byte	$7C
13159 2E77                        60            .byte	$60
13160 2E78                        60            .byte	$60
13161 2E79                        66            .byte	$66
13162 2E7A                        FE            .byte	$FE
13163 2E7B                        00            .byte	0
13164 2E7C                        00            .byte	0
13165 2E7D                        00            .byte	0
13166 2E7E                        00            .byte	0
13167                                           ! 1549  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13168 2E7F                        00            .byte	0
13169 2E80                        00            .byte	0
13170 2E81                        00            .byte	0
13171 2E82                        00            .byte	0
13172 2E83                        00            .byte	0
13173 2E84                        6E            .byte	$6E
13174 2E85                        3B            .byte	$3B
13175 2E86                        1B            .byte	$1B
13176 2E87                        7E            .byte	$7E
13177 2E88                        D8            .byte	$D8
13178 2E89                        DC            .byte	$DC
13179 2E8A                        77            .byte	$77
13180 2E8B                        00            .byte	0
13181 2E8C                        00            .byte	0
13182 2E8D                        00            .byte	0
13183 2E8E                        00            .byte	0
13184                                           ! 1550  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13185 2E8F                        00            .byte	0
13186 2E90                        00            .byte	0
13187 2E91                        3E            .byte	$3E
13188 2E92                        6C            .byte	$6C
13189 2E93                        CC            .byte	$CC
13190 2E94                        CC            .byte	$CC
13191 2E95                        FE            .byte	$FE
13192 2E96                        CC            .byte	$CC
13193 2E97                        CC            .byte	$CC
13194 2E98                        CC            .byte	$CC
13195 2E99                        CC            .byte	$CC
13196 2E9A                        CE            .byte	$CE
13197 2E9B                        00            .byte	0
13198 2E9C                        00            .byte	0
13199 2E9D                        00            .byte	0
13200 2E9E                        00            .byte	0
13201                                           ! 1551  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13202 2E9F                        00            .byte	0
13203 2EA0                        10            .byte	$10
13204 2EA1                        38            .byte	$38
13205 2EA2                        6C            .byte	$6C
13206 2EA3                        00            .byte	0
13207 2EA4                        7C            .byte	$7C
13208 2EA5                        C6            .byte	$C6
13209 2EA6                        C6            .byte	$C6
13210 2EA7                        C6            .byte	$C6
13211 2EA8                        C6            .byte	$C6
13212 2EA9                        C6            .byte	$C6
13213 2EAA                        7C            .byte	$7C
13214 2EAB                        00            .byte	0
13215 2EAC                        00            .byte	0
13216 2EAD                        00            .byte	0
13217 2EAE                        00            .byte	0
13218                                           ! 1552  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13219 2EAF                        00            .byte	0
13220 2EB0                        00            .byte	0
13221 2EB1                        C6            .byte	$C6
13222 2EB2                        00            .byte	0
13223 2EB3                        00            .byte	0
13224 2EB4                        7C            .byte	$7C
13225 2EB5                        C6            .byte	$C6
13226 2EB6                        C6            .byte	$C6
13227 2EB7                        C6            .byte	$C6
13228 2EB8                        C6            .byte	$C6
13229 2EB9                        C6            .byte	$C6
13230 2EBA                        7C            .byte	$7C
13231 2EBB                        00            .byte	0
13232 2EBC                        00            .byte	0
13233 2EBD                        00            .byte	0
13234 2EBE                        00            .byte	0
13235                                           ! 1553  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13236 2EBF                        00            .byte	0
13237 2EC0                        60            .byte	$60
13238 2EC1                        30            .byte	$30
13239 2EC2                        18            .byte	$18
13240 2EC3                        00            .byte	0
13241 2EC4                        7C            .byte	$7C
13242 2EC5                        C6            .byte	$C6
13243 2EC6                        C6            .byte	$C6
13244 2EC7                        C6            .byte	$C6
13245 2EC8                        C6            .byte	$C6
13246 2EC9                        C6            .byte	$C6
13247 2ECA                        7C            .byte	$7C
13248 2ECB                        00            .byte	0
13249 2ECC                        00            .byte	0
13250 2ECD                        00            .byte	0
13251 2ECE                        00            .byte	0
13252                                           ! 1554  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13253 2ECF                        00            .byte	0
13254 2ED0                        30            .byte	$30
13255 2ED1                        78            .byte	$78
13256 2ED2                        CC            .byte	$CC
13257 2ED3                        00            .byte	0
13258 2ED4                        CC            .byte	$CC
13259 2ED5                        CC            .byte	$CC
13260 2ED6                        CC            .byte	$CC
13261 2ED7                        CC            .byte	$CC
13262 2ED8                        CC            .byte	$CC
13263 2ED9                        CC            .byte	$CC
13264 2EDA                        76            .byte	$76
13265 2EDB                        00            .byte	0
13266 2EDC                        00            .byte	0
13267 2EDD                        00            .byte	0
13268 2EDE                        00            .byte	0
13269                                           ! 1555  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13270 2EDF                        00            .byte	0
13271 2EE0                        60            .byte	$60
13272 2EE1                        30            .byte	$30
13273 2EE2                        18            .byte	$18
13274 2EE3                        00            .byte	0
13275 2EE4                        CC            .byte	$CC
13276 2EE5                        CC            .byte	$CC
13277 2EE6                        CC            .byte	$CC
13278 2EE7                        CC            .byte	$CC
13279 2EE8                        CC            .byte	$CC
13280 2EE9                        CC            .byte	$CC
13281 2EEA                        76            .byte	$76
13282 2EEB                        00            .byte	0
13283 2EEC                        00            .byte	0
13284 2EED                        00            .byte	0
13285 2EEE                        00            .byte	0
13286                                           ! 1556  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13287 2EEF                        00            .byte	0
13288 2EF0                        00            .byte	0
13289 2EF1                        C6            .byte	$C6
13290 2EF2                        00            .byte	0
13291 2EF3                        00            .byte	0
13292 2EF4                        C6            .byte	$C6
13293 2EF5                        C6            .byte	$C6
13294 2EF6                        C6            .byte	$C6
13295 2EF7                        C6            .byte	$C6
13296 2EF8                        C6            .byte	$C6
13297 2EF9                        C6            .byte	$C6
13298 2EFA                        7E            .byte	$7E
13299 2EFB                        06            .byte	6
13300 2EFC                        0C            .byte	$C
13301 2EFD                        78            .byte	$78
13302 2EFE                        00            .byte	0
13303                                           ! 1557  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13304 2EFF                        00            .byte	0
13305 2F00                        C6            .byte	$C6
13306 2F01                        00            .byte	0
13307 2F02                        7C            .byte	$7C
13308 2F03                        C6            .byte	$C6
13309 2F04                        C6            .byte	$C6
13310 2F05                        C6            .byte	$C6
13311 2F06                        C6            .byte	$C6
13312 2F07                        C6            .byte	$C6
13313 2F08                        C6            .byte	$C6
13314 2F09                        C6            .byte	$C6
13315 2F0A                        7C            .byte	$7C
13316 2F0B                        00            .byte	0
13317 2F0C                        00            .byte	0
13318 2F0D                        00            .byte	0
13319 2F0E                        00            .byte	0
13320                                           ! 1558  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13321 2F0F                        00            .byte	0
13322 2F10                        C6            .byte	$C6
13323 2F11                        00            .byte	0
13324 2F12                        C6            .byte	$C6
13325 2F13                        C6            .byte	$C6
13326 2F14                        C6            .byte	$C6
13327 2F15                        C6            .byte	$C6
13328 2F16                        C6            .byte	$C6
13329 2F17                        C6            .byte	$C6
13330 2F18                        C6            .byte	$C6
13331 2F19                        C6            .byte	$C6
13332 2F1A                        7C            .byte	$7C
13333 2F1B                        00            .byte	0
13334 2F1C                        00            .byte	0
13335 2F1D                        00            .byte	0
13336 2F1E                        00            .byte	0
13337                                           ! 1559  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13338 2F1F                        00            .byte	0
13339 2F20                        18            .byte	$18
13340 2F21                        18            .byte	$18
13341 2F22                        7E            .byte	$7E
13342 2F23                        C3            .byte	$C3
13343 2F24                        C0            .byte	$C0
13344 2F25                        C0            .byte	$C0
13345 2F26                        C0            .byte	$C0
13346 2F27                        C3            .byte	$C3
13347 2F28                        7E            .byte	$7E
13348 2F29                        18            .byte	$18
13349 2F2A                        18            .byte	$18
13350 2F2B                        00            .byte	0
13351 2F2C                        00            .byte	0
13352 2F2D                        00            .byte	0
13353 2F2E                        00            .byte	0
13354                                           ! 1560  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13355 2F2F                        00            .byte	0
13356 2F30                        38            .byte	$38
13357 2F31                        6C            .byte	$6C
13358 2F32                        64            .byte	$64
13359 2F33                        60            .byte	$60
13360 2F34                        F0            .byte	$F0
13361 2F35                        60            .byte	$60
13362 2F36                        60            .byte	$60
13363 2F37                        60            .byte	$60
13364 2F38                        60            .byte	$60
13365 2F39                        E6            .byte	$E6
13366 2F3A                        FC            .byte	$FC
13367 2F3B                        00            .byte	0
13368 2F3C                        00            .byte	0
13369 2F3D                        00            .byte	0
13370 2F3E                        00            .byte	0
13371                                           ! 1561  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13372 2F3F                        00            .byte	0
13373 2F40                        00            .byte	0
13374 2F41                        C3            .byte	$C3
13375 2F42                        66            .byte	$66
13376 2F43                        3C            .byte	$3C
13377 2F44                        18            .byte	$18
13378 2F45                        FF            .byte	$FF
13379 2F46                        18            .byte	$18
13380 2F47                        FF            .byte	$FF
13381 2F48                        18            .byte	$18
13382 2F49                        18            .byte	$18
13383 2F4A                        18            .byte	$18
13384 2F4B                        00            .byte	0
13385 2F4C                        00            .byte	0
13386 2F4D                        00            .byte	0
13387 2F4E                        00            .byte	0
13388                                           ! 1562  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13389 2F4F                        00            .byte	0
13390 2F50                        FC            .byte	$FC
13391 2F51                        66            .byte	$66
13392 2F52                        66            .byte	$66
13393 2F53                        7C            .byte	$7C
13394 2F54                        62            .byte	$62
13395 2F55                        66            .byte	$66
13396 2F56                        6F            .byte	$6F
13397 2F57                        66            .byte	$66
13398 2F58                        66            .byte	$66
13399 2F59                        66            .byte	$66
13400 2F5A                        F3            .byte	$F3
13401 2F5B                        00            .byte	0
13402 2F5C                        00            .byte	0
13403 2F5D                        00            .byte	0
13404 2F5E                        00            .byte	0
13405                                           ! 1563  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x1
13406 2F5F                        00            .byte	0
13407 2F60                        0E            .byte	$E
13408 2F61                        1B            .byte	$1B
13409 2F62                        18            .byte	$18
13410 2F63                        18            .byte	$18
13411                                           ! 1563 8, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13412 2F64                        18            .byte	$18
13413 2F65                        7E            .byte	$7E
13414 2F66                        18            .byte	$18
13415 2F67                        18            .byte	$18
13416 2F68                        18            .byte	$18
13417 2F69                        18            .byte	$18
13418 2F6A                        18            .byte	$18
13419 2F6B                        D8            .byte	$D8
13420 2F6C                        70            .byte	$70
13421 2F6D                        00            .byte	0
13422 2F6E                        00            .byte	0
13423                                           ! 1564  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13424 2F6F                        00            .byte	0
13425 2F70                        18            .byte	$18
13426 2F71                        30            .byte	$30
13427 2F72                        60            .byte	$60
13428 2F73                        00            .byte	0
13429 2F74                        78            .byte	$78
13430 2F75                        0C            .byte	$C
13431 2F76                        7C            .byte	$7C
13432 2F77                        CC            .byte	$CC
13433 2F78                        CC            .byte	$CC
13434 2F79                        CC            .byte	$CC
13435 2F7A                        76            .byte	$76
13436 2F7B                        00            .byte	0
13437 2F7C                        00            .byte	0
13438 2F7D                        00            .byte	0
13439 2F7E                        00            .byte	0
13440                                           ! 1565  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13441 2F7F                        00            .byte	0
13442 2F80                        0C            .byte	$C
13443 2F81                        18            .byte	$18
13444 2F82                        30            .byte	$30
13445 2F83                        00            .byte	0
13446 2F84                        38            .byte	$38
13447 2F85                        18            .byte	$18
13448 2F86                        18            .byte	$18
13449 2F87                        18            .byte	$18
13450 2F88                        18            .byte	$18
13451 2F89                        18            .byte	$18
13452 2F8A                        3C            .byte	$3C
13453 2F8B                        00            .byte	0
13454 2F8C                        00            .byte	0
13455 2F8D                        00            .byte	0
13456 2F8E                        00            .byte	0
13457                                           ! 1566  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13458 2F8F                        00            .byte	0
13459 2F90                        18            .byte	$18
13460 2F91                        30            .byte	$30
13461 2F92                        60            .byte	$60
13462 2F93                        00            .byte	0
13463 2F94                        7C            .byte	$7C
13464 2F95                        C6            .byte	$C6
13465 2F96                        C6            .byte	$C6
13466 2F97                        C6            .byte	$C6
13467 2F98                        C6            .byte	$C6
13468 2F99                        C6            .byte	$C6
13469 2F9A                        7C            .byte	$7C
13470 2F9B                        00            .byte	0
13471 2F9C                        00            .byte	0
13472 2F9D                        00            .byte	0
13473 2F9E                        00            .byte	0
13474                                           ! 1567  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13475 2F9F                        00            .byte	0
13476 2FA0                        18            .byte	$18
13477 2FA1                        30            .byte	$30
13478 2FA2                        60            .byte	$60
13479 2FA3                        00            .byte	0
13480 2FA4                        CC            .byte	$CC
13481 2FA5                        CC            .byte	$CC
13482 2FA6                        CC            .byte	$CC
13483 2FA7                        CC            .byte	$CC
13484 2FA8                        CC            .byte	$CC
13485 2FA9                        CC            .byte	$CC
13486 2FAA                        76            .byte	$76
13487 2FAB                        00            .byte	0
13488 2FAC                        00            .byte	0
13489 2FAD                        00            .byte	0
13490 2FAE                        00            .byte	0
13491                                           ! 1568  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13492 2FAF                        00            .byte	0
13493 2FB0                        00            .byte	0
13494 2FB1                        76            .byte	$76
13495 2FB2                        DC            .byte	$DC
13496 2FB3                        00            .byte	0
13497 2FB4                        DC            .byte	$DC
13498 2FB5                        66            .byte	$66
13499 2FB6                        66            .byte	$66
13500 2FB7                        66            .byte	$66
13501 2FB8                        66            .byte	$66
13502 2FB9                        66            .byte	$66
13503 2FBA                        66            .byte	$66
13504 2FBB                        00            .byte	0
13505 2FBC                        00            .byte	0
13506 2FBD                        00            .byte	0
13507 2FBE                        00            .byte	0
13508                                           ! 1569  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13509 2FBF                        76            .byte	$76
13510 2FC0                        DC            .byte	$DC
13511 2FC1                        00            .byte	0
13512 2FC2                        C6            .byte	$C6
13513 2FC3                        E6            .byte	$E6
13514 2FC4                        F6            .byte	$F6
13515 2FC5                        FE            .byte	$FE
13516 2FC6                        DE            .byte	$DE
13517 2FC7                        CE            .byte	$CE
13518 2FC8                        C6            .byte	$C6
13519 2FC9                        C6            .byte	$C6
13520 2FCA                        C6            .byte	$C6
13521 2FCB                        00            .byte	0
13522 2FCC                        00            .byte	0
13523 2FCD                        00            .byte	0
13524 2FCE                        00            .byte	0
13525                                           ! 1570  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13526 2FCF                        00            .byte	0
13527 2FD0                        3C            .byte	$3C
13528 2FD1                        6C            .byte	$6C
13529 2FD2                        6C            .byte	$6C
13530 2FD3                        3E            .byte	$3E
13531 2FD4                        00            .byte	0
13532 2FD5                        7E            .byte	$7E
13533 2FD6                        00            .byte	0
13534 2FD7                        00            .byte	0
13535 2FD8                        00            .byte	0
13536 2FD9                        00            .byte	0
13537 2FDA                        00            .byte	0
13538 2FDB                        00            .byte	0
13539 2FDC                        00            .byte	0
13540 2FDD                        00            .byte	0
13541 2FDE                        00            .byte	0
13542                                           ! 1571  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13543 2FDF                        00            .byte	0
13544 2FE0                        38            .byte	$38
13545 2FE1                        6C            .byte	$6C
13546 2FE2                        6C            .byte	$6C
13547 2FE3                        38            .byte	$38
13548 2FE4                        00            .byte	0
13549 2FE5                        7C            .byte	$7C
13550 2FE6                        00            .byte	0
13551 2FE7                        00            .byte	0
13552 2FE8                        00            .byte	0
13553 2FE9                        00            .byte	0
13554 2FEA                        00            .byte	0
13555 2FEB                        00            .byte	0
13556 2FEC                        00            .byte	0
13557 2FED                        00            .byte	0
13558 2FEE                        00            .byte	0
13559                                           ! 1572  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13560 2FEF                        00            .byte	0
13561 2FF0                        00            .byte	0
13562 2FF1                        30            .byte	$30
13563 2FF2                        30            .byte	$30
13564 2FF3                        00            .byte	0
13565 2FF4                        30            .byte	$30
13566 2FF5                        30            .byte	$30
13567 2FF6                        60            .byte	$60
13568 2FF7                        C0            .byte	$C0
13569 2FF8                        C6            .byte	$C6
13570 2FF9                        C6            .byte	$C6
13571 2FFA                        7C            .byte	$7C
13572 2FFB                        00            .byte	0
13573 2FFC                        00            .byte	0
13574 2FFD                        00            .byte	0
13575 2FFE                        00            .byte	0
13576                                           ! 1573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13577 2FFF                        00            .byte	0
13578 3000                        00            .byte	0
13579 3001                        00            .byte	0
13580 3002                        00            .byte	0
13581 3003                        00            .byte	0
13582 3004                        00            .byte	0
13583 3005                        FE            .byte	$FE
13584 3006                        C0            .byte	$C0
13585 3007                        C0            .byte	$C0
13586 3008                        C0            .byte	$C0
13587 3009                        C0            .byte	$C0
13588 300A                        00            .byte	0
13589 300B                        00            .byte	0
13590 300C                        00            .byte	0
13591 300D                        00            .byte	0
13592 300E                        00            .byte	0
13593                                           ! 1574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13594 300F                        00            .byte	0
13595 3010                        00            .byte	0
13596 3011                        00            .byte	0
13597 3012                        00            .byte	0
13598 3013                        00            .byte	0
13599 3014                        00            .byte	0
13600 3015                        FE            .byte	$FE
13601 3016                        06            .byte	6
13602 3017                        06            .byte	6
13603 3018                        06            .byte	6
13604 3019                        06            .byte	6
13605 301A                        00            .byte	0
13606 301B                        00            .byte	0
13607 301C                        00            .byte	0
13608 301D                        00            .byte	0
13609 301E                        00            .byte	0
13610                                           ! 1575  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13611 301F                        00            .byte	0
13612 3020                        C0            .byte	$C0
13613 3021                        C0            .byte	$C0
13614 3022                        C2            .byte	$C2
13615 3023                        C6            .byte	$C6
13616 3024                        CC            .byte	$CC
13617 3025                        18            .byte	$18
13618 3026                        30            .byte	$30
13619 3027                        60            .byte	$60
13620 3028                        CE            .byte	$CE
13621 3029                        9B            .byte	$9B
13622 302A                        06            .byte	6
13623 302B                        0C            .byte	$C
13624 302C                        1F            .byte	$1F
13625 302D                        00            .byte	0
13626 302E                        00            .byte	0
13627                                           ! 1576  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13628 302F                        00            .byte	0
13629 3030                        C0            .byte	$C0
13630 3031                        C0            .byte	$C0
13631 3032                        C2            .byte	$C2
13632 3033                        C6            .byte	$C6
13633 3034                        CC            .byte	$CC
13634 3035                        18            .byte	$18
13635 3036                        30            .byte	$30
13636 3037                        66            .byte	$66
13637 3038                        CE            .byte	$CE
13638 3039                        96            .byte	$96
13639 303A                        3E            .byte	$3E
13640 303B                        06            .byte	6
13641 303C                        06            .byte	6
13642 303D                        00            .byte	0
13643 303E                        00            .byte	0
13644                                           ! 1577  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13645 303F                        00            .byte	0
13646 3040                        00            .byte	0
13647 3041                        18            .byte	$18
13648 3042                        18            .byte	$18
13649 3043                        00            .byte	0
13650 3044                        18            .byte	$18
13651 3045                        18            .byte	$18
13652 3046                        18            .byte	$18
13653 3047                        3C            .byte	$3C
13654 3048                        3C            .byte	$3C
13655 3049                        3C            .byte	$3C
13656 304A                        18            .byte	$18
13657 304B                        00            .byte	0
13658 304C                        00            .byte	0
13659 304D                        00            .byte	0
13660 304E                        00            .byte	0
13661                                           ! 1578  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13662 304F                        00            .byte	0
13663 3050                        00            .byte	0
13664 3051                        00            .byte	0
13665 3052                        00            .byte	0
13666 3053                        00            .byte	0
13667 3054                        36            .byte	$36
13668 3055                        6C            .byte	$6C
13669 3056                        D8            .byte	$D8
13670 3057                        6C            .byte	$6C
13671 3058                        36            .byte	$36
13672 3059                        00            .byte	0
13673 305A                        00            .byte	0
13674 305B                        00            .byte	0
13675 305C                        00            .byte	0
13676 305D                        00            .byte	0
13677 305E                        00            .byte	0
13678                                           ! 1579  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13679 305F                        00            .byte	0
13680 3060                        00            .byte	0
13681 3061                        00            .byte	0
13682 3062                        00            .byte	0
13683 3063                        00            .byte	0
13684 3064                        D8            .byte	$D8
13685 3065                        6C            .byte	$6C
13686 3066                        36            .byte	$36
13687 3067                        6C            .byte	$6C
13688 3068                        D8            .byte	$D8
13689 3069                        00            .byte	0
13690 306A                        00            .byte	0
13691 306B                        00            .byte	0
13692 306C                        00            .byte	0
13693 306D                        00            .byte	0
13694 306E                        00            .byte	0
13695                                           ! 1580  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13696 306F                        11            .byte	$11
13697 3070                        44            .byte	$44
13698 3071                        11            .byte	$11
13699 3072                        44            .byte	$44
13700 3073                        11            .byte	$11
13701 3074                        44            .byte	$44
13702 3075                        11            .byte	$11
13703 3076                        44            .byte	$44
13704 3077                        11            .byte	$11
13705 3078                        44            .byte	$44
13706 3079                        11            .byte	$11
13707 307A                        44            .byte	$44
13708 307B                        11            .byte	$11
13709 307C                        44            .byte	$44
13710 307D                        11            .byte	$11
13711 307E                        44            .byte	$44
13712                                           ! 1581  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13713 307F                        55            .byte	$55
13714 3080                        AA            .byte	$AA
13715 3081                        55            .byte	$55
13716 3082                        AA            .byte	$AA
13717 3083                        55            .byte	$55
13718 3084                        AA            .byte	$AA
13719 3085                        55            .byte	$55
13720 3086                        AA            .byte	$AA
13721 3087                        55            .byte	$55
13722 3088                        AA            .byte	$AA
13723 3089                        55            .byte	$55
13724 308A                        AA            .byte	$AA
13725 308B                        55            .byte	$55
13726 308C                        AA            .byte	$AA
13727 308D                        55            .byte	$55
13728 308E                        AA            .byte	$AA
13729                                           ! 1582  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13730 308F                        DD            .byte	$DD
13731 3090                        77            .byte	$77
13732 3091                        DD            .byte	$DD
13733 3092                        77            .byte	$77
13734 3093                        DD            .byte	$DD
13735 3094                        77            .byte	$77
13736 3095                        DD            .byte	$DD
13737 3096                        77            .byte	$77
13738 3097                        DD            .byte	$DD
13739 3098                        77            .byte	$77
13740 3099                        DD            .byte	$DD
13741 309A                        77            .byte	$77
13742 309B                        DD            .byte	$DD
13743 309C                        77            .byte	$77
13744 309D                        DD            .byte	$DD
13745 309E                        77            .byte	$77
13746                                           ! 1583  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13747 309F                        18            .byte	$18
13748 30A0                        18            .byte	$18
13749 30A1                        18            .byte	$18
13750 30A2                        18            .byte	$18
13751 30A3                        18            .byte	$18
13752 30A4                        18            .byte	$18
13753 30A5                        18            .byte	$18
13754 30A6                        18            .byte	$18
13755 30A7                        18            .byte	$18
13756 30A8                        18            .byte	$18
13757 30A9                        18            .byte	$18
13758 30AA                        18            .byte	$18
13759 30AB                        18            .byte	$18
13760 30AC                        18            .byte	$18
13761 30AD                        18            .byte	$18
13762 30AE                        18            .byte	$18
13763                                           ! 1584  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x
13764 30AF                        18            .byte	$18
13765 30B0                        18            .byte	$18
13766 30B1                        18            .byte	$18
13767 30B2                        18            .byte	$18
13768 30B3                        18            .byte	$18
13769 30B4                        18            .byte	$18
13770 30B5                        18            .byte	$18
13771                                           ! 1584 f8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13772 30B6                        F8            .byte	$F8
13773 30B7                        18            .byte	$18
13774 30B8                        18            .byte	$18
13775 30B9                        18            .byte	$18
13776 30BA                        18            .byte	$18
13777 30BB                        18            .byte	$18
13778 30BC                        18            .byte	$18
13779 30BD                        18            .byte	$18
13780 30BE                        18            .byte	$18
13781                                           ! 1585  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13782 30BF                        18            .byte	$18
13783 30C0                        18            .byte	$18
13784 30C1                        18            .byte	$18
13785 30C2                        18            .byte	$18
13786 30C3                        18            .byte	$18
13787 30C4                        F8            .byte	$F8
13788 30C5                        18            .byte	$18
13789 30C6                        F8            .byte	$F8
13790 30C7                        18            .byte	$18
13791 30C8                        18            .byte	$18
13792 30C9                        18            .byte	$18
13793 30CA                        18            .byte	$18
13794 30CB                        18            .byte	$18
13795 30CC                        18            .byte	$18
13796 30CD                        18            .byte	$18
13797 30CE                        18            .byte	$18
13798                                           ! 1586  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13799 30CF                        36            .byte	$36
13800 30D0                        36            .byte	$36
13801 30D1                        36            .byte	$36
13802 30D2                        36            .byte	$36
13803 30D3                        36            .byte	$36
13804 30D4                        36            .byte	$36
13805 30D5                        36            .byte	$36
13806 30D6                        F6            .byte	$F6
13807 30D7                        36            .byte	$36
13808 30D8                        36            .byte	$36
13809 30D9                        36            .byte	$36
13810 30DA                        36            .byte	$36
13811 30DB                        36            .byte	$36
13812 30DC                        36            .byte	$36
13813 30DD                        36            .byte	$36
13814 30DE                        36            .byte	$36
13815                                           ! 1587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13816 30DF                        00            .byte	0
13817 30E0                        00            .byte	0
13818 30E1                        00            .byte	0
13819 30E2                        00            .byte	0
13820 30E3                        00            .byte	0
13821 30E4                        00            .byte	0
13822 30E5                        00            .byte	0
13823 30E6                        FE            .byte	$FE
13824 30E7                        36            .byte	$36
13825 30E8                        36            .byte	$36
13826 30E9                        36            .byte	$36
13827 30EA                        36            .byte	$36
13828 30EB                        36            .byte	$36
13829 30EC                        36            .byte	$36
13830 30ED                        36            .byte	$36
13831 30EE                        36            .byte	$36
13832                                           ! 1588  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13833 30EF                        00            .byte	0
13834 30F0                        00            .byte	0
13835 30F1                        00            .byte	0
13836 30F2                        00            .byte	0
13837 30F3                        00            .byte	0
13838 30F4                        F8            .byte	$F8
13839 30F5                        18            .byte	$18
13840 30F6                        F8            .byte	$F8
13841 30F7                        18            .byte	$18
13842 30F8                        18            .byte	$18
13843 30F9                        18            .byte	$18
13844 30FA                        18            .byte	$18
13845 30FB                        18            .byte	$18
13846 30FC                        18            .byte	$18
13847 30FD                        18            .byte	$18
13848 30FE                        18            .byte	$18
13849                                           ! 1589  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13850 30FF                        36            .byte	$36
13851 3100                        36            .byte	$36
13852 3101                        36            .byte	$36
13853 3102                        36            .byte	$36
13854 3103                        36            .byte	$36
13855 3104                        F6            .byte	$F6
13856 3105                        06            .byte	6
13857 3106                        F6            .byte	$F6
13858 3107                        36            .byte	$36
13859 3108                        36            .byte	$36
13860 3109                        36            .byte	$36
13861 310A                        36            .byte	$36
13862 310B                        36            .byte	$36
13863 310C                        36            .byte	$36
13864 310D                        36            .byte	$36
13865 310E                        36            .byte	$36
13866                                           ! 1590  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13867 310F                        36            .byte	$36
13868 3110                        36            .byte	$36
13869 3111                        36            .byte	$36
13870 3112                        36            .byte	$36
13871 3113                        36            .byte	$36
13872 3114                        36            .byte	$36
13873 3115                        36            .byte	$36
13874 3116                        36            .byte	$36
13875 3117                        36            .byte	$36
13876 3118                        36            .byte	$36
13877 3119                        36            .byte	$36
13878 311A                        36            .byte	$36
13879 311B                        36            .byte	$36
13880 311C                        36            .byte	$36
13881 311D                        36            .byte	$36
13882 311E                        36            .byte	$36
13883                                           ! 1591  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13884 311F                        00            .byte	0
13885 3120                        00            .byte	0
13886 3121                        00            .byte	0
13887 3122                        00            .byte	0
13888 3123                        00            .byte	0
13889 3124                        FE            .byte	$FE
13890 3125                        06            .byte	6
13891 3126                        F6            .byte	$F6
13892 3127                        36            .byte	$36
13893 3128                        36            .byte	$36
13894 3129                        36            .byte	$36
13895 312A                        36            .byte	$36
13896 312B                        36            .byte	$36
13897 312C                        36            .byte	$36
13898 312D                        36            .byte	$36
13899 312E                        36            .byte	$36
13900                                           ! 1592  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13901 312F                        36            .byte	$36
13902 3130                        36            .byte	$36
13903 3131                        36            .byte	$36
13904 3132                        36            .byte	$36
13905 3133                        36            .byte	$36
13906 3134                        F6            .byte	$F6
13907 3135                        06            .byte	6
13908 3136                        FE            .byte	$FE
13909 3137                        00            .byte	0
13910 3138                        00            .byte	0
13911 3139                        00            .byte	0
13912 313A                        00            .byte	0
13913 313B                        00            .byte	0
13914 313C                        00            .byte	0
13915 313D                        00            .byte	0
13916 313E                        00            .byte	0
13917                                           ! 1593  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13918 313F                        36            .byte	$36
13919 3140                        36            .byte	$36
13920 3141                        36            .byte	$36
13921 3142                        36            .byte	$36
13922 3143                        36            .byte	$36
13923 3144                        36            .byte	$36
13924 3145                        36            .byte	$36
13925 3146                        FE            .byte	$FE
13926 3147                        00            .byte	0
13927 3148                        00            .byte	0
13928 3149                        00            .byte	0
13929 314A                        00            .byte	0
13930 314B                        00            .byte	0
13931 314C                        00            .byte	0
13932 314D                        00            .byte	0
13933 314E                        00            .byte	0
13934                                           ! 1594  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13935 314F                        18            .byte	$18
13936 3150                        18            .byte	$18
13937 3151                        18            .byte	$18
13938 3152                        18            .byte	$18
13939 3153                        18            .byte	$18
13940 3154                        F8            .byte	$F8
13941 3155                        18            .byte	$18
13942 3156                        F8            .byte	$F8
13943 3157                        00            .byte	0
13944 3158                        00            .byte	0
13945 3159                        00            .byte	0
13946 315A                        00            .byte	0
13947 315B                        00            .byte	0
13948 315C                        00            .byte	0
13949 315D                        00            .byte	0
13950 315E                        00            .byte	0
13951                                           ! 1595  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13952 315F                        00            .byte	0
13953 3160                        00            .byte	0
13954 3161                        00            .byte	0
13955 3162                        00            .byte	0
13956 3163                        00            .byte	0
13957 3164                        00            .byte	0
13958 3165                        00            .byte	0
13959 3166                        F8            .byte	$F8
13960 3167                        18            .byte	$18
13961 3168                        18            .byte	$18
13962 3169                        18            .byte	$18
13963 316A                        18            .byte	$18
13964 316B                        18            .byte	$18
13965 316C                        18            .byte	$18
13966 316D                        18            .byte	$18
13967 316E                        18            .byte	$18
13968                                           ! 1596  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13969 316F                        18            .byte	$18
13970 3170                        18            .byte	$18
13971 3171                        18            .byte	$18
13972 3172                        18            .byte	$18
13973 3173                        18            .byte	$18
13974 3174                        18            .byte	$18
13975 3175                        18            .byte	$18
13976 3176                        1F            .byte	$1F
13977 3177                        00            .byte	0
13978 3178                        00            .byte	0
13979 3179                        00            .byte	0
13980 317A                        00            .byte	0
13981 317B                        00            .byte	0
13982 317C                        00            .byte	0
13983 317D                        00            .byte	0
13984 317E                        00            .byte	0
13985                                           ! 1597  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13986 317F                        18            .byte	$18
13987 3180                        18            .byte	$18
13988 3181                        18            .byte	$18
13989 3182                        18            .byte	$18
13990 3183                        18            .byte	$18
13991 3184                        18            .byte	$18
13992 3185                        18            .byte	$18
13993 3186                        FF            .byte	$FF
13994 3187                        00            .byte	0
13995 3188                        00            .byte	0
13996 3189                        00            .byte	0
13997 318A                        00            .byte	0
13998 318B                        00            .byte	0
13999 318C                        00            .byte	0
14000 318D                        00            .byte	0
14001 318E                        00            .byte	0
14002                                           ! 1598  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14003 318F                        00            .byte	0
14004 3190                        00            .byte	0
14005 3191                        00            .byte	0
14006 3192                        00            .byte	0
14007 3193                        00            .byte	0
14008 3194                        00            .byte	0
14009 3195                        00            .byte	0
14010 3196                        FF            .byte	$FF
14011 3197                        18            .byte	$18
14012 3198                        18            .byte	$18
14013 3199                        18            .byte	$18
14014 319A                        18            .byte	$18
14015 319B                        18            .byte	$18
14016 319C                        18            .byte	$18
14017 319D                        18            .byte	$18
14018 319E                        18            .byte	$18
14019                                           ! 1599  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14020 319F                        18            .byte	$18
14021 31A0                        18            .byte	$18
14022 31A1                        18            .byte	$18
14023 31A2                        18            .byte	$18
14024 31A3                        18            .byte	$18
14025 31A4                        18            .byte	$18
14026 31A5                        18            .byte	$18
14027 31A6                        1F            .byte	$1F
14028 31A7                        18            .byte	$18
14029 31A8                        18            .byte	$18
14030 31A9                        18            .byte	$18
14031 31AA                        18            .byte	$18
14032 31AB                        18            .byte	$18
14033 31AC                        18            .byte	$18
14034 31AD                        18            .byte	$18
14035 31AE                        18            .byte	$18
14036                                           ! 1600  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14037 31AF                        00            .byte	0
14038 31B0                        00            .byte	0
14039 31B1                        00            .byte	0
14040 31B2                        00            .byte	0
14041 31B3                        00            .byte	0
14042 31B4                        00            .byte	0
14043 31B5                        00            .byte	0
14044 31B6                        FF            .byte	$FF
14045 31B7                        00            .byte	0
14046 31B8                        00            .byte	0
14047 31B9                        00            .byte	0
14048 31BA                        00            .byte	0
14049 31BB                        00            .byte	0
14050 31BC                        00            .byte	0
14051 31BD                        00            .byte	0
14052 31BE                        00            .byte	0
14053                                           ! 1601  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14054 31BF                        18            .byte	$18
14055 31C0                        18            .byte	$18
14056 31C1                        18            .byte	$18
14057 31C2                        18            .byte	$18
14058 31C3                        18            .byte	$18
14059 31C4                        18            .byte	$18
14060 31C5                        18            .byte	$18
14061 31C6                        FF            .byte	$FF
14062 31C7                        18            .byte	$18
14063 31C8                        18            .byte	$18
14064 31C9                        18            .byte	$18
14065 31CA                        18            .byte	$18
14066 31CB                        18            .byte	$18
14067 31CC                        18            .byte	$18
14068 31CD                        18            .byte	$18
14069 31CE                        18            .byte	$18
14070                                           ! 1602  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14071 31CF                        18            .byte	$18
14072 31D0                        18            .byte	$18
14073 31D1                        18            .byte	$18
14074 31D2                        18            .byte	$18
14075 31D3                        18            .byte	$18
14076 31D4                        1F            .byte	$1F
14077 31D5                        18            .byte	$18
14078 31D6                        1F            .byte	$1F
14079 31D7                        18            .byte	$18
14080 31D8                        18            .byte	$18
14081 31D9                        18            .byte	$18
14082 31DA                        18            .byte	$18
14083 31DB                        18            .byte	$18
14084 31DC                        18            .byte	$18
14085 31DD                        18            .byte	$18
14086 31DE                        18            .byte	$18
14087                                           ! 1603  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14088 31DF                        36            .byte	$36
14089 31E0                        36            .byte	$36
14090 31E1                        36            .byte	$36
14091 31E2                        36            .byte	$36
14092 31E3                        36            .byte	$36
14093 31E4                        36            .byte	$36
14094 31E5                        36            .byte	$36
14095 31E6                        37            .byte	$37
14096 31E7                        36            .byte	$36
14097 31E8                        36            .byte	$36
14098 31E9                        36            .byte	$36
14099 31EA                        36            .byte	$36
14100 31EB                        36            .byte	$36
14101 31EC                        36            .byte	$36
14102 31ED                        36            .byte	$36
14103 31EE                        36            .byte	$36
14104                                           ! 1604  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14105 31EF                        36            .byte	$36
14106 31F0                        36            .byte	$36
14107 31F1                        36            .byte	$36
14108 31F2                        36            .byte	$36
14109 31F3                        36            .byte	$36
14110 31F4                        37            .byte	$37
14111 31F5                        30            .byte	$30
14112 31F6                        3F            .byte	$3F
14113 31F7                        00            .byte	0
14114 31F8                        00            .byte	0
14115 31F9                        00            .byte	0
14116 31FA                        00            .byte	0
14117 31FB                        00            .byte	0
14118 31FC                        00            .byte	0
14119 31FD                        00            .byte	0
14120 31FE                        00            .byte	0
14121                                           ! 1605  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0
14122 31FF                        00            .byte	0
14123 3200                        00            .byte	0
14124 3201                        00            .byte	0
14125 3202                        00            .byte	0
14126 3203                        00            .byte	0
14127 3204                        3F            .byte	$3F
14128 3205                        30            .byte	$30
14129 3206                        37            .byte	$37
14130 3207                        36            .byte	$36
14131                                           ! 1605 x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14132 3208                        36            .byte	$36
14133 3209                        36            .byte	$36
14134 320A                        36            .byte	$36
14135 320B                        36            .byte	$36
14136 320C                        36            .byte	$36
14137 320D                        36            .byte	$36
14138 320E                        36            .byte	$36
14139                                           ! 1606  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14140 320F                        36            .byte	$36
14141 3210                        36            .byte	$36
14142 3211                        36            .byte	$36
14143 3212                        36            .byte	$36
14144 3213                        36            .byte	$36
14145 3214                        F7            .byte	$F7
14146 3215                        00            .byte	0
14147 3216                        FF            .byte	$FF
14148 3217                        00            .byte	0
14149 3218                        00            .byte	0
14150 3219                        00            .byte	0
14151 321A                        00            .byte	0
14152 321B                        00            .byte	0
14153 321C                        00            .byte	0
14154 321D                        00            .byte	0
14155 321E                        00            .byte	0
14156                                           ! 1607  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14157 321F                        00            .byte	0
14158 3220                        00            .byte	0
14159 3221                        00            .byte	0
14160 3222                        00            .byte	0
14161 3223                        00            .byte	0
14162 3224                        FF            .byte	$FF
14163 3225                        00            .byte	0
14164 3226                        F7            .byte	$F7
14165 3227                        36            .byte	$36
14166 3228                        36            .byte	$36
14167 3229                        36            .byte	$36
14168 322A                        36            .byte	$36
14169 322B                        36            .byte	$36
14170 322C                        36            .byte	$36
14171 322D                        36            .byte	$36
14172 322E                        36            .byte	$36
14173                                           ! 1608  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14174 322F                        36            .byte	$36
14175 3230                        36            .byte	$36
14176 3231                        36            .byte	$36
14177 3232                        36            .byte	$36
14178 3233                        36            .byte	$36
14179 3234                        37            .byte	$37
14180 3235                        30            .byte	$30
14181 3236                        37            .byte	$37
14182 3237                        36            .byte	$36
14183 3238                        36            .byte	$36
14184 3239                        36            .byte	$36
14185 323A                        36            .byte	$36
14186 323B                        36            .byte	$36
14187 323C                        36            .byte	$36
14188 323D                        36            .byte	$36
14189 323E                        36            .byte	$36
14190                                           ! 1609  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14191 323F                        00            .byte	0
14192 3240                        00            .byte	0
14193 3241                        00            .byte	0
14194 3242                        00            .byte	0
14195 3243                        00            .byte	0
14196 3244                        FF            .byte	$FF
14197 3245                        00            .byte	0
14198 3246                        FF            .byte	$FF
14199 3247                        00            .byte	0
14200 3248                        00            .byte	0
14201 3249                        00            .byte	0
14202 324A                        00            .byte	0
14203 324B                        00            .byte	0
14204 324C                        00            .byte	0
14205 324D                        00            .byte	0
14206 324E                        00            .byte	0
14207                                           ! 1610  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14208 324F                        36            .byte	$36
14209 3250                        36            .byte	$36
14210 3251                        36            .byte	$36
14211 3252                        36            .byte	$36
14212 3253                        36            .byte	$36
14213 3254                        F7            .byte	$F7
14214 3255                        00            .byte	0
14215 3256                        F7            .byte	$F7
14216 3257                        36            .byte	$36
14217 3258                        36            .byte	$36
14218 3259                        36            .byte	$36
14219 325A                        36            .byte	$36
14220 325B                        36            .byte	$36
14221 325C                        36            .byte	$36
14222 325D                        36            .byte	$36
14223 325E                        36            .byte	$36
14224                                           ! 1611  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14225 325F                        18            .byte	$18
14226 3260                        18            .byte	$18
14227 3261                        18            .byte	$18
14228 3262                        18            .byte	$18
14229 3263                        18            .byte	$18
14230 3264                        FF            .byte	$FF
14231 3265                        00            .byte	0
14232 3266                        FF            .byte	$FF
14233 3267                        00            .byte	0
14234 3268                        00            .byte	0
14235 3269                        00            .byte	0
14236 326A                        00            .byte	0
14237 326B                        00            .byte	0
14238 326C                        00            .byte	0
14239 326D                        00            .byte	0
14240 326E                        00            .byte	0
14241                                           ! 1612  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14242 326F                        36            .byte	$36
14243 3270                        36            .byte	$36
14244 3271                        36            .byte	$36
14245 3272                        36            .byte	$36
14246 3273                        36            .byte	$36
14247 3274                        36            .byte	$36
14248 3275                        36            .byte	$36
14249 3276                        FF            .byte	$FF
14250 3277                        00            .byte	0
14251 3278                        00            .byte	0
14252 3279                        00            .byte	0
14253 327A                        00            .byte	0
14254 327B                        00            .byte	0
14255 327C                        00            .byte	0
14256 327D                        00            .byte	0
14257 327E                        00            .byte	0
14258                                           ! 1613  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14259 327F                        00            .byte	0
14260 3280                        00            .byte	0
14261 3281                        00            .byte	0
14262 3282                        00            .byte	0
14263 3283                        00            .byte	0
14264 3284                        FF            .byte	$FF
14265 3285                        00            .byte	0
14266 3286                        FF            .byte	$FF
14267 3287                        18            .byte	$18
14268 3288                        18            .byte	$18
14269 3289                        18            .byte	$18
14270 328A                        18            .byte	$18
14271 328B                        18            .byte	$18
14272 328C                        18            .byte	$18
14273 328D                        18            .byte	$18
14274 328E                        18            .byte	$18
14275                                           ! 1614  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14276 328F                        00            .byte	0
14277 3290                        00            .byte	0
14278 3291                        00            .byte	0
14279 3292                        00            .byte	0
14280 3293                        00            .byte	0
14281 3294                        00            .byte	0
14282 3295                        00            .byte	0
14283 3296                        FF            .byte	$FF
14284 3297                        36            .byte	$36
14285 3298                        36            .byte	$36
14286 3299                        36            .byte	$36
14287 329A                        36            .byte	$36
14288 329B                        36            .byte	$36
14289 329C                        36            .byte	$36
14290 329D                        36            .byte	$36
14291 329E                        36            .byte	$36
14292                                           ! 1615  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14293 329F                        36            .byte	$36
14294 32A0                        36            .byte	$36
14295 32A1                        36            .byte	$36
14296 32A2                        36            .byte	$36
14297 32A3                        36            .byte	$36
14298 32A4                        36            .byte	$36
14299 32A5                        36            .byte	$36
14300 32A6                        3F            .byte	$3F
14301 32A7                        00            .byte	0
14302 32A8                        00            .byte	0
14303 32A9                        00            .byte	0
14304 32AA                        00            .byte	0
14305 32AB                        00            .byte	0
14306 32AC                        00            .byte	0
14307 32AD                        00            .byte	0
14308 32AE                        00            .byte	0
14309                                           ! 1616  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14310 32AF                        18            .byte	$18
14311 32B0                        18            .byte	$18
14312 32B1                        18            .byte	$18
14313 32B2                        18            .byte	$18
14314 32B3                        18            .byte	$18
14315 32B4                        1F            .byte	$1F
14316 32B5                        18            .byte	$18
14317 32B6                        1F            .byte	$1F
14318 32B7                        00            .byte	0
14319 32B8                        00            .byte	0
14320 32B9                        00            .byte	0
14321 32BA                        00            .byte	0
14322 32BB                        00            .byte	0
14323 32BC                        00            .byte	0
14324 32BD                        00            .byte	0
14325 32BE                        00            .byte	0
14326                                           ! 1617  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14327 32BF                        00            .byte	0
14328 32C0                        00            .byte	0
14329 32C1                        00            .byte	0
14330 32C2                        00            .byte	0
14331 32C3                        00            .byte	0
14332 32C4                        1F            .byte	$1F
14333 32C5                        18            .byte	$18
14334 32C6                        1F            .byte	$1F
14335 32C7                        18            .byte	$18
14336 32C8                        18            .byte	$18
14337 32C9                        18            .byte	$18
14338 32CA                        18            .byte	$18
14339 32CB                        18            .byte	$18
14340 32CC                        18            .byte	$18
14341 32CD                        18            .byte	$18
14342 32CE                        18            .byte	$18
14343                                           ! 1618  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14344 32CF                        00            .byte	0
14345 32D0                        00            .byte	0
14346 32D1                        00            .byte	0
14347 32D2                        00            .byte	0
14348 32D3                        00            .byte	0
14349 32D4                        00            .byte	0
14350 32D5                        00            .byte	0
14351 32D6                        3F            .byte	$3F
14352 32D7                        36            .byte	$36
14353 32D8                        36            .byte	$36
14354 32D9                        36            .byte	$36
14355 32DA                        36            .byte	$36
14356 32DB                        36            .byte	$36
14357 32DC                        36            .byte	$36
14358 32DD                        36            .byte	$36
14359 32DE                        36            .byte	$36
14360                                           ! 1619  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14361 32DF                        36            .byte	$36
14362 32E0                        36            .byte	$36
14363 32E1                        36            .byte	$36
14364 32E2                        36            .byte	$36
14365 32E3                        36            .byte	$36
14366 32E4                        36            .byte	$36
14367 32E5                        36            .byte	$36
14368 32E6                        FF            .byte	$FF
14369 32E7                        36            .byte	$36
14370 32E8                        36            .byte	$36
14371 32E9                        36            .byte	$36
14372 32EA                        36            .byte	$36
14373 32EB                        36            .byte	$36
14374 32EC                        36            .byte	$36
14375 32ED                        36            .byte	$36
14376 32EE                        36            .byte	$36
14377                                           ! 1620  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14378 32EF                        18            .byte	$18
14379 32F0                        18            .byte	$18
14380 32F1                        18            .byte	$18
14381 32F2                        18            .byte	$18
14382 32F3                        18            .byte	$18
14383 32F4                        FF            .byte	$FF
14384 32F5                        18            .byte	$18
14385 32F6                        FF            .byte	$FF
14386 32F7                        18            .byte	$18
14387 32F8                        18            .byte	$18
14388 32F9                        18            .byte	$18
14389 32FA                        18            .byte	$18
14390 32FB                        18            .byte	$18
14391 32FC                        18            .byte	$18
14392 32FD                        18            .byte	$18
14393 32FE                        18            .byte	$18
14394                                           ! 1621  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14395 32FF                        18            .byte	$18
14396 3300                        18            .byte	$18
14397 3301                        18            .byte	$18
14398 3302                        18            .byte	$18
14399 3303                        18            .byte	$18
14400 3304                        18            .byte	$18
14401 3305                        18            .byte	$18
14402 3306                        F8            .byte	$F8
14403 3307                        00            .byte	0
14404 3308                        00            .byte	0
14405 3309                        00            .byte	0
14406 330A                        00            .byte	0
14407 330B                        00            .byte	0
14408 330C                        00            .byte	0
14409 330D                        00            .byte	0
14410 330E                        00            .byte	0
14411                                           ! 1622  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14412 330F                        00            .byte	0
14413 3310                        00            .byte	0
14414 3311                        00            .byte	0
14415 3312                        00            .byte	0
14416 3313                        00            .byte	0
14417 3314                        00            .byte	0
14418 3315                        00            .byte	0
14419 3316                        1F            .byte	$1F
14420 3317                        18            .byte	$18
14421 3318                        18            .byte	$18
14422 3319                        18            .byte	$18
14423 331A                        18            .byte	$18
14424 331B                        18            .byte	$18
14425 331C                        18            .byte	$18
14426 331D                        18            .byte	$18
14427 331E                        18            .byte	$18
14428                                           ! 1623  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14429 331F                        FF            .byte	$FF
14430 3320                        FF            .byte	$FF
14431 3321                        FF            .byte	$FF
14432 3322                        FF            .byte	$FF
14433 3323                        FF            .byte	$FF
14434 3324                        FF            .byte	$FF
14435 3325                        FF            .byte	$FF
14436 3326                        FF            .byte	$FF
14437 3327                        FF            .byte	$FF
14438 3328                        FF            .byte	$FF
14439 3329                        FF            .byte	$FF
14440 332A                        FF            .byte	$FF
14441 332B                        FF            .byte	$FF
14442 332C                        FF            .byte	$FF
14443 332D                        FF            .byte	$FF
14444 332E                        FF            .byte	$FF
14445                                           ! 1624  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14446 332F                        00            .byte	0
14447 3330                        00            .byte	0
14448 3331                        00            .byte	0
14449 3332                        00            .byte	0
14450 3333                        00            .byte	0
14451 3334                        00            .byte	0
14452 3335                        00            .byte	0
14453 3336                        FF            .byte	$FF
14454 3337                        FF            .byte	$FF
14455 3338                        FF            .byte	$FF
14456 3339                        FF            .byte	$FF
14457 333A                        FF            .byte	$FF
14458 333B                        FF            .byte	$FF
14459 333C                        FF            .byte	$FF
14460 333D                        FF            .byte	$FF
14461 333E                        FF            .byte	$FF
14462                                           ! 1625  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14463 333F                        F0            .byte	$F0
14464 3340                        F0            .byte	$F0
14465 3341                        F0            .byte	$F0
14466 3342                        F0            .byte	$F0
14467 3343                        F0            .byte	$F0
14468 3344                        F0            .byte	$F0
14469 3345                        F0            .byte	$F0
14470 3346                        F0            .byte	$F0
14471 3347                        F0            .byte	$F0
14472 3348                        F0            .byte	$F0
14473 3349                        F0            .byte	$F0
14474 334A                        F0            .byte	$F0
14475 334B                        F0            .byte	$F0
14476 334C                        F0            .byte	$F0
14477 334D                        F0            .byte	$F0
14478 334E                        F0            .byte	$F0
14479                                           ! 1626  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
14480 334F                        0F            .byte	$F
14481 3350                        0F            .byte	$F
14482 3351                        0F            .byte	$F
14483 3352                        0F            .byte	$F
14484 3353                        0F            .byte	$F
14485 3354                        0F            .byte	$F
14486 3355                        0F            .byte	$F
14487 3356                        0F            .byte	$F
14488 3357                        0F            .byte	$F
14489 3358                        0F            .byte	$F
14490 3359                        0F            .byte	$F
14491                                           ! 1626 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14492 335A                        0F            .byte	$F
14493 335B                        0F            .byte	$F
14494 335C                        0F            .byte	$F
14495 335D                        0F            .byte	$F
14496 335E                        0F            .byte	$F
14497                                           ! 1627  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14498 335F                        FF            .byte	$FF
14499 3360                        FF            .byte	$FF
14500 3361                        FF            .byte	$FF
14501 3362                        FF            .byte	$FF
14502 3363                        FF            .byte	$FF
14503 3364                        FF            .byte	$FF
14504 3365                        FF            .byte	$FF
14505 3366                        00            .byte	0
14506 3367                        00            .byte	0
14507 3368                        00            .byte	0
14508 3369                        00            .byte	0
14509 336A                        00            .byte	0
14510 336B                        00            .byte	0
14511 336C                        00            .byte	0
14512 336D                        00            .byte	0
14513 336E                        00            .byte	0
14514                                           ! 1628  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14515 336F                        00            .byte	0
14516 3370                        00            .byte	0
14517 3371                        00            .byte	0
14518 3372                        00            .byte	0
14519 3373                        00            .byte	0
14520 3374                        76            .byte	$76
14521 3375                        DC            .byte	$DC
14522 3376                        D8            .byte	$D8
14523 3377                        D8            .byte	$D8
14524 3378                        D8            .byte	$D8
14525 3379                        DC            .byte	$DC
14526 337A                        76            .byte	$76
14527 337B                        00            .byte	0
14528 337C                        00            .byte	0
14529 337D                        00            .byte	0
14530 337E                        00            .byte	0
14531                                           ! 1629  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14532 337F                        00            .byte	0
14533 3380                        00            .byte	0
14534 3381                        78            .byte	$78
14535 3382                        CC            .byte	$CC
14536 3383                        CC            .byte	$CC
14537 3384                        CC            .byte	$CC
14538 3385                        D8            .byte	$D8
14539 3386                        CC            .byte	$CC
14540 3387                        C6            .byte	$C6
14541 3388                        C6            .byte	$C6
14542 3389                        C6            .byte	$C6
14543 338A                        CC            .byte	$CC
14544 338B                        00            .byte	0
14545 338C                        00            .byte	0
14546 338D                        00            .byte	0
14547 338E                        00            .byte	0
14548                                           ! 1630  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14549 338F                        00            .byte	0
14550 3390                        00            .byte	0
14551 3391                        FE            .byte	$FE
14552 3392                        C6            .byte	$C6
14553 3393                        C6            .byte	$C6
14554 3394                        C0            .byte	$C0
14555 3395                        C0            .byte	$C0
14556 3396                        C0            .byte	$C0
14557 3397                        C0            .byte	$C0
14558 3398                        C0            .byte	$C0
14559 3399                        C0            .byte	$C0
14560 339A                        C0            .byte	$C0
14561 339B                        00            .byte	0
14562 339C                        00            .byte	0
14563 339D                        00            .byte	0
14564 339E                        00            .byte	0
14565                                           ! 1631  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14566 339F                        00            .byte	0
14567 33A0                        00            .byte	0
14568 33A1                        00            .byte	0
14569 33A2                        00            .byte	0
14570 33A3                        FE            .byte	$FE
14571 33A4                        6C            .byte	$6C
14572 33A5                        6C            .byte	$6C
14573 33A6                        6C            .byte	$6C
14574 33A7                        6C            .byte	$6C
14575 33A8                        6C            .byte	$6C
14576 33A9                        6C            .byte	$6C
14577 33AA                        6C            .byte	$6C
14578 33AB                        00            .byte	0
14579 33AC                        00            .byte	0
14580 33AD                        00            .byte	0
14581 33AE                        00            .byte	0
14582                                           ! 1632  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14583 33AF                        00            .byte	0
14584 33B0                        00            .byte	0
14585 33B1                        00            .byte	0
14586 33B2                        FE            .byte	$FE
14587 33B3                        C6            .byte	$C6
14588 33B4                        60            .byte	$60
14589 33B5                        30            .byte	$30
14590 33B6                        18            .byte	$18
14591 33B7                        30            .byte	$30
14592 33B8                        60            .byte	$60
14593 33B9                        C6            .byte	$C6
14594 33BA                        FE            .byte	$FE
14595 33BB                        00            .byte	0
14596 33BC                        00            .byte	0
14597 33BD                        00            .byte	0
14598 33BE                        00            .byte	0
14599                                           ! 1633  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14600 33BF                        00            .byte	0
14601 33C0                        00            .byte	0
14602 33C1                        00            .byte	0
14603 33C2                        00            .byte	0
14604 33C3                        00            .byte	0
14605 33C4                        7E            .byte	$7E
14606 33C5                        D8            .byte	$D8
14607 33C6                        D8            .byte	$D8
14608 33C7                        D8            .byte	$D8
14609 33C8                        D8            .byte	$D8
14610 33C9                        D8            .byte	$D8
14611 33CA                        70            .byte	$70
14612 33CB                        00            .byte	0
14613 33CC                        00            .byte	0
14614 33CD                        00            .byte	0
14615 33CE                        00            .byte	0
14616                                           ! 1634  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14617 33CF                        00            .byte	0
14618 33D0                        00            .byte	0
14619 33D1                        00            .byte	0
14620 33D2                        00            .byte	0
14621 33D3                        66            .byte	$66
14622 33D4                        66            .byte	$66
14623 33D5                        66            .byte	$66
14624 33D6                        66            .byte	$66
14625 33D7                        66            .byte	$66
14626 33D8                        7C            .byte	$7C
14627 33D9                        60            .byte	$60
14628 33DA                        60            .byte	$60
14629 33DB                        C0            .byte	$C0
14630 33DC                        00            .byte	0
14631 33DD                        00            .byte	0
14632 33DE                        00            .byte	0
14633                                           ! 1635  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14634 33DF                        00            .byte	0
14635 33E0                        00            .byte	0
14636 33E1                        00            .byte	0
14637 33E2                        00            .byte	0
14638 33E3                        76            .byte	$76
14639 33E4                        DC            .byte	$DC
14640 33E5                        18            .byte	$18
14641 33E6                        18            .byte	$18
14642 33E7                        18            .byte	$18
14643 33E8                        18            .byte	$18
14644 33E9                        18            .byte	$18
14645 33EA                        18            .byte	$18
14646 33EB                        00            .byte	0
14647 33EC                        00            .byte	0
14648 33ED                        00            .byte	0
14649 33EE                        00            .byte	0
14650                                           ! 1636  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14651 33EF                        00            .byte	0
14652 33F0                        00            .byte	0
14653 33F1                        00            .byte	0
14654 33F2                        7E            .byte	$7E
14655 33F3                        18            .byte	$18
14656 33F4                        3C            .byte	$3C
14657 33F5                        66            .byte	$66
14658 33F6                        66            .byte	$66
14659 33F7                        66            .byte	$66
14660 33F8                        3C            .byte	$3C
14661 33F9                        18            .byte	$18
14662 33FA                        7E            .byte	$7E
14663 33FB                        00            .byte	0
14664 33FC                        00            .byte	0
14665 33FD                        00            .byte	0
14666 33FE                        00            .byte	0
14667                                           ! 1637  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14668 33FF                        00            .byte	0
14669 3400                        00            .byte	0
14670 3401                        00            .byte	0
14671 3402                        38            .byte	$38
14672 3403                        6C            .byte	$6C
14673 3404                        C6            .byte	$C6
14674 3405                        C6            .byte	$C6
14675 3406                        FE            .byte	$FE
14676 3407                        C6            .byte	$C6
14677 3408                        C6            .byte	$C6
14678 3409                        6C            .byte	$6C
14679 340A                        38            .byte	$38
14680 340B                        00            .byte	0
14681 340C                        00            .byte	0
14682 340D                        00            .byte	0
14683 340E                        00            .byte	0
14684                                           ! 1638  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14685 340F                        00            .byte	0
14686 3410                        00            .byte	0
14687 3411                        38            .byte	$38
14688 3412                        6C            .byte	$6C
14689 3413                        C6            .byte	$C6
14690 3414                        C6            .byte	$C6
14691 3415                        C6            .byte	$C6
14692 3416                        6C            .byte	$6C
14693 3417                        6C            .byte	$6C
14694 3418                        6C            .byte	$6C
14695 3419                        6C            .byte	$6C
14696 341A                        EE            .byte	$EE
14697 341B                        00            .byte	0
14698 341C                        00            .byte	0
14699 341D                        00            .byte	0
14700 341E                        00            .byte	0
14701                                           ! 1639  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14702 341F                        00            .byte	0
14703 3420                        00            .byte	0
14704 3421                        1E            .byte	$1E
14705 3422                        30            .byte	$30
14706 3423                        18            .byte	$18
14707 3424                        0C            .byte	$C
14708 3425                        3E            .byte	$3E
14709 3426                        66            .byte	$66
14710 3427                        66            .byte	$66
14711 3428                        66            .byte	$66
14712 3429                        66            .byte	$66
14713 342A                        3C            .byte	$3C
14714 342B                        00            .byte	0
14715 342C                        00            .byte	0
14716 342D                        00            .byte	0
14717 342E                        00            .byte	0
14718                                           ! 1640  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14719 342F                        00            .byte	0
14720 3430                        00            .byte	0
14721 3431                        00            .byte	0
14722 3432                        00            .byte	0
14723 3433                        00            .byte	0
14724 3434                        7E            .byte	$7E
14725 3435                        DB            .byte	$DB
14726 3436                        DB            .byte	$DB
14727 3437                        DB            .byte	$DB
14728 3438                        7E            .byte	$7E
14729 3439                        00            .byte	0
14730 343A                        00            .byte	0
14731 343B                        00            .byte	0
14732 343C                        00            .byte	0
14733 343D                        00            .byte	0
14734 343E                        00            .byte	0
14735                                           ! 1641  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14736 343F                        00            .byte	0
14737 3440                        00            .byte	0
14738 3441                        00            .byte	0
14739 3442                        03            .byte	3
14740 3443                        06            .byte	6
14741 3444                        7E            .byte	$7E
14742 3445                        DB            .byte	$DB
14743 3446                        DB            .byte	$DB
14744 3447                        F3            .byte	$F3
14745 3448                        7E            .byte	$7E
14746 3449                        60            .byte	$60
14747 344A                        C0            .byte	$C0
14748 344B                        00            .byte	0
14749 344C                        00            .byte	0
14750 344D                        00            .byte	0
14751 344E                        00            .byte	0
14752                                           ! 1642  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14753 344F                        00            .byte	0
14754 3450                        00            .byte	0
14755 3451                        1C            .byte	$1C
14756 3452                        30            .byte	$30
14757 3453                        60            .byte	$60
14758 3454                        60            .byte	$60
14759 3455                        7C            .byte	$7C
14760 3456                        60            .byte	$60
14761 3457                        60            .byte	$60
14762 3458                        60            .byte	$60
14763 3459                        30            .byte	$30
14764 345A                        1C            .byte	$1C
14765 345B                        00            .byte	0
14766 345C                        00            .byte	0
14767 345D                        00            .byte	0
14768 345E                        00            .byte	0
14769                                           ! 1643  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14770 345F                        00            .byte	0
14771 3460                        00            .byte	0
14772 3461                        00            .byte	0
14773 3462                        7C            .byte	$7C
14774 3463                        C6            .byte	$C6
14775 3464                        C6            .byte	$C6
14776 3465                        C6            .byte	$C6
14777 3466                        C6            .byte	$C6
14778 3467                        C6            .byte	$C6
14779 3468                        C6            .byte	$C6
14780 3469                        C6            .byte	$C6
14781 346A                        C6            .byte	$C6
14782 346B                        00            .byte	0
14783 346C                        00            .byte	0
14784 346D                        00            .byte	0
14785 346E                        00            .byte	0
14786                                           ! 1644  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14787 346F                        00            .byte	0
14788 3470                        00            .byte	0
14789 3471                        00            .byte	0
14790 3472                        00            .byte	0
14791 3473                        FE            .byte	$FE
14792 3474                        00            .byte	0
14793 3475                        00            .byte	0
14794 3476                        FE            .byte	$FE
14795 3477                        00            .byte	0
14796 3478                        00            .byte	0
14797 3479                        FE            .byte	$FE
14798 347A                        00            .byte	0
14799 347B                        00            .byte	0
14800 347C                        00            .byte	0
14801 347D                        00            .byte	0
14802 347E                        00            .byte	0
14803                                           ! 1645  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14804 347F                        00            .byte	0
14805 3480                        00            .byte	0
14806 3481                        00            .byte	0
14807 3482                        00            .byte	0
14808 3483                        18            .byte	$18
14809 3484                        18            .byte	$18
14810 3485                        7E            .byte	$7E
14811 3486                        18            .byte	$18
14812 3487                        18            .byte	$18
14813 3488                        00            .byte	0
14814 3489                        00            .byte	0
14815 348A                        FF            .byte	$FF
14816 348B                        00            .byte	0
14817 348C                        00            .byte	0
14818 348D                        00            .byte	0
14819 348E                        00            .byte	0
14820                                           ! 1646  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14821 348F                        00            .byte	0
14822 3490                        00            .byte	0
14823 3491                        00            .byte	0
14824 3492                        30            .byte	$30
14825 3493                        18            .byte	$18
14826 3494                        0C            .byte	$C
14827 3495                        06            .byte	6
14828 3496                        0C            .byte	$C
14829 3497                        18            .byte	$18
14830 3498                        30            .byte	$30
14831 3499                        00            .byte	0
14832 349A                        7E            .byte	$7E
14833 349B                        00            .byte	0
14834 349C                        00            .byte	0
14835 349D                        00            .byte	0
14836 349E                        00            .byte	0
14837                                           ! 1647  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00,
14838 349F                        00            .byte	0
14839 34A0                        00            .byte	0
14840 34A1                        00            .byte	0
14841 34A2                        0C            .byte	$C
14842 34A3                        18            .byte	$18
14843 34A4                        30            .byte	$30
14844 34A5                        60            .byte	$60
14845 34A6                        30            .byte	$30
14846 34A7                        18            .byte	$18
14847 34A8                        0C            .byte	$C
14848 34A9                        00            .byte	0
14849 34AA                        7E            .byte	$7E
14850                                           ! 1647  0x00, 0x00, 0x00,
14851 34AB                        00            .byte	0
14852 34AC                        00            .byte	0
14853 34AD                        00            .byte	0
14854 34AE                        00            .byte	0
14855                                           ! 1648  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14856 34AF                        00            .byte	0
14857 34B0                        00            .byte	0
14858 34B1                        0E            .byte	$E
14859 34B2                        1B            .byte	$1B
14860 34B3                        1B            .byte	$1B
14861 34B4                        18            .byte	$18
14862 34B5                        18            .byte	$18
14863 34B6                        18            .byte	$18
14864 34B7                        18            .byte	$18
14865 34B8                        18            .byte	$18
14866 34B9                        18            .byte	$18
14867 34BA                        18            .byte	$18
14868 34BB                        18            .byte	$18
14869 34BC                        18            .byte	$18
14870 34BD                        18            .byte	$18
14871 34BE                        18            .byte	$18
14872                                           ! 1649  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14873 34BF                        18            .byte	$18
14874 34C0                        18            .byte	$18
14875 34C1                        18            .byte	$18
14876 34C2                        18            .byte	$18
14877 34C3                        18            .byte	$18
14878 34C4                        18            .byte	$18
14879 34C5                        18            .byte	$18
14880 34C6                        18            .byte	$18
14881 34C7                        D8            .byte	$D8
14882 34C8                        D8            .byte	$D8
14883 34C9                        D8            .byte	$D8
14884 34CA                        70            .byte	$70
14885 34CB                        00            .byte	0
14886 34CC                        00            .byte	0
14887 34CD                        00            .byte	0
14888 34CE                        00            .byte	0
14889                                           ! 1650  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14890 34CF                        00            .byte	0
14891 34D0                        00            .byte	0
14892 34D1                        00            .byte	0
14893 34D2                        00            .byte	0
14894 34D3                        18            .byte	$18
14895 34D4                        18            .byte	$18
14896 34D5                        00            .byte	0
14897 34D6                        7E            .byte	$7E
14898 34D7                        00            .byte	0
14899 34D8                        18            .byte	$18
14900 34D9                        18            .byte	$18
14901 34DA                        00            .byte	0
14902 34DB                        00            .byte	0
14903 34DC                        00            .byte	0
14904 34DD                        00            .byte	0
14905 34DE                        00            .byte	0
14906                                           ! 1651  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14907 34DF                        00            .byte	0
14908 34E0                        00            .byte	0
14909 34E1                        00            .byte	0
14910 34E2                        00            .byte	0
14911 34E3                        00            .byte	0
14912 34E4                        76            .byte	$76
14913 34E5                        DC            .byte	$DC
14914 34E6                        00            .byte	0
14915 34E7                        76            .byte	$76
14916 34E8                        DC            .byte	$DC
14917 34E9                        00            .byte	0
14918 34EA                        00            .byte	0
14919 34EB                        00            .byte	0
14920 34EC                        00            .byte	0
14921 34ED                        00            .byte	0
14922 34EE                        00            .byte	0
14923                                           ! 1652  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14924 34EF                        00            .byte	0
14925 34F0                        38            .byte	$38
14926 34F1                        6C            .byte	$6C
14927 34F2                        6C            .byte	$6C
14928 34F3                        38            .byte	$38
14929 34F4                        00            .byte	0
14930 34F5                        00            .byte	0
14931 34F6                        00            .byte	0
14932 34F7                        00            .byte	0
14933 34F8                        00            .byte	0
14934 34F9                        00            .byte	0
14935 34FA                        00            .byte	0
14936 34FB                        00            .byte	0
14937 34FC                        00            .byte	0
14938 34FD                        00            .byte	0
14939 34FE                        00            .byte	0
14940                                           ! 1653  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14941 34FF                        00            .byte	0
14942 3500                        00            .byte	0
14943 3501                        00            .byte	0
14944 3502                        00            .byte	0
14945 3503                        00            .byte	0
14946 3504                        00            .byte	0
14947 3505                        00            .byte	0
14948 3506                        18            .byte	$18
14949 3507                        18            .byte	$18
14950 3508                        00            .byte	0
14951 3509                        00            .byte	0
14952 350A                        00            .byte	0
14953 350B                        00            .byte	0
14954 350C                        00            .byte	0
14955 350D                        00            .byte	0
14956 350E                        00            .byte	0
14957                                           ! 1654  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14958 350F                        00            .byte	0
14959 3510                        00            .byte	0
14960 3511                        00            .byte	0
14961 3512                        00            .byte	0
14962 3513                        00            .byte	0
14963 3514                        00            .byte	0
14964 3515                        00            .byte	0
14965 3516                        00            .byte	0
14966 3517                        18            .byte	$18
14967 3518                        00            .byte	0
14968 3519                        00            .byte	0
14969 351A                        00            .byte	0
14970 351B                        00            .byte	0
14971 351C                        00            .byte	0
14972 351D                        00            .byte	0
14973 351E                        00            .byte	0
14974                                           ! 1655  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14975 351F                        00            .byte	0
14976 3520                        0F            .byte	$F
14977 3521                        0C            .byte	$C
14978 3522                        0C            .byte	$C
14979 3523                        0C            .byte	$C
14980 3524                        0C            .byte	$C
14981 3525                        0C            .byte	$C
14982 3526                        EC            .byte	$EC
14983 3527                        6C            .byte	$6C
14984 3528                        6C            .byte	$6C
14985 3529                        3C            .byte	$3C
14986 352A                        1C            .byte	$1C
14987 352B                        00            .byte	0
14988 352C                        00            .byte	0
14989 352D                        00            .byte	0
14990 352E                        00            .byte	0
14991                                           ! 1656  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14992 352F                        00            .byte	0
14993 3530                        D8            .byte	$D8
14994 3531                        6C            .byte	$6C
14995 3532                        6C            .byte	$6C
14996 3533                        6C            .byte	$6C
14997 3534                        6C            .byte	$6C
14998 3535                        6C            .byte	$6C
14999 3536                        00            .byte	0
15000 3537                        00            .byte	0
15001 3538                        00            .byte	0
15002 3539                        00            .byte	0
15003 353A                        00            .byte	0
15004 353B                        00            .byte	0
15005 353C                        00            .byte	0
15006 353D                        00            .byte	0
15007 353E                        00            .byte	0
15008                                           ! 1657  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
15009 353F                        00            .byte	0
15010 3540                        70            .byte	$70
15011 3541                        D8            .byte	$D8
15012 3542                        30            .byte	$30
15013 3543                        60            .byte	$60
15014 3544                        C8            .byte	$C8
15015 3545                        F8            .byte	$F8
15016 3546                        00            .byte	0
15017 3547                        00            .byte	0
15018 3548                        00            .byte	0
15019 3549                        00            .byte	0
15020 354A                        00            .byte	0
15021 354B                        00            .byte	0
15022 354C                        00            .byte	0
15023 354D                        00            .byte	0
15024 354E                        00            .byte	0
15025                                           ! 1658  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
15026 354F                        00            .byte	0
15027 3550                        00            .byte	0
15028 3551                        00            .byte	0
15029 3552                        00            .byte	0
15030 3553                        7C            .byte	$7C
15031 3554                        7C            .byte	$7C
15032 3555                        7C            .byte	$7C
15033 3556                        7C            .byte	$7C
15034 3557                        7C            .byte	$7C
15035 3558                        7C            .byte	$7C
15036 3559                        7C            .byte	$7C
15037 355A                        00            .byte	0
15038 355B                        00            .byte	0
15039 355C                        00            .byte	0
15040 355D                        00            .byte	0
15041 355E                        00            .byte	0
15042                                           ! 1659  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15043 355F                        00            .byte	0
15044 3560                        00            .byte	0
15045 3561                        00            .byte	0
15046 3562                        00            .byte	0
15047 3563                        00            .byte	0
15048 3564                        00            .byte	0
15049 3565                        00            .byte	0
15050 3566                        00            .byte	0
15051 3567                        00            .byte	0
15052 3568                        00            .byte	0
15053 3569                        00            .byte	0
15054 356A                        00            .byte	0
15055 356B                        00            .byte	0
15056 356C                        00            .byte	0
15057 356D                        00            .byte	0
15058                                           ! 1660 };
15059 356E                        00            .byte	0
15060                                           !BCC_EOS
15061                                           ! 1661 static Bit8u vgafont14alt[1]={0x00};
15062                       0000356F            _vgafont14alt:
15063 356F                        00            .byte	0
15064                                           !BCC_EOS
15065                                           ! 1662 static Bit8u vgafont16alt[1]={0x00};
15066                       00003570            _vgafont16alt:
15067 3570                        00            .byte	0
15068                                           !BCC_EOS
15069                                           ! 1663 #asm
15070                                           !BCC_ASM
15071                       00003571            init_vga_card:
15072                                           ;; switch to color mode and enable CPU access 480 lines
15073 3571           BA                   03C2    mov dx, #0x3C2
15074 3574           B0                     C3    mov al, #0xC3
15075 3576           EE                           outb dx,al
15076                                           ;; more than 64k 3C4/04
15077 3577           BA                   03C4    mov dx, #0x3C4
15078 357A           B0                     04    mov al, #0x04
15079 357C           EE                           outb dx,al
15080 357D           BA                   03C5    mov dx, #0x3C5
15081 3580           B0                     02    mov al, #0x02
15082 3582           EE                           outb dx,al
15083 3583           BB                   358D    mov bx, #msg_vga_init
15084 3586           53                           push bx
15085 3587           E8         483B              call _printf
15086 358A           44                           inc sp
15087 358B           44                           inc sp
15088 358C           C3                           ret
15089                       0000358D            msg_vga_init:
15090 358D                        56            .ascii "VGABios $Id: vgabios.c,v 1.67 2008/01/27 09:44:12 vruppert Exp $"
15091 35CD                        0D            .byte 0x0d,0x0a,0x00
15092                                           ! 1685 endasm
15093                                           !BCC_ENDASM
15094                                           ! 1686 #asm
15095                                           !BCC_ASM
15096                       000035D0            init_bios_area:
15097 35D0           1E                           push ds
15098 35D1           B8                   0040    mov ax, # 0x40
15099 35D4           8ED8                         mov ds, ax
15100                                           ;; init detected hardware BIOS Area
15101 35D6           BB                   0010    mov bx, # 0x10
15102 35D9           8B07                         mov ax, [bx]
15103 35DB           25                   FFCF    and ax, #0xffcf
15104                                           ;; set 80x25 color (not clear from RBIL but usual)
15105 35DE           0D                   0020    or ax, #0x0020
15106 35E1           8907                         mov [bx], ax
15107                                           ;; Just for the first int10 find its children
15108                                           ;; the default char height
15109 35E3           BB                   0085    mov bx, # 0x85
15110 35E6           B0                     10    mov al, #0x10
15111 35E8           8807                         mov [bx], al
15112                                           ;; Clear the screen
15113 35EA           BB                   0087    mov bx, # 0x87
15114 35ED           B0                     60    mov al, #0x60
15115 35EF           8807                         mov [bx], al
15116                                           ;; Set the basic screen we have
15117 35F1           BB                   0088    mov bx, # 0x88
15118 35F4           B0                     F9    mov al, #0xf9
15119 35F6           8807                         mov [bx], al
15120                                           ;; Set the basic modeset options
15121 35F8           BB                   0089    mov bx, # 0x89
15122 35FB           B0                     51    mov al, #0x51
15123 35FD           8807                         mov [bx], al
15124                                           ;; Set the default MSR
15125 35FF           BB                   0065    mov bx, # 0x65
15126 3602           B0                     09    mov al, #0x09
15127 3604           8807                         mov [bx], al
15128 3606           1F                           pop ds
15129 3607           C3                           ret
15130                       00003608            _video_save_pointer_table:
15131 3608                      029F              .word _video_param_table
15132 360A                      C000              .word 0xc000
15133 360C                      0000              .word 0
15134 360E                      0000              .word 0
15135 3610                      0000              .word 0
15136 3612                      0000              .word 0
15137 3614                      0000              .word 0
15138 3616                      0000              .word 0
15139 3618                      0000              .word 0
15140 361A                      0000              .word 0
15141 361C                      0000              .word 0
15142 361E                      0000              .word 0
15143 3620                      0000              .word 0
15144 3622                      0000              .word 0
15145                                           ! 1736 endasm
15146                                           !BCC_ENDASM
15147                                           ! 1737 static void display_splash_screen()
15148                                           ! 1738 {
15149                                           
15150                       00003624            _display_splash_screen:
15151                                           ! 1739 }
15152 3624           C3                         ret
15153                                           ! 1740 static void display_info()
15154                                           ! 1741 {
15155                       00003625            _display_info:
15156                                           ! 1742 #asm
15157                                           !BCC_ASM
15158 3625           B8                   C000   mov ax,#0xc000
15159 3628           8ED8                        mov ds,ax
15160 362A           BE                   0022   mov si,#vgabios_name
15161 362D           E8         0013             call _display_string
15162 3630           BE                   0038   mov si,#vgabios_version
15163 3633           E8         000D             call _display_string
15164                                            ;;mov si,#vgabios_copyright
15165                                            ;;call _display_string
15166                                            ;;mov si,#crlf
15167                                            ;;call _display_string
15168 3636           BE                   007E   mov si,#vgabios_license
15169 3639           E8         0007             call _display_string
15170 363C           BE                   00B3   mov si,#vgabios_website
15171 363F           E8         0001             call _display_string
15172                                           ! 1757 endasm
15173                                           !BCC_ENDASM
15174                                           ! 1758 }
15175 3642           C3                         ret
15176                                           ! 1759 static void display_string()
15177                                           ! 1760 {
15178                       00003643            _display_string:
15179                                           ! 1761 #asm
15180                                           !BCC_ASM
15181 3643           8CD8                        mov ax,ds
15182 3645           8EC0                        mov es,ax
15183 3647           89F7                        mov di,si
15184 3649           31C9                        xor cx,cx
15185 364B           F7D1                        not cx
15186 364D           30C0                        xor al,al
15187 364F           FC                          cld
15188 3650           F2                          repne
15189 3651           AE                           scasb
15190 3652           F7D1                        not cx
15191 3654           49                          dec cx
15192 3655           51                          push cx
15193 3656           B8                   0300   mov ax,#0x0300
15194 3659           BB                   0000   mov bx,#0x0000
15195 365C           CD                     10   int #0x10
15196 365E           59                          pop cx
15197 365F           B8                   1301   mov ax,#0x1301
15198 3662           BB                   000B   mov bx,#0x000b
15199 3665           89F5                        mov bp,si
15200 3667           CD                     10   int #0x10
15201                                           ! 1782 endasm
15202                                           !BCC_ENDASM
15203                                           ! 1783 }
15204 3669           C3                         ret
15205                                           ! 1784 static void int10_debugmsg(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15206                                           ! 1785   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15207                       0000366A            _int10_debugmsg:
15208                                           !BCC_EOS
15209                                           ! 1786 {
15210                                           ! 1787  if(( AX >> 8 )!=0x0E)
15211 366A           55                         push	bp
15212 366B           89E5                       mov	bp,sp
15213                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15214 366D           8B46         12            mov	ax,$12[bp]
15215 3670           88E0                       mov	al,ah
15216 3672           30E4                       xor	ah,ah
15217                                           ! Debug: ne int = const $E to unsigned int = ax+0 (used reg = )
15218 3674           3D                   000E  cmp	ax,*$E
15219 3677           74           20            je  	.1
15220                       00003679            .2:
15221                                           ! 1788   printf("vgabios call ah%02x al%02x bx%04x cx%04x dx%04x\n",( AX >> 8 ),( AX & 0x00ff ),BX,CX,DX);
15222                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15223 3679           FF76         0E            push	$E[bp]
15224                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15225 367C           FF76         10            push	$10[bp]
15226                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15227 367F           FF76         0C            push	$C[bp]
15228                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15229 3682           8A46         12            mov	al,$12[bp]
15230                                           ! Debug: list unsigned char = al+0 (used reg = )
15231 3685           30E4                       xor	ah,ah
15232 3687           50                         push	ax
15233                                           ! Debug: sr int = const 8 to unsigned short AX = [S+$A+$10] (used reg = )
15234 3688           8B46         12            mov	ax,$12[bp]
15235 368B           88E0                       mov	al,ah
15236 368D           30E4                       xor	ah,ah
15237                                           ! Debug: list unsigned int = ax+0 (used reg = )
15238 368F           50                         push	ax
15239                                           ! Debug: list * char = .3+0 (used reg = )
15240 3690           BB                   A0F7  mov	bx,#.3
15241 3693           53                         push	bx
15242                                           ! Debug: func () void = printf+0 (used reg = )
15243 3694           E8         472E            call	_printf
15244 3697           89EC                       mov	sp,bp
15245                                           !BCC_EOS
15246                                           ! 1789 }
15247                       00003699            .1:
15248 3699           5D                         pop	bp
15249 369A           C3                         ret
15250                                           ! 1790 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15251                                           ! Register BX used in function int10_debugmsg
15252                                           ! 1791   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15253                       0000369B            _int10_func:
15254                                           !BCC_EOS
15255                                           ! 1792 {
15256                                           ! 1793  switch(( AX >> 8 ))
15257 369B           55                         push	bp
15258 369C           89E5                       mov	bp,sp
15259                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15260 369E           8B46         12            mov	ax,$12[bp]
15261 36A1           88E0                       mov	al,ah
15262 36A3           30E4                       xor	ah,ah
15263                                           ! 1794   {
15264 36A5           E9         04F5            br 	.6
15265                                           ! 1795    case 0x00:
15266                                           ! 1796      biosfn_set_video_mode(( AX & 0x00ff ));
15267                       000036A8            .7:
15268                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15269 36A8           8A46         12            mov	al,$12[bp]
15270                                           ! Debug: list unsigned char = al+0 (used reg = )
15271 36AB           30E4                       xor	ah,ah
15272 36AD           50                         push	ax
15273                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15274 36AE           E8         0544            call	_biosfn_set_video_mode
15275 36B1           44                         inc	sp
15276 36B2           44                         inc	sp
15277                                           !BCC_EOS
15278                                           ! 1797      switch(( AX & 0x00ff )&0x7F)
15279                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15280 36B3           8A46         12            mov	al,$12[bp]
15281                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15282 36B6           24                     7F  and	al,*$7F
15283                                           ! 1798       {case 6:
15284 36B8           EB           24            jmp .A
15285                                           ! 1799         AX = ((AX & 0xff00) | (0x3F));
15286                       000036BA            .B:
15287                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15288 36BA           8B46         12            mov	ax,$12[bp]
15289 36BD           30C0                       xor	al,al
15290                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15291 36BF           0C                     3F  or	al,*$3F
15292                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15293 36C1           8946         12            mov	$12[bp],ax
15294                                           !BCC_EOS
15295                                           ! 1800         break;
15296 36C4           EB           3D            jmp .8
15297                                           !BCC_EOS
15298                                           ! 1801        case 0:
15299                                           ! 1802        case 1:
15300                       000036C6            .C:
15301                                           ! 1803        case 2:
15302                       000036C6            .D:
15303                                           ! 1804        case 3:
15304                       000036C6            .E:
15305                                           ! 1805        case 4:
15306                       000036C6            .F:
15307                                           ! 1806        case 5:
15308                       000036C6            .10:
15309                                           ! 1807        case 7:
15310                       000036C6            .11:
15311                                           ! 1808         AX = ((AX & 0xff00) | (0x30));
15312                       000036C6            .12:
15313                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15314 36C6           8B46         12            mov	ax,$12[bp]
15315 36C9           30C0                       xor	al,al
15316                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15317 36CB           0C                     30  or	al,*$30
15318                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15319 36CD           8946         12            mov	$12[bp],ax
15320                                           !BCC_EOS
15321                                           ! 1809         break;
15322 36D0           EB           31            jmp .8
15323                                           !BCC_EOS
15324                                           ! 1810       default:
15325                                           ! 1811         AX = ((AX & 0xff00) | (0x20));
15326                       000036D2            .13:
15327                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15328 36D2           8B46         12            mov	ax,$12[bp]
15329 36D5           30C0                       xor	al,al
15330                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15331 36D7           0C                     20  or	al,*$20
15332                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15333 36D9           8946         12            mov	$12[bp],ax
15334                                           !BCC_EOS
15335                                           ! 1812       }
15336                                           ! 1813      break;
15337 36DC           EB           25            jmp .8
15338                       000036DE            .A:
15339 36DE           2C                     00  sub	al,*0
15340 36E0           72           F0            jb 	.13
15341 36E2           3C                     07  cmp	al,*7
15342 36E4           77           1B            ja  	.14
15343 36E6           30E4                       xor	ah,ah
15344 36E8           D1E0                       shl	ax,*1
15345 36EA           89C3                       mov	bx,ax
15346 36EC           2E                         seg	cs
15347 36ED           FFA7       36F1            br	.15[bx]
15348                       000036F1            .15:
15349 36F1                      36C6            .word	.C
15350 36F3                      36C6            .word	.D
15351 36F5                      36C6            .word	.E
15352 36F7                      36C6            .word	.F
15353 36F9                      36C6            .word	.10
15354 36FB                      36C6            .word	.11
15355 36FD                      36BA            .word	.B
15356 36FF                      36C6            .word	.12
15357                       00003701            .14:
15358 3701           EB           CF            jmp	.13
15359                       00003703            .8:
15360 3703           E9         04ED            br 	.4
15361                                           !BCC_EOS
15362                                           ! 1814    case 0x01:
15363                                           ! 1815      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15364                       00003706            .16:
15365                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15366 3706           8A46         10            mov	al,$10[bp]
15367                                           ! Debug: list unsigned char = al+0 (used reg = )
15368 3709           30E4                       xor	ah,ah
15369 370B           50                         push	ax
15370                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15371 370C           8B46         10            mov	ax,$10[bp]
15372 370F           88E0                       mov	al,ah
15373 3711           30E4                       xor	ah,ah
15374                                           ! Debug: list unsigned int = ax+0 (used reg = )
15375 3713           50                         push	ax
15376                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15377 3714           E8         0B8B            call	_biosfn_set_cursor_shape
15378 3717           83C4                   04  add	sp,*4
15379                                           !BCC_EOS
15380                                           ! 1816      break;
15381 371A           E9         04D6            br 	.4
15382                                           !BCC_EOS
15383                                           ! 1817    case 
15384                                           ! 1817 0x02:
15385                                           ! 1818      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15386                       0000371D            .17:
15387                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15388 371D           FF76         0E            push	$E[bp]
15389                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15390 3720           8B46         0C            mov	ax,$C[bp]
15391 3723           88E0                       mov	al,ah
15392 3725           30E4                       xor	ah,ah
15393                                           ! Debug: list unsigned int = ax+0 (used reg = )
15394 3727           50                         push	ax
15395                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15396 3728           E8         0C92            call	_biosfn_set_cursor_pos
15397 372B           83C4                   04  add	sp,*4
15398                                           !BCC_EOS
15399                                           ! 1819      break;
15400 372E           E9         04C2            br 	.4
15401                                           !BCC_EOS
15402                                           ! 1820    case 0x03:
15403                                           ! 1821      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15404                       00003731            .18:
15405                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15406 3731           8D5E         0E            lea	bx,$E[bp]
15407 3734           53                         push	bx
15408                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15409 3735           8D5E         10            lea	bx,$10[bp]
15410 3738           53                         push	bx
15411                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15412 3739           8B46         0C            mov	ax,$C[bp]
15413 373C           88E0                       mov	al,ah
15414 373E           30E4                       xor	ah,ah
15415                                           ! Debug: list unsigned int = ax+0 (used reg = )
15416 3740           50                         push	ax
15417                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15418 3741           E8         0D79            call	_biosfn_get_cursor_pos
15419 3744           83C4                   06  add	sp,*6
15420                                           !BCC_EOS
15421                                           ! 1822      break;
15422 3747           E9         04A9            br 	.4
15423                                           !BCC_EOS
15424                                           ! 1823    case 0x04:
15425                                           ! 1824      unimplemented();
15426                       0000374A            .19:
15427                                           ! Debug: func () void = unimplemented+0 (used reg = )
15428 374A           E8         465C            call	_unimplemented
15429                                           !BCC_EOS
15430                                           ! 1825      AX=0x00;
15431                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15432 374D           31C0                       xor	ax,ax
15433 374F           8946         12            mov	$12[bp],ax
15434                                           !BCC_EOS
15435                                           ! 1826      BX=0x00;
15436                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15437 3752           31C0                       xor	ax,ax
15438 3754           8946         0C            mov	$C[bp],ax
15439                                           !BCC_EOS
15440                                           ! 1827      CX=0x00;
15441                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15442 3757           31C0                       xor	ax,ax
15443 3759           8946         10            mov	$10[bp],ax
15444                                           !BCC_EOS
15445                                           ! 1828      DX=0x00;
15446                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15447 375C           31C0                       xor	ax,ax
15448 375E           8946         0E            mov	$E[bp],ax
15449                                           !BCC_EOS
15450                                           ! 1829      break;
15451 3761           E9         048F            br 	.4
15452                                           !BCC_EOS
15453                                           ! 1830    case 0x05:
15454                                           ! 1831      biosfn_set_active_page(( AX & 0x00ff ));
15455                       00003764            .1A:
15456                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15457 3764           8A46         12            mov	al,$12[bp]
15458                                           ! Debug: list unsigned char = al+0 (used reg = )
15459 3767           30E4                       xor	ah,ah
15460 3769           50                         push	ax
15461                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15462 376A           E8         0DC5            call	_biosfn_set_active_page
15463 376D           44                         inc	sp
15464 376E           44                         inc	sp
15465                                           !BCC_EOS
15466                                           ! 1832      break;
15467 376F           E9         0481            br 	.4
15468                                           !BCC_EOS
15469                                           ! 1833    case 0x06:
15470                                           ! 1834      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15471                       00003772            .1B:
15472                                           ! Debug: list int = const 1 (used reg = )
15473 3772           B8                   0001  mov	ax,*1
15474 3775           50                         push	ax
15475                                           ! Debug: list int = const $FF (used reg = )
15476 3776           B8                   00FF  mov	ax,#$FF
15477 3779           50                         push	ax
15478                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15479 377A           8A46         0E            mov	al,$E[bp]
15480                                           ! Debug: list unsigned char = al+0 (used reg = )
15481 377D           30E4                       xor	ah,ah
15482 377F           50                         push	ax
15483                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15484 3780           8B46         0E            mov	ax,$E[bp]
15485 3783           88E0                       mov	al,ah
15486 3785           30E4                       xor	ah,ah
15487                                           ! Debug: list unsigned int = ax+0 (used reg = )
15488 3787           50                         push	ax
15489                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15490 3788           8A46         10            mov	al,$10[bp]
15491                                           ! Debug: list unsigned char = al+0 (used reg = )
15492 378B           30E4                       xor	ah,ah
15493 378D           50                         push	ax
15494                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15495 378E           8B46         10            mov	ax,$10[bp]
15496 3791           88E0                       mov	al,ah
15497 3793           30E4                       xor	ah,ah
15498                                           ! Debug: list unsigned int = ax+0 (used reg = )
15499 3795           50                         push	ax
15500                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15501 3796           8B46         0C            mov	ax,$C[bp]
15502 3799           88E0                       mov	al,ah
15503 379B           30E4                       xor	ah,ah
15504                                           ! Debug: list unsigned int = ax+0 (used reg = )
15505 379D           50                         push	ax
15506                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15507 379E           8A46         12            mov	al,$12[bp]
15508                                           ! Debug: list unsigned char = al+0 (used reg = )
15509 37A1           30E4                       xor	ah,ah
15510 37A3           50                         push	ax
15511                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15512 37A4           E8         1221            call	_biosfn_scroll
15513 37A7           83C4                   10  add	sp,*$10
15514                                           !BCC_EOS
15515                                           ! 1835      break;
15516 37AA           E9         0446            br 	.4
15517                                           !BCC_EOS
15518                                           ! 1836    case 0x07:
15519                                           ! 1837      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15520                       000037AD            .1C:
15521                                           ! Debug: list int = const 0 (used reg = )
15522 37AD           31C0                       xor	ax,ax
15523 37AF           50                         push	ax
15524                                           ! Debug: list int = const $FF (used reg = )
15525 37B0           B8                   00FF  mov	ax,#$FF
15526 37B3           50                         push	ax
15527                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15528 37B4           8A46         0E            mov	al,$E[bp]
15529                                           ! Debug: list unsigned char = al+0 (used reg = )
15530 37B7           30E4                       xor	ah,ah
15531 37B9           50                         push	ax
15532                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15533 37BA           8B46         0E            mov	ax,$E[bp]
15534 37BD           88E0                       mov	al,ah
15535 37BF           30E4                       xor	ah,ah
15536                                           ! Debug: list unsigned int = ax+0 (used reg = )
15537 37C1           50                         push	ax
15538                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15539 37C2           8A46         10            mov	al,$10[bp]
15540                                           ! Debug: list unsigned char = al+0 (used reg = )
15541 37C5           30E4                       xor	ah,ah
15542 37C7           50                         push	ax
15543                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15544 37C8           8B46         10            mov	ax,$10[bp]
15545 37CB           88E0                       mov	al,ah
15546 37CD           30E4                       xor	ah,ah
15547                                           ! Debug: list unsigned int = ax+0 (used reg = )
15548 37CF           50                         push	ax
15549                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15550 37D0           8B46         0C            mov	ax,$C[bp]
15551 37D3           88E0                       mov	al,ah
15552 37D5           30E4                       xor	ah,ah
15553                                           ! Debug: list unsigned int = ax+0 (used reg = )
15554 37D7           50                         push	ax
15555                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15556 37D8           8A46         12            mov	al,$12[bp]
15557                                           ! Debug: list unsigned char = al+0 (used reg = )
15558 37DB           30E4                       xor	ah,ah
15559 37DD           50                         push	ax
15560                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15561 37DE           E8         11E7            call	_biosfn_scroll
15562 37E1           83C4                   10  add	sp,*$10
15563                                           !BCC_EOS
15564                                           ! 1838      break;
15565 37E4           E9         040C            br 	.4
15566                                           !BCC_EOS
15567                                           ! 1839    case 0x08:
15568                                           ! 1840      biosfn_read_char_attr(( BX >> 8 ),&AX);
15569                       000037E7            .1D:
15570                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15571 37E7           8D5E         12            lea	bx,$12[bp]
15572 37EA           53                         push	bx
15573                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15574 37EB           8B46         0C            mov	ax,$C[bp]
15575 37EE           88E0                       mov	al,ah
15576 37F0           30E4                       xor	ah,ah
15577                                           ! Debug: list unsigned int = ax+0 (used reg = )
15578 37F2           50                         push	ax
15579                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15580 37F3           E8         1900            call	_biosfn_read_char_attr
15581 37F6           83C4                   04  add	sp,*4
15582                                           !BCC_EOS
15583                                           ! 1841      break;
15584 37F9           E9         03F7            br 	.4
15585                                           !BCC_EOS
15586                                           ! 1842    case 0x09:
15587                                           ! 1843      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15588                       000037FC            .1E:
15589                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15590 37FC           FF76         10            push	$10[bp]
15591                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15592 37FF           8A46         0C            mov	al,$C[bp]
15593                                           ! Debug: list unsigned char = al+0 (used reg = )
15594 3802           30E4                       xor	ah,ah
15595 3804           50                         push	ax
15596                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15597 3805           8B46         0C            mov	ax,$C[bp]
15598 3808           88E0                       mov	al,ah
15599 380A           30E4                       xor	ah,ah
15600                                           ! Debug: list unsigned int = ax+0 (used reg = )
15601 380C           50                         push	ax
15602                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15603 380D           8A46         12            mov	al,$12[bp]
15604                                           ! Debug: list unsigned char = al+0 (used reg = )
15605 3810           30E4                       xor	ah,ah
15606 3812           50                         push	ax
15607                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15608 3813           E8         1E28            call	_biosfn_write_char_attr
15609 3816           83C4                   08  add	sp,*8
15610                                           !BCC_EOS
15611                                           ! 1844      break;
15612 3819           E9         03D7            br 	.4
15613                                           !BCC_EOS
15614                                           ! 1845    case 0x0A:
15615                                           ! 1846      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15616                       0000381C            .1F:
15617                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15618 381C           FF76         10            push	$10[bp]
15619                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15620 381F           8A46         0C            mov	al,$C[bp]
15621                                           ! Debug: list unsigned char = al+0 (used reg = )
15622 3822           30E4                       xor	ah,ah
15623 3824           50                         push	ax
15624                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15625 3825           8B46         0C            mov	ax,$C[bp]
15626 3828           88E0                       mov	al,ah
15627 382A           30E4                       xor	ah,ah
15628                                           ! Debug: list unsigned int = ax+0 (used reg = )
15629 382C           50                         push	ax
15630                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15631 382D           8A46         12            mov	al,$12[bp]
15632                                           ! Debug: list unsigned char = al+0 (used reg = )
15633 3830           30E4                       xor	ah,ah
15634 3832           50                         push	ax
15635                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15636 3833           E8         1FFF            call	_biosfn_write_char_only
15637 3836           83C4                   08  add	sp,*8
15638                                           !BCC_EOS
15639                                           ! 1847      break;
15640 3839           E9         03B7            br 	.4
15641                                           !BCC_EOS
15642                                           ! 1848    case 0x0C:
15643                                           ! 1849      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15644                       0000383C            .20:
15645                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15646 383C           FF76         0E            push	$E[bp]
15647                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15648 383F           FF76         10            push	$10[bp]
15649                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15650 3842           8A46         12            mov	al,$12[bp]
15651                                           ! Debug: list unsigned char = al+0 (used reg = )
15652 3845           30E4                       xor	ah,ah
15653 3847           50                         push	ax
15654                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15655 3848           8B46         0C            mov	ax,$C[bp]
15656 384B           88E0                       mov	al,ah
15657 384D           30E4                       xor	ah,ah
15658                                           ! Debug: list unsigned int = ax+0 (used reg = )
15659 384F           50                         push	ax
15660                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15661 3850           E8         2258            call	_biosfn_write_pixel
15662 3853           83C4                   08  add	sp,*8
15663                                           !BCC_EOS
15664                                           ! 1850      break;
15665 3856           E9         039A            br 	.4
15666                                           !BCC_EOS
15667                                           ! 1851    case 0x0D:
15668                                           ! 1852      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15669                       00003859            .21:
15670                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15671 3859           8D5E         12            lea	bx,$12[bp]
15672 385C           53                         push	bx
15673                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15674 385D           FF76         0E            push	$E[bp]
15675                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15676 3860           FF76         10            push	$10[bp]
15677                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15678 3863           8B46         0C            mov	ax,$C[bp]
15679 3866           88E0                       mov	al,ah
15680 3868           30E4                       xor	ah,ah
15681                                           ! Debug: list unsigned int = ax+0 (used reg = )
15682 386A           50                         push	ax
15683                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15684 386B           E8         24DE            call	_biosfn_read_pixel
15685 386E           83C4                   08  add	sp,*8
15686                                           !BCC_EOS
15687                                           ! 1853      break;
15688 3871           E9         037F            br 	.4
15689                                           !BCC_EOS
15690                                           ! 1854    case 0x0E:
15691                                           ! 1855      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15692                       00003874            .22:
15693                                           ! Debug: list int = const 2 (used reg = )
15694 3874           B8                   0002  mov	ax,*2
15695 3877           50                         push	ax
15696                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15697 3878           8A46         0C            mov	al,$C[bp]
15698                                           ! Debug: list unsigned char = al+0 (used reg = )
15699 387B           30E4                       xor	ah,ah
15700 387D           50                         push	ax
15701                                           ! Debug: list int = const $FF (used reg = )
15702 387E           B8                   00FF  mov	ax,#$FF
15703 3881           50                         push	ax
15704                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15705 3882           8A46         12            mov	al,$12[bp]
15706                                           ! Debug: list unsigned char = al+0 (used reg = )
15707 3885           30E4                       xor	ah,ah
15708 3887           50                         push	ax
15709                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15710 3888           E8         26CA            call	_biosfn_write_teletype
15711 388B           83C4                   08  add	sp,*8
15712                                           !BCC_EOS
15713                                           ! 1856      break;
15714 388E           E9         0362            br 	.4
15715                                           !BCC_EOS
15716                                           ! 1857    case 0x10:
15717                                           ! 1858      biosfn_perform_gray_scale_summing(BX,CX);
15718                       00003891            .23:
15719                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15720 3891           FF76         10            push	$10[bp]
15721                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15722 3894           FF76         0C            push	$C[bp]
15723                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15724 3897           E8         2CBA            call	_biosfn_perform_gray_scale_summing
15725 389A           83C4                   04  add	sp,*4
15726                                           !BCC_EOS
15727                                           ! 1859      break;
15728 389D           E9         0353            br 	.4
15729                                           !BCC_EOS
15730                                           ! 1860    case 0x11:
15731                                           ! 1861      switch(( AX & 0x00ff ))
15732                       000038A0            .24:
15733                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15734 38A0           8A46         12            mov	al,$12[bp]
15735                                           ! 1862       {
15736 38A3           E9         00E4            br 	.27
15737                                           ! 1863        case 0x00:
15738                                           ! 1864        case 0x10:
15739                       000038A6            .28:
15740                                           ! 1865         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15741                       000038A6            .29:
15742                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15743 38A6           8B46         0C            mov	ax,$C[bp]
15744 38A9           88E0                       mov	al,ah
15745 38AB           30E4                       xor	ah,ah
15746                                           ! Debug: list unsigned int = ax+0 (used reg = )
15747 38AD           50                         push	ax
15748                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15749 38AE           8A46         0C            mov	al,$C[bp]
15750                                           ! Debug: list unsigned char = al+0 (used reg = )
15751 38B1           30E4                       xor	ah,ah
15752 38B3           50                         push	ax
15753                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15754 38B4           FF76         0E            push	$E[bp]
15755                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15756 38B7           FF76         10            push	$10[bp]
15757                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15758 38BA           FF76         08            push	8[bp]
15759                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15760 38BD           FF76         16            push	$16[bp]
15761                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15762 38C0           8A46         12            mov	al,$12[bp]
15763                                           ! Debug: list unsigned char = al+0 (used reg = )
15764 38C3           30E4                       xor	ah,ah
15765 38C5           50                         push	ax
15766                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15767 38C6           E8         2F32            call	_biosfn_load_text_user_pat
15768 38C9           83C4                   0E  add	sp,*$E
15769                                           !BCC_EOS
15770                                           ! 1866         break;
15771 38CC           E9         0111            br 	.25
15772                                           !BCC_EOS
15773                                           ! 1867        case 0x01:
15774                                           ! 1868        case 0x11:
15775                       000038CF            .2A:
15776                                           ! 1869         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15777                       000038CF            .2B:
15778                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15779 38CF           8A46         0C            mov	al,$C[bp]
15780                                           ! Debug: list unsigned char = al+0 (used reg = )
15781 38D2           30E4                       xor	ah,ah
15782 38D4           50                         push	ax
15783                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15784 38D5           8A46         12            mov	al,$12[bp]
15785                                           ! Debug: list unsigned char = al+0 (used reg = )
15786 38D8           30E4                       xor	ah,ah
15787 38DA           50                         push	ax
15788                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15789 38DB           E8         2FB9            call	_biosfn_load_text_8_14_pat
15790 38DE           83C4                   04  add	sp,*4
15791                                           !BCC_EOS
15792                                           ! 1870         break;
15793 38E1           E9         00FC            br 	.25
15794                                           !BCC_EOS
15795                                           ! 1871        case 0x02:
15796                                           ! 1872        case 0x12:
15797                       000038E4            .2C:
15798                                           ! 1873         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15799                       000038E4            .2D:
15800                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15801 38E4           8A46         0C            mov	al,$C[bp]
15802                                           ! Debug: list unsigned char = al+0 (used reg = )
15803 38E7           30E4                       xor	ah,ah
15804 38E9           50                         push	ax
15805                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15806 38EA           8A46         12            mov	al,$12[bp]
15807                                           ! Debug: list unsigned char = al+0 (used reg = )
15808 38ED           30E4                       xor	ah,ah
15809 38EF           50                         push	ax
15810                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15811 38F0           E8         303B            call	_biosfn_load_text_8_8_pat
15812 38F3           83C4                   04  add	sp,*4
15813                                           !BCC_EOS
15814                                           ! 1874         break;
15815 38F6           E9         00E7            br 	.25
15816                                           !BCC_EOS
15817                                           ! 1875        case 0x04:
15818                                           ! 1876        case 0x14:
15819                       000038F9            .2E:
15820                                           ! 1877         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15821                       000038F9            .2F:
15822                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15823 38F9           8A46         0C            mov	al,$C[bp]
15824                                           ! Debug: list unsigned char = al+0 (used reg = )
15825 38FC           30E4                       xor	ah,ah
15826 38FE           50                         push	ax
15827                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15828 38FF           8A46         12            mov	al,$12[bp]
15829                                           ! Debug: list unsigned char = al+0 (used reg = )
15830 3902           30E4                       xor	ah,ah
15831 3904           50                         push	ax
15832                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15833 3905           E8         30C4            call	_biosfn_load_text_8_16_pat
15834 3908           83C4                   04  add	sp,*4
15835                                           !BCC_EOS
15836                                           ! 1878         break;
15837 390B           E9         00D2            br 	.25
15838                                           !BCC_EOS
15839                                           ! 1879        case 0x20:
15840                                           ! 1880         biosfn_load_gfx_8_8_chars(ES,BP);
15841                       0000390E            .30:
15842                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15843 390E           FF76         08            push	8[bp]
15844                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15845 3911           FF76         16            push	$16[bp]
15846                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15847 3914           E8         3146            call	_biosfn_load_gfx_8_8_chars
15848 3917           83C4                   04  add	sp,*4
15849                                           !BCC_EOS
15850                                           ! 1881         break;
15851 391A           E9         00C3            br 	.25
15852                                           !BCC_EOS
15853                                           ! 1882        case 0x21:
15854                                           ! 1883         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15855                       0000391D            .31:
15856                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15857 391D           8A46         0E            mov	al,$E[bp]
15858                                           ! Debug: list unsigned char = al+0 (used reg = )
15859 3920           30E4                       xor	ah,ah
15860 3922           50                         push	ax
15861                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15862 3923           8A46         0C            mov	al,$C[bp]
15863                                           ! Debug: list unsigned char = al+0 (used reg = )
15864 3926           30E4                       xor	ah,ah
15865 3928           50                         push	ax
15866                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15867 3929           FF76         10            push	$10[bp]
15868                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15869 392C           FF76         08            push	8[bp]
15870                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15871 392F           FF76         16            push	$16[bp]
15872                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15873 3932           E8         3130            call	_biosfn_load_gfx_user_chars
15874 3935           83C4                   0A  add	sp,*$A
15875                                           !BCC_EOS
15876                                           ! 1884         break;
15877 3938           E9         00A5            br 	.25
15878                                           !BCC_EOS
15879                                           ! 1885        case 0x22:
15880                                           ! 1886         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15881                       0000393B            .32:
15882                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15883 393B           8A46         0C            mov	al,$C[bp]
15884                                           ! Debug: list unsigned char = al+0 (used reg = )
15885 393E           30E4                       xor	ah,ah
15886 3940           50                         push	ax
15887                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15888 3941           E8         3129            call	_biosfn_load_gfx_8_14_chars
15889 3944           44                         inc	sp
15890 3945           44                         inc	sp
15891                                           !BCC_EOS
15892                                           ! 1887         break;
15893 3946           E9         0097            br 	.25
15894                                           !BCC_EOS
15895                                           ! 1888        case 0x23:
15896                                           ! 1889         biosfn_l
15897                                           ! 1889 oad_gfx_8_8_dd_chars(( BX & 0x00ff ));
15898                       00003949            .33:
15899                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15900 3949           8A46         0C            mov	al,$C[bp]
15901                                           ! Debug: list unsigned char = al+0 (used reg = )
15902 394C           30E4                       xor	ah,ah
15903 394E           50                         push	ax
15904                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15905 394F           E8         3123            call	_biosfn_load_gfx_8_8_dd_chars
15906 3952           44                         inc	sp
15907 3953           44                         inc	sp
15908                                           !BCC_EOS
15909                                           ! 1890         break;
15910 3954           E9         0089            br 	.25
15911                                           !BCC_EOS
15912                                           ! 1891        case 0x24:
15913                                           ! 1892         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15914                       00003957            .34:
15915                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15916 3957           8A46         0C            mov	al,$C[bp]
15917                                           ! Debug: list unsigned char = al+0 (used reg = )
15918 395A           30E4                       xor	ah,ah
15919 395C           50                         push	ax
15920                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15921 395D           E8         311D            call	_biosfn_load_gfx_8_16_chars
15922 3960           44                         inc	sp
15923 3961           44                         inc	sp
15924                                           !BCC_EOS
15925                                           ! 1893         break;
15926 3962           E9         007B            br 	.25
15927                                           !BCC_EOS
15928                                           ! 1894        case 0x30:
15929                                           ! 1895         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15930                       00003965            .35:
15931                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15932 3965           8D5E         0E            lea	bx,$E[bp]
15933 3968           53                         push	bx
15934                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15935 3969           8D5E         10            lea	bx,$10[bp]
15936 396C           53                         push	bx
15937                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15938 396D           8D5E         08            lea	bx,8[bp]
15939 3970           53                         push	bx
15940                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15941 3971           8D5E         16            lea	bx,$16[bp]
15942 3974           53                         push	bx
15943                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15944 3975           8B46         0C            mov	ax,$C[bp]
15945 3978           88E0                       mov	al,ah
15946 397A           30E4                       xor	ah,ah
15947                                           ! Debug: list unsigned int = ax+0 (used reg = )
15948 397C           50                         push	ax
15949                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15950 397D           E8         3105            call	_biosfn_get_font_info
15951 3980           83C4                   0A  add	sp,*$A
15952                                           !BCC_EOS
15953                                           ! 1896         break;
15954 3983           EB           5B            jmp .25
15955                                           !BCC_EOS
15956                                           ! 1897        default:
15957                                           ! 1898         unknown();
15958                       00003985            .36:
15959                                           ! Debug: func () void = unknown+0 (used reg = )
15960 3985           E8         442F            call	_unknown
15961                                           !BCC_EOS
15962                                           ! 1899       }
15963                                           ! 1900      break;
15964 3988           EB           56            jmp .25
15965                       0000398A            .27:
15966 398A           2C                     00  sub	al,*0
15967 398C         0F84         FF16            beq 	.28
15968 3990           2C                     01  sub	al,*1
15969 3992         0F84         FF39            beq 	.2A
15970 3996           2C                     01  sub	al,*1
15971 3998         0F84         FF48            beq 	.2C
15972 399C           2C                     02  sub	al,*2
15973 399E         0F84         FF57            beq 	.2E
15974 39A2           2C                     0C  sub	al,*$C
15975 39A4         0F84         FEFE            beq 	.29
15976 39A8           2C                     01  sub	al,*1
15977 39AA         0F84         FF21            beq 	.2B
15978 39AE           2C                     01  sub	al,*1
15979 39B0         0F84         FF30            beq 	.2D
15980 39B4           2C                     02  sub	al,*2
15981 39B6         0F84         FF3F            beq 	.2F
15982 39BA           2C                     0C  sub	al,*$C
15983 39BC         0F84         FF4E            beq 	.30
15984 39C0           2C                     01  sub	al,*1
15985 39C2         0F84         FF57            beq 	.31
15986 39C6           2C                     01  sub	al,*1
15987 39C8         0F84         FF6F            beq 	.32
15988 39CC           2C                     01  sub	al,*1
15989 39CE         0F84         FF77            beq 	.33
15990 39D2           2C                     01  sub	al,*1
15991 39D4         0F84         FF7F            beq 	.34
15992 39D8           2C                     0C  sub	al,*$C
15993 39DA         0F84         FF87            beq 	.35
15994 39DE           EB           A5            jmp	.36
15995                       000039E0            .25:
15996 39E0           E9         0210            br 	.4
15997                                           !BCC_EOS
15998                                           ! 1901    case 0x12:
15999                                           ! 1902      switch(( BX & 0x00ff ))
16000                       000039E3            .37:
16001                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
16002 39E3           8A46         0C            mov	al,$C[bp]
16003                                           ! 1903       {
16004 39E6           EB           3F            jmp .3A
16005                                           ! 1904        case 0x20:
16006                                           ! 1905         biosfn_alternate_prtsc();
16007                       000039E8            .3B:
16008                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
16009 39E8           E8         3285            call	_biosfn_alternate_prtsc
16010                                           !BCC_EOS
16011                                           ! 1906         break;
16012 39EB           EB           48            jmp .38
16013                                           !BCC_EOS
16014                                           ! 1907        case 0x35:
16015                                           ! 1908         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
16016                       000039ED            .3C:
16017                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
16018 39ED           FF76         0E            push	$E[bp]
16019                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16020 39F0           FF76         16            push	$16[bp]
16021                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
16022 39F3           8A46         12            mov	al,$12[bp]
16023                                           ! Debug: list unsigned char = al+0 (used reg = )
16024 39F6           30E4                       xor	ah,ah
16025 39F8           50                         push	ax
16026                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
16027 39F9           E8         338B            call	_biosfn_switch_video_interface
16028 39FC           83C4                   06  add	sp,*6
16029                                           !BCC_EOS
16030                                           ! 1909         AX = ((AX & 0xff00) | (0x12));
16031                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16032 39FF           8B46         12            mov	ax,$12[bp]
16033 3A02           30C0                       xor	al,al
16034                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16035 3A04           0C                     12  or	al,*$12
16036                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16037 3A06           8946         12            mov	$12[bp],ax
16038                                           !BCC_EOS
16039                                           ! 1910         break;
16040 3A09           EB           2A            jmp .38
16041                                           !BCC_EOS
16042                                           ! 1911        case 0x36:
16043                                           ! 1912         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
16044                       00003A0B            .3D:
16045                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16046 3A0B           8A46         12            mov	al,$12[bp]
16047                                           ! Debug: list unsigned char = al+0 (used reg = )
16048 3A0E           30E4                       xor	ah,ah
16049 3A10           50                         push	ax
16050                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
16051 3A11           E8         337B            call	_biosfn_enable_video_refresh_control
16052 3A14           44                         inc	sp
16053 3A15           44                         inc	sp
16054                                           !BCC_EOS
16055                                           ! 1913         AX = ((AX & 0xff00) | (0x12));
16056                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16057 3A16           8B46         12            mov	ax,$12[bp]
16058 3A19           30C0                       xor	al,al
16059                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16060 3A1B           0C                     12  or	al,*$12
16061                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16062 3A1D           8946         12            mov	$12[bp],ax
16063                                           !BCC_EOS
16064                                           ! 1914         break;
16065 3A20           EB           13            jmp .38
16066                                           !BCC_EOS
16067                                           ! 1915        default:
16068                                           ! 1916         unknown();
16069                       00003A22            .3E:
16070                                           ! Debug: func () void = unknown+0 (used reg = )
16071 3A22           E8         4392            call	_unknown
16072                                           !BCC_EOS
16073                                           ! 1917       }
16074                                           ! 1918      break;
16075 3A25           EB           0E            jmp .38
16076                       00003A27            .3A:
16077 3A27           2C                     20  sub	al,*$20
16078 3A29           74           BD            je 	.3B
16079 3A2B           2C                     15  sub	al,*$15
16080 3A2D           74           BE            je 	.3C
16081 3A2F           2C                     01  sub	al,*1
16082 3A31           74           D8            je 	.3D
16083 3A33           EB           ED            jmp	.3E
16084                       00003A35            .38:
16085 3A35           E9         01BB            br 	.4
16086                                           !BCC_EOS
16087                                           ! 1919    case 0x13:
16088                                           ! 1920      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
16089                       00003A38            .3F:
16090                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
16091 3A38           FF76         08            push	8[bp]
16092                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16093 3A3B           FF76         16            push	$16[bp]
16094                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16095 3A3E           8A46         0E            mov	al,$E[bp]
16096                                           ! Debug: list unsigned char = al+0 (used reg = )
16097 3A41           30E4                       xor	ah,ah
16098 3A43           50                         push	ax
16099                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16100 3A44           8B46         0E            mov	ax,$E[bp]
16101 3A47           88E0                       mov	al,ah
16102 3A49           30E4                       xor	ah,ah
16103                                           ! Debug: list unsigned int = ax+0 (used reg = )
16104 3A4B           50                         push	ax
16105                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16106 3A4C           FF76         10            push	$10[bp]
16107                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16108 3A4F           8A46         0C            mov	al,$C[bp]
16109                                           ! Debug: list unsigned char = al+0 (used reg = )
16110 3A52           30E4                       xor	ah,ah
16111 3A54           50                         push	ax
16112                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16113 3A55           8B46         0C            mov	ax,$C[bp]
16114 3A58           88E0                       mov	al,ah
16115 3A5A           30E4                       xor	ah,ah
16116                                           ! Debug: list unsigned int = ax+0 (used reg = )
16117 3A5C           50                         push	ax
16118                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16119 3A5D           8A46         12            mov	al,$12[bp]
16120                                           ! Debug: list unsigned char = al+0 (used reg = )
16121 3A60           30E4                       xor	ah,ah
16122 3A62           50                         push	ax
16123                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16124 3A63           E8         3331            call	_biosfn_write_string
16125 3A66           83C4                   10  add	sp,*$10
16126                                           !BCC_EOS
16127                                           ! 1921      break;
16128 3A69           E9         0187            br 	.4
16129                                           !BCC_EOS
16130                                           ! 1922    case 0x1B:
16131                                           ! 1923      biosfn_read_state_info(BX,ES,DI);
16132                       00003A6C            .40:
16133                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16134 3A6C           FF76         04            push	4[bp]
16135                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16136 3A6F           FF76         16            push	$16[bp]
16137                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16138 3A72           FF76         0C            push	$C[bp]
16139                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16140 3A75           E8         346B            call	_biosfn_read_state_info
16141 3A78           83C4                   06  add	sp,*6
16142                                           !BCC_EOS
16143                                           ! 1924      AX = ((AX & 0xff00) | (0x1B));
16144                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16145 3A7B           8B46         12            mov	ax,$12[bp]
16146 3A7E           30C0                       xor	al,al
16147                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16148 3A80           0C                     1B  or	al,*$1B
16149                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16150 3A82           8946         12            mov	$12[bp],ax
16151                                           !BCC_EOS
16152                                           ! 1925      break;
16153 3A85           E9         016B            br 	.4
16154                                           !BCC_EOS
16155                                           ! 1926    case 0x1C:
16156                                           ! 1927      switch(( AX & 0x00ff ))
16157                       00003A88            .41:
16158                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16159 3A88           8A46         12            mov	al,$12[bp]
16160                                           ! 1928       {
16161 3A8B           EB           36            jmp .44
16162                                           ! 1929        case 0x00:
16163                                           ! 1930         biosfn_read_video_state_size(CX,&BX);
16164                       00003A8D            .45:
16165                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16166 3A8D           8D5E         0C            lea	bx,$C[bp]
16167 3A90           53                         push	bx
16168                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16169 3A91           FF76         10            push	$10[bp]
16170                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16171 3A94           E8         35CB            call	_biosfn_read_video_state_size
16172 3A97           83C4                   04  add	sp,*4
16173                                           !BCC_EOS
16174                                           ! 1931         break;
16175 3A9A           EB           35            jmp .42
16176                                           !BCC_EOS
16177                                           ! 1932        case 0x01:
16178                                           ! 1933         biosfn_save_video_state(CX,ES,BX);
16179                       00003A9C            .46:
16180                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16181 3A9C           FF76         0C            push	$C[bp]
16182                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16183 3A9F           FF76         16            push	$16[bp]
16184                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16185 3AA2           FF76         10            push	$10[bp]
16186                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16187 3AA5           E8         35DE            call	_biosfn_save_video_state
16188 3AA8           83C4                   06  add	sp,*6
16189                                           !BCC_EOS
16190                                           ! 1934         break;
16191 3AAB           EB           24            jmp .42
16192                                           !BCC_EOS
16193                                           ! 1935        case 0x02:
16194                                           ! 1936         biosfn_restore_video_state(CX,ES,BX);
16195                       00003AAD            .47:
16196                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16197 3AAD           FF76         0C            push	$C[bp]
16198                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16199 3AB0           FF76         16            push	$16[bp]
16200                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16201 3AB3           FF76         10            push	$10[bp]
16202                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16203 3AB6           E8         3B97            call	_biosfn_restore_video_state
16204 3AB9           83C4                   06  add	sp,*6
16205                                           !BCC_EOS
16206                                           ! 1937         break;
16207 3ABC           EB           13            jmp .42
16208                                           !BCC_EOS
16209                                           ! 1938        default:
16210                                           ! 1939         unknown();
16211                       00003ABE            .48:
16212                                           ! Debug: func () void = unknown+0 (used reg = )
16213 3ABE           E8         42F6            call	_unknown
16214                                           !BCC_EOS
16215                                           ! 1940       }
16216                                           ! 1941      AX = ((AX & 0xff00) | (0x1C));
16217 3AC1           EB           0E            jmp .42
16218                       00003AC3            .44:
16219 3AC3           2C                     00  sub	al,*0
16220 3AC5           74           C6            je 	.45
16221 3AC7           2C                     01  sub	al,*1
16222 3AC9           74           D1            je 	.46
16223 3ACB           2C                     01  sub	al,*1
16224 3ACD           74           DE            je 	.47
16225 3ACF           EB           ED            jmp	.48
16226                       00003AD1            .42:
16227                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16228 3AD1           8B46         12            mov	ax,$12[bp]
16229 3AD4           30C0                       xor	al,al
16230                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16231 3AD6           0C                     1C  or	al,*$1C
16232                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16233 3AD8           8946         12            mov	$12[bp],ax
16234                                           !BCC_EOS
16235                                           ! 1942      break;
16236 3ADB           E9         0115            br 	.4
16237                                           !BCC_EOS
16238                                           ! 1943    case 0x4f:
16239                                           ! 1944      if (vbe_has_vbe_display()) {
16240                       00003ADE            .49:
16241                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16242 3ADE           E8         59D1            call	_vbe_has_vbe_display
16243 3AE1           85C0                       test	ax,ax
16244 3AE3         0F84         00A9            beq 	.4A
16245                       00003AE7            .4B:
16246                                           ! 1945        switch(( AX & 0x00ff ))
16247                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16248 3AE7           8A46         12            mov	al,$12[bp]
16249                                           ! 1946        {
16250 3AEA           EB           77            jmp .4E
16251                                           ! 1947          case 0x00:
16252                                           ! 1948           vbe_biosfn_return_controller_information(&AX,ES,DI);
16253                       00003AEC            .4F:
16254                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16255 3AEC           FF76         04            push	4[bp]
16256                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16257 3AEF           FF76         16            push	$16[bp]
16258                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16259 3AF2           8D5E         12            lea	bx,$12[bp]
16260 3AF5           53                         push	bx
16261                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16262 3AF6           E8         5A17            call	_vbe_biosfn_return_controller_information
16263 3AF9           83C4                   06  add	sp,*6
16264                                           !BCC_EOS
16265                                           ! 1949           break;
16266 3AFC           E9         008F            br 	.4C
16267                                           !BCC_EOS
16268                                           ! 1950          case 0x01:
16269                                           ! 1951           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16270                       00003AFF            .50:
16271                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16272 3AFF           FF76         04            push	4[bp]
16273                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16274 3B02           FF76         16            push	$16[bp]
16275                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16276 3B05           FF76         10            push	$10[bp]
16277                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16278 3B08           8D5E         12            lea	bx,$12[bp]
16279 3B0B           53                         push	bx
16280                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16281 3B0C           E8         5C9F            call	_vbe_biosfn_return_mode_information
16282 3B0F           83C4                   08  add	sp,*8
16283                                           !BCC_EOS
16284                                           ! 1952           break;
16285 3B12           EB           7A            jmp .4C
16286                                           !BCC_EOS
16287                                           ! 1953          case 0x02:
16288                                           ! 1954           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16289                       00003B14            .51:
16290                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16291 3B14           FF76         04            push	4[bp]
16292                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16293 3B17           FF76         16            push	$16[bp]
16294                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16295 3B1A           FF76         0C            push	$C[bp]
16296                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16297 3B1D           8D5E         12            lea	bx,$12[bp]
16298 3B20           53                         push	bx
16299                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16300 3B21           E8         5DE1            call	_vbe_biosfn_set_mode
16301 3B24           83C4                   08  add	sp,*8
16302                                           !BCC_EOS
16303                                           ! 1955           break;
16304 3B27           EB           65            jmp .4C
16305                                           !BCC_EOS
16306                                           ! 1956          case 0x04:
16307                                           ! 1957           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16308                       00003B29            .52:
16309                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16310 3B29           8D5E         0C            lea	bx,$C[bp]
16311 3B2C           53                         push	bx
16312                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16313 3B2D           FF76         16            push	$16[bp]
16314                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16315 3B30           FF76         0E            push	$E[bp]
16316                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16317 3B33           FF76         10            push	$10[bp]
16318                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16319 3B36           8D5E         12            lea	bx,$12[bp]
16320 3B39           53                         push	bx
16321                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16322 3B3A           E8         6135            call	_vbe_biosfn_save_restore_state
16323 3B3D           83C4                   0A  add	sp,*$A
16324                                           !BCC_EOS
16325                                           ! 1958           break;
16326 3B40           EB           4C            jmp .4C
16327                                           !BCC_EOS
16328                                           ! 1959          case 0x09:
16329                                           ! 1960           unimplemented();
16330                       00003B42            .53:
16331                                           ! Debug: func () void = unimplemented+0 (used reg = )
16332 3B42           E8         4264            call	_unimplemented
16333                                           !BCC_EOS
16334                                           ! 1961           AX=0x100;
16335                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16336 3B45           B8                   0100  mov	ax,#$100
16337 3B48           8946         12            mov	$12[bp],ax
16338                                           !BCC_EOS
16339                                           ! 1962           break;
16340 3B4B           EB           41            jmp .4C
16341                                           !BCC_EOS
16342                                           ! 1963          case 0x0A:
16343                                           ! 1964           unimplemented();
16344                       00003B4D            .54:
16345                                           ! Debug: func () void = unimplemented+0 (used reg = )
16346 3B4D           E8         4259            call	_unimplemented
16347                                           !BCC_EOS
16348                                           ! 1965           AX=0x100;
16349                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16350 3B50           B8                   0100  mov	ax,#$100
16351 3B53           8946         12            mov	$12[bp],ax
16352                                           !BCC_EOS
16353                                           ! 1966           break;
16354 3B56           EB           36            jmp .4C
16355                                           !BCC_EOS
16356                                           ! 1967          default:
16357                                           ! 1968           unknown();
16358                       00003B58            .55:
16359                                           ! Debug: func () void = unknown+0 (used reg = )
16360 3B58           E8         425C            call	_unknown
16361                                           !BCC_EOS
16362                                           ! 1969           AX=0x100;
16363                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16364 3B5B           B8                   0100  mov	ax,#$100
16365 3B5E           8946         12            mov	$12[bp],ax
16366                                           !BCC_EOS
16367                                           ! 1970           }
16368                                           ! 1971    
16369                                           ! 1971      }
16370 3B61           EB           2B            jmp .4C
16371                       00003B63            .4E:
16372 3B63           2C                     00  sub	al,*0
16373 3B65           72           F1            jb 	.55
16374 3B67           3C                     0A  cmp	al,*$A
16375 3B69           77           21            ja  	.56
16376 3B6B           30E4                       xor	ah,ah
16377 3B6D           D1E0                       shl	ax,*1
16378 3B6F           89C3                       mov	bx,ax
16379 3B71           2E                         seg	cs
16380 3B72           FFA7       3B76            br	.57[bx]
16381                       00003B76            .57:
16382 3B76                      3AEC            .word	.4F
16383 3B78                      3AFF            .word	.50
16384 3B7A                      3B14            .word	.51
16385 3B7C                      3B58            .word	.55
16386 3B7E                      3B29            .word	.52
16387 3B80                      3B58            .word	.55
16388 3B82                      3B58            .word	.55
16389 3B84                      3B58            .word	.55
16390 3B86                      3B58            .word	.55
16391 3B88                      3B42            .word	.53
16392 3B8A                      3B4D            .word	.54
16393                       00003B8C            .56:
16394 3B8C           EB           CA            jmp	.55
16395                       00003B8E            .4C:
16396                                           ! 1972         else {
16397 3B8E           EB           06            jmp .58
16398                       00003B90            .4A:
16399                                           ! 1973           AX=0x0100;
16400                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16401 3B90           B8                   0100  mov	ax,#$100
16402 3B93           8946         12            mov	$12[bp],ax
16403                                           !BCC_EOS
16404                                           ! 1974           }
16405                                           ! 1975         break;
16406                       00003B96            .58:
16407 3B96           EB           5B            jmp .4
16408                                           !BCC_EOS
16409                                           ! 1976    default:
16410                                           ! 1977      unknown();
16411                       00003B98            .59:
16412                                           ! Debug: func () void = unknown+0 (used reg = )
16413 3B98           E8         421C            call	_unknown
16414                                           !BCC_EOS
16415                                           ! 1978   }
16416                                           ! 1979 }
16417 3B9B           EB           56            jmp .4
16418                       00003B9D            .6:
16419 3B9D           2D                   0000  sub	ax,*0
16420 3BA0           7C           F6            jl 	.59
16421 3BA2           3D                   001C  cmp	ax,*$1C
16422 3BA5           77           43            ja  	.5A
16423 3BA7           D1E0                       shl	ax,*1
16424 3BA9           89C3                       mov	bx,ax
16425 3BAB           2E                         seg	cs
16426 3BAC           FFA7       3BB0            br	.5B[bx]
16427                       00003BB0            .5B:
16428 3BB0                      36A8            .word	.7
16429 3BB2                      3706            .word	.16
16430 3BB4                      371D            .word	.17
16431 3BB6                      3731            .word	.18
16432 3BB8                      374A            .word	.19
16433 3BBA                      3764            .word	.1A
16434 3BBC                      3772            .word	.1B
16435 3BBE                      37AD            .word	.1C
16436 3BC0                      37E7            .word	.1D
16437 3BC2                      37FC            .word	.1E
16438 3BC4                      381C            .word	.1F
16439 3BC6                      3B98            .word	.59
16440 3BC8                      383C            .word	.20
16441 3BCA                      3859            .word	.21
16442 3BCC                      3874            .word	.22
16443 3BCE                      3B98            .word	.59
16444 3BD0                      3891            .word	.23
16445 3BD2                      38A0            .word	.24
16446 3BD4                      39E3            .word	.37
16447 3BD6                      3A38            .word	.3F
16448 3BD8                      3B98            .word	.59
16449 3BDA                      3B98            .word	.59
16450 3BDC                      3B98            .word	.59
16451 3BDE                      3B98            .word	.59
16452 3BE0                      3B98            .word	.59
16453 3BE2                      3B98            .word	.59
16454 3BE4                      3B98            .word	.59
16455 3BE6                      3A6C            .word	.40
16456 3BE8                      3A88            .word	.41
16457                       00003BEA            .5A:
16458 3BEA           2D                   004F  sub	ax,*$4F
16459 3BED         0F84         FEED            beq 	.49
16460 3BF1           EB           A5            jmp	.59
16461                       00003BF3            .4:
16462                       FFFFFFFE            ..FFFF	=	-2
16463 3BF3           5D                         pop	bp
16464 3BF4           C3                         ret
16465                                           ! 1980 static void biosfn_set_video_mode(mode) Bit8u mode;
16466                                           ! Register BX used in function int10_func
16467                       00003BF5            _biosfn_set_video_mode:
16468                                           !BCC_EOS
16469                                           ! 1981 {
16470                                           ! 1982  Bit8u noclearmem=mode&0x80;
16471 3BF5           55                         push	bp
16472 3BF6           89E5                       mov	bp,sp
16473 3BF8           4C                         dec	sp
16474                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16475 3BF9           8A46         04            mov	al,4[bp]
16476 3BFC           24                     80  and	al,#$80
16477                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16478 3BFE           8846         FF            mov	-1[bp],al
16479                                           !BCC_EOS
16480                                           ! 1983  Bit8u line,mmask,*palette,vpti;
16481                                           !BCC_EOS
16482                                           ! 1984  Bit16u i,twidth,theightm1,cheight;
16483                                           !BCC_EOS
16484                                           ! 1985  Bit8u modeset_ctl,video_ctl,vga_switches;
16485                                           !BCC_EOS
16486                                           ! 1986  Bit16u crtc_addr;
16487                                           !BCC_EOS
16488                                           ! 1987  if (vbe_has_vbe_display()) {
16489 3C01           83C4                   EB  add	sp,*-$15
16490                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16491 3C04           E8         58AB            call	_vbe_has_vbe_display
16492 3C07           85C0                       test	ax,ax
16493 3C09           74           08            je  	.5C
16494                       00003C0B            .5D:
16495                                           ! 1988    dispi_set_enable(0x00);
16496                                           ! Debug: list int = const 0 (used reg = )
16497 3C0B           31C0                       xor	ax,ax
16498 3C0D           50                         push	ax
16499                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16500 3C0E           E8         566E            call	_dispi_set_enable
16501 3C11           44                         inc	sp
16502 3C12           44                         inc	sp
16503                                           !BCC_EOS
16504                                           ! 1989   }
16505                                           ! 1990  mode=mode&0x7f;
16506                       00003C13            .5C:
16507                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16508 3C13           8A46         04            mov	al,4[bp]
16509 3C16           24                     7F  and	al,*$7F
16510                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16511 3C18           8846         04            mov	4[bp],al
16512                                           !BCC_EOS
16513                                           ! 1991  line=find_vga_entry(mode);
16514                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16515 3C1B           8A46         04            mov	al,4[bp]
16516 3C1E           30E4                       xor	ah,ah
16517 3C20           50                         push	ax
16518                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16519 3C21           E8         400A            call	_find_vga_entry
16520 3C24           44                         inc	sp
16521 3C25           44                         inc	sp
16522                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16523 3C26           8846         FE            mov	-2[bp],al
16524                                           !BCC_EOS
16525                                           ! 1992  printf("mode search %02x found line %02x\n",mode,line);
16526                                           ! Debug: list unsigned char line = [S+$18-4] (used reg = )
16527 3C29           8A46         FE            mov	al,-2[bp]
16528 3C2C           30E4                       xor	ah,ah
16529 3C2E           50                         push	ax
16530                                           ! Debug: list unsigned char mode = [S+$1A+2] (used reg = )
16531 3C2F           8A46         04            mov	al,4[bp]
16532 3C32           30E4                       xor	ah,ah
16533 3C34           50                         push	ax
16534                                           ! Debug: list * char = .5E+0 (used reg = )
16535 3C35           BB                   A0D5  mov	bx,#.5E
16536 3C38           53                         push	bx
16537                                           ! Debug: func () void = printf+0 (used reg = )
16538 3C39           E8         4189            call	_printf
16539 3C3C           83C4                   06  add	sp,*6
16540                                           !BCC_EOS
16541                                           ! 1993  if(line==0xFF)
16542                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16543 3C3F           8A46         FE            mov	al,-2[bp]
16544 3C42           3C                     FF  cmp	al,#$FF
16545 3C44           75           04            jne 	.5F
16546                       00003C46            .60:
16547                                           ! 1994   return;
16548 3C46           89EC                       mov	sp,bp
16549 3C48           5D                         pop	bp
16550 3C49           C3                         ret
16551                                           !BCC_EOS
16552                                           ! 1995  vpti=line_to_vpti[line];
16553                       00003C4A            .5F:
16554                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16555 3C4A           8A46         FE            mov	al,-2[bp]
16556 3C4D           30E4                       xor	ah,ah
16557 3C4F           89C3                       mov	bx,ax
16558                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16559 3C51           8A87       028B            mov	al,_line_to_vpti[bx]
16560 3C55           8846         F9            mov	-7[bp],al
16561                                           !BCC_EOS
16562                                           ! 1996  twidth=video_param_table[vpti].twidth;
16563                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16564 3C58           8A46         F9            mov	al,-7[bp]
16565 3C5B           30E4                       xor	ah,ah
16566 3C5D           B1                     06  mov	cl,*6
16567 3C5F           D3E0                       shl	ax,cl
16568 3C61           89C3                       mov	bx,ax
16569                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16570 3C63           8A87       029F            mov	al,_video_param_table[bx]
16571 3C67           30E4                       xor	ah,ah
16572 3C69           8946         F4            mov	-$C[bp],ax
16573                                           !BCC_EOS
16574                                           ! 1997  theightm1=video_param_table[vpti].theightm1;
16575                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16576 3C6C           8A46         F9            mov	al,-7[bp]
16577 3C6F           30E4                       xor	ah,ah
16578 3C71           B1                     06  mov	cl,*6
16579 3C73           D3E0                       shl	ax,cl
16580 3C75           89C3                       mov	bx,ax
16581 3C77           81C3                 029F  add	bx,#_video_param_table
16582                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16583 3C7B           8A47         01            mov	al,1[bx]
16584 3C7E           30E4                       xor	ah,ah
16585 3C80           8946         F2            mov	-$E[bp],ax
16586                                           !BCC_EOS
16587                                           ! 1998  cheight=video_param_table[vpti].cheight;
16588                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16589 3C83           8A46         F9            mov	al,-7[bp]
16590 3C86           30E4                       xor	ah,ah
16591 3C88           B1                     06  mov	cl,*6
16592 3C8A           D3E0                       shl	ax,cl
16593 3C8C           89C3                       mov	bx,ax
16594 3C8E           81C3                 029F  add	bx,#_video_param_table
16595                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16596 3C92           8A47         02            mov	al,2[bx]
16597 3C95           30E4                       xor	ah,ah
16598 3C97           8946         F0            mov	-$10[bp],ax
16599                                           !BCC_EOS
16600                                           ! 1999  video_ctl=read_byte(0x40,0x87);
16601                                           ! Debug: list int = const $87 (used reg = )
16602 3C9A           B8                   0087  mov	ax,#$87
16603 3C9D           50                         push	ax
16604                                           ! Debug: list int = const $40 (used reg = )
16605 3C9E           B8                   0040  mov	ax,*$40
16606 3CA1           50                         push	ax
16607                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16608 3CA2           E8         4075            call	_read_byte
16609 3CA5           83C4                   04  add	sp,*4
16610                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16611 3CA8           8846         EE            mov	-$12[bp],al
16612                                           !BCC_EOS
16613                                           ! 2000  vga_switches=read_byte(0x40,0x88);
16614                                           ! Debug: list int = const $88 (used reg = )
16615 3CAB           B8                   0088  mov	ax,#$88
16616 3CAE           50                         push	ax
16617                                           ! Debug: list int = const $40 (used reg = )
16618 3CAF           B8                   0040  mov	ax,*$40
16619 3CB2           50                         push	ax
16620                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16621 3CB3           E8         4064            call	_read_byte
16622 3CB6           83C4                   04  add	sp,*4
16623                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16624 3CB9           8846         ED            mov	-$13[bp],al
16625                                           !BCC_EOS
16626                                           ! 2001  modeset_ctl=read_byte(0x40,0x89);
16627                                           ! Debug: list int = const $89 (used reg = )
16628 3CBC           B8                   0089  mov	ax,#$89
16629 3CBF           50                         push	ax
16630                                           ! Debug: list int = const $40 (used reg = )
16631 3CC0           B8                   0040  mov	ax,*$40
16632 3CC3           50                         push	ax
16633                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16634 3CC4           E8         4053            call	_read_byte
16635 3CC7           83C4                   04  add	sp,*4
16636                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16637 3CCA           8846         EF            mov	-$11[bp],al
16638                                           !BCC_EOS
16639                                           ! 2002  if((modeset_ctl&0x08)==0)
16640                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16641 3CCD           8A46         EF            mov	al,-$11[bp]
16642 3CD0           24                     08  and	al,*8
16643                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16644 3CD2           84C0                       test	al,al
16645 3CD4         0F85         0145            bne 	.61
16646                       00003CD8            .62:
16647                                           ! 2003   {
16648                                           ! 2004    outb(0x3c6,vga_modes[line].pelmask);
16649                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16650 3CD8           8A46         FE            mov	al,-2[bp]
16651 3CDB           30E4                       xor	ah,ah
16652 3CDD           B1                     03  mov	cl,*3
16653 3CDF           D3E0                       shl	ax,cl
16654 3CE1           89C3                       mov	bx,ax
16655 3CE3           81C3                 020B  add	bx,#_vga_modes
16656                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16657 3CE7           8A47         06            mov	al,6[bx]
16658 3CEA           30E4                       xor	ah,ah
16659 3CEC           50                         push	ax
16660                                           ! Debug: list int = const $3C6 (used reg = )
16661 3CED           B8                   03C6  mov	ax,#$3C6
16662 3CF0           50                         push	ax
16663                                           ! Debug: func () void = outb+0 (used reg = )
16664 3CF1           E8         4092            call	_outb
16665 3CF4           83C4                   04  add	sp,*4
16666                                           !BCC_EOS
16667                                           ! 2005    outb(0x3c8,0x00);
16668                                           ! Debug: list int = const 0 (used reg = )
16669 3CF7           31C0                       xor	ax,ax
16670 3CF9           50                         push	ax
16671                                           ! Debug: list int = const $3C8 (used reg = )
16672 3CFA           B8                   03C8  mov	ax,#$3C8
16673 3CFD           50                         push	ax
16674                                           ! Debug: func () void = outb+0 (used reg = )
16675 3CFE           E8         4085            call	_outb
16676 3D01           83C4                   04  add	sp,*4
16677                                           !BCC_EOS
16678                                           ! 2006    switch(vga_modes[line].dacmodel)
16679                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16680 3D04           8A46         FE            mov	al,-2[bp]
16681 3D07           30E4                       xor	ah,ah
16682 3D09           B1                     03  mov	cl,*3
16683 3D0B           D3E0                       shl	ax,cl
16684 3D0D           89C3                       mov	bx,ax
16685 3D0F           81C3                 020B  add	bx,#_vga_modes
16686 3D13           8A47         07            mov	al,7[bx]
16687                                           ! 2007     {case 0:
16688 3D16           EB           22            jmp .65
16689                                           ! 2008       palette=&palette0;
16690                       00003D18            .66:
16691                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16692 3D18           BB                   0A1F  mov	bx,#_palette0
16693 3D1B           895E         FA            mov	-6[bp],bx
16694                                           !BCC_EOS
16695                                           ! 2009       break;
16696 3D1E           EB           2A            jmp .63
16697                                           !BCC_EOS
16698                                           ! 2010      case 1:
16699                                           ! 2011       palette=&palette1;
16700                       00003D20            .67:
16701                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16702 3D20           BB                   0ADF  mov	bx,#_palette1
16703 3D23           895E         FA            mov	-6[bp],bx
16704                                           !BCC_EOS
16705                                           ! 2012       break;
16706 3D26           EB           22            jmp .63
16707                                           !BCC_EOS
16708                                           ! 2013      case 2:
16709                                           ! 2014       palette=&palette2;
16710                       00003D28            .68:
16711                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16712 3D28           BB                   0B9F  mov	bx,#_palette2
16713 3D2B           895E         FA            mov	-6[bp],bx
16714                                           !BCC_EOS
16715                                           ! 2015       break;
16716 3D2E           EB           1A            jmp .63
16717                                           !BCC_EOS
16718                                           ! 2016      case 3:
16719                                           ! 2017       palette=&palette3;
16720                       00003D30            .69:
16721                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16722 3D30           BB                   0C5F  mov	bx,#_palette3
16723 3D33           895E         FA            mov	-6[bp],bx
16724                                           !BCC_EOS
16725                                           ! 2018       break;
16726 3D36           EB           12            jmp .63
16727                                           !BCC_EOS
16728                                           ! 2019     }
16729                                           ! 2020    for(i=0;i<0x0100;i++)
16730 3D38           EB           10            jmp .63
16731                       00003D3A            .65:
16732 3D3A           2C                     00  sub	al,*0
16733 3D3C           74           DA            je 	.66
16734 3D3E           2C                     01  sub	al,*1
16735 3D40           74           DE            je 	.67
16736 3D42           2C                     01  sub	al,*1
16737 3D44           74           E2            je 	.68
16738 3D46           2C                     01  sub	al,*1
16739 3D48           74           E6            je 	.69
16740                       00003D4A            .63:
16741                       FFFFFFE8            ..FFFE	=	-$18
16742                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16743 3D4A           31C0                       xor	ax,ax
16744 3D4C           8946         F6            mov	-$A[bp],ax
16745                                           !BCC_EOS
16746                                           !BCC_EOS
16747                                           ! 2021     {if(i<=dac_regs[vga_modes[line].dacmodel])
16748 3D4F           E9         00AB            br 	.6C
16749                       00003D52            .6D:
16750                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16751 3D52           8A46         FE            mov	al,-2[bp]
16752 3D55           30E4                       xor	ah,ah
16753 3D57           B1                     03  mov	cl,*3
16754 3D59           D3E0                       shl	ax,cl
16755 3D5B           89C3                       mov	bx,ax
16756 3D5D           81C3                 020B  add	bx,#_vga_modes
16757                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16758 3D61           8A47         07            mov	al,7[bx]
16759 3D64           30E4                       xor	ah,ah
16760 3D66           89C3                       mov	bx,ax
16761                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16762 3D68           8A87       029B            mov	al,_dac_regs[bx]
16763 3D6C           30E4                       xor	ah,ah
16764 3D6E           3B46         F6            cmp	ax,-$A[bp]
16765 3D71           72           5C            jb  	.6E
16766                       00003D73            .6F:
16767                                           ! 2022       {outb(0x3c9,palette[(i*3)+0]);
16768                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16769 3D73           8B46         F6            mov	ax,-$A[bp]
16770 3D76           89C2                       mov	dx,ax
16771 3D78           D1E0                       shl	ax,*1
16772 3D7A           01D0                       add	ax,dx
16773                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16774                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16775 3D7C           0346         FA            add	ax,-6[bp]
16776 3D7F           89C3                       mov	bx,ax
16777                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16778 3D81           8A07                       mov	al,[bx]
16779 3D83           30E4                       xor	ah,ah
16780 3D85           50                         push	ax
16781                                           ! Debug: list int = const $3C9 (used reg = )
16782 3D86           B8                   03C9  mov	ax,#$3C9
16783 3D89           50                         push	ax
16784                                           ! Debug: func () void = outb+0 (used reg = )
16785 3D8A           E8         3FF9            call	_outb
16786 3D8D           83C4                   04  add	sp,*4
16787                                           !BCC_EOS
16788                                           ! 2023        outb(0x3c9,palette[(i*3)+1]);
16789                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16790 3D90           8B46         F6            mov	ax,-$A[bp]
16791 3D93           89C2                       mov	dx,ax
16792 3D95           D1E0                       shl	ax,*1
16793 3D97           01D0                       add	ax,dx
16794                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16795                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16796 3D99           40                         inc	ax
16797 3D9A           0346         FA            add	ax,-6[bp]
16798 3D9D           89C3                       mov	bx,ax
16799                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16800 3D9F           8A07                       mov	al,[bx]
16801 3DA1           30E4                       xor	ah,ah
16802 3DA3           50                         push	ax
16803                                           ! Debug: list int = const $3C9 (used reg = )
16804 3DA4           B8                   03C9  mov	ax,#$3C9
16805 3DA7           50                         push	ax
16806                                           ! Debug: func () void = outb+0 (used reg = )
16807 3DA8           E8         3FDB            call	_outb
16808 3DAB           83C4                   04  add	sp,*4
16809                                           !BCC_EOS
16810                                           ! 2024        outb(0x3c9,palette[(i*3)+2]);
16811                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16812 3DAE           8B46         F6            mov	ax,-$A[bp]
16813 3DB1           89C2                       mov	dx,ax
16814 3DB3           D1E0                       shl	ax,*1
16815 3DB5           01D0                       add	ax,dx
16816                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16817                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16818 3DB7           40                         inc	ax
16819 3DB8           40                         inc	ax
16820 3DB9           0346         FA            add	ax,-6[bp]
16821 3DBC           89C3                       mov	bx,ax
16822                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16823 3DBE           8A07                       mov	al,[bx]
16824 3DC0           30E4                       xor	ah,ah
16825 3DC2           50                         push	ax
16826                                           ! Debug: list int = const $3C9 (used reg = )
16827 3DC3           B8                   03C9  mov	ax,#$3C9
16828 3DC6           50                         push	ax
16829                                           ! Debug: func () void = outb+0 (used reg = )
16830 3DC7           E8         3FBC            call	_outb
16831 3DCA           83C4                   04  add	sp,*4
16832                                           !BCC_EOS
16833                                           ! 2025       }
16834                                           ! 2026      else
16835                                           ! 2027       {outb(0x3c9,0);
16836 3DCD           EB           27            jmp .70
16837                       00003DCF            .6E:
16838                                           ! Debug: list int = const 0 (used reg = )
16839 3DCF           31C0                       xor	ax,ax
16840 3DD1           50                         push	ax
16841                                           ! Debug: list int = const $3C9 (used reg = )
16842 3DD2           B8                   03C9  mov	ax,#$3C9
16843 3DD5           50                         push	ax
16844                                           ! Debug: func () void = outb+0 (used reg = )
16845 3DD6           E8         3FAD            call	_outb
16846 3DD9           83C4                   04  add	sp,*4
16847                                           !BCC_EOS
16848                                           ! 2028        outb(0x3c9,0);
16849                                           ! Debug: list int = const 0 (used reg = )
16850 3DDC           31C0                       xor	ax,ax
16851 3DDE           50                         push	ax
16852                                           ! Debug: list int = const $3C9 (used reg = )
16853 3DDF           B8                   03C9  mov	ax,#$3C9
16854 3DE2           50                         push	ax
16855                                           ! Debug: func () void = outb+0 (used reg = )
16856 3DE3           E8         3FA0            call	_outb
16857 3DE6           83C4                   04  add	sp,*4
16858                                           !BCC_EOS
16859                                           ! 2029        outb(0x3c9,0);
16860                                           ! Debug: list int = const 0 (used reg = )
16861 3DE9           31C0                       xor	ax,ax
16862 3DEB           50                         push	ax
16863                                           ! Debug: list int = const $3C9 (used reg = )
16864 3DEC           B8                   03C9  mov	ax,#$3C9
16865 3DEF           50                         push	ax
16866                                           ! Debug: func () void = outb+0 (used reg = )
16867 3DF0           E8         3F93            call	_outb
16868 3DF3           83C4                   04  add	sp,*4
16869                                           !BCC_EOS
16870                                           ! 2030       }
16871                                           ! 2031     }
16872                       00003DF6            .70:
16873                                           ! 2032    if((modeset_ctl&0x02)==0x02)
16874                       00003DF6            .6B:
16875                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16876 3DF6           8B46         F6            mov	ax,-$A[bp]
16877 3DF9           40                         inc	ax
16878 3DFA           8946         F6            mov	-$A[bp],ax
16879                       00003DFD            .6C:
16880                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16881 3DFD           8B46         F6            mov	ax,-$A[bp]
16882 3E00           3D                   0100  cmp	ax,#$100
16883 3E03         0F82         FF4B            blo 	.6D
16884                       00003E07            .71:
16885                       00003E07            .6A:
16886                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16887 3E07           8A46         EF            mov	al,-$11[bp]
16888 3E0A           24                     02  and	al,*2
16889                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16890 3E0C           3C                     02  cmp	al,*2
16891 3E0E           75           0D            jne 	.72
16892                       00003E10            .73:
16893                                           ! 2033     {
16894                                           ! 2034      biosfn_perform_gray_scale_summing(0x00, 0x100);
16895                                           ! Debug: list int = const $100 (used reg = )
16896 3E10           B8                   0100  mov	ax,#$100
16897 3E13           50                         push	ax
16898                                           ! Debug: list int = const 0 (used reg = )
16899 3E14           31C0                       xor	ax,ax
16900 3E16           50                         push	ax
16901                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16902 3E17           E8         273A            call	_biosfn_perform_gray_scale_summing
16903 3E1A           83C4                   04  add	sp,*4
16904                                           !BCC_EOS
16905                                           ! 2035     }
16906                                           ! 2036   }
16907                       00003E1D            .72:
16908                                           ! 2037  inb(0x3da);
16909                       00003E1D            .61:
16910                                           ! Debug: list int = const $3DA (used reg = )
16911 3E1D           B8                   03DA  mov	ax,#$3DA
16912 3E20           50                         push	ax
16913                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16914 3E21           E8         3F4C            call	_inb
16915 3E24           44                         inc	sp
16916 3E25           44                         inc	sp
16917                                           !BCC_EOS
16918                                           ! 2038  for(i=0;i<=0x13;i++)
16919                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16920 3E26           31C0                       xor	ax,ax
16921 3E28           8946         F6            mov	-$A[bp],ax
16922                                           !BCC_EOS
16923                                           !BCC_EOS
16924                                           ! 2039   {outb(0x3c0,i);
16925 3E2B           EB           38            jmp .76
16926                       00003E2D            .77:
16927                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16928 3E2D           FF76         F6            push	-$A[bp]
16929                                           ! Debug: list int = const $3C0 (used reg = )
16930 3E30           B8                   03C0  mov	ax,#$3C0
16931 3E33           50                         push	ax
16932                                           ! Debug: func () void = outb+0 (used reg = )
16933 3E34           E8         3F4F            call	_outb
16934 3E37           83C4                   04  add	sp,*4
16935                                           !BCC_EOS
16936                                           ! 2040    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16937                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16938 3E3A           8A46         F9            mov	al,-7[bp]
16939 3E3D           30E4                       xor	ah,ah
16940 3E3F           B1                     06  mov	cl,*6
16941 3E41           D3E0                       shl	ax,cl
16942 3E43           89C3                       mov	bx,ax
16943 3E45           81C3                 029F  add	bx,#_video_param_table
16944                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16945 3E49           8B46         F6            mov	ax,-$A[bp]
16946 3E4C           01C3                       add	bx,ax
16947                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16948 3E4E           8A47         23            mov	al,$23[bx]
16949 3E51           30E4                       xor	ah,ah
16950 3E53           50                         push	ax
16951                                           ! Debug: list int = const $3C0 (used reg = )
16952 3E54           B8                   03C0  mov	ax,#$3C0
16953 3E57           50                         push	ax
16954                                           ! Debug: func () void = outb+0 (used reg = )
16955 3E58           E8         3F2B            call	_outb
16956 3E5B           83C4                   04  add	sp,*4
16957                                           !BCC_EOS
16958                                           ! 2041   }
16959                                           ! 2042  outb(0x3c0,0x14);
16960                       00003E5E            .75:
16961                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16962 3E5E           8B46         F6            mov	ax,-$A[bp]
16963 3E61           40                         inc	ax
16964 3E62           8946         F6            mov	-$A[bp],ax
16965                       00003E65            .76:
16966                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16967 3E65           8B46         F6            mov	ax,-$A[bp]
16968 3E68           3D                   0013  cmp	ax,*$13
16969 3E6B           76           C0            jbe	.77
16970                       00003E6D            .78:
16971                       00003E6D            .74:
16972                                           ! Debug: list int = const $14 (used reg = )
16973 3E6D           B8                   0014  mov	ax,*$14
16974 3E70           50                         push	ax
16975                                           ! Debug: list int = const $3C0 (used reg = )
16976 3E71           B8                   03C0  mov	ax,#$3C0
16977 3E74           50                         push	ax
16978                                           ! Debug: func () void = outb+0 (used reg = )
16979 3E75           E8         3F0E            call	_outb
16980 3E78           83C4                   04  add	sp,*4
16981                                           !BCC_EOS
16982                                           ! 2043  outb(0x3c0,0x00);
16983                                           ! Debug: list int = const 0 (used reg = )
16984 3E7B           31C0                       xor	ax,ax
16985 3E7D           50                         push	ax
16986                                           ! Debug: list int = const $3C0 (used reg = )
16987 3E7E           B8                   03C0  mov	ax,#$3C0
16988 3E81           50                         push	ax
16989                                           ! Debug: func () void = outb+0 (used reg = )
16990 3E82           E8         3F01            call	_outb
16991 3E85           83C4                   04  add	sp,*4
16992                                           !BCC_EOS
16993                                           ! 2044  outb(0x3c4,0);
16994                                           ! Debug: list int = const 0 (used reg = )
16995 3E88           31C0                       xor	ax,ax
16996 3E8A           50                         push	ax
16997                                           ! Debug: list int = const $3C4 (used reg = )
16998 3E8B           B8                   03C4  mov	ax,#$3C4
16999 3E8E           50                         push	ax
17000                                           ! Debug: func () void = outb+0 (used reg = )
17001 3E8F           E8         3EF4            call	_outb
17002 3E92           83C4                   04  add	sp,*4
17003                                           !BCC_EOS
17004                                           ! 2045  outb(0x3c5,0x03);
17005                                           ! Debug: list int = const 3 (used reg = )
17006 3E95           B8                   0003  mov	ax,*3
17007 3E98           50                         push	ax
17008                                           ! Debug: list int = const $3C5 (used reg = )
17009 3E99           B8                   03C5  mov	ax,#$3C5
17010 3E9C           50                         push	ax
17011                                           ! Debug: func () void = outb+0 (used reg = )
17012 3E9D           E8         3EE6            call	_outb
17013 3EA0           83C4                   04  add	sp,*4
17014                                           !BCC_EOS
17015                                           ! 2046  for(i=1;i<=4;i++)
17016                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
17017 3EA3           B8                   0001  mov	ax,*1
17018 3EA6           8946         F6            mov	-$A[bp],ax
17019                                           !BCC_EOS
17020                                           !BCC_EOS
17021                                           ! 2047   {outb(0x3c4,i);
17022 3EA9           EB           3F            jmp .7B
17023                       00003EAB            .7C:
17024                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17025 3EAB           FF76         F6            push	-$A[bp]
17026                                           ! Debug: list int = const $3C4 (used reg = )
17027 3EAE           B8                   03C4  mov	ax,#$3C4
17028 3EB1           50                         push	ax
17029                                           ! Debug: func () void = outb+0 (used reg = )
17030 3EB2           E8         3ED1            call	_outb
17031 3EB5           83C4                   04  add	sp,*4
17032                                           !BCC_EOS
17033                                           ! 2048    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
17034                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
17035 3EB8           8B46         F6            mov	ax,-$A[bp]
17036 3EBB           48                         dec	ax
17037 3EBC           50                         push	ax
17038                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
17039 3EBD           8A46         F9            mov	al,-7[bp]
17040 3EC0           30E4                       xor	ah,ah
17041 3EC2           B1                     06  mov	cl,*6
17042 3EC4           D3E0                       shl	ax,cl
17043 3EC6           89C3                       mov	bx,ax
17044 3EC8           81C3                 029F  add	bx,#_video_param_table
17045                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
17046 3ECC           8B46         E8            mov	ax,-$18[bp]
17047 3ECF           01C3                       add	bx,ax
17048 3ED1           44                         inc	sp
17049 3ED2           44                         inc	sp
17050                                           ! Debug: list unsigned char = [bx+5] (used reg = )
17051 3ED3           8A47         05            mov	al,5[bx]
17052 3ED6           30E4                       xor	ah,ah
17053 3ED8           50                         push	ax
17054                                           ! Debug: list int = const $3C5 (used reg = )
17055 3ED9           B8                   03C5  mov	ax,#$3C5
17056 3EDC           50                         push	ax
17057                                           ! Debug: func () void = outb+0 (used reg = )
17058 3EDD           E8         3EA6            call	_outb
17059 3EE0           83C4                   04  add	sp,*4
17060                                           !BCC_EOS
17061                                           ! 2049   }
17062                                           ! 2050  for(i=0;i<=8;i++)
17063                       00003EE3            .7A:
17064                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17065 3EE3           8B46         F6            mov	ax,-$A[bp]
17066 3EE6           40                         inc	ax
17067 3EE7           8946         F6            mov	-$A[bp],ax
17068                       00003EEA            .7B:
17069                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
17070 3EEA           8B46         F6            mov	ax,-$A[bp]
17071 3EED           3D                   0004  cmp	ax,*4
17072 3EF0           76           B9            jbe	.7C
17073                       00003EF2            .7D:
17074                       00003EF2            .79:
17075                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17076 3EF2           31C0                       xor	ax,ax
17077 3EF4           8946         F6            mov	-$A[bp],ax
17078                                           !BCC_EOS
17079                                           !BCC_EOS
17080                                           ! 2051   {outb(0x3ce,i);
17081 3EF7           EB           38            jmp .80
17082                       00003EF9            .81:
17083                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17084 3EF9           FF76         F6            push	-$A[bp]
17085                                           ! Debug: list int = const $3CE (used reg = )
17086 3EFC           B8                   03CE  mov	ax,#$3CE
17087 3EFF           50                         push	ax
17088                                           ! Debug: func () void = outb+0 (used reg = )
17089 3F00           E8         3E83            call	_outb
17090 3F03           83C4                   04  add	sp,*4
17091                                           !BCC_EOS
17092                                           ! 2052    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
17093                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17094 3F06           8A46         F9            mov	al,-7[bp]
17095 3F09           30E4                       xor	ah,ah
17096 3F0B           B1                     06  mov	cl,*6
17097 3F0D           D3E0                       shl	ax,cl
17098 3F0F           89C3                       mov	bx,ax
17099 3F11           81C3                 029F  add	bx,#_video_param_table
17100                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
17101 3F15           8B46         F6            mov	ax,-$A[bp]
17102 3F18           01C3                       add	bx,ax
17103                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
17104 3F1A           8A47         37            mov	al,$37[bx]
17105 3F1D           30E4                       xor	ah,ah
17106 3F1F           50                         push	ax
17107                                           ! Debug: list int = const $3CF (used reg = )
17108 3F20           B8                   03CF  mov	ax,#$3CF
17109 3F23           50                         push	ax
17110                                           ! Debug: func () void = outb+0 (used reg = )
17111 3F24           E8         3E5F            call	_outb
17112 3F27           83C4                   04  add	sp,*4
17113                                           !BCC_EOS
17114                                           ! 2053   }
17115                                           ! 2054  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
17116                       00003F2A            .7F:
17117                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17118 3F2A           8B46         F6            mov	ax,-$A[bp]
17119 3F2D           40                         inc	ax
17120 3F2E           8946         F6            mov	-$A[bp],ax
17121                       00003F31            .80:
17122                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17123 3F31           8B46         F6            mov	ax,-$A[bp]
17124 3F34           3D                   0008  cmp	ax,*8
17125 3F37           76           C0            jbe	.81
17126                       00003F39            .82:
17127                       00003F39            .7E:
17128                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17129 3F39           8A46         FE            mov	al,-2[bp]
17130 3F3C           30E4                       xor	ah,ah
17131 3F3E           B1                     03  mov	cl,*3
17132 3F40           D3E0                       shl	ax,cl
17133 3F42           89C3                       mov	bx,ax
17134 3F44           81C3                 020B  add	bx,#_vga_modes
17135                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17136 3F48           8A47         02            mov	al,2[bx]
17137 3F4B           3C                     01  cmp	al,*1
17138 3F4D           75           05            jne 	.83
17139                       00003F4F            .84:
17140 3F4F           B8                   03B4  mov	ax,#$3B4
17141 3F52           EB           03            jmp .85
17142                       00003F54            .83:
17143 3F54           B8                   03D4  mov	ax,#$3D4
17144                       00003F57            .85:
17145                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17146 3F57           8946         EA            mov	-$16[bp],ax
17147                                           !BCC_EOS
17148                                           ! 2055  outw(crtc_addr,0x0011);
17149                                           ! Debug: list int = const $11 (used reg = )
17150 3F5A           B8                   0011  mov	ax,*$11
17151 3F5D           50                         push	ax
17152                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17153 3F5E           FF76         EA            push	-$16[bp]
17154                                           ! Debug: func () void = outw+0 (used reg = )
17155 3F61           E8         3E32            call	_outw
17156 3F64           83C4                   04  add	sp,*4
17157                                           !BCC_EOS
17158                                           ! 2056  for(i=0;i<=0x18;i++)
17159                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17160 3F67           31C0                       xor	ax,ax
17161 3F69           8946         F6            mov	-$A[bp],ax
17162                                           !BCC_EOS
17163                                           !BCC_EOS
17164                                           ! 2057   {outb(crtc_addr,i);
17165 3F6C           EB           38            jmp .88
17166                       00003F6E            .89:
17167                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17168 3F6E           FF76         F6            push	-$A[bp]
17169                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17170 3F71           FF76         EA            push	-$16[bp]
17171                                           ! Debug: func () void = outb+0 (used reg = )
17172 3F74           E8         3E0F            call	_outb
17173 3F77           83C4                   04  add	sp,*4
17174                                           !BCC_EOS
17175                                           ! 2058    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17176                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17177 3F7A           8A46         F9            mov	al,-7[bp]
17178 3F7D           30E4                       xor	ah,ah
17179 3F7F           B1                     06  mov	cl,*6
17180 3F81           D3E0                       shl	ax,cl
17181 3F83           89C3                       mov	bx,ax
17182 3F85           81C3                 029F  add	bx,#_video_param_table
17183                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17184 3F89           8B46         F6            mov	ax,-$A[bp]
17185 3F8C           01C3                       add	bx,ax
17186                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17187 3F8E           8A47         0A            mov	al,$A[bx]
17188 3F91           30E4                       xor	ah,ah
17189 3F93           50                         push	ax
17190                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17191 3F94           8B46         EA            mov	ax,-$16[bp]
17192                                           ! Debug: list unsigned int = ax+1 (used reg = )
17193 3F97           40                         inc	ax
17194 3F98           50                         push	ax
17195                                           ! Debug: func () void = outb+0 (used reg = )
17196 3F99           E8         3DEA            call	_outb
17197 3F9C           83C4                   04  add	sp,*4
17198                                           !BCC_EOS
17199                                           ! 2059   }
17200                                           ! 2060  
17201                                           ! 2060 outb(0x3c2,video_param_table[vpti].miscreg);
17202                       00003F9F            .87:
17203                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17204 3F9F           8B46         F6            mov	ax,-$A[bp]
17205 3FA2           40                         inc	ax
17206 3FA3           8946         F6            mov	-$A[bp],ax
17207                       00003FA6            .88:
17208                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17209 3FA6           8B46         F6            mov	ax,-$A[bp]
17210 3FA9           3D                   0018  cmp	ax,*$18
17211 3FAC           76           C0            jbe	.89
17212                       00003FAE            .8A:
17213                       00003FAE            .86:
17214                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17215 3FAE           8A46         F9            mov	al,-7[bp]
17216 3FB1           30E4                       xor	ah,ah
17217 3FB3           B1                     06  mov	cl,*6
17218 3FB5           D3E0                       shl	ax,cl
17219 3FB7           89C3                       mov	bx,ax
17220 3FB9           81C3                 029F  add	bx,#_video_param_table
17221                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17222 3FBD           8A47         09            mov	al,9[bx]
17223 3FC0           30E4                       xor	ah,ah
17224 3FC2           50                         push	ax
17225                                           ! Debug: list int = const $3C2 (used reg = )
17226 3FC3           B8                   03C2  mov	ax,#$3C2
17227 3FC6           50                         push	ax
17228                                           ! Debug: func () void = outb+0 (used reg = )
17229 3FC7           E8         3DBC            call	_outb
17230 3FCA           83C4                   04  add	sp,*4
17231                                           !BCC_EOS
17232                                           ! 2061  outb(0x3c0,0x20);
17233                                           ! Debug: list int = const $20 (used reg = )
17234 3FCD           B8                   0020  mov	ax,*$20
17235 3FD0           50                         push	ax
17236                                           ! Debug: list int = const $3C0 (used reg = )
17237 3FD1           B8                   03C0  mov	ax,#$3C0
17238 3FD4           50                         push	ax
17239                                           ! Debug: func () void = outb+0 (used reg = )
17240 3FD5           E8         3DAE            call	_outb
17241 3FD8           83C4                   04  add	sp,*4
17242                                           !BCC_EOS
17243                                           ! 2062  inb(0x3da);
17244                                           ! Debug: list int = const $3DA (used reg = )
17245 3FDB           B8                   03DA  mov	ax,#$3DA
17246 3FDE           50                         push	ax
17247                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17248 3FDF           E8         3D8E            call	_inb
17249 3FE2           44                         inc	sp
17250 3FE3           44                         inc	sp
17251                                           !BCC_EOS
17252                                           ! 2063  if(noclearmem==0x00)
17253                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17254 3FE4           8A46         FF            mov	al,-1[bp]
17255 3FE7           84C0                       test	al,al
17256 3FE9         0F85         00C1            bne 	.8B
17257                       00003FED            .8C:
17258                                           ! 2064   {
17259                                           ! 2065    if(vga_modes[line].class==0x00)
17260                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17261 3FED           8A46         FE            mov	al,-2[bp]
17262 3FF0           30E4                       xor	ah,ah
17263 3FF2           B1                     03  mov	cl,*3
17264 3FF4           D3E0                       shl	ax,cl
17265 3FF6           89C3                       mov	bx,ax
17266 3FF8           81C3                 020B  add	bx,#_vga_modes
17267                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17268 3FFC           8A47         01            mov	al,1[bx]
17269 3FFF           84C0                       test	al,al
17270 4001           75           26            jne 	.8D
17271                       00004003            .8E:
17272                                           ! 2066     {
17273                                           ! 2067      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17274                                           ! Debug: list int = const $4000 (used reg = )
17275 4003           B8                   4000  mov	ax,#$4000
17276 4006           50                         push	ax
17277                                           ! Debug: list int = const $720 (used reg = )
17278 4007           B8                   0720  mov	ax,#$720
17279 400A           50                         push	ax
17280                                           ! Debug: list int = const 0 (used reg = )
17281 400B           31C0                       xor	ax,ax
17282 400D           50                         push	ax
17283                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17284 400E           8A46         FE            mov	al,-2[bp]
17285 4011           30E4                       xor	ah,ah
17286 4013           B1                     03  mov	cl,*3
17287 4015           D3E0                       shl	ax,cl
17288 4017           89C3                       mov	bx,ax
17289 4019           81C3                 020B  add	bx,#_vga_modes
17290                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17291 401D           FF77         04            push	4[bx]
17292                                           ! Debug: func () void = memsetw+0 (used reg = )
17293 4020           E8         3C72            call	_memsetw
17294 4023           83C4                   08  add	sp,*8
17295                                           !BCC_EOS
17296                                           ! 2068     }
17297                                           ! 2069    else
17298                                           ! 2070     {
17299 4026           E9         0085            br 	.8F
17300                       00004029            .8D:
17301                                           ! 2071      if(mode<0x0d)
17302                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17303 4029           8A46         04            mov	al,4[bp]
17304 402C           3C                     0D  cmp	al,*$D
17305 402E           73           24            jae 	.90
17306                       00004030            .91:
17307                                           ! 2072       {
17308                                           ! 2073        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17309                                           ! Debug: list int = const $4000 (used reg = )
17310 4030           B8                   4000  mov	ax,#$4000
17311 4033           50                         push	ax
17312                                           ! Debug: list int = const 0 (used reg = )
17313 4034           31C0                       xor	ax,ax
17314 4036           50                         push	ax
17315                                           ! Debug: list int = const 0 (used reg = )
17316 4037           31C0                       xor	ax,ax
17317 4039           50                         push	ax
17318                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17319 403A           8A46         FE            mov	al,-2[bp]
17320 403D           30E4                       xor	ah,ah
17321 403F           B1                     03  mov	cl,*3
17322 4041           D3E0                       shl	ax,cl
17323 4043           89C3                       mov	bx,ax
17324 4045           81C3                 020B  add	bx,#_vga_modes
17325                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17326 4049           FF77         04            push	4[bx]
17327                                           ! Debug: func () void = memsetw+0 (used reg = )
17328 404C           E8         3C46            call	_memsetw
17329 404F           83C4                   08  add	sp,*8
17330                                           !BCC_EOS
17331                                           ! 2074       }
17332                                           ! 2075      else
17333                                           ! 2076       {
17334 4052           EB           5A            jmp .92
17335                       00004054            .90:
17336                                           ! 2077        outb( 0x3c4, 0x02 );
17337                                           ! Debug: list int = const 2 (used reg = )
17338 4054           B8                   0002  mov	ax,*2
17339 4057           50                         push	ax
17340                                           ! Debug: list int = const $3C4 (used reg = )
17341 4058           B8                   03C4  mov	ax,#$3C4
17342 405B           50                         push	ax
17343                                           ! Debug: func () void = outb+0 (used reg = )
17344 405C           E8         3D27            call	_outb
17345 405F           83C4                   04  add	sp,*4
17346                                           !BCC_EOS
17347                                           ! 2078        mmask = inb( 0x3c5 );
17348                                           ! Debug: list int = const $3C5 (used reg = )
17349 4062           B8                   03C5  mov	ax,#$3C5
17350 4065           50                         push	ax
17351                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17352 4066           E8         3D07            call	_inb
17353 4069           44                         inc	sp
17354 406A           44                         inc	sp
17355                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17356 406B           8846         FD            mov	-3[bp],al
17357                                           !BCC_EOS
17358                                           ! 2079        outb( 0x3c5, 0x0f );
17359                                           ! Debug: list int = const $F (used reg = )
17360 406E           B8                   000F  mov	ax,*$F
17361 4071           50                         push	ax
17362                                           ! Debug: list int = const $3C5 (used reg = )
17363 4072           B8                   03C5  mov	ax,#$3C5
17364 4075           50                         push	ax
17365                                           ! Debug: func () void = outb+0 (used reg = )
17366 4076           E8         3D0D            call	_outb
17367 4079           83C4                   04  add	sp,*4
17368                                           !BCC_EOS
17369                                           ! 2080        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17370                                           ! Debug: list unsigned int = const $8000 (used reg = )
17371 407C           B8                   8000  mov	ax,#$8000
17372 407F           50                         push	ax
17373                                           ! Debug: list int = const 0 (used reg = )
17374 4080           31C0                       xor	ax,ax
17375 4082           50                         push	ax
17376                                           ! Debug: list int = const 0 (used reg = )
17377 4083           31C0                       xor	ax,ax
17378 4085           50                         push	ax
17379                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17380 4086           8A46         FE            mov	al,-2[bp]
17381 4089           30E4                       xor	ah,ah
17382 408B           B1                     03  mov	cl,*3
17383 408D           D3E0                       shl	ax,cl
17384 408F           89C3                       mov	bx,ax
17385 4091           81C3                 020B  add	bx,#_vga_modes
17386                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17387 4095           FF77         04            push	4[bx]
17388                                           ! Debug: func () void = memsetw+0 (used reg = )
17389 4098           E8         3BFA            call	_memsetw
17390 409B           83C4                   08  add	sp,*8
17391                                           !BCC_EOS
17392                                           ! 2081        outb( 0x3c5, mmask );
17393                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17394 409E           8A46         FD            mov	al,-3[bp]
17395 40A1           30E4                       xor	ah,ah
17396 40A3           50                         push	ax
17397                                           ! Debug: list int = const $3C5 (used reg = )
17398 40A4           B8                   03C5  mov	ax,#$3C5
17399 40A7           50                         push	ax
17400                                           ! Debug: func () void = outb+0 (used reg = )
17401 40A8           E8         3CDB            call	_outb
17402 40AB           83C4                   04  add	sp,*4
17403                                           !BCC_EOS
17404                                           ! 2082       }
17405                                           ! 2083     }
17406                       000040AE            .92:
17407                                           ! 2084   }
17408                       000040AE            .8F:
17409                                           ! 2085  write_byte(0x40,0x49,mode);
17410                       000040AE            .8B:
17411                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17412 40AE           8A46         04            mov	al,4[bp]
17413 40B1           30E4                       xor	ah,ah
17414 40B3           50                         push	ax
17415                                           ! Debug: list int = const $49 (used reg = )
17416 40B4           B8                   0049  mov	ax,*$49
17417 40B7           50                         push	ax
17418                                           ! Debug: list int = const $40 (used reg = )
17419 40B8           B8                   0040  mov	ax,*$40
17420 40BB           50                         push	ax
17421                                           ! Debug: func () void = write_byte+0 (used reg = )
17422 40BC           E8         3C81            call	_write_byte
17423 40BF           83C4                   06  add	sp,*6
17424                                           !BCC_EOS
17425                                           ! 2086  write_word(0x40,0x4A,twidth);
17426                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17427 40C2           FF76         F4            push	-$C[bp]
17428                                           ! Debug: list int = const $4A (used reg = )
17429 40C5           B8                   004A  mov	ax,*$4A
17430 40C8           50                         push	ax
17431                                           ! Debug: list int = const $40 (used reg = )
17432 40C9           B8                   0040  mov	ax,*$40
17433 40CC           50                         push	ax
17434                                           ! Debug: func () void = write_word+0 (used reg = )
17435 40CD           E8         3C88            call	_write_word
17436 40D0           83C4                   06  add	sp,*6
17437                                           !BCC_EOS
17438                                           ! 2087  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17439                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17440 40D3           8A46         F9            mov	al,-7[bp]
17441 40D6           30E4                       xor	ah,ah
17442 40D8           B1                     06  mov	cl,*6
17443 40DA           D3E0                       shl	ax,cl
17444 40DC           89C3                       mov	bx,ax
17445 40DE           81C3                 029F  add	bx,#_video_param_table
17446                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17447                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17448                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17449 40E2           FF77         03            push	3[bx]
17450                                           ! Debug: list int = const $4C (used reg = )
17451 40E5           B8                   004C  mov	ax,*$4C
17452 40E8           50                         push	ax
17453                                           ! Debug: list int = const $40 (used reg = )
17454 40E9           B8                   0040  mov	ax,*$40
17455 40EC           50                         push	ax
17456                                           ! Debug: func () void = write_word+0 (used reg = )
17457 40ED           E8         3C68            call	_write_word
17458 40F0           83C4                   06  add	sp,*6
17459                                           !BCC_EOS
17460                                           ! 2088  write_word(0x40,0x63,crtc_addr);
17461                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17462 40F3           FF76         EA            push	-$16[bp]
17463                                           ! Debug: list int = const $63 (used reg = )
17464 40F6           B8                   0063  mov	ax,*$63
17465 40F9           50                         push	ax
17466                                           ! Debug: list int = const $40 (used reg = )
17467 40FA           B8                   0040  mov	ax,*$40
17468 40FD           50                         push	ax
17469                                           ! Debug: func () void = write_word+0 (used reg = )
17470 40FE           E8         3C57            call	_write_word
17471 4101           83C4                   06  add	sp,*6
17472                                           !BCC_EOS
17473                                           ! 2089  write_byte(0x40,0x84,theightm1);
17474                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17475 4104           FF76         F2            push	-$E[bp]
17476                                           ! Debug: list int = const $84 (used reg = )
17477 4107           B8                   0084  mov	ax,#$84
17478 410A           50                         push	ax
17479                                           ! Debug: list int = const $40 (used reg = )
17480 410B           B8                   0040  mov	ax,*$40
17481 410E           50                         push	ax
17482                                           ! Debug: func () void = write_byte+0 (used reg = )
17483 410F           E8         3C2E            call	_write_byte
17484 4112           83C4                   06  add	sp,*6
17485                                           !BCC_EOS
17486                                           ! 2090  write_word(0x40,0x85,cheight);
17487                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17488 4115           FF76         F0            push	-$10[bp]
17489                                           ! Debug: list int = const $85 (used reg = )
17490 4118           B8                   0085  mov	ax,#$85
17491 411B           50                         push	ax
17492                                           ! Debug: list int = const $40 (used reg = )
17493 411C           B8                   0040  mov	ax,*$40
17494 411F           50                         push	ax
17495                                           ! Debug: func () void = write_word+0 (used reg = )
17496 4120           E8         3C35            call	_write_word
17497 4123           83C4                   06  add	sp,*6
17498                                           !BCC_EOS
17499                                           ! 2091  write_byte(0x40,0x87,(0x60|noclearmem));
17500                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17501                                           ! Debug: expression subtree swapping
17502 4126           8A46         FF            mov	al,-1[bp]
17503 4129           0C                     60  or	al,*$60
17504                                           ! Debug: list unsigned char = al+0 (used reg = )
17505 412B           30E4                       xor	ah,ah
17506 412D           50                         push	ax
17507                                           ! Debug: list int = const $87 (used reg = )
17508 412E           B8                   0087  mov	ax,#$87
17509 4131           50                         push	ax
17510                                           ! Debug: list int = const $40 (used reg = )
17511 4132           B8                   0040  mov	ax,*$40
17512 4135           50                         push	ax
17513                                           ! Debug: func () void = write_byte+0 (used reg = )
17514 4136           E8         3C07            call	_write_byte
17515 4139           83C4                   06  add	sp,*6
17516                                           !BCC_EOS
17517                                           ! 2092  write_byte(0x40,0x88,0xF9);
17518                                           ! Debug: list int = const $F9 (used reg = )
17519 413C           B8                   00F9  mov	ax,#$F9
17520 413F           50                         push	ax
17521                                           ! Debug: list int = const $88 (used reg = )
17522 4140           B8                   0088  mov	ax,#$88
17523 4143           50                         push	ax
17524                                           ! Debug: list int = const $40 (used reg = )
17525 4144           B8                   0040  mov	ax,*$40
17526 4147           50                         push	ax
17527                                           ! Debug: func () void = write_byte+0 (used reg = )
17528 4148           E8         3BF5            call	_write_byte
17529 414B           83C4                   06  add	sp,*6
17530                                           !BCC_EOS
17531                                           ! 2093  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17532                                           ! Debug: list int = const $89 (used reg = )
17533 414E           B8                   0089  mov	ax,#$89
17534 4151           50                         push	ax
17535                                           ! Debug: list int = const $40 (used reg = )
17536 4152           B8                   0040  mov	ax,*$40
17537 4155           50                         push	ax
17538                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17539 4156           E8         3BC1            call	_read_byte
17540 4159           83C4                   04  add	sp,*4
17541                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17542 415C           24                     7F  and	al,*$7F
17543                                           ! Debug: list unsigned char = al+0 (used reg = )
17544 415E           30E4                       xor	ah,ah
17545 4160           50                         push	ax
17546                                           ! Debug: list int = const $89 (used reg = )
17547 4161           B8                   0089  mov	ax,#$89
17548 4164           50                         push	ax
17549                                           ! Debug: list int = const $40 (used reg = )
17550 4165           B8                   0040  mov	ax,*$40
17551 4168           50                         push	ax
17552                                           ! Debug: func () void = write_byte+0 (used reg = )
17553 4169           E8         3BD4            call	_write_byte
17554 416C           83C4                   06  add	sp,*6
17555                                           !BCC_EOS
17556                                           ! 2094  write_byte(0x40,0x8A,0x08);
17557                                           ! Debug: list int = const 8 (used reg = )
17558 416F           B8                   0008  mov	ax,*8
17559 4172           50                         push	ax
17560                                           ! Debug: list int = const $8A (used reg = )
17561 4173           B8                   008A  mov	ax,#$8A
17562 4176           50                         push	ax
17563                                           ! Debug: list int = const $40 (used reg = )
17564 4177           B8                   0040  mov	ax,*$40
17565 417A           50                         push	ax
17566                                           ! Debug: func () void = write_byte+0 (used reg = )
17567 417B           E8         3BC2            call	_write_byte
17568 417E           83C4                   06  add	sp,*6
17569                                           !BCC_EOS
17570                                           ! 2095  write_word(0x40,0xA8, video_save_pointer_table);
17571                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17572 4181           BB                   3608  mov	bx,#_video_save_pointer_table
17573 4184           53                         push	bx
17574                                           ! Debug: list int = const $A8 (used reg = )
17575 4185           B8                   00A8  mov	ax,#$A8
17576 4188           50                         push	ax
17577                                           ! Debug: list int = const $40 (used reg = )
17578 4189           B8                   0040  mov	ax,*$40
17579 418C           50                         push	ax
17580                                           ! Debug: func () void = write_word+0 (used reg = )
17581 418D           E8         3BC8            call	_write_word
17582 4190           83C4                   06  add	sp,*6
17583                                           !BCC_EOS
17584                                           ! 2096  write_word(0x40,0xA8 +2, 0xc000);
17585                                           ! Debug: list unsigned int = const $C000 (used reg = )
17586 4193           B8                   C000  mov	ax,#$C000
17587 4196           50                         push	ax
17588                                           ! Debug: list int = const $AA (used reg = )
17589 4197           B8                   00AA  mov	ax,#$AA
17590 419A           50                         push	ax
17591                                           ! Debug: list int = const $40 (used reg = )
17592 419B           B8                   0040  mov	ax,*$40
17593 419E           50                         push	ax
17594                                           ! Debug: func () void = write_word+0 (used reg = )
17595 419F           E8         3BB6            call	_write_word
17596 41A2           83C4                   06  add	sp,*6
17597                                           !BCC_EOS
17598                                           ! 2097  write_byte(0x40,0x65,0x00);
17599                                           ! Debug: list int = const 0 (used reg = )
17600 41A5           31C0                       xor	ax,ax
17601 41A7           50                         push	ax
17602                                           ! Debug: list int = const $65 (used reg = )
17603 41A8           B8                   0065  mov	ax,*$65
17604 41AB           50                         push	ax
17605                                           ! Debug: list int = const $40 (used reg = )
17606 41AC           B8                   0040  mov	ax,*$40
17607 41AF           50                         push	ax
17608                                           ! Debug: func () void = write_byte+0 (used reg = )
17609 41B0           E8         3B8D            call	_write_byte
17610 41B3           83C4                   06  add	sp,*6
17611                                           !BCC_EOS
17612                                           ! 2098  write_byte(0x40,0x66,0x00);
17613                                           ! Debug: list int = const 0 (used reg = )
17614 41B6           31C0                       xor	ax,ax
17615 41B8           50                         push	ax
17616                                           ! Debug: list int = const $66 (used reg = )
17617 41B9           B8                   0066  mov	ax,*$66
17618 41BC           50                         push	ax
17619                                           ! Debug: list int = const $40 (used reg = )
17620 41BD           B8                   0040  mov	ax,*$40
17621 41C0           50                         push	ax
17622                                           ! Debug: func () void = write_byte+0 (used reg = )
17623 41C1           E8         3B7C            call	_write_byte
17624 41C4           83C4                   06  add	sp,*6
17625                                           !BCC_EOS
17626                                           ! 2099  if(vga_modes[line].class==0x00)
17627                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17628 41C7           8A46         FE            mov	al,-2[bp]
17629 41CA           30E4                       xor	ah,ah
17630 41CC           B1                     03  mov	cl,*3
17631 41CE           D3E0                       shl	ax,cl
17632 41D0           89C3                       mov	bx,ax
17633 41D2           81C3                 020B  add	bx,#_vga_modes
17634                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17635 41D6           8A47         01            mov	al,1[bx]
17636 41D9           84C0                       test	al,al
17637 41DB           75           0E            jne 	.93
17638                       000041DD            .94:
17639                                           ! 2100   {
17640                                           ! 2101    biosfn_set_cursor_shape(0x06,0x07);
17641                                           ! Debug: list int = const 7 (used reg = )
17642 41DD           B8                   0007  mov	ax,*7
17643 41E0           50                         push	ax
17644                                           ! Debug: list int = const 6 (used reg = )
17645 41E1           B8                   0006  mov	ax,*6
17646 41E4           50                         push	ax
17647                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17648 41E5           E8         00BA            call	_biosfn_set_cursor_shape
17649 41E8           83C4                   04  add	sp,*4
17650                                           !BCC_EOS
17651                                           ! 2102   }
17652                                           ! 2103  for(i=0;i<8;i++)
17653                       000041EB            .93:
17654                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17655 41EB           31C0                       xor	ax,ax
17656 41ED           8946         F6            mov	-$A[bp],ax
17657                                           !BCC_EOS
17658                                           !BCC_EOS
17659                                           ! 2104   biosfn_set_cursor_pos(i,0x0000);
17660 41F0           EB           13            jmp .97
17661                       000041F2            .98:
17662                                           ! Debug: list int = const 0 (used reg = )
17663 41F2           31C0                       xor	ax,ax
17664 41F4           50                         push	ax
17665                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17666 41F5           FF76         F6            push	-$A[bp]
17667                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17668 41F8           E8         01C2            call	_biosfn_set_cursor_pos
17669 41FB           83C4                   04  add	sp,*4
17670                                           !BCC_EOS
17671                                           ! 2105  biosfn_set_active_page(0x00);
17672                       000041FE            .96:
17673                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17674 41FE           8B46         F6            mov	ax,-$A[bp]
17675 4201           40                         inc	ax
17676 4202           8946         F6            mov	-$A[bp],ax
17677                       00004205            .97:
17678                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17679 4205           8B46         F6            mov	ax,-$A[bp]
17680 4208           3D                   0008  cmp	ax,*8
17681 420B           72           E5            jb 	.98
17682                       0000420D            .99:
17683                       0000420D            .95:
17684                                           ! Debug: list int = const 0 (used reg = )
17685 420D           31C0                       xor	ax,ax
17686 420F           50                         push	ax
17687                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17688 4210           E8         031F            call	_biosfn_set_active_page
17689 4213           44                         inc	sp
17690 4214           44                         inc	sp
17691                                           !BCC_EOS
17692                                           ! 2106  if(vga_modes[line].class==0x00)
17693                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17694 4215           8A46         FE            mov	al,-2[bp]
17695 4218           30E4                       xor	ah,ah
17696 421A           B1                     03  mov	cl,*3
17697 421C           D3E0                       shl	ax,cl
17698 421E           89C3                       mov	bx,ax
17699 4220           81C3                 020B  add	bx,#_vga_modes
17700                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17701 4224           8A47         01            mov	al,1[bx]
17702 4227           84C0                       test	al,al
17703 4229           75           0E            jne 	.9A
17704                       0000422B            .9B:
17705                                           ! 2107   {
17706                                           ! 2108 #asm
17707                                           !BCC_EOS
17708                                           !BCC_ASM
17709                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17710                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17711                       00000008            _biosfn_set_video_mode.theightm1	set	8
17712                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17713                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17714                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17715                       00000014            _biosfn_set_video_mode.line	set	$14
17716                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17717                       00000006            _biosfn_set_video_mode.cheight	set	6
17718                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17719                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17720                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17721                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17722                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17723                       0000000C            _biosfn_set_video_mode.i	set	$C
17724                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17725                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17726                       00000004            .biosfn_set_video_mode.mode	set	4
17727                       00000010            _biosfn_set_video_mode.palette	set	$10
17728                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17729                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17730                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17731                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17732                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17733                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17734                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17735                       00000013            _biosfn_set_video_mode.mmask	set	$13
17736                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17737                                             ;; copy and activate 8x16 font
17738 422B           B8                   1104    mov ax, #0x1104
17739 422E           B3                     00    mov bl, #0x00
17740 4230           CD                     10    int #0x10
17741 4232           B8                   1103    mov ax, #0x1103
17742 4235           B3                     00    mov bl, #0x00
17743 4237           CD                     10    int #0x10
17744                                           ! 2116 endasm
17745                                           !BCC_ENDASM
17746                                           !BCC_EOS
17747                                           ! 2117   }
17748                                           ! 2118 #asm
17749                       00004239            .9A:
17750                                           !BCC_EOS
17751                                           !BCC_ASM
17752                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17753                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17754                       00000008            _biosfn_set_video_mode.theightm1	set	8
17755                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17756                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17757                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17758                       00000014            _biosfn_set_video_mode.line	set	$14
17759                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17760                       00000006            _biosfn_set_video_mode.cheight	set	6
17761                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17762                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17763                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17764                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17765                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17766                       0000000C            _biosfn_set_video_mode.i	set	$C
17767                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17768                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17769                       00000004            .biosfn_set_video_mode.mode	set	4
17770                       00000010            _biosfn_set_video_mode.palette	set	$10
17771                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17772                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17773                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17774                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17775                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17776                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17777                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17778                       00000013            _biosfn_set_video_mode.mmask	set	$13
17779                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17780                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   4239           1E                           push ds
 +a   423A           31C0                         xor ax, ax
 +a   423C           8ED8                         mov ds, ax
 +a   423E           B8                   136F    mov ax,  #_vgafont8+128*8
 +a   4241           A3         007C              mov 0x1f*4, ax
 +a   4244           B8                   C000    mov ax,  #0xC000
 +a   4247           A3         007E              mov 0x1f*4+2, ax
 +a   424A           1F                           pop ds
17781                                           ! 2120 endasm
17782                                           !BCC_ENDASM
17783                                           !BCC_EOS
17784                                           ! 2121   switch(cheight)
17785 424B           8B46         F0            mov	ax,-$10[bp]
17786                                           ! 2122    {case 8:
17787 424E           E9         003E            br 	.9E
17788                                           ! 2123 #asm
17789                       00004251            .9F:
17790                                           !BCC_EOS
17791                                           !BCC_ASM
17792                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17793                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17794                       00000008            _biosfn_set_video_mode.theightm1	set	8
17795                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17796                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17797                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17798                       00000014            _biosfn_set_video_mode.line	set	$14
17799                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17800                       00000006            _biosfn_set_video_mode.cheight	set	6
17801                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17802                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17803                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17804                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17805                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17806                       0000000C            _biosfn_set_video_mode.i	set	$C
17807                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17808                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17809                       00000004            .biosfn_set_video_mode.mode	set	4
17810                       00000010            _biosfn_set_video_mode.palette	set	$10
17811                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17812                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17813                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17814                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17815                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17816                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17817                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17818                       00000013            _biosfn_set_video_mode.mmask	set	$13
17819                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17820                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   4251           1E                           push ds
 +a   4252           31C0                         xor ax, ax
 +a   4254           8ED8                         mov ds, ax
 +a   4256           B8                   0F6F    mov ax,  #_vgafont8
 +a   4259           A3         010C              mov 0x43*4, ax
 +a   425C           B8                   C000    mov ax,  #0xC000
 +a   425F           A3         010E              mov 0x43*4+2, ax
 +a   4262           1F                           pop ds
17821                                           ! 2125 endasm
17822                                           !BCC_ENDASM
17823                                           !BCC_EOS
17824                                           ! 2126      break;
17825 4263           EB           39            jmp .9C
17826                                           !BCC_EOS
17827                                           ! 2127     case 14:
17828                                           ! 2128 #asm
17829                       00004265            .A0:
17830                                           !BCC_EOS
17831                                           !BCC_ASM
17832                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17833                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17834                       00000008            _biosfn_set_video_mode.theightm1	set	8
17835                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17836                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17837                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17838                       00000014            _biosfn_set_video_mode.line	set	$14
17839                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17840                       00000006            _biosfn_set_video_mode.cheight	set	6
17841                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17842                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17843                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17844                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17845                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17846                       0000000C            _biosfn_set_video_mode.i	set	$C
17847                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17848                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17849                       00000004            .biosfn_set_video_mode.mode	set	4
17850                       00000010            _biosfn_set_video_mode.palette	set	$10
17851                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17852                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17853                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17854                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17855                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17856                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17857                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17858                       00000013            _biosfn_set_video_mode.mmask	set	$13
17859                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17860                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   4265           1E                           push ds
 +a   4266           31C0                         xor ax, ax
 +a   4268           8ED8                         mov ds, ax
 +a   426A           B8                   176F    mov ax,  #_vgafont14
 +a   426D           A3         010C              mov 0x43*4, ax
 +a   4270           B8                   C000    mov ax,  #0xC000
 +a   4273           A3         010E              mov 0x43*4+2, ax
 +a   4276           1F                           pop ds
17861                                           ! 2130 endasm
17862                                           !BCC_ENDASM
17863                                           !BCC_EOS
17864                                           ! 2131      break;
17865 4277           EB           25            jmp .9C
17866                                           !BCC_EOS
17867                                           ! 2132     case 16:
17868                                           ! 2133 #asm
17869                       00004279            .A1:
17870                                           !BCC_EOS
17871                                           !BCC_ASM
17872                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17873                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17874                       00000008            _biosfn_set_video_mode.theightm1	set	8
17875                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17876                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17877                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17878                       00000014            _biosfn_set_video_mode.line	set	$14
17879                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17880                       00000006            _biosfn_set_video_mode.cheight	set	6
17881                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17882                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17883                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17884                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17885                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17886                       0000000C            _biosfn_set_video_mode.i	set	$C
17887                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17888                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17889                       00000004            .biosfn_set_video_mode.mode	set	4
17890                       00000010            _biosfn_set_video_mode.palette	set	$10
17891                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17892                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17893                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17894                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17895                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17896                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17897                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17898                       00000013            _biosfn_set_video_mode.mmask	set	$13
17899                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17900                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4279           1E                           push ds
 +a   427A           31C0                         xor ax, ax
 +a   427C           8ED8                         mov ds, ax
 +a   427E           B8                   256F    mov ax,  #_vgafont16
 +a   4281           A3         010C              mov 0x43*4, ax
 +a   4284           B8                   C000    mov ax,  #0xC000
 +a   4287           A3         010E              mov 0x43*4+2, ax
 +a   428A           1F                           pop ds
17901                                           ! 2135 endasm
17902                                           !BCC_ENDASM
17903                                           !BCC_EOS
17904                                           ! 2136      break;
17905 428B           EB           11            jmp .9C
17906                                           !BCC_EOS
17907                                           ! 2137    }
17908                                           ! 2138 }
17909 428D           EB           0F            jmp .9C
17910                       0000428F            .9E:
17911 428F           2D                   0008  sub	ax,*8
17912 4292           74           BD            je 	.9F
17913 4294           2D                   0006  sub	ax,*6
17914 4297           74           CC            je 	.A0
17915 4299           2D                   0002  sub	ax,*2
17916 429C           74           DB            je 	.A1
17917                       0000429E            .9C:
17918                       FFFFFFE8            ..FFFD	=	-$18
17919 429E           89EC                       mov	sp,bp
17920 42A0           5D                         pop	bp
17921 42A1           C3                         ret
17922                                           ! 2139 static void biosfn_set_cursor_shape (CH,CL)
17923                                           ! Register BX used in function biosfn_set_video_mode
17924                                           ! 2140 Bit8u CH;Bit8u CL;
17925                       000042A2            _biosfn_set_cursor_shape:
17926                                           !BCC_EOS
17927                                           !BCC_EOS
17928                                           ! 2141 {Bit16u cheight,curs,crtc_addr;
17929                                           !BCC_EOS
17930                                           ! 2142  Bit8u modeset_ctl;
17931                                           !BCC_EOS
17932                                           ! 2143  CH&=0x3f;
17933 42A2           55                         push	bp
17934 42A3           89E5                       mov	bp,sp
17935 42A5           83C4                   F8  add	sp,*-8
17936                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17937 42A8           8A46         04            mov	al,4[bp]
17938 42AB           24                     3F  and	al,*$3F
17939 42AD           8846         04            mov	4[bp],al
17940                                           !BCC_EOS
17941                                           ! 2144  CL&=0x1f;
17942                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17943 42B0           8A46         06            mov	al,6[bp]
17944 42B3           24                     1F  and	al,*$1F
17945 42B5           8846         06            mov	6[bp],al
17946                                           !BCC_EOS
17947                                           ! 2145  curs=(CH<<8)+CL;
17948                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17949 42B8           8A46         04            mov	al,4[bp]
17950 42BB           30E4                       xor	ah,ah
17951 42BD           88C4                       mov	ah,al
17952 42BF           30C0                       xor	al,al
17953                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17954 42C1           0246         06            add	al,6[bp]
17955 42C4           80D4                   00  adc	ah,*0
17956                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17957 42C7           8946         FC            mov	-4[bp],ax
17958                                           !BCC_EOS
17959                                           ! 2146  write_word(0x40,0x60,curs);
17960                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17961 42CA           FF76         FC            push	-4[bp]
17962                                           ! Debug: list int = const $60 (used reg = )
17963 42CD           B8                   0060  mov	ax,*$60
17964 42D0           50                         push	ax
17965                                           ! Debug: list int = const $40 (used reg = )
17966 42D1           B8                   0040  mov	ax,*$40
17967 42D4           50                         push	ax
17968                                           ! Debug: func () void = write_word+0 (used reg = )
17969 42D5           E8         3A80            call	_write_word
17970 42D8           83C4                   06  add	sp,*6
17971                                           !BCC_EOS
17972                                           ! 2147  modeset_ctl=read_byte(0x40,0x89);
17973                                           ! Debug: list int = const $89 (used reg = )
17974 42DB           B8                   0089  mov	ax,#$89
17975 42DE           50                         push	ax
17976                                           ! Debug: list int = const $40 (used reg = )
17977 42DF           B8                   0040  mov	ax,*$40
17978 42E2           50                         push	ax
17979                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17980 42E3           E8         3A34            call	_read_byte
17981 42E6           83C4                   04  add	sp,*4
17982                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17983 42E9           8846         F9            mov	-7[bp],al
17984                                           !BCC_EOS
17985                                           ! 2148  cheight = read_word(0x40,0x85);
17986                                           ! Debug: list int = const $85 (used reg = )
17987 42EC           B8                   0085  mov	ax,#$85
17988 42EF           50                         push	ax
17989                                           ! Debug: list int = const $40 (used reg = )
17990 42F0           B8                   0040  mov	ax,*$40
17991 42F3           50                         push	ax
17992                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17993 42F4           E8         3A36            call	_read_word
17994 42F7           83C4                   04  add	sp,*4
17995                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17996 42FA           8946         FE            mov	-2[bp],ax
17997                                           !BCC_EOS
17998                                           ! 2149  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17999                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
18000 42FD           8A46         F9            mov	al,-7[bp]
18001 4300           24                     01  and	al,*1
18002 4302           84C0                       test	al,al
18003 4304           74           66            je  	.A2
18004                       00004306            .A6:
18005                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
18006 4306           8B46         FE            mov	ax,-2[bp]
18007 4309           3D                   0008  cmp	ax,*8
18008 430C           76           5E            jbe 	.A2
18009                       0000430E            .A5:
18010                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
18011 430E           8A46         06            mov	al,6[bp]
18012 4311           3C                     08  cmp	al,*8
18013 4313           73           57            jae 	.A2
18014                       00004315            .A4:
18015                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
18016 4315           8A46         04            mov	al,4[bp]
18017 4318           3C                     20  cmp	al,*$20
18018 431A           73           50            jae 	.A2
18019                       0000431C            .A3:
18020                                           ! 2150   {
18021                                           ! 2151    if(
18022                                           ! 2151 CL!=(CH+1))
18023                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
18024 431C           8A46         04            mov	al,4[bp]
18025 431F           30E4                       xor	ah,ah
18026                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
18027                                           ! Debug: expression subtree swapping
18028 4321           40                         inc	ax
18029 4322           50                         push	ax
18030 4323           8A46         06            mov	al,6[bp]
18031 4326           30E4                       xor	ah,ah
18032 4328           3B46         F6            cmp	ax,-$A[bp]
18033 432B           8D66         F8            lea	sp,-8[bp]
18034 432E           74           15            je  	.A7
18035                       00004330            .A8:
18036                                           ! 2152     {
18037                                           ! 2153      CH = ((CH+1) * cheight / 8) -1;
18038                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
18039 4330           8A46         04            mov	al,4[bp]
18040 4333           30E4                       xor	ah,ah
18041                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18042 4335           40                         inc	ax
18043 4336           8B4E         FE            mov	cx,-2[bp]
18044 4339           F7E9                       imul	cx
18045                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18046 433B           B1                     03  mov	cl,*3
18047 433D           D3E8                       shr	ax,cl
18048                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18049                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
18050 433F           48                         dec	ax
18051 4340           8846         04            mov	4[bp],al
18052                                           !BCC_EOS
18053                                           ! 2154     }
18054                                           ! 2155    else
18055                                           ! 2156     {
18056 4343           EB           14            jmp .A9
18057                       00004345            .A7:
18058                                           ! 2157      CH = ((CL+1) * cheight / 8) - 2;
18059                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18060 4345           8A46         06            mov	al,6[bp]
18061 4348           30E4                       xor	ah,ah
18062                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18063 434A           40                         inc	ax
18064 434B           8B4E         FE            mov	cx,-2[bp]
18065 434E           F7E9                       imul	cx
18066                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18067 4350           B1                     03  mov	cl,*3
18068 4352           D3E8                       shr	ax,cl
18069                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
18070                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
18071 4354           48                         dec	ax
18072 4355           48                         dec	ax
18073 4356           8846         04            mov	4[bp],al
18074                                           !BCC_EOS
18075                                           ! 2158     }
18076                                           ! 2159    CL = ((CL+1) * cheight / 8) - 1;
18077                       00004359            .A9:
18078                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18079 4359           8A46         06            mov	al,6[bp]
18080 435C           30E4                       xor	ah,ah
18081                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18082 435E           40                         inc	ax
18083 435F           8B4E         FE            mov	cx,-2[bp]
18084 4362           F7E9                       imul	cx
18085                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18086 4364           B1                     03  mov	cl,*3
18087 4366           D3E8                       shr	ax,cl
18088                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18089                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
18090 4368           48                         dec	ax
18091 4369           8846         06            mov	6[bp],al
18092                                           !BCC_EOS
18093                                           ! 2160   }
18094                                           ! 2161  crtc_addr=read_word(0x40,0x63);
18095                       0000436C            .A2:
18096                                           ! Debug: list int = const $63 (used reg = )
18097 436C           B8                   0063  mov	ax,*$63
18098 436F           50                         push	ax
18099                                           ! Debug: list int = const $40 (used reg = )
18100 4370           B8                   0040  mov	ax,*$40
18101 4373           50                         push	ax
18102                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18103 4374           E8         39B6            call	_read_word
18104 4377           83C4                   04  add	sp,*4
18105                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
18106 437A           8946         FA            mov	-6[bp],ax
18107                                           !BCC_EOS
18108                                           ! 2162  outb(crtc_addr,0x0a);
18109                                           ! Debug: list int = const $A (used reg = )
18110 437D           B8                   000A  mov	ax,*$A
18111 4380           50                         push	ax
18112                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18113 4381           FF76         FA            push	-6[bp]
18114                                           ! Debug: func () void = outb+0 (used reg = )
18115 4384           E8         39FF            call	_outb
18116 4387           83C4                   04  add	sp,*4
18117                                           !BCC_EOS
18118                                           ! 2163  outb(crtc_addr+1,CH);
18119                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
18120 438A           8A46         04            mov	al,4[bp]
18121 438D           30E4                       xor	ah,ah
18122 438F           50                         push	ax
18123                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18124 4390           8B46         FA            mov	ax,-6[bp]
18125                                           ! Debug: list unsigned int = ax+1 (used reg = )
18126 4393           40                         inc	ax
18127 4394           50                         push	ax
18128                                           ! Debug: func () void = outb+0 (used reg = )
18129 4395           E8         39EE            call	_outb
18130 4398           83C4                   04  add	sp,*4
18131                                           !BCC_EOS
18132                                           ! 2164  outb(crtc_addr,0x0b);
18133                                           ! Debug: list int = const $B (used reg = )
18134 439B           B8                   000B  mov	ax,*$B
18135 439E           50                         push	ax
18136                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18137 439F           FF76         FA            push	-6[bp]
18138                                           ! Debug: func () void = outb+0 (used reg = )
18139 43A2           E8         39E1            call	_outb
18140 43A5           83C4                   04  add	sp,*4
18141                                           !BCC_EOS
18142                                           ! 2165  outb(crtc_addr+1,CL);
18143                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18144 43A8           8A46         06            mov	al,6[bp]
18145 43AB           30E4                       xor	ah,ah
18146 43AD           50                         push	ax
18147                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18148 43AE           8B46         FA            mov	ax,-6[bp]
18149                                           ! Debug: list unsigned int = ax+1 (used reg = )
18150 43B1           40                         inc	ax
18151 43B2           50                         push	ax
18152                                           ! Debug: func () void = outb+0 (used reg = )
18153 43B3           E8         39D0            call	_outb
18154 43B6           83C4                   04  add	sp,*4
18155                                           !BCC_EOS
18156                                           ! 2166 }
18157 43B9           89EC                       mov	sp,bp
18158 43BB           5D                         pop	bp
18159 43BC           C3                         ret
18160                                           ! 2167 static void biosfn_set_cursor_pos (page, cursor)
18161                                           ! 2168 Bit8u page;Bit16u cursor;
18162                       000043BD            _biosfn_set_cursor_pos:
18163                                           !BCC_EOS
18164                                           !BCC_EOS
18165                                           ! 2169 {
18166                                           ! 2170  Bit8u xcurs,ycurs,current;
18167                                           !BCC_EOS
18168                                           ! 2171  Bit16u nbcols,nbrows,address,crtc_addr;
18169                                           !BCC_EOS
18170                                           ! 2172  if(page>7)return;
18171 43BD           55                         push	bp
18172 43BE           89E5                       mov	bp,sp
18173 43C0           83C4                   F4  add	sp,*-$C
18174                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18175 43C3           8A46         04            mov	al,4[bp]
18176 43C6           3C                     07  cmp	al,*7
18177 43C8           76           04            jbe 	.AA
18178                       000043CA            .AB:
18179 43CA           89EC                       mov	sp,bp
18180 43CC           5D                         pop	bp
18181 43CD           C3                         ret
18182                                           !BCC_EOS
18183                                           ! 2173  write_word(0x40, 0x50 +2*page, cursor);
18184                       000043CE            .AA:
18185                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18186 43CE           FF76         06            push	6[bp]
18187                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18188                                           ! Debug: expression subtree swapping
18189 43D1           8A46         04            mov	al,4[bp]
18190 43D4           30E4                       xor	ah,ah
18191 43D6           D1E0                       shl	ax,*1
18192                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18193                                           ! Debug: expression subtree swapping
18194                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18195 43D8           05                   0050  add	ax,*$50
18196 43DB           50                         push	ax
18197                                           ! Debug: list int = const $40 (used reg = )
18198 43DC           B8                   0040  mov	ax,*$40
18199 43DF           50                         push	ax
18200                                           ! Debug: func () void = write_word+0 (used reg = )
18201 43E0           E8         3975            call	_write_word
18202 43E3           83C4                   06  add	sp,*6
18203                                           !BCC_EOS
18204                                           ! 2174  current=read_byte(0x40,0x62);
18205                                           ! Debug: list int = const $62 (used reg = )
18206 43E6           B8                   0062  mov	ax,*$62
18207 43E9           50                         push	ax
18208                                           ! Debug: list int = const $40 (used reg = )
18209 43EA           B8                   0040  mov	ax,*$40
18210 43ED           50                         push	ax
18211                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18212 43EE           E8         3929            call	_read_byte
18213 43F1           83C4                   04  add	sp,*4
18214                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18215 43F4           8846         FD            mov	-3[bp],al
18216                                           !BCC_EOS
18217                                           ! 2175  if(page==current)
18218                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18219 43F7           8A46         04            mov	al,4[bp]
18220 43FA           3A46         FD            cmp	al,-3[bp]
18221 43FD         0F85         00B8            bne 	.AC
18222                       00004401            .AD:
18223                                           ! 2176   {
18224                                           ! 2177    nbcols=read_word(0x40,0x4A);
18225                                           ! Debug: list int = const $4A (used reg = )
18226 4401           B8                   004A  mov	ax,*$4A
18227 4404           50                         push	ax
18228                                           ! Debug: list int = const $40 (used reg = )
18229 4405           B8                   0040  mov	ax,*$40
18230 4408           50                         push	ax
18231                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18232 4409           E8         3921            call	_read_word
18233 440C           83C4                   04  add	sp,*4
18234                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18235 440F           8946         FA            mov	-6[bp],ax
18236                                           !BCC_EOS
18237                                           ! 2178    nbrows=read_byte(0x40,0x84)+1;
18238                                           ! Debug: list int = const $84 (used reg = )
18239 4412           B8                   0084  mov	ax,#$84
18240 4415           50                         push	ax
18241                                           ! Debug: list int = const $40 (used reg = )
18242 4416           B8                   0040  mov	ax,*$40
18243 4419           50                         push	ax
18244                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18245 441A           E8         38FD            call	_read_byte
18246 441D           83C4                   04  add	sp,*4
18247                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18248 4420           30E4                       xor	ah,ah
18249                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18250 4422           40                         inc	ax
18251 4423           8946         F8            mov	-8[bp],ax
18252                                           !BCC_EOS
18253                                           ! 2179    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
18254                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18255 4426           8A46         06            mov	al,6[bp]
18256                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18257 4429           8846         FF            mov	-1[bp],al
18258                                           !BCC_EOS
18259                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18260 442C           8B46         06            mov	ax,6[bp]
18261 442F           30C0                       xor	al,al
18262                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18263 4431           88E0                       mov	al,ah
18264 4433           30E4                       xor	ah,ah
18265                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18266 4435           8846         FE            mov	-2[bp],al
18267                                           !BCC_EOS
18268                                           ! 2180    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
18269                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18270 4438           8A46         FE            mov	al,-2[bp]
18271 443B           30E4                       xor	ah,ah
18272 443D           8B4E         FA            mov	cx,-6[bp]
18273 4440           F7E9                       imul	cx
18274 4442           50                         push	ax
18275                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18276 4443           8B46         FA            mov	ax,-6[bp]
18277 4446           8B4E         F8            mov	cx,-8[bp]
18278 4449           F7E9                       imul	cx
18279                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18280 444B           0C                     FF  or	al,#$FF
18281                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18282                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18283 444D           89C3                       mov	bx,ax
18284 444F           8A46         04            mov	al,4[bp]
18285 4452           30E4                       xor	ah,ah
18286 4454           93                         xchg	ax,bx
18287 4455           40                         inc	ax
18288 4456           89D9                       mov	cx,bx
18289 4458           F7E9                       imul	cx
18290                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18291 445A           0246         FF            add	al,-1[bp]
18292 445D           80D4                   00  adc	ah,*0
18293                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18294 4460           0346         F2            add	ax,-$E[bp]
18295 4463           44                         inc	sp
18296 4464           44                         inc	sp
18297                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18298 4465           8946         F6            mov	-$A[bp],ax
18299                                           !BCC_EOS
18300                                           ! 2181    crtc_addr=read_word(0x40,0x63);
18301                                           ! Debug: list int = const $63 (used reg = )
18302 4468           B8                   0063  mov	ax,*$63
18303 446B           50                         push	ax
18304                                           ! Debug: list int = const $40 (used reg = )
18305 446C           B8                   0040  mov	ax,*$40
18306 446F           50                         push	ax
18307                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18308 4470           E8         38BA            call	_read_word
18309 4473           83C4                   04  add	sp,*4
18310                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18311 4476           8946         F4            mov	-$C[bp],ax
18312                                           !BCC_EOS
18313                                           ! 2182    outb(crtc_addr,0x0e);
18314                                           ! Debug: list int = const $E (used reg = )
18315 4479           B8                   000E  mov	ax,*$E
18316 447C           50                         push	ax
18317                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18318 447D           FF76         F4            push	-$C[bp]
18319                                           ! Debug: func () void = outb+0 (used reg = )
18320 4480           E8         3903            call	_outb
18321 4483           83C4                   04  add	sp,*4
18322                                           !BCC_EOS
18323                                           ! 2183    outb(crtc_addr+1,(address&0xff00)>>8);
18324                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18325 4486           8B46         F6            mov	ax,-$A[bp]
18326 4489           30C0                       xor	al,al
18327                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18328 448B           88E0                       mov	al,ah
18329 448D           30E4                       xor	ah,ah
18330                                           ! Debug: list unsigned int = ax+0 (used reg = )
18331 448F           50                         push	ax
18332                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18333 4490           8B46         F4            mov	ax,-$C[bp]
18334                                           ! Debug: list unsigned int = ax+1 (used reg = )
18335 4493           40                         inc	ax
18336 4494           50                         push	ax
18337                                           ! Debug: func () void = outb+0 (used reg = )
18338 4495           E8         38EE            call	_outb
18339 4498           83C4                   04  add	sp,*4
18340                                           !BCC_EOS
18341                                           ! 2184    outb(crtc_addr,0x0f);
18342                                           ! Debug: list int = const $F (used reg = )
18343 449B           B8                   000F  mov	ax,*$F
18344 449E           50                         push	ax
18345                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18346 449F           FF76         F4            push	-$C[bp]
18347                                           ! Debug: func () void = outb+0 (used reg = )
18348 44A2           E8         38E1            call	_outb
18349 44A5           83C4                   04  add	sp,*4
18350                                           !BCC_EOS
18351                                           ! 2185    outb(crtc_addr+1,address&0x00ff);
18352                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18353 44A8           8A46         F6            mov	al,-$A[bp]
18354                                           ! Debug: list unsigned char = al+0 (used reg = )
18355 44AB           30E4                       xor	ah,ah
18356 44AD           50                         push	ax
18357                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18358 44AE           8B46         F4            mov	ax,-$C[bp]
18359                                           ! Debug: list unsigned int = ax+1 (used reg = )
18360 44B1           40                         inc	ax
18361 44B2           50                         push	ax
18362                                           ! Debug: func () void = outb+0 (used reg = )
18363 44B3           E8         38D0            call	_outb
18364 44B6           83C4                   04  add	sp,*4
18365                                           !BCC_EOS
18366                                           ! 2186   }
18367                                           ! 2187 }
18368                       000044B9            .AC:
18369 44B9           89EC                       mov	sp,bp
18370 44BB           5D                         pop	bp
18371 44BC           C3                         ret
18372                                           ! 2188 static void biosfn_get_cursor_pos (page,shape, pos)
18373                                           ! Register BX used in function biosfn_set_cursor_pos
18374                                           ! 2189 Bit8u page;Bit16u *shape;Bit16u *pos;
18375                       000044BD            _biosfn_get_cursor_pos:
18376                                           !BCC_EOS
18377                                           !BCC_EOS
18378                                           !BCC_EOS
18379                                           ! 2190 {
18380                                           ! 2191  Bit16u ss=get_SS();
18381 44BD           55                         push	bp
18382 44BE           89E5                       mov	bp,sp
18383 44C0           4C                         dec	sp
18384 44C1           4C                         dec	sp
18385                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18386 44C2           E8         38E1            call	_get_SS
18387                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18388 44C5           8946         FE            mov	-2[bp],ax
18389                                           !BCC_EOS
18390                                           ! 2192  write_word(ss, shape, 0);
18391                                           ! Debug: list int = const 0 (used reg = )
18392 44C8           31C0                       xor	ax,ax
18393 44CA           50                         push	ax
18394                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18395 44CB           FF76         06            push	6[bp]
18396                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18397 44CE           FF76         FE            push	-2[bp]
18398                                           ! Debug: func () void = write_word+0 (used reg = )
18399 44D1           E8         3884            call	_write_word
18400 44D4           83C4                   06  add	sp,*6
18401                                           !BCC_EOS
18402                                           ! 2193  write_word(ss, pos, 0);
18403                                           ! Debug: list int = const 0 (used reg = )
18404 44D7           31C0                       xor	ax,ax
18405 44D9           50                         push	ax
18406                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18407 44DA           FF76         08            push	8[bp]
18408                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18409 44DD           FF76         FE            push	-2[bp]
18410                                           ! Debug: func () void = write_word+0 (used reg = )
18411 44E0           E8         3875            call	_write_word
18412 44E3           83C4                   06  add	sp,*6
18413                                           !BCC_EOS
18414                                           ! 2194  if(page>7)return;
18415                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18416 44E6           8A46         04            mov	al,4[bp]
18417 44E9           3C                     07  cmp	al,*7
18418 44EB           76           04            jbe 	.AE
18419                       000044ED            .AF:
18420 44ED           89EC                       mov	sp,bp
18421 44EF           5D                         pop	bp
18422 44F0           C3                         ret
18423                                           !BCC_EOS
18424                                           ! 2195  write_word(ss,shape,read_word(0x40,0x60));
18425                       000044F1            .AE:
18426                                           ! Debug: list int = const $60 (used reg = )
18427 44F1           B8                   0060  mov	ax,*$60
18428 44F4           50                         push	ax
18429                                           ! Debug: list int = const $40 (used reg = )
18430 44F5           B8                   0040  mov	ax,*$40
18431 44F8           50                         push	ax
18432                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18433 44F9           E8         3831            call	_read_word
18434 44FC           83C4                   04  add	sp,*4
18435                                           ! Debug: list unsigned short = ax+0 (used reg = )
18436 44FF           50                         push	ax
18437                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18438 4500           FF76         06            push	6[bp]
18439                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18440 4503           FF76         FE            push	-2[bp]
18441                                           ! Debug: func () void = write_word+0 (used reg = )
18442 4506           E8         384F            call	_write_word
18443 4509           83C4                   06  add	sp,*6
18444                                           !BCC_EOS
18445                                           ! 2196  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18446                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18447 450C           8A46         04            mov	al,4[bp]
18448 450F           30E4                       xor	ah,ah
18449 4511           D1E0                       shl	ax,*1
18450                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18451                                           ! Debug: expression subtree swapping
18452                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18453 4513           05                   0050  add	ax,*$50
18454 4516           50                         push	ax
18455                                           ! Debug: list int = const $40 (used reg = )
18456 4517           B8                   0040  mov	ax,*$40
18457 451A           50                         push	ax
18458                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18459 451B           E8         380F            call	_read_word
18460 451E           83C4                   04  add	sp,*4
18461                                           ! Debug: list unsigned short = ax+0 (used reg = )
18462 4521           50                         push	ax
18463                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18464 4522           FF76         08            push	8[bp]
18465                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18466 4525           FF76         FE            push	-2[bp]
18467                                           ! Debug: func () void = write_word+0 (used reg = )
18468 4528           E8         382D            call	_write_word
18469 452B           83C4                   06  add	sp,*6
18470                                           !BCC_EOS
18471                                           ! 2197 }
18472 452E           89EC                       mov	sp,bp
18473 4530           5D                         pop	bp
18474 4531           C3                         ret
18475                                           ! 2198 static void biosfn_set_active_page (page)
18476                                           ! 2199 Bit8u page;
18477                       00004532            _biosfn_set_active_page:
18478                                           !BCC_EOS
18479                                           ! 2200 {
18480                                           ! 2201  Bit16u cursor,dummy,crtc_addr;
18481                                           !BCC_EOS
18482                                           ! 2202  Bit16u nbcols,nbrows,address;
18483                                           !BCC_EOS
18484                                           ! 2203  Bit8u mode,line;
18485                                           !BCC_EOS
18486                                           ! 2204  if(page>7)return;
18487 4532           55                         push	bp
18488 4533           89E5                       mov	bp,sp
18489 4535           83C4                   F2  add	sp,*-$E
18490                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18491 4538           8A46         04            mov	al,4[bp]
18492 453B           3C                     07  cmp	al,*7
18493 453D           76           04            jbe 	.B0
18494                       0000453F            .B1:
18495 453F           89EC                       mov	sp,bp
18496 4541           5D                         pop	bp
18497 4542           C3                         ret
18498                                           !BCC_EOS
18499                                           ! 2205  mode=read_byte(0x40,0x49);
18500                       00004543            .B0:
18501                                           ! Debug: list int = const $49 (used reg = )
18502 4543           B8                   0049  mov	ax,*$49
18503 4546           50                         push	ax
18504                                           ! Debug: list int = const $40 (used reg = )
18505 4547           B8                   0040  mov	ax,*$40
18506 454A           50                         push	ax
18507                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18508 454B           E8         37CC            call	_read_byte
18509 454E           83C4                   04  add	sp,*4
18510                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18511 4551           8846         F3            mov	-$D[bp],al
18512                                           !BCC_EOS
18513                                           ! 2206  line=find_vga_entry(mode);
18514                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18515 4554           8A46         F3            mov	al,-$D[bp]
18516 4557           30E4                       xor	ah,ah
18517 4559           50                         push	ax
18518                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18519 455A           E8         36D1            call	_find_vga_entry
18520 455D           44                         inc	sp
18521 455E           44                         inc	sp
18522                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18523 455F           8846         F2            mov	-$E[bp],al
18524                                           !BCC_EOS
18525                                           ! 2207  if(line==0xFF)return;
18526                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18527 4562           8A46         F2            mov	al,-$E[bp]
18528 4565           3C                     FF  cmp	al,#$FF
18529 4567           75           04            jne 	.B2
18530                       00004569            .B3:
18531 4569           89EC                       mov	sp,bp
18532 456B           5D                         pop	bp
18533 456C           C3                         ret
18534                                           !BCC_EOS
18535                                           ! 2208  biosfn_get_cursor_pos(page,&dummy,&cursor);
18536                       0000456D            .B2:
18537                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18538 456D           8D5E         FE            lea	bx,-2[bp]
18539 4570           53                         push	bx
18540                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18541 4571           8D5E         FC            lea	bx,-4[bp]
18542 4574           53                         push	bx
18543                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18544 4575           8A46         04            mov	al,4[bp]
18545 4578           30E4                       xor	ah,ah
18546 457A           50                         push	ax
18547                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18548 457B           E8         FF3F            call	_biosfn_get_cursor_pos
18549 457E           83C4                   06  add	sp,*6
18550                                           !BCC_EOS
18551                                           ! 2209  if(vga_modes[line].class==0x00)
18552                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18553 4581           8A46         F2            mov	al,-$E[bp]
18554 4584           30E4                       xor	ah,ah
18555 4586           B1                     03  mov	cl,*3
18556 4588           D3E0                       shl	ax,cl
18557 458A           89C3                       mov	bx,ax
18558 458C           81C3                 020B  add	bx,#_vga_modes
18559                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18560 4590           8A47         01            mov	al,1[bx]
18561 4593           84C0                       test	al,al
18562 4595           75           6E            jne 	.B4
18563                       00004597            .B5:
18564                                           ! 2210   {
18565                                           ! 2211    nbcols=read_word(0x40,0x4A);
18566                                           ! Debug: list int = const $4A (used reg = )
18567 4597           B8                   004A  mov	ax,*$4A
18568 459A           50                         push	ax
18569                                           ! Debug: list int = const $40 (used reg = )
18570 459B           B8                   0040  mov	ax,*$40
18571 459E           50                         push	ax
18572                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18573 459F           E8         378B            call	_read_word
18574 45A2           83C4                   04  add	sp,*4
18575                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18576 45A5           8946         F8            mov	-8[bp],ax
18577                                           !BCC_EOS
18578                                           ! 2212    nbrows=read_byte(0x40,0x84)+1;
18579                                           ! Debug: list int = const $84 (used reg = )
18580 45A8           B8                   0084  mov	ax,#$84
18581 45AB           50                         push	ax
18582                                           ! Debug: list int = const $40 (used reg = )
18583 45AC           B8                   0040  mov	ax,*$40
18584 45AF           50                         push	ax
18585                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18586 45B0           E8         3767            call	_read_byte
18587 45B3           83C4                   04  add	sp,*4
18588                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18589 45B6           30E4                       xor	ah,ah
18590                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18591 45B8           40                         inc	ax
18592 45B9           8946         F6            mov	-$A[bp],ax
18593                                           !BCC_EOS
18594                                           ! 2213    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18595                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18596 45BC           8B46         F8            mov	ax,-8[bp]
18597 45BF           8B4E         F6            mov	cx,-$A[bp]
18598 45C2           F7E9                       imul	cx
18599                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18600 45C4           D1E0                       shl	ax,*1
18601                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18602 45C6           0C                     FF  or	al,#$FF
18603                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18604                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18605 45C8           89C3                       mov	bx,ax
18606 45CA           8A46         04            mov	al,4[bp]
18607 45CD           30E4                       xor	ah,ah
18608 45CF           93                         xchg	ax,bx
18609 45D0           40                         inc	ax
18610 45D1           89D9                       mov	cx,bx
18611 45D3           F7E9                       imul	cx
18612                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18613 45D5           8946         F4            mov	-$C[bp],ax
18614                                           !BCC_EOS
18615                                           ! 2214    write_word(0x40,0x4E,address);
18616                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18617 45D8           FF76         F4            push	-$C[bp]
18618                                           ! Debug: list int = const $4E (used reg = )
18619 45DB           B8                   004E  mov	ax,*$4E
18620 45DE           50                         push	ax
18621                                           ! Debug: list int = const $40 (used reg = )
18622 45DF           B8                   0040  mov	ax,*$40
18623 45E2           50                         push	ax
18624                                           ! Debug: func () void = write_word+0 (used reg = )
18625 45E3           E8         3772            call	_write_word
18626 45E6           83C4                   06  add	sp,*6
18627                                           !BCC_EOS
18628                                           ! 2215    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18629                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18630 45E9           8B46         F8            mov	ax,-8[bp]
18631 45EC           8B4E         F6            mov	cx,-$A[bp]
18632 45EF           F7E9                       imul	cx
18633                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18634 45F1           0C                     FF  or	al,#$FF
18635                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18636                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18637 45F3           89C3                       mov	bx,ax
18638 45F5           8A46         04            mov	al,4[bp]
18639 45F8           30E4                       xor	ah,ah
18640 45FA           93                         xchg	ax,bx
18641 45FB           40                         inc	ax
18642 45FC           89D9                       mov	cx,bx
18643 45FE           F7E9                       imul	cx
18644                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18645 4600           8946         F4            mov	-$C[bp],ax
18646                                           !BCC_EOS
18647                                           ! 2216   }
18648                                           ! 2217  else
18649                                           ! 2218   {
18650 4603           EB           24            jmp .B6
18651                       00004605            .B4:
18652                                           ! 2219    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18653                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18654 4605           8A46         F2            mov	al,-$E[bp]
18655 4608           30E4                       xor	ah,ah
18656 460A           89C3                       mov	bx,ax
18657                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18658 460C           8A87       028B            mov	al,_line_to_vpti[bx]
18659 4610           30E4                       xor	ah,ah
18660 4612           B1                     06  mov	cl,*6
18661 4614           D3E0                       shl	ax,cl
18662 4616           89C3                       mov	bx,ax
18663 4618           81C3                 029F  add	bx,#_video_param_table
18664                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18665                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18666                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18667 461C           8A46         04            mov	al,4[bp]
18668 461F           30E4                       xor	ah,ah
18669 4621           8B4F         03            mov	cx,3[bx]
18670 4624           F7E9                       imul	cx
18671                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18672 4626           8946         F4            mov	-$C[bp],ax
18673                                           !BCC_EOS
18674                                           ! 2220   }
18675                                           ! 2221  crtc_addr=read_word(0x40,0x63);
18676                       00004629            .B6:
18677                                           ! Debug: list int = const $63 (used reg = )
18678 4629           B8                   0063  mov	ax,*$63
18679 462C           50                         push	ax
18680                                           ! Debug: list int = const $40 (used reg = )
18681 462D           B8                   0040  mov	ax,*$40
18682 4630           50                         push	ax
18683                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18684 4631           E8         36F9            call	_read_word
18685 4634           83C4                   04  add	sp,*4
18686                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18687 4637           8946         FA            mov	-6[bp],ax
18688                                           !BCC_EOS
18689                                           ! 2222  outb(crtc_addr,0x0c);
18690                                           ! Debug: list int = const $C (used reg = )
18691 463A           B8                   000C  mov	ax,*$C
18692 463D           50                         push	ax
18693                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18694 463E           FF76         FA            push	-6[bp]
18695                                           ! Debug: func () void = outb+0 (used reg = )
18696 4641           E8         3742            call	_outb
18697 4644           83C4                   04  add	sp,*4
18698                                           !BCC_EOS
18699                                           ! 2223  outb(crtc_addr+1,(address&0xff00)>>8);
18700                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18701 4647           8B46         F4            mov	ax,-$C[bp]
18702 464A           30C0                       xor	al,al
18703                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18704 464C           88E0                       mov	al,ah
18705 464E           30E4                       xor	ah,ah
18706                                           ! Debug: list unsigned int = ax+0 (used reg = )
18707 4650           50                         push	ax
18708                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18709 4651           8B46         FA            mov	ax,-6[bp]
18710                                           ! Debug: list unsigned int = ax+1 (used reg = )
18711 4654           40                         inc	ax
18712 4655           50                         push	ax
18713                                           ! Debug: func () void = outb+0 (used reg = )
18714 4656           E8         372D            call	_outb
18715 4659           83C4                   04  add	sp,*4
18716                                           !BCC_EOS
18717                                           ! 2224  outb(crtc_addr,0x0d);
18718                                           ! Debug: list int = const $D (used reg = )
18719 465C           B8                   000D  mov	ax,*$D
18720 465F           50                         push	ax
18721                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18722 4660           FF76         FA            push	-6[bp]
18723                                           ! Debug: func () void = outb+0 (used reg = )
18724 4663           E8         3720            call	_outb
18725 4666           83C4                   04  add	sp,*4
18726                                           !BCC_EOS
18727                                           ! 2225  outb(crtc_addr+1,address&0x00ff);
18728                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18729 4669           8A46         F4            mov	al,-$C[bp]
18730                                           ! Debug: list unsigned char = al+0 (used reg = )
18731 466C           30E4                       xor	ah,ah
18732 466E           50                         push	ax
18733                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18734 466F           8B46         FA            mov	ax,-6[bp]
18735                                           ! Debug: list unsigned int = ax+1 (used reg = )
18736 4672           40                         inc	ax
18737 4673           50                         push	ax
18738                                           ! Debug: func () void = outb+0 (used reg = )
18739 4674           E8         370F            call	_outb
18740 4677           83C4                   04  add	sp,*4
18741                                           !BCC_EOS
18742                                           ! 2226  write_byte(0x40,0x62,page);
18743                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18744 467A           8A46         04            mov	al,4[bp]
18745 467D           30E4                       xor	ah,ah
18746 467F           50                         push	ax
18747                                           ! Debug: list int = const $62 (used reg = )
18748 4680           B8                   0062  mov	ax,*$62
18749 4683           50                         push	ax
18750                                           ! Debug: list int = const $40 (used reg = )
18751 4684           B8                   0040  mov	ax,*$40
18752 4687           50                         push	ax
18753                                           ! Debug: func () void = write_byte+0 (used reg = )
18754 4688           E8         36B5            call	_write_byte
18755 468B           83C4                   06  add	sp,*6
18756                                           !BCC_EOS
18757                                           ! 2227  printf("Set active page %02x address %04x\n",page,address);
18758                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18759 468E           FF76         F4            push	-$C[bp]
18760                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18761 4691           8A46         04            mov	al,4[bp]
18762 4694           30E4                       xor	ah,ah
18763 4696           50                         push	ax
18764                                           ! Debug: list * char = .B7+0 (used reg = )
18765 4697           BB                   A0B2  mov	bx,#.B7
18766 469A           53                         push	bx
18767                                           ! Debug: func () void = printf+0 (used reg = )
18768 469B           E8         3727            call	_printf
18769 469E           83C4                   06  add	sp,*6
18770                                           !BCC_EOS
18771                                           ! 2228  biosfn_se
18772                                           ! 2228 t_cursor_pos(page,cursor);
18773                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18774 46A1           FF76         FE            push	-2[bp]
18775                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18776 46A4           8A46         04            mov	al,4[bp]
18777 46A7           30E4                       xor	ah,ah
18778 46A9           50                         push	ax
18779                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18780 46AA           E8         FD10            call	_biosfn_set_cursor_pos
18781 46AD           83C4                   04  add	sp,*4
18782                                           !BCC_EOS
18783                                           ! 2229 }
18784 46B0           89EC                       mov	sp,bp
18785 46B2           5D                         pop	bp
18786 46B3           C3                         ret
18787                                           ! 2230 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18788                                           ! Register BX used in function biosfn_set_active_page
18789                                           ! 2231 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18790                       000046B4            _vgamem_copy_pl4:
18791                                           !BCC_EOS
18792                                           !BCC_EOS
18793                                           !BCC_EOS
18794                                           !BCC_EOS
18795                                           !BCC_EOS
18796                                           !BCC_EOS
18797                                           ! 2232 {
18798                                           ! 2233  Bit16u src,dest;
18799                                           !BCC_EOS
18800                                           ! 2234  Bit8u i;
18801                                           !BCC_EOS
18802                                           ! 2235  src=ysrc*cheight*nbcols+xstart;
18803 46B4           55                         push	bp
18804 46B5           89E5                       mov	bp,sp
18805 46B7           83C4                   FA  add	sp,*-6
18806                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18807 46BA           8A46         0E            mov	al,$E[bp]
18808 46BD           30E4                       xor	ah,ah
18809 46BF           89C3                       mov	bx,ax
18810 46C1           8A46         06            mov	al,6[bp]
18811 46C4           30E4                       xor	ah,ah
18812 46C6           89D9                       mov	cx,bx
18813 46C8           F7E9                       imul	cx
18814                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18815 46CA           89C3                       mov	bx,ax
18816 46CC           8A46         0C            mov	al,$C[bp]
18817 46CF           30E4                       xor	ah,ah
18818 46D1           93                         xchg	ax,bx
18819 46D2           89D9                       mov	cx,bx
18820 46D4           F7E9                       imul	cx
18821                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18822 46D6           0246         04            add	al,4[bp]
18823 46D9           80D4                   00  adc	ah,*0
18824                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18825 46DC           8946         FE            mov	-2[bp],ax
18826                                           !BCC_EOS
18827                                           ! 2236  dest=ydest*cheight*nbcols+xstart;
18828                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18829 46DF           8A46         0E            mov	al,$E[bp]
18830 46E2           30E4                       xor	ah,ah
18831 46E4           89C3                       mov	bx,ax
18832 46E6           8A46         08            mov	al,8[bp]
18833 46E9           30E4                       xor	ah,ah
18834 46EB           89D9                       mov	cx,bx
18835 46ED           F7E9                       imul	cx
18836                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18837 46EF           89C3                       mov	bx,ax
18838 46F1           8A46         0C            mov	al,$C[bp]
18839 46F4           30E4                       xor	ah,ah
18840 46F6           93                         xchg	ax,bx
18841 46F7           89D9                       mov	cx,bx
18842 46F9           F7E9                       imul	cx
18843                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18844 46FB           0246         04            add	al,4[bp]
18845 46FE           80D4                   00  adc	ah,*0
18846                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18847 4701           8946         FC            mov	-4[bp],ax
18848                                           !BCC_EOS
18849                                           ! 2237  outw(0x3ce, 0x0105);
18850                                           ! Debug: list int = const $105 (used reg = )
18851 4704           B8                   0105  mov	ax,#$105
18852 4707           50                         push	ax
18853                                           ! Debug: list int = const $3CE (used reg = )
18854 4708           B8                   03CE  mov	ax,#$3CE
18855 470B           50                         push	ax
18856                                           ! Debug: func () void = outw+0 (used reg = )
18857 470C           E8         3687            call	_outw
18858 470F           83C4                   04  add	sp,*4
18859                                           !BCC_EOS
18860                                           ! 2238  for(i=0;i<cheight;i++)
18861                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18862 4712           30C0                       xor	al,al
18863 4714           8846         FB            mov	-5[bp],al
18864                                           !BCC_EOS
18865                                           !BCC_EOS
18866                                           ! 2239   {
18867 4717           EB           43            jmp .BA
18868                       00004719            .BB:
18869                                           ! 2240    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18870                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18871 4719           8A46         0A            mov	al,$A[bp]
18872 471C           30E4                       xor	ah,ah
18873 471E           50                         push	ax
18874                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18875 471F           8A46         0C            mov	al,$C[bp]
18876 4722           30E4                       xor	ah,ah
18877 4724           89C3                       mov	bx,ax
18878 4726           8A46         FB            mov	al,-5[bp]
18879 4729           30E4                       xor	ah,ah
18880 472B           89D9                       mov	cx,bx
18881 472D           F7E9                       imul	cx
18882                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18883                                           ! Debug: expression subtree swapping
18884 472F           0346         FE            add	ax,-2[bp]
18885                                           ! Debug: list unsigned int = ax+0 (used reg = )
18886 4732           50                         push	ax
18887                                           ! Debug: list unsigned int = const $A000 (used reg = )
18888 4733           B8                   A000  mov	ax,#$A000
18889 4736           50                         push	ax
18890                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18891 4737           8A46         0C            mov	al,$C[bp]
18892 473A           30E4                       xor	ah,ah
18893 473C           89C3                       mov	bx,ax
18894 473E           8A46         FB            mov	al,-5[bp]
18895 4741           30E4                       xor	ah,ah
18896 4743           89D9                       mov	cx,bx
18897 4745           F7E9                       imul	cx
18898                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18899                                           ! Debug: expression subtree swapping
18900 4747           0346         FC            add	ax,-4[bp]
18901                                           ! Debug: list unsigned int = ax+0 (used reg = )
18902 474A           50                         push	ax
18903                                           ! Debug: list unsigned int = const $A000 (used reg = )
18904 474B           B8                   A000  mov	ax,#$A000
18905 474E           50                         push	ax
18906                                           ! Debug: func () void = memcpyb+0 (used reg = )
18907 474F           E8         3568            call	_memcpyb
18908 4752           83C4                   0A  add	sp,*$A
18909                                           !BCC_EOS
18910                                           ! 2241   }
18911                                           ! 2242  outw(0x3ce, 0x0005);
18912                       00004755            .B9:
18913                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18914 4755           8A46         FB            mov	al,-5[bp]
18915 4758           40                         inc	ax
18916 4759           8846         FB            mov	-5[bp],al
18917                       0000475C            .BA:
18918                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18919 475C           8A46         FB            mov	al,-5[bp]
18920 475F           3A46         0E            cmp	al,$E[bp]
18921 4762           72           B5            jb 	.BB
18922                       00004764            .BC:
18923                       00004764            .B8:
18924                                           ! Debug: list int = const 5 (used reg = )
18925 4764           B8                   0005  mov	ax,*5
18926 4767           50                         push	ax
18927                                           ! Debug: list int = const $3CE (used reg = )
18928 4768           B8                   03CE  mov	ax,#$3CE
18929 476B           50                         push	ax
18930                                           ! Debug: func () void = outw+0 (used reg = )
18931 476C           E8         3627            call	_outw
18932 476F           83C4                   04  add	sp,*4
18933                                           !BCC_EOS
18934                                           ! 2243 }
18935 4772           89EC                       mov	sp,bp
18936 4774           5D                         pop	bp
18937 4775           C3                         ret
18938                                           ! 2244 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18939                                           ! Register BX used in function vgamem_copy_pl4
18940                                           ! 2245 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18941                       00004776            _vgamem_fill_pl4:
18942                                           !BCC_EOS
18943                                           !BCC_EOS
18944                                           !BCC_EOS
18945                                           !BCC_EOS
18946                                           !BCC_EOS
18947                                           !BCC_EOS
18948                                           ! 2246 {
18949                                           ! 2247  Bit16u dest;
18950                                           !BCC_EOS
18951                                           ! 2248  Bit8u i;
18952                                           !BCC_EOS
18953                                           ! 2249  dest=ystart*cheight*nbcols+xstart;
18954 4776           55                         push	bp
18955 4777           89E5                       mov	bp,sp
18956 4779           83C4                   FC  add	sp,*-4
18957                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18958 477C           8A46         0C            mov	al,$C[bp]
18959 477F           30E4                       xor	ah,ah
18960 4781           89C3                       mov	bx,ax
18961 4783           8A46         06            mov	al,6[bp]
18962 4786           30E4                       xor	ah,ah
18963 4788           89D9                       mov	cx,bx
18964 478A           F7E9                       imul	cx
18965                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18966 478C           89C3                       mov	bx,ax
18967 478E           8A46         0A            mov	al,$A[bp]
18968 4791           30E4                       xor	ah,ah
18969 4793           93                         xchg	ax,bx
18970 4794           89D9                       mov	cx,bx
18971 4796           F7E9                       imul	cx
18972                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18973 4798           0246         04            add	al,4[bp]
18974 479B           80D4                   00  adc	ah,*0
18975                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18976 479E           8946         FE            mov	-2[bp],ax
18977                                           !BCC_EOS
18978                                           ! 2250  outw(0x3ce, 0x0205);
18979                                           ! Debug: list int = const $205 (used reg = )
18980 47A1           B8                   0205  mov	ax,#$205
18981 47A4           50                         push	ax
18982                                           ! Debug: list int = const $3CE (used reg = )
18983 47A5           B8                   03CE  mov	ax,#$3CE
18984 47A8           50                         push	ax
18985                                           ! Debug: func () void = outw+0 (used reg = )
18986 47A9           E8         35EA            call	_outw
18987 47AC           83C4                   04  add	sp,*4
18988                                           !BCC_EOS
18989                                           ! 2251  for(i=0;i<cheight;i++)
18990                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18991 47AF           30C0                       xor	al,al
18992 47B1           8846         FD            mov	-3[bp],al
18993                                           !BCC_EOS
18994                                           !BCC_EOS
18995                                           ! 2252   {
18996 47B4           EB           31            jmp .BF
18997                       000047B6            .C0:
18998                                           ! 2253    memsetb(0xa000,dest+i*nbcols,attr,cols);
18999                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19000 47B6           8A46         08            mov	al,8[bp]
19001 47B9           30E4                       xor	ah,ah
19002 47BB           50                         push	ax
19003                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19004 47BC           8A46         0E            mov	al,$E[bp]
19005 47BF           30E4                       xor	ah,ah
19006 47C1           50                         push	ax
19007                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
19008 47C2           8A46         0A            mov	al,$A[bp]
19009 47C5           30E4                       xor	ah,ah
19010 47C7           89C3                       mov	bx,ax
19011 47C9           8A46         FD            mov	al,-3[bp]
19012 47CC           30E4                       xor	ah,ah
19013 47CE           89D9                       mov	cx,bx
19014 47D0           F7E9                       imul	cx
19015                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19016                                           ! Debug: expression subtree swapping
19017 47D2           0346         FE            add	ax,-2[bp]
19018                                           ! Debug: list unsigned int = ax+0 (used reg = )
19019 47D5           50                         push	ax
19020                                           ! Debug: list unsigned int = const $A000 (used reg = )
19021 47D6           B8                   A000  mov	ax,#$A000
19022 47D9           50                         push	ax
19023                                           ! Debug: func () void = memsetb+0 (used reg = )
19024 47DA           E8         3493            call	_memsetb
19025 47DD           83C4                   08  add	sp,*8
19026                                           !BCC_EOS
19027                                           ! 2254   }
19028                                           ! 2255  outw(0x3ce, 0x0005);
19029                       000047E0            .BE:
19030                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19031 47E0           8A46         FD            mov	al,-3[bp]
19032 47E3           40                         inc	ax
19033 47E4           8846         FD            mov	-3[bp],al
19034                       000047E7            .BF:
19035                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19036 47E7           8A46         FD            mov	al,-3[bp]
19037 47EA           3A46         0C            cmp	al,$C[bp]
19038 47ED           72           C7            jb 	.C0
19039                       000047EF            .C1:
19040                       000047EF            .BD:
19041                                           ! Debug: list int = const 5 (used reg = )
19042 47EF           B8                   0005  mov	ax,*5
19043 47F2           50                         push	ax
19044                                           ! Debug: list int = const $3CE (used reg = )
19045 47F3           B8                   03CE  mov	ax,#$3CE
19046 47F6           50                         push	ax
19047                                           ! Debug: func () void = outw+0 (used reg = )
19048 47F7           E8         359C            call	_outw
19049 47FA           83C4                   04  add	sp,*4
19050                                           !BCC_EOS
19051                                           ! 2256 }
19052 47FD           89EC                       mov	sp,bp
19053 47FF           5D                         pop	bp
19054 4800           C3                         ret
19055                                           ! 2257 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
19056                                           ! Register BX used in function vgamem_fill_pl4
19057                                           ! 2258 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
19058                       00004801            _vgamem_copy_cga:
19059                                           !BCC_EOS
19060                                           !BCC_EOS
19061                                           !BCC_EOS
19062                                           !BCC_EOS
19063                                           !BCC_EOS
19064                                           !BCC_EOS
19065                                           ! 2259 {
19066                                           ! 2260  Bit16u src,dest;
19067                                           !BCC_EOS
19068                                           ! 2261  Bit8u i;
19069                                           !BCC_EOS
19070                                           ! 2262  src=((ysrc*cheight*nbcols)>>1)+xstart;
19071 4801           55                         push	bp
19072 4802           89E5                       mov	bp,sp
19073 4804           83C4                   FA  add	sp,*-6
19074                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
19075 4807           8A46         0E            mov	al,$E[bp]
19076 480A           30E4                       xor	ah,ah
19077 480C           89C3                       mov	bx,ax
19078 480E           8A46         06            mov	al,6[bp]
19079 4811           30E4                       xor	ah,ah
19080 4813           89D9                       mov	cx,bx
19081 4815           F7E9                       imul	cx
19082                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19083 4817           89C3                       mov	bx,ax
19084 4819           8A46         0C            mov	al,$C[bp]
19085 481C           30E4                       xor	ah,ah
19086 481E           93                         xchg	ax,bx
19087 481F           89D9                       mov	cx,bx
19088 4821           F7E9                       imul	cx
19089                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19090 4823           D1E8                       shr	ax,*1
19091                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19092 4825           0246         04            add	al,4[bp]
19093 4828           80D4                   00  adc	ah,*0
19094                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
19095 482B           8946         FE            mov	-2[bp],ax
19096                                           !BCC_EOS
19097                                           ! 2263  dest=((ydest*cheight*nbcols)>>1)+xstart;
19098                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
19099 482E           8A46         0E            mov	al,$E[bp]
19100 4831           30E4                       xor	ah,ah
19101 4833           89C3                       mov	bx,ax
19102 4835           8A46         08            mov	al,8[bp]
19103 4838           30E4                       xor	ah,ah
19104 483A           89D9                       mov	cx,bx
19105 483C           F7E9                       imul	cx
19106                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19107 483E           89C3                       mov	bx,ax
19108 4840           8A46         0C            mov	al,$C[bp]
19109 4843           30E4                       xor	ah,ah
19110 4845           93                         xchg	ax,bx
19111 4846           89D9                       mov	cx,bx
19112 4848           F7E9                       imul	cx
19113                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19114 484A           D1E8                       shr	ax,*1
19115                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19116 484C           0246         04            add	al,4[bp]
19117 484F           80D4                   00  adc	ah,*0
19118                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
19119 4852           8946         FC            mov	-4[bp],ax
19120                                           !BCC_EOS
19121                                           ! 2264  for(i=0;i<cheight;i++)
19122                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
19123 4855           30C0                       xor	al,al
19124 4857           8846         FB            mov	-5[bp],al
19125                                           !BCC_EOS
19126                                           !BCC_EOS
19127                                           ! 2265   {
19128 485A           E9         00A8            br 	.C4
19129                       0000485D            .C5:
19130                                           ! 2266    if (i & 1)
19131                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
19132 485D           8A46         FB            mov	al,-5[bp]
19133 4860           24                     01  and	al,*1
19134 4862           84C0                       test	al,al
19135 4864           74           56            je  	.C6
19136                       00004866            .C7:
19137                                           ! 2267      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
19138                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19139 4866           8A46         0A            mov	al,$A[bp]
19140 4869           30E4                       xor	ah,ah
19141 486B           50                         push	ax
19142                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19143 486C           8A46         FB            mov	al,-5[bp]
19144 486F           30E4                       xor	ah,ah
19145 4871           D1E8                       shr	ax,*1
19146                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19147 4873           89C3                       mov	bx,ax
19148 4875           8A46         0C            mov	al,$C[bp]
19149 4878           30E4                       xor	ah,ah
19150 487A           93                         xchg	ax,bx
19151 487B           89D9                       mov	cx,bx
19152 487D           F7E9                       imul	cx
19153 487F           50                         push	ax
19154                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19155                                           ! Debug: expression subtree swapping
19156 4880           8B46         FE            mov	ax,-2[bp]
19157                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19158 4883           05                   2000  add	ax,#$2000
19159 4886           0346         F6            add	ax,-$A[bp]
19160 4889           44                         inc	sp
19161 488A           44                         inc	sp
19162                                           ! Debug: list unsigned int = ax+0 (used reg = )
19163 488B           50                         push	ax
19164                                           ! Debug: list unsigned int = const $B800 (used reg = )
19165 488C           B8                   B800  mov	ax,#$B800
19166 488F           50                         push	ax
19167                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19168 4890           8A46         FB            mov	al,-5[bp]
19169 4893           30E4                       xor	ah,ah
19170 4895           D1E8                       shr	ax,*1
19171                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19172 4897           89C3                       mov	bx,ax
19173 4899           8A46         0C            mov	al,$C[bp]
19174 489C           30E4                       xor	ah,ah
19175 489E           93                         xchg	ax,bx
19176 489F           89D9                       mov	cx,bx
19177 48A1           F7E9                       imul	cx
19178 48A3           50                         push	ax
19179                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19180                                           ! Debug: expression subtree swapping
19181 48A4           8B46         FC            mov	ax,-4[bp]
19182                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19183 48A7           05                   2000  add	ax,#$2000
19184 48AA           0346         F2            add	ax,-$E[bp]
19185 48AD           44                         inc	sp
19186 48AE           44                         inc	sp
19187                                           ! Debug: list unsigned int = ax+0 (used reg = )
19188 48AF           50                         push	ax
19189                                           ! Debug: list unsigned int = const $B800 (used reg = )
19190 48B0           B8                   B800  mov	ax,#$B800
19191 48B3           50                         push	ax
19192                                           ! Debug: func () void = memcpyb+0 (used reg = )
19193 48B4           E8         3403            call	_memcpyb
19194 48B7           83C4                   0A  add	sp,*$A
19195                                           !BCC_EOS
19196                                           ! 2268    else
19197                                           ! 2269      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19198 48BA           EB           42            jmp .C8
19199                       000048BC            .C6:
19200                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19201 48BC           8A46         0A            mov	al,$A[bp]
19202 48BF           30E4                       xor	ah,ah
19203 48C1           50                         push	ax
19204                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19205 48C2           8A46         FB            mov	al,-5[bp]
19206 48C5           30E4                       xor	ah,ah
19207 48C7           D1E8                       shr	ax,*1
19208                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19209 48C9           89C3                       mov	bx,ax
19210 48CB           8A46         0C            mov	al,$C[bp]
19211 48CE           30E4                       xor	ah,ah
19212 48D0           93                         xchg	ax,bx
19213 48D1           89D9                       mov	cx,bx
19214 48D3           F7E9                       imul	cx
19215                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19216                                           ! Debug: expression subtree swapping
19217 48D5           0346         FE            add	ax,-2[bp]
19218                                           ! Debug: list unsigned int = ax+0 (used reg = )
19219 48D8           50                         push	ax
19220                                           ! Debug: list unsigned int = const $B800 (used reg = )
19221 48D9           B8                   B800  mov	ax,#$B800
19222 48DC           50                         push	ax
19223                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19224 48DD           8A46         FB            mov	al,-5[bp]
19225 48E0           30E4                       xor	ah,ah
19226 48E2           D1E8                       shr	ax,*1
19227                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19228 48E4           89C3                       mov	bx,ax
19229 48E6           8A46         0C            mov	al,$C[bp]
19230 48E9           30E4                       xor	ah,ah
19231 48EB           93                         xchg	ax,bx
19232 48EC           89D9                       mov	cx,bx
19233 48EE           F7E9                       imul	cx
19234                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19235                                           ! Debug: expression subtree swapping
19236 48F0           0346         FC            add	ax,-4[bp]
19237                                           ! Debug: list unsigned int = ax+0 (used reg = )
19238 48F3           50                         push	ax
19239                                           ! Debug: list unsigned int = const $B800 (used reg = )
19240 48F4           B8                   B800  mov	ax,#$B800
19241 48F7           50                         push	ax
19242                                           ! Debug: func () void = memcpyb+0 (used reg = )
19243 48F8           E8         33BF            call	_memcpyb
19244 48FB           83C4                   0A  add	sp,*$A
19245                                           !BCC_EOS
19246                                           ! 2270   }
19247                       000048FE            .C8:
19248                                           ! 2271 }
19249                       000048FE            .C3:
19250                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19251 48FE           8A46         FB            mov	al,-5[bp]
19252 4901           40                         inc	ax
19253 4902           8846         FB            mov	-5[bp],al
19254                       00004905            .C4:
19255                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19256 4905           8A46         FB            mov	al,-5[bp]
19257 4908           3A46         0E            cmp	al,$E[bp]
19258 490B         0F82         FF4E            blo 	.C5
19259                       0000490F            .C9:
19260                       0000490F            .C2:
19261 490F           89EC                       mov	sp,bp
19262 4911           5D                         pop	bp
19263 4912           C3                         ret
19264                                           ! 2272 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19265                                           ! Register BX used in function vgamem_copy_cga
19266                                           ! 2273 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19267                       00004913            _vgamem_fill_cga:
19268                                           !BCC_EOS
19269                                           !BCC_EOS
19270                                           !BCC_EOS
19271                                           !BCC_EOS
19272                                           !BCC_EOS
19273                                           !BCC_EOS
19274                                           ! 2274 {
19275                                           ! 2275  Bit16u dest;
19276                                           !BCC_EOS
19277                                           ! 2276  Bit8u i;
19278                                           !BCC_EOS
19279                                           ! 2277  dest=((ystart*cheight*nbcols)>>1)+xstart;
19280 4913           55                         push	bp
19281 4914           89E5                       mov	bp,sp
19282 4916           83C4                   FC  add	sp,*-4
19283                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19284 4919           8A46         0C            mov	al,$C[bp]
19285 491C           30E4                       xor	ah,ah
19286 491E           89C3                       mov	bx,ax
19287 4920           8A46         06            mov	al,6[bp]
19288 4923           30E4                       xor	ah,ah
19289 4925           89D9                       mov	cx,bx
19290 4927           F7E9                       imul	cx
19291                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19292 4929           89C3                       mov	bx,ax
19293 492B           8A46         0A            mov	al,$A[bp]
19294 492E           30E4                       xor	ah,ah
19295 4930           93                         xchg	ax,bx
19296 4931           89D9                       mov	cx,bx
19297 4933           F7E9                       imul	cx
19298                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19299 4935           D1E8                       shr	ax,*1
19300                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19301 4937           0246         04            add	al,4[bp]
19302 493A           80D4                   00  adc	ah,*0
19303                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19304 493D           8946         FE            mov	-2[bp],ax
19305                                           !BCC_EOS
19306                                           ! 2278  for(i=0;i<cheight;i++)
19307                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19308 4940           30C0                       xor	al,al
19309 4942           8846         FD            mov	-3[bp],al
19310                                           !BCC_EOS
19311                                           !BCC_EOS
19312                                           ! 2279   {
19313 4945           EB           75            jmp .CC
19314                       00004947            .CD:
19315                                           ! 2280    if (i & 1)
19316                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19317 4947           8A46         FD            mov	al,-3[bp]
19318 494A           24                     01  and	al,*1
19319 494C           84C0                       test	al,al
19320 494E           74           38            je  	.CE
19321                       00004950            .CF:
19322                                           ! 2281      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19323                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19324 4950           8A46         08            mov	al,8[bp]
19325 4953           30E4                       xor	ah,ah
19326 4955           50                         push	ax
19327                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19328 4956           8A46         0E            mov	al,$E[bp]
19329 4959           30E4                       xor	ah,ah
19330 495B           50                         push	ax
19331                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19332 495C           8A46         FD            mov	al,-3[bp]
19333 495F           30E4                       xor	ah,ah
19334 4961           D1E8                       shr	ax,*1
19335                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19336 4963           89C3                       mov	bx,ax
19337 4965           8A46         0A            mov	al,$A[bp]
19338 4968           30E4                       xor	ah,ah
19339 496A           93                         xchg	ax,bx
19340 496B           89D9                       mov	cx,bx
19341 496D           F7E9                       imul	cx
19342 496F           50                         push	ax
19343                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19344                                           ! Debug: expression subtree swapping
19345 4970           8B46         FE            mov	ax,-2[bp]
19346                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19347 4973           05                   2000  add	ax,#$2000
19348 4976           0346         F6            add	ax,-$A[bp]
19349 4979           44                         inc	sp
19350 497A           44                         inc	sp
19351                                           ! Debug: list unsigned int = ax+0 (used reg = )
19352 497B           50                         push	ax
19353                                           ! Debug: list unsigned int = const $B800 (used reg = )
19354 497C           B8                   B800  mov	ax,#$B800
19355 497F           50                         push	ax
19356                                           ! Debug: func () void = memsetb+0 (used reg = )
19357 4980           E8         32ED            call	_memsetb
19358 4983           83C4                   08  add	sp,*8
19359                                           !BCC_EOS
19360                                           ! 2282    else
19361                                           ! 2283      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19362 4986           EB           2D            jmp .D0
19363                       00004988            .CE:
19364                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19365 4988           8A46         08            mov	al,8[bp]
19366 498B           30E4                       xor	ah,ah
19367 498D           50                         push	ax
19368                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19369 498E           8A46         0E            mov	al,$E[bp]
19370 4991           30E4                       xor	ah,ah
19371 4993           50                         push	ax
19372                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19373 4994           8A46         FD            mov	al,-3[bp]
19374 4997           30E4                       xor	ah,ah
19375 4999           D1E8                       shr	ax,*1
19376                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19377 499B           89C3                       mov	bx,ax
19378 499D           8A46         0A            mov	al,$A[bp]
19379 49A0           30E4                       xor	ah,ah
19380 49A2           93                         xchg	ax,bx
19381 49A3           89D9                       mov	cx,bx
19382 49A5           F7E9                       imul	cx
19383                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19384                                           ! Debug: expression subtree swapping
19385 49A7           0346         FE            add	ax,-2[bp]
19386                                           ! Debug: list unsigned int = ax+0 (used reg = )
19387 49AA           50                         push	ax
19388                                           ! Debug: list unsigned int = const $B800 (used reg = )
19389 49AB           B8                   B800  mov	ax,#$B800
19390 49AE           50                         push	ax
19391                                           ! Debug: func () void = memsetb+0 (used reg = )
19392 49AF           E8         32BE            call	_memsetb
19393 49B2           83C4                   08  add	sp,*8
19394                                           !BCC_EOS
19395                                           ! 2284   }
19396                       000049B5            .D0:
19397                                           ! 2285 }
19398                       000049B5            .CB:
19399                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19400 49B5           8A46         FD            mov	al,-3[bp]
19401 49B8           40                         inc	ax
19402 49B9           8846         FD            mov	-3[bp],al
19403                       000049BC            .CC:
19404                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19405 49BC           8A46         FD            mov	al,-3[bp]
19406 49BF           3A46         0C            cmp	al,$C[bp]
19407 49C2           72           83            jb 	.CD
19408                       000049C4            .D1:
19409                       000049C4            .CA:
19410 49C4           89EC                       mov	sp,bp
19411 49C6           5D                         pop	bp
19412 49C7           C3                         ret
19413                                           ! 2286 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19414                                           ! Register BX used in function vgamem_fill_cga
19415                                           ! 2287 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19416                       000049C8            _biosfn_scroll:
19417                                           !BCC_EOS
19418                                           !BCC_EOS
19419                                           !BCC_EOS
19420                                           !BCC_EOS
19421                                           !BCC_EOS
19422                                           !BCC_EOS
19423                                           !BCC_EOS
19424                                           !BCC_EOS
19425                                           ! 2288 {
19426                                           ! 2289  Bit8u mode,line,cheight,bpp,cols;
19427                                           !BCC_EOS
19428                                           ! 2290  Bit16u nbcols,nbrows,i;
19429                                           !BCC_EOS
19430                                           ! 2291  Bit16u address;
19431                                           !BCC_EOS
19432                                           ! 2292  if(rul>rlr)return;
19433 49C8           55                         push	bp
19434 49C9           89E5                       mov	bp,sp
19435 49CB           83C4                   F2  add	sp,*-$E
19436                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19437 49CE           8A46         08            mov	al,8[bp]
19438 49D1           3A46         0C            cmp	al,$C[bp]
19439 49D4           76           04            jbe 	.D2
19440                       000049D6            .D3:
19441 49D6           89EC                       mov	sp,bp
19442 49D8           5D                         pop	bp
19443 49D9           C3                         ret
19444                                           !BCC_EOS
19445                                           ! 2293  if(cul>clr)return;
19446                       000049DA            .D2:
19447                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19448 49DA           8A46         0A            mov	al,$A[bp]
19449 49DD           3A46         0E            cmp	al,$E[bp]
19450 49E0           76           04            jbe 	.D4
19451                       000049E2            .D5:
19452 49E2           89EC                       mov	sp,bp
19453 49E4           5D                         pop	bp
19454 49E5           C3                         ret
19455                                           !BCC_EOS
19456                                           ! 2294  mode=read_byte(0x40,0x49);
19457                       000049E6            .D4:
19458                                           ! Debug: list int = const $49 (used reg = )
19459 49E6           B8                   0049  mov	ax,*$49
19460 49E9           50                         push	ax
19461                                           ! Debug: list int = const $40 (used reg = )
19462 49EA           B8                   0040  mov	ax,*$40
19463 49ED           50                         push	ax
19464                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19465 49EE           E8         3329            call	_read_byte
19466 49F1           83C4                   04  add	sp,*4
19467                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19468 49F4           8846         FF            mov	-1[bp],al
19469                                           !BCC_EOS
19470                                           ! 2295  line=find_vga_entry(mode);
19471                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19472 49F7           8A46         FF            mov	al,-1[bp]
19473 49FA           30E4                       xor	ah,ah
19474 49FC           50                         push	ax
19475                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19476 49FD           E8         322E            call	_find_vga_entry
19477 4A00           44                         inc	sp
19478 4A01           44                         inc	sp
19479                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19480 4A02           8846         FE            mov	-2[bp],al
19481                                           !BCC_EOS
19482                                           ! 2296  if(line==0xFF)return;
19483                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19484 4A05           8A46         FE            mov	al,-2[bp]
19485 4A08           3C                     FF  cmp	al,#$FF
19486 4A0A           75           04            jne 	.D6
19487                       00004A0C            .D7:
19488 4A0C           89EC                       mov	sp,bp
19489 4A0E           5D                         pop	bp
19490 4A0F           C3                         ret
19491                                           !BCC_EOS
19492                                           ! 2297  nbrows=read_byte(0x40,0x84)+1;
19493                       00004A10            .D6:
19494                                           ! Debug: list int = const $84 (used reg = )
19495 4A10           B8                   0084  mov	ax,#$84
19496 4A13           50                         push	ax
19497                                           ! Debug: list int = const $40 (used reg = )
19498 4A14           B8                   0040  mov	ax,*$40
19499 4A17           50                         push	ax
19500                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19501 4A18           E8         32FF            call	_read_byte
19502 4A1B           83C4                   04  add	sp,*4
19503                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19504 4A1E           30E4                       xor	ah,ah
19505                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19506 4A20           40                         inc	ax
19507 4A21           8946         F6            mov	-$A[bp],ax
19508                                           !BCC_EOS
19509                                           ! 2298  nbcols=read_word(0x40,0x4A);
19510                                           ! Debug: list int = const $4A (used reg = )
19511 4A24           B8                   004A  mov	ax,*$4A
19512 4A27           50                         push	ax
19513                                           ! Debug: list int = const $40 (used reg = )
19514 4A28           B8                   0040  mov	ax,*$40
19515 4A2B           50                         push	ax
19516                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19517 4A2C           E8         32FE            call	_read_word
19518 4A2F           83C4                   04  add	sp,*4
19519                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19520 4A32           8946         F8            mov	-8[bp],ax
19521                                           !BCC_EOS
19522                                           ! 2299  if(page==0xFF)
19523                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19524 4A35           8A46         10            mov	al,$10[bp]
19525 4A38           3C                     FF  cmp	al,#$FF
19526 4A3A           75           11            jne 	.D8
19527                       00004A3C            .D9:
19528                                           ! 2300   page=read_byte(0x40,0x62);
19529                                           ! Debug: list int = const $62 (used reg = )
19530 4A3C           B8                   0062  mov	ax,*$62
19531 4A3F           50                         push	ax
19532                                           ! Debug: list int = const $40 (used reg = )
19533 4A40           B8                   0040  mov	ax,*$40
19534 4A43           50                         push	ax
19535                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19536 4A44           E8         32D3            call	_read_byte
19537 4A47           83C4                   04  add	sp,*4
19538                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19539 4A4A           8846         10            mov	$10[bp],al
19540                                           !BCC_EOS
19541                                           ! 2301  if(rlr>=nbr
19542                       00004A4D            .D8:
19543                                           ! 2301 ows)rlr=nbrows-1;
19544                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19545 4A4D           8A46         0C            mov	al,$C[bp]
19546 4A50           30E4                       xor	ah,ah
19547 4A52           3B46         F6            cmp	ax,-$A[bp]
19548 4A55           72           07            jb  	.DA
19549                       00004A57            .DB:
19550                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19551 4A57           8B46         F6            mov	ax,-$A[bp]
19552                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19553 4A5A           48                         dec	ax
19554 4A5B           8846         0C            mov	$C[bp],al
19555                                           !BCC_EOS
19556                                           ! 2302  if(clr>=nbcols)clr=nbcols-1;
19557                       00004A5E            .DA:
19558                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19559 4A5E           8A46         0E            mov	al,$E[bp]
19560 4A61           30E4                       xor	ah,ah
19561 4A63           3B46         F8            cmp	ax,-8[bp]
19562 4A66           72           07            jb  	.DC
19563                       00004A68            .DD:
19564                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19565 4A68           8B46         F8            mov	ax,-8[bp]
19566                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19567 4A6B           48                         dec	ax
19568 4A6C           8846         0E            mov	$E[bp],al
19569                                           !BCC_EOS
19570                                           ! 2303  if(nblines>nbrows)nblines=0;
19571                       00004A6F            .DC:
19572                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19573 4A6F           8A46         04            mov	al,4[bp]
19574 4A72           30E4                       xor	ah,ah
19575 4A74           3B46         F6            cmp	ax,-$A[bp]
19576 4A77           76           05            jbe 	.DE
19577                       00004A79            .DF:
19578                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19579 4A79           30C0                       xor	al,al
19580 4A7B           8846         04            mov	4[bp],al
19581                                           !BCC_EOS
19582                                           ! 2304  cols=clr-cul+1;
19583                       00004A7E            .DE:
19584                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19585 4A7E           8A46         0E            mov	al,$E[bp]
19586 4A81           30E4                       xor	ah,ah
19587 4A83           2A46         0A            sub	al,$A[bp]
19588 4A86           80DC                   00  sbb	ah,*0
19589                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19590                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19591 4A89           40                         inc	ax
19592 4A8A           8846         FB            mov	-5[bp],al
19593                                           !BCC_EOS
19594                                           ! 2305  if(vga_modes[line].class==0x00)
19595                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19596 4A8D           8A46         FE            mov	al,-2[bp]
19597 4A90           30E4                       xor	ah,ah
19598 4A92           B1                     03  mov	cl,*3
19599 4A94           D3E0                       shl	ax,cl
19600 4A96           89C3                       mov	bx,ax
19601 4A98           81C3                 020B  add	bx,#_vga_modes
19602                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19603 4A9C           8A47         01            mov	al,1[bx]
19604 4A9F           84C0                       test	al,al
19605 4AA1         0F85         0269            bne 	.E0
19606                       00004AA5            .E1:
19607                                           ! 2306   {
19608                                           ! 2307    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19609                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19610 4AA5           8B46         F8            mov	ax,-8[bp]
19611 4AA8           8B4E         F6            mov	cx,-$A[bp]
19612 4AAB           F7E9                       imul	cx
19613                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19614 4AAD           D1E0                       shl	ax,*1
19615                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19616 4AAF           0C                     FF  or	al,#$FF
19617                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19618                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19619 4AB1           89C3                       mov	bx,ax
19620 4AB3           8A46         10            mov	al,$10[bp]
19621 4AB6           30E4                       xor	ah,ah
19622 4AB8           93                         xchg	ax,bx
19623 4AB9           40                         inc	ax
19624 4ABA           89D9                       mov	cx,bx
19625 4ABC           F7E9                       imul	cx
19626                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19627 4ABE           8946         F2            mov	-$E[bp],ax
19628                                           !BCC_EOS
19629                                           ! 2308    printf("Scroll, address %04x (%04x %04x %02x)\n",address,nbrows,nbcols,page);
19630                                           ! Debug: list unsigned char page = [S+$10+$E] (used reg = )
19631 4AC1           8A46         10            mov	al,$10[bp]
19632 4AC4           30E4                       xor	ah,ah
19633 4AC6           50                         push	ax
19634                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19635 4AC7           FF76         F8            push	-8[bp]
19636                                           ! Debug: list unsigned short nbrows = [S+$14-$C] (used reg = )
19637 4ACA           FF76         F6            push	-$A[bp]
19638                                           ! Debug: list unsigned short address = [S+$16-$10] (used reg = )
19639 4ACD           FF76         F2            push	-$E[bp]
19640                                           ! Debug: list * char = .E2+0 (used reg = )
19641 4AD0           BB                   A08B  mov	bx,#.E2
19642 4AD3           53                         push	bx
19643                                           ! Debug: func () void = printf+0 (used reg = )
19644 4AD4           E8         32EE            call	_printf
19645 4AD7           83C4                   0A  add	sp,*$A
19646                                           !BCC_EOS
19647                                           ! 2309    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19648                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19649 4ADA           8A46         04            mov	al,4[bp]
19650 4ADD           84C0                       test	al,al
19651 4ADF           75           67            jne 	.E3
19652                       00004AE1            .E8:
19653                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19654 4AE1           8A46         08            mov	al,8[bp]
19655 4AE4           84C0                       test	al,al
19656 4AE6           75           60            jne 	.E3
19657                       00004AE8            .E7:
19658                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19659 4AE8           8A46         0A            mov	al,$A[bp]
19660 4AEB           84C0                       test	al,al
19661 4AED           75           59            jne 	.E3
19662                       00004AEF            .E6:
19663                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19664 4AEF           8B46         F6            mov	ax,-$A[bp]
19665                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19666                                           ! Debug: expression subtree swapping
19667 4AF2           48                         dec	ax
19668 4AF3           50                         push	ax
19669 4AF4           8A46         0C            mov	al,$C[bp]
19670 4AF7           30E4                       xor	ah,ah
19671 4AF9           3B46         F0            cmp	ax,-$10[bp]
19672 4AFC           8D66         F2            lea	sp,-$E[bp]
19673 4AFF           75           47            jne 	.E3
19674                       00004B01            .E5:
19675                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19676 4B01           8B46         F8            mov	ax,-8[bp]
19677                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19678                                           ! Debug: expression subtree swapping
19679 4B04           48                         dec	ax
19680 4B05           50                         push	ax
19681 4B06           8A46         0E            mov	al,$E[bp]
19682 4B09           30E4                       xor	ah,ah
19683 4B0B           3B46         F0            cmp	ax,-$10[bp]
19684 4B0E           8D66         F2            lea	sp,-$E[bp]
19685 4B11           75           35            jne 	.E3
19686                       00004B13            .E4:
19687                                           ! 2310     {
19688                                           ! 2311      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19689                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19690 4B13           8B46         F6            mov	ax,-$A[bp]
19691 4B16           8B4E         F8            mov	cx,-8[bp]
19692 4B19           F7E9                       imul	cx
19693                                           ! Debug: list unsigned int = ax+0 (used reg = )
19694 4B1B           50                         push	ax
19695                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19696 4B1C           8A46         06            mov	al,6[bp]
19697 4B1F           30E4                       xor	ah,ah
19698                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19699 4B21           B9                   0100  mov	cx,#$100
19700 4B24           F7E9                       imul	cx
19701                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19702                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19703 4B26           05                   0020  add	ax,*$20
19704 4B29           50                         push	ax
19705                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19706 4B2A           FF76         F2            push	-$E[bp]
19707                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19708 4B2D           8A46         FE            mov	al,-2[bp]
19709 4B30           30E4                       xor	ah,ah
19710 4B32           B1                     03  mov	cl,*3
19711 4B34           D3E0                       shl	ax,cl
19712 4B36           89C3                       mov	bx,ax
19713 4B38           81C3                 020B  add	bx,#_vga_modes
19714                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19715 4B3C           FF77         04            push	4[bx]
19716                                           ! Debug: func () void = memsetw+0 (used reg = )
19717 4B3F           E8         3153            call	_memsetw
19718 4B42           83C4                   08  add	sp,*8
19719                                           !BCC_EOS
19720                                           ! 2312     }
19721                                           ! 2313    else
19722                                           ! 2314     {
19723 4B45           E9         01C3            br 	.E9
19724                       00004B48            .E3:
19725                                           ! 2315      if(dir==1)
19726                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19727 4B48           8A46         12            mov	al,$12[bp]
19728 4B4B           3C                     01  cmp	al,*1
19729 4B4D         0F85         00DC            bne 	.EA
19730                       00004B51            .EB:
19731                                           ! 2316       {for(i=rul;i<=rlr;i++)
19732                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19733 4B51           8A46         08            mov	al,8[bp]
19734 4B54           30E4                       xor	ah,ah
19735 4B56           8946         F4            mov	-$C[bp],ax
19736                                           !BCC_EOS
19737                                           !BCC_EOS
19738                                           ! 2317         {
19739 4B59           E9         00C2            br 	.EE
19740                       00004B5C            .EF:
19741                                           ! 2318          if((i+nblines>rlr)||(nblines==0))
19742                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19743 4B5C           8B46         F4            mov	ax,-$C[bp]
19744 4B5F           0246         04            add	al,4[bp]
19745 4B62           80D4                   00  adc	ah,*0
19746                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19747 4B65           50                         push	ax
19748 4B66           8A46         0C            mov	al,$C[bp]
19749 4B69           30E4                       xor	ah,ah
19750 4B6B           3B46         F0            cmp	ax,-$10[bp]
19751 4B6E           8D66         F2            lea	sp,-$E[bp]
19752 4B71           72           07            jb  	.F1
19753                       00004B73            .F2:
19754                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19755 4B73           8A46         04            mov	al,4[bp]
19756 4B76           84C0                       test	al,al
19757 4B78           75           42            jne 	.F0
19758                       00004B7A            .F1:
19759                                           ! 2319           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19760                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19761 4B7A           8A46         FB            mov	al,-5[bp]
19762 4B7D           30E4                       xor	ah,ah
19763 4B7F           50                         push	ax
19764                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19765 4B80           8A46         06            mov	al,6[bp]
19766 4B83           30E4                       xor	ah,ah
19767                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19768 4B85           B9                   0100  mov	cx,#$100
19769 4B88           F7E9                       imul	cx
19770                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19771                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19772 4B8A           05                   0020  add	ax,*$20
19773 4B8D           50                         push	ax
19774                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19775 4B8E           8B46         F4            mov	ax,-$C[bp]
19776 4B91           8B4E         F8            mov	cx,-8[bp]
19777 4B94           F7E9                       imul	cx
19778                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19779 4B96           0246         0A            add	al,$A[bp]
19780 4B99           80D4                   00  adc	ah,*0
19781                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19782 4B9C           D1E0                       shl	ax,*1
19783                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19784                                           ! Debug: expression subtree swapping
19785 4B9E           0346         F2            add	ax,-$E[bp]
19786                                           ! Debug: list unsigned int = ax+0 (used reg = )
19787 4BA1           50                         push	ax
19788                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19789 4BA2           8A46         FE            mov	al,-2[bp]
19790 4BA5           30E4                       xor	ah,ah
19791 4BA7           B1                     03  mov	cl,*3
19792 4BA9           D3E0                       shl	ax,cl
19793 4BAB           89C3                       mov	bx,ax
19794 4BAD           81C3                 020B  add	bx,#_vga_modes
19795                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19796 4BB1           FF77         04            push	4[bx]
19797                                           ! Debug: func () void = memsetw+0 (used reg = )
19798 4BB4           E8         30DE            call	_memsetw
19799 4BB7           83C4                   08  add	sp,*8
19800                                           !BCC_EOS
19801                                           ! 2320          else
19802                                           ! 2321           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19803 4BBA           EB           5B            jmp .F3
19804                       00004BBC            .F0:
19805                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19806 4BBC           8A46         FB            mov	al,-5[bp]
19807 4BBF           30E4                       xor	ah,ah
19808 4BC1           50                         push	ax
19809                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19810 4BC2           8B46         F4            mov	ax,-$C[bp]
19811 4BC5           0246         04            add	al,4[bp]
19812 4BC8           80D4                   00  adc	ah,*0
19813                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19814 4BCB           8B4E         F8            mov	cx,-8[bp]
19815 4BCE           F7E9                       imul	cx
19816                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19817 4BD0           0246         0A            add	al,$A[bp]
19818 4BD3           80D4                   00  adc	ah,*0
19819                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19820 4BD6           D1E0                       shl	ax,*1
19821                                           ! Debug: list unsigned int = ax+0 (used reg = )
19822 4BD8           50                         push	ax
19823                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19824 4BD9           8A46         FE            mov	al,-2[bp]
19825 4BDC           30E4                       xor	ah,ah
19826 4BDE           B1                     03  mov	cl,*3
19827 4BE0           D3E0                       shl	ax,cl
19828 4BE2           89C3                       mov	bx,ax
19829 4BE4           81C3                 020B  add	bx,#_vga_modes
19830                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19831 4BE8           FF77         04            push	4[bx]
19832                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19833 4BEB           8B46         F4            mov	ax,-$C[bp]
19834 4BEE           8B4E         F8            mov	cx,-8[bp]
19835 4BF1           F7E9                       imul	cx
19836                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19837 4BF3           0246         0A            add	al,$A[bp]
19838 4BF6           80D4                   00  adc	ah,*0
19839                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19840 4BF9           D1E0                       shl	ax,*1
19841                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19842                                           ! Debug: expression subtree swapping
19843 4BFB           0346         F2            add	ax,-$E[bp]
19844                                           ! Debug: list unsigned int = ax+0 (used reg = )
19845 4BFE           50                         push	ax
19846                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19847 4BFF           8A46         FE            mov	al,-2[bp]
19848 4C02           30E4                       xor	ah,ah
19849 4C04           B1                     03  mov	cl,*3
19850 4C06           D3E0                       shl	ax,cl
19851 4C08           89C3                       mov	bx,ax
19852 4C0A           81C3                 020B  add	bx,#_vga_modes
19853                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19854 4C0E           FF77         04            push	4[bx]
19855                                           ! Debug: func () void = memcpyw+0 (used reg = )
19856 4C11           E8         30D6            call	_memcpyw
19857 4C14           83C4                   0A  add	sp,*$A
19858                                           !BCC_EOS
19859                                           ! 2322         }
19860                       00004C17            .F3:
19861                                           ! 2323       }
19862                       00004C17            .ED:
19863                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19864 4C17           8B46         F4            mov	ax,-$C[bp]
19865 4C1A           40                         inc	ax
19866 4C1B           8946         F4            mov	-$C[bp],ax
19867                       00004C1E            .EE:
19868                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19869 4C1E           8A46         0C            mov	al,$C[bp]
19870 4C21           30E4                       xor	ah,ah
19871 4C23           3B46         F4            cmp	ax,-$C[bp]
19872 4C26         0F83         FF32            bhis	.EF
19873                       00004C2A            .F4:
19874                       00004C2A            .EC:
19875                                           ! 2324      else
19876                                           ! 2325       {for(i=rlr;i>=rul;i--)
19877 4C2A           E9         00DE            br 	.F5
19878                       00004C2D            .EA:
19879                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19880 4C2D           8A46         0C            mov	al,$C[bp]
19881 4C30           30E4                       xor	ah,ah
19882 4C32           8946         F4            mov	-$C[bp],ax
19883                                           !BCC_EOS
19884                                           !BCC_EOS
19885                                           ! 2326         {
19886 4C35           E9         00C7            br 	.F8
19887                       00004C38            .F9:
19888                                           ! 2327          if((i<rul+nblines)||(nblines==0))
19889                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19890 4C38           8A46         08            mov	al,8[bp]
19891 4C3B           30E4                       xor	ah,ah
19892 4C3D           0246         04            add	al,4[bp]
19893 4C40           80D4                   00  adc	ah,*0
19894                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19895 4C43           3B46         F4            cmp	ax,-$C[bp]
19896 4C46           77           07            ja  	.FB
19897                       00004C48            .FC:
19898                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19899 4C48           8A46         04            mov	al,4[bp]
19900 4C4B           84C0                       test	al,al
19901 4C4D           75           42            jne 	.FA
19902                       00004C4F            .FB:
19903                                           ! 2328           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19904                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19905 4C4F           8A46         FB            mov	al,-5[bp]
19906 4C52           30E4                       xor	ah,ah
19907 4C54           50                         push	ax
19908                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19909 4C55           8A46         06            mov	al,6[bp]
19910 4C58           30E4                       xor	ah,ah
19911                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19912 4C5A           B9                   0100  mov	cx,#$100
19913 4C5D           F7E9                       imul	cx
19914                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19915                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19916 4C5F           05                   0020  add	ax,*$20
19917 4C62           50                         push	ax
19918                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19919 4C63           8B46         F4            mov	ax,-$C[bp]
19920 4C66           8B4E         F8            mov	cx,-8[bp]
19921 4C69           F7E9                       imul	cx
19922                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19923 4C6B           0246         0A            add	al,$A[bp]
19924 4C6E           80D4                   00  adc	ah,*0
19925                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19926 4C71           D1E0                       shl	ax,*1
19927                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19928                                           ! Debug: expression subtree swapping
19929 4C73           0346         F2            add	ax,-$E[bp]
19930                                           ! Debug: list unsigned int = ax+0 (used reg = )
19931 4C76           50                         push	ax
19932                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19933 4C77           8A46         FE            mov	al,-2[bp]
19934 4C7A           30E4                       xor	ah,ah
19935 4C7C           B1                     03  mov	cl,*3
19936 4C7E           D3E0                       shl	ax,cl
19937 4C80           89C3                       mov	bx,ax
19938 4C82           81C3                 020B  add	bx,#_vga_modes
19939                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19940 4C86           FF77         04            push	4[bx]
19941                                           ! Debug: func () void = memsetw+0 (used reg = )
19942 4C89           E8         3009            call	_memsetw
19943 4C8C           83C4                   08  add	sp,*8
19944                                           !BCC_EOS
19945                                           ! 2329          else
19946                                           ! 2330           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19947 4C8F           EB           5B            jmp .FD
19948                       00004C91            .FA:
19949                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19950 4C91           8A46         FB            mov	al,-5[bp]
19951 4C94           30E4                       xor	ah,ah
19952 4C96           50                         push	ax
19953                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19954 4C97           8B46         F4            mov	ax,-$C[bp]
19955 4C9A           2A46         04            sub	al,4[bp]
19956 4C9D           80DC                   00  sbb	ah,*0
19957                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19958 4CA0           8B4E         F8            mov	cx,-8[bp]
19959 4CA3           F7E9                       imul	cx
19960                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19961 4CA5           0246         0A            add	al,$A[bp]
19962 4CA8           80D4                   00  adc	ah,*0
19963                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19964 4CAB           D1E0                       shl	ax,*1
19965                                           ! Debug: list unsigned int = ax+0 (used reg = )
19966 4CAD           50                         push	ax
19967                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19968 4CAE           8A46         FE            mov	al,-2[bp]
19969 4CB1           30E4                       xor	ah,ah
19970 4CB3           B1                     03  mov	cl,*3
19971 4CB5           D3E0                       shl	ax,cl
19972 4CB7           89C3                       mov	bx,ax
19973 4CB9           81C3                 020B  add	bx,#_vga_modes
19974                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19975 4CBD           FF77         04            push	4[bx]
19976                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19977 4CC0           8B46         F4            mov	ax,-$C[bp]
19978 4CC3           8B4E         F8            mov	cx,-8[bp]
19979 4CC6           F7E9                       imul	cx
19980                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19981 4CC8           0246         0A            add	al,$A[bp]
19982 4CCB           80D4                   00  adc	ah,*0
19983                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19984 4CCE           D1E0                       shl	ax,*1
19985                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19986                                           ! Debug: expression subtree swapping
19987 4CD0           0346         F2            add	ax,-$E[bp]
19988                                           ! Debug: list unsigned int = ax+0 (used reg = )
19989 4CD3           50                         push	ax
19990                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19991 4CD4           8A46         FE            mov	al,-2[bp]
19992 4CD7           30E4                       xor	ah,ah
19993 4CD9           B1                     03  mov	cl,*3
19994 4CDB           D3E0                       shl	ax,cl
19995 4CDD           89C3                       mov	bx,ax
19996 4CDF           81C3                 020B  add	bx,#_vga_modes
19997                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19998 4CE3           FF77         04            push	4[bx]
19999                                           ! Debug: func () void = memcpyw+0 (used reg = )
20000 4CE6           E8         3001            call	_memcpyw
20001 4CE9           83C4                   0A  add	sp,*$A
20002                                           !BCC_EOS
20003                                           ! 2331          if (i>rlr) break;
20004                       00004CEC            .FD:
20005                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20006 4CEC           8A46         0C            mov	al,$C[bp]
20007 4CEF           30E4                       xor	ah,ah
20008 4CF1           3B46         F4            cmp	ax,-$C[bp]
20009 4CF4           73           02            jae 	.FE
20010                       00004CF6            .FF:
20011 4CF6           EB           13            jmp .F6
20012                                           !BCC_EOS
20013                                           ! 2332         }
20014                       00004CF8            .FE:
20015                                           ! 2333       }
20016                       00004CF8            .F7:
20017                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20018 4CF8           8B46         F4            mov	ax,-$C[bp]
20019 4CFB           48                         dec	ax
20020 4CFC           8946         F4            mov	-$C[bp],ax
20021                       00004CFF            .F8:
20022                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20023 4CFF           8A46         08            mov	al,8[bp]
20024 4D02           30E4                       xor	ah,ah
20025 4D04           3B46         F4            cmp	ax,-$C[bp]
20026 4D07         0F86         FF2D            blos	.F9
20027                       00004D0B            .100:
20028                       00004D0B            .F6:
20029                                           ! 2334     }
20030                       00004D0B            .F5:
20031                                           ! 2335   }
20032                       00004D0B            .E9:
20033                                           ! 2336  else
20034                                           ! 2337   {
20035 4D0B           E9         03E4            br 	.101
20036                       00004D0E            .E0:
20037                                           ! 2338    cheight=video_param_table[line_to_vpti[line]].cheight;
20038                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
20039 4D0E           8A46         FE            mov	al,-2[bp]
20040 4D11           30E4                       xor	ah,ah
20041 4D13           89C3                       mov	bx,ax
20042                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
20043 4D15           8A87       028B            mov	al,_line_to_vpti[bx]
20044 4D19           30E4                       xor	ah,ah
20045 4D1B           B1                     06  mov	cl,*6
20046 4D1D           D3E0                       shl	ax,cl
20047 4D1F           89C3                       mov	bx,ax
20048 4D21           81C3                 029F  add	bx,#_video_param_table
20049                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
20050 4D25           8A47         02            mov	al,2[bx]
20051 4D28           8846         FD            mov	-3[bp],al
20052                                           !BCC_EOS
20053                                           ! 2339    switch(vga_modes[line].memmodel)
20054                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20055 4D2B           8A46         FE            mov	al,-2[bp]
20056 4D2E           30E4                       xor	ah,ah
20057 4D30           B1                     03  mov	cl,*3
20058 4D32           D3E0                       shl	ax,cl
20059 4D34           89C3                       mov	bx,ax
20060 4D36           81C3                 020B  add	bx,#_vga_modes
20061 4D3A           8A47         02            mov	al,2[bx]
20062                                           ! 2340     {
20063 4D3D           E9         039E            br 	.104
20064                                           ! 2341      case 0x04:
20065                                           ! 2342      case 0x03:
20066                       00004D40            .105:
20067                                           ! 2343        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20068                       00004D40            .106:
20069                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20070 4D40           8A46         04            mov	al,4[bp]
20071 4D43           84C0                       test	al,al
20072 4D45         0F85         0089            bne 	.107
20073                       00004D49            .10C:
20074                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20075 4D49           8A46         08            mov	al,8[bp]
20076 4D4C           84C0                       test	al,al
20077 4D4E         0F85         0080            bne 	.107
20078                       00004D52            .10B:
20079                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20080 4D52           8A46         0A            mov	al,$A[bp]
20081 4D55           84C0                       test	al,al
20082 4D57           75           79            jne 	.107
20083                       00004D59            .10A:
20084                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20085 4D59           8B46         F6            mov	ax,-$A[bp]
20086                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20087                                           ! Debug: expression subtree swapping
20088 4D5C           48                         dec	ax
20089 4D5D           50                         push	ax
20090 4D5E           8A46         0C            mov	al,$C[bp]
20091 4D61           30E4                       xor	ah,ah
20092 4D63           3B46         F0            cmp	ax,0+..FFFC[bp]
20093 4D66           8D66         F2            lea	sp,2+..FFFC[bp]
20094 4D69           75           67            jne 	.107
20095                       00004D6B            .109:
20096                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20097 4D6B           8B46         F8            mov	ax,-8[bp]
20098                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20099                                           ! Debug: expression subtree swapping
20100 4D6E           48                         dec	ax
20101 4D6F           50                         push	ax
20102 4D70           8A46         0E            mov	al,$E[bp]
20103 4D73           30E4                       xor	ah,ah
20104 4D75           3B46         F0            cmp	ax,0+..FFFC[bp]
20105 4D78           8D66         F2            lea	sp,2+..FFFC[bp]
20106 4D7B           75           55            jne 	.107
20107                       00004D7D            .108:
20108                                           ! 2344         {
20109                                           ! 2345          outw(0x3ce, 0x0205);
20110                                           ! Debug: list int = const $205 (used reg = )
20111 4D7D           B8                   0205  mov	ax,#$205
20112 4D80           50                         push	ax
20113                                           ! Debug: list int = const $3CE (used reg = )
20114 4D81           B8                   03CE  mov	ax,#$3CE
20115 4D84           50                         push	ax
20116                                           ! Debug: func () void = outw+0 (used reg = )
20117 4D85           E8         300E            call	_outw
20118 4D88           83C4                   04  add	sp,*4
20119                                           !BCC_EOS
20120                                           ! 2346          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
20121                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20122 4D8B           8B46         F6            mov	ax,-$A[bp]
20123 4D8E           8B4E         F8            mov	cx,-8[bp]
20124 4D91           F7E9                       imul	cx
20125                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20126 4D93           89C3                       mov	bx,ax
20127 4D95           8A46         FD            mov	al,-3[bp]
20128 4D98           30E4                       xor	ah,ah
20129 4D9A           93                         xchg	ax,bx
20130 4D9B           89D9                       mov	cx,bx
20131 4D9D           F7E9                       imul	cx
20132                                           ! Debug: list unsigned int = ax+0 (used reg = )
20133 4D9F           50                         push	ax
20134                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20135 4DA0           8A46         06            mov	al,6[bp]
20136 4DA3           30E4                       xor	ah,ah
20137 4DA5           50                         push	ax
20138                                           ! Debug: list int = const 0 (used reg = )
20139 4DA6           31C0                       xor	ax,ax
20140 4DA8           50                         push	ax
20141                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20142 4DA9           8A46         FE            mov	al,-2[bp]
20143 4DAC           30E4                       xor	ah,ah
20144 4DAE           B1                     03  mov	cl,*3
20145 4DB0           D3E0                       shl	ax,cl
20146 4DB2           89C3                       mov	bx,ax
20147 4DB4           81C3                 020B  add	bx,#_vga_modes
20148                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20149 4DB8           FF77         04            push	4[bx]
20150                                           ! Debug: func () void = memsetb+0 (used reg = )
20151 4DBB           E8         2EB2            call	_memsetb
20152 4DBE           83C4                   08  add	sp,*8
20153                                           !BCC_EOS
20154                                           ! 2347          outw(0x3ce, 0x0005);
20155                                           ! Debug: list int = const 5 (used reg = )
20156 4DC1           B8                   0005  mov	ax,*5
20157 4DC4           50                         push	ax
20158                                           ! Debug: list int = const $3CE (used reg = )
20159 4DC5           B8                   03CE  mov	ax,#$3CE
20160 4DC8           50                         push	ax
20161                                           ! Debug: func () void = outw+0 (used reg = )
20162 4DC9           E8         2FCA            call	_outw
20163 4DCC           83C4                   04  add	sp,*4
20164                                           !BCC_EOS
20165                                           ! 2348         }
20166                                           ! 2349        else
20167                                           ! 2350         {
20168 4DCF           E9         0122            br 	.10D
20169                       00004DD2            .107:
20170                                           ! 2351          if(dir==1)
20171                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20172 4DD2           8A46         12            mov	al,$12[bp]
20173 4DD5           3C                     01  cmp	al,*1
20174 4DD7         0F85         008A            bne 	.10E
20175                       00004DDB            .10F:
20176                                           ! 2352           {for(i=rul;i<=rlr;i++)
20177                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20178 4DDB           8A46         08            mov	al,8[bp]
20179 4DDE           30E4                       xor	ah,ah
20180 4DE0           8946         F4            mov	-$C[bp],ax
20181                                           !BCC_EOS
20182                                           !BCC_EOS
20183                                           ! 2353             {
20184 4DE3           EB           73            jmp .112
20185                       00004DE5            .113:
20186                                           ! 2354              if((i+nblines>rlr)||(nblines==0))
20187                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20188 4DE5           8B46         F4            mov	ax,-$C[bp]
20189 4DE8           0246         04            add	al,4[bp]
20190 4DEB           80D4                   00  adc	ah,*0
20191                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20192 4DEE           50                         push	ax
20193 4DEF           8A46         0C            mov	al,$C[bp]
20194 4DF2           30E4                       xor	ah,ah
20195 4DF4           3B46         F0            cmp	ax,0+..FFFC[bp]
20196 4DF7           8D66         F2            lea	sp,2+..FFFC[bp]
20197 4DFA           72           07            jb  	.115
20198                       00004DFC            .116:
20199                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20200 4DFC           8A46         04            mov	al,4[bp]
20201 4DFF           84C0                       test	al,al
20202 4E01           75           26            jne 	.114
20203                       00004E03            .115:
20204                                           ! 2355               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20205                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20206 4E03           8A46         06            mov	al,6[bp]
20207 4E06           30E4                       xor	ah,ah
20208 4E08           50                         push	ax
20209                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20210 4E09           8A46         FD            mov	al,-3[bp]
20211 4E0C           30E4                       xor	ah,ah
20212 4E0E           50                         push	ax
20213                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20214 4E0F           FF76         F8            push	-8[bp]
20215                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20216 4E12           8A46         FB            mov	al,-5[bp]
20217 4E15           30E4                       xor	ah,ah
20218 4E17           50                         push	ax
20219                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20220 4E18           FF76         F4            push	-$C[bp]
20221                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20222 4E1B           8A46         0A            mov	al,$A[bp]
20223 4E1E           30E4                       xor	ah,ah
20224 4E20           50                         push	ax
20225                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20226 4E21           E8         F952            call	_vgamem_fill_pl4
20227 4E24           83C4                   0C  add	sp,*$C
20228                                           !BCC_EOS
20229                                           ! 2356              else
20230                                           ! 2357               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20231 4E27           EB           28            jmp .117
20232                       00004E29            .114:
20233                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20234 4E29           8A46         FD            mov	al,-3[bp]
20235 4E2C           30E4                       xor	ah,ah
20236 4E2E           50                         push	ax
20237                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20238 4E2F           FF76         F8            push	-8[bp]
20239                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20240 4E32           8A46         FB            mov	al,-5[bp]
20241 4E35           30E4                       xor	ah,ah
20242 4E37           50                         push	ax
20243                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20244 4E38           FF76         F4            push	-$C[bp]
20245                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20246 4E3B           8B46         F4            mov	ax,-$C[bp]
20247 4E3E           0246         04            add	al,4[bp]
20248 4E41           80D4                   00  adc	ah,*0
20249                                           ! Debug: list unsigned int = ax+0 (used reg = )
20250 4E44           50                         push	ax
20251                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20252 4E45           8A46         0A            mov	al,$A[bp]
20253 4E48           30E4                       xor	ah,ah
20254 4E4A           50                         push	ax
20255                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20256 4E4B           E8         F866            call	_vgamem_copy_pl4
20257 4E4E           83C4                   0C  add	sp,*$C
20258                                           !BCC_EOS
20259                                           ! 2358             }
20260                       00004E51            .117:
20261                                           ! 2359           }
20262                       00004E51            .111:
20263                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20264 4E51           8B46         F4            mov	ax,-$C[bp]
20265 4E54           40                         inc	ax
20266 4E55           8946         F4            mov	-$C[bp],ax
20267                       00004E58            .112:
20268                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20269 4E58           8A46         0C            mov	al,$C[bp]
20270 4E5B           30E4                       xor	ah,ah
20271 4E5D           3B46         F4            cmp	ax,-$C[bp]
20272 4E60           73           83            jae	.113
20273                       00004E62            .118:
20274                       00004E62            .110:
20275                                           ! 2360          else
20276                                           ! 2361           {for(i=rlr;i>=rul;i--)
20277 4E62           E9         008F            br 	.119
20278                       00004E65            .10E:
20279                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20280 4E65           8A46         0C            mov	al,$C[bp]
20281 4E68           30E4                       xor	ah,ah
20282 4E6A           8946         F4            mov	-$C[bp],ax
20283                                           !BCC_EOS
20284                                           !BCC_EOS
20285                                           ! 2362             {
20286 4E6D           E9         0078            br 	.11C
20287                       00004E70            .11D:
20288                                           ! 2363              if((i<rul+nblines)||(nblines==0))
20289                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20290 4E70           8A46         08            mov	al,8[bp]
20291 4E73           30E4                       xor	ah,ah
20292 4E75           0246         04            add	al,4[bp]
20293 4E78           80D4                   00  adc	ah,*0
20294                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20295 4E7B           3B46         F4            cmp	ax,-$C[bp]
20296 4E7E           77           07            ja  	.11F
20297                       00004E80            .120:
20298                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20299 4E80           8A46         04            mov	al,4[bp]
20300 4E83           84C0                       test	al,al
20301 4E85           75           26            jne 	.11E
20302                       00004E87            .11F:
20303                                           ! 2364               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20304                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20305 4E87           8A46         06            mov	al,6[bp]
20306 4E8A           30E4                       xor	ah,ah
20307 4E8C           50                         push	ax
20308                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20309 4E8D           8A46         FD            mov	al,-3[bp]
20310 4E90           30E4                       xor	ah,ah
20311 4E92           50                         push	ax
20312                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20313 4E93           FF76         F8            push	-8[bp]
20314                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20315 4E96           8A46         FB            mov	al,-5[bp]
20316 4E99           30E4                       xor	ah,ah
20317 4E9B           50                         push	ax
20318                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20319 4E9C           FF76         F4            push	-$C[bp]
20320                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20321 4E9F           8A46         0A            mov	al,$A[bp]
20322 4EA2           30E4                       xor	ah,ah
20323 4EA4           50                         push	ax
20324                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20325 4EA5           E8         F8CE            call	_vgamem_fill_pl4
20326 4EA8           83C4                   0C  add	sp,*$C
20327                                           !BCC_EOS
20328                                           ! 2365              else
20329                                           ! 2366               vgamem_c
20330                                           ! 2366 opy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
20331 4EAB           EB           28            jmp .121
20332                       00004EAD            .11E:
20333                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20334 4EAD           8A46         FD            mov	al,-3[bp]
20335 4EB0           30E4                       xor	ah,ah
20336 4EB2           50                         push	ax
20337                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20338 4EB3           FF76         F8            push	-8[bp]
20339                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20340 4EB6           8A46         FB            mov	al,-5[bp]
20341 4EB9           30E4                       xor	ah,ah
20342 4EBB           50                         push	ax
20343                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20344 4EBC           8B46         F4            mov	ax,-$C[bp]
20345 4EBF           2A46         04            sub	al,4[bp]
20346 4EC2           80DC                   00  sbb	ah,*0
20347                                           ! Debug: list unsigned int = ax+0 (used reg = )
20348 4EC5           50                         push	ax
20349                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20350 4EC6           FF76         F4            push	-$C[bp]
20351                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20352 4EC9           8A46         0A            mov	al,$A[bp]
20353 4ECC           30E4                       xor	ah,ah
20354 4ECE           50                         push	ax
20355                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20356 4ECF           E8         F7E2            call	_vgamem_copy_pl4
20357 4ED2           83C4                   0C  add	sp,*$C
20358                                           !BCC_EOS
20359                                           ! 2367              if (i>rlr) break;
20360                       00004ED5            .121:
20361                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20362 4ED5           8A46         0C            mov	al,$C[bp]
20363 4ED8           30E4                       xor	ah,ah
20364 4EDA           3B46         F4            cmp	ax,-$C[bp]
20365 4EDD           73           02            jae 	.122
20366                       00004EDF            .123:
20367 4EDF           EB           13            jmp .11A
20368                                           !BCC_EOS
20369                                           ! 2368             }
20370                       00004EE1            .122:
20371                                           ! 2369           }
20372                       00004EE1            .11B:
20373                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20374 4EE1           8B46         F4            mov	ax,-$C[bp]
20375 4EE4           48                         dec	ax
20376 4EE5           8946         F4            mov	-$C[bp],ax
20377                       00004EE8            .11C:
20378                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20379 4EE8           8A46         08            mov	al,8[bp]
20380 4EEB           30E4                       xor	ah,ah
20381 4EED           3B46         F4            cmp	ax,-$C[bp]
20382 4EF0         0F86         FF7C            blos	.11D
20383                       00004EF4            .124:
20384                       00004EF4            .11A:
20385                                           ! 2370         }
20386                       00004EF4            .119:
20387                                           ! 2371        break;
20388                       00004EF4            .10D:
20389 4EF4           E9         01FB            br 	.102
20390                                           !BCC_EOS
20391                                           ! 2372      case 0x02:
20392                                           ! 2373        bpp=vga_modes[line].pixbits;
20393                       00004EF7            .125:
20394                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20395 4EF7           8A46         FE            mov	al,-2[bp]
20396 4EFA           30E4                       xor	ah,ah
20397 4EFC           B1                     03  mov	cl,*3
20398 4EFE           D3E0                       shl	ax,cl
20399 4F00           89C3                       mov	bx,ax
20400 4F02           81C3                 020B  add	bx,#_vga_modes
20401                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20402 4F06           8A47         03            mov	al,3[bx]
20403 4F09           8846         FC            mov	-4[bp],al
20404                                           !BCC_EOS
20405                                           ! 2374        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20406                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20407 4F0C           8A46         04            mov	al,4[bp]
20408 4F0F           84C0                       test	al,al
20409 4F11           75           77            jne 	.126
20410                       00004F13            .12B:
20411                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20412 4F13           8A46         08            mov	al,8[bp]
20413 4F16           84C0                       test	al,al
20414 4F18           75           70            jne 	.126
20415                       00004F1A            .12A:
20416                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20417 4F1A           8A46         0A            mov	al,$A[bp]
20418 4F1D           84C0                       test	al,al
20419 4F1F           75           69            jne 	.126
20420                       00004F21            .129:
20421                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20422 4F21           8B46         F6            mov	ax,-$A[bp]
20423                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20424                                           ! Debug: expression subtree swapping
20425 4F24           48                         dec	ax
20426 4F25           50                         push	ax
20427 4F26           8A46         0C            mov	al,$C[bp]
20428 4F29           30E4                       xor	ah,ah
20429 4F2B           3B46         F0            cmp	ax,0+..FFFC[bp]
20430 4F2E           8D66         F2            lea	sp,2+..FFFC[bp]
20431 4F31           75           57            jne 	.126
20432                       00004F33            .128:
20433                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20434 4F33           8B46         F8            mov	ax,-8[bp]
20435                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20436                                           ! Debug: expression subtree swapping
20437 4F36           48                         dec	ax
20438 4F37           50                         push	ax
20439 4F38           8A46         0E            mov	al,$E[bp]
20440 4F3B           30E4                       xor	ah,ah
20441 4F3D           3B46         F0            cmp	ax,0+..FFFC[bp]
20442 4F40           8D66         F2            lea	sp,2+..FFFC[bp]
20443 4F43           75           45            jne 	.126
20444                       00004F45            .127:
20445                                           ! 2375         {
20446                                           ! 2376          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20447                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20448 4F45           8B46         F6            mov	ax,-$A[bp]
20449 4F48           8B4E         F8            mov	cx,-8[bp]
20450 4F4B           F7E9                       imul	cx
20451                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20452 4F4D           89C3                       mov	bx,ax
20453 4F4F           8A46         FD            mov	al,-3[bp]
20454 4F52           30E4                       xor	ah,ah
20455 4F54           93                         xchg	ax,bx
20456 4F55           89D9                       mov	cx,bx
20457 4F57           F7E9                       imul	cx
20458                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20459 4F59           89C3                       mov	bx,ax
20460 4F5B           8A46         FC            mov	al,-4[bp]
20461 4F5E           30E4                       xor	ah,ah
20462 4F60           93                         xchg	ax,bx
20463 4F61           89D9                       mov	cx,bx
20464 4F63           F7E9                       imul	cx
20465                                           ! Debug: list unsigned int = ax+0 (used reg = )
20466 4F65           50                         push	ax
20467                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20468 4F66           8A46         06            mov	al,6[bp]
20469 4F69           30E4                       xor	ah,ah
20470 4F6B           50                         push	ax
20471                                           ! Debug: list int = const 0 (used reg = )
20472 4F6C           31C0                       xor	ax,ax
20473 4F6E           50                         push	ax
20474                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20475 4F6F           8A46         FE            mov	al,-2[bp]
20476 4F72           30E4                       xor	ah,ah
20477 4F74           B1                     03  mov	cl,*3
20478 4F76           D3E0                       shl	ax,cl
20479 4F78           89C3                       mov	bx,ax
20480 4F7A           81C3                 020B  add	bx,#_vga_modes
20481                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20482 4F7E           FF77         04            push	4[bx]
20483                                           ! Debug: func () void = memsetb+0 (used reg = )
20484 4F81           E8         2CEC            call	_memsetb
20485 4F84           83C4                   08  add	sp,*8
20486                                           !BCC_EOS
20487                                           ! 2377         }
20488                                           ! 2378        else
20489                                           ! 2379         {
20490 4F87           E9         0144            br 	.12C
20491                       00004F8A            .126:
20492                                           ! 2380          if(bpp==2)
20493                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20494 4F8A           8A46         FC            mov	al,-4[bp]
20495 4F8D           3C                     02  cmp	al,*2
20496 4F8F           75           1C            jne 	.12D
20497                       00004F91            .12E:
20498                                           ! 2381           {
20499                                           ! 2382            cul<<=1;
20500                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20501 4F91           8A46         0A            mov	al,$A[bp]
20502 4F94           30E4                       xor	ah,ah
20503 4F96           D1E0                       shl	ax,*1
20504 4F98           8846         0A            mov	$A[bp],al
20505                                           !BCC_EOS
20506                                           ! 2383            cols<<=1;
20507                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20508 4F9B           8A46         FB            mov	al,-5[bp]
20509 4F9E           30E4                       xor	ah,ah
20510 4FA0           D1E0                       shl	ax,*1
20511 4FA2           8846         FB            mov	-5[bp],al
20512                                           !BCC_EOS
20513                                           ! 2384            nbcols<<=1;
20514                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20515 4FA5           8B46         F8            mov	ax,-8[bp]
20516 4FA8           D1E0                       shl	ax,*1
20517 4FAA           8946         F8            mov	-8[bp],ax
20518                                           !BCC_EOS
20519                                           ! 2385           }
20520                                           ! 2386          if(dir==1)
20521                       00004FAD            .12D:
20522                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20523 4FAD           8A46         12            mov	al,$12[bp]
20524 4FB0           3C                     01  cmp	al,*1
20525 4FB2         0F85         008A            bne 	.12F
20526                       00004FB6            .130:
20527                                           ! 2387           {for(i=rul;i<=rlr;i++)
20528                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20529 4FB6           8A46         08            mov	al,8[bp]
20530 4FB9           30E4                       xor	ah,ah
20531 4FBB           8946         F4            mov	-$C[bp],ax
20532                                           !BCC_EOS
20533                                           !BCC_EOS
20534                                           ! 2388             {
20535 4FBE           EB           73            jmp .133
20536                       00004FC0            .134:
20537                                           ! 2389              if((i+nblines>rlr)||(nblines==0))
20538                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20539 4FC0           8B46         F4            mov	ax,-$C[bp]
20540 4FC3           0246         04            add	al,4[bp]
20541 4FC6           80D4                   00  adc	ah,*0
20542                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20543 4FC9           50                         push	ax
20544 4FCA           8A46         0C            mov	al,$C[bp]
20545 4FCD           30E4                       xor	ah,ah
20546 4FCF           3B46         F0            cmp	ax,0+..FFFC[bp]
20547 4FD2           8D66         F2            lea	sp,2+..FFFC[bp]
20548 4FD5           72           07            jb  	.136
20549                       00004FD7            .137:
20550                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20551 4FD7           8A46         04            mov	al,4[bp]
20552 4FDA           84C0                       test	al,al
20553 4FDC           75           26            jne 	.135
20554                       00004FDE            .136:
20555                                           ! 2390               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20556                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20557 4FDE           8A46         06            mov	al,6[bp]
20558 4FE1           30E4                       xor	ah,ah
20559 4FE3           50                         push	ax
20560                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20561 4FE4           8A46         FD            mov	al,-3[bp]
20562 4FE7           30E4                       xor	ah,ah
20563 4FE9           50                         push	ax
20564                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20565 4FEA           FF76         F8            push	-8[bp]
20566                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20567 4FED           8A46         FB            mov	al,-5[bp]
20568 4FF0           30E4                       xor	ah,ah
20569 4FF2           50                         push	ax
20570                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20571 4FF3           FF76         F4            push	-$C[bp]
20572                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20573 4FF6           8A46         0A            mov	al,$A[bp]
20574 4FF9           30E4                       xor	ah,ah
20575 4FFB           50                         push	ax
20576                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20577 4FFC           E8         F914            call	_vgamem_fill_cga
20578 4FFF           83C4                   0C  add	sp,*$C
20579                                           !BCC_EOS
20580                                           ! 2391              else
20581                                           ! 2392               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20582 5002           EB           28            jmp .138
20583                       00005004            .135:
20584                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20585 5004           8A46         FD            mov	al,-3[bp]
20586 5007           30E4                       xor	ah,ah
20587 5009           50                         push	ax
20588                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20589 500A           FF76         F8            push	-8[bp]
20590                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20591 500D           8A46         FB            mov	al,-5[bp]
20592 5010           30E4                       xor	ah,ah
20593 5012           50                         push	ax
20594                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20595 5013           FF76         F4            push	-$C[bp]
20596                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20597 5016           8B46         F4            mov	ax,-$C[bp]
20598 5019           0246         04            add	al,4[bp]
20599 501C           80D4                   00  adc	ah,*0
20600                                           ! Debug: list unsigned int = ax+0 (used reg = )
20601 501F           50                         push	ax
20602                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20603 5020           8A46         0A            mov	al,$A[bp]
20604 5023           30E4                       xor	ah,ah
20605 5025           50                         push	ax
20606                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20607 5026           E8         F7D8            call	_vgamem_copy_cga
20608 5029           83C4                   0C  add	sp,*$C
20609                                           !BCC_EOS
20610                                           ! 2393             }
20611                       0000502C            .138:
20612                                           ! 2394           }
20613                       0000502C            .132:
20614                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20615 502C           8B46         F4            mov	ax,-$C[bp]
20616 502F           40                         inc	ax
20617 5030           8946         F4            mov	-$C[bp],ax
20618                       00005033            .133:
20619                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20620 5033           8A46         0C            mov	al,$C[bp]
20621 5036           30E4                       xor	ah,ah
20622 5038           3B46         F4            cmp	ax,-$C[bp]
20623 503B           73           83            jae	.134
20624                       0000503D            .139:
20625                       0000503D            .131:
20626                                           ! 2395          else
20627                                           ! 2396           {for(i=rlr;i>=rul;i--)
20628 503D           E9         008E            br 	.13A
20629                       00005040            .12F:
20630                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20631 5040           8A46         0C            mov	al,$C[bp]
20632 5043           30E4                       xor	ah,ah
20633 5045           8946         F4            mov	-$C[bp],ax
20634                                           !BCC_EOS
20635                                           !BCC_EOS
20636                                           ! 2397             {
20637 5048           EB           78            jmp .13D
20638                       0000504A            .13E:
20639                                           ! 2398              if((i<rul+nblines)||(nblines==0))
20640                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20641 504A           8A46         08            mov	al,8[bp]
20642 504D           30E4                       xor	ah,ah
20643 504F           0246         04            add	al,4[bp]
20644 5052           80D4                   00  adc	ah,*0
20645                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20646 5055           3B46         F4            cmp	ax,-$C[bp]
20647 5058           77           07            ja  	.140
20648                       0000505A            .141:
20649                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20650 505A           8A46         04            mov	al,4[bp]
20651 505D           84C0                       test	al,al
20652 505F           75           26            jne 	.13F
20653                       00005061            .140:
20654                                           ! 2399               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20655                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20656 5061           8A46         06            mov	al,6[bp]
20657 5064           30E4                       xor	ah,ah
20658 5066           50                         push	ax
20659                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20660 5067           8A46         FD            mov	al,-3[bp]
20661 506A           30E4                       xor	ah,ah
20662 506C           50                         push	ax
20663                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20664 506D           FF76         F8            push	-8[bp]
20665                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20666 5070           8A46         FB            mov	al,-5[bp]
20667 5073           30E4                       xor	ah,ah
20668 5075           50                         push	ax
20669                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20670 5076           FF76         F4            push	-$C[bp]
20671                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20672 5079           8A46         0A            mov	al,$A[bp]
20673 507C           30E4                       xor	ah,ah
20674 507E           50                         push	ax
20675                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20676 507F           E8         F891            call	_vgamem_fill_cga
20677 5082           83C4                   0C  add	sp,*$C
20678                                           !BCC_EOS
20679                                           ! 2400              else
20680                                           ! 2401               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20681 5085           EB           28            jmp .142
20682                       00005087            .13F:
20683                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20684 5087           8A46         FD            mov	al,-3[bp]
20685 508A           30E4                       xor	ah,ah
20686 508C           50                         push	ax
20687                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20688 508D           FF76         F8            push	-8[bp]
20689                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20690 5090           8A46         FB            mov	al,-5[bp]
20691 5093           30E4                       xor	ah,ah
20692 5095           50                         push	ax
20693                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20694 5096           8B46         F4            mov	ax,-$C[bp]
20695 5099           2A46         04            sub	al,4[bp]
20696 509C           80DC                   00  sbb	ah,*0
20697                                           ! Debug: list unsigned int = ax+0 (used reg = )
20698 509F           50                         push	ax
20699                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20700 50A0           FF76         F4            push	-$C[bp]
20701                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20702 50A3           8A46         0A            mov	al,$A[bp]
20703 50A6           30E4                       xor	ah,ah
20704 50A8           50                         push	ax
20705                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20706 50A9           E8         F755            call	_vgamem_copy_cga
20707 50AC           83C4                   0C  add	sp,*$C
20708                                           !BCC_EOS
20709                                           ! 2402              if (i>rlr) break;
20710                       000050AF            .142:
20711                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20712 50AF           8A46         0C            mov	al,$C[bp]
20713 50B2           30E4                       xor	ah,ah
20714 50B4           3B46         F4            cmp	ax,-$C[bp]
20715 50B7           73           02            jae 	.143
20716                       000050B9            .144:
20717 50B9           EB           13            jmp .13B
20718                                           !BCC_EOS
20719                                           ! 2403             }
20720                       000050BB            .143:
20721                                           ! 2404           }
20722                       000050BB            .13C:
20723                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20724 50BB           8B46         F4            mov	ax,-$C[bp]
20725 50BE           48                         dec	ax
20726 50BF           8946         F4            mov	-$C[bp],ax
20727                       000050C2            .13D:
20728                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20729 50C2           8A46         08            mov	al,8[bp]
20730 50C5           30E4                       xor	ah,ah
20731 50C7           3B46         F4            cmp	ax,-$C[bp]
20732 50CA         0F86         FF7C            blos	.13E
20733                       000050CE            .145:
20734                       000050CE            .13B:
20735                                           ! 2405         }
20736                       000050CE            .13A:
20737                                           ! 2406        break;
20738                       000050CE            .12C:
20739 50CE           EB           22            jmp .102
20740                                           !BCC_EOS
20741                                           ! 2407      default:
20742                                           ! 2408        printf("Scroll in graphics mode ");
20743                       000050D0            .146:
20744                                           ! Debug: list * char = .147+0 (used reg = )
20745 50D0           BB                   A072  mov	bx,#.147
20746 50D3           53                         push	bx
20747                                           ! Debug: func () void = printf+0 (used reg = )
20748 50D4           E8         2CEE            call	_printf
20749 50D7           44                         inc	sp
20750 50D8           44                         inc	sp
20751                                           !BCC_EOS
20752                                           ! 2409        unimplemented();
20753                                           ! Debug: func () void = unimplemented+0 (used reg = )
20754 50D9           E8         2CCD            call	_unimplemented
20755                                           !BCC_EOS
20756                                           ! 2410     }
20757                                           ! 2411   }
20758 50DC           EB           14            jmp .102
20759                       000050DE            .104:
20760 50DE           2C                     02  sub	al,*2
20761 50E0         0F84         FE13            beq 	.125
20762 50E4           2C                     01  sub	al,*1
20763 50E6         0F84         FC56            beq 	.106
20764 50EA           2C                     01  sub	al,*1
20765 50EC         0F84         FC50            beq 	.105
20766 50F0           EB           DE            jmp	.146
20767                       000050F2            .102:
20768                       FFFFFFF0            ..FFFC	=	-$10
20769                                           ! 2412 }
20770                       000050F2            .101:
20771 50F2           89EC                       mov	sp,bp
20772 50F4           5D                         pop	bp
20773 50F5           C3                         ret
20774                                           ! 2413 static void biosfn_read_char_attr (page,car)
20775                                           ! Register BX used in function biosfn_scroll
20776                                           ! 2414 Bit8u page;Bit16u *car;
20777                       000050F6            _biosfn_read_char_attr:
20778                                           !BCC_EOS
20779                                           !BCC_EOS
20780                                           ! 2415 {Bit16u ss=get_SS();
20781 50F6           55                         push	bp
20782 50F7           89E5                       mov	bp,sp
20783 50F9           4C                         dec	sp
20784 50FA           4C                         dec	sp
20785                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20786 50FB           E8         2CA8            call	_get_SS
20787                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20788 50FE           8946         FE            mov	-2[bp],ax
20789                                           !BCC_EOS
20790                                           ! 2416  Bit8u xcurs,ycurs,mode,line;
20791                                           !BCC_EOS
20792                                           ! 2417  Bit16u nbcols,nbrows,address;
20793                                           !BCC_EOS
20794                                           ! 2418  Bit16u cursor,dummy;
20795                                           !BCC_EOS
20796                                           ! 2419  mode=read_byte(0x40,0x49);
20797 5101           83C4                   F2  add	sp,*-$E
20798                                           ! Debug: list int = const $49 (used reg = )
20799 5104           B8                   0049  mov	ax,*$49
20800 5107           50                         push	ax
20801                                           ! Debug: list int = const $40 (used reg = )
20802 5108           B8                   0040  mov	ax,*$40
20803 510B           50                         push	ax
20804                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20805 510C           E8         2C0B            call	_read_byte
20806 510F           83C4                   04  add	sp,*4
20807                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20808 5112           8846         FB            mov	-5[bp],al
20809                                           !BCC_EOS
20810                                           ! 2420  line=find_vga_entry(mode);
20811                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20812 5115           8A46         FB            mov	al,-5[bp]
20813 5118           30E4                       xor	ah,ah
20814 511A           50                         push	ax
20815                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20816 511B           E8         2B10            call	_find_vga_entry
20817 511E           44                         inc	sp
20818 511F           44                         inc	sp
20819                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20820 5120           8846         FA            mov	-6[bp],al
20821                                           !BCC_EOS
20822                                           ! 2421  if(line==0xFF)return;
20823                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20824 5123           8A46         FA            mov	al,-6[bp]
20825 5126           3C                     FF  cmp	al,#$FF
20826 5128           75           04            jne 	.148
20827                       0000512A            .149:
20828 512A           89EC                       mov	sp,bp
20829 512C           5D                         pop	bp
20830 512D           C3                         ret
20831                                           !BCC_EOS
20832                                           ! 2422  biosfn_get_cursor_pos(page,&dummy,&cursor);
20833                       0000512E            .148:
20834                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20835 512E           8D5E         F2            lea	bx,-$E[bp]
20836 5131           53                         push	bx
20837                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20838 5132           8D5E         F0            lea	bx,-$10[bp]
20839 5135           53                         push	bx
20840                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20841 5136           8A46         04            mov	al,4[bp]
20842 5139           30E4                       xor	ah,ah
20843 513B           50                         push	ax
20844                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20845 513C           E8         F37E            call	_biosfn_get_cursor_pos
20846 513F           83C4                   06  add	sp,*6
20847                                           !BCC_EOS
20848                                           ! 2423  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20849                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20850 5142           8A46         F2            mov	al,-$E[bp]
20851                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20852 5145           8846         FD            mov	-3[bp],al
20853                                           !BCC_EOS
20854                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20855 5148           8B46         F2            mov	ax,-$E[bp]
20856 514B           30C0                       xor	al,al
20857                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20858 514D           88E0                       mov	al,ah
20859 514F           30E4                       xor	ah,ah
20860                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20861 5151           8846         FC            mov	-4[bp],al
20862                                           !BCC_EOS
20863                                           ! 2424  nbrows=read_byte(0x40,0x84)+1;
20864                                           ! Debug: list int = const $84 (used reg = )
20865 5154           B8                   0084  mov	ax,#$84
20866 5157           50                         push	ax
20867                                           ! Debug: list int = const $40 (used reg = )
20868 5158           B8                   0040  mov	ax,*$40
20869 515B           50                         push	ax
20870                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20871 515C           E8         2BBB            call	_read_byte
20872 515F           83C4                   04  add	sp,*4
20873                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20874 5162           30E4                       xor	ah,ah
20875                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20876 5164           40                         inc	ax
20877 5165           8946         F6            mov	-$A[bp],ax
20878                                           !BCC_EOS
20879                                           ! 2425  nbcols=read_word(0x40,0x4A);
20880                                           ! Debug: list int = const $4A (used reg = )
20881 5168           B8                   004A  mov	ax,*$4A
20882 516B           50                         push	ax
20883                                           ! Debug: list int = const $40 (used reg = )
20884 516C           B8                   0040  mov	ax,*$40
20885 516F           50                         push	ax
20886                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20887 5170           E8         2BBA            call	_read_word
20888 5173           83C4                   04  add	sp,*4
20889                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20890 5176           8946         F8            mov	-8[bp],ax
20891                                           !BCC_EOS
20892                                           ! 2426  if(vga_modes[line].class==0x00)
20893                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20894 5179           8A46         FA            mov	al,-6[bp]
20895 517C           30E4                       xor	ah,ah
20896 517E           B1                     03  mov	cl,*3
20897 5180           D3E0                       shl	ax,cl
20898 5182           89C3                       mov	bx,ax
20899 5184           81C3                 020B  add	bx,#_vga_modes
20900                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20901 5188           8A47         01            mov	al,1[bx]
20902 518B           84C0                       test	al,al
20903 518D           75           5E            jne 	.14A
20904                       0000518F            .14B:
20905                                           ! 2427   {
20906                                           ! 2428    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20907                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20908 518F           8A46         FC            mov	al,-4[bp]
20909 5192           30E4                       xor	ah,ah
20910 5194           8B4E         F8            mov	cx,-8[bp]
20911 5197           F7E9                       imul	cx
20912                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20913                                           ! Debug: expression subtree swapping
20914 5199           0246         FD            add	al,-3[bp]
20915 519C           80D4                   00  adc	ah,*0
20916                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20917 519F           D1E0                       shl	ax,*1
20918 51A1           50                         push	ax
20919                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20920 51A2           8B46         F8            mov	ax,-8[bp]
20921 51A5           8B4E         F6            mov	cx,-$A[bp]
20922 51A8           F7E9                       imul	cx
20923                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20924 51AA           D1E0                       shl	ax,*1
20925                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20926 51AC           0C                     FF  or	al,#$FF
20927                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20928                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20929 51AE           89C3                       mov	bx,ax
20930 51B0           8A46         04            mov	al,4[bp]
20931 51B3           30E4                       xor	ah,ah
20932 51B5           93                         xchg	ax,bx
20933 51B6           40                         inc	ax
20934 51B7           89D9                       mov	cx,bx
20935 51B9           F7E9                       imul	cx
20936                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20937 51BB           0346         EE            add	ax,-$12[bp]
20938 51BE           44                         inc	sp
20939 51BF           44                         inc	sp
20940                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20941 51C0           8946         F4            mov	-$C[bp],ax
20942                                           !BCC_EOS
20943                                           ! 2429    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20944                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20945 51C3           FF76         F4            push	-$C[bp]
20946                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20947 51C6           8A46         FA            mov	al,-6[bp]
20948 51C9           30E4                       xor	ah,ah
20949 51CB           B1                     03  mov	cl,*3
20950 51CD           D3E0                       shl	ax,cl
20951 51CF           89C3                       mov	bx,ax
20952 51D1           81C3                 020B  add	bx,#_vga_modes
20953                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20954 51D5           FF77         04            push	4[bx]
20955                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20956 51D8           E8         2B52            call	_read_word
20957 51DB           83C4                   04  add	sp,*4
20958                                           ! Debug: list unsigned short = ax+0 (used reg = )
20959 51DE           50                         push	ax
20960                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20961 51DF           FF76         06            push	6[bp]
20962                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20963 51E2           FF76         FE            push	-2[bp]
20964                                           ! Debug: func () void = write_word+0 (used reg = )
20965 51E5           E8         2B70            call	_write_word
20966 51E8           83C4                   06  add	sp,*6
20967                                           !BCC_EOS
20968                                           ! 2430   }
20969                                           ! 2431  else
20970                                           ! 2432   {
20971 51EB           EB           03            jmp .14C
20972                       000051ED            .14A:
20973                                           ! 2433    unimplemented();
20974                                           ! Debug: func () void = unimplemented+0 (used reg = )
20975 51ED           E8         2BB9            call	_unimplemented
20976                                           !BCC_EOS
20977                                           ! 2434   }
20978                                           ! 2435 }
20979                       000051F0            .14C:
20980 51F0           89EC                       mov	sp,bp
20981 51F2           5D                         pop	bp
20982 51F3           C3                         ret
20983                                           ! 2436 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20984                                           ! Register BX used in function biosfn_read_char_attr
20985                                           ! 2437 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20986                       000051F4            _write_gfx_char_pl4:
20987                                           !BCC_EOS
20988                                           !BCC_EOS
20989                                           !BCC_EOS
20990                                           !BCC_EOS
20991                                           !BCC_EOS
20992                                           !BCC_EOS
20993                                           ! 2438 {
20994                                           ! 2439  Bit8u i,j,mask;
20995                                           !BCC_EOS
20996                                           ! 2440  Bit8u *fdata;
20997                                           !BCC_EOS
20998                                           ! 2441  Bit16u addr,dest,src;
20999                                           !BCC_EOS
21000                                           ! 2442  switch(cheight)
21001 51F4           55                         push	bp
21002 51F5           89E5                       mov	bp,sp
21003 51F7           83C4                   F4  add	sp,*-$C
21004 51FA           8A46         0E            mov	al,$E[bp]
21005                                           ! 2443   {case 14:
21006 51FD           EB           18            jmp .14F
21007                                           ! 2444     fdat
21008                                           ! 2444 a = &vgafont14;
21009                       000051FF            .150:
21010                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21011 51FF           BB                   176F  mov	bx,#_vgafont14
21012 5202           895E         FA            mov	-6[bp],bx
21013                                           !BCC_EOS
21014                                           ! 2445     break;
21015 5205           EB           1A            jmp .14D
21016                                           !BCC_EOS
21017                                           ! 2446    case 16:
21018                                           ! 2447     fdata = &vgafont16;
21019                       00005207            .151:
21020                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21021 5207           BB                   256F  mov	bx,#_vgafont16
21022 520A           895E         FA            mov	-6[bp],bx
21023                                           !BCC_EOS
21024                                           ! 2448     break;
21025 520D           EB           12            jmp .14D
21026                                           !BCC_EOS
21027                                           ! 2449    default:
21028                                           ! 2450     fdata = &vgafont8;
21029                       0000520F            .152:
21030                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21031 520F           BB                   0F6F  mov	bx,#_vgafont8
21032 5212           895E         FA            mov	-6[bp],bx
21033                                           !BCC_EOS
21034                                           ! 2451   }
21035                                           ! 2452  addr=xcurs+ycurs*cheight*nbcols;
21036 5215           EB           0A            jmp .14D
21037                       00005217            .14F:
21038 5217           2C                     0E  sub	al,*$E
21039 5219           74           E4            je 	.150
21040 521B           2C                     02  sub	al,*2
21041 521D           74           E8            je 	.151
21042 521F           EB           EE            jmp	.152
21043                       00005221            .14D:
21044                       FFFFFFF2            ..FFFB	=	-$E
21045                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
21046 5221           8A46         0E            mov	al,$E[bp]
21047 5224           30E4                       xor	ah,ah
21048 5226           89C3                       mov	bx,ax
21049 5228           8A46         0A            mov	al,$A[bp]
21050 522B           30E4                       xor	ah,ah
21051 522D           89D9                       mov	cx,bx
21052 522F           F7E9                       imul	cx
21053                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
21054 5231           89C3                       mov	bx,ax
21055 5233           8A46         0C            mov	al,$C[bp]
21056 5236           30E4                       xor	ah,ah
21057 5238           93                         xchg	ax,bx
21058 5239           89D9                       mov	cx,bx
21059 523B           F7E9                       imul	cx
21060                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
21061                                           ! Debug: expression subtree swapping
21062 523D           0246         08            add	al,8[bp]
21063 5240           80D4                   00  adc	ah,*0
21064                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21065 5243           8946         F8            mov	-8[bp],ax
21066                                           !BCC_EOS
21067                                           ! 2453  src = car * cheight;
21068                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
21069 5246           8A46         0E            mov	al,$E[bp]
21070 5249           30E4                       xor	ah,ah
21071 524B           89C3                       mov	bx,ax
21072 524D           8A46         04            mov	al,4[bp]
21073 5250           30E4                       xor	ah,ah
21074 5252           89D9                       mov	cx,bx
21075 5254           F7E9                       imul	cx
21076                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21077 5256           8946         F4            mov	-$C[bp],ax
21078                                           !BCC_EOS
21079                                           ! 2454  outw(0x3c4, 0x0f02);
21080                                           ! Debug: list int = const $F02 (used reg = )
21081 5259           B8                   0F02  mov	ax,#$F02
21082 525C           50                         push	ax
21083                                           ! Debug: list int = const $3C4 (used reg = )
21084 525D           B8                   03C4  mov	ax,#$3C4
21085 5260           50                         push	ax
21086                                           ! Debug: func () void = outw+0 (used reg = )
21087 5261           E8         2B32            call	_outw
21088 5264           83C4                   04  add	sp,*4
21089                                           !BCC_EOS
21090                                           ! 2455  outw(0x3ce, 0x0205);
21091                                           ! Debug: list int = const $205 (used reg = )
21092 5267           B8                   0205  mov	ax,#$205
21093 526A           50                         push	ax
21094                                           ! Debug: list int = const $3CE (used reg = )
21095 526B           B8                   03CE  mov	ax,#$3CE
21096 526E           50                         push	ax
21097                                           ! Debug: func () void = outw+0 (used reg = )
21098 526F           E8         2B24            call	_outw
21099 5272           83C4                   04  add	sp,*4
21100                                           !BCC_EOS
21101                                           ! 2456  if(attr&0x80)
21102                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21103 5275           8A46         06            mov	al,6[bp]
21104 5278           24                     80  and	al,#$80
21105 527A           84C0                       test	al,al
21106 527C           74           10            je  	.153
21107                       0000527E            .154:
21108                                           ! 2457   {
21109                                           ! 2458    outw(0x3ce, 0x1803);
21110                                           ! Debug: list int = const $1803 (used reg = )
21111 527E           B8                   1803  mov	ax,#$1803
21112 5281           50                         push	ax
21113                                           ! Debug: list int = const $3CE (used reg = )
21114 5282           B8                   03CE  mov	ax,#$3CE
21115 5285           50                         push	ax
21116                                           ! Debug: func () void = outw+0 (used reg = )
21117 5286           E8         2B0D            call	_outw
21118 5289           83C4                   04  add	sp,*4
21119                                           !BCC_EOS
21120                                           ! 2459   }
21121                                           ! 2460  else
21122                                           ! 2461   {
21123 528C           EB           0E            jmp .155
21124                       0000528E            .153:
21125                                           ! 2462    outw(0x3ce, 0x0003);
21126                                           ! Debug: list int = const 3 (used reg = )
21127 528E           B8                   0003  mov	ax,*3
21128 5291           50                         push	ax
21129                                           ! Debug: list int = const $3CE (used reg = )
21130 5292           B8                   03CE  mov	ax,#$3CE
21131 5295           50                         push	ax
21132                                           ! Debug: func () void = outw+0 (used reg = )
21133 5296           E8         2AFD            call	_outw
21134 5299           83C4                   04  add	sp,*4
21135                                           !BCC_EOS
21136                                           ! 2463   }
21137                                           ! 2464  for(i=0;i<cheight;i++)
21138                       0000529C            .155:
21139                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21140 529C           30C0                       xor	al,al
21141 529E           8846         FF            mov	-1[bp],al
21142                                           !BCC_EOS
21143                                           !BCC_EOS
21144                                           ! 2465   {
21145 52A1           E9         00A6            br 	.158
21146                       000052A4            .159:
21147                                           ! 2466    dest=addr+i*nbcols;
21148                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21149 52A4           8A46         0C            mov	al,$C[bp]
21150 52A7           30E4                       xor	ah,ah
21151 52A9           89C3                       mov	bx,ax
21152 52AB           8A46         FF            mov	al,-1[bp]
21153 52AE           30E4                       xor	ah,ah
21154 52B0           89D9                       mov	cx,bx
21155 52B2           F7E9                       imul	cx
21156                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21157                                           ! Debug: expression subtree swapping
21158 52B4           0346         F8            add	ax,-8[bp]
21159                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21160 52B7           8946         F6            mov	-$A[bp],ax
21161                                           !BCC_EOS
21162                                           ! 2467    for(j=0;j<8;j++)
21163                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21164 52BA           30C0                       xor	al,al
21165 52BC           8846         FE            mov	-2[bp],al
21166                                           !BCC_EOS
21167                                           !BCC_EOS
21168                                           ! 2468     {
21169 52BF           EB           79            jmp .15C
21170                       000052C1            .15D:
21171                                           ! 2469      mask=0x80>>j;
21172                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
21173 52C1           8A46         FE            mov	al,-2[bp]
21174 52C4           30E4                       xor	ah,ah
21175 52C6           89C3                       mov	bx,ax
21176 52C8           B8                   0080  mov	ax,#$80
21177 52CB           89D9                       mov	cx,bx
21178 52CD           D3F8                       sar	ax,cl
21179                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
21180 52CF           8846         FD            mov	-3[bp],al
21181                                           !BCC_EOS
21182                                           ! 2470      outw(0x3ce, (mask << 8) | 0x08);
21183                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
21184 52D2           8A46         FD            mov	al,-3[bp]
21185 52D5           30E4                       xor	ah,ah
21186 52D7           88C4                       mov	ah,al
21187 52D9           30C0                       xor	al,al
21188                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21189 52DB           0C                     08  or	al,*8
21190                                           ! Debug: list unsigned int = ax+0 (used reg = )
21191 52DD           50                         push	ax
21192                                           ! Debug: list int = const $3CE (used reg = )
21193 52DE           B8                   03CE  mov	ax,#$3CE
21194 52E1           50                         push	ax
21195                                           ! Debug: func () void = outw+0 (used reg = )
21196 52E2           E8         2AB1            call	_outw
21197 52E5           83C4                   04  add	sp,*4
21198                                           !BCC_EOS
21199                                           ! 2471      read_byte(0xa000,dest);
21200                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21201 52E8           FF76         F6            push	-$A[bp]
21202                                           ! Debug: list unsigned int = const $A000 (used reg = )
21203 52EB           B8                   A000  mov	ax,#$A000
21204 52EE           50                         push	ax
21205                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21206 52EF           E8         2A28            call	_read_byte
21207 52F2           83C4                   04  add	sp,*4
21208                                           !BCC_EOS
21209                                           ! 2472      if(fdata[src+i]&mask)
21210                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21211 52F5           8B46         F4            mov	ax,-$C[bp]
21212 52F8           0246         FF            add	al,-1[bp]
21213 52FB           80D4                   00  adc	ah,*0
21214                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21215 52FE           0346         FA            add	ax,-6[bp]
21216 5301           89C3                       mov	bx,ax
21217                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21218 5303           8A07                       mov	al,[bx]
21219 5305           2246         FD            and	al,-3[bp]
21220 5308           84C0                       test	al,al
21221 530A           74           17            je  	.15E
21222                       0000530C            .15F:
21223                                           ! 2473       {
21224                                           ! 2474        write_byte(0xa000,dest,attr&0x0f);
21225                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21226 530C           8A46         06            mov	al,6[bp]
21227 530F           24                     0F  and	al,*$F
21228                                           ! Debug: list unsigned char = al+0 (used reg = )
21229 5311           30E4                       xor	ah,ah
21230 5313           50                         push	ax
21231                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21232 5314           FF76         F6            push	-$A[bp]
21233                                           ! Debug: list unsigned int = const $A000 (used reg = )
21234 5317           B8                   A000  mov	ax,#$A000
21235 531A           50                         push	ax
21236                                           ! Debug: func () void = write_byte+0 (used reg = )
21237 531B           E8         2A22            call	_write_byte
21238 531E           83C4                   06  add	sp,*6
21239                                           !BCC_EOS
21240                                           ! 2475       }
21241                                           ! 2476      else
21242                                           ! 2477       {
21243 5321           EB           10            jmp .160
21244                       00005323            .15E:
21245                                           ! 2478        write_byte(0xa000,dest,0x00);
21246                                           ! Debug: list int = const 0 (used reg = )
21247 5323           31C0                       xor	ax,ax
21248 5325           50                         push	ax
21249                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21250 5326           FF76         F6            push	-$A[bp]
21251                                           ! Debug: list unsigned int = const $A000 (used reg = )
21252 5329           B8                   A000  mov	ax,#$A000
21253 532C           50                         push	ax
21254                                           ! Debug: func () void = write_byte+0 (used reg = )
21255 532D           E8         2A10            call	_write_byte
21256 5330           83C4                   06  add	sp,*6
21257                                           !BCC_EOS
21258                                           ! 2479       }
21259                                           ! 2480     }
21260                       00005333            .160:
21261                                           ! 2481   }
21262                       00005333            .15B:
21263                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21264 5333           8A46         FE            mov	al,-2[bp]
21265 5336           40                         inc	ax
21266 5337           8846         FE            mov	-2[bp],al
21267                       0000533A            .15C:
21268                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21269 533A           8A46         FE            mov	al,-2[bp]
21270 533D           3C                     08  cmp	al,*8
21271 533F         0F82         FF7E            blo 	.15D
21272                       00005343            .161:
21273                       00005343            .15A:
21274                                           ! 2482 #asm
21275                       00005343            .157:
21276                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21277 5343           8A46         FF            mov	al,-1[bp]
21278 5346           40                         inc	ax
21279 5347           8846         FF            mov	-1[bp],al
21280                       0000534A            .158:
21281                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21282 534A           8A46         FF            mov	al,-1[bp]
21283 534D           3A46         0E            cmp	al,$E[bp]
21284 5350         0F82         FF50            blo 	.159
21285                       00005354            .162:
21286                       00005354            .156:
21287                                           !BCC_EOS
21288                                           !BCC_ASM
21289                       0000000A            _write_gfx_char_pl4.j	set	$A
21290                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21291                       00000006            _write_gfx_char_pl4.fdata	set	6
21292                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21293                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21294                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21295                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21296                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21297                       0000000B            _write_gfx_char_pl4.i	set	$B
21298                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21299                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21300                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21301                       00000009            _write_gfx_char_pl4.mask	set	9
21302                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21303                       00000002            _write_gfx_char_pl4.dest	set	2
21304                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21305                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21306                       00000008            .write_gfx_char_pl4.xcurs	set	8
21307                       00000000            _write_gfx_char_pl4.src	set	0
21308                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21309                       00000012            _write_gfx_char_pl4.attr	set	$12
21310                       00000006            .write_gfx_char_pl4.attr	set	6
21311                       00000010            _write_gfx_char_pl4.car	set	$10
21312                       00000004            .write_gfx_char_pl4.car	set	4
21313                       00000004            _write_gfx_char_pl4.addr	set	4
21314                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21315 5354           BA                   03CE    mov dx, # 0x3ce
21316 5357           B8                   FF08    mov ax, #0xff08
21317 535A           EF                           out dx, ax
21318 535B           B8                   0005    mov ax, #0x0005
21319 535E           EF                           out dx, ax
21320 535F           B8                   0003    mov ax, #0x0003
21321 5362           EF                           out dx, ax
21322                                           ! 2490 endasm
21323                                           !BCC_ENDASM
21324                                           !BCC_EOS
21325                                           ! 2491 }
21326 5363           89EC                       mov	sp,bp
21327 5365           5D                         pop	bp
21328 5366           C3                         ret
21329                                           ! 2492 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21330                                           ! Register BX used in function write_gfx_char_pl4
21331                                           ! 2493 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21332                       00005367            _write_gfx_char_cga:
21333                                           !BCC_EOS
21334                                           !BCC_EOS
21335                                           !BCC_EOS
21336                                           !BCC_EOS
21337                                           !BCC_EOS
21338                                           !BCC_EOS
21339                                           ! 2494 {
21340                                           ! 2495  Bit8u i,j,mask,data;
21341                                           !BCC_EOS
21342                                           ! 2496  Bit8u *fdata;
21343                                           !BCC_EOS
21344                                           ! 2497  Bit16u addr,dest,src;
21345                                           !BCC_EOS
21346                                           ! 2498  fdata = &vgafont8;
21347 5367           55                         push	bp
21348 5368           89E5                       mov	bp,sp
21349 536A           83C4                   F4  add	sp,*-$C
21350                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21351 536D           BB                   0F6F  mov	bx,#_vgafont8
21352 5370           895E         FA            mov	-6[bp],bx
21353                                           !BCC_EOS
21354                                           ! 2499  addr=(xcurs*bpp)+ycurs*320;
21355                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21356 5373           8A46         0A            mov	al,$A[bp]
21357 5376           30E4                       xor	ah,ah
21358 5378           B9                   0140  mov	cx,#$140
21359 537B           F7E9                       imul	cx
21360 537D           50                         push	ax
21361                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21362 537E           8A46         0E            mov	al,$E[bp]
21363 5381           30E4                       xor	ah,ah
21364 5383           89C3                       mov	bx,ax
21365 5385           8A46         08            mov	al,8[bp]
21366 5388           30E4                       xor	ah,ah
21367 538A           89D9                       mov	cx,bx
21368 538C           F7E9                       imul	cx
21369                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21370 538E           0346         F2            add	ax,-$E[bp]
21371 5391           44                         inc	sp
21372 5392           44                         inc	sp
21373                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21374 5393           8946         F8            mov	-8[bp],ax
21375                                           !BCC_EOS
21376                                           ! 2500  src = car * 8;
21377                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21378 5396           8A46         04            mov	al,4[bp]
21379 5399           30E4                       xor	ah,ah
21380 539B           B1                     03  mov	cl,*3
21381 539D           D3E0                       shl	ax,cl
21382                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21383 539F           8946         F4            mov	-$C[bp],ax
21384                                           !BCC_EOS
21385                                           ! 2501  for(i=0;i<8;i++)
21386                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21387 53A2           30C0                       xor	al,al
21388 53A4           8846         FF            mov	-1[bp],al
21389                                           !BCC_EOS
21390                                           !BCC_EOS
21391                                           ! 2502   {
21392 53A7           E9         01B3            br 	.165
21393                       000053AA            .166:
21394                                           ! 2503    dest=addr+(i>>1)*80;
21395                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21396 53AA           8A46         FF            mov	al,-1[bp]
21397 53AD           30E4                       xor	ah,ah
21398 53AF           D1E8                       shr	ax,*1
21399                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21400 53B1           B9                   0050  mov	cx,*$50
21401 53B4           F7E9                       imul	cx
21402                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21403                                           ! Debug: expression subtree swapping
21404 53B6           0346         F8            add	ax,-8[bp]
21405                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21406 53B9           8946         F6            mov	-$A[bp],ax
21407                                           !BCC_EOS
21408                                           ! 2504    if (i & 1) dest += 0x2000;
21409                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21410 53BC           8A46         FF            mov	al,-1[bp]
21411 53BF           24                     01  and	al,*1
21412 53C1           84C0                       test	al,al
21413 53C3           74           09            je  	.167
21414                       000053C5            .168:
21415                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21416 53C5           8B46         F6            mov	ax,-$A[bp]
21417 53C8           05                   2000  add	ax,#$2000
21418 53CB           8946         F6            mov	-$A[bp],ax
21419                                           !BCC_EOS
21420                                           ! 2505    mask = 0x80;
21421                       000053CE            .167:
21422                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21423 53CE           B0                     80  mov	al,#$80
21424 53D0           8846         FD            mov	-3[bp],al
21425                                           !BCC_EOS
21426                                           ! 2506    if (bpp == 1)
21427                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21428 53D3           8A46         0E            mov	al,$E[bp]
21429 53D6           3C                     01  cmp	al,*1
21430 53D8         0F85         00B3            bne 	.169
21431                       000053DC            .16A:
21432                                           ! 2507     {
21433                                           ! 2508      if (attr & 0x80)
21434                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21435 53DC           8A46         06            mov	al,6[bp]
21436 53DF           24                     80  and	al,#$80
21437 53E1           84C0                       test	al,al
21438 53E3           74           12            je  	.16B
21439                       000053E5            .16C:
21440                                           ! 2509       {
21441                                           ! 2510        data = read_byte(0xb800,dest);
21442                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21443 53E5           FF76         F6            push	-$A[bp]
21444                                           ! Debug: list unsigned int = const $B800 (used reg = )
21445 53E8           B8                   B800  mov	ax,#$B800
21446 53EB           50                         push	ax
21447                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21448 53EC           E8         292B            call	_read_byte
21449 53EF           83C4                   04  add	sp,*4
21450                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21451 53F2           8846         FC            mov	-4[bp],al
21452                                           !BCC_EOS
21453                                           ! 2511       }
21454                                           ! 2512      else
21455                                           ! 2513       {
21456 53F5           EB           05            jmp .16D
21457                       000053F7            .16B:
21458                                           ! 2514        data = 0x00;
21459                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21460 53F7           30C0                       xor	al,al
21461 53F9           8846         FC            mov	-4[bp],al
21462                                           !BCC_EOS
21463                                           ! 2515       }
21464                                           ! 2516      for(j=0;j<8;j++)
21465                       000053FC            .16D:
21466                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21467 53FC           30C0                       xor	al,al
21468 53FE           8846         FE            mov	-2[bp],al
21469                                           !BCC_EOS
21470                                           !BCC_EOS
21471                                           ! 2517       {
21472 5401           EB           6F            jmp .170
21473                       00005403            .171:
21474                                           ! 2518        if (fdata[src+i] & mask)
21475                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21476 5403           8B46         F4            mov	ax,-$C[bp]
21477 5406           0246         FF            add	al,-1[bp]
21478 5409           80D4                   00  adc	ah,*0
21479                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21480 540C           0346         FA            add	ax,-6[bp]
21481 540F           89C3                       mov	bx,ax
21482                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21483 5411           8A07                       mov	al,[bx]
21484 5413           2246         FD            and	al,-3[bp]
21485 5416           84C0                       test	al,al
21486 5418           74           47            je  	.172
21487                       0000541A            .173:
21488                                           ! 2519         {
21489                                           ! 2520          if (attr & 0x80)
21490                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21491 541A           8A46         06            mov	al,6[bp]
21492 541D           24                     80  and	al,#$80
21493 541F           84C0                       test	al,al
21494 5421           74           20            je  	.174
21495                       00005423            .175:
21496                                           ! 2521           {
21497                                           ! 2522            data ^= (attr & 0x01) << (7-j);
21498                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21499 5423           B8                   0007  mov	ax,*7
21500 5426           2A46         FE            sub	al,-2[bp]
21501 5429           80DC                   00  sbb	ah,*0
21502 542C           50                         push	ax
21503                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21504 542D           8A46         06            mov	al,6[bp]
21505 5430           24                     01  and	al,*1
21506                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21507 5432           30E4                       xor	ah,ah
21508 5434           8B4E         F2            mov	cx,-$E[bp]
21509 5437           D3E0                       shl	ax,cl
21510 5439           44                         inc	sp
21511 543A           44                         inc	sp
21512                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21513 543B           3246         FC            xor	al,-4[bp]
21514 543E           8846         FC            mov	-4[bp],al
21515                                           !BCC_EOS
21516                                           ! 2523           }
21517                                           ! 2524          else
21518                                           ! 2525           {
21519 5441           EB           1E            jmp .176
21520                       00005443            .174:
21521                                           ! 2526            data |= (attr & 0x01) << (7-j);
21522                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21523 5443           B8                   0007  mov	ax,*7
21524 5446           2A46         FE            sub	al,-2[bp]
21525 5449           80DC                   00  sbb	ah,*0
21526 544C           50                         push	ax
21527                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21528 544D           8A46         06            mov	al,6[bp]
21529 5450           24                     01  and	al,*1
21530                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21531 5452           30E4                       xor	ah,ah
21532 5454           8B4E         F2            mov	cx,-$E[bp]
21533 5457           D3E0                       shl	ax,cl
21534 5459           44                         inc	sp
21535 545A           44                         inc	sp
21536                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21537 545B           0A46         FC            or	al,-4[bp]
21538 545E           8846         FC            mov	-4[bp],al
21539                                           !BCC_EOS
21540                                           ! 2527           }
21541                                           ! 2528         }
21542                       00005461            .176:
21543                                           ! 2529        mask >>= 1;
21544                       00005461            .172:
21545                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21546 5461           8A46         FD            mov	al,-3[bp]
21547 5464           30E4                       xor	ah,ah
21548 5466           D1E8                       shr	ax,*1
21549 5468           8846         FD            mov	-3[bp],al
21550                                           !BCC_EOS
21551                                           ! 2530       }
21552                                           ! 2531      write_byte(0xb800,dest,data);
21553                       0000546B            .16F:
21554                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21555 546B           8A46         FE            mov	al,-2[bp]
21556 546E           40                         inc	ax
21557 546F           8846         FE            mov	-2[bp],al
21558                       00005472            .170:
21559                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21560 5472           8A46         FE            mov	al,-2[bp]
21561 5475           3C                     08  cmp	al,*8
21562 5477           72           8A            jb 	.171
21563                       00005479            .177:
21564                       00005479            .16E:
21565                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21566 5479           8A46         FC            mov	al,-4[bp]
21567 547C           30E4                       xor	ah,ah
21568 547E           50                         push	ax
21569                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21570 547F           FF76         F6            push	-$A[bp]
21571                                           ! Debug: list unsigned int = const $B800 (used reg = )
21572 5482           B8                   B800  mov	ax,#$B800
21573 5485           50                         push	ax
21574                                           ! Debug: func () void = write_byte+0 (used reg = )
21575 5486           E8         28B7            call	_write_byte
21576 5489           83C4                   06  add	sp,*6
21577                                           !BCC_EOS
21578                                           ! 2532     }
21579                                           ! 2533    else
21580                                           ! 2534     {
21581 548C           E9         00C7            br 	.178
21582                       0000548F            .169:
21583                                           ! 2535      while (mask > 0)
21584                                           ! 2536       {
21585 548F           E9         00BB            br 	.17A
21586                       00005492            .17B:
21587                                           ! 2537        if (attr & 0x80)
21588                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21589 5492           8A46         06            mov	al,6[bp]
21590 5495           24                     80  and	al,#$80
21591 5497           84C0                       test	al,al
21592 5499           74           12            je  	.17C
21593                       0000549B            .17D:
21594                                           ! 2538         {
21595                                           ! 2539          data = read_byte(0xb800,dest);
21596                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21597 549B           FF76         F6            push	-$A[bp]
21598                                           ! Debug: list unsigned int = const $B800 (used reg = )
21599 549E           B8                   B800  mov	ax,#$B800
21600 54A1           50                         push	ax
21601                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21602 54A2           E8         2875            call	_read_byte
21603 54A5           83C4                   04  add	sp,*4
21604                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21605 54A8           8846         FC            mov	-4[bp],al
21606                                           !BCC_EOS
21607                                           ! 2540         }
21608                                           ! 2541        else
21609                                           ! 2542         {
21610 54AB           EB           05            jmp .17E
21611                       000054AD            .17C:
21612                                           ! 2543          data = 0x00;
21613                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21614 54AD           30C0                       xor	al,al
21615 54AF           8846         FC            mov	-4[bp],al
21616                                           !BCC_EOS
21617                                           ! 2544         }
21618                                           ! 2545        for(j=0;j<4;j++)
21619                       000054B2            .17E:
21620                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21621 54B2           30C0                       xor	al,al
21622 54B4           8846         FE            mov	-2[bp],al
21623                                           !BCC_EOS
21624                                           !BCC_EOS
21625                                           ! 2546         {
21626 54B7           EB           73            jmp .181
21627                       000054B9            .182:
21628                                           ! 2547          if (fdata[src+i] & mask)
21629                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21630 54B9           8B46         F4            mov	ax,-$C[bp]
21631 54BC           0246         FF            add	al,-1[bp]
21632 54BF           80D4                   00  adc	ah,*0
21633                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21634 54C2           0346         FA            add	ax,-6[bp]
21635 54C5           89C3                       mov	bx,ax
21636                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21637 54C7           8A07                       mov	al,[bx]
21638 54C9           2246         FD            and	al,-3[bp]
21639 54CC           84C0                       test	al,al
21640 54CE           74           4B            je  	.183
21641                       000054D0            .184:
21642                                           ! 2548           {
21643                                           ! 2549            if (attr & 0x80)
21644                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21645 54D0           8A46         06            mov	al,6[bp]
21646 54D3           24                     80  and	al,#$80
21647 54D5           84C0                       test	al,al
21648 54D7           74           22            je  	.185
21649                       000054D9            .186:
21650                                           ! 2550             {
21651                                           ! 2551              data ^= (attr & 0x03) << ((3-j)*2);
21652                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21653 54D9           B8                   0003  mov	ax,*3
21654 54DC           2A46         FE            sub	al,-2[bp]
21655 54DF           80DC                   00  sbb	ah,*0
21656                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21657 54E2           D1E0                       shl	ax,*1
21658 54E4           50                         push	ax
21659                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21660 54E5           8A46         06            mov	al,6[bp]
21661 54E8           24                     03  and	al,*3
21662                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21663 54EA           30E4                       xor	ah,ah
21664 54EC           8B4E         F2            mov	cx,-$E[bp]
21665 54EF           D3E0                       shl	ax,cl
21666 54F1           44                         inc	sp
21667 54F2           44                         inc	sp
21668                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21669 54F3           3246         FC            xor	al,-4[bp]
21670 54F6           8846         FC            mov	-4[bp],al
21671                                           !BCC_EOS
21672                                           ! 2552             }
21673                                           ! 2553            else
21674                                           ! 2554             {
21675 54F9           EB           20            jmp .187
21676                       000054FB            .185:
21677                                           ! 2555              data |= (attr & 0x03) << ((3-j)*2);
21678                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21679 54FB           B8                   0003  mov	ax,*3
21680 54FE           2A46         FE            sub	al,-2[bp]
21681 5501           80DC                   00  sbb	ah,*0
21682                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21683 5504           D1E0                       shl	ax,*1
21684 5506           50                         push	ax
21685                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21686 5507           8A46         06            mov	al,6[bp]
21687 550A           24                     03  and	al,*3
21688                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21689 550C           30E4                       xor	ah,ah
21690 550E           8B4E         F2            mov	cx,-$E[bp]
21691 5511           D3E0                       shl	ax,cl
21692 5513           44                         inc	sp
21693 5514           44                         inc	sp
21694                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21695 5515           0A46         FC            or	al,-4[bp]
21696 5518           8846         FC            mov	-4[bp],al
21697                                           !BCC_EOS
21698                                           ! 2556             }
21699                                           ! 2557           }
21700                       0000551B            .187:
21701                                           ! 2558          m
21702                                           ! 2558 ask >>= 1;
21703                       0000551B            .183:
21704                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21705 551B           8A46         FD            mov	al,-3[bp]
21706 551E           30E4                       xor	ah,ah
21707 5520           D1E8                       shr	ax,*1
21708 5522           8846         FD            mov	-3[bp],al
21709                                           !BCC_EOS
21710                                           ! 2559         }
21711                                           ! 2560        write_byte(0xb800,dest,data);
21712                       00005525            .180:
21713                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21714 5525           8A46         FE            mov	al,-2[bp]
21715 5528           40                         inc	ax
21716 5529           8846         FE            mov	-2[bp],al
21717                       0000552C            .181:
21718                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21719 552C           8A46         FE            mov	al,-2[bp]
21720 552F           3C                     04  cmp	al,*4
21721 5531           72           86            jb 	.182
21722                       00005533            .188:
21723                       00005533            .17F:
21724                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21725 5533           8A46         FC            mov	al,-4[bp]
21726 5536           30E4                       xor	ah,ah
21727 5538           50                         push	ax
21728                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21729 5539           FF76         F6            push	-$A[bp]
21730                                           ! Debug: list unsigned int = const $B800 (used reg = )
21731 553C           B8                   B800  mov	ax,#$B800
21732 553F           50                         push	ax
21733                                           ! Debug: func () void = write_byte+0 (used reg = )
21734 5540           E8         27FD            call	_write_byte
21735 5543           83C4                   06  add	sp,*6
21736                                           !BCC_EOS
21737                                           ! 2561        dest += 1;
21738                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21739 5546           8B46         F6            mov	ax,-$A[bp]
21740 5549           40                         inc	ax
21741 554A           8946         F6            mov	-$A[bp],ax
21742                                           !BCC_EOS
21743                                           ! 2562       }
21744                                           ! 2563     }
21745                       0000554D            .17A:
21746                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21747 554D           8A46         FD            mov	al,-3[bp]
21748 5550           84C0                       test	al,al
21749 5552         0F85         FF3C            bne 	.17B
21750                       00005556            .189:
21751                       00005556            .179:
21752                                           ! 2564   }
21753                       00005556            .178:
21754                                           ! 2565 }
21755                       00005556            .164:
21756                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21757 5556           8A46         FF            mov	al,-1[bp]
21758 5559           40                         inc	ax
21759 555A           8846         FF            mov	-1[bp],al
21760                       0000555D            .165:
21761                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21762 555D           8A46         FF            mov	al,-1[bp]
21763 5560           3C                     08  cmp	al,*8
21764 5562         0F82         FE44            blo 	.166
21765                       00005566            .18A:
21766                       00005566            .163:
21767 5566           89EC                       mov	sp,bp
21768 5568           5D                         pop	bp
21769 5569           C3                         ret
21770                                           ! 2566 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21771                                           ! Register BX used in function write_gfx_char_cga
21772                                           ! 2567 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21773                       0000556A            _write_gfx_char_lin:
21774                                           !BCC_EOS
21775                                           !BCC_EOS
21776                                           !BCC_EOS
21777                                           !BCC_EOS
21778                                           !BCC_EOS
21779                                           ! 2568 {
21780                                           ! 2569  Bit8u i,j,mask,data;
21781                                           !BCC_EOS
21782                                           ! 2570  Bit8u *fdata;
21783                                           !BCC_EOS
21784                                           ! 2571  Bit16u addr,dest,src;
21785                                           !BCC_EOS
21786                                           ! 2572  fdata = &vgafont8;
21787 556A           55                         push	bp
21788 556B           89E5                       mov	bp,sp
21789 556D           83C4                   F4  add	sp,*-$C
21790                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21791 5570           BB                   0F6F  mov	bx,#_vgafont8
21792 5573           895E         FA            mov	-6[bp],bx
21793                                           !BCC_EOS
21794                                           ! 2573  addr=xcurs*8+ycurs*nbcols*64;
21795                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21796 5576           8A46         0C            mov	al,$C[bp]
21797 5579           30E4                       xor	ah,ah
21798 557B           89C3                       mov	bx,ax
21799 557D           8A46         0A            mov	al,$A[bp]
21800 5580           30E4                       xor	ah,ah
21801 5582           89D9                       mov	cx,bx
21802 5584           F7E9                       imul	cx
21803                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21804 5586           B1                     06  mov	cl,*6
21805 5588           D3E0                       shl	ax,cl
21806 558A           50                         push	ax
21807                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21808 558B           8A46         08            mov	al,8[bp]
21809 558E           30E4                       xor	ah,ah
21810 5590           B1                     03  mov	cl,*3
21811 5592           D3E0                       shl	ax,cl
21812                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21813 5594           0346         F2            add	ax,-$E[bp]
21814 5597           44                         inc	sp
21815 5598           44                         inc	sp
21816                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21817 5599           8946         F8            mov	-8[bp],ax
21818                                           !BCC_EOS
21819                                           ! 2574  src = car * 8;
21820                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21821 559C           8A46         04            mov	al,4[bp]
21822 559F           30E4                       xor	ah,ah
21823 55A1           B1                     03  mov	cl,*3
21824 55A3           D3E0                       shl	ax,cl
21825                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21826 55A5           8946         F4            mov	-$C[bp],ax
21827                                           !BCC_EOS
21828                                           ! 2575  for(i=0;i<8;i++)
21829                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21830 55A8           30C0                       xor	al,al
21831 55AA           8846         FF            mov	-1[bp],al
21832                                           !BCC_EOS
21833                                           !BCC_EOS
21834                                           ! 2576   {
21835 55AD           E9         0081            br 	.18D
21836                       000055B0            .18E:
21837                                           ! 2577    dest=addr+i*nbcols*8;
21838                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21839 55B0           8A46         0C            mov	al,$C[bp]
21840 55B3           30E4                       xor	ah,ah
21841 55B5           89C3                       mov	bx,ax
21842 55B7           8A46         FF            mov	al,-1[bp]
21843 55BA           30E4                       xor	ah,ah
21844 55BC           89D9                       mov	cx,bx
21845 55BE           F7E9                       imul	cx
21846                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21847 55C0           B1                     03  mov	cl,*3
21848 55C2           D3E0                       shl	ax,cl
21849                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21850                                           ! Debug: expression subtree swapping
21851 55C4           0346         F8            add	ax,-8[bp]
21852                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21853 55C7           8946         F6            mov	-$A[bp],ax
21854                                           !BCC_EOS
21855                                           ! 2578    mask = 0x80;
21856                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21857 55CA           B0                     80  mov	al,#$80
21858 55CC           8846         FD            mov	-3[bp],al
21859                                           !BCC_EOS
21860                                           ! 2579    for(j=0;j<8;j++)
21861                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21862 55CF           30C0                       xor	al,al
21863 55D1           8846         FE            mov	-2[bp],al
21864                                           !BCC_EOS
21865                                           !BCC_EOS
21866                                           ! 2580     {
21867 55D4           EB           4D            jmp .191
21868                       000055D6            .192:
21869                                           ! 2581      data = 0x00;
21870                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21871 55D6           30C0                       xor	al,al
21872 55D8           8846         FC            mov	-4[bp],al
21873                                           !BCC_EOS
21874                                           ! 2582      if (fdata[src+i] & mask)
21875                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21876 55DB           8B46         F4            mov	ax,-$C[bp]
21877 55DE           0246         FF            add	al,-1[bp]
21878 55E1           80D4                   00  adc	ah,*0
21879                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21880 55E4           0346         FA            add	ax,-6[bp]
21881 55E7           89C3                       mov	bx,ax
21882                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21883 55E9           8A07                       mov	al,[bx]
21884 55EB           2246         FD            and	al,-3[bp]
21885 55EE           84C0                       test	al,al
21886 55F0           74           06            je  	.193
21887                       000055F2            .194:
21888                                           ! 2583       {
21889                                           ! 2584        data = attr;
21890                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21891 55F2           8A46         06            mov	al,6[bp]
21892 55F5           8846         FC            mov	-4[bp],al
21893                                           !BCC_EOS
21894                                           ! 2585       }
21895                                           ! 2586      write_byte(0xa000,dest+j,data);
21896                       000055F8            .193:
21897                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21898 55F8           8A46         FC            mov	al,-4[bp]
21899 55FB           30E4                       xor	ah,ah
21900 55FD           50                         push	ax
21901                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21902 55FE           8B46         F6            mov	ax,-$A[bp]
21903 5601           0246         FE            add	al,-2[bp]
21904 5604           80D4                   00  adc	ah,*0
21905                                           ! Debug: list unsigned int = ax+0 (used reg = )
21906 5607           50                         push	ax
21907                                           ! Debug: list unsigned int = const $A000 (used reg = )
21908 5608           B8                   A000  mov	ax,#$A000
21909 560B           50                         push	ax
21910                                           ! Debug: func () void = write_byte+0 (used reg = )
21911 560C           E8         2731            call	_write_byte
21912 560F           83C4                   06  add	sp,*6
21913                                           !BCC_EOS
21914                                           ! 2587      mask >>= 1;
21915                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21916 5612           8A46         FD            mov	al,-3[bp]
21917 5615           30E4                       xor	ah,ah
21918 5617           D1E8                       shr	ax,*1
21919 5619           8846         FD            mov	-3[bp],al
21920                                           !BCC_EOS
21921                                           ! 2588     }
21922                                           ! 2589   }
21923                       0000561C            .190:
21924                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21925 561C           8A46         FE            mov	al,-2[bp]
21926 561F           40                         inc	ax
21927 5620           8846         FE            mov	-2[bp],al
21928                       00005623            .191:
21929                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21930 5623           8A46         FE            mov	al,-2[bp]
21931 5626           3C                     08  cmp	al,*8
21932 5628           72           AC            jb 	.192
21933                       0000562A            .195:
21934                       0000562A            .18F:
21935                                           ! 2590 }
21936                       0000562A            .18C:
21937                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21938 562A           8A46         FF            mov	al,-1[bp]
21939 562D           40                         inc	ax
21940 562E           8846         FF            mov	-1[bp],al
21941                       00005631            .18D:
21942                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21943 5631           8A46         FF            mov	al,-1[bp]
21944 5634           3C                     08  cmp	al,*8
21945 5636         0F82         FF76            blo 	.18E
21946                       0000563A            .196:
21947                       0000563A            .18B:
21948 563A           89EC                       mov	sp,bp
21949 563C           5D                         pop	bp
21950 563D           C3                         ret
21951                                           ! 2591 static void biosfn_write_char_attr (car,page,attr,count)
21952                                           ! Register BX used in function write_gfx_char_lin
21953                                           ! 2592 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21954                       0000563E            _biosfn_write_char_attr:
21955                                           !BCC_EOS
21956                                           !BCC_EOS
21957                                           !BCC_EOS
21958                                           !BCC_EOS
21959                                           ! 2593 {
21960                                           ! 2594  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21961                                           !BCC_EOS
21962                                           ! 2595  Bit16u nbcols,nbrows,address;
21963                                           !BCC_EOS
21964                                           ! 2596  Bit16u cursor,dummy;
21965                                           !BCC_EOS
21966                                           ! 2597  mode=read_byte(0x40,0x49);
21967 563E           55                         push	bp
21968 563F           89E5                       mov	bp,sp
21969 5641           83C4                   F0  add	sp,*-$10
21970                                           ! Debug: list int = const $49 (used reg = )
21971 5644           B8                   0049  mov	ax,*$49
21972 5647           50                         push	ax
21973                                           ! Debug: list int = const $40 (used reg = )
21974 5648           B8                   0040  mov	ax,*$40
21975 564B           50                         push	ax
21976                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21977 564C           E8         26CB            call	_read_byte
21978 564F           83C4                   04  add	sp,*4
21979                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21980 5652           8846         FC            mov	-4[bp],al
21981                                           !BCC_EOS
21982                                           ! 2598  line=find_vga_entry(mode);
21983                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21984 5655           8A46         FC            mov	al,-4[bp]
21985 5658           30E4                       xor	ah,ah
21986 565A           50                         push	ax
21987                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21988 565B           E8         25D0            call	_find_vga_entry
21989 565E           44                         inc	sp
21990 565F           44                         inc	sp
21991                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21992 5660           8846         FB            mov	-5[bp],al
21993                                           !BCC_EOS
21994                                           ! 2599  if(line==0xFF)return;
21995                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21996 5663           8A46         FB            mov	al,-5[bp]
21997 5666           3C                     FF  cmp	al,#$FF
21998 5668           75           04            jne 	.197
21999                       0000566A            .198:
22000 566A           89EC                       mov	sp,bp
22001 566C           5D                         pop	bp
22002 566D           C3                         ret
22003                                           !BCC_EOS
22004                                           ! 2600  biosfn_get_cursor_pos(page,&dummy,&cursor);
22005                       0000566E            .197:
22006                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22007 566E           8D5E         F2            lea	bx,-$E[bp]
22008 5671           53                         push	bx
22009                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22010 5672           8D5E         F0            lea	bx,-$10[bp]
22011 5675           53                         push	bx
22012                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22013 5676           8A46         06            mov	al,6[bp]
22014 5679           30E4                       xor	ah,ah
22015 567B           50                         push	ax
22016                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22017 567C           E8         EE3E            call	_biosfn_get_cursor_pos
22018 567F           83C4                   06  add	sp,*6
22019                                           !BCC_EOS
22020                                           ! 2601  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22021                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22022 5682           8A46         F2            mov	al,-$E[bp]
22023                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22024 5685           8846         FE            mov	-2[bp],al
22025                                           !BCC_EOS
22026                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22027 5688           8B46         F2            mov	ax,-$E[bp]
22028 568B           30C0                       xor	al,al
22029                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22030 568D           88E0                       mov	al,ah
22031 568F           30E4                       xor	ah,ah
22032                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22033 5691           8846         FD            mov	-3[bp],al
22034                                           !BCC_EOS
22035                                           ! 2602  nbrows=read_byte(0x40,0x84)+1;
22036                                           ! Debug: list int = const $84 (used reg = )
22037 5694           B8                   0084  mov	ax,#$84
22038 5697           50                         push	ax
22039                                           ! Debug: list int = const $40 (used reg = )
22040 5698           B8                   0040  mov	ax,*$40
22041 569B           50                         push	ax
22042                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22043 569C           E8         267B            call	_read_byte
22044 569F           83C4                   04  add	sp,*4
22045                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22046 56A2           30E4                       xor	ah,ah
22047                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22048 56A4           40                         inc	ax
22049 56A5           8946         F6            mov	-$A[bp],ax
22050                                           !BCC_EOS
22051                                           ! 2603  nbcols=read_word(0x40,0x4A);
22052                                           ! Debug: list int = const $4A (used reg = )
22053 56A8           B8                   004A  mov	ax,*$4A
22054 56AB           50                         push	ax
22055                                           ! Debug: list int = const $40 (used reg = )
22056 56AC           B8                   0040  mov	ax,*$40
22057 56AF           50                         push	ax
22058                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22059 56B0           E8         267A            call	_read_word
22060 56B3           83C4                   04  add	sp,*4
22061                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22062 56B6           8946         F8            mov	-8[bp],ax
22063                                           !BCC_EOS
22064                                           ! 2604  if(vga_modes[line].class==0x00)
22065                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22066 56B9           8A46         FB            mov	al,-5[bp]
22067 56BC           30E4                       xor	ah,ah
22068 56BE           B1                     03  mov	cl,*3
22069 56C0           D3E0                       shl	ax,cl
22070 56C2           89C3                       mov	bx,ax
22071 56C4           81C3                 020B  add	bx,#_vga_modes
22072                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22073 56C8           8A47         01            mov	al,1[bx]
22074 56CB           84C0                       test	al,al
22075 56CD           75           6A            jne 	.199
22076                       000056CF            .19A:
22077                                           ! 2605   {
22078                                           ! 2606    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22079                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22080 56CF           8A46         FD            mov	al,-3[bp]
22081 56D2           30E4                       xor	ah,ah
22082 56D4           8B4E         F8            mov	cx,-8[bp]
22083 56D7           F7E9                       imul	cx
22084                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22085                                           ! Debug: expression subtree swapping
22086 56D9           0246         FE            add	al,-2[bp]
22087 56DC           80D4                   00  adc	ah,*0
22088                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22089 56DF           D1E0                       shl	ax,*1
22090 56E1           50                         push	ax
22091                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22092 56E2           8B46         F8            mov	ax,-8[bp]
22093 56E5           8B4E         F6            mov	cx,-$A[bp]
22094 56E8           F7E9                       imul	cx
22095                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22096 56EA           D1E0                       shl	ax,*1
22097                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22098 56EC           0C                     FF  or	al,#$FF
22099                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22100                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22101 56EE           89C3                       mov	bx,ax
22102 56F0           8A46         06            mov	al,6[bp]
22103 56F3           30E4                       xor	ah,ah
22104 56F5           93                         xchg	ax,bx
22105 56F6           40                         inc	ax
22106 56F7           89D9                       mov	cx,bx
22107 56F9           F7E9                       imul	cx
22108                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22109 56FB           0346         EE            add	ax,-$12[bp]
22110 56FE           44                         inc	sp
22111 56FF           44                         inc	sp
22112                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22113 5700           8946         F4            mov	-$C[bp],ax
22114                                           !BCC_EOS
22115                                           ! 2607    dummy=((Bit16u)attr<<8)+car;
22116                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
22117 5703           8A46         08            mov	al,8[bp]
22118 5706           30E4                       xor	ah,ah
22119                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
22120 5708           88C4                       mov	ah,al
22121 570A           30C0                       xor	al,al
22122                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
22123 570C           0246         04            add	al,4[bp]
22124 570F           80D4                   00  adc	ah,*0
22125                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
22126 5712           8946         F0            mov	-$10[bp],ax
22127                                           !BCC_EOS
22128                                           ! 2608    memsetw(vga_modes[line].sstart,address,dummy,count);
22129                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
22130 5715           FF76         0A            push	$A[bp]
22131                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
22132 5718           FF76         F0            push	-$10[bp]
22133                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
22134 571B           FF76         F4            push	-$C[bp]
22135                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
22136 571E           8A46         FB            mov	al,-5[bp]
22137 5721           30E4                       xor	ah,ah
22138 5723           B1                     03  mov	cl,*3
22139 5725           D3E0                       shl	ax,cl
22140 5727           89C3                       mov	bx,ax
22141 5729           81C3                 020B  add	bx,#_vga_modes
22142                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22143 572D           FF77         04            push	4[bx]
22144                                           ! Debug: func () void = memsetw+0 (used reg = )
22145 5730           E8         2562            call	_memsetw
22146 5733           83C4                   08  add	sp,*8
22147                                           !BCC_EOS
22148                                           ! 2609   }
22149                                           ! 2610  else
22150                                           ! 2611   {
22151 5736           E9         00F8            br 	.19B
22152                       00005739            .199:
22153                                           ! 2612    cheight=video_param_table[line_to_vpti[line]].cheight;
22154                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22155 5739           8A46         FB            mov	al,-5[bp]
22156 573C           30E4                       xor	ah,ah
22157 573E           89C3                       mov	bx,ax
22158                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22159 5740           8A87       028B            mov	al,_line_to_vpti[bx]
22160 5744           30E4                       xor	ah,ah
22161 5746           B1                     06  mov	cl,*6
22162 5748           D3E0                       shl	ax,cl
22163 574A           89C3                       mov	bx,ax
22164 574C           81C3                 029F  add	bx,#_video_param_table
22165                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22166 5750           8A47         02            mov	al,2[bx]
22167 5753           8846         FF            mov	-1[bp],al
22168                                           !BCC_EOS
22169                                           ! 2613    bpp=vga_modes[line].pixbits;
22170                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22171 5756           8A46         FB            mov	al,-5[bp]
22172 5759           30E4                       xor	ah,ah
22173 575B           B1                     03  mov	cl,*3
22174 575D           D3E0                       shl	ax,cl
22175 575F           89C3                       mov	bx,ax
22176 5761           81C3                 020B  add	bx,#_vga_modes
22177                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22178 5765           8A47         03            mov	al,3[bx]
22179 5768           8846         FA            mov	-6[bp],al
22180                                           !BCC_EOS
22181                                           ! 2614    while((count-->0) && (xcurs<nbcols))
22182                                           ! 2615     {
22183 576B           E9         00AB            br 	.19D
22184                       0000576E            .19E:
22185                                           ! 2616      switch(vga_modes[line].memmodel)
22186                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22187 576E           8A46         FB            mov	al,-5[bp]
22188 5771           30E4                       xor	ah,ah
22189 5773           B1                     03  mov	cl,*3
22190 5775           D3E0                       shl	ax,cl
22191 5777           89C3                       mov	bx,ax
22192 5779           81C3                 020B  add	bx,#_vga_modes
22193 577D           8A47         02            mov	al,2[bx]
22194                                           ! 2617       {
22195 5780           EB           7A            jmp .1A1
22196                                           ! 2618        case 0x04:
22197                                           ! 2619        case 0x03:
22198                       00005782            .1A2:
22199                                           ! 2620          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22200                       00005782            .1A3:
22201                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22202 5782           8A46         FF            mov	al,-1[bp]
22203 5785           30E4                       xor	ah,ah
22204 5787           50                         push	ax
22205                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22206 5788           FF76         F8            push	-8[bp]
22207                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22208 578B           8A46         FD            mov	al,-3[bp]
22209 578E           30E4                       xor	ah,ah
22210 5790           50                         push	ax
22211                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22212 5791           8A46         FE            mov	al,-2[bp]
22213 5794           30E4                       xor	ah,ah
22214 5796           50                         push	ax
22215                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22216 5797           8A46         08            mov	al,8[bp]
22217 579A           30E4                       xor	ah,ah
22218 579C           50                         push	ax
22219                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22220 579D           8A46         04            mov	al,4[bp]
22221 57A0           30E4                       xor	ah,ah
22222 57A2           50                         push	ax
22223                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22224 57A3           E8         FA4E            call	_write_gfx_char_pl4
22225 57A6           83C4                   0C  add	sp,*$C
22226                                           !BCC_EOS
22227                                           ! 2621          break;
22228 57A9           EB           67            jmp .19F
22229                                           !BCC_EOS
22230                                           ! 2622        case 0x02:
22231                                           ! 2623          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22232                       000057AB            .1A4:
22233                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22234 57AB           8A46         FA            mov	al,-6[bp]
22235 57AE           30E4                       xor	ah,ah
22236 57B0           50                         push	ax
22237                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22238 57B1           FF76         F8            push	-8[bp]
22239                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22240 57B4           8A46         FD            mov	al,-3[bp]
22241 57B7           30E4                       xor	ah,ah
22242 57B9           50                         push	ax
22243                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22244 57BA           8A46         FE            mov	al,-2[bp]
22245 57BD           30E4                       xor	ah,ah
22246 57BF           50                         push	ax
22247                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22248 57C0           8A46         08            mov	al,8[bp]
22249 57C3           30E4                       xor	ah,ah
22250 57C5           50                         push	ax
22251                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22252 57C6           8A46         04            mov	al,4[bp]
22253 57C9           30E4                       xor	ah,ah
22254 57CB           50                         push	ax
22255                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22256 57CC           E8         FB98            call	_write_gfx_char_cga
22257 57CF           83C4                   0C  add	sp,*$C
22258                                           !BCC_EOS
22259                                           ! 2624          break;
22260 57D2           EB           3E            jmp .19F
22261                                           !BCC_EOS
22262                                           ! 2625        case 0x05:
22263                                           ! 2626          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22264                       000057D4            .1A5:
22265                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22266 57D4           FF76         F8            push	-8[bp]
22267                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22268 57D7           8A46         FD            mov	al,-3[bp]
22269 57DA           30E4                       xor	ah,ah
22270 57DC           50                         push	ax
22271                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22272 57DD           8A46         FE            mov	al,-2[bp]
22273 57E0           30E4                       xor	ah,ah
22274 57E2           50                         push	ax
22275                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22276 57E3           8A46         08            mov	al,8[bp]
22277 57E6           30E4                       xor	ah,ah
22278 57E8           50                         push	ax
22279                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22280 57E9           8A46         04            mov	al,4[bp]
22281 57EC           30E4                       xor	ah,ah
22282 57EE           50                         push	ax
22283                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22284 57EF           E8         FD78            call	_write_gfx_char_lin
22285 57F2           83C4                   0A  add	sp,*$A
22286                                           !BCC_EOS
22287                                           ! 2627          break;
22288 57F5           EB           1B            jmp .19F
22289                                           !BCC_EOS
22290                                           ! 2628        default:
22291                                           ! 2629          unimplemented();
22292                       000057F7            .1A6:
22293                                           ! Debug: func () void = unimplemented+0 (used reg = )
22294 57F7           E8         25AF            call	_unimplemented
22295                                           !BCC_EOS
22296                                           ! 2630       }
22297                                           ! 2631      xcurs++;
22298 57FA           EB           16            jmp .19F
22299                       000057FC            .1A1:
22300 57FC           2C                     02  sub	al,*2
22301 57FE           74           AB            je 	.1A4
22302 5800           2C                     01  sub	al,*1
22303 5802         0F84         FF7C            beq 	.1A3
22304 5806           2C                     01  sub	al,*1
22305 5808         0F84         FF76            beq 	.1A2
22306 580C           2C                     01  sub	al,*1
22307 580E           74           C4            je 	.1A5
22308 5810           EB           E5            jmp	.1A6
22309                       00005812            .19F:
22310                       FFFFFFEE            ..FFFA	=	-$12
22311                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22312 5812           8A46         FE            mov	al,-2[bp]
22313 5815           40                         inc	ax
22314 5816           8846         FE            mov	-2[bp],al
22315                                           !BCC_EOS
22316                                           ! 2632     }
22317                                           ! 2633   }
22318                       00005819            .19D:
22319                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22320 5819           8B46         0A            mov	ax,$A[bp]
22321 581C           48                         dec	ax
22322 581D           8946         0A            mov	$A[bp],ax
22323                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22324 5820           3D                   FFFF  cmp	ax,*-1
22325 5823           74           0C            je  	.1A7
22326                       00005825            .1A8:
22327                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22328 5825           8A46         FE            mov	al,-2[bp]
22329 5828           30E4                       xor	ah,ah
22330 582A           3B46         F8            cmp	ax,-8[bp]
22331 582D         0F82         FF3D            blo 	.19E
22332                       00005831            .1A7:
22333                       00005831            .19C:
22334                                           ! 2634 }
22335                       00005831            .19B:
22336 5831           89EC                       mov	sp,bp
22337 5833           5D                         pop	bp
22338 5834           C3                         ret
22339                                           ! 2635 static void biosfn_write_char_only (car,page,attr,count)
22340                                           ! Register BX used in function biosfn_write_char_attr
22341                                           ! 2636 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22342                       00005835            _biosfn_write_char_only:
22343                                           !BCC_EOS
22344                                           !BCC_EOS
22345                                           !BCC_EOS
22346                                           !BCC_EOS
22347                                           ! 2637 {
22348                                           ! 2638  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22349                                           !BCC_EOS
22350                                           ! 2639  Bit16u nbcols,nbrows,address;
22351                                           !BCC_EOS
22352                                           ! 2640  Bit16u cursor,dummy;
22353                                           !BCC_EOS
22354                                           ! 2641  mode=read_byte(0x40,0x49);
22355 5835           55                         push	bp
22356 5836           89E5                       mov	bp,sp
22357 5838           83C4                   F0  add	sp,*-$10
22358                                           ! Debug: list int = const $49 (used reg = )
22359 583B           B8                   0049  mov	ax,*$49
22360 583E           50                         push	ax
22361                                           ! Debug: list int = const $40 (used reg = )
22362 583F           B8                   0040  mov	ax,*$40
22363 5842           50                         push	ax
22364                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22365 5843           E8         24D4            call	_read_byte
22366 5846           83C4                   04  add	sp,*4
22367                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22368 5849           8846         FC            mov	-4[bp],al
22369                                           !BCC_EOS
22370                                           ! 2642  line=find_vga_entry(mode);
22371                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22372 584C           8A46         FC            mov	al,-4[bp]
22373 584F           30E4                       xor	ah,ah
22374 5851           50                         push	ax
22375                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22376 5852           E8         23D9            call	_find_vga_entry
22377 5855           44                         inc	sp
22378 5856           44                         inc	sp
22379                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22380 5857           8846         FB            mov	-5[bp],al
22381                                           !BCC_EOS
22382                                           ! 2643 
22383                                           ! 2643  if(line==0xFF)return;
22384                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22385 585A           8A46         FB            mov	al,-5[bp]
22386 585D           3C                     FF  cmp	al,#$FF
22387 585F           75           04            jne 	.1A9
22388                       00005861            .1AA:
22389 5861           89EC                       mov	sp,bp
22390 5863           5D                         pop	bp
22391 5864           C3                         ret
22392                                           !BCC_EOS
22393                                           ! 2644  biosfn_get_cursor_pos(page,&dummy,&cursor);
22394                       00005865            .1A9:
22395                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22396 5865           8D5E         F2            lea	bx,-$E[bp]
22397 5868           53                         push	bx
22398                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22399 5869           8D5E         F0            lea	bx,-$10[bp]
22400 586C           53                         push	bx
22401                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22402 586D           8A46         06            mov	al,6[bp]
22403 5870           30E4                       xor	ah,ah
22404 5872           50                         push	ax
22405                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22406 5873           E8         EC47            call	_biosfn_get_cursor_pos
22407 5876           83C4                   06  add	sp,*6
22408                                           !BCC_EOS
22409                                           ! 2645  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22410                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22411 5879           8A46         F2            mov	al,-$E[bp]
22412                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22413 587C           8846         FE            mov	-2[bp],al
22414                                           !BCC_EOS
22415                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22416 587F           8B46         F2            mov	ax,-$E[bp]
22417 5882           30C0                       xor	al,al
22418                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22419 5884           88E0                       mov	al,ah
22420 5886           30E4                       xor	ah,ah
22421                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22422 5888           8846         FD            mov	-3[bp],al
22423                                           !BCC_EOS
22424                                           ! 2646  nbrows=read_byte(0x40,0x84)+1;
22425                                           ! Debug: list int = const $84 (used reg = )
22426 588B           B8                   0084  mov	ax,#$84
22427 588E           50                         push	ax
22428                                           ! Debug: list int = const $40 (used reg = )
22429 588F           B8                   0040  mov	ax,*$40
22430 5892           50                         push	ax
22431                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22432 5893           E8         2484            call	_read_byte
22433 5896           83C4                   04  add	sp,*4
22434                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22435 5899           30E4                       xor	ah,ah
22436                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22437 589B           40                         inc	ax
22438 589C           8946         F6            mov	-$A[bp],ax
22439                                           !BCC_EOS
22440                                           ! 2647  nbcols=read_word(0x40,0x4A);
22441                                           ! Debug: list int = const $4A (used reg = )
22442 589F           B8                   004A  mov	ax,*$4A
22443 58A2           50                         push	ax
22444                                           ! Debug: list int = const $40 (used reg = )
22445 58A3           B8                   0040  mov	ax,*$40
22446 58A6           50                         push	ax
22447                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22448 58A7           E8         2483            call	_read_word
22449 58AA           83C4                   04  add	sp,*4
22450                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22451 58AD           8946         F8            mov	-8[bp],ax
22452                                           !BCC_EOS
22453                                           ! 2648  if(vga_modes[line].class==0x00)
22454                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22455 58B0           8A46         FB            mov	al,-5[bp]
22456 58B3           30E4                       xor	ah,ah
22457 58B5           B1                     03  mov	cl,*3
22458 58B7           D3E0                       shl	ax,cl
22459 58B9           89C3                       mov	bx,ax
22460 58BB           81C3                 020B  add	bx,#_vga_modes
22461                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22462 58BF           8A47         01            mov	al,1[bx]
22463 58C2           84C0                       test	al,al
22464 58C4           75           6E            jne 	.1AB
22465                       000058C6            .1AC:
22466                                           ! 2649   {
22467                                           ! 2650    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22468                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22469 58C6           8A46         FD            mov	al,-3[bp]
22470 58C9           30E4                       xor	ah,ah
22471 58CB           8B4E         F8            mov	cx,-8[bp]
22472 58CE           F7E9                       imul	cx
22473                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22474                                           ! Debug: expression subtree swapping
22475 58D0           0246         FE            add	al,-2[bp]
22476 58D3           80D4                   00  adc	ah,*0
22477                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22478 58D6           D1E0                       shl	ax,*1
22479 58D8           50                         push	ax
22480                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22481 58D9           8B46         F8            mov	ax,-8[bp]
22482 58DC           8B4E         F6            mov	cx,-$A[bp]
22483 58DF           F7E9                       imul	cx
22484                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22485 58E1           D1E0                       shl	ax,*1
22486                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22487 58E3           0C                     FF  or	al,#$FF
22488                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22489                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22490 58E5           89C3                       mov	bx,ax
22491 58E7           8A46         06            mov	al,6[bp]
22492 58EA           30E4                       xor	ah,ah
22493 58EC           93                         xchg	ax,bx
22494 58ED           40                         inc	ax
22495 58EE           89D9                       mov	cx,bx
22496 58F0           F7E9                       imul	cx
22497                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22498 58F2           0346         EE            add	ax,-$12[bp]
22499 58F5           44                         inc	sp
22500 58F6           44                         inc	sp
22501                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22502 58F7           8946         F4            mov	-$C[bp],ax
22503                                           !BCC_EOS
22504                                           ! 2651    while(count-->0)
22505                                           ! 2652     {write_byte(vga_modes[line].sstart,address,car);
22506 58FA           EB           29            jmp .1AE
22507                       000058FC            .1AF:
22508                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22509 58FC           8A46         04            mov	al,4[bp]
22510 58FF           30E4                       xor	ah,ah
22511 5901           50                         push	ax
22512                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22513 5902           FF76         F4            push	-$C[bp]
22514                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22515 5905           8A46         FB            mov	al,-5[bp]
22516 5908           30E4                       xor	ah,ah
22517 590A           B1                     03  mov	cl,*3
22518 590C           D3E0                       shl	ax,cl
22519 590E           89C3                       mov	bx,ax
22520 5910           81C3                 020B  add	bx,#_vga_modes
22521                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22522 5914           FF77         04            push	4[bx]
22523                                           ! Debug: func () void = write_byte+0 (used reg = )
22524 5917           E8         2426            call	_write_byte
22525 591A           83C4                   06  add	sp,*6
22526                                           !BCC_EOS
22527                                           ! 2653      address+=2;
22528                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22529 591D           8B46         F4            mov	ax,-$C[bp]
22530 5920           40                         inc	ax
22531 5921           40                         inc	ax
22532 5922           8946         F4            mov	-$C[bp],ax
22533                                           !BCC_EOS
22534                                           ! 2654     }
22535                                           ! 2655   }
22536                       00005925            .1AE:
22537                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22538 5925           8B46         0A            mov	ax,$A[bp]
22539 5928           48                         dec	ax
22540 5929           8946         0A            mov	$A[bp],ax
22541                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22542 592C           3D                   FFFF  cmp	ax,*-1
22543 592F           75           CB            jne	.1AF
22544                       00005931            .1B0:
22545                       00005931            .1AD:
22546                                           ! 2656  else
22547                                           ! 2657   {
22548 5931           E9         00F8            br 	.1B1
22549                       00005934            .1AB:
22550                                           ! 2658    cheight=video_param_table[line_to_vpti[line]].cheight;
22551                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22552 5934           8A46         FB            mov	al,-5[bp]
22553 5937           30E4                       xor	ah,ah
22554 5939           89C3                       mov	bx,ax
22555                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22556 593B           8A87       028B            mov	al,_line_to_vpti[bx]
22557 593F           30E4                       xor	ah,ah
22558 5941           B1                     06  mov	cl,*6
22559 5943           D3E0                       shl	ax,cl
22560 5945           89C3                       mov	bx,ax
22561 5947           81C3                 029F  add	bx,#_video_param_table
22562                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22563 594B           8A47         02            mov	al,2[bx]
22564 594E           8846         FF            mov	-1[bp],al
22565                                           !BCC_EOS
22566                                           ! 2659    bpp=vga_modes[line].pixbits;
22567                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22568 5951           8A46         FB            mov	al,-5[bp]
22569 5954           30E4                       xor	ah,ah
22570 5956           B1                     03  mov	cl,*3
22571 5958           D3E0                       shl	ax,cl
22572 595A           89C3                       mov	bx,ax
22573 595C           81C3                 020B  add	bx,#_vga_modes
22574                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22575 5960           8A47         03            mov	al,3[bx]
22576 5963           8846         FA            mov	-6[bp],al
22577                                           !BCC_EOS
22578                                           ! 2660    while((count-->0) && (xcurs<nbcols))
22579                                           ! 2661     {
22580 5966           E9         00AB            br 	.1B3
22581                       00005969            .1B4:
22582                                           ! 2662      switch(vga_modes[line].memmodel)
22583                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22584 5969           8A46         FB            mov	al,-5[bp]
22585 596C           30E4                       xor	ah,ah
22586 596E           B1                     03  mov	cl,*3
22587 5970           D3E0                       shl	ax,cl
22588 5972           89C3                       mov	bx,ax
22589 5974           81C3                 020B  add	bx,#_vga_modes
22590 5978           8A47         02            mov	al,2[bx]
22591                                           ! 2663       {
22592 597B           EB           7A            jmp .1B7
22593                                           ! 2664        case 0x04:
22594                                           ! 2665        case 0x03:
22595                       0000597D            .1B8:
22596                                           ! 2666          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22597                       0000597D            .1B9:
22598                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22599 597D           8A46         FF            mov	al,-1[bp]
22600 5980           30E4                       xor	ah,ah
22601 5982           50                         push	ax
22602                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22603 5983           FF76         F8            push	-8[bp]
22604                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22605 5986           8A46         FD            mov	al,-3[bp]
22606 5989           30E4                       xor	ah,ah
22607 598B           50                         push	ax
22608                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22609 598C           8A46         FE            mov	al,-2[bp]
22610 598F           30E4                       xor	ah,ah
22611 5991           50                         push	ax
22612                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22613 5992           8A46         08            mov	al,8[bp]
22614 5995           30E4                       xor	ah,ah
22615 5997           50                         push	ax
22616                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22617 5998           8A46         04            mov	al,4[bp]
22618 599B           30E4                       xor	ah,ah
22619 599D           50                         push	ax
22620                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22621 599E           E8         F853            call	_write_gfx_char_pl4
22622 59A1           83C4                   0C  add	sp,*$C
22623                                           !BCC_EOS
22624                                           ! 2667          break;
22625 59A4           EB           67            jmp .1B5
22626                                           !BCC_EOS
22627                                           ! 2668        case 0x02:
22628                                           ! 2669          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22629                       000059A6            .1BA:
22630                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22631 59A6           8A46         FA            mov	al,-6[bp]
22632 59A9           30E4                       xor	ah,ah
22633 59AB           50                         push	ax
22634                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22635 59AC           FF76         F8            push	-8[bp]
22636                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22637 59AF           8A46         FD            mov	al,-3[bp]
22638 59B2           30E4                       xor	ah,ah
22639 59B4           50                         push	ax
22640                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22641 59B5           8A46         FE            mov	al,-2[bp]
22642 59B8           30E4                       xor	ah,ah
22643 59BA           50                         push	ax
22644                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22645 59BB           8A46         08            mov	al,8[bp]
22646 59BE           30E4                       xor	ah,ah
22647 59C0           50                         push	ax
22648                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22649 59C1           8A46         04            mov	al,4[bp]
22650 59C4           30E4                       xor	ah,ah
22651 59C6           50                         push	ax
22652                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22653 59C7           E8         F99D            call	_write_gfx_char_cga
22654 59CA           83C4                   0C  add	sp,*$C
22655                                           !BCC_EOS
22656                                           ! 2670          break;
22657 59CD           EB           3E            jmp .1B5
22658                                           !BCC_EOS
22659                                           ! 2671        case 0x05:
22660                                           ! 2672          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22661                       000059CF            .1BB:
22662                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22663 59CF           FF76         F8            push	-8[bp]
22664                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22665 59D2           8A46         FD            mov	al,-3[bp]
22666 59D5           30E4                       xor	ah,ah
22667 59D7           50                         push	ax
22668                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22669 59D8           8A46         FE            mov	al,-2[bp]
22670 59DB           30E4                       xor	ah,ah
22671 59DD           50                         push	ax
22672                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22673 59DE           8A46         08            mov	al,8[bp]
22674 59E1           30E4                       xor	ah,ah
22675 59E3           50                         push	ax
22676                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22677 59E4           8A46         04            mov	al,4[bp]
22678 59E7           30E4                       xor	ah,ah
22679 59E9           50                         push	ax
22680                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22681 59EA           E8         FB7D            call	_write_gfx_char_lin
22682 59ED           83C4                   0A  add	sp,*$A
22683                                           !BCC_EOS
22684                                           ! 2673          break;
22685 59F0           EB           1B            jmp .1B5
22686                                           !BCC_EOS
22687                                           ! 2674        default:
22688                                           ! 2675          unimplemented();
22689                       000059F2            .1BC:
22690                                           ! Debug: func () void = unimplemented+0 (used reg = )
22691 59F2           E8         23B4            call	_unimplemented
22692                                           !BCC_EOS
22693                                           ! 2676       }
22694                                           ! 2677      xcurs++;
22695 59F5           EB           16            jmp .1B5
22696                       000059F7            .1B7:
22697 59F7           2C                     02  sub	al,*2
22698 59F9           74           AB            je 	.1BA
22699 59FB           2C                     01  sub	al,*1
22700 59FD         0F84         FF7C            beq 	.1B9
22701 5A01           2C                     01  sub	al,*1
22702 5A03         0F84         FF76            beq 	.1B8
22703 5A07           2C                     01  sub	al,*1
22704 5A09           74           C4            je 	.1BB
22705 5A0B           EB           E5            jmp	.1BC
22706                       00005A0D            .1B5:
22707                       FFFFFFEE            ..FFF9	=	-$12
22708                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22709 5A0D           8A46         FE            mov	al,-2[bp]
22710 5A10           40                         inc	ax
22711 5A11           8846         FE            mov	-2[bp],al
22712                                           !BCC_EOS
22713                                           ! 2678     }
22714                                           ! 2679   }
22715                       00005A14            .1B3:
22716                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22717 5A14           8B46         0A            mov	ax,$A[bp]
22718 5A17           48                         dec	ax
22719 5A18           8946         0A            mov	$A[bp],ax
22720                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22721 5A1B           3D                   FFFF  cmp	ax,*-1
22722 5A1E           74           0C            je  	.1BD
22723                       00005A20            .1BE:
22724                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22725 5A20           8A46         FE            mov	al,-2[bp]
22726 5A23           30E4                       xor	ah,ah
22727 5A25           3B46         F8            cmp	ax,-8[bp]
22728 5A28         0F82         FF3D            blo 	.1B4
22729                       00005A2C            .1BD:
22730                       00005A2C            .1B2:
22731                                           ! 2680 }
22732                       00005A2C            .1B1:
22733 5A2C           89EC                       mov	sp,bp
22734 5A2E           5D                         pop	bp
22735 5A2F           C3                         ret
22736                                           ! 2681 #asm
22737                                           !BCC_ASM
22738                       00000008            _biosfn_write_char_only.count	set	8
22739                       00000006            _biosfn_write_char_only.attr	set	6
22740                       00000004            _biosfn_write_char_only.page	set	4
22741                       00000002            _biosfn_write_char_only.car	set	2
22742                       00005A30            biosfn_group_0B:
22743 5A30           80FF                   00    cmp bh, #0x00
22744 5A33           74           09              je biosfn_set_border_color
22745 5A35           80FF                   01    cmp bh, #0x01
22746 5A38           74           43              je biosfn_set_palette
22747 5A3A           E8         237A              call _unknown
22748 5A3D           C3                           ret
22749                       00005A3E            biosfn_set_border_color:
22750 5A3E           50                           push ax
22751 5A3F           53                           push bx
22752 5A40           51                           push cx
22753 5A41           52                           push dx
22754 5A42           BA                   03DA    mov dx, # 0x3da
22755 5A45           EC                           in al, dx
22756 5A46           BA                   03C0    mov dx, # 0x3c0
22757 5A49           B0                     00    mov al, #0x00
22758 5A4B           EE                           out dx, al
22759 5A4C           88D8                         mov al, bl
22760 5A4E           24                     0F    and al, #0x0f
22761 5A50           A8                     08    test al, #0x08
22762 5A52           74           02              jz set_low_border
22763 5A54           04                     08    add al, #0x08
22764                       00005A56            set_low_border:
22765 5A56           EE                           out dx, al
22766 5A57           B1                     01    mov cl, #0x01
22767 5A59           80E3                   10    and bl, #0x10
22768                       00005A5C            set_intensity_loop:
22769 5A5C           BA                   03C0    mov dx, # 0x3c0
22770 5A5F           88C8                         mov al, cl
22771 5A61           EE                           out dx, al
22772 5A62           BA                   03C1    mov dx, # 0x3c1
22773 5A65           EC                           in al, dx
22774 5A66           24                     EF    and al, #0xef
22775 5A68           08D8                         or al, bl
22776 5A6A           BA                   03C0    mov dx, # 0x3c0
22777 5A6D           EE                           out dx, al
22778 5A6E           FEC1                         inc cl
22779 5A70           80F9                   04    cmp cl, #0x04
22780 5A73           75           E7              jne set_intensity_loop
22781 5A75           B0                     20    mov al, #0x20
22782 5A77           EE                           out dx, al
22783 5A78           5A                           pop dx
22784 5A79           59                           pop cx
22785 5A7A           5B                           pop bx
22786 5A7B           58                           pop ax
22787 5A7C           C3                           ret
22788                       00005A7D            biosfn_set_palette:
22789 5A7D           50                           push ax
22790 5A7E           53                           push bx
22791 5A7F           51                           push cx
22792 5A80           52                           push dx
22793 5A81           BA                   03DA    mov dx, # 0x3da
22794 5A84           EC                           in al, dx
22795 5A85           B1                     01    mov cl, #0x01
22796 5A87           80E3                   01    and bl, #0x01
22797                       00005A8A            set_cga_palette_loop:
22798 5A8A           BA                   03C0    mov dx, # 0x3c0
22799 5A8D           88C8                         mov al, cl
22800 5A8F           EE                           out dx, al
22801 5A90           BA                   03C1    mov dx, # 0x3c1
22802 5A93           EC                           in al, dx
22803 5A94           24                     FE    and al, #0xfe
22804 5A96           08D8                         or al, bl
22805 5A98           BA                   03C0    mov dx, # 0x3c0
22806 5A9B           EE                           out dx, al
22807 5A9C           FEC1                         inc cl
22808 5A9E           80F9                   04    cmp cl, #0x04
22809 5AA1           75           E7              jne set_cga_palette_loop
22810 5AA3           B0                     20    mov al, #0x20
22811 5AA5           EE                           out dx, al
22812 5AA6           5A                           pop dx
22813 5AA7           59                           pop cx
22814 5AA8           5B                           pop bx
22815 5AA9           58                           pop ax
22816 5AAA           C3                           ret
22817                                           ! 2757 endasm
22818                                           !BCC_ENDASM
22819                                           ! 2758 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22820                                           ! Register BX used in function biosfn_write_char_only
22821                       00005AAB            _biosfn_write_pixel:
22822                                           !BCC_EOS
22823                                           !BCC_EOS
22824                                           !BCC_EOS
22825                                           !BCC_EOS
22826                                           ! 2759 {
22827                                           ! 2760  Bit8u mode,line,mask,attr,data;
22828                                           !BCC_EOS
22829                                           ! 2761  Bit16u addr;
22830                                           !BCC_EOS
22831                                           ! 2762  mode=read_byte(0x40,0x49);
22832 5AAB           55                         push	bp
22833 5AAC           89E5                       mov	bp,sp
22834 5AAE           83C4                   F8  add	sp,*-8
22835                                           ! Debug: list int = const $49 (used reg = )
22836 5AB1           B8                   0049  mov	ax,*$49
22837 5AB4           50                         push	ax
22838                                           ! Debug: list int = const $40 (used reg = )
22839 5AB5           B8                   0040  mov	ax,*$40
22840 5AB8           50                         push	ax
22841                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22842 5AB9           E8         225E            call	_read_byte
22843 5ABC           83C4                   04  add	sp,*4
22844                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22845 5ABF           8846         FF            mov	-1[bp],al
22846                                           !BCC_EOS
22847                                           ! 2763  line=find_vga_entry(mode);
22848                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22849 5AC2           8A46         FF            mov	al,-1[bp]
22850 5AC5           30E4                       xor	ah,ah
22851 5AC7           50                         push	ax
22852                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22853 5AC8           E8         2163            call	_find_vga_entry
22854 5ACB           44                         inc	sp
22855 5ACC           44                         inc	sp
22856                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22857 5ACD           8846         FE            mov	-2[bp],al
22858                                           !BCC_EOS
22859                                           ! 2764  if(line==0xFF)return;
22860                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22861 5AD0           8A46         FE            mov	al,-2[bp]
22862 5AD3           3C                     FF  cmp	al,#$FF
22863 5AD5           75           04            jne 	.1BF
22864                       00005AD7            .1C0:
22865 5AD7           89EC                       mov	sp,bp
22866 5AD9           5D                         pop	bp
22867 5ADA           C3                         ret
22868                                           !BCC_EOS
22869                                           ! 2765  if(vga_modes[line].class==0x00)return;
22870                       00005ADB            .1BF:
22871                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22872 5ADB           8A46         FE            mov	al,-2[bp]
22873 5ADE           30E4                       xor	ah,ah
22874 5AE0           B1                     03  mov	cl,*3
22875 5AE2           D3E0                       shl	ax,cl
22876 5AE4           89C3                       mov	bx,ax
22877 5AE6           81C3                 020B  add	bx,#_vga_modes
22878                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22879 5AEA           8A47         01            mov	al,1[bx]
22880 5AED           84C0                       test	al,al
22881 5AEF           75           04            jne 	.1C1
22882                       00005AF1            .1C2:
22883 5AF1           89EC                       mov	sp,bp
22884 5AF3           5D                         pop	bp
22885 5AF4           C3                         ret
22886                                           !BCC_EOS
22887                                           ! 2766  switch(vga_modes[line].memmodel)
22888                       00005AF5            .1C1:
22889                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22890 5AF5           8A46         FE            mov	al,-2[bp]
22891 5AF8           30E4                       xor	ah,ah
22892 5AFA           B1                     03  mov	cl,*3
22893 5AFC           D3E0                       shl	ax,cl
22894 5AFE           89C3                       mov	bx,ax
22895 5B00           81C3                 020B  add	bx,#_vga_modes
22896 5B04           8A47         02            mov	al,2[bx]
22897                                           ! 2767   {
22898 5B07           E9         0226            br 	.1C5
22899                                           ! 2768    case 0x04:
22900                                           ! 2769    case 0x03:
22901                       00005B0A            .1C6:
22902                                           ! 2770      addr = CX/8+DX*read_word(0x40,0x4A);
22903                       00005B0A            .1C7:
22904                                           ! Debug: list int = const $4A (used reg = )
22905 5B0A           B8                   004A  mov	ax,*$4A
22906 5B0D           50                         push	ax
22907                                           ! Debug: list int = const $40 (used reg = )
22908 5B0E           B8                   0040  mov	ax,*$40
22909 5B11           50                         push	ax
22910                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22911 5B12           E8         2218            call	_read_word
22912 5B15           83C4                   04  add	sp,*4
22913                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22914                                           ! Debug: expression subtree swapping
22915 5B18           8B4E         0A            mov	cx,$A[bp]
22916 5B1B           F7E9                       imul	cx
22917 5B1D           50                         push	ax
22918                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22919 5B1E           8B46         08            mov	ax,8[bp]
22920 5B21           B1                     03  mov	cl,*3
22921 5B23           D3E8                       shr	ax,cl
22922                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22923 5B25           0346         F6            add	ax,0+..FFF8[bp]
22924 5B28           44                         inc	sp
22925 5B29           44                         inc	sp
22926                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22927 5B2A           8946         F8            mov	-8[bp],ax
22928                                           !BCC_EOS
22929                                           ! 2771      mask = 0x80 >> (CX & 0x07);
22930                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22931 5B2D           8A46         08            mov	al,8[bp]
22932 5B30           24                     07  and	al,*7
22933                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22934 5B32           30E4                       xor	ah,ah
22935 5B34           89C3                       mov	bx,ax
22936 5B36           B8                   0080  mov	ax,#$80
22937 5B39           89D9                       mov	cx,bx
22938 5B3B           D3F8                       sar	ax,cl
22939                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22940 5B3D           8846         FD            mov	-3[bp],al
22941                                           !BCC_EOS
22942                                           ! 2772      outw(0x3ce, (mask << 8) | 0x08);
22943                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22944 5B40           8A46         FD            mov	al,-3[bp]
22945 5B43           30E4                       xor	ah,ah
22946 5B45           88C4                       mov	ah,al
22947 5B47           30C0                       xor	al,al
22948                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22949 5B49           0C                     08  or	al,*8
22950                                           ! Debug: list unsigned int = ax+0 (used reg = )
22951 5B4B           50                         push	ax
22952                                           ! Debug: list int = const $3CE (used reg = )
22953 5B4C           B8                   03CE  mov	ax,#$3CE
22954 5B4F           50                         push	ax
22955                                           ! Debug: func () void = outw+0 (used reg = )
22956 5B50           E8         2243            call	_outw
22957 5B53           83C4                   04  add	sp,*4
22958                                           !BCC_EOS
22959                                           ! 2773      outw(0x3ce, 0x0205);
22960                                           ! Debug: list int = const $205 (used reg = )
22961 5B56           B8                   0205  mov	ax,#$205
22962 5B59           50                         push	ax
22963                                           ! Debug: list int = const $3CE (used reg = )
22964 5B5A           B8                   03CE  mov	ax,#$3CE
22965 5B5D           50                         push	ax
22966                                           ! Debug: func () void = outw+0 (used reg = )
22967 5B5E           E8         2235            call	_outw
22968 5B61           83C4                   04  add	sp,*4
22969                                           !BCC_EOS
22970                                           ! 2774      data = read_byte(0xa000,addr);
22971                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22972 5B64           FF76         F8            push	-8[bp]
22973                                           ! Debug: list unsigned int = const $A000 (used reg = )
22974 5B67           B8                   A000  mov	ax,#$A000
22975 5B6A           50                         push	ax
22976                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22977 5B6B           E8         21AC            call	_read_byte
22978 5B6E           83C4                   04  add	sp,*4
22979                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22980 5B71           8846         FB            mov	-5[bp],al
22981                                           !BCC_EOS
22982                                           ! 2775      if (AL & 0x80)
22983                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22984 5B74           8A46         06            mov	al,6[bp]
22985 5B77           24                     80  and	al,#$80
22986 5B79           84C0                       test	al,al
22987 5B7B           74           0E            je  	.1C8
22988                       00005B7D            .1C9:
22989                                           ! 2776       {
22990                                           ! 2777        outw(0x3ce, 0x1803);
22991                                           ! Debug: list int = const $1803 (used reg = )
22992 5B7D           B8                   1803  mov	ax,#$1803
22993 5B80           50                         push	ax
22994                                           ! Debug: list int = const $3CE (used reg = )
22995 5B81           B8                   03CE  mov	ax,#$3CE
22996 5B84           50                         push	ax
22997                                           ! Debug: func () void = outw+0 (used reg = )
22998 5B85           E8         220E            call	_outw
22999 5B88           83C4                   04  add	sp,*4
23000                                           !BCC_EOS
23001                                           ! 2778       }
23002                                           ! 2779      write_byte(0xa000,addr,AL);
23003                       00005B8B            .1C8:
23004                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23005 5B8B           8A46         06            mov	al,6[bp]
23006 5B8E           30E4                       xor	ah,ah
23007 5B90           50                         push	ax
23008                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23009 5B91           FF76         F8            push	-8[bp]
23010                                           ! Debug: list unsigned int = const $A000 (used reg = )
23011 5B94           B8                   A000  mov	ax,#$A000
23012 5B97           50                         push	ax
23013                                           ! Debug: func () void = write_byte+0 (used reg = )
23014 5B98           E8         21A5            call	_write_byte
23015 5B9B           83C4                   06  add	sp,*6
23016                                           !BCC_EOS
23017                                           ! 2780 #asm
23018                                           !BCC_EOS
23019                                           !BCC_ASM
23020                       0000000C            _biosfn_write_pixel.BH	set	$C
23021                       00000004            .biosfn_write_pixel.BH	set	4
23022                       00000010            _biosfn_write_pixel.CX	set	$10
23023                       00000008            .biosfn_write_pixel.CX	set	8
23024                       00000006            _biosfn_write_pixel.line	set	6
23025                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
23026                       0000000E            _biosfn_write_pixel.AL	set	$E
23027                       00000006            .biosfn_write_pixel.AL	set	6
23028                       00000003            _biosfn_write_pixel.data	set	3
23029                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
23030                       00000012            _biosfn_write_pixel.DX	set	$12
23031                       0000000A            .biosfn_write_pixel.DX	set	$A
23032                       00000005            _biosfn_write_pixel.mask	set	5
23033                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
23034                       00000004            _biosfn_write_pixel.attr	set	4
23035                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
23036                       00000007            _biosfn_write_pixel.mode	set	7
23037                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
23038                       00000000            _biosfn_write_pixel.addr	set	0
23039                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
23040 5B9E           BA                   03CE       mov dx, # 0x3ce
23041 5BA1           B8                   FF08       mov ax, #0xff08
23042 5BA4           EF                              out dx, ax
23043 5BA5           B8                   0005       mov ax, #0x0005
23044 5BA8           EF                              out dx, ax
23045 5BA9           B8                   0003       mov ax, #0x0003
23046 5BAC           EF                              out dx, ax
23047                                           ! 2788 endasm
23048                                           !BCC_ENDASM
23049                                           !BCC_EOS
23050                                           ! 2789      break;
23051 5BAD           E9         0198            br 	.1C3
23052                                           !BCC_EOS
23053                                           ! 2790    case 0x02:
23054                                           ! 2791      if(vga_modes[line].pixbits==2)
23055                       00005BB0            .1CA:
23056                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
23057 5BB0           8A46         FE            mov	al,-2[bp]
23058 5BB3           30E4                       xor	ah,ah
23059 5BB5           B1                     03  mov	cl,*3
23060 5BB7           D3E0                       shl	ax,cl
23061 5BB9           89C3                       mov	bx,ax
23062 5BBB           81C3                 020B  add	bx,#_vga_modes
23063                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23064 5BBF           8A47         03            mov	al,3[bx]
23065 5BC2           3C                     02  cmp	al,*2
23066 5BC4           75           1C            jne 	.1CB
23067                       00005BC6            .1CC:
23068                                           ! 2792       {
23069                                           ! 2793        addr=(CX>>2)+(DX>>1)*80;
23070                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23071 5BC6           8B46         0A            mov	ax,$A[bp]
23072 5BC9           D1E8                       shr	ax,*1
23073                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23074 5BCB           B9                   0050  mov	cx,*$50
23075 5BCE           F7E9                       imul	cx
23076 5BD0           50                         push	ax
23077                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
23078 5BD1           8B46         08            mov	ax,8[bp]
23079 5BD4           D1E8                       shr	ax,*1
23080 5BD6           D1E8                       shr	ax,*1
23081                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
23082 5BD8           0346         F6            add	ax,0+..FFF8[bp]
23083 5BDB           44                         inc	sp
23084 5BDC           44                         inc	sp
23085                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23086 5BDD           8946         F8            mov	-8[bp],ax
23087                                           !BCC_EOS
23088                                           ! 2794       }
23089                                           ! 2795      else
23090                                           ! 2796       {
23091 5BE0           EB           1A            jmp .1CD
23092                       00005BE2            .1CB:
23093                                           ! 2797        addr=(CX>>3)+(DX>>1)*80;
23094                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23095 5BE2           8B46         0A            mov	ax,$A[bp]
23096 5BE5           D1E8                       shr	ax,*1
23097                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23098 5BE7           B9                   0050  mov	cx,*$50
23099 5BEA           F7E9                       imul	cx
23100 5BEC           50                         push	ax
23101                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
23102 5BED           8B46         08            mov	ax,8[bp]
23103 5BF0           B1                     03  mov	cl,*3
23104 5BF2           D3E8                       shr	ax,cl
23105                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
23106 5BF4           0346         F6            add	ax,0+..FFF8[bp]
23107 5BF7           44                         inc	sp
23108 5BF8           44                         inc	sp
23109                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23110 5BF9           8946         F8            mov	-8[bp],ax
23111                                           !BCC_EOS
23112                                           ! 2798       }
23113                                           ! 2799      if (DX & 1) addr += 0x2000;
23114                       00005BFC            .1CD:
23115                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23116 5BFC           8A46         0A            mov	al,$A[bp]
23117 5BFF           24                     01  and	al,*1
23118 5C01           84C0                       test	al,al
23119 5C03           74           09            je  	.1CE
23120                       00005C05            .1CF:
23121                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
23122 5C05           8B46         F8            mov	ax,-8[bp]
23123 5C08           05                   2000  add	ax,#$2000
23124 5C0B           8946         F8            mov	-8[bp],ax
23125                                           !BCC_EOS
23126                                           ! 2800      data = read_byte(0xb800,addr);
23127                       00005C0E            .1CE:
23128                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
23129 5C0E           FF76         F8            push	-8[bp]
23130                                           ! Debug: list unsigned int = const $B800 (used reg = )
23131 5C11           B8                   B800  mov	ax,#$B800
23132 5C14           50                         push	ax
23133                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23134 5C15           E8         2102            call	_read_byte
23135 5C18           83C4                   04  add	sp,*4
23136                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
23137 5C1B           8846         FB            mov	-5[bp],al
23138                                           !BCC_EOS
23139                                           ! 2801      if(vga_modes[line].pixbits==2)
23140                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
23141 5C1E           8A46         FE            mov	al,-2[bp]
23142 5C21           30E4                       xor	ah,ah
23143 5C23           B1                     03  mov	cl,*3
23144 5C25           D3E0                       shl	ax,cl
23145 5C27           89C3                       mov	bx,ax
23146 5C29           81C3                 020B  add	bx,#_vga_modes
23147                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23148 5C2D           8A47         03            mov	al,3[bx]
23149 5C30           3C                     02  cmp	al,*2
23150 5C32           75           46            jne 	.1D0
23151                       00005C34            .1D1:
23152                                           ! 2802       {
23153                                           ! 2803        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
23154                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23155 5C34           8A46         08            mov	al,8[bp]
23156 5C37           24                     03  and	al,*3
23157                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23158 5C39           50                         push	ax
23159 5C3A           B8                   0003  mov	ax,*3
23160 5C3D           2A46         F6            sub	al,0+..FFF8[bp]
23161 5C40           80DC                   00  sbb	ah,*0
23162 5C43           44                         inc	sp
23163 5C44           44                         inc	sp
23164                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23165 5C45           D1E0                       shl	ax,*1
23166 5C47           50                         push	ax
23167                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
23168 5C48           8A46         06            mov	al,6[bp]
23169 5C4B           24                     03  and	al,*3
23170                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23171 5C4D           30E4                       xor	ah,ah
23172 5C4F           8B4E         F6            mov	cx,0+..FFF8[bp]
23173 5C52           D3E0                       shl	ax,cl
23174 5C54           44                         inc	sp
23175 5C55           44                         inc	sp
23176                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23177 5C56           8846         FC            mov	-4[bp],al
23178                                           !BCC_EOS
23179                                           ! 2804        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
23180                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23181 5C59           8A46         08            mov	al,8[bp]
23182 5C5C           24                     03  and	al,*3
23183                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23184 5C5E           50                         push	ax
23185 5C5F           B8                   0003  mov	ax,*3
23186 5C62           2A46         F6            sub	al,0+..FFF8[bp]
23187 5C65           80DC                   00  sbb	ah,*0
23188 5C68           44                         inc	sp
23189 5C69           44                         inc	sp
23190                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23191 5C6A           D1E0                       shl	ax,*1
23192                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
23193 5C6C           89C3                       mov	bx,ax
23194 5C6E           B8                   0003  mov	ax,*3
23195 5C71           89D9                       mov	cx,bx
23196 5C73           D3E0                       shl	ax,cl
23197                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23198 5C75           8846         FD            mov	-3[bp],al
23199                                           !BCC_EOS
23200                                           ! 2805       }
23201                                           ! 2806      else
23202                                           ! 2807       {
23203 5C78           EB           40            jmp .1D2
23204                       00005C7A            .1D0:
23205                                           ! 2808        attr = (AL & 0x01) << (7 - (CX & 0x07));
23206                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23207 5C7A           8A46         08            mov	al,8[bp]
23208 5C7D           24                     07  and	al,*7
23209                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23210 5C7F           50                         push	ax
23211 5C80           B8                   0007  mov	ax,*7
23212 5C83           2A46         F6            sub	al,0+..FFF8[bp]
23213 5C86           80DC                   00  sbb	ah,*0
23214 5C89           44                         inc	sp
23215 5C8A           44                         inc	sp
23216 5C8B           50                         push	ax
23217                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23218 5C8C           8A46         06            mov	al,6[bp]
23219 5C8F           24                     01  and	al,*1
23220                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23221 5C91           30E4                       xor	ah,ah
23222 5C93           8B4E         F6            mov	cx,0+..FFF8[bp]
23223 5C96           D3E0                       shl	ax,cl
23224 5C98           44                         inc	sp
23225 5C99           44                         inc	sp
23226                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23227 5C9A           8846         FC            mov	-4[bp],al
23228                                           !BCC_EOS
23229                                           ! 2809        mask = 0x01 << (7 - (CX & 0x07));
23230                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23231 5C9D           8A46         08            mov	al,8[bp]
23232 5CA0           24                     07  and	al,*7
23233                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23234 5CA2           50                         push	ax
23235 5CA3           B8                   0007  mov	ax,*7
23236 5CA6           2A46         F6            sub	al,0+..FFF8[bp]
23237 5CA9           80DC                   00  sbb	ah,*0
23238 5CAC           44                         inc	sp
23239 5CAD           44                         inc	sp
23240                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23241 5CAE           89C3                       mov	bx,ax
23242 5CB0           B8                   0001  mov	ax,*1
23243 5CB3           89D9                       mov	cx,bx
23244 5CB5           D3E0                       shl	ax,cl
23245                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23246 5CB7           8846         FD            mov	-3[bp],al
23247                                           !BCC_EOS
23248                                           ! 2810       }
23249                                           ! 2811      if (AL & 0x80)
23250                       00005CBA            .1D2:
23251                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23252 5CBA           8A46         06            mov	al,6[bp]
23253 5CBD           24                     80  and	al,#$80
23254 5CBF           84C0                       test	al,al
23255 5CC1           74           0B            je  	.1D3
23256                       00005CC3            .1D4:
23257                                           ! 2812       {
23258                                           ! 2813        data ^= attr;
23259                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23260 5CC3           8A46         FB            mov	al,-5[bp]
23261 5CC6           3246         FC            xor	al,-4[bp]
23262 5CC9           8846         FB            mov	-5[bp],al
23263                                           !BCC_EOS
23264                                           ! 2814       }
23265                                           ! 2815      else
23266                                           ! 2816       {
23267 5CCC           EB           16            jmp .1D5
23268                       00005CCE            .1D3:
23269                                           ! 2817        data &= ~mask;
23270                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23271 5CCE           8A46         FD            mov	al,-3[bp]
23272 5CD1           30E4                       xor	ah,ah
23273 5CD3           F7D0                       not	ax
23274                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23275 5CD5           2246         FB            and	al,-5[bp]
23276 5CD8           8846         FB            mov	-5[bp],al
23277                                           !BCC_EOS
23278                                           ! 2818        data |= attr;
23279                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23280 5CDB           8A46         FB            mov	al,-5[bp]
23281 5CDE           0A46         FC            or	al,-4[bp]
23282 5CE1           8846         FB            mov	-5[bp],al
23283                                           !BCC_EOS
23284                                           ! 2819       }
23285                                           ! 2820      write_byte(0xb800,addr,data);
23286                       00005CE4            .1D5:
23287                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23288 5CE4           8A46         FB            mov	al,-5[bp]
23289 5CE7           30E4                       xor	ah,ah
23290 5CE9           50                         push	ax
23291                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23292 5CEA           FF76         F8            push	-8[bp]
23293                                           ! Debug: list unsigned int = const $B800 (used reg = )
23294 5CED           B8                   B800  mov	ax,#$B800
23295 5CF0           50                         push	ax
23296                                           ! Debug: func () void = write_byte+0 (used reg = )
23297 5CF1           E8         204C            call	_write_byte
23298 5CF4           83C4                   06  add	sp,*6
23299                                           !BCC_EOS
23300                                           ! 2821      break;
23301 5CF7           EB           4F            jmp .1C3
23302                                           !BCC_EOS
23303                                           ! 2822    case 0x05:
23304                                           ! 2823      addr=CX+DX*(read_word(0x40,0x4A)*8);
23305                       00005CF9            .1D6:
23306                                           ! Debug: list int = const $4A (used reg = )
23307 5CF9           B8                   004A  mov	ax,*$4A
23308 5CFC           50                         push	ax
23309                                           ! Debug: list int = const $40 (used reg = )
23310 5CFD           B8                   0040  mov	ax,*$40
23311 5D00           50                         push	ax
23312                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23313 5D01           E8         2029            call	_read_word
23314 5D04           83C4                   04  add	sp,*4
23315                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23316 5D07           B1                     03  mov	cl,*3
23317 5D09           D3E0                       shl	ax,cl
23318                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23319                                           ! Debug: expression subtree swapping
23320 5D0B           8B4E         0A            mov	cx,$A[bp]
23321 5D0E           F7E9                       imul	cx
23322                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23323                                           ! Debug: expression subtree swapping
23324 5D10           0346         08            add	ax,8[bp]
23325                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23326 5D13           8946         F8            mov	-8[bp],ax
23327                                           !BCC_EOS
23328                                           ! 2824      write_byte(0xa000,addr,AL);
23329                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23330 5D16           8A46         06            mov	al,6[bp]
23331 5D19           30E4                       xor	ah,ah
23332 5D1B           50                         push	ax
23333                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23334 5D1C           FF76         F8            push	-8[bp]
23335                                           ! Debug: list unsigned int = const $A000 (used reg = )
23336 5D1F           B8                   A000  mov	ax,#$A000
23337 5D22           50                         push	ax
23338                                           ! Debug: func () void = write_byte+0 (used reg = )
23339 5D23           E8         201A            call	_write_byte
23340 5D26           83C4                   06  add	sp,*6
23341                                           !BCC_EOS
23342                                           ! 2825      break;
23343 5D29           EB           1D            jmp .1C3
23344                                           !BCC_EOS
23345                                           ! 2826    default:
23346                                           ! 2827      unimplemented();
23347                       00005D2B            .1D7:
23348                                           ! Debug: func () void = unimplemented+0 (used reg = )
23349 5D2B           E8         207B            call	_unimplemented
23350                                           !BCC_EOS
23351                                           ! 2828   }
23352                                           ! 2829 }
23353 5D2E           EB           18            jmp .1C3
23354                       00005D30            .1C5:
23355 5D30           2C                     02  sub	al,*2
23356 5D32         0F84         FE7A            beq 	.1CA
23357 5D36           2C                     01  sub	al,*1
23358 5D38         0F84         FDCE            beq 	.1C7
23359 5D3C           2C                     01  sub	al,*1
23360 5D3E         0F84         FDC8            beq 	.1C6
23361 5D42           2C                     01  sub	al,*1
23362 5D44           74           B3            je 	.1D6
23363 5D46           EB           E3            jmp	.1D7
23364                       00005D48            .1C3:
23365                       FFFFFFF6            ..FFF8	=	-$A
23366 5D48           89EC                       mov	sp,bp
23367 5D4A           5D                         pop	bp
23368 5D4B           C3                         ret
23369                                           ! 2830 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23370                                           ! Register BX used in function biosfn_write_pixel
23371                       00005D4C            _biosfn_read_pixel:
23372                                           !BCC_EOS
23373                                           !BCC_EOS
23374                                           !BCC_EOS
23375                                           !BCC_EOS
23376                                           ! 2831 {
23377                                           ! 2832  Bit8u mode,line,mask,attr,data,i;
23378                                           !BCC_EOS
23379                                           ! 2833  Bit16u addr;
23380                                           !BCC_EOS
23381                                           ! 2834  Bit16u ss=get_SS();
23382 5D4C           55                         push	bp
23383 5D4D           89E5                       mov	bp,sp
23384 5D4F           83C4                   F6  add	sp,*-$A
23385                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23386 5D52           E8         2051            call	_get_SS
23387                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23388 5D55           8946         F6            mov	-$A[bp],ax
23389                                           !BCC_EOS
23390                                           ! 2835  mode=read_byte(0x40,0x49);
23391                                           ! Debug: list int = const $49 (used reg = )
23392 5D58           B8                   0049  mov	ax,*$49
23393 5D5B           50                         push	ax
23394                                           ! Debug: list int = const $40 (used reg = )
23395 5D5C           B8                   0040  mov	ax,*$40
23396 5D5F           50                         push	ax
23397                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23398 5D60           E8         1FB7            call	_read_byte
23399 5D63           83C4                   04  add	sp,*4
23400                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23401 5D66           8846         FF            mov	-1[bp],al
23402                                           !BCC_EOS
23403                                           ! 2836  line=find_vga_entry(mode);
23404                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23405 5D69           8A46         FF            mov	al,-1[bp]
23406 5D6C           30E4                       xor	ah,ah
23407 5D6E           50                         push	ax
23408                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23409 5D6F           E8         1EBC            call	_find_vga_entry
23410 5D72           44                         inc	sp
23411 5D73           44                         inc	sp
23412                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23413 5D74           8846         FE            mov	-2[bp],al
23414                                           !BCC_EOS
23415                                           ! 2837  if(line==0xFF)return;
23416                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23417 5D77           8A46         FE            mov	al,-2[bp]
23418 5D7A           3C                     FF  cmp	al,#$FF
23419 5D7C           75           04            jne 	.1D8
23420                       00005D7E            .1D9:
23421 5D7E           89EC                       mov	sp,bp
23422 5D80           5D                         pop	bp
23423 5D81           C3                         ret
23424                                           !BCC_EOS
23425                                           ! 2838  if(vga_modes[line].class==0x00)return;
23426                       00005D82            .1D8:
23427                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23428 5D82           8A46         FE            mov	al,-2[bp]
23429 5D85           30E4                       xor	ah,ah
23430 5D87           B1                     03  mov	cl,*3
23431 5D89           D3E0                       shl	ax,cl
23432 5D8B           89C3                       mov	bx,ax
23433 5D8D           81C3                 020B  add	bx,#_vga_modes
23434                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23435 5D91           8A47         01            mov	al,1[bx]
23436 5D94           84C0                       test	al,al
23437 5D96           75           04            jne 	.1DA
23438                       00005D98            .1DB:
23439 5D98           89EC                       mov	sp,bp
23440 5D9A           5D                         pop	bp
23441 5D9B           C3                         ret
23442                                           !BCC_EOS
23443                                           ! 2839  switch(vga_modes[line].memmodel)
23444                       00005D9C            .1DA:
23445                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23446 5D9C           8A46         FE            mov	al,-2[bp]
23447 5D9F           30E4                       xor	ah,ah
23448 5DA1           B1                     03  mov	cl,*3
23449 5DA3           D3E0                       shl	ax,cl
23450 5DA5           89C3                       mov	bx,ax
23451 5DA7           81C3                 020B  add	bx,#_vga_modes
23452 5DAB           8A47         02            mov	al,2[bx]
23453                                           ! 2840   {
23454 5DAE           E9         016A            br 	.1DE
23455                                           ! 2841    case 0x04:
23456                                           ! 2842    case 0x03:
23457                       00005DB1            .1DF:
23458                                           ! 2843      addr = CX/8+DX*read_word(0x40,0x4A);
23459                       00005DB1            .1E0:
23460                                           ! Debug: list int = const $4A (used reg = )
23461 5DB1           B8                   004A  mov	ax,*$4A
23462 5DB4           50                         push	ax
23463                                           ! Debug: list int = const $40 (used reg = )
23464 5DB5           B8                   0040  mov	ax,*$40
23465 5DB8           50                         push	ax
23466                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23467 5DB9           E8         1F71            call	_read_word
23468 5DBC           83C4                   04  add	sp,*4
23469                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23470                                           ! Debug: expression subtree swapping
23471 5DBF           8B4E         08            mov	cx,8[bp]
23472 5DC2           F7E9                       imul	cx
23473 5DC4           50                         push	ax
23474                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23475 5DC5           8B46         06            mov	ax,6[bp]
23476 5DC8           B1                     03  mov	cl,*3
23477 5DCA           D3E8                       shr	ax,cl
23478                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23479 5DCC           0346         F4            add	ax,0+..FFF7[bp]
23480 5DCF           44                         inc	sp
23481 5DD0           44                         inc	sp
23482                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23483 5DD1           8946         F8            mov	-8[bp],ax
23484                                           !BCC_EOS
23485                                           ! 2844      mask = 0x80 >> (CX & 0x07);
23486                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23487 5DD4           8A46         06            mov	al,6[bp]
23488 5DD7           24                     07  and	al,*7
23489                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23490 5DD9           30E4                       xor	ah,ah
23491 5DDB           89C3                       mov	bx,ax
23492 5DDD           B8                   0080  mov	ax,#$80
23493 5DE0           89D9                       mov	cx,bx
23494 5DE2           D3F8                       sar	ax,cl
23495                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23496 5DE4           8846         FD            mov	-3[bp],al
23497                                           !BCC_EOS
23498                                           ! 2845      attr = 0x00;
23499                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23500 5DE7           30C0                       xor	al,al
23501 5DE9           8846         FC            mov	-4[bp],al
23502                                           !BCC_EOS
23503                                           ! 2846      for(i=0;i<4;i++)
23504                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23505 5DEC           30C0                       xor	al,al
23506 5DEE           8846         FA            mov	-6[bp],al
23507                                           !BCC_EOS
23508                                           !BCC_EOS
23509                                           ! 2847       {
23510 5DF1           EB           4B            jmp .1E3
23511                       00005DF3            .1E4:
23512                                           ! 2848        outw(0x3ce, (
23513                                           ! 2848 i << 8) | 0x04);
23514                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23515 5DF3           8A46         FA            mov	al,-6[bp]
23516 5DF6           30E4                       xor	ah,ah
23517 5DF8           88C4                       mov	ah,al
23518 5DFA           30C0                       xor	al,al
23519                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23520 5DFC           0C                     04  or	al,*4
23521                                           ! Debug: list unsigned int = ax+0 (used reg = )
23522 5DFE           50                         push	ax
23523                                           ! Debug: list int = const $3CE (used reg = )
23524 5DFF           B8                   03CE  mov	ax,#$3CE
23525 5E02           50                         push	ax
23526                                           ! Debug: func () void = outw+0 (used reg = )
23527 5E03           E8         1F90            call	_outw
23528 5E06           83C4                   04  add	sp,*4
23529                                           !BCC_EOS
23530                                           ! 2849        data = read_byte(0xa000,addr) & mask;
23531                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23532 5E09           FF76         F8            push	-8[bp]
23533                                           ! Debug: list unsigned int = const $A000 (used reg = )
23534 5E0C           B8                   A000  mov	ax,#$A000
23535 5E0F           50                         push	ax
23536                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23537 5E10           E8         1F07            call	_read_byte
23538 5E13           83C4                   04  add	sp,*4
23539                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23540 5E16           2246         FD            and	al,-3[bp]
23541                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23542 5E19           8846         FB            mov	-5[bp],al
23543                                           !BCC_EOS
23544                                           ! 2850        if (data > 0) attr |= (0x01 << i);
23545                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23546 5E1C           8A46         FB            mov	al,-5[bp]
23547 5E1F           84C0                       test	al,al
23548 5E21           74           14            je  	.1E5
23549                       00005E23            .1E6:
23550                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23551 5E23           8A46         FA            mov	al,-6[bp]
23552 5E26           30E4                       xor	ah,ah
23553 5E28           89C3                       mov	bx,ax
23554 5E2A           B8                   0001  mov	ax,*1
23555 5E2D           89D9                       mov	cx,bx
23556 5E2F           D3E0                       shl	ax,cl
23557                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23558 5E31           0A46         FC            or	al,-4[bp]
23559 5E34           8846         FC            mov	-4[bp],al
23560                                           !BCC_EOS
23561                                           ! 2851       }
23562                       00005E37            .1E5:
23563                                           ! 2852      break;
23564                       00005E37            .1E2:
23565                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23566 5E37           8A46         FA            mov	al,-6[bp]
23567 5E3A           40                         inc	ax
23568 5E3B           8846         FA            mov	-6[bp],al
23569                       00005E3E            .1E3:
23570                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23571 5E3E           8A46         FA            mov	al,-6[bp]
23572 5E41           3C                     04  cmp	al,*4
23573 5E43           72           AE            jb 	.1E4
23574                       00005E45            .1E7:
23575                       00005E45            .1E1:
23576 5E45           E9         00EB            br 	.1DC
23577                                           !BCC_EOS
23578                                           ! 2853    case 0x02:
23579                                           ! 2854      addr=(CX>>2)+(DX>>1)*80;
23580                       00005E48            .1E8:
23581                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23582 5E48           8B46         08            mov	ax,8[bp]
23583 5E4B           D1E8                       shr	ax,*1
23584                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23585 5E4D           B9                   0050  mov	cx,*$50
23586 5E50           F7E9                       imul	cx
23587 5E52           50                         push	ax
23588                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23589 5E53           8B46         06            mov	ax,6[bp]
23590 5E56           D1E8                       shr	ax,*1
23591 5E58           D1E8                       shr	ax,*1
23592                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23593 5E5A           0346         F4            add	ax,0+..FFF7[bp]
23594 5E5D           44                         inc	sp
23595 5E5E           44                         inc	sp
23596                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23597 5E5F           8946         F8            mov	-8[bp],ax
23598                                           !BCC_EOS
23599                                           ! 2855      if (DX & 1) addr += 0x2000;
23600                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23601 5E62           8A46         08            mov	al,8[bp]
23602 5E65           24                     01  and	al,*1
23603 5E67           84C0                       test	al,al
23604 5E69           74           09            je  	.1E9
23605                       00005E6B            .1EA:
23606                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23607 5E6B           8B46         F8            mov	ax,-8[bp]
23608 5E6E           05                   2000  add	ax,#$2000
23609 5E71           8946         F8            mov	-8[bp],ax
23610                                           !BCC_EOS
23611                                           ! 2856      data = read_byte(0xb800,addr);
23612                       00005E74            .1E9:
23613                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23614 5E74           FF76         F8            push	-8[bp]
23615                                           ! Debug: list unsigned int = const $B800 (used reg = )
23616 5E77           B8                   B800  mov	ax,#$B800
23617 5E7A           50                         push	ax
23618                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23619 5E7B           E8         1E9C            call	_read_byte
23620 5E7E           83C4                   04  add	sp,*4
23621                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23622 5E81           8846         FB            mov	-5[bp],al
23623                                           !BCC_EOS
23624                                           ! 2857      if(vga_modes[line].pixbits==2)
23625                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23626 5E84           8A46         FE            mov	al,-2[bp]
23627 5E87           30E4                       xor	ah,ah
23628 5E89           B1                     03  mov	cl,*3
23629 5E8B           D3E0                       shl	ax,cl
23630 5E8D           89C3                       mov	bx,ax
23631 5E8F           81C3                 020B  add	bx,#_vga_modes
23632                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23633 5E93           8A47         03            mov	al,3[bx]
23634 5E96           3C                     02  cmp	al,*2
23635 5E98           75           25            jne 	.1EB
23636                       00005E9A            .1EC:
23637                                           ! 2858       {
23638                                           ! 2859        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23639                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23640 5E9A           8A46         06            mov	al,6[bp]
23641 5E9D           24                     03  and	al,*3
23642                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23643 5E9F           50                         push	ax
23644 5EA0           B8                   0003  mov	ax,*3
23645 5EA3           2A46         F4            sub	al,0+..FFF7[bp]
23646 5EA6           80DC                   00  sbb	ah,*0
23647 5EA9           44                         inc	sp
23648 5EAA           44                         inc	sp
23649                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23650 5EAB           D1E0                       shl	ax,*1
23651                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23652 5EAD           89C3                       mov	bx,ax
23653 5EAF           8A46         FB            mov	al,-5[bp]
23654 5EB2           30E4                       xor	ah,ah
23655 5EB4           89D9                       mov	cx,bx
23656 5EB6           D3E8                       shr	ax,cl
23657                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23658 5EB8           24                     03  and	al,*3
23659                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23660 5EBA           8846         FC            mov	-4[bp],al
23661                                           !BCC_EOS
23662                                           ! 2860       }
23663                                           ! 2861      else
23664                                           ! 2862       {
23665 5EBD           EB           21            jmp .1ED
23666                       00005EBF            .1EB:
23667                                           ! 2863        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23668                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23669 5EBF           8A46         06            mov	al,6[bp]
23670 5EC2           24                     07  and	al,*7
23671                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23672 5EC4           50                         push	ax
23673 5EC5           B8                   0007  mov	ax,*7
23674 5EC8           2A46         F4            sub	al,0+..FFF7[bp]
23675 5ECB           80DC                   00  sbb	ah,*0
23676 5ECE           44                         inc	sp
23677 5ECF           44                         inc	sp
23678                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23679 5ED0           89C3                       mov	bx,ax
23680 5ED2           8A46         FB            mov	al,-5[bp]
23681 5ED5           30E4                       xor	ah,ah
23682 5ED7           89D9                       mov	cx,bx
23683 5ED9           D3E8                       shr	ax,cl
23684                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23685 5EDB           24                     01  and	al,*1
23686                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23687 5EDD           8846         FC            mov	-4[bp],al
23688                                           !BCC_EOS
23689                                           ! 2864       }
23690                                           ! 2865      break;
23691                       00005EE0            .1ED:
23692 5EE0           EB           51            jmp .1DC
23693                                           !BCC_EOS
23694                                           ! 2866    case 0x05:
23695                                           ! 2867      addr=CX+DX*(read_word(0x40,0x4A)*8);
23696                       00005EE2            .1EE:
23697                                           ! Debug: list int = const $4A (used reg = )
23698 5EE2           B8                   004A  mov	ax,*$4A
23699 5EE5           50                         push	ax
23700                                           ! Debug: list int = const $40 (used reg = )
23701 5EE6           B8                   0040  mov	ax,*$40
23702 5EE9           50                         push	ax
23703                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23704 5EEA           E8         1E40            call	_read_word
23705 5EED           83C4                   04  add	sp,*4
23706                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23707 5EF0           B1                     03  mov	cl,*3
23708 5EF2           D3E0                       shl	ax,cl
23709                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23710                                           ! Debug: expression subtree swapping
23711 5EF4           8B4E         08            mov	cx,8[bp]
23712 5EF7           F7E9                       imul	cx
23713                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23714                                           ! Debug: expression subtree swapping
23715 5EF9           0346         06            add	ax,6[bp]
23716                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23717 5EFC           8946         F8            mov	-8[bp],ax
23718                                           !BCC_EOS
23719                                           ! 2868      attr=read_byte(0xa000,addr);
23720                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23721 5EFF           FF76         F8            push	-8[bp]
23722                                           ! Debug: list unsigned int = const $A000 (used reg = )
23723 5F02           B8                   A000  mov	ax,#$A000
23724 5F05           50                         push	ax
23725                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23726 5F06           E8         1E11            call	_read_byte
23727 5F09           83C4                   04  add	sp,*4
23728                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23729 5F0C           8846         FC            mov	-4[bp],al
23730                                           !BCC_EOS
23731                                           ! 2869      break;
23732 5F0F           EB           22            jmp .1DC
23733                                           !BCC_EOS
23734                                           ! 2870    default:
23735                                           ! 2871      unimplemented();
23736                       00005F11            .1EF:
23737                                           ! Debug: func () void = unimplemented+0 (used reg = )
23738 5F11           E8         1E95            call	_unimplemented
23739                                           !BCC_EOS
23740                                           ! 2872      attr = 0;
23741                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23742 5F14           30C0                       xor	al,al
23743 5F16           8846         FC            mov	-4[bp],al
23744                                           !BCC_EOS
23745                                           ! 2873   }
23746                                           ! 2874  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23747 5F19           EB           18            jmp .1DC
23748                       00005F1B            .1DE:
23749 5F1B           2C                     02  sub	al,*2
23750 5F1D         0F84         FF27            beq 	.1E8
23751 5F21           2C                     01  sub	al,*1
23752 5F23         0F84         FE8A            beq 	.1E0
23753 5F27           2C                     01  sub	al,*1
23754 5F29         0F84         FE84            beq 	.1DF
23755 5F2D           2C                     01  sub	al,*1
23756 5F2F           74           B1            je 	.1EE
23757 5F31           EB           DE            jmp	.1EF
23758                       00005F33            .1DC:
23759                       FFFFFFF4            ..FFF7	=	-$C
23760                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23761 5F33           FF76         0A            push	$A[bp]
23762                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23763 5F36           FF76         F6            push	-$A[bp]
23764                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23765 5F39           E8         1DF1            call	_read_word
23766 5F3C           83C4                   04  add	sp,*4
23767                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23768 5F3F           30C0                       xor	al,al
23769                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23770 5F41           0A46         FC            or	al,-4[bp]
23771                                           ! Debug: list unsigned int = ax+0 (used reg = )
23772 5F44           50                         push	ax
23773                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23774 5F45           FF76         0A            push	$A[bp]
23775                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23776 5F48           FF76         F6            push	-$A[bp]
23777                                           ! Debug: func () void = write_word+0 (used reg = )
23778 5F4B           E8         1E0A            call	_write_word
23779 5F4E           83C4                   06  add	sp,*6
23780                                           !BCC_EOS
23781                                           ! 2875 }
23782 5F51           89EC                       mov	sp,bp
23783 5F53           5D                         pop	bp
23784 5F54           C3                         ret
23785                                           ! 2876 static void biosfn_write_teletype (car, page, attr, flag)
23786                                           ! Register BX used in function biosfn_read_pixel
23787                                           ! 2877 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23788                       00005F55            _biosfn_write_teletype:
23789                                           !BCC_EOS
23790                                           !BCC_EOS
23791                                           !BCC_EOS
23792                                           !BCC_EOS
23793                                           ! 2878 {
23794                                           ! 2879  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23795                                           !BCC_EOS
23796                                           ! 2880  Bit16u nbcols,nbrows,address;
23797                                           !BCC_EOS
23798                                           ! 2881  Bit16u cursor,dummy;
23799                                           !BCC_EOS
23800                                           ! 2882  if(page==0xff)
23801 5F55           55                         push	bp
23802 5F56           89E5                       mov	bp,sp
23803 5F58           83C4                   F0  add	sp,*-$10
23804                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23805 5F5B           8A46         06            mov	al,6[bp]
23806 5F5E           3C                     FF  cmp	al,#$FF
23807 5F60           75           11            jne 	.1F0
23808                       00005F62            .1F1:
23809                                           ! 2883   page=read_byte(0x40,0x62);
23810                                           ! Debug: list int = const $62 (used reg = )
23811 5F62           B8                   0062  mov	ax,*$62
23812 5F65           50                         push	ax
23813                                           ! Debug: list int = const $40 (used reg = )
23814 5F66           B8                   0040  mov	ax,*$40
23815 5F69           50                         push	ax
23816                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23817 5F6A           E8         1DAD            call	_read_byte
23818 5F6D           83C4                   04  add	sp,*4
23819                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23820 5F70           8846         06            mov	6[bp],al
23821                                           !BCC_EOS
23822                                           ! 2884  mode=read_byte(0x40,0x49);
23823                       00005F73            .1F0:
23824                                           ! Debug: list int = const $49 (used reg = )
23825 5F73           B8                   0049  mov	ax,*$49
23826 5F76           50                         push	ax
23827                                           ! Debug: list int = const $40 (used reg = )
23828 5F77           B8                   0040  mov	ax,*$40
23829 5F7A           50                         push	ax
23830                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23831 5F7B           E8         1D9C            call	_read_byte
23832 5F7E           83C4                   04  add	sp,*4
23833                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23834 5F81           8846         FC            mov	-4[bp],al
23835                                           !BCC_EOS
23836                                           ! 2885  line=find_vga_entry(mode);
23837                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23838 5F84           8A46         FC            mov	al,-4[bp]
23839 5F87           30E4                       xor	ah,ah
23840 5F89           50                         push	ax
23841                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23842 5F8A           E8         1CA1            call	_find_vga_entry
23843 5F8D           44                         inc	sp
23844 5F8E           44                         inc	sp
23845                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23846 5F8F           8846         FB            mov	-5[bp],al
23847                                           !BCC_EOS
23848                                           ! 2886  if(line==0xFF)return;
23849                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23850 5F92           8A46         FB            mov	al,-5[bp]
23851 5F95           3C                     FF  cmp	al,#$FF
23852 5F97           75           04            jne 	.1F2
23853                       00005F99            .1F3:
23854 5F99           89EC                       mov	sp,bp
23855 5F9B           5D                         pop	bp
23856 5F9C           C3                         ret
23857                                           !BCC_EOS
23858                                           ! 2887  biosfn_get_cursor_pos(page,&dummy,&cursor);
23859                       00005F9D            .1F2:
23860                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23861 5F9D           8D5E         F2            lea	bx,-$E[bp]
23862 5FA0           53                         push	bx
23863                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23864 5FA1           8D5E         F0            lea	bx,-$10[bp]
23865 5FA4           53                         push	bx
23866                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23867 5FA5           8A46         06            mov	al,6[bp]
23868 5FA8           30E4                       xor	ah,ah
23869 5FAA           50                         push	ax
23870                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23871 5FAB           E8         E50F            call	_biosfn_get_cursor_pos
23872 5FAE           83C4                   06  add	sp,*6
23873                                           !BCC_EOS
23874                                           ! 2888  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23875                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23876 5FB1           8A46         F2            mov	al,-$E[bp]
23877                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23878 5FB4           8846         FE            mov	-2[bp],al
23879                                           !BCC_EOS
23880                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23881 5FB7           8B46         F2            mov	ax,-$E[bp]
23882 5FBA           30C0                       xor	al,al
23883                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23884 5FBC           88E0                       mov	al,ah
23885 5FBE           30E4                       xor	ah,ah
23886                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23887 5FC0           8846         FD            mov	-3[bp],al
23888                                           !BCC_EOS
23889                                           ! 2889  nbrows=read_byte(0x40,0x84)+1;
23890                                           ! Debug: list int = const $84 (used reg = )
23891 5FC3           B8                   0084  mov	ax,#$84
23892 5FC6           50                         push	ax
23893                                           ! Debug: list int = const $40 (used reg = )
23894 5FC7           B8                   0040  mov	ax,*$40
23895 5FCA           50                         push	ax
23896                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23897 5FCB           E8         1D4C            call	_read_byte
23898 5FCE           83C4                   04  add	sp,*4
23899                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23900 5FD1           30E4                       xor	ah,ah
23901                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23902 5FD3           40                         inc	ax
23903 5FD4           8946         F6            mov	-$A[bp],ax
23904                                           !BCC_EOS
23905                                           ! 2890  nbcols=read_word(0x40,0x4A);
23906                                           ! Debug: list int = const $4A (used reg = )
23907 5FD7           B8                   004A  mov	ax,*$4A
23908 5FDA           50                         push	ax
23909                                           ! Debug: list int = const $40 (used reg = )
23910 5FDB           B8                   0040  mov	ax,*$40
23911 5FDE           50                         push	ax
23912                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23913 5FDF           E8         1D4B            call	_read_word
23914 5FE2           83C4                   04  add	sp,*4
23915                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23916 5FE5           8946         F8            mov	-8[bp],ax
23917                                           !BCC_EOS
23918                                           ! 2891  switch(car)
23919 5FE8           8A46         04            mov	al,4[bp]
23920                                           ! 2892   {
23921 5FEB           E9         01EF            br 	.1F6
23922                                           ! 2893    case 7:
23923                                           ! 2894     break;
23924                       00005FEE            .1F7:
23925 5FEE           E9         020D            br 	.1F4
23926                                           !BCC_EOS
23927                                           ! 2895    case 8:
23928                                           ! 2896     if(xcurs>0)xcurs--;
23929                       00005FF1            .1F8:
23930                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23931 5FF1           8A46         FE            mov	al,-2[bp]
23932 5FF4           84C0                       test	al,al
23933 5FF6           74           07            je  	.1F9
23934                       00005FF8            .1FA:
23935                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23936 5FF8           8A46         FE            mov	al,-2[bp]
23937 5FFB           48                         dec	ax
23938 5FFC           8846         FE            mov	-2[bp],al
23939                                           !BCC_EOS
23940                                           ! 2897     break;
23941                       00005FFF            .1F9:
23942 5FFF           E9         01FC            br 	.1F4
23943                                           !BCC_EOS
23944                                           ! 2898    case '\r':
23945                                           ! 2899     xcurs=0;
23946                       00006002            .1FB:
23947                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23948 6002           30C0                       xor	al,al
23949 6004           8846         FE            mov	-2[bp],al
23950                                           !BCC_EOS
23951                                           ! 2900     break;
23952 6007           E9         01F4            br 	.1F4
23953                                           !BCC_EOS
23954                                           ! 2901    case '\n':
23955                                           ! 2902     ycurs++;
23956                       0000600A            .1FC:
23957                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23958 600A           8A46         FD            mov	al,-3[bp]
23959 600D           40                         inc	ax
23960 600E           8846         FD            mov	-3[bp],al
23961                                           !BCC_EOS
23962                                           ! 2903     break;
23963 6011           E9         01EA            br 	.1F4
23964                                           !BCC_EOS
23965                                           ! 2904    case '\t':
23966                                           ! 2905     do
23967                       00006014            .1FD:
23968                                           ! 2906      {
23969                       00006014            .200:
23970                                           ! 2907       biosfn_write_teletype(' ',page,attr,flag);
23971                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23972 6014           8A46         0A            mov	al,$A[bp]
23973 6017           30E4                       xor	ah,ah
23974 6019           50                         push	ax
23975                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23976 601A           8A46         08            mov	al,8[bp]
23977 601D           30E4                       xor	ah,ah
23978 601F           50                         push	ax
23979                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23980 6020           8A46         06            mov	al,6[bp]
23981 6023           30E4                       xor	ah,ah
23982 6025           50                         push	ax
23983                                           ! Debug: list int = const $20 (used reg = )
23984 6026           B8                   0020  mov	ax,*$20
23985 6029           50                         push	ax
23986                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23987 602A           E8         FF28            call	_biosfn_write_teletype
23988 602D           83C4                   08  add	sp,*8
23989                                           !BCC_EOS
23990                                           ! 2908       biosfn_get_cursor_pos(page,&dummy,&cursor);
23991                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23992 6030           8D5E         F2            lea	bx,-$E[bp]
23993 6033           53                         push	bx
23994                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23995 6034           8D5E         F0            lea	bx,-$10[bp]
23996 6037           53                         push	bx
23997                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23998 6038           8A46         06            mov	al,6[bp]
23999 603B           30E4                       xor	ah,ah
24000 603D           50                         push	ax
24001                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
24002 603E           E8         E47C            call	_biosfn_get_cursor_pos
24003 6041           83C4                   06  add	sp,*6
24004                                           !BCC_EOS
24005                                           ! 2909       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
24006                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
24007 6044           8A46         F2            mov	al,-$E[bp]
24008                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24009 6047           8846         FE            mov	-2[bp],al
24010                                           !BCC_EOS
24011                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
24012 604A           8B46         F2            mov	ax,-$E[bp]
24013 604D           30C0                       xor	al,al
24014                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
24015 604F           88E0                       mov	al,ah
24016 6051           30E4                       xor	ah,ah
24017                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
24018 6053           8846         FD            mov	-3[bp],al
24019                                           !BCC_EOS
24020                                           ! 2910      }while(xcurs%8==0);
24021                       00006056            .1FF:
24022                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
24023 6056           8A46         FE            mov	al,-2[bp]
24024 6059           30E4                       xor	ah,ah
24025 605B           24                     07  and	al,*7
24026                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
24027 605D           84C0                       test	al,al
24028 605F           74           B3            je 	.200
24029                       00006061            .201:
24030                                           !BCC_EOS
24031                                           ! 2911     break;
24032                       00006061            .1FE:
24033 6061           E9         019A            br 	.1F4
24034                                           !BCC_EOS
24035                                           ! 2912    default:
24036                                           ! 2913     if(vga_modes[line].class==0x00)
24037                       00006064            .202:
24038                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24039 6064           8A46         FB            mov	al,-5[bp]
24040 6067           30E4                       xor	ah,ah
24041 6069           B1                     03  mov	cl,*3
24042 606B           D3E0                       shl	ax,cl
24043 606D           89C3                       mov	bx,ax
24044 606F           81C3                 020B  add	bx,#_vga_modes
24045                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24046 6073           8A47         01            mov	al,1[bx]
24047 6076           84C0                       test	al,al
24048 6078         0F85         0082            bne 	.203
24049                       0000607C            .204:
24050                                           ! 2914      {
24051                                           ! 2915       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
24052                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
24053 607C           8A46         FD            mov	al,-3[bp]
24054 607F           30E4                       xor	ah,ah
24055 6081           8B4E         F8            mov	cx,-8[bp]
24056 6084           F7E9                       imul	cx
24057                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24058                                           ! Debug: expression subtree swapping
24059 6086           0246         FE            add	al,-2[bp]
24060 6089           80D4                   00  adc	ah,*0
24061                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24062 608C           D1E0                       shl	ax,*1
24063 608E           50                         push	ax
24064                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24065 608F           8B46         F8            mov	ax,-8[bp]
24066 6092           8B4E         F6            mov	cx,-$A[bp]
24067 6095           F7E9                       imul	cx
24068                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24069 6097           D1E0                       shl	ax,*1
24070                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24071 6099           0C                     FF  or	al,#$FF
24072                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24073                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24074 609B           89C3                       mov	bx,ax
24075 609D           8A46         06            mov	al,6[bp]
24076 60A0           30E4                       xor	ah,ah
24077 60A2           93                         xchg	ax,bx
24078 60A3           40                         inc	ax
24079 60A4           89D9                       mov	cx,bx
24080 60A6           F7E9                       imul	cx
24081                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24082 60A8           0346         EE            add	ax,0+..FFF6[bp]
24083 60AB           44                         inc	sp
24084 60AC           44                         inc	sp
24085                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24086 60AD           8946         F4            mov	-$C[bp],ax
24087                                           !BCC_EOS
24088                                           ! 2916       write_byte(vga_modes[line].sstart,address,car);
24089                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
24090 60B0           8A46         04            mov	al,4[bp]
24091 60B3           30E4                       xor	ah,ah
24092 60B5           50                         push	ax
24093                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
24094 60B6           FF76         F4            push	-$C[bp]
24095                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
24096 60B9           8A46         FB            mov	al,-5[bp]
24097 60BC           30E4                       xor	ah,ah
24098 60BE           B1                     03  mov	cl,*3
24099 60C0           D3E0                       shl	ax,cl
24100 60C2           89C3                       mov	bx,ax
24101 60C4           81C3                 020B  add	bx,#_vga_modes
24102                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24103 60C8           FF77         04            push	4[bx]
24104                                           ! Debug: func () void = write_byte+0 (used reg = )
24105 60CB           E8         1C72            call	_write_byte
24106 60CE           83C4                   06  add	sp,*6
24107                                           !BCC_EOS
24108                                           ! 2917       if(flag==3)
24109                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
24110 60D1           8A46         0A            mov	al,$A[bp]
24111 60D4           3C                     03  cmp	al,*3
24112 60D6           75           23            jne 	.205
24113                       000060D8            .206:
24114                                           ! 2918        write_byte(vga_modes[line].sstart,address+1,attr);
24115                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
24116 60D8           8A46         08            mov	al,8[bp]
24117 60DB           30E4                       xor	ah,ah
24118 60DD           50                         push	ax
24119                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
24120 60DE           8B46         F4            mov	ax,-$C[bp]
24121                                           ! Debug: list unsigned int = ax+1 (used reg = )
24122 60E1           40                         inc	ax
24123 60E2           50                         push	ax
24124                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
24125 60E3           8A46         FB            mov	al,-5[bp]
24126 60E6           30E4                       xor	ah,ah
24127 60E8           B1                     03  mov	cl,*3
24128 60EA           D3E0                       shl	ax,cl
24129 60EC           89C3                       mov	bx,ax
24130 60EE           81C3                 020B  add	bx,#_vga_modes
24131                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24132 60F2           FF77         04            push	4[bx]
24133                                           ! Debug: func () void = write_byte+0 (used reg = )
24134 60F5           E8         1C48            call	_write_byte
24135 60F8           83C4                   06  add	sp,*6
24136                                           !BCC_EOS
24137                                           ! 2919      }
24138                       000060FB            .205:
24139                                           ! 2920     else
24140                                           ! 2921      {
24141 60FB           E9         00D6            br 	.207
24142                       000060FE            .203:
24143                                           ! 2922       cheight=video_param_table[line_to_vpti[line]].cheight;
24144                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
24145 60FE           8A46         FB            mov	al,-5[bp]
24146 6101           30E4                       xor	ah,ah
24147 6103           89C3                       mov	bx,ax
24148                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
24149 6105           8A87       028B            mov	al,_line_to_vpti[bx]
24150 6109           30E4                       xor	ah,ah
24151 610B           B1                     06  mov	cl,*6
24152 610D           D3E0                       shl	ax,cl
24153 610F           89C3                       mov	bx,ax
24154 6111           81C3                 029F  add	bx,#_video_param_table
24155                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
24156 6115           8A47         02            mov	al,2[bx]
24157 6118           8846         FF            mov	-1[bp],al
24158                                           !BCC_EOS
24159                                           ! 2923       bpp=vga_modes[line].pixbits;
24160                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24161 611B           8A46         FB            mov	al,-5[bp]
24162 611E           30E4                       xor	ah,ah
24163 6120           B1                     03  mov	cl,*3
24164 6122           D3E0                       shl	ax,cl
24165 6124           89C3                       mov	bx,ax
24166 6126           81C3                 020B  add	bx,#_vga_modes
24167                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
24168 612A           8A47         03            mov	al,3[bx]
24169 612D           8846         FA            mov	-6[bp],al
24170                                           !BCC_EOS
24171                                           ! 2924       switch(vga_modes[line].memmodel)
24172                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24173 6130           8A46         FB            mov	al,-5[bp]
24174 6133           30E4                       xor	ah,ah
24175 6135           B1                     03  mov	cl,*3
24176 6137           D3E0                       shl	ax,cl
24177 6139           89C3                       mov	bx,ax
24178 613B           81C3                 020B  add	bx,#_vga_modes
24179 613F           8A47         02            mov	al,2[bx]
24180                                           ! 2925        {
24181 6142           EB           7A            jmp .20A
24182                                           ! 2926         case 0x04:
24183                                           ! 2927         case 0x03:
24184                       00006144            .20B:
24185                                           ! 2928           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
24186                       00006144            .20C:
24187                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
24188 6144           8A46         FF            mov	al,-1[bp]
24189 6147           30E4                       xor	ah,ah
24190 6149           50                         push	ax
24191                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24192 614A           FF76         F8            push	-8[bp]
24193                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24194 614D           8A46         FD            mov	al,-3[bp]
24195 6150           30E4                       xor	ah,ah
24196 6152           50                         push	ax
24197                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24198 6153           8A46         FE            mov	al,-2[bp]
24199 6156           30E4                       xor	ah,ah
24200 6158           50                         push	ax
24201                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24202 6159           8A46         08            mov	al,8[bp]
24203 615C           30E4                       xor	ah,ah
24204 615E           50                         push	ax
24205                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24206 615F           8A46         04            mov	al,4[bp]
24207 6162           30E4                       xor	ah,ah
24208 6164           50                         push	ax
24209                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
24210 6165           E8         F08C            call	_write_gfx_char_pl4
24211 6168           83C4                   0C  add	sp,*$C
24212                                           !BCC_EOS
24213                                           ! 2929           break;
24214 616B           EB           67            jmp .208
24215                                           !BCC_EOS
24216                                           ! 2930 
24217                                           ! 2930         case 0x02:
24218                                           ! 2931           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
24219                       0000616D            .20D:
24220                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24221 616D           8A46         FA            mov	al,-6[bp]
24222 6170           30E4                       xor	ah,ah
24223 6172           50                         push	ax
24224                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24225 6173           FF76         F8            push	-8[bp]
24226                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24227 6176           8A46         FD            mov	al,-3[bp]
24228 6179           30E4                       xor	ah,ah
24229 617B           50                         push	ax
24230                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24231 617C           8A46         FE            mov	al,-2[bp]
24232 617F           30E4                       xor	ah,ah
24233 6181           50                         push	ax
24234                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24235 6182           8A46         08            mov	al,8[bp]
24236 6185           30E4                       xor	ah,ah
24237 6187           50                         push	ax
24238                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24239 6188           8A46         04            mov	al,4[bp]
24240 618B           30E4                       xor	ah,ah
24241 618D           50                         push	ax
24242                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24243 618E           E8         F1D6            call	_write_gfx_char_cga
24244 6191           83C4                   0C  add	sp,*$C
24245                                           !BCC_EOS
24246                                           ! 2932           break;
24247 6194           EB           3E            jmp .208
24248                                           !BCC_EOS
24249                                           ! 2933         case 0x05:
24250                                           ! 2934           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24251                       00006196            .20E:
24252                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24253 6196           FF76         F8            push	-8[bp]
24254                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24255 6199           8A46         FD            mov	al,-3[bp]
24256 619C           30E4                       xor	ah,ah
24257 619E           50                         push	ax
24258                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24259 619F           8A46         FE            mov	al,-2[bp]
24260 61A2           30E4                       xor	ah,ah
24261 61A4           50                         push	ax
24262                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24263 61A5           8A46         08            mov	al,8[bp]
24264 61A8           30E4                       xor	ah,ah
24265 61AA           50                         push	ax
24266                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24267 61AB           8A46         04            mov	al,4[bp]
24268 61AE           30E4                       xor	ah,ah
24269 61B0           50                         push	ax
24270                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24271 61B1           E8         F3B6            call	_write_gfx_char_lin
24272 61B4           83C4                   0A  add	sp,*$A
24273                                           !BCC_EOS
24274                                           ! 2935           break;
24275 61B7           EB           1B            jmp .208
24276                                           !BCC_EOS
24277                                           ! 2936         default:
24278                                           ! 2937           unimplemented();
24279                       000061B9            .20F:
24280                                           ! Debug: func () void = unimplemented+0 (used reg = )
24281 61B9           E8         1BED            call	_unimplemented
24282                                           !BCC_EOS
24283                                           ! 2938        }
24284                                           ! 2939      }
24285 61BC           EB           16            jmp .208
24286                       000061BE            .20A:
24287 61BE           2C                     02  sub	al,*2
24288 61C0           74           AB            je 	.20D
24289 61C2           2C                     01  sub	al,*1
24290 61C4         0F84         FF7C            beq 	.20C
24291 61C8           2C                     01  sub	al,*1
24292 61CA         0F84         FF76            beq 	.20B
24293 61CE           2C                     01  sub	al,*1
24294 61D0           74           C4            je 	.20E
24295 61D2           EB           E5            jmp	.20F
24296                       000061D4            .208:
24297                                           ! 2940     xcurs++;
24298                       000061D4            .207:
24299                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24300 61D4           8A46         FE            mov	al,-2[bp]
24301 61D7           40                         inc	ax
24302 61D8           8846         FE            mov	-2[bp],al
24303                                           !BCC_EOS
24304                                           ! 2941   }
24305                                           ! 2942  if(xcurs==nbcols)
24306 61DB           EB           21            jmp .1F4
24307                       000061DD            .1F6:
24308 61DD           2C                     07  sub	al,*7
24309 61DF         0F84         FE0B            beq 	.1F7
24310 61E3           2C                     01  sub	al,*1
24311 61E5         0F84         FE08            beq 	.1F8
24312 61E9           2C                     01  sub	al,*1
24313 61EB         0F84         FE25            beq 	.1FD
24314 61EF           2C                     01  sub	al,*1
24315 61F1         0F84         FE15            beq 	.1FC
24316 61F5           2C                     03  sub	al,*3
24317 61F7         0F84         FE07            beq 	.1FB
24318 61FB           E9         FE66            br 	.202
24319                       000061FE            .1F4:
24320                       FFFFFFEE            ..FFF6	=	-$12
24321                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24322 61FE           8A46         FE            mov	al,-2[bp]
24323 6201           30E4                       xor	ah,ah
24324 6203           3B46         F8            cmp	ax,-8[bp]
24325 6206           75           0C            jne 	.210
24326                       00006208            .211:
24327                                           ! 2943   {xcurs=0;
24328                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24329 6208           30C0                       xor	al,al
24330 620A           8846         FE            mov	-2[bp],al
24331                                           !BCC_EOS
24332                                           ! 2944    ycurs++;
24333                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24334 620D           8A46         FD            mov	al,-3[bp]
24335 6210           40                         inc	ax
24336 6211           8846         FD            mov	-3[bp],al
24337                                           !BCC_EOS
24338                                           ! 2945   }
24339                                           ! 2946  if(ycurs==nbrows)
24340                       00006214            .210:
24341                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24342 6214           8A46         FD            mov	al,-3[bp]
24343 6217           30E4                       xor	ah,ah
24344 6219           3B46         F6            cmp	ax,-$A[bp]
24345 621C         0F85         0070            bne 	.212
24346                       00006220            .213:
24347                                           ! 2947   {
24348                                           ! 2948    if(vga_modes[line].class==0x00)
24349                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24350 6220           8A46         FB            mov	al,-5[bp]
24351 6223           30E4                       xor	ah,ah
24352 6225           B1                     03  mov	cl,*3
24353 6227           D3E0                       shl	ax,cl
24354 6229           89C3                       mov	bx,ax
24355 622B           81C3                 020B  add	bx,#_vga_modes
24356                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24357 622F           8A47         01            mov	al,1[bx]
24358 6232           84C0                       test	al,al
24359 6234           75           2A            jne 	.214
24360                       00006236            .215:
24361                                           ! 2949     {
24362                                           ! 2950      biosfn_scroll(0x01,0x07,0,0,nbrows-1,nbcols-1,page,1);
24363                                           ! Debug: list int = const 1 (used reg = )
24364 6236           B8                   0001  mov	ax,*1
24365 6239           50                         push	ax
24366                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24367 623A           8A46         06            mov	al,6[bp]
24368 623D           30E4                       xor	ah,ah
24369 623F           50                         push	ax
24370                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24371 6240           8B46         F8            mov	ax,-8[bp]
24372                                           ! Debug: list unsigned int = ax-1 (used reg = )
24373 6243           48                         dec	ax
24374 6244           50                         push	ax
24375                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24376 6245           8B46         F6            mov	ax,-$A[bp]
24377                                           ! Debug: list unsigned int = ax-1 (used reg = )
24378 6248           48                         dec	ax
24379 6249           50                         push	ax
24380                                           ! Debug: list int = const 0 (used reg = )
24381 624A           31C0                       xor	ax,ax
24382 624C           50                         push	ax
24383                                           ! Debug: list int = const 0 (used reg = )
24384 624D           31C0                       xor	ax,ax
24385 624F           50                         push	ax
24386                                           ! Debug: list int = const 7 (used reg = )
24387 6250           B8                   0007  mov	ax,*7
24388 6253           50                         push	ax
24389                                           ! Debug: list int = const 1 (used reg = )
24390 6254           B8                   0001  mov	ax,*1
24391 6257           50                         push	ax
24392                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24393 6258           E8         E76D            call	_biosfn_scroll
24394 625B           83C4                   10  add	sp,*$10
24395                                           !BCC_EOS
24396                                           ! 2951     }
24397                                           ! 2952    else
24398                                           ! 2953     {
24399 625E           EB           27            jmp .216
24400                       00006260            .214:
24401                                           ! 2954      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24402                                           ! Debug: list int = const 1 (used reg = )
24403 6260           B8                   0001  mov	ax,*1
24404 6263           50                         push	ax
24405                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24406 6264           8A46         06            mov	al,6[bp]
24407 6267           30E4                       xor	ah,ah
24408 6269           50                         push	ax
24409                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24410 626A           8B46         F8            mov	ax,-8[bp]
24411                                           ! Debug: list unsigned int = ax-1 (used reg = )
24412 626D           48                         dec	ax
24413 626E           50                         push	ax
24414                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24415 626F           8B46         F6            mov	ax,-$A[bp]
24416                                           ! Debug: list unsigned int = ax-1 (used reg = )
24417 6272           48                         dec	ax
24418 6273           50                         push	ax
24419                                           ! Debug: list int = const 0 (used reg = )
24420 6274           31C0                       xor	ax,ax
24421 6276           50                         push	ax
24422                                           ! Debug: list int = const 0 (used reg = )
24423 6277           31C0                       xor	ax,ax
24424 6279           50                         push	ax
24425                                           ! Debug: list int = const 0 (used reg = )
24426 627A           31C0                       xor	ax,ax
24427 627C           50                         push	ax
24428                                           ! Debug: list int = const 1 (used reg = )
24429 627D           B8                   0001  mov	ax,*1
24430 6280           50                         push	ax
24431                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24432 6281           E8         E744            call	_biosfn_scroll
24433 6284           83C4                   10  add	sp,*$10
24434                                           !BCC_EOS
24435                                           ! 2955     }
24436                                           ! 2956    ycurs-=1;
24437                       00006287            .216:
24438                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24439 6287           8A46         FD            mov	al,-3[bp]
24440 628A           30E4                       xor	ah,ah
24441 628C           48                         dec	ax
24442 628D           8846         FD            mov	-3[bp],al
24443                                           !BCC_EOS
24444                                           ! 2957   }
24445                                           ! 2958  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24446                       00006290            .212:
24447                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24448 6290           8A46         FD            mov	al,-3[bp]
24449 6293           30E4                       xor	ah,ah
24450 6295           8946         F2            mov	-$E[bp],ax
24451                                           !BCC_EOS
24452                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24453 6298           8B46         F2            mov	ax,-$E[bp]
24454 629B           88C4                       mov	ah,al
24455 629D           30C0                       xor	al,al
24456 629F           8946         F2            mov	-$E[bp],ax
24457                                           !BCC_EOS
24458                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24459 62A2           8B46         F2            mov	ax,-$E[bp]
24460 62A5           0246         FE            add	al,-2[bp]
24461 62A8           80D4                   00  adc	ah,*0
24462 62AB           8946         F2            mov	-$E[bp],ax
24463                                           !BCC_EOS
24464                                           ! 2959  biosfn_set_cursor_pos(page,cursor);
24465                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24466 62AE           FF76         F2            push	-$E[bp]
24467                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24468 62B1           8A46         06            mov	al,6[bp]
24469 62B4           30E4                       xor	ah,ah
24470 62B6           50                         push	ax
24471                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24472 62B7           E8         E103            call	_biosfn_set_cursor_pos
24473 62BA           83C4                   04  add	sp,*4
24474                                           !BCC_EOS
24475                                           ! 2960 }
24476 62BD           89EC                       mov	sp,bp
24477 62BF           5D                         pop	bp
24478 62C0           C3                         ret
24479                                           ! 2961 #asm
24480                                           !BCC_ASM
24481                       00000008            _biosfn_write_teletype.flag	set	8
24482                       00000006            _biosfn_write_teletype.attr	set	6
24483                       00000004            _biosfn_write_teletype.page	set	4
24484                       00000002            _biosfn_write_teletype.car	set	2
24485                       000062C1            biosfn_get_video_mode:
24486 62C1           1E                           push ds
24487 62C2           B8                   0040    mov ax, # 0x40
24488 62C5           8ED8                         mov ds, ax
24489 62C7           53                           push bx
24490 62C8           BB                   0062    mov bx, # 0x62
24491 62CB           8A07                         mov al, [bx]
24492 62CD           5B                           pop bx
24493 62CE           88C7                         mov bh, al
24494 62D0           53                           push bx
24495 62D1           BB                   0087    mov bx, # 0x87
24496 62D4           8A27                         mov ah, [bx]
24497 62D6           80E4                   80    and ah, #0x80
24498 62D9           BB                   0049    mov bx, # 0x49
24499 62DC           8A07                         mov al, [bx]
24500 62DE           08E0                         or al, ah
24501 62E0           BB                   004A    mov bx, # 0x4A
24502 62E3           8A27                         mov ah, [bx]
24503 62E5           5B                           pop bx
24504 62E6           1F                           pop ds
24505 62E7           C3                           ret
24506                                           ! 2983 endasm
24507                                           !BCC_ENDASM
24508                                           ! 2984 #asm
24509                                           !BCC_ASM
24510                       00000008            _biosfn_write_teletype.flag	set	8
24511                       00000006            _biosfn_write_teletype.attr	set	6
24512                       00000004            _biosfn_write_teletype.page	set	4
24513                       00000002            _biosfn_write_teletype.car	set	2
24514                       000062E8            biosfn_group_10:
24515 62E8           3C                     00    cmp al, #0x00
24516 62EA           75           02              jne int10_test_1001
24517 62EC           EB           64              jmp biosfn_set_single_palette_reg
24518                       000062EE            int10_test_1001:
24519 62EE           3C                     01    cmp al, #0x01
24520 62F0           75           02              jne int10_test_1002
24521 62F2           EB           78              jmp biosfn_set_overscan_border_color
24522                       000062F4            int10_test_1002:
24523 62F4           3C                     02    cmp al, #0x02
24524 62F6           75           02              jne int10_test_1003
24525 62F8           EB           7A              jmp biosfn_set_all_palette_reg
24526                       000062FA            int10_test_1003:
24527 62FA           3C                     03    cmp al, #0x03
24528 62FC           75           03              jne int10_test_1007
24529 62FE           E9         00A0              jmp biosfn_toggle_intensity
24530                       00006301            int10_test_1007:
24531 6301           3C                     07    cmp al, #0x07
24532 6303           75           03              jne int10_test_1008
24533 6305           E9         00BF              jmp biosfn_get_single_palette_reg
24534                       00006308            int10_test_1008:
24535 6308           3C                     08    cmp al, #0x08
24536 630A           75           03              jne int10_test_1009
24537 630C           E9         00DC              jmp biosfn_read_overscan_border_color
24538                       0000630F            int10_test_1009:
24539 630F           3C                     09    cmp al, #0x09
24540 6311           75           03              jne int10_test_1010
24541 6313           E9         00E3              jmp biosfn_get_all_palette_reg
24542                       00006316            int10_test_1010:
24543 6316           3C                     10    cmp al, #0x10
24544 6318           75           03              jne int10_test_1012
24545 631A           E9         011D              jmp biosfn_set_single_dac_reg
24546                       0000631D            int10_test_1012:
24547 631D           3C                     12    cmp al, #0x12
24548 631F           75           03              jne int10_test_1013
24549 6321           E9         012F              jmp biosfn_set_all_dac_reg
24550                       00006324            int10_test_1013:
24551 6324           3C                     13    cmp al, #0x13
24552 6326           75           03              jne int10_test_1015
24553 6328           E9         0150              jmp biosfn_select_video_dac_color_page
24554                       0000632B            int10_test_1015:
24555 632B           3C                     15    cmp al, #0x15
24556 632D           75           03              jne int10_test_1017
24557 632F           E9         018C              jmp biosfn_read_single_dac_reg
24558                       00006332            int10_test_1017:
24559 6332           3C                     17    cmp al, #0x17
24560 6334           75           03              jne int10_test_1018
24561 6336           E9         01A0              jmp biosfn_read_all_dac_reg
24562                       00006339            int10_test_1018:
24563 6339           3C                     18    cmp al, #0x18
24564 633B           75           03              jne int10_test_1019
24565 633D           E9         01C1              jmp biosfn_set_pel_mask
24566                       00006340            int10_test_1019:
24567 6340           3C                     19    cmp al, #0x19
24568 6342           75           03              jne int10_test_101A
24569 6344           E9         01C5              jmp biosfn_read_pel_mask
24570                       00006347            int10_test_101A:
24571 6347           3C                     1A    cmp al, #0x1a
24572 6349           75           03              jne int10_group_10_unknown
24573 634B           E9         01C9              jmp biosfn_read_video_dac_state
24574                       0000634E            int10_group_10_unknown:
24575 634E           E8         1A66              call _unknown
24576 6351           C3                           ret
24577                       00006352            biosfn_set_single_palette_reg:
24578 6352           80FB                   14    cmp bl, #0x14
24579 6355           77           14              ja no_actl_reg1
24580 6357           50                           push ax
24581 6358           52                           push dx
24582 6359           BA                   03DA    mov dx, # 0x3da
24583 635C           EC                           in al, dx
24584 635D           BA                   03C0    mov dx, # 0x3c0
24585 6360           88D8                         mov al, bl
24586 6362           EE                           out dx, al
24587 6363           88F8                         mov al, bh
24588 6365           EE                           out dx, al
24589 6366           B0                     20    mov al, #0x20
24590 6368           EE                           out dx, al
24591 6369           5A                           pop dx
24592 636A           58                           pop ax
24593                       0000636B            no_actl_reg1:
24594 636B           C3                           ret
24595                                           ! 3066 endasm
24596                                           !BCC_ENDASM
24597                                           ! 3067 #asm
24598                                           !BCC_ASM
24599                       00000008            _biosfn_write_teletype.flag	set	8
24600                       00000006            _biosfn_write_teletype.attr	set	6
24601                       00000004            _biosfn_write_teletype.page	set	4
24602                       00000002            _biosfn_write_teletype.car	set	2
24603                       0000636C            biosfn_set_overscan_border_color:
24604 636C           53                           push bx
24605 636D           B3                     11    mov bl, #0x11
24606 636F           E8         FFE0              call biosfn_set_single_palette_reg
24607 6372           5B                           pop bx
24608 6373           C3                           ret
24609                                           ! 3074 endasm
24610                                           !BCC_ENDASM
24611                                           ! 3075 #asm
24612                                           !BCC_ASM
24613                       00000008            _biosfn_write_teletype.flag	set	8
24614                       00000006            _biosfn_write_teletype.attr	set	6
24615                       00000004            _biosfn_write_teletype.page	set	4
24616                       00000002            _biosfn_write_teletype.car	set	2
24617                       00006374            biosfn_set_all_palette_reg:
24618 6374           50                           push ax
24619 6375           53                           push bx
24620 6376           51                           push cx
24621 6377           52                           push dx
24622 6378           89D3                         mov bx, dx
24623 637A           BA                   03DA    mov dx, # 0x3da
24624 637D           EC                           in al, dx
24625 637E           B1                     00    mov cl, #0x00
24626 6380           BA                   03C0    mov dx, # 0x3c0
24627                       00006383            set_palette_loop:
24628 6383           88C8                         mov al, cl
24629 6385           EE                           out dx, al
24630 6386           26                           seg es
24631 6387           8A07                         mov al, [bx]
24632 6389           EE                           out dx, al
24633 638A           43                           inc bx
24634 638B           FEC1                         inc cl
24635 638D           80F9                   10    cmp cl, #0x10
24636 6390           75           F1              jne set_palette_loop
24637 6392           B0                     11    mov al, #0x11
24638 6394           EE                           out dx, al
24639 6395           26                           seg es
24640 6396           8A07                         mov al, [bx]
24641 6398           EE                           out dx, al
24642 6399           B0                     20    mov al, #0x20
24643 639B           EE                           out dx, al
24644 639C           5A                           pop dx
24645 639D           59                           pop cx
24646 639E           5B                           pop bx
24647 639F           58                           pop ax
24648 63A0           C3                           ret
24649                                           ! 3108 endasm
24650                                           !BCC_ENDASM
24651                                           ! 3109 #asm
24652                                           !BCC_ASM
24653                       00000008            _biosfn_write_teletype.flag	set	8
24654                       00000006            _biosfn_write_teletype.attr	set	6
24655                       00000004            _biosfn_write_teletype.page	set	4
24656                       00000002            _biosfn_write_teletype.car	set	2
24657                       000063A1            biosfn_toggle_intensity:
24658 63A1           50                           push ax
24659 63A2           53                           push bx
24660 63A3           52                           push dx
24661 63A4           BA                   03DA    mov dx, # 0x3da
24662 63A7           EC                           in al, dx
24663 63A8           BA                   03C0    mov dx, # 0x3c0
24664 63AB           B0                     10    mov al, #0x10
24665 63AD           EE                           out dx, al
24666 63AE           BA                   03C1    mov dx, # 0x3c1
24667 63B1           EC                           in al, dx
24668 63B2           24                     F7    and al, #0xf7
24669 63B4           80E3                   01    and bl, #0x01
24670 63B7           C0E3                   03    shl bl, 3
24671 63BA           08D8                         or al, bl
24672 63BC           BA                   03C0    mov dx, # 0x3c0
24673 63BF           EE                           out dx, al
24674 63C0           B0                     20    mov al, #0x20
24675 63C2           EE                           out dx, al
24676 63C3           5A                           pop dx
24677 63C4           5B                           pop bx
24678 63C5           58                           pop ax
24679 63C6           C3                           ret
24680                                           ! 3133 endasm
24681                                           !BCC_ENDASM
24682                                           ! 3134 #asm
24683                                           !BCC_ASM
24684                       00000008            _biosfn_write_teletype.flag	set	8
24685                       00000006            _biosfn_write_teletype.attr	set	6
24686                       00000004            _biosfn_write_teletype.page	set	4
24687                       00000002            _biosfn_write_teletype.car	set	2
24688                       000063C7            biosfn_get_single_palette_reg:
24689 63C7           80FB                   14    cmp bl, #0x14
24690 63CA           77           1E              ja no_actl_reg2
24691 63CC           50                           push ax
24692 63CD           52                           push dx
24693 63CE           BA                   03DA    mov dx, # 0x3da
24694 63D1           EC                           in al, dx
24695 63D2           BA                   03C0    mov dx, # 0x3c0
24696 63D5           88D8                         mov al, bl
24697 63D7           EE                           out dx, al
24698 63D8           BA                   03C1    mov dx, # 0x3c1
24699 63DB           EC                           in al, dx
24700 63DC           88C7                         mov bh, al
24701 63DE           BA                   03DA    mov dx, # 0x3da
24702 63E1           EC                           in al, dx
24703 63E2           BA                   03C0    mov dx, # 0x3c0
24704 63E5           B0                     20    mov al, #0x20
24705 63E7           EE                           out dx, al
24706 63E8           5A                           pop dx
24707 63E9           58                           pop ax
24708                       000063EA            no_actl_reg2:
24709 63EA           C3                           ret
24710                                           ! 3157 endasm
24711                                           !BCC_ENDASM
24712                                           ! 3158 #asm
24713                                           !BCC_ASM
24714                       00000008            _biosfn_write_teletype.flag	set	8
24715                       00000006            _biosfn_write_teletype.attr	set	6
24716                       00000004            _biosfn_write_teletype.page	set	4
24717                       00000002            _biosfn_write_teletype.car	set	2
24718                       000063EB            biosfn_read_overscan_border_color:
24719 63EB           50                           push ax
24720 63EC           53                           push bx
24721 63ED           B3                     11    mov bl, #0x11
24722 63EF           E8         FFD5              call biosfn_get_single_palette_reg
24723 63F2           88F8                         mov al, bh
24724 63F4           5B                           pop bx
24725 63F5           88C7                         mov bh, al
24726 63F7           58                           pop ax
24727 63F8           C3                           ret
24728                                           ! 3169 endasm
24729                                           !BCC_ENDASM
24730                                           ! 3170 #asm
24731                                           !BCC_ASM
24732                       00000008            _biosfn_write_teletype.flag	set	8
24733                       00000006            _biosfn_write_teletype.attr	set	6
24734                       00000004            _biosfn_write_teletype.page	set	4
24735                       00000002            _biosfn_write_teletype.car	set	2
24736                       000063F9            biosfn_get_all_palette_reg:
24737 63F9           50                           push ax
24738 63FA           53                           push bx
24739 63FB           51                           push cx
24740 63FC           52                           push dx
24741 63FD           89D3                         mov bx, dx
24742 63FF           B1                     00    mov cl, #0x00
24743                       00006401            get_palette_loop:
24744 6401           BA                   03DA    mov dx, # 0x3da
24745 6404           EC                           in al, dx
24746 6405           BA                   03C0    mov dx, # 0x3c0
24747 6408           88C8                         mov al, cl
24748 640A           EE                           out dx, al
24749 640B           BA                   03C1    mov dx, # 0x3c1
24750 640E           EC                           in al, dx
24751 640F           26                           seg es
24752 6410           8807                         mov [bx], al
24753 6412           43                           inc bx
24754 6413           FEC1                         inc cl
24755 6415           80F9                   10    cmp cl, #0x10
24756 6418           75           E7              jne get_palette_loop
24757 641A           BA                   03DA    mov dx, # 0x3da
24758 641D           EC                           in al, dx
24759 641E           BA                   03C0    mov dx, # 0x3c0
24760 6421           B0                     11    mov al, #0x11
24761 6423           EE                           out dx, al
24762 6424           BA                   03C1    mov dx, # 0x3c1
24763 6427           EC                           in al, dx
24764 6428           26                           seg es
24765 6429           8807                         mov [bx], al
24766 642B           BA                   03DA    mov dx, # 0x3da
24767 642E           EC                           in al, dx
24768 642F           BA                   03C0    mov dx, # 0x3c0
24769 6432           B0                     20    mov al, #0x20
24770 6434           EE                           out dx, al
24771 6435           5A                           pop dx
24772 6436           59                           pop cx
24773 6437           5B                           pop bx
24774 6438           58                           pop ax
24775 6439           C3                           ret
24776                                           ! 3211 endasm
24777                                           !BCC_ENDASM
24778                                           ! 3212 #asm
24779                                           !BCC_ASM
24780                       00000008            _biosfn_write_teletype.flag	set	8
24781                       00000006            _biosfn_write_teletype.attr	set	6
24782                       00000004            _biosfn_write_teletype.page	set	4
24783                       00000002            _biosfn_write_teletype.car	set	2
24784                       0000643A            biosfn_set_single_dac_reg:
24785 643A           50                           push ax
24786 643B           52                           push dx
24787 643C           BA                   03C8    mov dx, # 0x3c8
24788 643F           88D8                         mov al, bl
24789 6441           EE                           out dx, al
24790 6442           BA                   03C9    mov dx, # 0x3c9
24791 6445           58                           pop ax
24792 6446           50                           push ax
24793 6447           88E0                         mov al, ah
24794 6449           EE                           out dx, al
24795 644A           88E8                         mov al, ch
24796 644C           EE                           out dx, al
24797 644D           88C8                         mov al, cl
24798 644F           EE                           out dx, al
24799 6450           5A                           pop dx
24800 6451           58                           pop ax
24801 6452           C3                           ret
24802                                           ! 3231 endasm
24803                                           !BCC_ENDASM
24804                                           ! 3232 #asm
24805                                           !BCC_ASM
24806                       00000008            _biosfn_write_teletype.flag	set	8
24807                       00000006            _biosfn_write_teletype.attr	set	6
24808                       00000004            _biosfn_write_teletype.page	set	4
24809                       00000002            _biosfn_write_teletype.car	set	2
24810                       00006453            biosfn_set_all_dac_reg:
24811 6453           50                           push ax
24812 6454           53                           push bx
24813 6455           51                           push cx
24814 6456           52                           push dx
24815 6457           BA                   03C8    mov dx, # 0x3c8
24816 645A           88D8                         mov al, bl
24817 645C           EE                           out dx, al
24818 645D           5A                           pop dx
24819 645E           52                           push dx
24820 645F           89D3                         mov bx, dx
24821 6461           BA                   03C9    mov dx, # 0x3c9
24822                       00006464            set_dac_loop:
24823 6464           26                           seg es
24824 6465           8A07                         mov al, [bx]
24825 6467           EE                           out dx, al
24826 6468           43                           inc bx
24827 6469           26                           seg es
24828 646A           8A07                         mov al, [bx]
24829 646C           EE                           out dx, al
24830 646D           43                           inc bx
24831 646E           26                           seg es
24832 646F           8A07                         mov al, [bx]
24833 6471           EE                           out dx, al
24834 6472           43                           inc bx
24835 6473           49                           dec cx
24836 6474           75           EE              jnz set_dac_loop
24837 6476           5A                           pop dx
24838 6477           59                           pop cx
24839 6478           5B                           pop bx
24840 6479           58                           pop ax
24841 647A           C3                           ret
24842                                           ! 3265 endasm
24843                                           !BCC_ENDASM
24844                                           ! 3266 #asm
24845                                           !BCC_ASM
24846                       00000008            _biosfn_write_teletype.flag	set	8
24847                       00000006            _biosfn_write_teletype.attr	set	6
24848                       00000004            _biosfn_write_teletype.page	set	4
24849                       00000002            _biosfn_write_teletype.car	set	2
24850                       0000647B            biosfn_select_video_dac_color_page:
24851 647B           50                           push ax
24852 647C           53                           push bx
24853 647D           52                           push dx
24854 647E           BA                   03DA    mov dx, # 0x3da
24855 6481           EC                           in al, dx
24856 6482           BA                   03C0    mov dx, # 0x3c0
24857 6485           B0                     10    mov al, #0x10
24858 6487           EE                           out dx, al
24859 6488           BA                   03C1    mov dx, # 0x3c1
24860 648B           EC                           in al, dx
24861 648C           80E3                   01    and bl, #0x01
24862 648F           75           0D              jnz set_dac_page
24863 6491           24                     7F    and al, #0x7f
24864 6493           C0E7                   07    shl bh, 7
24865 6496           08F8                         or al, bh
24866 6498           BA                   03C0    mov dx, # 0x3c0
24867 649B           EE                           out dx, al
24868 649C           EB           19              jmp set_actl_normal
24869                       0000649E            set_dac_page:
24870 649E           50                           push ax
24871 649F           BA                   03DA    mov dx, # 0x3da
24872 64A2           EC                           in al, dx
24873 64A3           BA                   03C0    mov dx, # 0x3c0
24874 64A6           B0                     14    mov al, #0x14
24875 64A8           EE                           out dx, al
24876 64A9           58                           pop ax
24877 64AA           24                     80    and al, #0x80
24878 64AC           75           03              jnz set_dac_16_page
24879 64AE           C0E7                   02    shl bh, 2
24880                       000064B1            set_dac_16_page:
24881 64B1           80E7                   0F    and bh, #0x0f
24882 64B4           88F8                         mov al, bh
24883 64B6           EE                           out dx, al
24884                       000064B7            set_actl_normal:
24885 64B7           B0                     20    mov al, #0x20
24886 64B9           EE                           out dx, al
24887 64BA           5A                           pop dx
24888 64BB           5B                           pop bx
24889 64BC           58                           pop ax
24890 64BD           C3                           ret
24891                                           ! 3308 endasm
24892                                           !BCC_ENDASM
24893                                           ! 3309 #asm
24894                                           !BCC_ASM
24895                       00000008            _biosfn_write_teletype.flag	set	8
24896                       00000006            _biosfn_write_teletype.attr	set	6
24897                       00000004            _biosfn_write_teletype.page	set	4
24898                       00000002            _biosfn_write_teletype.car	set	2
24899                       000064BE            biosfn_read_single_dac_reg:
24900 64BE           50                           push ax
24901 64BF           52                           push dx
24902 64C0           BA                   03C7    mov dx, # 0x3c7
24903 64C3           88D8                         mov al, bl
24904 64C5           EE                           out dx, al
24905 64C6           58                           pop ax
24906 64C7           88C4                         mov ah, al
24907 64C9           BA                   03C9    mov dx, # 0x3c9
24908 64CC           EC                           in al, dx
24909 64CD           86E0                         xchg al, ah
24910 64CF           50                           push ax
24911 64D0           EC                           in al, dx
24912 64D1           88C5                         mov ch, al
24913 64D3           EC                           in al, dx
24914 64D4           88C1                         mov cl, al
24915 64D6           5A                           pop dx
24916 64D7           58                           pop ax
24917 64D8           C3                           ret
24918                                           ! 3329 endasm
24919                                           !BCC_ENDASM
24920                                           ! 3330 #asm
24921                                           !BCC_ASM
24922                       00000008            _biosfn_write_teletype.flag	set	8
24923                       00000006            _biosfn_write_teletype.attr	set	6
24924                       00000004            _biosfn_write_teletype.page	set	4
24925                       00000002            _biosfn_write_teletype.car	set	2
24926                       000064D9            biosfn_read_all_dac_reg:
24927 64D9           50                           push ax
24928 64DA           53                           push bx
24929 64DB           51                           push cx
24930 64DC           52                           push dx
24931 64DD           BA                   03C7    mov dx, # 0x3c7
24932 64E0           88D8                         mov al, bl
24933 64E2           EE                           out dx, al
24934 64E3           5A                           pop dx
24935 64E4           52                           push dx
24936 64E5           89D3                         mov bx, dx
24937 64E7           BA                   03C9    mov dx, # 0x3c9
24938                       000064EA            read_dac_loop:
24939 64EA           EC                           in al, dx
24940 64EB           26                           seg es
24941 64EC           8807                         mov [bx], al
24942 64EE           43                           inc bx
24943 64EF           EC                           in al, dx
24944 64F0           26                           seg es
24945 64F1           8807                         mov [bx], al
24946 64F3           43                           inc bx
24947 64F4           EC                           in al, dx
24948 64F5           26                           seg es
24949 64F6           8807                         mov [bx], al
24950 64F8           43                           inc bx
24951 64F9           49                           dec cx
24952 64FA           75           EE              jnz read_dac_loop
24953 64FC           5A                           pop dx
24954 64FD           59                           pop cx
24955 64FE           5B                           pop bx
24956 64FF           58                           pop ax
24957 6500           C3                           ret
24958                                           ! 3363 endasm
24959                                           !BCC_ENDASM
24960                                           ! 3364 #asm
24961                                           !BCC_ASM
24962                       00000008            _biosfn_write_teletype.flag	set	8
24963                       00000006            _biosfn_write_teletype.attr	set	6
24964                       00000004            _biosfn_write_teletype.page	set	4
24965                       00000002            _biosfn_write_teletype.car	set	2
24966                       00006501            biosfn_set_pel_mask:
24967 6501           50                           push ax
24968 6502           52                           push dx
24969 6503           BA                   03C6    mov dx, # 0x3c6
24970 6506           88D8                         mov al, bl
24971 6508           EE                           out dx, al
24972 6509           5A                           pop dx
24973 650A           58                           pop ax
24974 650B           C3                           ret
24975                                           ! 3374 endasm
24976                                           !BCC_ENDASM
24977                                           ! 3375 #asm
24978                                           !BCC_ASM
24979                       00000008            _biosfn_write_teletype.flag	set	8
24980                       00000006            _biosfn_write_teletype.attr	set	6
24981                       00000004            _biosfn_write_teletype.page	set	4
24982                       00000002            _biosfn_write_teletype.car	set	2
24983                       0000650C            biosfn_read_pel_mask:
24984 650C           50                           push ax
24985 650D           52                           push dx
24986 650E           BA                   03C6    mov dx, # 0x3c6
24987 6511           EC                           in al, dx
24988 6512           88C3                         mov bl, al
24989 6514           5A                           pop dx
24990 6515           58                           pop ax
24991 6516           C3                           ret
24992                                           ! 3385 endasm
24993                                           !BCC_ENDASM
24994                                           ! 3386 #asm
24995                                           !BCC_ASM
24996                       00000008            _biosfn_write_teletype.flag	set	8
24997                       00000006            _biosfn_write_teletype.attr	set	6
24998                       00000004            _biosfn_write_teletype.page	set	4
24999                       00000002            _biosfn_write_teletype.car	set	2
25000                       00006517            biosfn_read_video_dac_state:
25001 6517           50                           push ax
25002 6518           52                           push dx
25003 6519           BA                   03DA    mov dx, # 0x3da
25004 651C           EC                           in al, dx
25005 651D           BA                   03C0    mov dx, # 0x3c0
25006 6520           B0                     10    mov al, #0x10
25007 6522           EE                           out dx, al
25008 6523           BA                   03C1    mov dx, # 0x3c1
25009 6526           EC                           in al, dx
25010 6527           88C3                         mov bl, al
25011 6529           C0EB                   07    shr bl, 7
25012 652C           BA                   03DA    mov dx, # 0x3da
25013 652F           EC                           in al, dx
25014 6530           BA                   03C0    mov dx, # 0x3c0
25015 6533           B0                     14    mov al, #0x14
25016 6535           EE                           out dx, al
25017 6536           BA                   03C1    mov dx, # 0x3c1
25018 6539           EC                           in al, dx
25019 653A           88C7                         mov bh, al
25020 653C           80E7                   0F    and bh, #0x0f
25021 653F           F6C3                   01    test bl, #0x01
25022 6542           75           03              jnz get_dac_16_page
25023 6544           C0EF                   02    shr bh, 2
25024                       00006547            get_dac_16_page:
25025 6547           BA                   03DA    mov dx, # 0x3da
25026 654A           EC                           in al, dx
25027 654B           BA                   03C0    mov dx, # 0x3c0
25028 654E           B0                     20    mov al, #0x20
25029 6550           EE                           out dx, al
25030 6551           5A                           pop dx
25031 6552           58                           pop ax
25032 6553           C3                           ret
25033                                           ! 3420 endasm
25034                                           !BCC_ENDASM
25035                                           ! 3421 static void biosfn_perform_gray_scale_summing (start,count)
25036                                           ! Register BX used in function biosfn_write_teletype
25037                                           ! 3422 Bit16u start;Bit16u count;
25038                       00006554            _biosfn_perform_gray_scale_summing:
25039                                           !BCC_EOS
25040                                           !BCC_EOS
25041                                           ! 3423 {Bit8u r,g,b;
25042                                           !BCC_EOS
25043                                           ! 3424  Bit16u i;
25044                                           !BCC_EOS
25045                                           ! 3425  Bit16u index;
25046                                           !BCC_EOS
25047                                           ! 3426  inb(0x3da);
25048 6554           55                         push	bp
25049 6555           89E5                       mov	bp,sp
25050 6557           83C4                   F8  add	sp,*-8
25051                                           ! Debug: list int = const $3DA (used reg = )
25052 655A           B8                   03DA  mov	ax,#$3DA
25053 655D           50                         push	ax
25054                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25055 655E           E8         180F            call	_inb
25056 6561           44                         inc	sp
25057 6562           44                         inc	sp
25058                                           !BCC_EOS
25059                                           ! 3427  outb(0x3c0,0x00);
25060                                           ! Debug: list int = const 0 (used reg = )
25061 6563           31C0                       xor	ax,ax
25062 6565           50                         push	ax
25063                                           ! Debug: list int = const $3C0 (used reg = )
25064 6566           B8                   03C0  mov	ax,#$3C0
25065 6569           50                         push	ax
25066                                           ! Debug: func () void = outb+0 (used reg = )
25067 656A           E8         1819            call	_outb
25068 656D           83C4                   04  add	sp,*4
25069                                           !BCC_EOS
25070                                           ! 3428  for( index = 0; index < count; index++ )
25071                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
25072 6570           31C0                       xor	ax,ax
25073 6572           8946         F8            mov	-8[bp],ax
25074                                           !BCC_EOS
25075                                           !BCC_EOS
25076                                           ! 3429   {
25077 6575           E9         00BE            br 	.219
25078                       00006578            .21A:
25079                                           ! 3430    outb(0x3c7,start);
25080                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25081 6578           FF76         04            push	4[bp]
25082                                           ! Debug: list int = const $3C7 (used reg = )
25083 657B           B8                   03C7  mov	ax,#$3C7
25084 657E           50                         push	ax
25085                                           ! Debug: func () void = outb+0 (used reg = )
25086 657F           E8         1804            call	_outb
25087 6582           83C4                   04  add	sp,*4
25088                                           !BCC_EOS
25089                                           ! 3431    r=inb( 0x3c9 );
25090                                           ! Debug: list int = const $3C9 (used reg = )
25091 6585           B8                   03C9  mov	ax,#$3C9
25092 6588           50                         push	ax
25093                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25094 6589           E8         17E4            call	_inb
25095 658C           44                         inc	sp
25096 658D           44                         inc	sp
25097                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
25098 658E           8846         FF            mov	-1[bp],al
25099                                           !BCC_EOS
25100                                           ! 3432    g=inb( 0x3c9 );
25101                                           ! Debug: list int = const $3C9 (used reg = )
25102 6591           B8                   03C9  mov	ax,#$3C9
25103 6594           50                         push	ax
25104                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25105 6595           E8         17D8            call	_inb
25106 6598           44                         inc	sp
25107 6599           44                         inc	sp
25108                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
25109 659A           8846         FE            mov	-2[bp],al
25110                                           !BCC_EOS
25111                                           ! 3433    b=inb( 0x3c9 );
25112                                           ! Debug: list int = const $3C9 (used reg = )
25113 659D           B8                   03C9  mov	ax,#$3C9
25114 65A0           50                         push	ax
25115                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25116 65A1           E8         17CC            call	_inb
25117 65A4           44                         inc	sp
25118 65A5           44                         inc	sp
25119                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
25120 65A6           8846         FD            mov	-3[bp],al
25121                                           !BCC_EOS
25122                                           ! 3434    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
25123                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
25124                                           ! Debug: expression subtree swapping
25125 65A9           8A46         FD            mov	al,-3[bp]
25126 65AC           30E4                       xor	ah,ah
25127 65AE           B9                   001C  mov	cx,*$1C
25128 65B1           F7E9                       imul	cx
25129 65B3           50                         push	ax
25130                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
25131                                           ! Debug: expression subtree swapping
25132 65B4           8A46         FE            mov	al,-2[bp]
25133 65B7           30E4                       xor	ah,ah
25134 65B9           B9                   0097  mov	cx,#$97
25135 65BC           F7E9                       imul	cx
25136 65BE           50                         push	ax
25137                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
25138                                           ! Debug: expression subtree swapping
25139 65BF           8A46         FF            mov	al,-1[bp]
25140 65C2           30E4                       xor	ah,ah
25141 65C4           B9                   004D  mov	cx,*$4D
25142 65C7           F7E9                       imul	cx
25143                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
25144 65C9           0346         F4            add	ax,-$C[bp]
25145 65CC           44                         inc	sp
25146 65CD           44                         inc	sp
25147                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25148 65CE           0346         F6            add	ax,-$A[bp]
25149 65D1           44                         inc	sp
25150 65D2           44                         inc	sp
25151                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
25152                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
25153 65D3           05                   0080  add	ax,#$80
25154 65D6           88E0                       mov	al,ah
25155 65D8           30E4                       xor	ah,ah
25156                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
25157 65DA           8946         FA            mov	-6[bp],ax
25158                                           !BCC_EOS
25159                                           ! 3435    if(i>0x3f)i=0x3f;
25160                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25161 65DD           8B46         FA            mov	ax,-6[bp]
25162 65E0           3D                   003F  cmp	ax,*$3F
25163 65E3           76           06            jbe 	.21B
25164                       000065E5            .21C:
25165                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25166 65E5           B8                   003F  mov	ax,*$3F
25167 65E8           8946         FA            mov	-6[bp],ax
25168                                           !BCC_EOS
25169                                           ! 3436    outb(0x3c8,start);
25170                       000065EB            .21B:
25171                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25172 65EB           FF76         04            push	4[bp]
25173                                           ! Debug: list int = const $3C8 (used reg = )
25174 65EE           B8                   03C8  mov	ax,#$3C8
25175 65F1           50                         push	ax
25176                                           ! Debug: func () void = outb+0 (used reg = )
25177 65F2           E8         1791            call	_outb
25178 65F5           83C4                   04  add	sp,*4
25179                                           !BCC_EOS
25180                                           ! 3437    outb( 0x3c9, i&0xff );
25181                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25182 65F8           8A46         FA            mov	al,-6[bp]
25183                                           ! Debug: list unsigned char = al+0 (used reg = )
25184 65FB           30E4                       xor	ah,ah
25185 65FD           50                         push	ax
25186                                           ! Debug: list int = const $3C9 (used reg = )
25187 65FE           B8                   03C9  mov	ax,#$3C9
25188 6601           50                         push	ax
25189                                           ! Debug: func () void = outb+0 (used reg = )
25190 6602           E8         1781            call	_outb
25191 6605           83C4                   04  add	sp,*4
25192                                           !BCC_EOS
25193                                           ! 3438    outb( 0x3c9, i&0xff );
25194                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25195 6608           8A46         FA            mov	al,-6[bp]
25196                                           ! Debug: list unsigned char = al+0 (used reg = )
25197 660B           30E4                       xor	ah,ah
25198 660D           50                         push	ax
25199                                           ! Debug: list int = const $3C9 (used reg = )
25200 660E           B8                   03C9  mov	ax,#$3C9
25201 6611           50                         push	ax
25202                                           ! Debug: func () void = outb+0 (used reg = )
25203 6612           E8         1771            call	_outb
25204 6615           83C4                   04  add	sp,*4
25205                                           !BCC_EOS
25206                                           ! 3439    outb( 0x3c9, i&0xff );
25207                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25208 6618           8A46         FA            mov	al,-6[bp]
25209                                           ! Debug: list unsigned char = al+0 (used reg = )
25210 661B           30E4                       xor	ah,ah
25211 661D           50                         push	ax
25212                                           ! Debug: list int = const $3C9 (used reg = )
25213 661E           B8                   03C9  mov	ax,#$3C9
25214 6621           50                         push	ax
25215                                           ! Debug: func () void = outb+0 (used reg = )
25216 6622           E8         1761            call	_outb
25217 6625           83C4                   04  add	sp,*4
25218                                           !BCC_EOS
25219                                           ! 3440    start++;
25220                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
25221 6628           8B46         04            mov	ax,4[bp]
25222 662B           40                         inc	ax
25223 662C           8946         04            mov	4[bp],ax
25224                                           !BCC_EOS
25225                                           ! 3441   }
25226                                           ! 3442  inb(0x3da);
25227                       0000662F            .218:
25228                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25229 662F           8B46         F8            mov	ax,-8[bp]
25230 6632           40                         inc	ax
25231 6633           8946         F8            mov	-8[bp],ax
25232                       00006636            .219:
25233                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25234 6636           8B46         F8            mov	ax,-8[bp]
25235 6639           3B46         06            cmp	ax,6[bp]
25236 663C         0F82         FF38            blo 	.21A
25237                       00006640            .21D:
25238                       00006640            .217:
25239                                           ! Debug: list int = const $3DA (used reg = )
25240 6640           B8                   03DA  mov	ax,#$3DA
25241 6643           50                         push	ax
25242                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25243 6644           E8         1729            call	_inb
25244 6647           44                         inc	sp
25245 6648           44                         inc	sp
25246                                           !BCC_EOS
25247                                           ! 3443  outb(0x3c0,0x20);
25248                                           ! Debug: list int = const $20 (used reg = )
25249 6649           B8                   0020  mov	ax,*$20
25250 664C           50                         push	ax
25251                                           ! Debug: list int = const $3C0 (used reg = )
25252 664D           B8                   03C0  mov	ax,#$3C0
25253 6650           50                         push	ax
25254                                           ! Debug: func () void = outb+0 (used reg = )
25255 6651           E8         1732            call	_outb
25256 6654           83C4                   04  add	sp,*4
25257                                           !BCC_EOS
25258                                           ! 3444 }
25259 6657           89EC                       mov	sp,bp
25260 6659           5D                         pop	bp
25261 665A           C3                         ret
25262                                           ! 3445 static void get_font_access()
25263                                           ! 3446 {
25264                       0000665B            _get_font_access:
25265                                           ! 3447 #asm
25266                                           !BCC_ASM
25267 665B           BA                   03C4   mov dx, # 0x3c4
25268 665E           B8                   0100   mov ax, #0x0100
25269 6661           EF                          out dx, ax
25270 6662           B8                   0402   mov ax, #0x0402
25271 6665           EF                          out dx, ax
25272 6666           B8                   0704   mov ax, #0x0704
25273 6669           EF                          out dx, ax
25274 666A           B8                   0300   mov ax, #0x0300
25275 666D           EF                          out dx, ax
25276 666E           BA                   03CE   mov dx, # 0x3ce
25277 6671           B8                   0204   mov ax, #0x0204
25278 6674           EF                          out dx, ax
25279 6675           B8                   0005   mov ax, #0x0005
25280 6678           EF                          out dx, ax
25281 6679           B8                   0406   mov ax, #0x0406
25282 667C           EF                          out dx, ax
25283                                           ! 3464 endasm
25284                                           !BCC_ENDASM
25285                                           ! 3465 }
25286 667D           C3                         ret
25287                                           ! 3466 static void release_font_access()
25288                                           ! 3467 {
25289                       0000667E            _release_font_access:
25290                                           ! 3468 #asm
25291                                           !BCC_ASM
25292 667E           BA                   03C4   mov dx, # 0x3c4
25293 6681           B8                   0100   mov ax, #0x0100
25294 6684           EF                          out dx, ax
25295 6685           B8                   0302   mov ax, #0x0302
25296 6688           EF                          out dx, ax
25297 6689           B8                   0304   mov ax, #0x0304
25298 668C           EF                          out dx, ax
25299 668D           B8                   0300   mov ax, #0x0300
25300 6690           EF                          out dx, ax
25301 6691           BA                   03CC   mov dx, # 0x3cc
25302 6694           EC                          in al, dx
25303 6695           24                     01   and al, #0x01
25304 6697           C0E0                   02   shl al, 2
25305 669A           0C                     0A   or al, #0x0a
25306 669C           88C4                        mov ah, al
25307 669E           B0                     06   mov al, #0x06
25308 66A0           BA                   03CE   mov dx, # 0x3ce
25309 66A3           EF                          out dx, ax
25310 66A4           B8                   0004   mov ax, #0x0004
25311 66A7           EF                          out dx, ax
25312 66A8           B8                   1005   mov ax, #0x1005
25313 66AB           EF                          out dx, ax
25314                                           ! 3491 endasm
25315                                           !BCC_ENDASM
25316                                           ! 3492 }
25317 66AC           C3                         ret
25318                                           ! 3493 #asm
25319                                           !BCC_ASM
25320                       000066AD            idiv_u:
25321 66AD           31D2                         xor dx,dx
25322 66AF           F7F3                         div bx
25323 66B1           C3                           ret
25324                                           ! 3498 endasm
25325                                           !BCC_ENDASM
25326                                           ! 3499 static void set_scan_lines(lines) Bit8u lines;
25327                       000066B2            _set_scan_lines:
25328                                           !BCC_EOS
25329                                           ! 3500 {
25330                                           ! 3501  Bit16u crtc_addr,cols,page,vde;
25331                                           !BCC_EOS
25332                                           ! 3502  Bit8u crtc_r9,ovl,rows;
25333                                           !BCC_EOS
25334                                           ! 3503  crtc_addr = read_word(0x40,0x63);
25335 66B2           55                         push	bp
25336 66B3           89E5                       mov	bp,sp
25337 66B5           83C4                   F4  add	sp,*-$C
25338                                           ! Debug: list int = const $63 (used reg = )
25339 66B8           B8                   0063  mov	ax,*$63
25340 66BB           50                         push	ax
25341                                           ! Debug: list int = const $40 (used reg = )
25342 66BC           B8                   0040  mov	ax,*$40
25343 66BF           50                         push	ax
25344                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25345 66C0           E8         166A            call	_read_word
25346 66C3           83C4                   04  add	sp,*4
25347                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25348 66C6           8946         FE            mov	-2[bp],ax
25349                                           !BCC_EOS
25350                                           ! 3504  outb(crtc_addr, 0x09);
25351                                           ! Debug: list int = const 9 (used reg = )
25352 66C9           B8                   0009  mov	ax,*9
25353 66CC           50                         push	ax
25354                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25355 66CD           FF76         FE            push	-2[bp]
25356                                           ! Debug: func () void = outb+0 (used reg = )
25357 66D0           E8         16B3            call	_outb
25358 66D3           83C4                   04  add	sp,*4
25359                                           !BCC_EOS
25360                                           ! 3505  crtc_r9 = inb(crtc_addr+1);
25361                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25362 66D6           8B46         FE            mov	ax,-2[bp]
25363                                           ! Debug: list unsigned int = ax+1 (used reg = )
25364 66D9           40                         inc	ax
25365 66DA           50                         push	ax
25366                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25367 66DB           E8         1692            call	_inb
25368 66DE           44                         inc	sp
25369 66DF           44                         inc	sp
25370                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25371 66E0           8846         F7            mov	-9[bp],al
25372                                           !BCC_EOS
25373                                           ! 3506  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25374                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25375 66E3           8A46         04            mov	al,4[bp]
25376 66E6           30E4                       xor	ah,ah
25377 66E8           48                         dec	ax
25378 66E9           50                         push	ax
25379                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25380 66EA           8A46         F7            mov	al,-9[bp]
25381 66ED           24                     E0  and	al,#$E0
25382                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25383 66EF           30E4                       xor	ah,ah
25384 66F1           0B46         F2            or	ax,-$E[bp]
25385 66F4           44                         inc	sp
25386 66F5           44                         inc	sp
25387                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25388 66F6           8846         F7            mov	-9[bp],al
25389                                           !BCC_EOS
25390                                           ! 3507  outb(crtc_addr+1, crtc_r9);
25391                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25392 66F9           8A46         F7            mov	al,-9[bp]
25393 66FC           30E4                       xor	ah,ah
25394 66FE           50                         push	ax
25395                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25396 66FF           8B46         FE            mov	ax,-2[bp]
25397                                           ! Debug: list unsigned int = ax+1 (used reg = )
25398 6702           40                         inc	ax
25399 6703           50                         push	ax
25400                                           ! Debug: func () void = outb+0 (used reg = )
25401 6704           E8         167F            call	_outb
25402 6707           83C4                   04  add	sp,*4
25403                                           !BCC_EOS
25404                                           ! 3508  if(lines==8)
25405                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25406 670A           8A46         04            mov	al,4[bp]
25407 670D           3C                     08  cmp	al,*8
25408 670F           75           10            jne 	.21E
25409                       00006711            .21F:
25410                                           ! 3509   {
25411                                           ! 3510    biosfn_set_cursor_shape(0x06,0x07);
25412                                           ! Debug: list int = const 7 (used reg = )
25413 6711           B8                   0007  mov	ax,*7
25414 6714           50                         push	ax
25415                                           ! Debug: list int = const 6 (used reg = )
25416 6715           B8                   0006  mov	ax,*6
25417 6718           50                         push	ax
25418                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25419 6719           E8         DB86            call	_biosfn_set_cursor_shape
25420 671C           83C4                   04  add	sp,*4
25421                                           !BCC_EOS
25422                                           ! 3511   }
25423                                           ! 3512  else
25424                                           ! 3513   {
25425 671F           EB           18            jmp .220
25426                       00006721            .21E:
25427                                           ! 3514    biosfn_set_cursor_shape(lines-4,lines-3);
25428                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25429 6721           8A46         04            mov	al,4[bp]
25430 6724           30E4                       xor	ah,ah
25431                                           ! Debug: list unsigned int = ax-3 (used reg = )
25432 6726           05                   FFFD  add	ax,*-3
25433 6729           50                         push	ax
25434                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25435 672A           8A46         04            mov	al,4[bp]
25436 672D           30E4                       xor	ah,ah
25437                                           ! Debug: list unsigned int = ax-4 (used reg = )
25438 672F           05                   FFFC  add	ax,*-4
25439 6732           50                         push	ax
25440                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25441 6733           E8         DB6C            call	_biosfn_set_cursor_shape
25442 6736           83C4                   04  add	sp,*4
25443                                           !BCC_EOS
25444                                           ! 3515   }
25445                                           ! 3516  write_word(0x40,0x85, lines);
25446                       00006739            .220:
25447                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25448 6739           8A46         04            mov	al,4[bp]
25449 673C           30E4                       xor	ah,ah
25450 673E           50                         push	ax
25451                                           ! Debug: list int = const $85 (used reg = )
25452 673F           B8                   0085  mov	ax,#$85
25453 6742           50                         push	ax
25454                                           ! Debug: list int = const $40 (used reg = )
25455 6743           B8                   0040  mov	ax,*$40
25456 6746           50                         push	ax
25457                                           ! Debug: func () void = write_word+0 (used reg = )
25458 6747           E8         160E            call	_write_word
25459 674A           83C4                   06  add	sp,*6
25460                                           !BCC_EOS
25461                                           ! 3517  outb(crtc_addr, 0x12);
25462                                           ! Debug: list int = const $12 (used reg = )
25463 674D           B8                   0012  mov	ax,*$12
25464 6750           50                         push	ax
25465                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25466 6751           FF76         FE            push	-2[bp]
25467                                           ! Debug: func () void = outb+0 (used reg = )
25468 6754           E8         162F            call	_outb
25469 6757           83C4                   04  add	sp,*4
25470                                           !BCC_EOS
25471                                           ! 3518  vde = inb(crtc_addr+1);
25472                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25473 675A           8B46         FE            mov	ax,-2[bp]
25474                                           ! Debug: list unsigned int = ax+1 (used reg = )
25475 675D           40                         inc	ax
25476 675E           50                         push	ax
25477                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25478 675F           E8         160E            call	_inb
25479 6762           44                         inc	sp
25480 6763           44                         inc	sp
25481                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25482 6764           30E4                       xor	ah,ah
25483 6766           8946         F8            mov	-8[bp],ax
25484                                           !BCC_EOS
25485                                           ! 3519  outb(crtc_addr, 0x07);
25486                                           ! Debug: list int = const 7 (used reg = )
25487 6769           B8                   0007  mov	ax,*7
25488 676C           50                         push	ax
25489                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25490 676D           FF76         FE            push	-2[bp]
25491                                           ! Debug: func () void = outb+0 (used reg = )
25492 6770           E8         1613            call	_outb
25493 6773           83C4                   04  add	sp,*4
25494                                           !BCC_EOS
25495                                           ! 3520  ovl = inb(crtc_addr+1);
25496                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25497 6776           8B46         FE            mov	ax,-2[bp]
25498                                           ! Debug: list unsigned int = ax+1 (used reg = )
25499 6779           40                         inc	ax
25500 677A           50                         push	ax
25501                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25502 677B           E8         15F2            call	_inb
25503 677E           44                         inc	sp
25504 677F           44                         inc	sp
25505                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25506 6780           8846         F6            mov	-$A[bp],al
25507                                           !BCC_EOS
25508                                           ! 3521  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25509                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25510 6783           8A46         F6            mov	al,-$A[bp]
25511 6786           24                     40  and	al,*$40
25512                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25513 6788           30E4                       xor	ah,ah
25514 678A           B1                     03  mov	cl,*3
25515 678C           D3E0                       shl	ax,cl
25516 678E           50                         push	ax
25517                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25518 678F           8A46         F6            mov	al,-$A[bp]
25519 6792           24                     02  and	al,*2
25520                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25521 6794           30E4                       xor	ah,ah
25522 6796           B1                     07  mov	cl,*7
25523 6798           D3E0                       shl	ax,cl
25524                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25525 679A           0346         F2            add	ax,-$E[bp]
25526 679D           44                         inc	sp
25527 679E           44                         inc	sp
25528                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25529                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25530 679F           40                         inc	ax
25531 67A0           0346         F8            add	ax,-8[bp]
25532 67A3           8946         F8            mov	-8[bp],ax
25533                                           !BCC_EOS
25534                                           ! 3522  rows = vde / lines;
25535                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25536 67A6           8A46         04            mov	al,4[bp]
25537 67A9           30E4                       xor	ah,ah
25538 67AB           89C3                       mov	bx,ax
25539 67AD           8B46         F8            mov	ax,-8[bp]
25540 67B0           E8         FEFA            call	idiv_u
25541                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25542 67B3           8846         F5            mov	-$B[bp],al
25543                                           !BCC_EOS
25544                                           ! 3523  write_byte(0x40,0x84, rows-1);
25545                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25546 67B6           8A46         F5            mov	al,-$B[bp]
25547 67B9           30E4                       xor	ah,ah
25548                                           ! Debug: list unsigned int = ax-1 (used reg = )
25549 67BB           48                         dec	ax
25550 67BC           50                         push	ax
25551                                           ! Debug: list int = const $84 (used reg = )
25552 67BD           B8                   0084  mov	ax,#$84
25553 67C0           50                         push	ax
25554                                           ! Debug: list int = const $40 (used reg = )
25555 67C1           B8                   0040  mov	ax,*$40
25556 67C4           50                         push	ax
25557                                           ! Debug: func () void = write_byte+0 (used reg = )
25558 67C5           E8         1578            call	_write_byte
25559 67C8           83C4                   06  add	sp,*6
25560                                           !BCC_EOS
25561                                           ! 3524  cols = read_word(0x40,0x4A);
25562                                           ! Debug: list int = const $4A (used reg = )
25563 67CB           B8                   004A  mov	ax,*$4A
25564 67CE           50                         push	ax
25565                                           ! Debug: list int = const $40 (used reg = )
25566 67CF           B8                   0040  mov	ax,*$40
25567 67D2           50                         push	ax
25568                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25569 67D3           E8         1557            call	_read_word
25570 67D6           83C4                   04  add	sp,*4
25571                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25572 67D9           8946         FC            mov	-4[bp],ax
25573                                           !BCC_EOS
25574                                           ! 3525  write_word(0x40,0x4C, rows * cols * 2);
25575                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25576 67DC           8A46         F5            mov	al,-$B[bp]
25577 67DF           30E4                       xor	ah,ah
25578 67E1           8B4E         FC            mov	cx,-4[bp]
25579 67E4           F7E9                       imul	cx
25580                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25581 67E6           D1E0                       shl	ax,*1
25582                                           ! Debug: list unsigned int = ax+0 (used reg = )
25583 67E8           50                         push	ax
25584                                           ! Debug: list int = const $4C (used reg = )
25585 67E9           B8                   004C  mov	ax,*$4C
25586 67EC           50                         push	ax
25587                                           ! Debug: list int = const $40 (used reg = )
25588 67ED           B8                   0040  mov	ax,*$40
25589 67F0           50                         push	ax
25590                                           ! Debug: func () void = write_word+0 (used reg = )
25591 67F1           E8         1564            call	_write_word
25592 67F4           83C4                   06  add	sp,*6
25593                                           !BCC_EOS
25594                                           ! 3526 }
25595 67F7           89EC                       mov	sp,bp
25596 67F9           5D                         pop	bp
25597 67FA           C3                         ret
25598                                           ! 3527 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25599                                           ! Register BX used in function set_scan_lines
25600                       000067FB            _biosfn_load_text_user_pat:
25601                                           !BCC_EOS
25602                                           !BCC_EOS
25603                                           !BCC_EOS
25604                                           !BCC_EOS
25605                                           !BCC_EOS
25606                                           !BCC_EOS
25607                                           !BCC_EOS
25608                                           ! 3528 {
25609                                           ! 3529  Bit16u blockaddr,dest,i,src;
25610                                           !BCC_EOS
25611                                           ! 3530  get_font_access();
25612 67FB           55                         push	bp
25613 67FC           89E5                       mov	bp,sp
25614 67FE           83C4                   F8  add	sp,*-8
25615                                           ! Debug: func () void = get_font_access+0 (used reg = )
25616 6801           E8         FE57            call	_get_font_access
25617                                           !BCC_EOS
25618                                           ! 3531  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25619                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25620 6804           8A46         0E            mov	al,$E[bp]
25621 6807           24                     04  and	al,*4
25622                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25623 6809           30E4                       xor	ah,ah
25624 680B           88C4                       mov	ah,al
25625 680D           30C0                       xor	al,al
25626 680F           B1                     03  mov	cl,*3
25627 6811           D3E0                       shl	ax,cl
25628 6813           50                         push	ax
25629                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25630 6814           8A46         0E            mov	al,$E[bp]
25631 6817           24                     03  and	al,*3
25632                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25633 6819           30E4                       xor	ah,ah
25634 681B           88C4                       mov	ah,al
25635 681D           30C0                       xor	al,al
25636 681F           B1                     06  mov	cl,*6
25637 6821           D3E0                       shl	ax,cl
25638                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25639 6823           0346         F6            add	ax,-$A[bp]
25640 6826           44                         inc	sp
25641 6827           44                         inc	sp
25642                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25643 6828           8946         FE            mov	-2[bp],ax
25644                                           !BCC_EOS
25645                                           ! 3532  for(i=0;i<CX;i++)
25646                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25647 682B           31C0                       xor	ax,ax
25648 682D           8946         FA            mov	-6[bp],ax
25649                                           !BCC_EOS
25650                                           !BCC_EOS
25651                                           ! 3533   {
25652 6830           EB           44            jmp .223
25653                       00006832            .224:
25654                                           ! 3534    src = BP + i * BH;
25655                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25656 6832           8A46         10            mov	al,$10[bp]
25657 6835           30E4                       xor	ah,ah
25658 6837           89C3                       mov	bx,ax
25659 6839           8B46         FA            mov	ax,-6[bp]
25660 683C           89D9                       mov	cx,bx
25661 683E           F7E9                       imul	cx
25662                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25663                                           ! Debug: expression subtree swapping
25664 6840           0346         08            add	ax,8[bp]
25665                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25666 6843           8946         F8            mov	-8[bp],ax
25667                                           !BCC_EOS
25668                                           ! 3535    dest = blockaddr + (DX + i) * 32;
25669                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25670 6846           8B46         0C            mov	ax,$C[bp]
25671 6849           0346         FA            add	ax,-6[bp]
25672                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25673 684C           B1                     05  mov	cl,*5
25674 684E           D3E0                       shl	ax,cl
25675                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25676                                           ! Debug: expression subtree swapping
25677 6850           0346         FE            add	ax,-2[bp]
25678                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25679 6853           8946         FC            mov	-4[bp],ax
25680                                           !BCC_EOS
25681                                           ! 3536    memcpyb(0xA000, dest, ES, src, BH);
25682                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25683 6856           8A46         10            mov	al,$10[bp]
25684 6859           30E4                       xor	ah,ah
25685 685B           50                         push	ax
25686                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25687 685C           FF76         F8            push	-8[bp]
25688                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25689 685F           FF76         06            push	6[bp]
25690                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25691 6862           FF76         FC            push	-4[bp]
25692                                           ! Debug: list unsigned int = const $A000 (used reg = )
25693 6865           B8                   A000  mov	ax,#$A000
25694 6868           50                         push	ax
25695                                           ! Debug: func () void = memcpyb+0 (used reg = )
25696 6869           E8         144E            call	_memcpyb
25697 686C           83C4                   0A  add	sp,*$A
25698                                           !BCC_EOS
25699                                           ! 3537   }
25700                                           ! 3538  release_font_access();
25701                       0000686F            .222:
25702                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25703 686F           8B46         FA            mov	ax,-6[bp]
25704 6872           40                         inc	ax
25705 6873           8946         FA            mov	-6[bp],ax
25706                       00006876            .223:
25707                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25708 6876           8B46         FA            mov	ax,-6[bp]
25709 6879           3B46         0A            cmp	ax,$A[bp]
25710 687C           72           B4            jb 	.224
25711                       0000687E            .225:
25712                       0000687E            .221:
25713                                           ! Debug: func () void = release_font_access+0 (used reg = )
25714 687E           E8         FDFD            call	_release_font_access
25715                                           !BCC_EOS
25716                                           ! 3539  if(AL>=0x10)
25717                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25718 6881           8A46         04            mov	al,4[bp]
25719 6884           3C                     10  cmp	al,*$10
25720 6886           72           0B            jb  	.226
25721                       00006888            .227:
25722                                           ! 3540   {
25723                                           ! 3541    set_scan_lines(BH);
25724                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25725 6888           8A46         10            mov	al,$10[bp]
25726 688B           30E4                       xor	ah,ah
25727 688D           50                         push	ax
25728                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25729 688E           E8         FE21            call	_set_scan_lines
25730 6891           44                         inc	sp
25731 6892           44                         inc	sp
25732                                           !BCC_EOS
25733                                           ! 3542   }
25734                                           ! 3543 }
25735                       00006893            .226:
25736 6893           89EC                       mov	sp,bp
25737 6895           5D                         pop	bp
25738 6896           C3                         ret
25739                                           ! 3544 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25740                                           ! Register BX used in function biosfn_load_text_user_pat
25741                       00006897            _biosfn_load_text_8_14_pat:
25742                                           !BCC_EOS
25743                                           !BCC_EOS
25744                                           ! 3545 {
25745                                           ! 3546  Bit16u blockaddr,dest,i,src;
25746                                           !BCC_EOS
25747                                           ! 3547  get_font_access();
25748 6897           55                         push	bp
25749 6898           89E5                       mov	bp,sp
25750 689A           83C4                   F8  add	sp,*-8
25751                                           ! Debug: func () void = get_font_access+0 (used reg = )
25752 689D           E8         FDBB            call	_get_font_access
25753                                           !BCC_EOS
25754                                           ! 3548  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25755                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25756 68A0           8A46         06            mov	al,6[bp]
25757 68A3           24                     04  and	al,*4
25758                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25759 68A5           30E4                       xor	ah,ah
25760 68A7           88C4                       mov	ah,al
25761 68A9           30C0                       xor	al,al
25762 68AB           B1                     03  mov	cl,*3
25763 68AD           D3E0                       shl	ax,cl
25764 68AF           50                         push	ax
25765                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25766 68B0           8A46         06            mov	al,6[bp]
25767 68B3           24                     03  and	al,*3
25768                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25769 68B5           30E4                       xor	ah,ah
25770 68B7           88C4                       mov	ah,al
25771 68B9           30C0                       xor	al,al
25772 68BB           B1                     06  mov	cl,*6
25773 68BD           D3E0                       shl	ax,cl
25774                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25775 68BF           0346         F6            add	ax,-$A[bp]
25776 68C2           44                         inc	sp
25777 68C3           44                         inc	sp
25778                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25779 68C4           8946         FE            mov	-2[bp],ax
25780                                           !BCC_EOS
25781                                           ! 3549  for(i=0;i<0x100;i++)
25782                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25783 68C7           31C0                       xor	ax,ax
25784 68C9           8946         FA            mov	-6[bp],ax
25785                                           !BCC_EOS
25786                                           !BCC_EOS
25787                                           ! 3550   {
25788 68CC           EB           41            jmp .22A
25789                       000068CE            .22B:
25790                                           ! 3551    src = i * 14;
25791                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25792 68CE           8B46         FA            mov	ax,-6[bp]
25793 68D1           89C2                       mov	dx,ax
25794 68D3           B1                     03  mov	cl,*3
25795 68D5           D3E0                       shl	ax,cl
25796 68D7           29D0                       sub	ax,dx
25797 68D9           D1E0                       shl	ax,*1
25798                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25799 68DB           8946         F8            mov	-8[bp],ax
25800                                           !BCC_EOS
25801                                           ! 3552    dest = blockaddr + i * 32;
25802                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25803 68DE           8B46         FA            mov	ax,-6[bp]
25804 68E1           B1                     05  mov	cl,*5
25805 68E3           D3E0                       shl	ax,cl
25806                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25807                                           ! Debug: expression subtree swapping
25808 68E5           0346         FE            add	ax,-2[bp]
25809                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25810 68E8           8946         FC            mov	-4[bp],ax
25811                                           !BCC_EOS
25812                                           ! 3553    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25813                                           ! Debug: list int = const $E (used reg = )
25814 68EB           B8                   000E  mov	ax,*$E
25815 68EE           50                         push	ax
25816                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25817 68EF           8B5E         F8            mov	bx,-8[bp]
25818                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25819                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25820 68F2           81C3                 176F  add	bx,#_vgafont14
25821 68F6           53                         push	bx
25822                                           ! Debug: list unsigned int = const $C000 (used reg = )
25823 68F7           B8                   C000  mov	ax,#$C000
25824 68FA           50                         push	ax
25825                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25826 68FB           FF76         FC            push	-4[bp]
25827                                           ! Debug: list unsigned int = const $A000 (used reg = )
25828 68FE           B8                   A000  mov	ax,#$A000
25829 6901           50                         push	ax
25830                                           ! Debug: func () void = memcpyb+0 (used reg = )
25831 6902           E8         13B5            call	_memcpyb
25832 6905           83C4                   0A  add	sp,*$A
25833                                           !BCC_EOS
25834                                           ! 3554   }
25835                                           ! 3555  release_font_access();
25836                       00006908            .229:
25837                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25838 6908           8B46         FA            mov	ax,-6[bp]
25839 690B           40                         inc	ax
25840 690C           8946         FA            mov	-6[bp],ax
25841                       0000690F            .22A:
25842                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25843 690F           8B46         FA            mov	ax,-6[bp]
25844 6912           3D                   0100  cmp	ax,#$100
25845 6915           72           B7            jb 	.22B
25846                       00006917            .22C:
25847                       00006917            .228:
25848                                           ! Debug: func () void = release_font_access+0 (used reg = )
25849 6917           E8         FD64            call	_release_font_access
25850                                           !BCC_EOS
25851                                           ! 3556  if(AL>=0x10)
25852                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25853 691A           8A46         04            mov	al,4[bp]
25854 691D           3C                     10  cmp	al,*$10
25855 691F           72           09            jb  	.22D
25856                       00006921            .22E:
25857                                           ! 3557   {
25858                                           ! 3558    set_scan_lines(14);
25859                                           ! Debug: list int = const $E (used reg = )
25860 6921           B8                   000E  mov	ax,*$E
25861 6924           50                         push	ax
25862                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25863 6925           E8         FD8A            call	_set_scan_lines
25864 6928           44                         inc	sp
25865 6929           44                         inc	sp
25866                                           !BCC_EOS
25867                                           ! 3559   }
25868                                           ! 3560 }
25869                       0000692A            .22D:
25870 692A           89EC                       mov	sp,bp
25871 692C           5D                         pop	bp
25872 692D           C3                         ret
25873                                           ! 3561 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25874                                           ! Register BX used in function biosfn_load_text_8_14_pat
25875                       0000692E            _biosfn_load_text_8_8_pat:
25876                                           !BCC_EOS
25877                                           !BCC_EOS
25878                                           ! 3562 {
25879                                           ! 3563  Bit16u blockaddr,dest,i,src;
25880                                           !BCC_EOS
25881                                           ! 3564  get_font_access();
25882 692E           55                         push	bp
25883 692F           89E5                       mov	bp,sp
25884 6931           83C4                   F8  add	sp,*-8
25885                                           ! Debug: func () void = get_font_access+0 (used reg = )
25886 6934           E8         FD24            call	_get_font_access
25887                                           !BCC_EOS
25888                                           ! 3565  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25889                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25890 6937           8A46         06            mov	al,6[bp]
25891 693A           24                     04  and	al,*4
25892                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25893 693C           30E4                       xor	ah,ah
25894 693E           88C4                       mov	ah,al
25895 6940           30C0                       xor	al,al
25896 6942           B1                     03  mov	cl,*3
25897 6944           D3E0                       shl	ax,cl
25898 6946           50                         push	ax
25899                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25900 6947           8A46         06            mov	al,6[bp]
25901 694A           24                     03  and	al,*3
25902                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25903 694C           30E4                       xor	ah,ah
25904 694E           88C4                       mov	ah,al
25905 6950           30C0                       xor	al,al
25906 6952           B1                     06  mov	cl,*6
25907 6954           D3E0                       shl	ax,cl
25908                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25909 6956           0346         F6            add	ax,-$A[bp]
25910 6959           44                         inc	sp
25911 695A           44                         inc	sp
25912                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25913 695B           8946         FE            mov	-2[bp],ax
25914                                           !BCC_EOS
25915                                           ! 3566  for(i=0;i<0x100;i++)
25916                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25917 695E           31C0                       xor	ax,ax
25918 6960           8946         FA            mov	-6[bp],ax
25919                                           !BCC_EOS
25920                                           !BCC_EOS
25921                                           ! 3567   {
25922 6963           EB           3B            jmp .231
25923                       00006965            .232:
25924                                           ! 3568    src = i * 8;
25925                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25926 6965           8B46         FA            mov	ax,-6[bp]
25927 6968           B1                     03  mov	cl,*3
25928 696A           D3E0                       shl	ax,cl
25929                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25930 696C           8946         F8            mov	-8[bp],ax
25931                                           !BCC_EOS
25932                                           ! 3569    dest = blockaddr + i * 32;
25933                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25934 696F           8B46         FA            mov	ax,-6[bp]
25935 6972           B1                     05  mov	cl,*5
25936 6974           D3E0                       shl	ax,cl
25937                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25938                                           ! Debug: expression subtree swapping
25939 6976           0346         FE            add	ax,-2[bp]
25940                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25941 6979           8946         FC            mov	-4[bp],ax
25942                                           !BCC_EOS
25943                                           ! 3570    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25944                                           ! Debug: list int = const 8 (used reg = )
25945 697C           B8                   0008  mov	ax,*8
25946 697F           50                         push	ax
25947                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25948 6980           8B5E         F8            mov	bx,-8[bp]
25949                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25950                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25951 6983           81C3                 0F6F  add	bx,#_vgafont8
25952 6987           53                         push	bx
25953                                           ! Debug: list unsigned int = const $C000 (used reg = )
25954 6988           B8                   C000  mov	ax,#$C000
25955 698B           50                         push	ax
25956                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25957 698C           FF76         FC            push	-4[bp]
25958                                           ! Debug: list unsigned int = const $A000 (used reg = )
25959 698F           B8                   A000  mov	ax,#$A000
25960 6992           50                         push	ax
25961                                           ! Debug: func () void = memcpyb+0 (used reg = )
25962 6993           E8         1324            call	_memcpyb
25963 6996           83C4                   0A  add	sp,*$A
25964                                           !BCC_EOS
25965                                           ! 3571   }
25966                                           ! 3572  release_font_access();
25967                       00006999            .230:
25968                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25969 6999           8B46         FA            mov	ax,-6[bp]
25970 699C           40                         inc	ax
25971 699D           8946         FA            mov	-6[bp],ax
25972                       000069A0            .231:
25973                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25974 69A0           8B46         FA            mov	ax,-6[bp]
25975 69A3           3D                   0100  cmp	ax,#$100
25976 69A6           72           BD            jb 	.232
25977                       000069A8            .233:
25978                       000069A8            .22F:
25979                                           ! Debug: func () void = release_font_access+0 (used reg = )
25980 69A8           E8         FCD3            call	_release_font_access
25981                                           !BCC_EOS
25982                                           ! 3573  if(AL>=0x10)
25983                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25984 69AB           8A46         04            mov	al,4[bp]
25985 69AE           3C                     10  cmp	al,*$10
25986 69B0           72           09            jb  	.234
25987                       000069B2            .235:
25988                                           ! 3574   {
25989                                           ! 3575    set_scan_lines(8);
25990                                           ! Debug: list int = const 8 (used reg = )
25991 69B2           B8                   0008  mov	ax,*8
25992 69B5           50                         push	ax
25993                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25994 69B6           E8         FCF9            call	_set_scan_lines
25995 69B9           44                         inc	sp
25996 69BA           44                         inc	sp
25997                                           !BCC_EOS
25998                                           ! 3576   }
25999                                           ! 3577 }
26000                       000069BB            .234:
26001 69BB           89EC                       mov	sp,bp
26002 69BD           5D                         pop	bp
26003 69BE           C3                         ret
26004                                           ! 3578 #asm
26005                                           !BCC_ASM
26006                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
26007                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
26008                       000069BF            biosfn_set_text_block_specifier:
26009 69BF           50                           push ax
26010 69C0           52                           push dx
26011 69C1           BA                   03C4    mov dx, # 0x3c4
26012 69C4           88DC                         mov ah, bl
26013 69C6           B0                     03    mov al, #0x03
26014 69C8           EF                           out dx, ax
26015 69C9           5A                           pop dx
26016 69CA           58                           pop ax
26017 69CB           C3                           ret
26018                                           ! 3589 endasm
26019                                           !BCC_ENDASM
26020                                           ! 3590 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
26021                                           ! Register BX used in function biosfn_load_text_8_8_pat
26022                       000069CC            _biosfn_load_text_8_16_pat:
26023                                           !BCC_EOS
26024                                           !BCC_EOS
26025                                           ! 3591 {
26026                                           ! 3592  Bit16u blockaddr,dest,i,src;
26027                                           !BCC_EOS
26028                                           ! 3593  get_font_access();
26029 69CC           55                         push	bp
26030 69CD           89E5                       mov	bp,sp
26031 69CF           83C4                   F8  add	sp,*-8
26032                                           ! Debug: func () void = get_font_access+0 (used reg = )
26033 69D2           E8         FC86            call	_get_font_access
26034                                           !BCC_EOS
26035                                           ! 3594  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
26036                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
26037 69D5           8A46         06            mov	al,6[bp]
26038 69D8           24                     04  and	al,*4
26039                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
26040 69DA           30E4                       xor	ah,ah
26041 69DC           88C4                       mov	ah,al
26042 69DE           30C0                       xor	al,al
26043 69E0           B1                     03  mov	cl,*3
26044 69E2           D3E0                       shl	ax,cl
26045 69E4           50                         push	ax
26046                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
26047 69E5           8A46         06            mov	al,6[bp]
26048 69E8           24                     03  and	al,*3
26049                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
26050 69EA           30E4                       xor	ah,ah
26051 69EC           88C4                       mov	ah,al
26052 69EE           30C0                       xor	al,al
26053 69F0           B1                     06  mov	cl,*6
26054 69F2           D3E0                       shl	ax,cl
26055                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
26056 69F4           0346         F6            add	ax,-$A[bp]
26057 69F7           44                         inc	sp
26058 69F8           44                         inc	sp
26059                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26060 69F9           8946         FE            mov	-2[bp],ax
26061                                           !BCC_EOS
26062                                           ! 3595  for(i=0;i<0x100;i++)
26063                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
26064 69FC           31C0                       xor	ax,ax
26065 69FE           8946         FA            mov	-6[bp],ax
26066                                           !BCC_EOS
26067                                           !BCC_EOS
26068                                           ! 3596   {
26069 6A01           EB           3B            jmp .238
26070                       00006A03            .239:
26071                                           ! 3597    src = i * 16;
26072                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
26073 6A03           8B46         FA            mov	ax,-6[bp]
26074 6A06           B1                     04  mov	cl,*4
26075 6A08           D3E0                       shl	ax,cl
26076                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
26077 6A0A           8946         F8            mov	-8[bp],ax
26078                                           !BCC_EOS
26079                                           ! 3598    dest = blockaddr + i * 32;
26080                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
26081 6A0D           8B46         FA            mov	ax,-6[bp]
26082 6A10           B1                     05  mov	cl,*5
26083 6A12           D3E0                       shl	ax,cl
26084                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26085                                           ! Debug: expression subtree swapping
26086 6A14           0346         FE            add	ax,-2[bp]
26087                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
26088 6A17           8946         FC            mov	-4[bp],ax
26089                                           !BCC_EOS
26090                                           ! 3599    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
26091                                           ! Debug: list int = const $10 (used reg = )
26092 6A1A           B8                   0010  mov	ax,*$10
26093 6A1D           50                         push	ax
26094                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
26095 6A1E           8B5E         F8            mov	bx,-8[bp]
26096                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
26097                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
26098 6A21           81C3                 256F  add	bx,#_vgafont16
26099 6A25           53                         push	bx
26100                                           ! Debug: list unsigned int = const $C000 (used reg = )
26101 6A26           B8                   C000  mov	ax,#$C000
26102 6A29           50                         push	ax
26103                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
26104 6A2A           FF76         FC            push	-4[bp]
26105                                           ! Debug: list unsigned int = const $A000 (used reg = )
26106 6A2D           B8                   A000  mov	ax,#$A000
26107 6A30           50                         push	ax
26108                                           ! Debug: func () void = memcpyb+0 (used reg = )
26109 6A31           E8         1286            call	_memcpyb
26110 6A34           83C4                   0A  add	sp,*$A
26111                                           !BCC_EOS
26112                                           ! 3600   }
26113                                           ! 3601  release_font_access();
26114                       00006A37            .237:
26115                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
26116 6A37           8B46         FA            mov	ax,-6[bp]
26117 6A3A           40                         inc	ax
26118 6A3B           8946         FA            mov	-6[bp],ax
26119                       00006A3E            .238:
26120                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
26121 6A3E           8B46         FA            mov	ax,-6[bp]
26122 6A41           3D                   0100  cmp	ax,#$100
26123 6A44           72           BD            jb 	.239
26124                       00006A46            .23A:
26125                       00006A46            .236:
26126                                           ! Debug: func () void = release_font_access+0 (used reg = )
26127 6A46           E8         FC35            call	_release_font_access
26128                                           !BCC_EOS
26129                                           ! 3602  if(AL>=0x10)
26130                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26131 6A49           8A46         04            mov	al,4[bp]
26132 6A4C           3C                     10  cmp	al,*$10
26133 6A4E           72           09            jb  	.23B
26134                       00006A50            .23C:
26135                                           ! 3603   {
26136                                           ! 3604    set_scan_lines(16);
26137                                           ! Debug: list int = const $10 (used reg = )
26138 6A50           B8                   0010  mov	ax,*$10
26139 6A53           50                         push	ax
26140                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26141 6A54           E8         FC5B            call	_set_scan_lines
26142 6A57           44                         inc	sp
26143 6A58           44                         inc	sp
26144                                           !BCC_EOS
26145                                           ! 3605   }
26146                                           ! 3606 }
26147                       00006A59            .23B:
26148 6A59           89EC                       mov	sp,bp
26149 6A5B           5D                         pop	bp
26150 6A5C           C3                         ret
26151                                           ! 3607 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
26152                                           ! Register BX used in function biosfn_load_text_8_16_pat
26153                       00006A5D            _biosfn_load_gfx_8_8_chars:
26154                                           !BCC_EOS
26155                                           !BCC_EOS
26156                                           ! 3608 {
26157                                           ! 3609  unimplemented();
26158 6A5D           55                         push	bp
26159 6A5E           89E5                       mov	bp,sp
26160                                           ! Debug: func () void = unimplemented+0 (used reg = )
26161 6A60           E8         1346            call	_unimplemented
26162                                           !BCC_EOS
26163                                           ! 3610 }
26164 6A63           5D                         pop	bp
26165 6A64           C3                         ret
26166                                           ! 3611 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
26167                       00006A65            _biosfn_load_gfx_user_chars:
26168                                           !BCC_EOS
26169                                           !BCC_EOS
26170                                           !BCC_EOS
26171                                           !BCC_EOS
26172                                           !BCC_EOS
26173                                           ! 3612 {
26174                                           ! 3613  unimplemented();
26175 6A65           55                         push	bp
26176 6A66           89E5                       mov	bp,sp
26177                                           ! Debug: func () void = unimplemented+0 (used reg = )
26178 6A68           E8         133E            call	_unimplemented
26179                                           !BCC_EOS
26180                                           ! 3614 }
26181 6A6B           5D                         pop	bp
26182 6A6C           C3                         ret
26183                                           ! 3615 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
26184                       00006A6D            _biosfn_load_gfx_8_14_chars:
26185                                           !BCC_EOS
26186                                           ! 3616 {
26187                                           ! 3617  unimplemented();
26188 6A6D           55                         push	bp
26189 6A6E           89E5                       mov	bp,sp
26190                                           ! Debug: func () void = unimplemented+0 (used reg = )
26191 6A70           E8         1336            call	_unimplemented
26192                                           !BCC_EOS
26193                                           ! 3618 }
26194 6A73           5D                         pop	bp
26195 6A74           C3                         ret
26196                                           ! 3619 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
26197                       00006A75            _biosfn_load_gfx_8_8_dd_chars:
26198                                           !BCC_EOS
26199                                           ! 3620 {
26200                                           ! 3621  unimplemented();
26201 6A75           55                         push	bp
26202 6A76           89E5                       mov	bp,sp
26203                                           ! Debug: func () void = unimplemented+0 (used reg = )
26204 6A78           E8         132E            call	_unimplemented
26205                                           !BCC_EOS
26206                                           ! 3622 }
26207 6A7B           5D                         pop	bp
26208 6A7C           C3                         ret
26209                                           ! 3623 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
26210                       00006A7D            _biosfn_load_gfx_8_16_chars:
26211                                           !BCC_EOS
26212                                           ! 3624 {
26213                                           ! 3625  unimplemented();
26214 6A7D           55                         push	bp
26215 6A7E           89E5                       mov	bp,sp
26216                                           ! Debug: func () void = unimplemented+0 (used reg = )
26217 6A80           E8         1326            call	_unimplemented
26218                                           !BCC_EOS
26219                                           ! 3626 }
26220 6A83           5D                         pop	bp
26221 6A84           C3                         ret
26222                                           ! 3627 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
26223                                           ! 3628 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
26224                       00006A85            _biosfn_get_font_info:
26225                                           !BCC_EOS
26226                                           !BCC_EOS
26227                                           !BCC_EOS
26228                                           !BCC_EOS
26229                                           !BCC_EOS
26230                                           ! 3629 {Bit16u ss=get_SS();
26231 6A85           55                         push	bp
26232 6A86           89E5                       mov	bp,sp
26233 6A88           4C                         dec	sp
26234 6A89           4C                         dec	sp
26235                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26236 6A8A           E8         1319            call	_get_SS
26237                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26238 6A8D           8946         FE            mov	-2[bp],ax
26239                                           !BCC_EOS
26240                                           ! 3630  switch(BH)
26241 6A90           8A46         04            mov	al,4[bp]
26242                                           ! 3631   {case 0x00:
26243 6A93           E9         0154            br 	.23F
26244                                           ! 3632     write_word(ss,ES,read_word(0x00,0x1f*4));
26245                       00006A96            .240:
26246                                           ! Debug: list int = const $7C (used reg = )
26247 6A96           B8                   007C  mov	ax,*$7C
26248 6A99           50                         push	ax
26249                                           ! Debug: list int = const 0 (used reg = )
26250 6A9A           31C0                       xor	ax,ax
26251 6A9C           50                         push	ax
26252                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26253 6A9D           E8         128D            call	_read_word
26254 6AA0           83C4                   04  add	sp,*4
26255                                           ! Debug: list unsigned short = ax+0 (used reg = )
26256 6AA3           50                         push	ax
26257                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26258 6AA4           FF76         06            push	6[bp]
26259                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26260 6AA7           FF76         FE            push	-2[bp]
26261                                           ! Debug: func () void = write_word+0 (used reg = )
26262 6AAA           E8         12AB            call	_write_word
26263 6AAD           83C4                   06  add	sp,*6
26264                                           !BCC_EOS
26265                                           ! 3633     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26266                                           ! Debug: list int = const $7E (used reg = )
26267 6AB0           B8                   007E  mov	ax,*$7E
26268 6AB3           50                         push	ax
26269                                           ! Debug: list int = const 0 (used reg = )
26270 6AB4           31C0                       xor	ax,ax
26271 6AB6           50                         push	ax
26272                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26273 6AB7           E8         1273            call	_read_word
26274 6ABA           83C4                   04  add	sp,*4
26275                                           ! Debug: list unsigned short = ax+0 (used reg = )
26276 6ABD           50                         push	ax
26277                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26278 6ABE           FF76         08            push	8[bp]
26279                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26280 6AC1           FF76         FE            push	-2[bp]
26281                                           ! Debug: func () void = write_word+0 (used reg = )
26282 6AC4           E8         1291            call	_write_word
26283 6AC7           83C4                   06  add	sp,*6
26284                                           !BCC_EOS
26285                                           ! 3634     break;
26286 6ACA           E9         0142            br 	.23D
26287                                           !BCC_EOS
26288                                           ! 3635    case 0x01:
26289                                           ! 3636     write_word(ss,ES,read_word(0x00,0x43*4));
26290                       00006ACD            .241:
26291                                           ! Debug: list int = const $10C (used reg = )
26292 6ACD           B8                   010C  mov	ax,#$10C
26293 6AD0           50                         push	ax
26294                                           ! Debug: list int = const 0 (used reg = )
26295 6AD1           31C0                       xor	ax,ax
26296 6AD3           50                         push	ax
26297                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26298 6AD4           E8         1256            call	_read_word
26299 6AD7           83C4                   04  add	sp,*4
26300                                           ! Debug: list unsigned short = ax+0 (used reg = )
26301 6ADA           50                         push	ax
26302                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26303 6ADB           FF76         06            push	6[bp]
26304                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26305 6ADE           FF76         FE            push	-2[bp]
26306                                           ! Debug: func () void = write_word+0 (used reg = )
26307 6AE1           E8         1274            call	_write_word
26308 6AE4           83C4                   06  add	sp,*6
26309                                           !BCC_EOS
26310                                           ! 3637     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26311                                           ! Debug: list int = const $10E (used reg = )
26312 6AE7           B8                   010E  mov	ax,#$10E
26313 6AEA           50                         push	ax
26314                                           ! Debug: list int = const 0 (used reg = )
26315 6AEB           31C0                       xor	ax,ax
26316 6AED           50                         push	ax
26317                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26318 6AEE           E8         123C            call	_read_word
26319 6AF1           83C4                   04  add	sp,*4
26320                                           ! Debug: list unsigned short = ax+0 (used reg = )
26321 6AF4           50                         push	ax
26322                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26323 6AF5           FF76         08            push	8[bp]
26324                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26325 6AF8           FF76         FE            push	-2[bp]
26326                                           ! Debug: func () void = write_word+0 (used reg = )
26327 6AFB           E8         125A            call	_write_word
26328 6AFE           83C4                   06  add	sp,*6
26329                                           !BCC_EOS
26330                                           ! 3638     break;
26331 6B01           E9         010B            br 	.23D
26332                                           !BCC_EOS
26333                                           ! 3639    case 0x02:
26334                                           ! 3640     write_word(ss,ES,0xC000);
26335                       00006B04            .242:
26336                                           ! Debug: list unsigned int = const $C000 (used reg = )
26337 6B04           B8                   C000  mov	ax,#$C000
26338 6B07           50                         push	ax
26339                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26340 6B08           FF76         06            push	6[bp]
26341                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26342 6B0B           FF76         FE            push	-2[bp]
26343                                           ! Debug: func () void = write_word+0 (used reg = )
26344 6B0E           E8         1247            call	_write_word
26345 6B11           83C4                   06  add	sp,*6
26346                                           !BCC_EOS
26347                                           ! 3641     write_word(ss,BP,vgafont14);
26348                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26349 6B14           BB                   176F  mov	bx,#_vgafont14
26350 6B17           53                         push	bx
26351                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26352 6B18           FF76         08            push	8[bp]
26353                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26354 6B1B           FF76         FE            push	-2[bp]
26355                                           ! Debug: func () void = write_word+0 (used reg = )
26356 6B1E           E8         1237            call	_write_word
26357 6B21           83C4                   06  add	sp,*6
26358                                           !BCC_EOS
26359                                           ! 3642     break;
26360 6B24           E9         00E8            br 	.23D
26361                                           !BCC_EOS
26362                                           ! 3643    case 0x03:
26363                                           ! 3644     write_word(ss,ES,0xC000);
26364                       00006B27            .243:
26365                                           ! Debug: list unsigned int = const $C000 (used reg = )
26366 6B27           B8                   C000  mov	ax,#$C000
26367 6B2A           50                         push	ax
26368                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26369 6B2B           FF76         06            push	6[bp]
26370                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26371 6B2E           FF76         FE            push	-2[bp]
26372                                           ! Debug: func () void = write_word+0 (used reg = )
26373 6B31           E8         1224            call	_write_word
26374 6B34           83C4                   06  add	sp,*6
26375                                           !BCC_EOS
26376                                           ! 3645     write_word(ss,BP,vgafont8);
26377                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26378 6B37           BB                   0F6F  mov	bx,#_vgafont8
26379 6B3A           53                         push	bx
26380                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26381 6B3B           FF76         08            push	8[bp]
26382                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26383 6B3E           FF76         FE            push	-2[bp]
26384                                           ! Debug: func () void = write_word+0 (used reg = )
26385 6B41           E8         1214            call	_write_word
26386 6B44           83C4                   06  add	sp,*6
26387                                           !BCC_EOS
26388                                           ! 3646     break;
26389 6B47           E9         00C5            br 	.23D
26390                                           !BCC_EOS
26391                                           ! 3647    case 0x04:
26392                                           ! 3648     write_word(ss,ES,0xC000);
26393                       00006B4A            .244:
26394                                           ! Debug: list unsigned int = const $C000 (used reg = )
26395 6B4A           B8                   C000  mov	ax,#$C000
26396 6B4D           50                         push	ax
26397                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26398 6B4E           FF76         06            push	6[bp]
26399                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26400 6B51           FF76         FE            push	-2[bp]
26401                                           ! Debug: func () void = write_word+0 (used reg = )
26402 6B54           E8         1201            call	_write_word
26403 6B57           83C4                   06  add	sp,*6
26404                                           !BCC_EOS
26405                                           ! 3649     write_word(ss,BP,vgafont8+128*8);
26406                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26407 6B5A           BB                   136F  mov	bx,#_vgafont8+$400
26408 6B5D           53                         push	bx
26409                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26410 6B5E           FF76         08            push	8[bp]
26411                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26412 6B61           FF76         FE            push	-2[bp]
26413                                           ! Debug: func () void = write_word+0 (used reg = )
26414 6B64           E8         11F1            call	_write_word
26415 6B67           83C4                   06  add	sp,*6
26416                                           !BCC_EOS
26417                                           ! 3650     break;
26418 6B6A           E9         00A2            br 	.23D
26419                                           !BCC_EOS
26420                                           ! 3651    case 0x05:
26421                                           ! 3652     write_word(ss,ES,0xC000);
26422                       00006B6D            .245:
26423                                           ! Debug: list unsigned int = const $C000 (used reg = )
26424 6B6D           B8                   C000  mov	ax,#$C000
26425 6B70           50                         push	ax
26426                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26427 6B71           FF76         06            push	6[bp]
26428                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26429 6B74           FF76         FE            push	-2[bp]
26430                                           ! Debug: func () void = write_word+0 (used reg = )
26431 6B77           E8         11DE            call	_write_word
26432 6B7A           83C4                   06  add	sp,*6
26433                                           !BCC_EOS
26434                                           ! 3653     write_word(ss,BP,vgafont14alt);
26435                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26436 6B7D           BB                   356F  mov	bx,#_vgafont14alt
26437 6B80           53                         push	bx
26438                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26439 6B81           FF76         08            push	8[bp]
26440                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26441 6B84           FF76         FE            push	-2[bp]
26442                                           ! Debug: func () void = write_word+0 (used reg = )
26443 6B87           E8         11CE            call	_write_word
26444 6B8A           83C4                   06  add	sp,*6
26445                                           !BCC_EOS
26446                                           ! 3654     break;
26447 6B8D           E9         007F            jmp .23D
26448                                           !BCC_EOS
26449                                           ! 3655    case 0x06:
26450                                           ! 3656     write_word(ss,ES,0xC000);
26451                       00006B90            .246:
26452                                           ! Debug: list unsigned int = const $C000 (used reg = )
26453 6B90           B8                   C000  mov	ax,#$C000
26454 6B93           50                         push	ax
26455                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26456 6B94           FF76         06            push	6[bp]
26457                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26458 6B97           FF76         FE            push	-2[bp]
26459                                           ! Debug: func () void = write_word+0 (used reg = )
26460 6B9A           E8         11BB            call	_write_word
26461 6B9D           83C4                   06  add	sp,*6
26462                                           !BCC_EOS
26463                                           ! 3657     write_word(ss,BP,vgafont16);
26464                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26465 6BA0           BB                   256F  mov	bx,#_vgafont16
26466 6BA3           53                         push	bx
26467                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26468 6BA4           FF76         08            push	8[bp]
26469                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26470 6BA7           FF76         FE            push	-2[bp]
26471                                           ! Debug: func () void = write_word+0 (used reg = )
26472 6BAA           E8         11AB            call	_write_word
26473 6BAD           83C4                   06  add	sp,*6
26474                                           !BCC_EOS
26475                                           ! 3658     break;
26476 6BB0           EB           5D            jmp .23D
26477                                           !BCC_EOS
26478                                           ! 3659    case 0x07:
26479                                           ! 3660     write_word(ss,ES,0xC000);
26480                       00006BB2            .247:
26481                                           ! Debug: list unsigned int = const $C000 (used reg = )
26482 6BB2           B8                   C000  mov	ax,#$C000
26483 6BB5           50                         push	ax
26484                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26485 6BB6           FF76         06            push	6[bp]
26486                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26487 6BB9           FF76         FE            push	-2[bp]
26488                                           ! Debug: func () void = write_word+0 (used reg = )
26489 6BBC           E8         1199            call	_write_word
26490 6BBF           83C4                   06  add	sp,*6
26491                                           !BCC_EOS
26492                                           ! 3661     write_word(ss,BP,vgafont16alt);
26493                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26494 6BC2           BB                   3570  mov	bx,#_vgafont16alt
26495 6BC5           53                         push	bx
26496                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26497 6BC6           FF76         08            push	8[bp]
26498                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26499 6BC9           FF76         FE            push	-2[bp]
26500                                           ! Debug: func () void = write_word+0 (used reg = )
26501 6BCC           E8         1189            call	_write_word
26502 6BCF           83C4                   06  add	sp,*6
26503                                           !BCC_EOS
26504                                           ! 3662     break;
26505 6BD2           EB           3B            jmp .23D
26506                                           !BCC_EOS
26507                                           ! 3663    default:
26508                                           ! 3664      printf("Get font info BH(%02x) was discarded\n",BH);
26509                       00006BD4            .248:
26510                                           ! Debug: list unsigned char BH = [S+4+2] (used reg = )
26511 6BD4           8A46         04            mov	al,4[bp]
26512 6BD7           30E4                       xor	ah,ah
26513 6BD9           50                         push	ax
26514                                           ! Debug: list * char = .249+0 (used reg = )
26515 6BDA           BB                   A04C  mov	bx,#.249
26516 6BDD           53                         push	bx
26517                                           ! Debug: func () void = printf+0 (used reg = )
26518 6BDE           E8         11E4            call	_printf
26519 6BE1           83C4                   04  add	sp,*4
26520                                           !BCC_EOS
26521                                           ! 3665     return;
26522 6BE4           89EC                       mov	sp,bp
26523 6BE6           5D                         pop	bp
26524 6BE7           C3                         ret
26525                                           !BCC_EOS
26526                                           ! 3666   }
26527                                           ! 3667  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26528 6BE8           EB           25            jmp .23D
26529                       00006BEA            .23F:
26530 6BEA           2C                     00  sub	al,*0
26531 6BEC           72           E6            jb 	.248
26532 6BEE           3C                     07  cmp	al,*7
26533 6BF0           77           1B            ja  	.24A
26534 6BF2           30E4                       xor	ah,ah
26535 6BF4           D1E0                       shl	ax,*1
26536 6BF6           89C3                       mov	bx,ax
26537 6BF8           2E                         seg	cs
26538 6BF9           FFA7       6BFD            br	.24B[bx]
26539                       00006BFD            .24B:
26540 6BFD                      6A96            .word	.240
26541 6BFF                      6ACD            .word	.241
26542 6C01                      6B04            .word	.242
26543 6C03                      6B27            .word	.243
26544 6C05                      6B4A            .word	.244
26545 6C07                      6B6D            .word	.245
26546 6C09                      6B90            .word	.246
26547 6C0B                      6BB2            .word	.247
26548                       00006C0D            .24A:
26549 6C0D           EB           C5            jmp	.248
26550                       00006C0F            .23D:
26551                       FFFFFFFC            ..FFF5	=	-4
26552                                           ! Debug: list int = const $85 (used reg = )
26553 6C0F           B8                   0085  mov	ax,#$85
26554 6C12           50                         push	ax
26555                                           ! Debug: list int = const $40 (used reg = )
26556 6C13           B8                   0040  mov	ax,*$40
26557 6C16           50                         push	ax
26558                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26559 6C17           E8         1100            call	_read_byte
26560 6C1A           83C4                   04  add	sp,*4
26561                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26562 6C1D           30E4                       xor	ah,ah
26563                                           ! Debug: list unsigned short = ax+0 (used reg = )
26564 6C1F           50                         push	ax
26565                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26566 6C20           FF76         0A            push	$A[bp]
26567                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26568 6C23           FF76         FE            push	-2[bp]
26569                                           ! Debug: func () void = write_word+0 (used reg = )
26570 6C26           E8         112F            call	_write_word
26571 6C29           83C4                   06  add	sp,*6
26572                                           !BCC_EOS
26573                                           ! 3668  write_word(ss,DX,(Bit16u)read_byte(0x4
26574                                           ! 3668 0,0x84));
26575                                           ! Debug: list int = const $84 (used reg = )
26576 6C2C           B8                   0084  mov	ax,#$84
26577 6C2F           50                         push	ax
26578                                           ! Debug: list int = const $40 (used reg = )
26579 6C30           B8                   0040  mov	ax,*$40
26580 6C33           50                         push	ax
26581                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26582 6C34           E8         10E3            call	_read_byte
26583 6C37           83C4                   04  add	sp,*4
26584                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26585 6C3A           30E4                       xor	ah,ah
26586                                           ! Debug: list unsigned short = ax+0 (used reg = )
26587 6C3C           50                         push	ax
26588                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26589 6C3D           FF76         0C            push	$C[bp]
26590                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26591 6C40           FF76         FE            push	-2[bp]
26592                                           ! Debug: func () void = write_word+0 (used reg = )
26593 6C43           E8         1112            call	_write_word
26594 6C46           83C4                   06  add	sp,*6
26595                                           !BCC_EOS
26596                                           ! 3669 }
26597 6C49           89EC                       mov	sp,bp
26598 6C4B           5D                         pop	bp
26599 6C4C           C3                         ret
26600                                           ! 3670 #asm
26601                                           !BCC_ASM
26602                       00000006            _biosfn_get_font_info.BP	set	6
26603                       00000002            _biosfn_get_font_info.BH	set	2
26604                       00000008            _biosfn_get_font_info.CX	set	8
26605                       0000000A            _biosfn_get_font_info.DX	set	$A
26606                       00000004            _biosfn_get_font_info.ES	set	4
26607                       00006C4D            biosfn_get_ega_info:
26608 6C4D           1E                           push ds
26609 6C4E           50                           push ax
26610 6C4F           B8                   0040    mov ax, # 0x40
26611 6C52           8ED8                         mov ds, ax
26612 6C54           30ED                         xor ch, ch
26613 6C56           BB                   0088    mov bx, # 0x88
26614 6C59           8A0F                         mov cl, [bx]
26615 6C5B           80E1                   0F    and cl, #0x0f
26616 6C5E           BB                   0063    mov bx, # 0x63
26617 6C61           8B07                         mov ax, [bx]
26618 6C63           BB                   0003    mov bx, #0x0003
26619 6C66           3D                   03B4    cmp ax, # 0x3b4
26620 6C69           75           02              jne mode_ega_color
26621 6C6B           B7                     01    mov bh, #0x01
26622                       00006C6D            mode_ega_color:
26623 6C6D           58                           pop ax
26624 6C6E           1F                           pop ds
26625 6C6F           C3                           ret
26626                                           ! 3690 endasm
26627                                           !BCC_ENDASM
26628                                           ! 3691 static void biosfn_alternate_prtsc()
26629                                           ! Register BX used in function biosfn_get_font_info
26630                                           ! 3692 {
26631                       00006C70            _biosfn_alternate_prtsc:
26632                                           ! 3693  unimplemented();
26633 6C70           55                         push	bp
26634 6C71           89E5                       mov	bp,sp
26635                                           ! Debug: func () void = unimplemented+0 (used reg = )
26636 6C73           E8         1133            call	_unimplemented
26637                                           !BCC_EOS
26638                                           ! 3694 }
26639 6C76           5D                         pop	bp
26640 6C77           C3                         ret
26641                                           ! 3695 #asm
26642                                           !BCC_ASM
26643                       00006C78            biosfn_select_vert_res:
26644                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26645 6C78           1E                           push ds
26646 6C79           53                           push bx
26647 6C7A           52                           push dx
26648 6C7B           88C2                         mov dl, al
26649 6C7D           B8                   0040    mov ax, # 0x40
26650 6C80           8ED8                         mov ds, ax
26651 6C82           BB                   0089    mov bx, # 0x89
26652 6C85           8A07                         mov al, [bx]
26653 6C87           BB                   0088    mov bx, # 0x88
26654 6C8A           8A27                         mov ah, [bx]
26655 6C8C           80FA                   01    cmp dl, #0x01
26656 6C8F           74           24              je vert_res_350
26657 6C91           72           2C              jb vert_res_200
26658 6C93           80FA                   02    cmp dl, #0x02
26659 6C96           74           11              je vert_res_400
26660 6C98           88D0                         mov al, dl
26661 6C9A           30E4                         xor ah, ah
26662 6C9C           50                           push ax
26663 6C9D           BB                   6CDA    mov bx, #msg_vert_res
26664 6CA0           53                           push bx
26665 6CA1           E8         1121              call _printf
26666 6CA4           83C4                   04    add sp, #4
26667 6CA7           EB           2A              jmp set_retcode
26668                       00006CA9            vert_res_400:
26669                                             ; reset modeset ctl bit 7 and set bit 4
26670                                             ; set switches bit 3-0 to 0x09
26671 6CA9           24                     7F    and al, #0x7f
26672 6CAB           0C                     10    or al, #0x10
26673 6CAD           80E4                   F0    and ah, #0xf0
26674 6CB0           80CC                   09    or ah, #0x09
26675 6CB3           75           14              jnz set_vert_res
26676                       00006CB5            vert_res_350:
26677                                             ; reset modeset ctl bit 7 and bit 4
26678                                             ; set switches bit 3-0 to 0x09
26679 6CB5           24                     6F    and al, #0x6f
26680 6CB7           80E4                   F0    and ah, #0xf0
26681 6CBA           80CC                   09    or ah, #0x09
26682 6CBD           75           0A              jnz set_vert_res
26683                       00006CBF            vert_res_200:
26684                                             ; set modeset ctl bit 7 and reset bit 4
26685                                             ; set switches bit 3-0 to 0x08
26686 6CBF           24                     EF    and al, #0xef
26687 6CC1           0C                     80    or al, #0x80
26688 6CC3           80E4                   F0    and ah, #0xf0
26689 6CC6           80CC                   08    or ah, #0x08
26690                       00006CC9            set_vert_res:
26691 6CC9           BB                   0089    mov bx, # 0x89
26692 6CCC           8807                         mov [bx], al
26693 6CCE           BB                   0088    mov bx, # 0x88
26694 6CD1           8827                         mov [bx], ah
26695                       00006CD3            set_retcode:
26696 6CD3           B8                   1212    mov ax, #0x1212
26697 6CD6           5A                           pop dx
26698 6CD7           5B                           pop bx
26699 6CD8           1F                           pop ds
26700 6CD9           C3                           ret
26701                       00006CDA            msg_vert_res:
26702 6CDA                        53            .ascii "Select vert res (%02x) was discarded"
26703 6CFE                        0D            .byte 0x0d,0x0a,0x00
26704                       00006D01            biosfn_enable_default_palette_loading:
26705 6D01           1E                           push ds
26706 6D02           53                           push bx
26707 6D03           52                           push dx
26708 6D04           88C2                         mov dl, al
26709 6D06           80E2                   01    and dl, #0x01
26710 6D09           C0E2                   03    shl dl, 3
26711 6D0C           B8                   0040    mov ax, # 0x40
26712 6D0F           8ED8                         mov ds, ax
26713 6D11           BB                   0089    mov bx, # 0x89
26714 6D14           8A07                         mov al, [bx]
26715 6D16           24                     F7    and al, #0xf7
26716 6D18           08D0                         or al, dl
26717 6D1A           8807                         mov [bx], al
26718 6D1C           B8                   1212    mov ax, #0x1212
26719 6D1F           5A                           pop dx
26720 6D20           5B                           pop bx
26721 6D21           1F                           pop ds
26722 6D22           C3                           ret
26723                       00006D23            biosfn_enable_video_addressing:
26724 6D23           53                           push bx
26725 6D24           52                           push dx
26726 6D25           88C3                         mov bl, al
26727 6D27           80E3                   01    and bl, #0x01
26728 6D2A           80F3                   01    xor bl, #0x01
26729 6D2D           D0E3                         shl bl, 1
26730 6D2F           BA                   03CC    mov dx, # 0x3cc
26731 6D32           EC                           in al, dx
26732 6D33           24                     FD    and al, #0xfd
26733 6D35           08D8                         or al, bl
26734 6D37           BA                   03C2    mov dx, # 0x3c2
26735 6D3A           EE                           out dx, al
26736 6D3B           B8                   1212    mov ax, #0x1212
26737 6D3E           5A                           pop dx
26738 6D3F           5B                           pop bx
26739 6D40           C3                           ret
26740                       00006D41            biosfn_enable_grayscale_summing:
26741 6D41           1E                           push ds
26742 6D42           53                           push bx
26743 6D43           52                           push dx
26744 6D44           88C2                         mov dl, al
26745 6D46           80E2                   01    and dl, #0x01
26746 6D49           80F2                   01    xor dl, #0x01
26747 6D4C           D0E2                         shl dl, 1
26748 6D4E           B8                   0040    mov ax, # 0x40
26749 6D51           8ED8                         mov ds, ax
26750 6D53           BB                   0089    mov bx, # 0x89
26751 6D56           8A07                         mov al, [bx]
26752 6D58           24                     FD    and al, #0xfd
26753 6D5A           08D0                         or al, dl
26754 6D5C           8807                         mov [bx], al
26755 6D5E           B8                   1212    mov ax, #0x1212
26756 6D61           5A                           pop dx
26757 6D62           5B                           pop bx
26758 6D63           1F                           pop ds
26759 6D64           C3                           ret
26760                       00006D65            biosfn_enable_cursor_emulation:
26761 6D65           1E                           push ds
26762 6D66           53                           push bx
26763 6D67           52                           push dx
26764 6D68           88C2                         mov dl, al
26765 6D6A           80E2                   01    and dl, #0x01
26766 6D6D           80F2                   01    xor dl, #0x01
26767 6D70           B8                   0040    mov ax, # 0x40
26768 6D73           8ED8                         mov ds, ax
26769 6D75           BB                   0089    mov bx, # 0x89
26770 6D78           8A07                         mov al, [bx]
26771 6D7A           24                     FE    and al, #0xfe
26772 6D7C           08D0                         or al, dl
26773 6D7E           8807                         mov [bx], al
26774 6D80           B8                   1212    mov ax, #0x1212
26775 6D83           5A                           pop dx
26776 6D84           5B                           pop bx
26777 6D85           1F                           pop ds
26778 6D86           C3                           ret
26779                                           ! 3832 endasm
26780                                           !BCC_ENDASM
26781                                           ! 3833 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26782                       00006D87            _biosfn_switch_video_interface:
26783                                           !BCC_EOS
26784                                           !BCC_EOS
26785                                           !BCC_EOS
26786                                           ! 3834 {
26787                                           ! 3835  unimplemented();
26788 6D87           55                         push	bp
26789 6D88           89E5                       mov	bp,sp
26790                                           ! Debug: func () void = unimplemented+0 (used reg = )
26791 6D8A           E8         101C            call	_unimplemented
26792                                           !BCC_EOS
26793                                           ! 3836 }
26794 6D8D           5D                         pop	bp
26795 6D8E           C3                         ret
26796                                           ! 3837 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26797                       00006D8F            _biosfn_enable_video_refresh_control:
26798                                           !BCC_EOS
26799                                           ! 3838 {
26800                                           ! 3839  unimplemented();
26801 6D8F           55                         push	bp
26802 6D90           89E5                       mov	bp,sp
26803                                           ! Debug: func () void = unimplemented+0 (used reg = )
26804 6D92           E8         1014            call	_unimplemented
26805                                           !BCC_EOS
26806                                           ! 3840 }
26807 6D95           5D                         pop	bp
26808 6D96           C3                         ret
26809                                           ! 3841 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26810                                           ! 3842 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26811                       00006D97            _biosfn_write_string:
26812                                           !BCC_EOS
26813                                           !BCC_EOS
26814                                           !BCC_EOS
26815                                           !BCC_EOS
26816                                           !BCC_EOS
26817                                           !BCC_EOS
26818                                           !BCC_EOS
26819                                           !BCC_EOS
26820                                           ! 3843 {
26821                                           ! 3844  Bit16u newcurs,oldcurs,dummy;
26822                                           !BCC_EOS
26823                                           ! 3845  Bit8u car,carattr;
26824                                           !BCC_EOS
26825                                           ! 3846  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26826 6D97           55                         push	bp
26827 6D98           89E5                       mov	bp,sp
26828 6D9A           83C4                   F8  add	sp,*-8
26829                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26830 6D9D           8D5E         FC            lea	bx,-4[bp]
26831 6DA0           53                         push	bx
26832                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26833 6DA1           8D5E         FA            lea	bx,-6[bp]
26834 6DA4           53                         push	bx
26835                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26836 6DA5           8A46         06            mov	al,6[bp]
26837 6DA8           30E4                       xor	ah,ah
26838 6DAA           50                         push	ax
26839                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26840 6DAB           E8         D70F            call	_biosfn_get_cursor_pos
26841 6DAE           83C4                   06  add	sp,*6
26842                                           !BCC_EOS
26843                                           ! 3847  if(row==0xff)
26844                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26845 6DB1           8A46         0C            mov	al,$C[bp]
26846 6DB4           3C                     FF  cmp	al,#$FF
26847 6DB6           75           12            jne 	.24C
26848                       00006DB8            .24D:
26849                                           ! 3848   {col=oldcurs&0x00ff;
26850                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26851 6DB8           8A46         FC            mov	al,-4[bp]
26852                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26853 6DBB           8846         0E            mov	$E[bp],al
26854                                           !BCC_EOS
26855                                           ! 3849    row=(oldcurs&0xff00)>>8;
26856                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26857 6DBE           8B46         FC            mov	ax,-4[bp]
26858 6DC1           30C0                       xor	al,al
26859                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26860 6DC3           88E0                       mov	al,ah
26861 6DC5           30E4                       xor	ah,ah
26862                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26863 6DC7           8846         0C            mov	$C[bp],al
26864                                           !BCC_EOS
26865                                           ! 3850   }
26866                                           ! 3851  newcurs=row; newcurs<<=8; newcurs+=col;
26867                       00006DCA            .24C:
26868                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26869 6DCA           8A46         0C            mov	al,$C[bp]
26870 6DCD           30E4                       xor	ah,ah
26871 6DCF           8946         FE            mov	-2[bp],ax
26872                                           !BCC_EOS
26873                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26874 6DD2           8B46         FE            mov	ax,-2[bp]
26875 6DD5           88C4                       mov	ah,al
26876 6DD7           30C0                       xor	al,al
26877 6DD9           8946         FE            mov	-2[bp],ax
26878                                           !BCC_EOS
26879                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26880 6DDC           8B46         FE            mov	ax,-2[bp]
26881 6DDF           0246         0E            add	al,$E[bp]
26882 6DE2           80D4                   00  adc	ah,*0
26883 6DE5           8946         FE            mov	-2[bp],ax
26884                                           !BCC_EOS
26885                                           ! 3852  biosfn_set_cursor_pos(page,newcurs);
26886                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26887 6DE8           FF76         FE            push	-2[bp]
26888                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26889 6DEB           8A46         06            mov	al,6[bp]
26890 6DEE           30E4                       xor	ah,ah
26891 6DF0           50                         push	ax
26892                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26893 6DF1           E8         D5C9            call	_biosfn_set_cursor_pos
26894 6DF4           83C4                   04  add	sp,*4
26895                                           !BCC_EOS
26896                                           ! 3853  while(count--!=0)
26897                                           ! 3854   {
26898 6DF7           EB           4F            jmp .24F
26899                       00006DF9            .250:
26900                                           ! 3855    car=read_byte(seg,offset++);
26901                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26902 6DF9           8B46         12            mov	ax,$12[bp]
26903 6DFC           40                         inc	ax
26904 6DFD           8946         12            mov	$12[bp],ax
26905                                           ! Debug: list unsigned short = ax-1 (used reg = )
26906 6E00           48                         dec	ax
26907 6E01           50                         push	ax
26908                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26909 6E02           FF76         10            push	$10[bp]
26910                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26911 6E05           E8         0F12            call	_read_byte
26912 6E08           83C4                   04  add	sp,*4
26913                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26914 6E0B           8846         F9            mov	-7[bp],al
26915                                           !BCC_EOS
26916                                           ! 3856    if((flag&0x02)!=0)
26917                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26918 6E0E           8A46         04            mov	al,4[bp]
26919 6E11           24                     02  and	al,*2
26920                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26921 6E13           84C0                       test	al,al
26922 6E15           74           15            je  	.251
26923                       00006E17            .252:
26924                                           ! 3857     attr=read_byte(seg,offset++);
26925                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26926 6E17           8B46         12            mov	ax,$12[bp]
26927 6E1A           40                         inc	ax
26928 6E1B           8946         12            mov	$12[bp],ax
26929                                           ! Debug: list unsigned short = ax-1 (used reg = )
26930 6E1E           48                         dec	ax
26931 6E1F           50                         push	ax
26932                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26933 6E20           FF76         10            push	$10[bp]
26934                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26935 6E23           E8         0EF4            call	_read_byte
26936 6E26           83C4                   04  add	sp,*4
26937                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26938 6E29           8846         08            mov	8[bp],al
26939                                           !BCC_EOS
26940                                           ! 3858    biosfn_write_teletype(car,page,attr,3);
26941                       00006E2C            .251:
26942                                           ! Debug: list int = const 3 (used reg = )
26943 6E2C           B8                   0003  mov	ax,*3
26944 6E2F           50                         push	ax
26945                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26946 6E30           8A46         08            mov	al,8[bp]
26947 6E33           30E4                       xor	ah,ah
26948 6E35           50                         push	ax
26949                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26950 6E36           8A46         06            mov	al,6[bp]
26951 6E39           30E4                       xor	ah,ah
26952 6E3B           50                         push	ax
26953                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26954 6E3C           8A46         F9            mov	al,-7[bp]
26955 6E3F           30E4                       xor	ah,ah
26956 6E41           50                         push	ax
26957                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26958 6E42           E8         F110            call	_biosfn_write_teletype
26959 6E45           83C4                   08  add	sp,*8
26960                                           !BCC_EOS
26961                                           ! 3859   }
26962                                           ! 3860  if((flag&0x01)==0)
26963                       00006E48            .24F:
26964                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26965 6E48           8B46         0A            mov	ax,$A[bp]
26966 6E4B           48                         dec	ax
26967 6E4C           8946         0A            mov	$A[bp],ax
26968                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26969 6E4F           3D                   FFFF  cmp	ax,*-1
26970 6E52           75           A5            jne	.250
26971                       00006E54            .253:
26972                       00006E54            .24E:
26973                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26974 6E54           8A46         04            mov	al,4[bp]
26975 6E57           24                     01  and	al,*1
26976                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26977 6E59           84C0                       test	al,al
26978 6E5B           75           0F            jne 	.254
26979                       00006E5D            .255:
26980                                           ! 3861   biosfn_set_cursor_pos(page,oldcurs);
26981                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26982 6E5D           FF76         FC            push	-4[bp]
26983                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26984 6E60           8A46         06            mov	al,6[bp]
26985 6E63           30E4                       xor	ah,ah
26986 6E65           50                         push	ax
26987                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26988 6E66           E8         D554            call	_biosfn_set_cursor_pos
26989 6E69           83C4                   04  add	sp,*4
26990                                           !BCC_EOS
26991                                           ! 3862 }
26992                       00006E6C            .254:
26993 6E6C           89EC                       mov	sp,bp
26994 6E6E           5D                         pop	bp
26995 6E6F           C3                         ret
26996                                           ! 3863 #asm
26997                                           !BCC_ASM
26998                       00000008            _biosfn_write_string.count	set	8
26999                       0000000E            _biosfn_write_string.seg	set	$E
27000                       0000000C            _biosfn_write_string.col	set	$C
27001                       00000002            _biosfn_write_string.flag	set	2
27002                       00000006            _biosfn_write_string.attr	set	6
27003                       00000004            _biosfn_write_string.page	set	4
27004                       0000000A            _biosfn_write_string.row	set	$A
27005                       00000010            _biosfn_write_string.offset	set	$10
27006                       00006E70            biosfn_group_1A:
27007 6E70           3C                     00    cmp al, #0x00
27008 6E72           74           08              je biosfn_read_display_code
27009 6E74           3C                     01    cmp al, #0x01
27010 6E76           74           19              je biosfn_set_display_code
27011 6E78           E8         0F3C              call _unknown
27012 6E7B           C3                           ret
27013                       00006E7C            biosfn_read_display_code:
27014 6E7C           1E                           push ds
27015 6E7D           50                           push ax
27016 6E7E           B8                   0040    mov ax, # 0x40
27017 6E81           8ED8                         mov ds, ax
27018 6E83           BB                   008A    mov bx, # 0x8A
27019 6E86           8A07                         mov al, [bx]
27020 6E88           88C3                         mov bl, al
27021 6E8A           30FF                         xor bh, bh
27022 6E8C           58                           pop ax
27023 6E8D           88E0                         mov al, ah
27024 6E8F           1F                           pop ds
27025 6E90           C3                           ret
27026                       00006E91            biosfn_set_display_code:
27027 6E91           1E                           push ds
27028 6E92           50                           push ax
27029 6E93           53                           push bx
27030 6E94           B8                   0040    mov ax, # 0x40
27031 6E97           8ED8                         mov ds, ax
27032 6E99           89D8                         mov ax, bx
27033 6E9B           BB                   008A    mov bx, # 0x8A
27034 6E9E           8807                         mov [bx], al
27035 6EA0           88E0                         mov al, ah
27036 6EA2           30E4                         xor ah, ah
27037 6EA4           50                           push ax
27038 6EA5           BB                   6EB5    mov bx, #msg_alt_dcc
27039 6EA8           53                           push bx
27040 6EA9           E8         0F19              call _printf
27041 6EAC           83C4                   04    add sp, #4
27042 6EAF           5B                           pop bx
27043 6EB0           58                           pop ax
27044 6EB1           88E0                         mov al, ah
27045 6EB3           1F                           pop ds
27046 6EB4           C3                           ret
27047                       00006EB5            msg_alt_dcc:
27048 6EB5                        41            .ascii "Alternate Display code (%02x) was discarded"
27049 6EE0                        0D            .byte 0x0d,0x0a,0x00
27050                                           ! 3908 endasm
27051                                           !BCC_ENDASM
27052                                           ! 3909 static void biosfn_read_state_info (BX,ES,DI)
27053                                           ! Register BX used in function biosfn_write_string
27054                                           ! 3910 Bit16u BX;Bit16u ES;Bit16u 
27055                       00006EE3            _biosfn_read_state_info:
27056                                           !BCC_EOS
27057                                           !BCC_EOS
27058                                           ! 3910 DI;
27059                                           !BCC_EOS
27060                                           ! 3911 {
27061                                           ! 3912  write_word(ES,DI+0x00,&static_functionality);
27062 6EE3           55                         push	bp
27063 6EE4           89E5                       mov	bp,sp
27064                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
27065 6EE6           BB                   0F5F  mov	bx,#_static_functionality
27066 6EE9           53                         push	bx
27067                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
27068 6EEA           8B46         08            mov	ax,8[bp]
27069                                           ! Debug: list unsigned int = ax+0 (used reg = )
27070 6EED           50                         push	ax
27071                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27072 6EEE           FF76         06            push	6[bp]
27073                                           ! Debug: func () void = write_word+0 (used reg = )
27074 6EF1           E8         0E64            call	_write_word
27075 6EF4           89EC                       mov	sp,bp
27076                                           !BCC_EOS
27077                                           ! 3913  write_word(ES,DI+0x02,0xC000);
27078                                           ! Debug: list unsigned int = const $C000 (used reg = )
27079 6EF6           B8                   C000  mov	ax,#$C000
27080 6EF9           50                         push	ax
27081                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
27082 6EFA           8B46         08            mov	ax,8[bp]
27083                                           ! Debug: list unsigned int = ax+2 (used reg = )
27084 6EFD           40                         inc	ax
27085 6EFE           40                         inc	ax
27086 6EFF           50                         push	ax
27087                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27088 6F00           FF76         06            push	6[bp]
27089                                           ! Debug: func () void = write_word+0 (used reg = )
27090 6F03           E8         0E52            call	_write_word
27091 6F06           89EC                       mov	sp,bp
27092                                           !BCC_EOS
27093                                           ! 3914  memcpyb(ES,DI+0x04,0x40,0x49,30);
27094                                           ! Debug: list int = const $1E (used reg = )
27095 6F08           B8                   001E  mov	ax,*$1E
27096 6F0B           50                         push	ax
27097                                           ! Debug: list int = const $49 (used reg = )
27098 6F0C           B8                   0049  mov	ax,*$49
27099 6F0F           50                         push	ax
27100                                           ! Debug: list int = const $40 (used reg = )
27101 6F10           B8                   0040  mov	ax,*$40
27102 6F13           50                         push	ax
27103                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
27104 6F14           8B46         08            mov	ax,8[bp]
27105                                           ! Debug: list unsigned int = ax+4 (used reg = )
27106 6F17           05                   0004  add	ax,*4
27107 6F1A           50                         push	ax
27108                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27109 6F1B           FF76         06            push	6[bp]
27110                                           ! Debug: func () void = memcpyb+0 (used reg = )
27111 6F1E           E8         0D99            call	_memcpyb
27112 6F21           89EC                       mov	sp,bp
27113                                           !BCC_EOS
27114                                           ! 3915  memcpyb(ES,DI+0x22,0x40,0x84,3);
27115                                           ! Debug: list int = const 3 (used reg = )
27116 6F23           B8                   0003  mov	ax,*3
27117 6F26           50                         push	ax
27118                                           ! Debug: list int = const $84 (used reg = )
27119 6F27           B8                   0084  mov	ax,#$84
27120 6F2A           50                         push	ax
27121                                           ! Debug: list int = const $40 (used reg = )
27122 6F2B           B8                   0040  mov	ax,*$40
27123 6F2E           50                         push	ax
27124                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
27125 6F2F           8B46         08            mov	ax,8[bp]
27126                                           ! Debug: list unsigned int = ax+$22 (used reg = )
27127 6F32           05                   0022  add	ax,*$22
27128 6F35           50                         push	ax
27129                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27130 6F36           FF76         06            push	6[bp]
27131                                           ! Debug: func () void = memcpyb+0 (used reg = )
27132 6F39           E8         0D7E            call	_memcpyb
27133 6F3C           89EC                       mov	sp,bp
27134                                           !BCC_EOS
27135                                           ! 3916  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
27136                                           ! Debug: list int = const $8A (used reg = )
27137 6F3E           B8                   008A  mov	ax,#$8A
27138 6F41           50                         push	ax
27139                                           ! Debug: list int = const $40 (used reg = )
27140 6F42           B8                   0040  mov	ax,*$40
27141 6F45           50                         push	ax
27142                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27143 6F46           E8         0DD1            call	_read_byte
27144 6F49           89EC                       mov	sp,bp
27145                                           ! Debug: list unsigned char = al+0 (used reg = )
27146 6F4B           30E4                       xor	ah,ah
27147 6F4D           50                         push	ax
27148                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
27149 6F4E           8B46         08            mov	ax,8[bp]
27150                                           ! Debug: list unsigned int = ax+$25 (used reg = )
27151 6F51           05                   0025  add	ax,*$25
27152 6F54           50                         push	ax
27153                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27154 6F55           FF76         06            push	6[bp]
27155                                           ! Debug: func () void = write_byte+0 (used reg = )
27156 6F58           E8         0DE5            call	_write_byte
27157 6F5B           89EC                       mov	sp,bp
27158                                           !BCC_EOS
27159                                           ! 3917  write_byte(ES,DI+0x26,0);
27160                                           ! Debug: list int = const 0 (used reg = )
27161 6F5D           31C0                       xor	ax,ax
27162 6F5F           50                         push	ax
27163                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
27164 6F60           8B46         08            mov	ax,8[bp]
27165                                           ! Debug: list unsigned int = ax+$26 (used reg = )
27166 6F63           05                   0026  add	ax,*$26
27167 6F66           50                         push	ax
27168                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27169 6F67           FF76         06            push	6[bp]
27170                                           ! Debug: func () void = write_byte+0 (used reg = )
27171 6F6A           E8         0DD3            call	_write_byte
27172 6F6D           89EC                       mov	sp,bp
27173                                           !BCC_EOS
27174                                           ! 3918  write_byte(ES,DI+0x27,16);
27175                                           ! Debug: list int = const $10 (used reg = )
27176 6F6F           B8                   0010  mov	ax,*$10
27177 6F72           50                         push	ax
27178                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
27179 6F73           8B46         08            mov	ax,8[bp]
27180                                           ! Debug: list unsigned int = ax+$27 (used reg = )
27181 6F76           05                   0027  add	ax,*$27
27182 6F79           50                         push	ax
27183                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27184 6F7A           FF76         06            push	6[bp]
27185                                           ! Debug: func () void = write_byte+0 (used reg = )
27186 6F7D           E8         0DC0            call	_write_byte
27187 6F80           89EC                       mov	sp,bp
27188                                           !BCC_EOS
27189                                           ! 3919  write_byte(ES,DI+0x28,0);
27190                                           ! Debug: list int = const 0 (used reg = )
27191 6F82           31C0                       xor	ax,ax
27192 6F84           50                         push	ax
27193                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
27194 6F85           8B46         08            mov	ax,8[bp]
27195                                           ! Debug: list unsigned int = ax+$28 (used reg = )
27196 6F88           05                   0028  add	ax,*$28
27197 6F8B           50                         push	ax
27198                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27199 6F8C           FF76         06            push	6[bp]
27200                                           ! Debug: func () void = write_byte+0 (used reg = )
27201 6F8F           E8         0DAE            call	_write_byte
27202 6F92           89EC                       mov	sp,bp
27203                                           !BCC_EOS
27204                                           ! 3920  write_byte(ES,DI+0x29,8);
27205                                           ! Debug: list int = const 8 (used reg = )
27206 6F94           B8                   0008  mov	ax,*8
27207 6F97           50                         push	ax
27208                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
27209 6F98           8B46         08            mov	ax,8[bp]
27210                                           ! Debug: list unsigned int = ax+$29 (used reg = )
27211 6F9B           05                   0029  add	ax,*$29
27212 6F9E           50                         push	ax
27213                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27214 6F9F           FF76         06            push	6[bp]
27215                                           ! Debug: func () void = write_byte+0 (used reg = )
27216 6FA2           E8         0D9B            call	_write_byte
27217 6FA5           89EC                       mov	sp,bp
27218                                           !BCC_EOS
27219                                           ! 3921  write_byte(ES,DI+0x2a,2);
27220                                           ! Debug: list int = const 2 (used reg = )
27221 6FA7           B8                   0002  mov	ax,*2
27222 6FAA           50                         push	ax
27223                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
27224 6FAB           8B46         08            mov	ax,8[bp]
27225                                           ! Debug: list unsigned int = ax+$2A (used reg = )
27226 6FAE           05                   002A  add	ax,*$2A
27227 6FB1           50                         push	ax
27228                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27229 6FB2           FF76         06            push	6[bp]
27230                                           ! Debug: func () void = write_byte+0 (used reg = )
27231 6FB5           E8         0D88            call	_write_byte
27232 6FB8           89EC                       mov	sp,bp
27233                                           !BCC_EOS
27234                                           ! 3922  write_byte(ES,DI+0x2b,0);
27235                                           ! Debug: list int = const 0 (used reg = )
27236 6FBA           31C0                       xor	ax,ax
27237 6FBC           50                         push	ax
27238                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
27239 6FBD           8B46         08            mov	ax,8[bp]
27240                                           ! Debug: list unsigned int = ax+$2B (used reg = )
27241 6FC0           05                   002B  add	ax,*$2B
27242 6FC3           50                         push	ax
27243                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27244 6FC4           FF76         06            push	6[bp]
27245                                           ! Debug: func () void = write_byte+0 (used reg = )
27246 6FC7           E8         0D76            call	_write_byte
27247 6FCA           89EC                       mov	sp,bp
27248                                           !BCC_EOS
27249                                           ! 3923  write_byte(ES,DI+0x2c,0);
27250                                           ! Debug: list int = const 0 (used reg = )
27251 6FCC           31C0                       xor	ax,ax
27252 6FCE           50                         push	ax
27253                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
27254 6FCF           8B46         08            mov	ax,8[bp]
27255                                           ! Debug: list unsigned int = ax+$2C (used reg = )
27256 6FD2           05                   002C  add	ax,*$2C
27257 6FD5           50                         push	ax
27258                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27259 6FD6           FF76         06            push	6[bp]
27260                                           ! Debug: func () void = write_byte+0 (used reg = )
27261 6FD9           E8         0D64            call	_write_byte
27262 6FDC           89EC                       mov	sp,bp
27263                                           !BCC_EOS
27264                                           ! 3924  write_byte(ES,DI+0x31,3);
27265                                           ! Debug: list int = const 3 (used reg = )
27266 6FDE           B8                   0003  mov	ax,*3
27267 6FE1           50                         push	ax
27268                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
27269 6FE2           8B46         08            mov	ax,8[bp]
27270                                           ! Debug: list unsigned int = ax+$31 (used reg = )
27271 6FE5           05                   0031  add	ax,*$31
27272 6FE8           50                         push	ax
27273                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27274 6FE9           FF76         06            push	6[bp]
27275                                           ! Debug: func () void = write_byte+0 (used reg = )
27276 6FEC           E8         0D51            call	_write_byte
27277 6FEF           89EC                       mov	sp,bp
27278                                           !BCC_EOS
27279                                           ! 3925  write_byte(ES,DI+0x32,0);
27280                                           ! Debug: list int = const 0 (used reg = )
27281 6FF1           31C0                       xor	ax,ax
27282 6FF3           50                         push	ax
27283                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27284 6FF4           8B46         08            mov	ax,8[bp]
27285                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27286 6FF7           05                   0032  add	ax,*$32
27287 6FFA           50                         push	ax
27288                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27289 6FFB           FF76         06            push	6[bp]
27290                                           ! Debug: func () void = write_byte+0 (used reg = )
27291 6FFE           E8         0D3F            call	_write_byte
27292 7001           89EC                       mov	sp,bp
27293                                           !BCC_EOS
27294                                           ! 3926  memsetb(ES,DI+0x33,0,13);
27295                                           ! Debug: list int = const $D (used reg = )
27296 7003           B8                   000D  mov	ax,*$D
27297 7006           50                         push	ax
27298                                           ! Debug: list int = const 0 (used reg = )
27299 7007           31C0                       xor	ax,ax
27300 7009           50                         push	ax
27301                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27302 700A           8B46         08            mov	ax,8[bp]
27303                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27304 700D           05                   0033  add	ax,*$33
27305 7010           50                         push	ax
27306                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27307 7011           FF76         06            push	6[bp]
27308                                           ! Debug: func () void = memsetb+0 (used reg = )
27309 7014           E8         0C59            call	_memsetb
27310 7017           89EC                       mov	sp,bp
27311                                           !BCC_EOS
27312                                           ! 3927 }
27313 7019           5D                         pop	bp
27314 701A           C3                         ret
27315                                           ! 3928 static Bit16u biosfn_read_video_state_size2 (CX)
27316                                           ! Register BX used in function biosfn_read_state_info
27317                                           ! 3929      Bit16u CX;
27318                       0000701B            _biosfn_read_video_state_size2:
27319                                           !BCC_EOS
27320                                           ! 3930 {
27321                                           ! 3931     Bit16u size;
27322                                           !BCC_EOS
27323                                           ! 3932     size = 0;
27324 701B           55                         push	bp
27325 701C           89E5                       mov	bp,sp
27326 701E           4C                         dec	sp
27327 701F           4C                         dec	sp
27328                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27329 7020           31C0                       xor	ax,ax
27330 7022           8946         FE            mov	-2[bp],ax
27331                                           !BCC_EOS
27332                                           ! 3933     if (CX & 1) {
27333                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27334 7025           8A46         04            mov	al,4[bp]
27335 7028           24                     01  and	al,*1
27336 702A           84C0                       test	al,al
27337 702C           74           09            je  	.256
27338                       0000702E            .257:
27339                                           ! 3934         size += 0x46;
27340                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27341 702E           8B46         FE            mov	ax,-2[bp]
27342 7031           05                   0046  add	ax,*$46
27343 7034           8946         FE            mov	-2[bp],ax
27344                                           !BCC_EOS
27345                                           ! 3935     }
27346                                           ! 3936     if (CX & 2) {
27347                       00007037            .256:
27348                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27349 7037           8A46         04            mov	al,4[bp]
27350 703A           24                     02  and	al,*2
27351 703C           84C0                       test	al,al
27352 703E           74           09            je  	.258
27353                       00007040            .259:
27354                                           ! 3937         size += (5 + 8 + 5) * 2 + 6;
27355                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27356 7040           8B46         FE            mov	ax,-2[bp]
27357 7043           05                   002A  add	ax,*$2A
27358 7046           8946         FE            mov	-2[bp],ax
27359                                           !BCC_EOS
27360                                           ! 3938     }
27361                                           ! 3939     if (CX & 4) {
27362                       00007049            .258:
27363                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27364 7049           8A46         04            mov	al,4[bp]
27365 704C           24                     04  and	al,*4
27366 704E           84C0                       test	al,al
27367 7050           74           09            je  	.25A
27368                       00007052            .25B:
27369                                           ! 3940         size += 3 + 256 * 3 + 1;
27370                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27371 7052           8B46         FE            mov	ax,-2[bp]
27372 7055           05                   0304  add	ax,#$304
27373 7058           8946         FE            mov	-2[bp],ax
27374                                           !BCC_EOS
27375                                           ! 3941 }
27376                                           ! 3942     return size;
27377                       0000705B            .25A:
27378 705B           8B46         FE            mov	ax,-2[bp]
27379 705E           89EC                       mov	sp,bp
27380 7060           5D                         pop	bp
27381 7061           C3                         ret
27382                                           !BCC_EOS
27383                                           ! 3943 }
27384                                           ! 3944 static void biosfn_read_video_state_size (CX, BX)
27385                                           ! 3945      Bit16u CX; Bit16u *BX;
27386                       00007062            _biosfn_read_video_state_size:
27387                                           !BCC_EOS
27388                                           !BCC_EOS
27389                                           ! 3946 {
27390                                           ! 3947     Bit16u ss=get_SS();
27391 7062           55                         push	bp
27392 7063           89E5                       mov	bp,sp
27393 7065           4C                         dec	sp
27394 7066           4C                         dec	sp
27395                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27396 7067           E8         0D3C            call	_get_SS
27397                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27398 706A           8946         FE            mov	-2[bp],ax
27399                                           !BCC_EOS
27400                                           ! 3948     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27401                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27402 706D           FF76         04            push	4[bp]
27403                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27404 7070           E8         FFA8            call	_biosfn_read_video_state_size2
27405 7073           44                         inc	sp
27406 7074           44                         inc	sp
27407                                           ! Debug: list unsigned short = ax+0 (used reg = )
27408 7075           50                         push	ax
27409                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27410 7076           FF76         06            push	6[bp]
27411                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27412 7079           FF76         FE            push	-2[bp]
27413                                           ! Debug: func () void = write_word+0 (used reg = )
27414 707C           E8         0CD9            call	_write_word
27415 707F           83C4                   06  add	sp,*6
27416                                           !BCC_EOS
27417                                           ! 3949 }
27418 7082           89EC                       mov	sp,bp
27419 7084           5D                         pop	bp
27420 7085           C3                         ret
27421                                           ! 3950 static Bit16u biosfn_save_video_state (CX,ES,BX)
27422                                           ! 3951      Bit16u CX;Bit16u ES;Bit16u BX;
27423                       00007086            _biosfn_save_video_state:
27424                                           !BCC_EOS
27425                                           !BCC_EOS
27426                                           !BCC_EOS
27427                                           ! 3952 {
27428                                           ! 3953     Bit16u i, v, crtc_addr, ar_index;
27429                                           !BCC_EOS
27430                                           ! 3954     crtc_addr = read_word(0x40, 0x63);
27431 7086           55                         push	bp
27432 7087           89E5                       mov	bp,sp
27433 7089           83C4                   F8  add	sp,*-8
27434                                           ! Debug: list int = const $63 (used reg = )
27435 708C           B8                   0063  mov	ax,*$63
27436 708F           50                         push	ax
27437                                           ! Debug: list int = const $40 (used reg = )
27438 7090           B8                   0040  mov	ax,*$40
27439 7093           50                         push	ax
27440                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27441 7094           E8         0C96            call	_read_word
27442 7097           83C4                   04  add	sp,*4
27443                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27444 709A           8946         FA            mov	-6[bp],ax
27445                                           !BCC_EOS
27446                                           ! 3955     if (CX & 1) {
27447                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27448 709D           8A46         04            mov	al,4[bp]
27449 70A0           24                     01  and	al,*1
27450 70A2           84C0                       test	al,al
27451 70A4         0F84         0266            beq 	.25C
27452                       000070A8            .25D:
27453                                           ! 3956         write_byte(ES, BX, inb(0x3c4)); BX++;
27454                                           ! Debug: list int = const $3C4 (used reg = )
27455 70A8           B8                   03C4  mov	ax,#$3C4
27456 70AB           50                         push	ax
27457                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27458 70AC           E8         0CC1            call	_inb
27459 70AF           44                         inc	sp
27460 70B0           44                         inc	sp
27461                                           ! Debug: list unsigned char = al+0 (used reg = )
27462 70B1           30E4                       xor	ah,ah
27463 70B3           50                         push	ax
27464                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27465 70B4           FF76         08            push	8[bp]
27466                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27467 70B7           FF76         06            push	6[bp]
27468                                           ! Debug: func () void = write_byte+0 (used reg = )
27469 70BA           E8         0C83            call	_write_byte
27470 70BD           83C4                   06  add	sp,*6
27471                                           !BCC_EOS
27472                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27473 70C0           8B46         08            mov	ax,8[bp]
27474 70C3           40                         inc	ax
27475 70C4           8946         08            mov	8[bp],ax
27476                                           !BCC_EOS
27477                                           ! 3957         write_byte(ES, BX, inb(crtc_addr)); BX++;
27478                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27479 70C7           FF76         FA            push	-6[bp]
27480                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27481 70CA           E8         0CA3            call	_inb
27482 70CD           44                         inc	sp
27483 70CE           44                         inc	sp
27484                                           ! Debug: list unsigned char = al+0 (used reg = )
27485 70CF           30E4                       xor	ah,ah
27486 70D1           50                         push	ax
27487                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27488 70D2           FF76         08            push	8[bp]
27489                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27490 70D5           FF76         06            push	6[bp]
27491                                           ! Debug: func () void = write_byte+0 (used reg = )
27492 70D8           E8         0C65            call	_write_byte
27493 70DB           83C4                   06  add	sp,*6
27494                                           !BCC_EOS
27495                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27496 70DE           8B46         08            mov	ax,8[bp]
27497 70E1           40                         inc	ax
27498 70E2           8946         08            mov	8[bp],ax
27499                                           !BCC_EOS
27500                                           ! 3958         write_byte(ES, BX, inb(0x3ce)); BX++;
27501                                           ! Debug: list int = const $3CE (used reg = )
27502 70E5           B8                   03CE  mov	ax,#$3CE
27503 70E8           50                         push	ax
27504                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27505 70E9           E8         0C84            call	_inb
27506 70EC           44                         inc	sp
27507 70ED           44                         inc	sp
27508                                           ! Debug: list unsigned char = al+0 (used reg = )
27509 70EE           30E4                       xor	ah,ah
27510 70F0           50                         push	ax
27511                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27512 70F1           FF76         08            push	8[bp]
27513                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27514 70F4           FF76         06            push	6[bp]
27515                                           ! Debug: func () void = write_byte+0 (used reg = )
27516 70F7           E8         0C46            call	_write_byte
27517 70FA           83C4                   06  add	sp,*6
27518                                           !BCC_EOS
27519                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27520 70FD           8B46         08            mov	ax,8[bp]
27521 7100           40                         inc	ax
27522 7101           8946         08            mov	8[bp],ax
27523                                           !BCC_EOS
27524                                           ! 3959         inb(0x3da);
27525                                           ! Debug: list int = const $3DA (used reg = )
27526 7104           B8                   03DA  mov	ax,#$3DA
27527 7107           50                         push	ax
27528                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27529 7108           E8         0C65            call	_inb
27530 710B           44                         inc	sp
27531 710C           44                         inc	sp
27532                                           !BCC_EOS
27533                                           ! 3960         ar_index = inb(0x3c0);
27534                                           ! Debug: list int = const $3C0 (used reg = )
27535 710D           B8                   03C0  mov	ax,#$3C0
27536 7110           50                         push	ax
27537                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27538 7111           E8         0C5C            call	_inb
27539 7114           44                         inc	sp
27540 7115           44                         inc	sp
27541                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27542 7116           30E4                       xor	ah,ah
27543 7118           8946         F8            mov	-8[bp],ax
27544                                           !BCC_EOS
27545                                           ! 3961         write_byte(ES, BX, ar_index); BX++;
27546                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27547 711B           FF76         F8            push	-8[bp]
27548                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27549 711E           FF76         08            push	8[bp]
27550                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27551 7121           FF76         06            push	6[bp]
27552                                           ! Debug: func () void = write_byte+0 (used reg = )
27553 7124           E8         0C19            call	_write_byte
27554 7127           83C4                   06  add	sp,*6
27555                                           !BCC_EOS
27556                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27557 712A           8B46         08            mov	ax,8[bp]
27558 712D           40                         inc	ax
27559 712E           8946         08            mov	8[bp],ax
27560                                           !BCC_EOS
27561                                           ! 3962         write_byte(ES, BX, inb(0x3ca)); BX++;
27562                                           ! Debug: list int = const $3CA (used reg = )
27563 7131           B8                   03CA  mov	ax,#$3CA
27564 7134           50                         push	ax
27565                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27566 7135           E8         0C38            call	_inb
27567 7138           44                         inc	sp
27568 7139           44                         inc	sp
27569                                           ! Debug: list unsigned char = al+0 (used reg = )
27570 713A           30E4                       xor	ah,ah
27571 713C           50                         push	ax
27572                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27573 713D           FF76         08            push	8[bp]
27574                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27575 7140           FF76         06            push	6[bp]
27576                                           ! Debug: func () void = write_byte+0 (used reg = )
27577 7143           E8         0BFA            call	_write_byte
27578 7146           83C4                   06  add	sp,*6
27579                                           !BCC_EOS
27580                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27581 7149           8B46         08            mov	ax,8[bp]
27582 714C           40                         inc	ax
27583 714D           8946         08            mov	8[bp],ax
27584                                           !BCC_EOS
27585                                           ! 3963         for(i=1;i<=4;i++){
27586                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27587 7150           B8                   0001  mov	ax,*1
27588 7153           8946         FE            mov	-2[bp],ax
27589                                           !BCC_EOS
27590                                           !BCC_EOS
27591 7156           EB           33            jmp .260
27592                       00007158            .261:
27593                                           ! 3964             outb(0x3c4, i);
27594                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27595 7158           FF76         FE            push	-2[bp]
27596                                           ! Debug: list int = const $3C4 (used reg = )
27597 715B           B8                   03C4  mov	ax,#$3C4
27598 715E           50                         push	ax
27599                                           ! Debug: func () void = outb+0 (used reg = )
27600 715F           E8         0C24            call	_outb
27601 7162           83C4                   04  add	sp,*4
27602                                           !BCC_EOS
27603                                           ! 3965             write_byte(ES, BX, inb(0x3c5)); BX++;
27604                                           ! Debug: list int = const $3C5 (used reg = )
27605 7165           B8                   03C5  mov	ax,#$3C5
27606 7168           50                         push	ax
27607                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27608 7169           E8         0C04            call	_inb
27609 716C           44                         inc	sp
27610 716D           44                         inc	sp
27611                                           ! Debug: list unsigned char = al+0 (used reg = )
27612 716E           30E4                       xor	ah,ah
27613 7170           50                         push	ax
27614                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27615 7171           FF76         08            push	8[bp]
27616                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27617 7174           FF76         06            push	6[bp]
27618                                           ! Debug: func () void = write_byte+0 (used reg = )
27619 7177           E8         0BC6            call	_write_byte
27620 717A           83C4                   06  add	sp,*6
27621                                           !BCC_EOS
27622                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27623 717D           8B46         08            mov	ax,8[bp]
27624 7180           40                         inc	ax
27625 7181           8946         08            mov	8[bp],ax
27626                                           !BCC_EOS
27627                                           ! 3966         }
27628                                           ! 3967         outb(0x3c4, 0);
27629                       00007184            .25F:
27630                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27631 7184           8B46         FE            mov	ax,-2[bp]
27632 7187           40                         inc	ax
27633 7188           8946         FE            mov	-2[bp],ax
27634                       0000718B            .260:
27635                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27636 718B           8B46         FE            mov	ax,-2[bp]
27637 718E           3D                   0004  cmp	ax,*4
27638 7191           76           C5            jbe	.261
27639                       00007193            .262:
27640                       00007193            .25E:
27641                                           ! Debug: list int = const 0 (used reg = )
27642 7193           31C0                       xor	ax,ax
27643 7195           50                         push	ax
27644                                           ! Debug: list int = const $3C4 (used reg = )
27645 7196           B8                   03C4  mov	ax,#$3C4
27646 7199           50                         push	ax
27647                                           ! Debug: func () void = outb+0 (used reg = )
27648 719A           E8         0BE9            call	_outb
27649 719D           83C4                   04  add	sp,*4
27650                                           !BCC_EOS
27651                                           ! 3968         write_byte(ES, BX, inb(0x3c5)); BX++;
27652                                           ! Debug: list int = const $3C5 (used reg = )
27653 71A0           B8                   03C5  mov	ax,#$3C5
27654 71A3           50                         push	ax
27655                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27656 71A4           E8         0BC9            call	_inb
27657 71A7           44                         inc	sp
27658 71A8           44                         inc	sp
27659                                           ! Debug: list unsigned char = al+0 (used reg = )
27660 71A9           30E4                       xor	ah,ah
27661 71AB           50                         push	ax
27662                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27663 71AC           FF76         08            push	8[bp]
27664                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27665 71AF           FF76         06            push	6[bp]
27666                                           ! Debug: func () void = write_byte+0 (used reg = )
27667 71B2           E8         0B8B            call	_write_byte
27668 71B5           83C4                   06  add	sp,*6
27669                                           !BCC_EOS
27670                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27671 71B8           8B46         08            mov	ax,8[bp]
27672 71BB           40                         inc	ax
27673 71BC           8946         08            mov	8[bp],ax
27674                                           !BCC_EOS
27675                                           ! 3969         for(i=0;i<=0x18;i++) {
27676                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27677 71BF           31C0                       xor	ax,ax
27678 71C1           8946         FE            mov	-2[bp],ax
27679                                           !BCC_EOS
27680                                           !BCC_EOS
27681 71C4           EB           33            jmp .265
27682                       000071C6            .266:
27683                                           ! 3970             outb(crtc_addr,i);
27684                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27685 71C6           FF76         FE            push	-2[bp]
27686                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27687 71C9           FF76         FA            push	-6[bp]
27688                                           ! Debug: func () void = outb+0 (used reg = )
27689 71CC           E8         0BB7            call	_outb
27690 71CF           83C4                   04  add	sp,*4
27691                                           !BCC_EOS
27692                                           ! 3971             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27693                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27694 71D2           8B46         FA            mov	ax,-6[bp]
27695                                           ! Debug: list unsigned int = ax+1 (used reg = )
27696 71D5           40                         inc	ax
27697 71D6           50                         push	ax
27698                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27699 71D7           E8         0B96            call	_inb
27700 71DA           44                         inc	sp
27701 71DB           44                         inc	sp
27702                                           ! Debug: list unsigned char = al+0 (used reg = )
27703 71DC           30E4                       xor	ah,ah
27704 71DE           50                         push	ax
27705                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27706 71DF           FF76         08            push	8[bp]
27707                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27708 71E2           FF76         06            push	6[bp]
27709                                           ! Debug: func () void = write_byte+0 (used reg = )
27710 71E5           E8         0B58            call	_write_byte
27711 71E8           83C4                   06  add	sp,*6
27712                                           !BCC_EOS
27713                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27714 71EB           8B46         08            mov	ax,8[bp]
27715 71EE           40                         inc	ax
27716 71EF           8946         08            mov	8[bp],ax
27717                                           !BCC_EOS
27718                                           ! 3972         }
27719                                           ! 3973         for(i=0;i<=0x13;i++) {
27720                       000071F2            .264:
27721                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27722 71F2           8B46         FE            mov	ax,-2[bp]
27723 71F5           40                         inc	ax
27724 71F6           8946         FE            mov	-2[bp],ax
27725                       000071F9            .265:
27726                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27727 71F9           8B46         FE            mov	ax,-2[bp]
27728 71FC           3D                   0018  cmp	ax,*$18
27729 71FF           76           C5            jbe	.266
27730                       00007201            .267:
27731                       00007201            .263:
27732                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27733 7201           31C0                       xor	ax,ax
27734 7203           8946         FE            mov	-2[bp],ax
27735                                           !BCC_EOS
27736                                           !BCC_EOS
27737 7206           EB           44            jmp .26A
27738                       00007208            .26B:
27739                                           ! 3974             inb(0x3da);
27740                                           ! Debug: list int = const $3DA (used reg = )
27741 7208           B8                   03DA  mov	ax,#$3DA
27742 720B           50                         push	ax
27743                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27744 720C           E8         0B61            call	_inb
27745 720F           44                         inc	sp
27746 7210           44                         inc	sp
27747                                           !BCC_EOS
27748                                           ! 3975             outb(0x3c0, i | (ar_index & 0x20));
27749                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27750 7211           8A46         F8            mov	al,-8[bp]
27751 7214           24                     20  and	al,*$20
27752                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27753                                           ! Debug: expression subtree swapping
27754 7216           30E4                       xor	ah,ah
27755 7218           0B46         FE            or	ax,-2[bp]
27756                                           ! Debug: list unsigned int = ax+0 (used reg = )
27757 721B           50                         push	ax
27758                                           ! Debug: list int = const $3C0 (used reg = )
27759 721C           B8                   03C0  mov	ax,#$3C0
27760 721F           50                         push	ax
27761                                           ! Debug: func () void = outb+0 (used reg = )
27762 7220           E8         0B63            call	_outb
27763 7223           83C4                   04  add	sp,*4
27764                                           !BCC_EOS
27765                                           ! 3976             write_byte(ES, BX, inb(0x3c1)); BX++;
27766                                           ! Debug: list int = const $3C1 (used reg = )
27767 7226           B8                   03C1  mov	ax,#$3C1
27768 7229           50                         push	ax
27769                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27770 722A           E8         0B43            call	_inb
27771 722D           44                         inc	sp
27772 722E           44                         inc	sp
27773                                           ! Debug: list unsigned char = al+0 (used reg = )
27774 722F           30E4                       xor	ah,ah
27775 7231           50                         push	ax
27776                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27777 7232           FF76         08            push	8[bp]
27778                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27779 7235           FF76         06            push	6[bp]
27780                                           ! Debug: func () void = write_byte+0 (used reg = )
27781 7238           E8         0B05            call	_write_byte
27782 723B           83C4                   06  add	sp,*6
27783                                           !BCC_EOS
27784                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27785 723E           8B46         08            mov	ax,8[bp]
27786 7241           40                         inc	ax
27787 7242           8946         08            mov	8[bp],ax
27788                                           !BCC_EOS
27789                                           ! 3977         }
27790                                           ! 3978         inb(0x3da);
27791                       00007245            .269:
27792                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27793 7245           8B46         FE            mov	ax,-2[bp]
27794 7248           40                         inc	ax
27795 7249           8946         FE            mov	-2[bp],ax
27796                       0000724C            .26A:
27797                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27798 724C           8B46         FE            mov	ax,-2[bp]
27799 724F           3D                   0013  cmp	ax,*$13
27800 7252           76           B4            jbe	.26B
27801                       00007254            .26C:
27802                       00007254            .268:
27803                                           ! Debug: list int = const $3DA (used reg = )
27804 7254           B8                   03DA  mov	ax,#$3DA
27805 7257           50                         push	ax
27806                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27807 7258           E8         0B15            call	_inb
27808 725B           44                         inc	sp
27809 725C           44                         inc	sp
27810                                           !BCC_EOS
27811                                           ! 3979         for(i=0;i<=8;i++) {
27812                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27813 725D           31C0                       xor	ax,ax
27814 725F           8946         FE            mov	-2[bp],ax
27815                                           !BCC_EOS
27816                                           !BCC_EOS
27817 7262           EB           33            jmp .26F
27818                       00007264            .270:
27819                                           ! 3980             outb(0x3ce,i);
27820                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27821 7264           FF76         FE            push	-2[bp]
27822                                           ! Debug: list int = const $3CE (used reg = )
27823 7267           B8                   03CE  mov	ax,#$3CE
27824 726A           50                         push	ax
27825                                           ! Debug: func () void = outb+0 (used reg = )
27826 726B           E8         0B18            call	_outb
27827 726E           83C4                   04  add	sp,*4
27828                                           !BCC_EOS
27829                                           ! 3981             write_byte(ES, BX, inb(0x3cf)); BX++;
27830                                           ! Debug: list int = const $3CF (used reg = )
27831 7271           B8                   03CF  mov	ax,#$3CF
27832 7274           50                         push	ax
27833                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27834 7275           E8         0AF8            call	_inb
27835 7278           44                         inc	sp
27836 7279           44                         inc	sp
27837                                           ! Debug: list unsigned char = al+0 (used reg = )
27838 727A           30E4                       xor	ah,ah
27839 727C           50                         push	ax
27840                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27841 727D           FF76         08            push	8[bp]
27842                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27843 7280           FF76         06            push	6[bp]
27844                                           ! Debug: func () void = write_byte+0 (used reg = )
27845 7283           E8         0ABA            call	_write_byte
27846 7286           83C4                   06  add	sp,*6
27847                                           !BCC_EOS
27848                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27849 7289           8B46         08            mov	ax,8[bp]
27850 728C           40                         inc	ax
27851 728D           8946         08            mov	8[bp],ax
27852                                           !BCC_EOS
27853                                           ! 3982         }
27854                                           ! 3983         write_word(ES, BX, crtc_addr); BX+= 2;
27855                       00007290            .26E:
27856                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27857 7290           8B46         FE            mov	ax,-2[bp]
27858 7293           40                         inc	ax
27859 7294           8946         FE            mov	-2[bp],ax
27860                       00007297            .26F:
27861                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27862 7297           8B46         FE            mov	ax,-2[bp]
27863 729A           3D                   0008  cmp	ax,*8
27864 729D           76           C5            jbe	.270
27865                       0000729F            .271:
27866                       0000729F            .26D:
27867                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27868 729F           FF76         FA            push	-6[bp]
27869                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27870 72A2           FF76         08            push	8[bp]
27871                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27872 72A5           FF76         06            push	6[bp]
27873                                           ! Debug: func () void = write_word+0 (used reg = )
27874 72A8           E8         0AAD            call	_write_word
27875 72AB           83C4                   06  add	sp,*6
27876                                           !BCC_EOS
27877                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27878 72AE           8B46         08            mov	ax,8[bp]
27879 72B1           40                         inc	ax
27880 72B2           40                         inc	ax
27881 72B3           8946         08            mov	8[bp],ax
27882                                           !BCC_EOS
27883                                           ! 3984         wr
27884                                           ! 3984 ite_byte(ES, BX, 0); BX++;
27885                                           ! Debug: list int = const 0 (used reg = )
27886 72B6           31C0                       xor	ax,ax
27887 72B8           50                         push	ax
27888                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27889 72B9           FF76         08            push	8[bp]
27890                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27891 72BC           FF76         06            push	6[bp]
27892                                           ! Debug: func () void = write_byte+0 (used reg = )
27893 72BF           E8         0A7E            call	_write_byte
27894 72C2           83C4                   06  add	sp,*6
27895                                           !BCC_EOS
27896                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27897 72C5           8B46         08            mov	ax,8[bp]
27898 72C8           40                         inc	ax
27899 72C9           8946         08            mov	8[bp],ax
27900                                           !BCC_EOS
27901                                           ! 3985         write_byte(ES, BX, 0); BX++;
27902                                           ! Debug: list int = const 0 (used reg = )
27903 72CC           31C0                       xor	ax,ax
27904 72CE           50                         push	ax
27905                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27906 72CF           FF76         08            push	8[bp]
27907                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27908 72D2           FF76         06            push	6[bp]
27909                                           ! Debug: func () void = write_byte+0 (used reg = )
27910 72D5           E8         0A68            call	_write_byte
27911 72D8           83C4                   06  add	sp,*6
27912                                           !BCC_EOS
27913                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27914 72DB           8B46         08            mov	ax,8[bp]
27915 72DE           40                         inc	ax
27916 72DF           8946         08            mov	8[bp],ax
27917                                           !BCC_EOS
27918                                           ! 3986         write_byte(ES, BX, 0); BX++;
27919                                           ! Debug: list int = const 0 (used reg = )
27920 72E2           31C0                       xor	ax,ax
27921 72E4           50                         push	ax
27922                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27923 72E5           FF76         08            push	8[bp]
27924                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27925 72E8           FF76         06            push	6[bp]
27926                                           ! Debug: func () void = write_byte+0 (used reg = )
27927 72EB           E8         0A52            call	_write_byte
27928 72EE           83C4                   06  add	sp,*6
27929                                           !BCC_EOS
27930                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27931 72F1           8B46         08            mov	ax,8[bp]
27932 72F4           40                         inc	ax
27933 72F5           8946         08            mov	8[bp],ax
27934                                           !BCC_EOS
27935                                           ! 3987         write_byte(ES, BX, 0); BX++;
27936                                           ! Debug: list int = const 0 (used reg = )
27937 72F8           31C0                       xor	ax,ax
27938 72FA           50                         push	ax
27939                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27940 72FB           FF76         08            push	8[bp]
27941                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27942 72FE           FF76         06            push	6[bp]
27943                                           ! Debug: func () void = write_byte+0 (used reg = )
27944 7301           E8         0A3C            call	_write_byte
27945 7304           83C4                   06  add	sp,*6
27946                                           !BCC_EOS
27947                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27948 7307           8B46         08            mov	ax,8[bp]
27949 730A           40                         inc	ax
27950 730B           8946         08            mov	8[bp],ax
27951                                           !BCC_EOS
27952                                           ! 3988     }
27953                                           ! 3989     if (CX & 2) {
27954                       0000730E            .25C:
27955                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27956 730E           8A46         04            mov	al,4[bp]
27957 7311           24                     02  and	al,*2
27958 7313           84C0                       test	al,al
27959 7315         0F84         0270            beq 	.272
27960                       00007319            .273:
27961                                           ! 3990         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27962                                           ! Debug: list int = const $49 (used reg = )
27963 7319           B8                   0049  mov	ax,*$49
27964 731C           50                         push	ax
27965                                           ! Debug: list int = const $40 (used reg = )
27966 731D           B8                   0040  mov	ax,*$40
27967 7320           50                         push	ax
27968                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27969 7321           E8         09F6            call	_read_byte
27970 7324           83C4                   04  add	sp,*4
27971                                           ! Debug: list unsigned char = al+0 (used reg = )
27972 7327           30E4                       xor	ah,ah
27973 7329           50                         push	ax
27974                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27975 732A           FF76         08            push	8[bp]
27976                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27977 732D           FF76         06            push	6[bp]
27978                                           ! Debug: func () void = write_byte+0 (used reg = )
27979 7330           E8         0A0D            call	_write_byte
27980 7333           83C4                   06  add	sp,*6
27981                                           !BCC_EOS
27982                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27983 7336           8B46         08            mov	ax,8[bp]
27984 7339           40                         inc	ax
27985 733A           8946         08            mov	8[bp],ax
27986                                           !BCC_EOS
27987                                           ! 3991         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27988                                           ! Debug: list int = const $4A (used reg = )
27989 733D           B8                   004A  mov	ax,*$4A
27990 7340           50                         push	ax
27991                                           ! Debug: list int = const $40 (used reg = )
27992 7341           B8                   0040  mov	ax,*$40
27993 7344           50                         push	ax
27994                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27995 7345           E8         09E5            call	_read_word
27996 7348           83C4                   04  add	sp,*4
27997                                           ! Debug: list unsigned short = ax+0 (used reg = )
27998 734B           50                         push	ax
27999                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28000 734C           FF76         08            push	8[bp]
28001                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28002 734F           FF76         06            push	6[bp]
28003                                           ! Debug: func () void = write_word+0 (used reg = )
28004 7352           E8         0A03            call	_write_word
28005 7355           83C4                   06  add	sp,*6
28006                                           !BCC_EOS
28007                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28008 7358           8B46         08            mov	ax,8[bp]
28009 735B           40                         inc	ax
28010 735C           40                         inc	ax
28011 735D           8946         08            mov	8[bp],ax
28012                                           !BCC_EOS
28013                                           ! 3992         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
28014                                           ! Debug: list int = const $4C (used reg = )
28015 7360           B8                   004C  mov	ax,*$4C
28016 7363           50                         push	ax
28017                                           ! Debug: list int = const $40 (used reg = )
28018 7364           B8                   0040  mov	ax,*$40
28019 7367           50                         push	ax
28020                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28021 7368           E8         09C2            call	_read_word
28022 736B           83C4                   04  add	sp,*4
28023                                           ! Debug: list unsigned short = ax+0 (used reg = )
28024 736E           50                         push	ax
28025                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28026 736F           FF76         08            push	8[bp]
28027                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28028 7372           FF76         06            push	6[bp]
28029                                           ! Debug: func () void = write_word+0 (used reg = )
28030 7375           E8         09E0            call	_write_word
28031 7378           83C4                   06  add	sp,*6
28032                                           !BCC_EOS
28033                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28034 737B           8B46         08            mov	ax,8[bp]
28035 737E           40                         inc	ax
28036 737F           40                         inc	ax
28037 7380           8946         08            mov	8[bp],ax
28038                                           !BCC_EOS
28039                                           ! 3993         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
28040                                           ! Debug: list int = const $63 (used reg = )
28041 7383           B8                   0063  mov	ax,*$63
28042 7386           50                         push	ax
28043                                           ! Debug: list int = const $40 (used reg = )
28044 7387           B8                   0040  mov	ax,*$40
28045 738A           50                         push	ax
28046                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28047 738B           E8         099F            call	_read_word
28048 738E           83C4                   04  add	sp,*4
28049                                           ! Debug: list unsigned short = ax+0 (used reg = )
28050 7391           50                         push	ax
28051                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28052 7392           FF76         08            push	8[bp]
28053                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28054 7395           FF76         06            push	6[bp]
28055                                           ! Debug: func () void = write_word+0 (used reg = )
28056 7398           E8         09BD            call	_write_word
28057 739B           83C4                   06  add	sp,*6
28058                                           !BCC_EOS
28059                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28060 739E           8B46         08            mov	ax,8[bp]
28061 73A1           40                         inc	ax
28062 73A2           40                         inc	ax
28063 73A3           8946         08            mov	8[bp],ax
28064                                           !BCC_EOS
28065                                           ! 3994         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
28066                                           ! Debug: list int = const $84 (used reg = )
28067 73A6           B8                   0084  mov	ax,#$84
28068 73A9           50                         push	ax
28069                                           ! Debug: list int = const $40 (used reg = )
28070 73AA           B8                   0040  mov	ax,*$40
28071 73AD           50                         push	ax
28072                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28073 73AE           E8         0969            call	_read_byte
28074 73B1           83C4                   04  add	sp,*4
28075                                           ! Debug: list unsigned char = al+0 (used reg = )
28076 73B4           30E4                       xor	ah,ah
28077 73B6           50                         push	ax
28078                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28079 73B7           FF76         08            push	8[bp]
28080                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28081 73BA           FF76         06            push	6[bp]
28082                                           ! Debug: func () void = write_byte+0 (used reg = )
28083 73BD           E8         0980            call	_write_byte
28084 73C0           83C4                   06  add	sp,*6
28085                                           !BCC_EOS
28086                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28087 73C3           8B46         08            mov	ax,8[bp]
28088 73C6           40                         inc	ax
28089 73C7           8946         08            mov	8[bp],ax
28090                                           !BCC_EOS
28091                                           ! 3995         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
28092                                           ! Debug: list int = const $85 (used reg = )
28093 73CA           B8                   0085  mov	ax,#$85
28094 73CD           50                         push	ax
28095                                           ! Debug: list int = const $40 (used reg = )
28096 73CE           B8                   0040  mov	ax,*$40
28097 73D1           50                         push	ax
28098                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28099 73D2           E8         0958            call	_read_word
28100 73D5           83C4                   04  add	sp,*4
28101                                           ! Debug: list unsigned short = ax+0 (used reg = )
28102 73D8           50                         push	ax
28103                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28104 73D9           FF76         08            push	8[bp]
28105                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28106 73DC           FF76         06            push	6[bp]
28107                                           ! Debug: func () void = write_word+0 (used reg = )
28108 73DF           E8         0976            call	_write_word
28109 73E2           83C4                   06  add	sp,*6
28110                                           !BCC_EOS
28111                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28112 73E5           8B46         08            mov	ax,8[bp]
28113 73E8           40                         inc	ax
28114 73E9           40                         inc	ax
28115 73EA           8946         08            mov	8[bp],ax
28116                                           !BCC_EOS
28117                                           ! 3996         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
28118                                           ! Debug: list int = const $87 (used reg = )
28119 73ED           B8                   0087  mov	ax,#$87
28120 73F0           50                         push	ax
28121                                           ! Debug: list int = const $40 (used reg = )
28122 73F1           B8                   0040  mov	ax,*$40
28123 73F4           50                         push	ax
28124                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28125 73F5           E8         0922            call	_read_byte
28126 73F8           83C4                   04  add	sp,*4
28127                                           ! Debug: list unsigned char = al+0 (used reg = )
28128 73FB           30E4                       xor	ah,ah
28129 73FD           50                         push	ax
28130                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28131 73FE           FF76         08            push	8[bp]
28132                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28133 7401           FF76         06            push	6[bp]
28134                                           ! Debug: func () void = write_byte+0 (used reg = )
28135 7404           E8         0939            call	_write_byte
28136 7407           83C4                   06  add	sp,*6
28137                                           !BCC_EOS
28138                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28139 740A           8B46         08            mov	ax,8[bp]
28140 740D           40                         inc	ax
28141 740E           8946         08            mov	8[bp],ax
28142                                           !BCC_EOS
28143                                           ! 3997         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
28144                                           ! Debug: list int = const $88 (used reg = )
28145 7411           B8                   0088  mov	ax,#$88
28146 7414           50                         push	ax
28147                                           ! Debug: list int = const $40 (used reg = )
28148 7415           B8                   0040  mov	ax,*$40
28149 7418           50                         push	ax
28150                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28151 7419           E8         08FE            call	_read_byte
28152 741C           83C4                   04  add	sp,*4
28153                                           ! Debug: list unsigned char = al+0 (used reg = )
28154 741F           30E4                       xor	ah,ah
28155 7421           50                         push	ax
28156                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28157 7422           FF76         08            push	8[bp]
28158                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28159 7425           FF76         06            push	6[bp]
28160                                           ! Debug: func () void = write_byte+0 (used reg = )
28161 7428           E8         0915            call	_write_byte
28162 742B           83C4                   06  add	sp,*6
28163                                           !BCC_EOS
28164                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28165 742E           8B46         08            mov	ax,8[bp]
28166 7431           40                         inc	ax
28167 7432           8946         08            mov	8[bp],ax
28168                                           !BCC_EOS
28169                                           ! 3998         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
28170                                           ! Debug: list int = const $89 (used reg = )
28171 7435           B8                   0089  mov	ax,#$89
28172 7438           50                         push	ax
28173                                           ! Debug: list int = const $40 (used reg = )
28174 7439           B8                   0040  mov	ax,*$40
28175 743C           50                         push	ax
28176                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28177 743D           E8         08DA            call	_read_byte
28178 7440           83C4                   04  add	sp,*4
28179                                           ! Debug: list unsigned char = al+0 (used reg = )
28180 7443           30E4                       xor	ah,ah
28181 7445           50                         push	ax
28182                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28183 7446           FF76         08            push	8[bp]
28184                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28185 7449           FF76         06            push	6[bp]
28186                                           ! Debug: func () void = write_byte+0 (used reg = )
28187 744C           E8         08F1            call	_write_byte
28188 744F           83C4                   06  add	sp,*6
28189                                           !BCC_EOS
28190                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28191 7452           8B46         08            mov	ax,8[bp]
28192 7455           40                         inc	ax
28193 7456           8946         08            mov	8[bp],ax
28194                                           !BCC_EOS
28195                                           ! 3999         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
28196                                           ! Debug: list int = const $60 (used reg = )
28197 7459           B8                   0060  mov	ax,*$60
28198 745C           50                         push	ax
28199                                           ! Debug: list int = const $40 (used reg = )
28200 745D           B8                   0040  mov	ax,*$40
28201 7460           50                         push	ax
28202                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28203 7461           E8         08C9            call	_read_word
28204 7464           83C4                   04  add	sp,*4
28205                                           ! Debug: list unsigned short = ax+0 (used reg = )
28206 7467           50                         push	ax
28207                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28208 7468           FF76         08            push	8[bp]
28209                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28210 746B           FF76         06            push	6[bp]
28211                                           ! Debug: func () void = write_word+0 (used reg = )
28212 746E           E8         08E7            call	_write_word
28213 7471           83C4                   06  add	sp,*6
28214                                           !BCC_EOS
28215                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28216 7474           8B46         08            mov	ax,8[bp]
28217 7477           40                         inc	ax
28218 7478           40                         inc	ax
28219 7479           8946         08            mov	8[bp],ax
28220                                           !BCC_EOS
28221                                           ! 4000         for(i=0;i<8;i++) {
28222                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28223 747C           31C0                       xor	ax,ax
28224 747E           8946         FE            mov	-2[bp],ax
28225                                           !BCC_EOS
28226                                           !BCC_EOS
28227 7481           EB           2F            jmp .276
28228                       00007483            .277:
28229                                           ! 4001             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
28230                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
28231                                           ! Debug: expression subtree swapping
28232 7483           8B46         FE            mov	ax,-2[bp]
28233 7486           D1E0                       shl	ax,*1
28234                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28235                                           ! Debug: expression subtree swapping
28236                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28237 7488           05                   0050  add	ax,*$50
28238 748B           50                         push	ax
28239                                           ! Debug: list int = const $40 (used reg = )
28240 748C           B8                   0040  mov	ax,*$40
28241 748F           50                         push	ax
28242                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28243 7490           E8         089A            call	_read_word
28244 7493           83C4                   04  add	sp,*4
28245                                           ! Debug: list unsigned short = ax+0 (used reg = )
28246 7496           50                         push	ax
28247                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28248 7497           FF76         08            push	8[bp]
28249                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28250 749A           FF76         06            push	6[bp]
28251                                           ! Debug: func () void = write_word+0 (used reg = )
28252 749D           E8         08B8            call	_write_word
28253 74A0           83C4                   06  add	sp,*6
28254                                           !BCC_EOS
28255                                           ! 4002             BX += 2;
28256                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28257 74A3           8B46         08            mov	ax,8[bp]
28258 74A6           40                         inc	ax
28259 74A7           40                         inc	ax
28260 74A8           8946         08            mov	8[bp],ax
28261                                           !BCC_EOS
28262                                           ! 4003         }
28263                                           ! 4004         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
28264                       000074AB            .275:
28265                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28266 74AB           8B46         FE            mov	ax,-2[bp]
28267 74AE           40                         inc	ax
28268 74AF           8946         FE            mov	-2[bp],ax
28269                       000074B2            .276:
28270                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28271 74B2           8B46         FE            mov	ax,-2[bp]
28272 74B5           3D                   0008  cmp	ax,*8
28273 74B8           72           C9            jb 	.277
28274                       000074BA            .278:
28275                       000074BA            .274:
28276                                           ! Debug: list int = const $4E (used reg = )
28277 74BA           B8                   004E  mov	ax,*$4E
28278 74BD           50                         push	ax
28279                                           ! Debug: list int = const $40 (used reg = )
28280 74BE           B8                   0040  mov	ax,*$40
28281 74C1           50                         push	ax
28282                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28283 74C2           E8         0868            call	_read_word
28284 74C5           83C4                   04  add	sp,*4
28285                                           ! Debug: list unsigned short = ax+0 (used reg = )
28286 74C8           50                         push	ax
28287                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28288 74C9           FF76         08            push	8[bp]
28289                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28290 74CC           FF76         06            push	6[bp]
28291                                           ! Debug: func () void = write_word+0 (used reg = )
28292 74CF           E8         0886            call	_write_word
28293 74D2           83C4                   06  add	sp,*6
28294                                           !BCC_EOS
28295                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28296 74D5           8B46         08            mov	ax,8[bp]
28297 74D8           40                         inc	ax
28298 74D9           40                         inc	ax
28299 74DA           8946         08            mov	8[bp],ax
28300                                           !BCC_EOS
28301                                           ! 4005         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28302                                           ! Debug: list int = const $62 (used reg = )
28303 74DD           B8                   0062  mov	ax,*$62
28304 74E0           50                         push	ax
28305                                           ! Debug: list int = const $40 (used reg = )
28306 74E1           B8                   0040  mov	ax,*$40
28307 74E4           50                         push	ax
28308                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28309 74E5           E8         0832            call	_read_byte
28310 74E8           83C4                   04  add	sp,*4
28311                                           ! Debug: list unsigned char = al+0 (used reg = )
28312 74EB           30E4                       xor	ah,ah
28313 74ED           50                         push	ax
28314                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28315 74EE           FF76         08            push	8[bp]
28316                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28317 74F1           FF76         06            push	6[bp]
28318                                           ! Debug: func () void = write_byte+0 (used reg = )
28319 74F4           E8         0849            call	_write_byte
28320 74F7           83C4                   06  add	sp,*6
28321                                           !BCC_EOS
28322                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28323 74FA           8B46         08            mov	ax,8[bp]
28324 74FD           40                         inc	ax
28325 74FE           8946         08            mov	8[bp],ax
28326                                           !BCC_EOS
28327                                           ! 4006         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28328                                           ! Debug: list int = const $7C (used reg = )
28329 7501           B8                   007C  mov	ax,*$7C
28330 7504           50                         push	ax
28331                                           ! Debug: list int = const 0 (used reg = )
28332 7505           31C0                       xor	ax,ax
28333 7507           50                         push	ax
28334                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28335 7508           E8         0822            call	_read_word
28336 750B           83C4                   04  add	sp,*4
28337                                           ! Debug: list unsigned short = ax+0 (used reg = )
28338 750E           50                         push	ax
28339                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28340 750F           FF76         08            push	8[bp]
28341                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28342 7512           FF76         06            push	6[bp]
28343                                           ! Debug: func () void = write_word+0 (used reg = )
28344 7515           E8         0840            call	_write_word
28345 7518           83C4                   06  add	sp,*6
28346                                           !BCC_EOS
28347                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28348 751B           8B46         08            mov	ax,8[bp]
28349 751E           40                         inc	ax
28350 751F           40                         inc	ax
28351 7520           8946         08            mov	8[bp],ax
28352                                           !BCC_EOS
28353                                           ! 4007         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28354                                           ! Debug: list int = const $7E (used reg = )
28355 7523           B8                   007E  mov	ax,*$7E
28356 7526           50                         push	ax
28357                                           ! Debug: list int = const 0 (used reg = )
28358 7527           31C0                       xor	ax,ax
28359 7529           50                         push	ax
28360                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28361 752A           E8         0800            call	_read_word
28362 752D           83C4                   04  add	sp,*4
28363                                           ! Debug: list unsigned short = ax+0 (used reg = )
28364 7530           50                         push	ax
28365                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28366 7531           FF76         08            push	8[bp]
28367                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28368 7534           FF76         06            push	6[bp]
28369                                           ! Debug: func () void = write_word+0 (used reg = )
28370 7537           E8         081E            call	_write_word
28371 753A           83C4                   06  add	sp,*6
28372                                           !BCC_EOS
28373                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28374 753D           8B46         08            mov	ax,8[bp]
28375 7540           40                         inc	ax
28376 7541           40                         inc	ax
28377 7542           8946         08            mov	8[bp],ax
28378                                           !BCC_EOS
28379                                           ! 4008         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28380                                           ! Debug: list int = const $10C (used reg = )
28381 7545           B8                   010C  mov	ax,#$10C
28382 7548           50                         push	ax
28383                                           ! Debug: list int = const 0 (used reg = )
28384 7549           31C0                       xor	ax,ax
28385 754B           50                         push	ax
28386                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28387 754C           E8         07DE            call	_read_word
28388 754F           83C4                   04  add	sp,*4
28389                                           ! Debug: list unsigned short = ax+0 (used reg = )
28390 7552           50                         push	ax
28391                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28392 7553           FF76         08            push	8[bp]
28393                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28394 7556           FF76         06            push	6[bp]
28395                                           ! Debug: func () void = write_word+0 (used reg = )
28396 7559           E8         07FC            call	_write_word
28397 755C           83C4                   06  add	sp,*6
28398                                           !BCC_EOS
28399                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28400 755F           8B46         08            mov	ax,8[bp]
28401 7562           40                         inc	ax
28402 7563           40                         inc	ax
28403 7564           8946         08            mov	8[bp],ax
28404                                           !BCC_EOS
28405                                           ! 4009         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28406                                           ! Debug: list int = const $10E (used reg = )
28407 7567           B8                   010E  mov	ax,#$10E
28408 756A           50                         push	ax
28409                                           ! Debug: list int = const 0 (used reg = )
28410 756B           31C0                       xor	ax,ax
28411 756D           50                         push	ax
28412                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28413 756E           E8         07BC            call	_read_word
28414 7571           83C4                   04  add	sp,*4
28415                                           ! Debug: list unsigned short = ax+0 (used reg = )
28416 7574           50                         push	ax
28417                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28418 7575           FF76         08            push	8[bp]
28419                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28420 7578           FF76         06            push	6[bp]
28421                                           ! Debug: func () void = write_word+0 (used reg = )
28422 757B           E8         07DA            call	_write_word
28423 757E           83C4                   06  add	sp,*6
28424                                           !BCC_EOS
28425                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28426 7581           8B46         08            mov	ax,8[bp]
28427 7584           40                         inc	ax
28428 7585           40                         inc	ax
28429 7586           8946         08            mov	8[bp],ax
28430                                           !BCC_EOS
28431                                           ! 4010     }
28432                                           ! 4011     if (CX & 4) {
28433                       00007589            .272:
28434                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28435 7589           8A46         04            mov	al,4[bp]
28436 758C           24                     04  and	al,*4
28437 758E           84C0                       test	al,al
28438 7590         0F84         00B5            beq 	.279
28439                       00007594            .27A:
28440                                           ! 4012         write_byte(ES, BX, inb(0x3c7)); BX++;
28441                                           ! Debug: list int = const $3C7 (used reg = )
28442 7594           B8                   03C7  mov	ax,#$3C7
28443 7597           50                         push	ax
28444                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28445 7598           E8         07D5            call	_inb
28446 759B           44                         inc	sp
28447 759C           44                         inc	sp
28448                                           ! Debug: list unsigned char = al+0 (used reg = )
28449 759D           30E4                       xor	ah,ah
28450 759F           50                         push	ax
28451                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28452 75A0           FF76         08            push	8[bp]
28453                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28454 75A3           FF76         06            push	6[bp]
28455                                           ! Debug: func () void = write_byte+0 (used reg = )
28456 75A6           E8         0797            call	_write_byte
28457 75A9           83C4                   06  add	sp,*6
28458                                           !BCC_EOS
28459                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28460 75AC           8B46         08            mov	ax,8[bp]
28461 75AF           40                         inc	ax
28462 75B0           8946         08            mov	8[bp],ax
28463                                           !BCC_EOS
28464                                           ! 4013         write_byte(ES, BX, inb(0x3c8)); BX++;
28465                                           ! Debug: list int = const $3C8 (used reg = )
28466 75B3           B8                   03C8  mov	ax,#$3C8
28467 75B6           50                         push	ax
28468                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28469 75B7           E8         07B6            call	_inb
28470 75BA           44                         inc	sp
28471 75BB           44                         inc	sp
28472                                           ! Debug: list unsigned char = al+0 (used reg = )
28473 75BC           30E4                       xor	ah,ah
28474 75BE           50                         push	ax
28475                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28476 75BF           FF76         08            push	8[bp]
28477                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28478 75C2           FF76         06            push	6[bp]
28479                                           ! Debug: func () void = write_byte+0 (used reg = )
28480 75C5           E8         0778            call	_write_byte
28481 75C8           83C4                   06  add	sp,*6
28482                                           !BCC_EOS
28483                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28484 75CB           8B46         08            mov	ax,8[bp]
28485 75CE           40                         inc	ax
28486 75CF           8946         08            mov	8[bp],ax
28487                                           !BCC_EOS
28488                                           ! 4014         write_byte(ES, BX, inb(0x3c6)); BX++;
28489                                           ! Debug: list int = const $3C6 (used reg = )
28490 75D2           B8                   03C6  mov	ax,#$3C6
28491 75D5           50                         push	ax
28492                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28493 75D6           E8         0797            call	_inb
28494 75D9           44                         inc	sp
28495 75DA           44                         inc	sp
28496                                           ! Debug: list unsigned char = al+0 (used reg = )
28497 75DB           30E4                       xor	ah,ah
28498 75DD           50                         push	ax
28499                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28500 75DE           FF76         08            push	8[bp]
28501                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28502 75E1           FF76         06            push	6[bp]
28503                                           ! Debug: func () void = write_byte+0 (used reg = )
28504 75E4           E8         0759            call	_write_byte
28505 75E7           83C4                   06  add	sp,*6
28506                                           !BCC_EOS
28507                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28508 75EA           8B46         08            mov	ax,8[bp]
28509 75ED           40                         inc	ax
28510 75EE           8946         08            mov	8[bp],ax
28511                                           !BCC_EOS
28512                                           ! 4015         outb(0x3c8,0x00);
28513                                           ! Debug: list int = const 0 (used reg = )
28514 75F1           31C0                       xor	ax,ax
28515 75F3           50                         push	ax
28516                                           ! Debug: list int = const $3C8 (used reg = )
28517 75F4           B8                   03C8  mov	ax,#$3C8
28518 75F7           50                         push	ax
28519                                           ! Debug: func () void = outb+0 (used reg = )
28520 75F8           E8         078B            call	_outb
28521 75FB           83C4                   04  add	sp,*4
28522                                           !BCC_EOS
28523                                           ! 4016         for(i=0;i<256*3;i++) {
28524                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28525 75FE           31C0                       xor	ax,ax
28526 7600           8946         FE            mov	-2[bp],ax
28527                                           !BCC_EOS
28528                                           !BCC_EOS
28529 7603           EB           26            jmp .27D
28530                       00007605            .27E:
28531                                           ! 4017             write_byte(ES, BX, inb(0x3c9)); BX++;
28532                                           ! Debug: list int = const $3C9 (used reg = )
28533 7605           B8                   03C9  mov	ax,#$3C9
28534 7608           50                         push	ax
28535                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28536 7609           E8         0764            call	_inb
28537 760C           44                         inc	sp
28538 760D           44                         inc	sp
28539                                           ! Debug: list unsigned char = al+0 (used reg = )
28540 760E           30E4                       xor	ah,ah
28541 7610           50                         push	ax
28542                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28543 7611           FF76         08            push	8[bp]
28544                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28545 7614           FF76         06            push	6[bp]
28546                                           ! Debug: func () void = write_byte+0 (used reg = )
28547 7617           E8         0726            call	_write_byte
28548 761A           83C4                   06  add	sp,*6
28549                                           !BCC_EOS
28550                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28551 761D           8B46         08            mov	ax,8[bp]
28552 7620           40                         inc	ax
28553 7621           8946         08            mov	8[bp],ax
28554                                           !BCC_EOS
28555                                           ! 4018         }
28556                                           ! 4019         write_byte(ES, BX, 0); BX++;
28557                       00007624            .27C:
28558                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28559 7624           8B46         FE            mov	ax,-2[bp]
28560 7627           40                         inc	ax
28561 7628           8946         FE            mov	-2[bp],ax
28562                       0000762B            .27D:
28563                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28564 762B           8B46         FE            mov	ax,-2[bp]
28565 762E           3D                   0300  cmp	ax,#$300
28566 7631           72           D2            jb 	.27E
28567                       00007633            .27F:
28568                       00007633            .27B:
28569                                           ! Debug: list int = const 0 (used reg = )
28570 7633           31C0                       xor	ax,ax
28571 7635           50                         push	ax
28572                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28573 7636           FF76         08            push	8[bp]
28574                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28575 7639           FF76         06            push	6[bp]
28576                                           ! Debug: func () void = write_byte+0 (used reg = )
28577 763C           E8         0701            call	_write_byte
28578 763F           83C4                   06  add	sp,*6
28579                                           !BCC_EOS
28580                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28581 7642           8B46         08            mov	ax,8[bp]
28582 7645           40                         inc	ax
28583 7646           8946         08            mov	8[bp],ax
28584                                           !BCC_EOS
28585                                           ! 4020     }
28586                                           ! 4021     return BX;
28587                       00007649            .279:
28588 7649           8B46         08            mov	ax,8[bp]
28589 764C           89EC                       mov	sp,bp
28590 764E           5D                         pop	bp
28591 764F           C3                         ret
28592                                           !BCC_EOS
28593                                           ! 4022 }
28594                                           ! 4023 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28595                                           ! 4024      Bit16u CX;Bit16u ES;Bit16u BX;
28596                       00007650            _biosfn_restore_video_state:
28597                                           !BCC_EOS
28598                                           !BCC_EOS
28599                                           !BCC_EOS
28600                                           ! 4025 {
28601                                           ! 4026     Bit16u i, crtc_addr, v, addr1, ar_index;
28602                                           !BCC_EOS
28603                                           ! 4027     if (CX & 1) {
28604 7650           55                         push	bp
28605 7651           89E5                       mov	bp,sp
28606 7653           83C4                   F6  add	sp,*-$A
28607                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28608 7656           8A46         04            mov	al,4[bp]
28609 7659           24                     01  and	al,*1
28610 765B           84C0                       test	al,al
28611 765D         0F84         02AA            beq 	.280
28612                       00007661            .281:
28613                                           ! 4028         inb(0x3da);
28614                                           ! Debug: list int = const $3DA (used reg = )
28615 7661           B8                   03DA  mov	ax,#$3DA
28616 7664           50                         push	ax
28617                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28618 7665           E8         0708            call	_inb
28619 7668           44                         inc	sp
28620 7669           44                         inc	sp
28621                                           !BCC_EOS
28622                                           ! 4029         crtc_addr = read_word(ES, BX + 0x40);
28623                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28624 766A           8B46         08            mov	ax,8[bp]
28625                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28626 766D           05                   0040  add	ax,*$40
28627 7670           50                         push	ax
28628                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28629 7671           FF76         06            push	6[bp]
28630                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28631 7674           E8         06B6            call	_read_word
28632 7677           83C4                   04  add	sp,*4
28633                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28634 767A           8946         FC            mov	-4[bp],ax
28635                                           !BCC_EOS
28636                                           ! 4030         addr1 = BX;
28637                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28638 767D           8B46         08            mov	ax,8[bp]
28639 7680           8946         F8            mov	-8[bp],ax
28640                                           !BCC_EOS
28641                                           ! 4031         BX += 5;
28642                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28643 7683           8B46         08            mov	ax,8[bp]
28644 7686           05                   0005  add	ax,*5
28645 7689           8946         08            mov	8[bp],ax
28646                                           !BCC_EOS
28647                                           ! 4032         for(i=1;i<=4;i++){
28648                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28649 768C           B8                   0001  mov	ax,*1
28650 768F           8946         FE            mov	-2[bp],ax
28651                                           !BCC_EOS
28652                                           !BCC_EOS
28653 7692           EB           34            jmp .284
28654                       00007694            .285:
28655                                           ! 4033             outb(0x3c4, i);
28656                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28657 7694           FF76         FE            push	-2[bp]
28658                                           ! Debug: list int = const $3C4 (used reg = )
28659 7697           B8                   03C4  mov	ax,#$3C4
28660 769A           50                         push	ax
28661                                           ! Debug: func () void = outb+0 (used reg = )
28662 769B           E8         06E8            call	_outb
28663 769E           83C4                   04  add	sp,*4
28664                                           !BCC_EOS
28665                                           ! 4034             outb(0x3c5, read_byte(ES, BX)); BX++;
28666                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28667 76A1           FF76         08            push	8[bp]
28668                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28669 76A4           FF76         06            push	6[bp]
28670                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28671 76A7           E8         0670            call	_read_byte
28672 76AA           83C4                   04  add	sp,*4
28673                                           ! Debug: list unsigned char = al+0 (used reg = )
28674 76AD           30E4                       xor	ah,ah
28675 76AF           50                         push	ax
28676                                           ! Debug: list int = const $3C5 (used reg = )
28677 76B0           B8                   03C5  mov	ax,#$3C5
28678 76B3           50                         push	ax
28679                                           ! Debug: func () void = outb+0 (used reg = )
28680 76B4           E8         06CF            call	_outb
28681 76B7           83C4                   04  add	sp,*4
28682                                           !BCC_EOS
28683                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28684 76BA           8B46         08            mov	ax,8[bp]
28685 76BD           40                         inc	ax
28686 76BE           8946         08            mov	8[bp],ax
28687                                           !BCC_EOS
28688                                           ! 4035         }
28689                                           ! 4036         outb(0x3c4, 0);
28690                       000076C1            .283:
28691                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28692 76C1           8B46         FE            mov	ax,-2[bp]
28693 76C4           40                         inc	ax
28694 76C5           8946         FE            mov	-2[bp],ax
28695                       000076C8            .284:
28696                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28697 76C8           8B46         FE            mov	ax,-2[bp]
28698 76CB           3D                   0004  cmp	ax,*4
28699 76CE           76           C4            jbe	.285
28700                       000076D0            .286:
28701                       000076D0            .282:
28702                                           ! Debug: list int = const 0 (used reg = )
28703 76D0           31C0                       xor	ax,ax
28704 76D2           50                         push	ax
28705                                           ! Debug: list int = const $3C4 (used reg = )
28706 76D3           B8                   03C4  mov	ax,#$3C4
28707 76D6           50                         push	ax
28708                                           ! Debug: func () void = outb+0 (used reg = )
28709 76D7           E8         06AC            call	_outb
28710 76DA           83C4                   04  add	sp,*4
28711                                           !BCC_EOS
28712                                           ! 4037         outb(0x3c5, read_byte(ES, BX)); BX++;
28713                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28714 76DD           FF76         08            push	8[bp]
28715                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28716 76E0           FF76         06            push	6[bp]
28717                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28718 76E3           E8         0634            call	_read_byte
28719 76E6           83C4                   04  add	sp,*4
28720                                           ! Debug: list unsigned char = al+0 (used reg = )
28721 76E9           30E4                       xor	ah,ah
28722 76EB           50                         push	ax
28723                                           ! Debug: list int = const $3C5 (used reg = )
28724 76EC           B8                   03C5  mov	ax,#$3C5
28725 76EF           50                         push	ax
28726                                           ! Debug: func () void = outb+0 (used reg = )
28727 76F0           E8         0693            call	_outb
28728 76F3           83C4                   04  add	sp,*4
28729                                           !BCC_EOS
28730                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28731 76F6           8B46         08            mov	ax,8[bp]
28732 76F9           40                         inc	ax
28733 76FA           8946         08            mov	8[bp],ax
28734                                           !BCC_EOS
28735                                           ! 4038         outw(crtc_addr,0x0011);
28736                                           ! Debug: list int = const $11 (used reg = )
28737 76FD           B8                   0011  mov	ax,*$11
28738 7700           50                         push	ax
28739                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28740 7701           FF76         FC            push	-4[bp]
28741                                           ! Debug: func () void = outw+0 (used reg = )
28742 7704           E8         068F            call	_outw
28743 7707           83C4                   04  add	sp,*4
28744                                           !BCC_EOS
28745                                           ! 4039         for(i=
28746                                           ! 4039 0;i<=0x18;i++) {
28747                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28748 770A           31C0                       xor	ax,ax
28749 770C           8946         FE            mov	-2[bp],ax
28750                                           !BCC_EOS
28751                                           !BCC_EOS
28752 770F           EB           3C            jmp .289
28753                       00007711            .28A:
28754                                           ! 4040             if (i != 0x11) {
28755                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28756 7711           8B46         FE            mov	ax,-2[bp]
28757 7714           3D                   0011  cmp	ax,*$11
28758 7717           74           26            je  	.28B
28759                       00007719            .28C:
28760                                           ! 4041                 outb(crtc_addr,i);
28761                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28762 7719           FF76         FE            push	-2[bp]
28763                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28764 771C           FF76         FC            push	-4[bp]
28765                                           ! Debug: func () void = outb+0 (used reg = )
28766 771F           E8         0664            call	_outb
28767 7722           83C4                   04  add	sp,*4
28768                                           !BCC_EOS
28769                                           ! 4042                 outb(crtc_addr+1, read_byte(ES, BX));
28770                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28771 7725           FF76         08            push	8[bp]
28772                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28773 7728           FF76         06            push	6[bp]
28774                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28775 772B           E8         05EC            call	_read_byte
28776 772E           83C4                   04  add	sp,*4
28777                                           ! Debug: list unsigned char = al+0 (used reg = )
28778 7731           30E4                       xor	ah,ah
28779 7733           50                         push	ax
28780                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28781 7734           8B46         FC            mov	ax,-4[bp]
28782                                           ! Debug: list unsigned int = ax+1 (used reg = )
28783 7737           40                         inc	ax
28784 7738           50                         push	ax
28785                                           ! Debug: func () void = outb+0 (used reg = )
28786 7739           E8         064A            call	_outb
28787 773C           83C4                   04  add	sp,*4
28788                                           !BCC_EOS
28789                                           ! 4043             }
28790                                           ! 4044             BX++;
28791                       0000773F            .28B:
28792                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28793 773F           8B46         08            mov	ax,8[bp]
28794 7742           40                         inc	ax
28795 7743           8946         08            mov	8[bp],ax
28796                                           !BCC_EOS
28797                                           ! 4045         }
28798                                           ! 4046         v = inb(0x3cc) & ~0x01;
28799                       00007746            .288:
28800                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28801 7746           8B46         FE            mov	ax,-2[bp]
28802 7749           40                         inc	ax
28803 774A           8946         FE            mov	-2[bp],ax
28804                       0000774D            .289:
28805                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28806 774D           8B46         FE            mov	ax,-2[bp]
28807 7750           3D                   0018  cmp	ax,*$18
28808 7753           76           BC            jbe	.28A
28809                       00007755            .28D:
28810                       00007755            .287:
28811                                           ! Debug: list int = const $3CC (used reg = )
28812 7755           B8                   03CC  mov	ax,#$3CC
28813 7758           50                         push	ax
28814                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28815 7759           E8         0614            call	_inb
28816 775C           44                         inc	sp
28817 775D           44                         inc	sp
28818                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28819 775E           24                     FE  and	al,#$FE
28820                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28821 7760           30E4                       xor	ah,ah
28822 7762           8946         FA            mov	-6[bp],ax
28823                                           !BCC_EOS
28824                                           ! 4047         if (crtc_addr = 0x3d4)
28825                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28826 7765           B8                   03D4  mov	ax,#$3D4
28827 7768           8946         FC            mov	-4[bp],ax
28828 776B           85C0                       test	ax,ax
28829 776D           74           08            je  	.28E
28830                       0000776F            .28F:
28831                                           ! 4048             v |= 0x01;
28832                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28833 776F           8B46         FA            mov	ax,-6[bp]
28834 7772           0C                     01  or	al,*1
28835 7774           8946         FA            mov	-6[bp],ax
28836                                           !BCC_EOS
28837                                           ! 4049         outb(0x3c2, v);
28838                       00007777            .28E:
28839                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28840 7777           FF76         FA            push	-6[bp]
28841                                           ! Debug: list int = const $3C2 (used reg = )
28842 777A           B8                   03C2  mov	ax,#$3C2
28843 777D           50                         push	ax
28844                                           ! Debug: func () void = outb+0 (used reg = )
28845 777E           E8         0605            call	_outb
28846 7781           83C4                   04  add	sp,*4
28847                                           !BCC_EOS
28848                                           ! 4050         outb(crtc_addr, 0x11);
28849                                           ! Debug: list int = const $11 (used reg = )
28850 7784           B8                   0011  mov	ax,*$11
28851 7787           50                         push	ax
28852                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28853 7788           FF76         FC            push	-4[bp]
28854                                           ! Debug: func () void = outb+0 (used reg = )
28855 778B           E8         05F8            call	_outb
28856 778E           83C4                   04  add	sp,*4
28857                                           !BCC_EOS
28858                                           ! 4051         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28859                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28860 7791           8B46         08            mov	ax,8[bp]
28861                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28862                                           ! Debug: list unsigned int = ax-7 (used reg = )
28863 7794           05                   FFF9  add	ax,*-7
28864 7797           50                         push	ax
28865                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28866 7798           FF76         06            push	6[bp]
28867                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28868 779B           E8         057C            call	_read_byte
28869 779E           83C4                   04  add	sp,*4
28870                                           ! Debug: list unsigned char = al+0 (used reg = )
28871 77A1           30E4                       xor	ah,ah
28872 77A3           50                         push	ax
28873                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28874 77A4           8B46         FC            mov	ax,-4[bp]
28875                                           ! Debug: list unsigned int = ax+1 (used reg = )
28876 77A7           40                         inc	ax
28877 77A8           50                         push	ax
28878                                           ! Debug: func () void = outb+0 (used reg = )
28879 77A9           E8         05DA            call	_outb
28880 77AC           83C4                   04  add	sp,*4
28881                                           !BCC_EOS
28882                                           ! 4052         ar_index = read_byte(ES, addr1 + 0x03);
28883                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28884 77AF           8B46         F8            mov	ax,-8[bp]
28885                                           ! Debug: list unsigned int = ax+3 (used reg = )
28886 77B2           05                   0003  add	ax,*3
28887 77B5           50                         push	ax
28888                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28889 77B6           FF76         06            push	6[bp]
28890                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28891 77B9           E8         055E            call	_read_byte
28892 77BC           83C4                   04  add	sp,*4
28893                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28894 77BF           30E4                       xor	ah,ah
28895 77C1           8946         F6            mov	-$A[bp],ax
28896                                           !BCC_EOS
28897                                           ! 4053         inb(0x3da);
28898                                           ! Debug: list int = const $3DA (used reg = )
28899 77C4           B8                   03DA  mov	ax,#$3DA
28900 77C7           50                         push	ax
28901                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28902 77C8           E8         05A5            call	_inb
28903 77CB           44                         inc	sp
28904 77CC           44                         inc	sp
28905                                           !BCC_EOS
28906                                           ! 4054         for(i=0;i<=0x13;i++) {
28907                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28908 77CD           31C0                       xor	ax,ax
28909 77CF           8946         FE            mov	-2[bp],ax
28910                                           !BCC_EOS
28911                                           !BCC_EOS
28912 77D2           EB           3C            jmp .292
28913                       000077D4            .293:
28914                                           ! 4055             outb(0x3c0, i | (ar_index & 0x20));
28915                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28916 77D4           8A46         F6            mov	al,-$A[bp]
28917 77D7           24                     20  and	al,*$20
28918                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28919                                           ! Debug: expression subtree swapping
28920 77D9           30E4                       xor	ah,ah
28921 77DB           0B46         FE            or	ax,-2[bp]
28922                                           ! Debug: list unsigned int = ax+0 (used reg = )
28923 77DE           50                         push	ax
28924                                           ! Debug: list int = const $3C0 (used reg = )
28925 77DF           B8                   03C0  mov	ax,#$3C0
28926 77E2           50                         push	ax
28927                                           ! Debug: func () void = outb+0 (used reg = )
28928 77E3           E8         05A0            call	_outb
28929 77E6           83C4                   04  add	sp,*4
28930                                           !BCC_EOS
28931                                           ! 4056             outb(0x3c0, read_byte(ES, BX)); BX++;
28932                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28933 77E9           FF76         08            push	8[bp]
28934                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28935 77EC           FF76         06            push	6[bp]
28936                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28937 77EF           E8         0528            call	_read_byte
28938 77F2           83C4                   04  add	sp,*4
28939                                           ! Debug: list unsigned char = al+0 (used reg = )
28940 77F5           30E4                       xor	ah,ah
28941 77F7           50                         push	ax
28942                                           ! Debug: list int = const $3C0 (used reg = )
28943 77F8           B8                   03C0  mov	ax,#$3C0
28944 77FB           50                         push	ax
28945                                           ! Debug: func () void = outb+0 (used reg = )
28946 77FC           E8         0587            call	_outb
28947 77FF           83C4                   04  add	sp,*4
28948                                           !BCC_EOS
28949                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28950 7802           8B46         08            mov	ax,8[bp]
28951 7805           40                         inc	ax
28952 7806           8946         08            mov	8[bp],ax
28953                                           !BCC_EOS
28954                                           ! 4057         }
28955                                           ! 4058         outb(0x3c0, ar_index);
28956                       00007809            .291:
28957                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28958 7809           8B46         FE            mov	ax,-2[bp]
28959 780C           40                         inc	ax
28960 780D           8946         FE            mov	-2[bp],ax
28961                       00007810            .292:
28962                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28963 7810           8B46         FE            mov	ax,-2[bp]
28964 7813           3D                   0013  cmp	ax,*$13
28965 7816           76           BC            jbe	.293
28966                       00007818            .294:
28967                       00007818            .290:
28968                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28969 7818           FF76         F6            push	-$A[bp]
28970                                           ! Debug: list int = const $3C0 (used reg = )
28971 781B           B8                   03C0  mov	ax,#$3C0
28972 781E           50                         push	ax
28973                                           ! Debug: func () void = outb+0 (used reg = )
28974 781F           E8         0564            call	_outb
28975 7822           83C4                   04  add	sp,*4
28976                                           !BCC_EOS
28977                                           ! 4059         inb(0x3da);
28978                                           ! Debug: list int = const $3DA (used reg = )
28979 7825           B8                   03DA  mov	ax,#$3DA
28980 7828           50                         push	ax
28981                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28982 7829           E8         0544            call	_inb
28983 782C           44                         inc	sp
28984 782D           44                         inc	sp
28985                                           !BCC_EOS
28986                                           ! 4060         for(i=0;i<=8;i++) {
28987                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28988 782E           31C0                       xor	ax,ax
28989 7830           8946         FE            mov	-2[bp],ax
28990                                           !BCC_EOS
28991                                           !BCC_EOS
28992 7833           EB           34            jmp .297
28993                       00007835            .298:
28994                                           ! 4061             outb(0x3ce,i);
28995                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28996 7835           FF76         FE            push	-2[bp]
28997                                           ! Debug: list int = const $3CE (used reg = )
28998 7838           B8                   03CE  mov	ax,#$3CE
28999 783B           50                         push	ax
29000                                           ! Debug: func () void = outb+0 (used reg = )
29001 783C           E8         0547            call	_outb
29002 783F           83C4                   04  add	sp,*4
29003                                           !BCC_EOS
29004                                           ! 4062             outb(0x3cf, read_byte(ES, BX)); BX++;
29005                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29006 7842           FF76         08            push	8[bp]
29007                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29008 7845           FF76         06            push	6[bp]
29009                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29010 7848           E8         04CF            call	_read_byte
29011 784B           83C4                   04  add	sp,*4
29012                                           ! Debug: list unsigned char = al+0 (used reg = )
29013 784E           30E4                       xor	ah,ah
29014 7850           50                         push	ax
29015                                           ! Debug: list int = const $3CF (used reg = )
29016 7851           B8                   03CF  mov	ax,#$3CF
29017 7854           50                         push	ax
29018                                           ! Debug: func () void = outb+0 (used reg = )
29019 7855           E8         052E            call	_outb
29020 7858           83C4                   04  add	sp,*4
29021                                           !BCC_EOS
29022                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29023 785B           8B46         08            mov	ax,8[bp]
29024 785E           40                         inc	ax
29025 785F           8946         08            mov	8[bp],ax
29026                                           !BCC_EOS
29027                                           ! 4063         }
29028                                           ! 4064         BX += 2;
29029                       00007862            .296:
29030                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29031 7862           8B46         FE            mov	ax,-2[bp]
29032 7865           40                         inc	ax
29033 7866           8946         FE            mov	-2[bp],ax
29034                       00007869            .297:
29035                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29036 7869           8B46         FE            mov	ax,-2[bp]
29037 786C           3D                   0008  cmp	ax,*8
29038 786F           76           C4            jbe	.298
29039                       00007871            .299:
29040                       00007871            .295:
29041                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29042 7871           8B46         08            mov	ax,8[bp]
29043 7874           40                         inc	ax
29044 7875           40                         inc	ax
29045 7876           8946         08            mov	8[bp],ax
29046                                           !BCC_EOS
29047                                           ! 4065         BX += 4;
29048                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
29049 7879           8B46         08            mov	ax,8[bp]
29050 787C           05                   0004  add	ax,*4
29051 787F           8946         08            mov	8[bp],ax
29052                                           !BCC_EOS
29053                                           ! 4066         outb(0x3c4, read_byte(ES, addr1)); addr1++;
29054                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29055 7882           FF76         F8            push	-8[bp]
29056                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29057 7885           FF76         06            push	6[bp]
29058                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29059 7888           E8         048F            call	_read_byte
29060 788B           83C4                   04  add	sp,*4
29061                                           ! Debug: list unsigned char = al+0 (used reg = )
29062 788E           30E4                       xor	ah,ah
29063 7890           50                         push	ax
29064                                           ! Debug: list int = const $3C4 (used reg = )
29065 7891           B8                   03C4  mov	ax,#$3C4
29066 7894           50                         push	ax
29067                                           ! Debug: func () void = outb+0 (used reg = )
29068 7895           E8         04EE            call	_outb
29069 7898           83C4                   04  add	sp,*4
29070                                           !BCC_EOS
29071                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29072 789B           8B46         F8            mov	ax,-8[bp]
29073 789E           40                         inc	ax
29074 789F           8946         F8            mov	-8[bp],ax
29075                                           !BCC_EOS
29076                                           ! 4067         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
29077                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29078 78A2           FF76         F8            push	-8[bp]
29079                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29080 78A5           FF76         06            push	6[bp]
29081                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29082 78A8           E8         046F            call	_read_byte
29083 78AB           83C4                   04  add	sp,*4
29084                                           ! Debug: list unsigned char = al+0 (used reg = )
29085 78AE           30E4                       xor	ah,ah
29086 78B0           50                         push	ax
29087                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
29088 78B1           FF76         FC            push	-4[bp]
29089                                           ! Debug: func () void = outb+0 (used reg = )
29090 78B4           E8         04CF            call	_outb
29091 78B7           83C4                   04  add	sp,*4
29092                                           !BCC_EOS
29093                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29094 78BA           8B46         F8            mov	ax,-8[bp]
29095 78BD           40                         inc	ax
29096 78BE           8946         F8            mov	-8[bp],ax
29097                                           !BCC_EOS
29098                                           ! 4068         outb(0x3ce, read_byte(ES, addr1)); addr1++;
29099                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29100 78C1           FF76         F8            push	-8[bp]
29101                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29102 78C4           FF76         06            push	6[bp]
29103                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29104 78C7           E8         0450            call	_read_byte
29105 78CA           83C4                   04  add	sp,*4
29106                                           ! Debug: list unsigned char = al+0 (used reg = )
29107 78CD           30E4                       xor	ah,ah
29108 78CF           50                         push	ax
29109                                           ! Debug: list int = const $3CE (used reg = )
29110 78D0           B8                   03CE  mov	ax,#$3CE
29111 78D3           50                         push	ax
29112                                           ! Debug: func () void = outb+0 (used reg = )
29113 78D4           E8         04AF            call	_outb
29114 78D7           83C4                   04  add	sp,*4
29115                                           !BCC_EOS
29116                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29117 78DA           8B46         F8            mov	ax,-8[bp]
29118 78DD           40                         inc	ax
29119 78DE           8946         F8            mov	-8[bp],ax
29120                                           !BCC_EOS
29121                                           ! 4069         addr1++;
29122                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29123 78E1           8B46         F8            mov	ax,-8[bp]
29124 78E4           40                         inc	ax
29125 78E5           8946         F8            mov	-8[bp],ax
29126                                           !BCC_EOS
29127                                           ! 4070         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
29128                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29129 78E8           FF76         F8            push	-8[bp]
29130                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29131 78EB           FF76         06            push	6[bp]
29132                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29133 78EE           E8         0429            call	_read_byte
29134 78F1           83C4                   04  add	sp,*4
29135                                           ! Debug: list unsigned char = al+0 (used reg = )
29136 78F4           30E4                       xor	ah,ah
29137 78F6           50                         push	ax
29138                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
29139 78F7           8B46         FC            mov	ax,-4[bp]
29140                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
29141                                           ! Debug: list unsigned int = ax+6 (used reg = )
29142 78FA           05                   0006  add	ax,*6
29143 78FD           50                         push	ax
29144                                           ! Debug: func () void = outb+0 (used reg = )
29145 78FE           E8         0485            call	_outb
29146 7901           83C4                   04  add	sp,*4
29147                                           !BCC_EOS
29148                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29149 7904           8B46         F8            mov	ax,-8[bp]
29150 7907           40                         inc	ax
29151 7908           8946         F8            mov	-8[bp],ax
29152                                           !BCC_EOS
29153                                           ! 4071     }
29154                                           ! 4072     if (CX & 2) {
29155                       0000790B            .280:
29156                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
29157 790B           8A46         04            mov	al,4[bp]
29158 790E           24                     02  and	al,*2
29159 7910           84C0                       test	al,al
29160 7912         0F84         0270            beq 	.29A
29161                       00007916            .29B:
29162                                           ! 4073         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
29163                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29164 7916           FF76         08            push	8[bp]
29165                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29166 7919           FF76         06            push	6[bp]
29167                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29168 791C           E8         03FB            call	_read_byte
29169 791F           83C4                   04  add	sp,*4
29170                                           ! Debug: list unsigned char = al+0 (used reg = )
29171 7922           30E4                       xor	ah,ah
29172 7924           50                         push	ax
29173                                           ! Debug: list int = const $49 (used reg = )
29174 7925           B8                   0049  mov	ax,*$49
29175 7928           50                         push	ax
29176                                           ! Debug: list int = const $40 (used reg = )
29177 7929           B8                   0040  mov	ax,*$40
29178 792C           50                         push	ax
29179                                           ! Debug: func () void = write_byte+0 (used reg = )
29180 792D           E8         0410            call	_write_byte
29181 7930           83C4                   06  add	sp,*6
29182                                           !BCC_EOS
29183                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29184 7933           8B46         08            mov	ax,8[bp]
29185 7936           40                         inc	ax
29186 7937           8946         08            mov	8[bp],ax
29187                                           !BCC_EOS
29188                                           ! 4074         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
29189                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29190 793A           FF76         08            push	8[bp]
29191                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29192 793D           FF76         06            push	6[bp]
29193                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29194 7940           E8         03EA            call	_read_word
29195 7943           83C4                   04  add	sp,*4
29196                                           ! Debug: list unsigned short = ax+0 (used reg = )
29197 7946           50                         push	ax
29198                                           ! Debug: list int = const $4A (used reg = )
29199 7947           B8                   004A  mov	ax,*$4A
29200 794A           50                         push	ax
29201                                           ! Debug: list int = const $40 (used reg = )
29202 794B           B8                   0040  mov	ax,*$40
29203 794E           50                         push	ax
29204                                           ! Debug: func () void = write_word+0 (used reg = )
29205 794F           E8         0406            call	_write_word
29206 7952           83C4                   06  add	sp,*6
29207                                           !BCC_EOS
29208                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29209 7955           8B46         08            mov	ax,8[bp]
29210 7958           40                         inc	ax
29211 7959           40                         inc	ax
29212 795A           8946         08            mov	8[bp],ax
29213                                           !BCC_EOS
29214                                           ! 4075         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
29215                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29216 795D           FF76         08            push	8[bp]
29217                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29218 7960           FF76         06            push	6[bp]
29219                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29220 7963           E8         03C7            call	_read_word
29221 7966           83C4                   04  add	sp,*4
29222                                           ! Debug: list unsigned short = ax+0 (used reg = )
29223 7969           50                         push	ax
29224                                           ! Debug: list int = const $4C (used reg = )
29225 796A           B8                   004C  mov	ax,*$4C
29226 796D           50                         push	ax
29227                                           ! Debug: list int = const $40 (used reg = )
29228 796E           B8                   0040  mov	ax,*$40
29229 7971           50                         push	ax
29230                                           ! Debug: func () void = write_word+0 (used reg = )
29231 7972           E8         03E3            call	_write_word
29232 7975           83C4                   06  add	sp,*6
29233                                           !BCC_EOS
29234                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29235 7978           8B46         08            mov	ax,8[bp]
29236 797B           40                         inc	ax
29237 797C           40                         inc	ax
29238 797D           8946         08            mov	8[bp],ax
29239                                           !BCC_EOS
29240                                           ! 4076         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
29241                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29242 7980           FF76         08            push	8[bp]
29243                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29244 7983           FF76         06            push	6[bp]
29245                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29246 7986           E8         03A4            call	_read_word
29247 7989           83C4                   04  add	sp,*4
29248                                           ! Debug: list unsigned short = ax+0 (used reg = )
29249 798C           50                         push	ax
29250                                           ! Debug: list int = const $63 (used reg = )
29251 798D           B8                   0063  mov	ax,*$63
29252 7990           50                         push	ax
29253                                           ! Debug: list int = const $40 (used reg = )
29254 7991           B8                   0040  mov	ax,*$40
29255 7994           50                         push	ax
29256                                           ! Debug: func () void = write_word+0 (used reg = )
29257 7995           E8         03C0            call	_write_word
29258 7998           83C4                   06  add	sp,*6
29259                                           !BCC_EOS
29260                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29261 799B           8B46         08            mov	ax,8[bp]
29262 799E           40                         inc	ax
29263 799F           40                         inc	ax
29264 79A0           8946         08            mov	8[bp],ax
29265                                           !BCC_EOS
29266                                           ! 4077         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
29267                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29268 79A3           FF76         08            push	8[bp]
29269                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29270 79A6           FF76         06            push	6[bp]
29271                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29272 79A9           E8         036E            call	_read_byte
29273 79AC           83C4                   04  add	sp,*4
29274                                           ! Debug: list unsigned char = al+0 (used reg = )
29275 79AF           30E4                       xor	ah,ah
29276 79B1           50                         push	ax
29277                                           ! Debug: list int = const $84 (used reg = )
29278 79B2           B8                   0084  mov	ax,#$84
29279 79B5           50                         push	ax
29280                                           ! Debug: list int = const $40 (used reg = )
29281 79B6           B8                   0040  mov	ax,*$40
29282 79B9           50                         push	ax
29283                                           ! Debug: func () void = write_byte+0 (used reg = )
29284 79BA           E8         0383            call	_write_byte
29285 79BD           83C4                   06  add	sp,*6
29286                                           !BCC_EOS
29287                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29288 79C0           8B46         08            mov	ax,8[bp]
29289 79C3           40                         inc	ax
29290 79C4           8946         08            mov	8[bp],ax
29291                                           !BCC_EOS
29292                                           ! 4078         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29293                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29294 79C7           FF76         08            push	8[bp]
29295                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29296 79CA           FF76         06            push	6[bp]
29297                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29298 79CD           E8         035D            call	_read_word
29299 79D0           83C4                   04  add	sp,*4
29300                                           ! Debug: list unsigned short = ax+0 (used reg = )
29301 79D3           50                         push	ax
29302                                           ! Debug: list int = const $85 (used reg = )
29303 79D4           B8                   0085  mov	ax,#$85
29304 79D7           50                         push	ax
29305                                           ! Debug: list int = const $40 (used reg = )
29306 79D8           B8                   0040  mov	ax,*$40
29307 79DB           50                         push	ax
29308                                           ! Debug: func () void = write_word+0 (used reg = )
29309 79DC           E8         0379            call	_write_word
29310 79DF           83C4                   06  add	sp,*6
29311                                           !BCC_EOS
29312                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29313 79E2           8B46         08            mov	ax,8[bp]
29314 79E5           40                         inc	ax
29315 79E6           40                         inc	ax
29316 79E7           8946         08            mov	8[bp],ax
29317                                           !BCC_EOS
29318                                           ! 4079         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29319                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29320 79EA           FF76         08            push	8[bp]
29321                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29322 79ED           FF76         06            push	6[bp]
29323                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29324 79F0           E8         0327            call	_read_byte
29325 79F3           83C4                   04  add	sp,*4
29326                                           ! Debug: list unsigned char = al+0 (used reg = )
29327 79F6           30E4                       xor	ah,ah
29328 79F8           50                         push	ax
29329                                           ! Debug: list int = const $87 (used reg = )
29330 79F9           B8                   0087  mov	ax,#$87
29331 79FC           50                         push	ax
29332                                           ! Debug: list int = const $40 (used reg = )
29333 79FD           B8                   0040  mov	ax,*$40
29334 7A00           50                         push	ax
29335                                           ! Debug: func () void = write_byte+0 (used reg = )
29336 7A01           E8         033C            call	_write_byte
29337 7A04           83C4                   06  add	sp,*6
29338                                           !BCC_EOS
29339                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29340 7A07           8B46         08            mov	ax,8[bp]
29341 7A0A           40                         inc	ax
29342 7A0B           8946         08            mov	8[bp],ax
29343                                           !BCC_EOS
29344                                           ! 4080         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29345                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29346 7A0E           FF76         08            push	8[bp]
29347                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29348 7A11           FF76         06            push	6[bp]
29349                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29350 7A14           E8         0303            call	_read_byte
29351 7A17           83C4                   04  add	sp,*4
29352                                           ! Debug: list unsigned char = al+0 (used reg = )
29353 7A1A           30E4                       xor	ah,ah
29354 7A1C           50                         push	ax
29355                                           ! Debug: list int = const $88 (used reg = )
29356 7A1D           B8                   0088  mov	ax,#$88
29357 7A20           50                         push	ax
29358                                           ! Debug: list int = const $40 (used reg = )
29359 7A21           B8                   0040  mov	ax,*$40
29360 7A24           50                         push	ax
29361                                           ! Debug: func () void = write_byte+0 (used reg = )
29362 7A25           E8         0318            call	_write_byte
29363 7A28           83C4                   06  add	sp,*6
29364                                           !BCC_EOS
29365                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29366 7A2B           8B46         08            mov	ax,8[bp]
29367 7A2E           40                         inc	ax
29368 7A2F           8946         08            mov	8[bp],ax
29369                                           !BCC_EOS
29370                                           ! 4081         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29371                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29372 7A32           FF76         08            push	8[bp]
29373                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29374 7A35           FF76         06            push	6[bp]
29375                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29376 7A38           E8         02DF            call	_read_byte
29377 7A3B           83C4                   04  add	sp,*4
29378                                           ! Debug: list unsigned char = al+0 (used reg = )
29379 7A3E           30E4                       xor	ah,ah
29380 7A40           50                         push	ax
29381                                           ! Debug: list int = const $89 (used reg = )
29382 7A41           B8                   0089  mov	ax,#$89
29383 7A44           50                         push	ax
29384                                           ! Debug: list int = const $40 (used reg = )
29385 7A45           B8                   0040  mov	ax,*$40
29386 7A48           50                         push	ax
29387                                           ! Debug: func () void = write_byte+0 (used reg = )
29388 7A49           E8         02F4            call	_write_byte
29389 7A4C           83C4                   06  add	sp,*6
29390                                           !BCC_EOS
29391                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29392 7A4F           8B46         08            mov	ax,8[bp]
29393 7A52           40                         inc	ax
29394 7A53           8946         08            mov	8[bp],ax
29395                                           !BCC_EOS
29396                                           ! 4082         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
29397                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29398 7A56           FF76         08            push	8[bp]
29399                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29400 7A59           FF76         06            push	6[bp]
29401                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29402 7A5C           E8         02CE            call	_read_word
29403 7A5F           83C4                   04  add	sp,*4
29404                                           ! Debug: list unsigned short = ax+0 (used reg = )
29405 7A62           50                         push	ax
29406                                           ! Debug: list int = const $60 (used reg = )
29407 7A63           B8                   0060  mov	ax,*$60
29408 7A66           50                         push	ax
29409                                           ! Debug: list int = const $40 (used reg = )
29410 7A67           B8                   0040  mov	ax,*$40
29411 7A6A           50                         push	ax
29412                                           ! Debug: func () void = write_word+0 (used reg = )
29413 7A6B           E8         02EA            call	_write_word
29414 7A6E           83C4                   06  add	sp,*6
29415                                           !BCC_EOS
29416                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29417 7A71           8B46         08            mov	ax,8[bp]
29418 7A74           40                         inc	ax
29419 7A75           40                         inc	ax
29420 7A76           8946         08            mov	8[bp],ax
29421                                           !BCC_EOS
29422                                           ! 4083         for(i=0;i<8;i++) {
29423                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29424 7A79           31C0                       xor	ax,ax
29425 7A7B           8946         FE            mov	-2[bp],ax
29426                                           !BCC_EOS
29427                                           !BCC_EOS
29428 7A7E           EB           2F            jmp .29E
29429                       00007A80            .29F:
29430                                           ! 4084             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29431                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29432 7A80           FF76         08            push	8[bp]
29433                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29434 7A83           FF76         06            push	6[bp]
29435                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29436 7A86           E8         02A4            call	_read_word
29437 7A89           83C4                   04  add	sp,*4
29438                                           ! Debug: list unsigned short = ax+0 (used reg = )
29439 7A8C           50                         push	ax
29440                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29441                                           ! Debug: expression subtree swapping
29442 7A8D           8B46         FE            mov	ax,-2[bp]
29443 7A90           D1E0                       shl	ax,*1
29444                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29445                                           ! Debug: expression subtree swapping
29446                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29447 7A92           05                   0050  add	ax,*$50
29448 7A95           50                         push	ax
29449                                           ! Debug: list int = const $40 (used reg = )
29450 7A96           B8                   0040  mov	ax,*$40
29451 7A99           50                         push	ax
29452                                           ! Debug: func () void = write_word+0 (used reg = )
29453 7A9A           E8         02BB            call	_write_word
29454 7A9D           83C4                   06  add	sp,*6
29455                                           !BCC_EOS
29456                                           ! 4085             BX += 2;
29457                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29458 7AA0           8B46         08            mov	ax,8[bp]
29459 7AA3           40                         inc	ax
29460 7AA4           40                         inc	ax
29461 7AA5           8946         08            mov	8[bp],ax
29462                                           !BCC_EOS
29463                                           ! 4086         }
29464                                           ! 4087         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29465                       00007AA8            .29D:
29466                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29467 7AA8           8B46         FE            mov	ax,-2[bp]
29468 7AAB           40                         inc	ax
29469 7AAC           8946         FE            mov	-2[bp],ax
29470                       00007AAF            .29E:
29471                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29472 7AAF           8B46         FE            mov	ax,-2[bp]
29473 7AB2           3D                   0008  cmp	ax,*8
29474 7AB5           72           C9            jb 	.29F
29475                       00007AB7            .2A0:
29476                       00007AB7            .29C:
29477                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29478 7AB7           FF76         08            push	8[bp]
29479                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29480 7ABA           FF76         06            push	6[bp]
29481                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29482 7ABD           E8         026D            call	_read_word
29483 7AC0           83C4                   04  add	sp,*4
29484                                           ! Debug: list unsigned short = ax+0 (used reg = )
29485 7AC3           50                         push	ax
29486                                           ! Debug: list int = const $4E (used reg = )
29487 7AC4           B8                   004E  mov	ax,*$4E
29488 7AC7           50                         push	ax
29489                                           ! Debug: list int = const $40 (used reg = )
29490 7AC8           B8                   0040  mov	ax,*$40
29491 7ACB           50                         push	ax
29492                                           ! Debug: func () void = write_word+0 (used reg = )
29493 7ACC           E8         0289            call	_write_word
29494 7ACF           83C4                   06  add	sp,*6
29495                                           !BCC_EOS
29496                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29497 7AD2           8B46         08            mov	ax,8[bp]
29498 7AD5           40                         inc	ax
29499 7AD6           40                         inc	ax
29500 7AD7           8946         08            mov	8[bp],ax
29501                                           !BCC_EOS
29502                                           ! 4088         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29503                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29504 7ADA           FF76         08            push	8[bp]
29505                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29506 7ADD           FF76         06            push	6[bp]
29507                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29508 7AE0           E8         0237            call	_read_byte
29509 7AE3           83C4                   04  add	sp,*4
29510                                           ! Debug: list unsigned char = al+0 (used reg = )
29511 7AE6           30E4                       xor	ah,ah
29512 7AE8           50                         push	ax
29513                                           ! Debug: list int = const $62 (used reg = )
29514 7AE9           B8                   0062  mov	ax,*$62
29515 7AEC           50                         push	ax
29516                                           ! Debug: list int = const $40 (used reg = )
29517 7AED           B8                   0040  mov	ax,*$40
29518 7AF0           50                         push	ax
29519                                           ! Debug: func () void = write_byte+0 (used reg = )
29520 7AF1           E8         024C            call	_write_byte
29521 7AF4           83C4                   06  add	sp,*6
29522                                           !BCC_EOS
29523                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29524 7AF7           8B46         08            mov	ax,8[bp]
29525 7AFA           40                         inc	ax
29526 7AFB           8946         08            mov	8[bp],ax
29527                                           !BCC_EOS
29528                                           ! 4089         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29529                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29530 7AFE           FF76         08            push	8[bp]
29531                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29532 7B01           FF76         06            push	6[bp]
29533                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29534 7B04           E8         0226            call	_read_word
29535 7B07           83C4                   04  add	sp,*4
29536                                           ! Debug: list unsigned short = ax+0 (used reg = )
29537 7B0A           50                         push	ax
29538                                           ! Debug: list int = const $7C (used reg = )
29539 7B0B           B8                   007C  mov	ax,*$7C
29540 7B0E           50                         push	ax
29541                                           ! Debug: list int = const 0 (used reg = )
29542 7B0F           31C0                       xor	ax,ax
29543 7B11           50                         push	ax
29544                                           ! Debug: func () void = write_word+0 (used reg = )
29545 7B12           E8         0243            call	_write_word
29546 7B15           83C4                   06  add	sp,*6
29547                                           !BCC_EOS
29548                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29549 7B18           8B46         08            mov	ax,8[bp]
29550 7B1B           40                         inc	ax
29551 7B1C           40                         inc	ax
29552 7B1D           8946         08            mov	8[bp],ax
29553                                           !BCC_EOS
29554                                           ! 4090         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29555                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29556 7B20           FF76         08            push	8[bp]
29557                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29558 7B23           FF76         06            push	6[bp]
29559                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29560 7B26           E8         0204            call	_read_word
29561 7B29           83C4                   04  add	sp,*4
29562                                           ! Debug: list unsigned short = ax+0 (used reg = )
29563 7B2C           50                         push	ax
29564                                           ! Debug: list int = const $7E (used reg = )
29565 7B2D           B8                   007E  mov	ax,*$7E
29566 7B30           50                         push	ax
29567                                           ! Debug: list int = const 0 (used reg = )
29568 7B31           31C0                       xor	ax,ax
29569 7B33           50                         push	ax
29570                                           ! Debug: func () void = write_word+0 (used reg = )
29571 7B34           E8         0221            call	_write_word
29572 7B37           83C4                   06  add	sp,*6
29573                                           !BCC_EOS
29574                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29575 7B3A           8B46         08            mov	ax,8[bp]
29576 7B3D           40                         inc	ax
29577 7B3E           40                         inc	ax
29578 7B3F           8946         08            mov	8[bp],ax
29579                                           !BCC_EOS
29580                                           ! 4091         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29581                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29582 7B42           FF76         08            push	8[bp]
29583                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29584 7B45           FF76         06            push	6[bp]
29585                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29586 7B48           E8         01E2            call	_read_word
29587 7B4B           83C4                   04  add	sp,*4
29588                                           ! Debug: list unsigned short = ax+0 (used reg = )
29589 7B4E           50                         push	ax
29590                                           ! Debug: list int = const $10C (used reg = )
29591 7B4F           B8                   010C  mov	ax,#$10C
29592 7B52           50                         push	ax
29593                                           ! Debug: list int = const 0 (used reg = )
29594 7B53           31C0                       xor	ax,ax
29595 7B55           50                         push	ax
29596                                           ! Debug: func () void = write_word+0 (used reg = )
29597 7B56           E8         01FF            call	_write_word
29598 7B59           83C4                   06  add	sp,*6
29599                                           !BCC_EOS
29600                                           ! 4091 
29601                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29602 7B5C           8B46         08            mov	ax,8[bp]
29603 7B5F           40                         inc	ax
29604 7B60           40                         inc	ax
29605 7B61           8946         08            mov	8[bp],ax
29606                                           !BCC_EOS
29607                                           ! 4092         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29608                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29609 7B64           FF76         08            push	8[bp]
29610                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29611 7B67           FF76         06            push	6[bp]
29612                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29613 7B6A           E8         01C0            call	_read_word
29614 7B6D           83C4                   04  add	sp,*4
29615                                           ! Debug: list unsigned short = ax+0 (used reg = )
29616 7B70           50                         push	ax
29617                                           ! Debug: list int = const $10E (used reg = )
29618 7B71           B8                   010E  mov	ax,#$10E
29619 7B74           50                         push	ax
29620                                           ! Debug: list int = const 0 (used reg = )
29621 7B75           31C0                       xor	ax,ax
29622 7B77           50                         push	ax
29623                                           ! Debug: func () void = write_word+0 (used reg = )
29624 7B78           E8         01DD            call	_write_word
29625 7B7B           83C4                   06  add	sp,*6
29626                                           !BCC_EOS
29627                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29628 7B7E           8B46         08            mov	ax,8[bp]
29629 7B81           40                         inc	ax
29630 7B82           40                         inc	ax
29631 7B83           8946         08            mov	8[bp],ax
29632                                           !BCC_EOS
29633                                           ! 4093     }
29634                                           ! 4094     if (CX & 4) {
29635                       00007B86            .29A:
29636                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29637 7B86           8A46         04            mov	al,4[bp]
29638 7B89           24                     04  and	al,*4
29639 7B8B           84C0                       test	al,al
29640 7B8D         0F84         0096            beq 	.2A1
29641                       00007B91            .2A2:
29642                                           ! 4095         BX++;
29643                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29644 7B91           8B46         08            mov	ax,8[bp]
29645 7B94           40                         inc	ax
29646 7B95           8946         08            mov	8[bp],ax
29647                                           !BCC_EOS
29648                                           ! 4096         v = read_byte(ES, BX); BX++;
29649                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29650 7B98           FF76         08            push	8[bp]
29651                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29652 7B9B           FF76         06            push	6[bp]
29653                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29654 7B9E           E8         0179            call	_read_byte
29655 7BA1           83C4                   04  add	sp,*4
29656                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29657 7BA4           30E4                       xor	ah,ah
29658 7BA6           8946         FA            mov	-6[bp],ax
29659                                           !BCC_EOS
29660                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29661 7BA9           8B46         08            mov	ax,8[bp]
29662 7BAC           40                         inc	ax
29663 7BAD           8946         08            mov	8[bp],ax
29664                                           !BCC_EOS
29665                                           ! 4097         outb(0x3c6, read_byte(ES, BX)); BX++;
29666                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29667 7BB0           FF76         08            push	8[bp]
29668                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29669 7BB3           FF76         06            push	6[bp]
29670                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29671 7BB6           E8         0161            call	_read_byte
29672 7BB9           83C4                   04  add	sp,*4
29673                                           ! Debug: list unsigned char = al+0 (used reg = )
29674 7BBC           30E4                       xor	ah,ah
29675 7BBE           50                         push	ax
29676                                           ! Debug: list int = const $3C6 (used reg = )
29677 7BBF           B8                   03C6  mov	ax,#$3C6
29678 7BC2           50                         push	ax
29679                                           ! Debug: func () void = outb+0 (used reg = )
29680 7BC3           E8         01C0            call	_outb
29681 7BC6           83C4                   04  add	sp,*4
29682                                           !BCC_EOS
29683                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29684 7BC9           8B46         08            mov	ax,8[bp]
29685 7BCC           40                         inc	ax
29686 7BCD           8946         08            mov	8[bp],ax
29687                                           !BCC_EOS
29688                                           ! 4098         outb(0x3c8,0x00);
29689                                           ! Debug: list int = const 0 (used reg = )
29690 7BD0           31C0                       xor	ax,ax
29691 7BD2           50                         push	ax
29692                                           ! Debug: list int = const $3C8 (used reg = )
29693 7BD3           B8                   03C8  mov	ax,#$3C8
29694 7BD6           50                         push	ax
29695                                           ! Debug: func () void = outb+0 (used reg = )
29696 7BD7           E8         01AC            call	_outb
29697 7BDA           83C4                   04  add	sp,*4
29698                                           !BCC_EOS
29699                                           ! 4099         for(i=0;i<256*3;i++) {
29700                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29701 7BDD           31C0                       xor	ax,ax
29702 7BDF           8946         FE            mov	-2[bp],ax
29703                                           !BCC_EOS
29704                                           !BCC_EOS
29705 7BE2           EB           27            jmp .2A5
29706                       00007BE4            .2A6:
29707                                           ! 4100             outb(0x3c9, read_byte(ES, BX)); BX++;
29708                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29709 7BE4           FF76         08            push	8[bp]
29710                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29711 7BE7           FF76         06            push	6[bp]
29712                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29713 7BEA           E8         012D            call	_read_byte
29714 7BED           83C4                   04  add	sp,*4
29715                                           ! Debug: list unsigned char = al+0 (used reg = )
29716 7BF0           30E4                       xor	ah,ah
29717 7BF2           50                         push	ax
29718                                           ! Debug: list int = const $3C9 (used reg = )
29719 7BF3           B8                   03C9  mov	ax,#$3C9
29720 7BF6           50                         push	ax
29721                                           ! Debug: func () void = outb+0 (used reg = )
29722 7BF7           E8         018C            call	_outb
29723 7BFA           83C4                   04  add	sp,*4
29724                                           !BCC_EOS
29725                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29726 7BFD           8B46         08            mov	ax,8[bp]
29727 7C00           40                         inc	ax
29728 7C01           8946         08            mov	8[bp],ax
29729                                           !BCC_EOS
29730                                           ! 4101         }
29731                                           ! 4102         BX++;
29732                       00007C04            .2A4:
29733                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29734 7C04           8B46         FE            mov	ax,-2[bp]
29735 7C07           40                         inc	ax
29736 7C08           8946         FE            mov	-2[bp],ax
29737                       00007C0B            .2A5:
29738                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29739 7C0B           8B46         FE            mov	ax,-2[bp]
29740 7C0E           3D                   0300  cmp	ax,#$300
29741 7C11           72           D1            jb 	.2A6
29742                       00007C13            .2A7:
29743                       00007C13            .2A3:
29744                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29745 7C13           8B46         08            mov	ax,8[bp]
29746 7C16           40                         inc	ax
29747 7C17           8946         08            mov	8[bp],ax
29748                                           !BCC_EOS
29749                                           ! 4103         outb(0x3c8, v);
29750                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29751 7C1A           FF76         FA            push	-6[bp]
29752                                           ! Debug: list int = const $3C8 (used reg = )
29753 7C1D           B8                   03C8  mov	ax,#$3C8
29754 7C20           50                         push	ax
29755                                           ! Debug: func () void = outb+0 (used reg = )
29756 7C21           E8         0162            call	_outb
29757 7C24           83C4                   04  add	sp,*4
29758                                           !BCC_EOS
29759                                           ! 4104     }
29760                                           ! 4105     return BX;
29761                       00007C27            .2A1:
29762 7C27           8B46         08            mov	ax,8[bp]
29763 7C2A           89EC                       mov	sp,bp
29764 7C2C           5D                         pop	bp
29765 7C2D           C3                         ret
29766                                           !BCC_EOS
29767                                           ! 4106 }
29768                                           ! 4107 static Bit8u find_vga_entry(mode)
29769                                           ! 4108 Bit8u mode;
29770                       00007C2E            _find_vga_entry:
29771                                           !BCC_EOS
29772                                           ! 4109 {
29773                                           ! 4110  Bit8u i,line=0xFF;
29774 7C2E           55                         push	bp
29775 7C2F           89E5                       mov	bp,sp
29776 7C31           4C                         dec	sp
29777 7C32           4C                         dec	sp
29778                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29779 7C33           B0                     FF  mov	al,#$FF
29780 7C35           8846         FE            mov	-2[bp],al
29781                                           !BCC_EOS
29782                                           ! 4111  for(i=0;i<=15;i++)
29783                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29784 7C38           30C0                       xor	al,al
29785 7C3A           8846         FF            mov	-1[bp],al
29786                                           !BCC_EOS
29787                                           !BCC_EOS
29788                                           ! 4112   if(vga_modes[i].svgamode==mode)
29789 7C3D           EB           23            jmp .2AA
29790                       00007C3F            .2AB:
29791                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29792 7C3F           8A46         FF            mov	al,-1[bp]
29793 7C42           30E4                       xor	ah,ah
29794 7C44           B1                     03  mov	cl,*3
29795 7C46           D3E0                       shl	ax,cl
29796 7C48           89C3                       mov	bx,ax
29797                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29798 7C4A           8A87       020B            mov	al,_vga_modes[bx]
29799 7C4E           3A46         04            cmp	al,4[bp]
29800 7C51           75           08            jne 	.2AC
29801                       00007C53            .2AD:
29802                                           ! 4113    {line=i;
29803                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29804 7C53           8A46         FF            mov	al,-1[bp]
29805 7C56           8846         FE            mov	-2[bp],al
29806                                           !BCC_EOS
29807                                           ! 4114     break;
29808 7C59           EB           0E            jmp .2A8
29809                                           !BCC_EOS
29810                                           ! 4115    }
29811                                           ! 4116  return line;
29812                       00007C5B            .2AC:
29813                       00007C5B            .2A9:
29814                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29815 7C5B           8A46         FF            mov	al,-1[bp]
29816 7C5E           40                         inc	ax
29817 7C5F           8846         FF            mov	-1[bp],al
29818                       00007C62            .2AA:
29819                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29820 7C62           8A46         FF            mov	al,-1[bp]
29821 7C65           3C                     0F  cmp	al,*$F
29822 7C67           76           D6            jbe	.2AB
29823                       00007C69            .2AE:
29824                       00007C69            .2A8:
29825 7C69           8A46         FE            mov	al,-2[bp]
29826 7C6C           89EC                       mov	sp,bp
29827 7C6E           5D                         pop	bp
29828 7C6F           C3                         ret
29829                                           !BCC_EOS
29830                                           ! 4117 }
29831                                           ! 4118 static void memsetb(seg,offset,value,count)
29832                                           ! Register BX used in function find_vga_entry
29833                                           ! 4119   Bit16u seg;
29834                       00007C70            _memsetb:
29835                                           !BCC_EOS
29836                                           ! 4120   Bit16u offset;
29837                                           !BCC_EOS
29838                                           ! 4121   Bit16u value;
29839                                           !BCC_EOS
29840                                           ! 4122   Bit16u count;
29841                                           !BCC_EOS
29842                                           ! 4123 {
29843                                           ! 4124 #asm
29844                                           !BCC_ASM
29845                       00000008            _memsetb.count	set	8
29846                       00000002            _memsetb.seg	set	2
29847                       00000006            _memsetb.value	set	6
29848                       00000004            _memsetb.offset	set	4
29849 7C70           55                           push bp
29850 7C71           89E5                         mov bp, sp
29851 7C73           50                             push ax
29852 7C74           51                             push cx
29853 7C75           06                             push es
29854 7C76           57                             push di
29855 7C77           8B4E         0A                mov cx, 10[bp] ; count
29856 7C7A           83F9                   00      cmp cx, #0x00
29857 7C7D           74           10                je memsetb_end
29858 7C7F           8B46         04                mov ax, 4[bp] ; segment
29859 7C82           8EC0                           mov es, ax
29860 7C84           8B46         06                mov ax, 6[bp] ; offset
29861 7C87           89C7                           mov di, ax
29862 7C89           8A46         08                mov al, 8[bp] ; value
29863 7C8C           FC                             cld
29864 7C8D           F3                             rep
29865 7C8E           AA                              stosb
29866                       00007C8F            memsetb_end:
29867 7C8F           5F                             pop di
29868 7C90           07                             pop es
29869 7C91           59                             pop cx
29870 7C92           58                             pop ax
29871 7C93           5D                           pop bp
29872                                           ! 4148 endasm
29873                                           !BCC_ENDASM
29874                                           ! 4149 }
29875 7C94           C3                         ret
29876                                           ! 4150 static void memsetw(seg,offset,value,count)
29877                                           ! 4151   Bit16u seg;
29878                       00007C95            _memsetw:
29879                                           !BCC_EOS
29880                                           ! 4152   Bit16u offset;
29881                                           !BCC_EOS
29882                                           ! 4153   Bit16u value;
29883                                           !BCC_EOS
29884                                           ! 4154   Bit16u count;
29885                                           !BCC_EOS
29886                                           ! 4155 {
29887                                           ! 4156 #asm
29888                                           !BCC_ASM
29889                       00000008            _memsetw.count	set	8
29890                       00000002            _memsetw.seg	set	2
29891                       00000006            _memsetw.value	set	6
29892                       00000004            _memsetw.offset	set	4
29893 7C95           55                           push bp
29894 7C96           89E5                         mov bp, sp
29895 7C98           50                             push ax
29896 7C99           51                             push cx
29897 7C9A           06                             push es
29898 7C9B           57                             push di
29899 7C9C           8B4E         0A                mov cx, 10[bp] ; count
29900 7C9F           83F9                   00      cmp cx, #0x00
29901 7CA2           74           10                je memsetw_end
29902 7CA4           8B46         04                mov ax, 4[bp] ; segment
29903 7CA7           8EC0                           mov es, ax
29904 7CA9           8B46         06                mov ax, 6[bp] ; offset
29905 7CAC           89C7                           mov di, ax
29906 7CAE           8B46         08                mov ax, 8[bp] ; value
29907 7CB1           FC                             cld
29908 7CB2           F3                             rep
29909 7CB3           AB                              stosw
29910                       00007CB4            memsetw_end:
29911 7CB4           5F                             pop di
29912 7CB5           07                             pop es
29913 7CB6           59                             pop cx
29914 7CB7           58                             pop ax
29915 7CB8           5D                           pop bp
29916                                           ! 4180 endasm
29917                                           !BCC_ENDASM
29918                                           ! 4181 }
29919 7CB9           C3                         ret
29920                                           ! 4182 static void memcpyb(dseg,doffset,sseg,soffset,count)
29921                                           ! 4183   Bit16u dseg;
29922                       00007CBA            _memcpyb:
29923                                           !BCC_EOS
29924                                           ! 4184   Bit16u doffset;
29925                                           !BCC_EOS
29926                                           ! 4185   Bit16u sseg;
29927                                           !BCC_EOS
29928                                           ! 4186   Bit16u soffset;
29929                                           !BCC_EOS
29930                                           ! 4187   Bit16u count;
29931                                           !BCC_EOS
29932                                           ! 4188 {
29933                                           ! 4189 #asm
29934                                           !BCC_ASM
29935                       0000000A            _memcpyb.count	set	$A
29936                       00000006            _memcpyb.sseg	set	6
29937                       00000008            _memcpyb.soffset	set	8
29938                       00000002            _memcpyb.dseg	set	2
29939                       00000004            _memcpyb.doffset	set	4
29940 7CBA           55                           push bp
29941 7CBB           89E5                         mov bp, sp
29942 7CBD           50                             push ax
29943 7CBE           51                             push cx
29944 7CBF           06                             push es
29945 7CC0           57                             push di
29946 7CC1           1E                             push ds
29947 7CC2           56                             push si
29948 7CC3           8B4E         0C                mov cx, 12[bp] ; count
29949 7CC6           83F9                   00      cmp cx, #0x0000
29950 7CC9           74           17                je memcpyb_end
29951 7CCB           8B46         04                mov ax, 4[bp] ; dsegment
29952 7CCE           8EC0                           mov es, ax
29953 7CD0           8B46         06                mov ax, 6[bp] ; doffset
29954 7CD3           89C7                           mov di, ax
29955 7CD5           8B46         08                mov ax, 8[bp] ; ssegment
29956 7CD8           8ED8                           mov ds, ax
29957 7CDA           8B46         0A                mov ax, 10[bp] ; soffset
29958 7CDD           89C6                           mov si, ax
29959 7CDF           FC                             cld
29960 7CE0           F3                             rep
29961 7CE1           A4                              movsb
29962                       00007CE2            memcpyb_end:
29963 7CE2           5E                             pop si
29964 7CE3           1F                             pop ds
29965 7CE4           5F                             pop di
29966 7CE5           07                             pop es
29967 7CE6           59                             pop cx
29968 7CE7           58                             pop ax
29969 7CE8           5D                           pop bp
29970                                           ! 4220 endasm
29971                                           !BCC_ENDASM
29972                                           ! 4221 }
29973 7CE9           C3                         ret
29974                                           ! 4222 static void memcpyw(dseg,doffset,sseg,soffset,count)
29975                                           ! 4223   Bit16u dseg;
29976                       00007CEA            _memcpyw:
29977                                           !BCC_EOS
29978                                           ! 4224   Bit16u doffset;
29979                                           !BCC_EOS
29980                                           ! 4225   Bit16u sseg;
29981                                           !BCC_EOS
29982                                           ! 4226   Bit16u soffset;
29983                                           !BCC_EOS
29984                                           ! 4227   Bit16u count;
29985                                           !BCC_EOS
29986                                           ! 4228 {
29987                                           ! 4229 #asm
29988                                           !BCC_ASM
29989                       0000000A            _memcpyw.count	set	$A
29990                       00000006            _memcpyw.sseg	set	6
29991                       00000008            _memcpyw.soffset	set	8
29992                       00000002            _memcpyw.dseg	set	2
29993                       00000004            _memcpyw.doffset	set	4
29994 7CEA           55                           push bp
29995 7CEB           89E5                         mov bp, sp
29996 7CED           50                             push ax
29997 7CEE           51                             push cx
29998 7CEF           06                             push es
29999 7CF0           57                             push di
30000 7CF1           1E                             push ds
30001 7CF2           56                             push si
30002 7CF3           8B4E         0C                mov cx, 12[bp] ; count
30003 7CF6           83F9                   00      cmp cx, #0x0000
30004 7CF9           74           17                je memcpyw_end
30005 7CFB           8B46         04                mov ax, 4[bp] ; dsegment
30006 7CFE           8EC0                           mov es, ax
30007 7D00           8B46         06                mov ax, 6[bp] ; doffset
30008 7D03           89C7                           mov di, ax
30009 7D05           8B46         08                mov ax, 8[bp] ; ssegment
30010 7D08           8ED8                           mov ds, ax
30011 7D0A           8B46         0A                mov ax, 10[bp] ; soffset
30012 7D0D           89C6                           mov si, ax
30013 7D0F           FC                             cld
30014 7D10           F3                             rep
30015 7D11           A5                              movsw
30016                       00007D12            memcpyw_end:
30017 7D12           5E                             pop si
30018 7D13           1F                             pop ds
30019 7D14           5F                             pop di
30020 7D15           07                             pop es
30021 7D16           59                             pop cx
30022 7D17           58                             pop ax
30023 7D18           5D                           pop bp
30024                                           ! 4260 endasm
30025                                           !BCC_ENDASM
30026                                           ! 4261 }
30027 7D19           C3                         ret
30028                                           ! 4262 static Bit8u
30029                                           ! 4263 read_byte(seg, offset)
30030                                           ! 4264   Bit16u seg;
30031                       00007D1A            _read_byte:
30032                                           !BCC_EOS
30033                                           ! 4265   Bit16u offset;
30034                                           !BCC_EOS
30035                                           ! 4266 {
30036                                           ! 4267 #asm
30037                                           !BCC_ASM
30038                       00000002            _read_byte.seg	set	2
30039                       00000004            _read_byte.offset	set	4
30040 7D1A           55                           push bp
30041 7D1B           89E5                         mov bp, sp
30042 7D1D           53                             push bx
30043 7D1E           1E                             push ds
30044 7D1F           8B46         04                mov ax, 4[bp] ; segment
30045 7D22           8ED8                           mov ds, ax
30046 7D24           8B5E         06                mov bx, 6[bp] ; offset
30047 7D27           8A07                           mov al, [bx]
30048                                               ;; al = return value (byte)
30049 7D29           1F                             pop ds
30050 7D2A           5B                             pop bx
30051 7D2B           5D                           pop bp
30052                                           ! 4280 endasm
30053                                           !BCC_ENDASM
30054                                           ! 4281 }
30055 7D2C           C3                         ret
30056                                           ! 4282 static Bit16u
30057                                           ! 4283 read_word(seg, offset)
30058                                           ! 4284   Bit16u seg;
30059                       00007D2D            _read_word:
30060                                           !BCC_EOS
30061                                           ! 4285   Bit16u offset;
30062                                           !BCC_EOS
30063                                           ! 4286 {
30064                                           ! 4287 #asm
30065                                           !BCC_ASM
30066                       00000002            _read_word.seg	set	2
30067                       00000004            _read_word.offset	set	4
30068 7D2D           55                           push bp
30069 7D2E           89E5                         mov bp, sp
30070 7D30           53                             push bx
30071 7D31           1E                             push ds
30072 7D32           8B46         04                mov ax, 4[bp] ; segment
30073 7D35           8ED8                           mov ds, ax
30074 7D37           8B5E         06                mov bx, 6[bp] ; offset
30075 7D3A           8B07                           mov ax, [bx]
30076                                               ;; ax = return value (word)
30077 7D3C           1F                             pop ds
30078 7D3D           5B                             pop bx
30079 7D3E           5D                           pop bp
30080                                           ! 4300 endasm
30081                                           !BCC_ENDASM
30082                                           ! 4301 }
30083 7D3F           C3                         ret
30084                                           ! 4302 static void
30085                                           ! 4303 write_byte(seg, offset, data)
30086                                           ! 4304   Bit16u seg;
30087                       00007D40            _write_byte:
30088                                           !BCC_EOS
30089                                           ! 4305   Bit16u offset;
30090                                           !BCC_EOS
30091                                           ! 4306   Bit8u data;
30092                                           !BCC_EOS
30093                                           ! 4307 {
30094                                           ! 4308 #asm
30095                                           !BCC_ASM
30096                       00000002            _write_byte.seg	set	2
30097                       00000006            _write_byte.data	set	6
30098                       00000004            _write_byte.offset	set	4
30099 7D40           55                           push bp
30100 7D41           89E5                         mov bp, sp
30101 7D43           50                             push ax
30102 7D44           53                             push bx
30103 7D45           1E                             push ds
30104 7D46           8B46         04                mov ax, 4[bp] ; segment
30105 7D49           8ED8                           mov ds, ax
30106 7D4B           8B5E         06                mov bx, 6[bp] ; offset
30107 7D4E           8A46         08                mov al, 8[bp] ; data byte
30108 7D51           8807                           mov [bx], al ; write data byte
30109 7D53           1F                             pop ds
30110 7D54           5B                             pop bx
30111 7D55           58                             pop ax
30112 7D56           5D                           pop bp
30113                                           ! 4323 endasm
30114                                           !BCC_ENDASM
30115                                           ! 4324 }
30116 7D57           C3                         ret
30117                                           ! 4325 static void
30118                                           ! 4326 write_word(seg, offset, data)
30119                                           ! 4327   Bit16u seg;
30120                       00007D58            _write_word:
30121                                           !BCC_EOS
30122                                           ! 4328   Bit16u offset;
30123                                           !BCC_EOS
30124                                           ! 4329   Bit16u data;
30125                                           !BCC_EOS
30126                                           ! 4330 {
30127                                           ! 4331 #asm
30128                                           !BCC_ASM
30129                       00000002            _write_word.seg	set	2
30130                       00000006            _write_word.data	set	6
30131                       00000004            _write_word.offset	set	4
30132 7D58           55                           push bp
30133 7D59           89E5                         mov bp, sp
30134 7D5B           50                             push ax
30135 7D5C           53                             push bx
30136 7D5D           1E                             push ds
30137 7D5E           8B46         04                mov ax, 4[bp] ; segment
30138 7D61           8ED8                           mov ds, ax
30139 7D63           8B5E         06                mov bx, 6[bp] ; offset
30140 7D66           8B46         08                mov ax, 8[bp] ; data word
30141 7D69           8907                           mov [bx], ax ; write data word
30142 7D6B           1F                             pop ds
30143 7D6C           5B                             pop bx
30144 7D6D           58                             pop ax
30145 7D6E           5D                           pop bp
30146                                           ! 4346 endasm
30147                                           !BCC_ENDASM
30148                                           ! 4347 }
30149 7D6F           C3                         ret
30150                                           ! 4348  Bit8u
30151                                           ! 4349 inb(port)
30152                                           ! 4350   Bit16u port;
30153                                           export	_inb
30154                       00007D70            _inb:
30155                                           !BCC_EOS
30156                                           ! 4351 {
30157                                           ! 4352 #asm
30158                                           !BCC_ASM
30159                       00000002            _inb.port	set	2
30160 7D70           55                           push bp
30161 7D71           89E5                         mov bp, sp
30162 7D73           52                             push dx
30163 7D74           8B56         04                mov dx, 4[bp]
30164 7D77           EC                             in al, dx
30165 7D78           5A                             pop dx
30166 7D79           5D                           pop bp
30167                                           ! 4360 endasm
30168                                           !BCC_ENDASM
30169                                           ! 4361 }
30170 7D7A           C3                         ret
30171                                           ! 4362   Bit16u
30172                                           ! 4363 inw(port)
30173                                           ! 4364   Bit16u port;
30174                                           export	_inw
30175                       00007D7B            _inw:
30176                                           !BCC_EOS
30177                                           ! 4365 {
30178                                           ! 4366 #asm
30179                                           !BCC_ASM
30180                       00000002            _inw.port	set	2
30181 7D7B           55                           push bp
30182 7D7C           89E5                         mov bp, sp
30183 7D7E           52                             push dx
30184 7D7F           8B56         04                mov dx, 4[bp]
30185 7D82           ED                             in ax, dx
30186 7D83           5A                             pop dx
30187 7D84           5D                           pop bp
30188                                           ! 4374 endasm
30189                                           !BCC_ENDASM
30190                                           ! 4375 }
30191 7D85           C3                         ret
30192                                           ! 4376   void
30193                                           ! 4377 outb(port, val)
30194                                           ! 4378   Bit16u port;
30195                                           export	_outb
30196                       00007D86            _outb:
30197                                           !BCC_EOS
30198                                           ! 4379   Bit8u val;
30199                                           !BCC_EOS
30200                                           ! 4380 {
30201                                           ! 4381 #asm
30202                                           !BCC_ASM
30203                       00000004            _outb.val	set	4
30204                       00000002            _outb.port	set	2
30205 7D86           55                           push bp
30206 7D87           89E5                         mov bp, sp
30207 7D89           50                             push ax
30208 7D8A           52                             push dx
30209 7D8B           8B56         04                mov dx, 4[bp]
30210 7D8E           8A46         06                mov al, 6[bp]
30211 7D91           EE                             out dx, al
30212 7D92           5A                             pop dx
30213 7D93           58                             pop ax
30214 7D94           5D                           pop bp
30215                                           ! 4392 endasm
30216                                           !BCC_ENDASM
30217                                           ! 4393 }
30218 7D95           C3                         ret
30219                                           ! 4394   void
30220                                           ! 4395 outw(port, val)
30221                                           ! 4396   Bit16u port;
30222                                           export	_outw
30223                       00007D96            _outw:
30224                                           !BCC_EOS
30225                                           ! 4397   Bit16u val;
30226                                           !BCC_EOS
30227                                           ! 4398 {
30228                                           ! 4399 #asm
30229                                           !BCC_ASM
30230                       00000004            _outw.val	set	4
30231                       00000002            _outw.port	set	2
30232 7D96           55                           push bp
30233 7D97           89E5                         mov bp, sp
30234 7D99           50                             push ax
30235 7D9A           52                             push dx
30236 7D9B           8B56         04                mov dx, 4[bp]
30237 7D9E           8B46         06                mov ax, 6[bp]
30238 7DA1           EF                             out dx, ax
30239 7DA2           5A                             pop dx
30240 7DA3           58                             pop ax
30241 7DA4           5D                           pop bp
30242                                           ! 4410 endasm
30243                                           !BCC_ENDASM
30244                                           ! 4411 }
30245 7DA5           C3                         ret
30246                                           ! 4412 Bit16u get_SS()
30247                                           ! 4413 {
30248                                           export	_get_SS
30249                       00007DA6            _get_SS:
30250                                           ! 4414 #asm
30251                                           !BCC_ASM
30252 7DA6           8CD0                         mov ax, ss
30253                                           ! 4416 endasm
30254                                           !BCC_ENDASM
30255                                           ! 4417 }
30256 7DA8           C3                         ret
30257                                           ! 4418 void unimplemented()
30258                                           ! 4419 {
30259                                           export	_unimplemented
30260                       00007DA9            _unimplemented:
30261                                           ! 4420  printf("--> Unimplemented\n");
30262 7DA9           55                         push	bp
30263 7DAA           89E5                       mov	bp,sp
30264                                           ! Debug: list * char = .2AF+0 (used reg = )
30265 7DAC           BB                   A039  mov	bx,#.2AF
30266 7DAF           53                         push	bx
30267                                           ! Debug: func () void = printf+0 (used reg = )
30268 7DB0           E8         0012            call	_printf
30269 7DB3           89EC                       mov	sp,bp
30270                                           !BCC_EOS
30271                                           ! 4421 }
30272 7DB5           5D                         pop	bp
30273 7DB6           C3                         ret
30274                                           ! 4422 void unknown()
30275                                           ! Register BX used in function unimplemented
30276                                           ! 4423 {
30277                                           export	_unknown
30278                       00007DB7            _unknown:
30279                                           ! 4424  printf("--> Unknown int10\n");
30280 7DB7           55                         push	bp
30281 7DB8           89E5                       mov	bp,sp
30282                                           ! Debug: list * char = .2B0+0 (used reg = )
30283 7DBA           BB                   A026  mov	bx,#.2B0
30284 7DBD           53                         push	bx
30285                                           ! Debug: func () void = printf+0 (used reg = )
30286 7DBE           E8         0004            call	_printf
30287 7DC1           89EC                       mov	sp,bp
30288                                           !BCC_EOS
30289                                           ! 4425 }
30290 7DC3           5D                         pop	bp
30291 7DC4           C3                         ret
30292                                           ! 4426 void printf(s)
30293                                           ! Register BX used in function unknown
30294                                           ! 4427   Bit8u *s;
30295                                           export	_printf
30296                       00007DC5            _printf:
30297                                           !BCC_EOS
30298                                           ! 4428 {
30299                                           ! 4429   Bit8u c, format_char;
30300                                           !BCC_EOS
30301                                           ! 4430   Boolean in_format;
30302                                           !BCC_EOS
30303                                           ! 4431   unsigned format_width, i;
30304                                           !BCC_EOS
30305                                           ! 4432   Bit16u *arg_ptr;
30306                                           !BCC_EOS
30307                                           ! 4433   Bit16u arg_seg, arg, digit, nibble, shift_count;
30308                                           !BCC_EOS
30309                                           ! 4434   arg_ptr = &s;
30310 7DC5           55                         push	bp
30311 7DC6           89E5                       mov	bp,sp
30312 7DC8           83C4                   EC  add	sp,*-$14
30313                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30314 7DCB           8D5E         04            lea	bx,4[bp]
30315 7DCE           895E         F6            mov	-$A[bp],bx
30316                                           !BCC_EOS
30317                                           ! 4435   arg_seg = get_SS();
30318                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30319 7DD1           E8         FFD2            call	_get_SS
30320                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30321 7DD4           8946         F4            mov	-$C[bp],ax
30322                                           !BCC_EOS
30323                                           ! 4436   in_format = 0;
30324                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30325 7DD7           31C0                       xor	ax,ax
30326 7DD9           8946         FC            mov	-4[bp],ax
30327                                           !BCC_EOS
30328                                           ! 4437   format_width = 0;
30329                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30330 7DDC           31C0                       xor	ax,ax
30331 7DDE           8946         FA            mov	-6[bp],ax
30332                                           !BCC_EOS
30333                                           ! 4438   while (c = read_byte(0xc000, s)) {
30334 7DE1           E9         0104            br 	.2B2
30335                       00007DE4            .2B3:
30336                                           ! 4439     if ( c == '%' ) {
30337                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30338 7DE4           8A46         FF            mov	al,-1[bp]
30339 7DE7           3C                     25  cmp	al,*$25
30340 7DE9           75           0E            jne 	.2B4
30341                       00007DEB            .2B5:
30342                                           ! 4440       in_format = 1;
30343                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30344 7DEB           B8                   0001  mov	ax,*1
30345 7DEE           8946         FC            mov	-4[bp],ax
30346                                           !BCC_EOS
30347                                           ! 4441       format_width = 0;
30348                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30349 7DF1           31C0                       xor	ax,ax
30350 7DF3           8946         FA            mov	-6[bp],ax
30351                                           !BCC_EOS
30352                                           ! 4442       }
30353                                           ! 4443     else if (in_format) {
30354 7DF6           E9         00E8            br 	.2B6
30355                       00007DF9            .2B4:
30356 7DF9           8B46         FC            mov	ax,-4[bp]
30357 7DFC           85C0                       test	ax,ax
30358 7DFE         0F84         00CF            beq 	.2B7
30359                       00007E02            .2B8:
30360                                           ! 4444       if ( (c>='0') && (c<='9') ) {
30361                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30362 7E02           8A46         FF            mov	al,-1[bp]
30363 7E05           3C                     30  cmp	al,*$30
30364 7E07           72           28            jb  	.2B9
30365                       00007E09            .2BB:
30366                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30367 7E09           8A46         FF            mov	al,-1[bp]
30368 7E0C           3C                     39  cmp	al,*$39
30369 7E0E           77           21            ja  	.2B9
30370                       00007E10            .2BA:
30371                                           ! 4445         format_width = (format_width * 10) + (c - '0');
30372                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30373 7E10           8A46         FF            mov	al,-1[bp]
30374 7E13           30E4                       xor	ah,ah
30375 7E15           05                   FFD0  add	ax,*-$30
30376 7E18           50                         push	ax
30377                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30378 7E19           8B46         FA            mov	ax,-6[bp]
30379 7E1C           89C2                       mov	dx,ax
30380 7E1E           D1E0                       shl	ax,*1
30381 7E20           D1E0                       shl	ax,*1
30382 7E22           01D0                       add	ax,dx
30383 7E24           D1E0                       shl	ax,*1
30384                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30385 7E26           0346         EA            add	ax,-$16[bp]
30386 7E29           44                         inc	sp
30387 7E2A           44                         inc	sp
30388                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30389 7E2B           8946         FA            mov	-6[bp],ax
30390                                           !BCC_EOS
30391                                           ! 4446         }
30392                                           ! 4447       else if (c == 'x') {
30393 7E2E           E9         009E            br 	.2BC
30394                       00007E31            .2B9:
30395                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30396 7E31           8A46         FF            mov	al,-1[bp]
30397 7E34           3C                     78  cmp	al,*$78
30398 7E36         0F85         0095            bne 	.2BD
30399                       00007E3A            .2BE:
30400                                           ! 4448         arg_ptr++;
30401                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30402 7E3A           8B5E         F6            mov	bx,-$A[bp]
30403 7E3D           43                         inc	bx
30404 7E3E           43                         inc	bx
30405 7E3F           895E         F6            mov	-$A[bp],bx
30406                                           !BCC_EOS
30407                                           ! 4449         arg = read_word(arg_seg, arg_ptr);
30408                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30409 7E42           FF76         F6            push	-$A[bp]
30410                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30411 7E45           FF76         F4            push	-$C[bp]
30412                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30413 7E48           E8         FEE2            call	_read_word
30414 7E4B           83C4                   04  add	sp,*4
30415                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30416 7E4E           8946         F2            mov	-$E[bp],ax
30417                                           !BCC_EOS
30418                                           ! 4450         if (format_width == 0)
30419                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30420 7E51           8B46         FA            mov	ax,-6[bp]
30421 7E54           85C0                       test	ax,ax
30422 7E56           75           06            jne 	.2BF
30423                       00007E58            .2C0:
30424                                           ! 4451           format_width = 4;
30425                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30426 7E58           B8                   0004  mov	ax,*4
30427 7E5B           8946         FA            mov	-6[bp],ax
30428                                           !BCC_EOS
30429                                           ! 4452         i = 0;
30430                       00007E5E            .2BF:
30431                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30432 7E5E           31C0                       xor	ax,ax
30433 7E60           8946         F8            mov	-8[bp],ax
30434                                           !BCC_EOS
30435                                           ! 4453         digit = format_width - 1;
30436                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30437 7E63           8B46         FA            mov	ax,-6[bp]
30438                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30439 7E66           48                         dec	ax
30440 7E67           8946         F0            mov	-$10[bp],ax
30441                                           !BCC_EOS
30442                                           ! 4454         for (i=0; i<format_width; i++) {
30443                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30444 7E6A           31C0                       xor	ax,ax
30445 7E6C           8946         F8            mov	-8[bp],ax
30446                                           !BCC_EOS
30447                                           !BCC_EOS
30448 7E6F           EB           51            jmp .2C3
30449                       00007E71            .2C4:
30450                                           ! 4455           nibble = (arg >> (4 * digit)) & 0x000f;
30451                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30452                                           ! Debug: expression subtree swapping
30453 7E71           8B46         F0            mov	ax,-$10[bp]
30454 7E74           D1E0                       shl	ax,*1
30455 7E76           D1E0                       shl	ax,*1
30456                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30457 7E78           89C3                       mov	bx,ax
30458 7E7A           8B46         F2            mov	ax,-$E[bp]
30459 7E7D           89D9                       mov	cx,bx
30460 7E7F           D3E8                       shr	ax,cl
30461                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30462 7E81           24                     0F  and	al,*$F
30463                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30464 7E83           30E4                       xor	ah,ah
30465 7E85           8946         EE            mov	-$12[bp],ax
30466                                           !BCC_EOS
30467                                           ! 4456           if (nibble <= 9)
30468                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30469 7E88           8B46         EE            mov	ax,-$12[bp]
30470 7E8B           3D                   0009  cmp	ax,*9
30471 7E8E           77           13            ja  	.2C5
30472                       00007E90            .2C6:
30473                                           ! 4457             outb(0xe9, nibble + '0');
30474                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30475 7E90           8B46         EE            mov	ax,-$12[bp]
30476                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30477 7E93           05                   0030  add	ax,*$30
30478 7E96           50                         push	ax
30479                                           ! Debug: list int = const $E9 (used reg = )
30480 7E97           B8                   00E9  mov	ax,#$E9
30481 7E9A           50                         push	ax
30482                                           ! Debug: func () void = outb+0 (used reg = )
30483 7E9B           E8         FEE8            call	_outb
30484 7E9E           83C4                   04  add	sp,*4
30485                                           !BCC_EOS
30486                                           ! 4458           else
30487                                           ! 4459             outb(0xe9, (nibble - 10) + 'A');
30488 7EA1           EB           11            jmp .2C7
30489                       00007EA3            .2C5:
30490                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30491 7EA3           8B46         EE            mov	ax,-$12[bp]
30492                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30493                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30494 7EA6           05                   0037  add	ax,*$37
30495 7EA9           50                         push	ax
30496                                           ! Debug: list int = const $E9 (used reg = )
30497 7EAA           B8                   00E9  mov	ax,#$E9
30498 7EAD           50                         push	ax
30499                                           ! Debug: func () void = outb+0 (used reg = )
30500 7EAE           E8         FED5            call	_outb
30501 7EB1           83C4                   04  add	sp,*4
30502                                           !BCC_EOS
30503                                           ! 4460           digit--;
30504                       00007EB4            .2C7:
30505                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30506 7EB4           8B46         F0            mov	ax,-$10[bp]
30507 7EB7           48                         dec	ax
30508 7EB8           8946         F0            mov	-$10[bp],ax
30509                                           !BCC_EOS
30510                                           ! 4461           }
30511                                           ! 4462         in_format = 0;
30512                       00007EBB            .2C2:
30513                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30514 7EBB           8B46         F8            mov	ax,-8[bp]
30515 7EBE           40                         inc	ax
30516 7EBF           8946         F8            mov	-8[bp],ax
30517                       00007EC2            .2C3:
30518                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30519 7EC2           8B46         F8            mov	ax,-8[bp]
30520 7EC5           3B46         FA            cmp	ax,-6[bp]
30521 7EC8           72           A7            jb 	.2C4
30522                       00007ECA            .2C8:
30523                       00007ECA            .2C1:
30524                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30525 7ECA           31C0                       xor	ax,ax
30526 7ECC           8946         FC            mov	-4[bp],ax
30527                                           !BCC_EOS
30528                                           ! 4463         }
30529                                           ! 4464       }
30530                       00007ECF            .2BD:
30531                       00007ECF            .2BC:
30532                                           ! 4465     else {
30533 7ECF           EB           10            jmp .2C9
30534                       00007ED1            .2B7:
30535                                           ! 4466       outb(0xe9, c);
30536                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30537 7ED1           8A46         FF            mov	al,-1[bp]
30538 7ED4           30E4                       xor	ah,ah
30539 7ED6           50                         push	ax
30540                                           ! Debug: list int = const $E9 (used reg = )
30541 7ED7           B8                   00E9  mov	ax,#$E9
30542 7EDA           50                         push	ax
30543                                           ! Debug: func () void = outb+0 (used reg = )
30544 7EDB           E8         FEA8            call	_outb
30545 7EDE           83C4                   04  add	sp,*4
30546                                           !BCC_EOS
30547                                           ! 4467       }
30548                                           ! 4468     s ++;
30549                       00007EE1            .2C9:
30550                       00007EE1            .2B6:
30551                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30552 7EE1           8B5E         04            mov	bx,4[bp]
30553 7EE4           43                         inc	bx
30554 7EE5           895E         04            mov	4[bp],bx
30555                                           !BCC_EOS
30556                                           ! 4469     }
30557                                           ! 4470 }
30558                       00007EE8            .2B2:
30559                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30560 7EE8           FF76         04            push	4[bp]
30561                                           ! Debug: list unsigned int = const $C000 (used reg = )
30562 7EEB           B8                   C000  mov	ax,#$C000
30563 7EEE           50                         push	ax
30564                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30565 7EEF           E8         FE28            call	_read_byte
30566 7EF2           83C4                   04  add	sp,*4
30567                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30568 7EF5           8846         FF            mov	-1[bp],al
30569 7EF8           84C0                       test	al,al
30570 7EFA         0F85         FEE6            bne 	.2B3
30571                       00007EFE            .2CA:
30572                       00007EFE            .2B1:
30573 7EFE           89EC                       mov	sp,bp
30574 7F00           5D                         pop	bp
30575 7F01           C3                         ret
30576                                           ! 4471 static ModeInfoListItem mode_info_list[]=
30577                                           ! Register BX used in function printf
30578                                           ! 4472 {
30579                                           
30580                       00007F02            _mode_info_list:
30581                                           ! 4473 { 0x0100,
30582 7F02                      0100            .word	$100
30583                                           ! 4474 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30584 7F04                      009B            .word	$9B
30585                                           ! 4475                           0x01 | 0x02 | 0x04,
30586 7F06                        07            .byte	7
30587                                           ! 4476                           0,
30588 7F07                        00            .byte	0
30589                                           ! 4477                           64,
30590 7F08                      0040            .word	$40
30591                                           ! 4478                    64,
30592 7F0A                      0040            .word	$40
30593                                           ! 4479                        0xA000,
30594 7F0C                      A000            .word	$A000
30595                                           ! 4480                        0x0000,
30596 7F0E                      0000            .word	0
30597                                           ! 4481                       0,
30598 7F10                      0000            .word	0
30599 7F12                      0000            .word	0
30600                                           ! 4482                             640,
30601 7F14                      0280            .word	$280
30602                                           ! 4483                        640,
30603 7F16                      0280            .word	$280
30604                                           ! 4484         
30605                                           ! 4484                400,
30606 7F18                      0190            .word	$190
30607                                           ! 4485                      8,
30608 7F1A                        08            .byte	8
30609                                           ! 4486                      16,
30610 7F1B                        10            .byte	$10
30611                                           ! 4487                           1,
30612 7F1C                        01            .byte	1
30613                                           ! 4488                         8,
30614 7F1D                        08            .byte	8
30615                                           ! 4489                          4,
30616 7F1E                        04            .byte	4
30617                                           ! 4490                        0x04,
30618 7F1F                        04            .byte	4
30619                                           ! 4491                     0,
30620 7F20                        00            .byte	0
30621                                           ! 4492                               64,
30622 7F21                        40            .byte	$40
30623                                           ! 4493                          0,
30624 7F22                        00            .byte	0
30625                                           ! 4494                        0,
30626 7F23                        00            .byte	0
30627                                           ! 4495                             0,
30628 7F24                        00            .byte	0
30629                                           ! 4496                          0,
30630 7F25                        00            .byte	0
30631                                           ! 4497                               0,
30632 7F26                        00            .byte	0
30633                                           ! 4498                         0,
30634 7F27                        00            .byte	0
30635                                           ! 4499                              0,
30636 7F28                        00            .byte	0
30637                                           ! 4500                         0,
30638 7F29                        00            .byte	0
30639                                           ! 4501                              0,
30640 7F2A                        00            .byte	0
30641                                           ! 4502                                0,
30642 7F2B                        00            .byte	0
30643                                           ! 4503                        0xE0000000,
30644 7F2C                      0000            .word	0
30645 7F2E                      E000            .word	$E000
30646                                           ! 4504                               0,
30647 7F30                      0000            .word	0
30648 7F32                      0000            .word	0
30649                                           ! 4505                             0,
30650 7F34                      0000            .word	0
30651                                           ! 4506                                640,
30652 7F36                      0280            .word	$280
30653                                           ! 4507                             0,
30654 7F38                        00            .byte	0
30655                                           ! 4508                             0,
30656 7F39                        00            .byte	0
30657                                           ! 4509                           0,
30658 7F3A                        00            .byte	0
30659                                           ! 4510                                0,
30660 7F3B                        00            .byte	0
30661                                           ! 4511                             0,
30662 7F3C                        00            .byte	0
30663                                           ! 4512                                  0,
30664 7F3D                        00            .byte	0
30665                                           ! 4513                            0,
30666 7F3E                        00            .byte	0
30667                                           ! 4514                                 0,
30668 7F3F                        00            .byte	0
30669                                           ! 4515                            0,
30670 7F40                        00            .byte	0
30671                                           ! 4516                                 0,
30672 7F41                        00            .byte	0
30673                                           ! 4517                          0,
30674 7F42                      0000            .word	0
30675 7F44                      0000            .word	0
30676                                           ! 4518 } },
30677                                           ! 4519 { 0x0101,
30678 7F46                      0101            .word	$101
30679                                           ! 4520 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30680 7F48                      009B            .word	$9B
30681                                           ! 4521                           0x01 | 0x02 | 0x04,
30682 7F4A                        07            .byte	7
30683                                           ! 4522                           0,
30684 7F4B                        00            .byte	0
30685                                           ! 4523                           64,
30686 7F4C                      0040            .word	$40
30687                                           ! 4524                    64,
30688 7F4E                      0040            .word	$40
30689                                           ! 4525                        0xA000,
30690 7F50                      A000            .word	$A000
30691                                           ! 4526                        0x0000,
30692 7F52                      0000            .word	0
30693                                           ! 4527                       0,
30694 7F54                      0000            .word	0
30695 7F56                      0000            .word	0
30696                                           ! 4528                             640,
30697 7F58                      0280            .word	$280
30698                                           ! 4529                        640,
30699 7F5A                      0280            .word	$280
30700                                           ! 4530                        480,
30701 7F5C                      01E0            .word	$1E0
30702                                           ! 4531                      8,
30703 7F5E                        08            .byte	8
30704                                           ! 4532                      16,
30705 7F5F                        10            .byte	$10
30706                                           ! 4533                           1,
30707 7F60                        01            .byte	1
30708                                           ! 4534                         8,
30709 7F61                        08            .byte	8
30710                                           ! 4535                          5,
30711 7F62                        05            .byte	5
30712                                           ! 4536                        0x04,
30713 7F63                        04            .byte	4
30714                                           ! 4537                     0,
30715 7F64                        00            .byte	0
30716                                           ! 4538                               53,
30717 7F65                        35            .byte	$35
30718                                           ! 4539                          0,
30719 7F66                        00            .byte	0
30720                                           ! 4540                        0,
30721 7F67                        00            .byte	0
30722                                           ! 4541                             0,
30723 7F68                        00            .byte	0
30724                                           ! 4542                          0,
30725 7F69                        00            .byte	0
30726                                           ! 4543                               0,
30727 7F6A                        00            .byte	0
30728                                           ! 4544                         0,
30729 7F6B                        00            .byte	0
30730                                           ! 4545                              0,
30731 7F6C                        00            .byte	0
30732                                           ! 4546                         0,
30733 7F6D                        00            .byte	0
30734                                           ! 4547                              0,
30735 7F6E                        00            .byte	0
30736                                           ! 4548                                0,
30737 7F6F                        00            .byte	0
30738                                           ! 4549                        0xE0000000,
30739 7F70                      0000            .word	0
30740 7F72                      E000            .word	$E000
30741                                           ! 4550                               0,
30742 7F74                      0000            .word	0
30743 7F76                      0000            .word	0
30744                                           ! 4551                             0,
30745 7F78                      0000            .word	0
30746                                           ! 4552                                640,
30747 7F7A                      0280            .word	$280
30748                                           ! 4553          
30749                                           ! 4553                    0,
30750 7F7C                        00            .byte	0
30751                                           ! 4554                             0,
30752 7F7D                        00            .byte	0
30753                                           ! 4555                           0,
30754 7F7E                        00            .byte	0
30755                                           ! 4556                                0,
30756 7F7F                        00            .byte	0
30757                                           ! 4557                             0,
30758 7F80                        00            .byte	0
30759                                           ! 4558                                  0,
30760 7F81                        00            .byte	0
30761                                           ! 4559                            0,
30762 7F82                        00            .byte	0
30763                                           ! 4560                                 0,
30764 7F83                        00            .byte	0
30765                                           ! 4561                            0,
30766 7F84                        00            .byte	0
30767                                           ! 4562                                 0,
30768 7F85                        00            .byte	0
30769                                           ! 4563                          0,
30770 7F86                      0000            .word	0
30771 7F88                      0000            .word	0
30772                                           ! 4564 } },
30773                                           ! 4565 { 0x0102,
30774 7F8A                      0102            .word	$102
30775                                           ! 4566 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30776 7F8C                      001F            .word	$1F
30777                                           ! 4567                           0x01 | 0x02 | 0x04,
30778 7F8E                        07            .byte	7
30779                                           ! 4568                           0,
30780 7F8F                        00            .byte	0
30781                                           ! 4569                           64,
30782 7F90                      0040            .word	$40
30783                                           ! 4570                    64,
30784 7F92                      0040            .word	$40
30785                                           ! 4571                        0xA000,
30786 7F94                      A000            .word	$A000
30787                                           ! 4572                        0x0000,
30788 7F96                      0000            .word	0
30789                                           ! 4573                       0,
30790 7F98                      0000            .word	0
30791 7F9A                      0000            .word	0
30792                                           ! 4574                             100,
30793 7F9C                      0064            .word	$64
30794                                           ! 4575                        800,
30795 7F9E                      0320            .word	$320
30796                                           ! 4576                        600,
30797 7FA0                      0258            .word	$258
30798                                           ! 4577                      8,
30799 7FA2                        08            .byte	8
30800                                           ! 4578                      16,
30801 7FA3                        10            .byte	$10
30802                                           ! 4579                           4,
30803 7FA4                        04            .byte	4
30804                                           ! 4580                         4,
30805 7FA5                        04            .byte	4
30806                                           ! 4581                          1,
30807 7FA6                        01            .byte	1
30808                                           ! 4582                        0x03,
30809 7FA7                        03            .byte	3
30810                                           ! 4583                     0,
30811 7FA8                        00            .byte	0
30812                                           ! 4584                               68,
30813 7FA9                        44            .byte	$44
30814                                           ! 4585                          0,
30815 7FAA                        00            .byte	0
30816                                           ! 4586                        0,
30817 7FAB                        00            .byte	0
30818                                           ! 4587                             0,
30819 7FAC                        00            .byte	0
30820                                           ! 4588                          0,
30821 7FAD                        00            .byte	0
30822                                           ! 4589                               0,
30823 7FAE                        00            .byte	0
30824                                           ! 4590                         0,
30825 7FAF                        00            .byte	0
30826                                           ! 4591                              0,
30827 7FB0                        00            .byte	0
30828                                           ! 4592                         0,
30829 7FB1                        00            .byte	0
30830                                           ! 4593                              0,
30831 7FB2                        00            .byte	0
30832                                           ! 4594                                0,
30833 7FB3                        00            .byte	0
30834                                           ! 4595                        0,
30835 7FB4                      0000            .word	0
30836 7FB6                      0000            .word	0
30837                                           ! 4596                               0,
30838 7FB8                      0000            .word	0
30839 7FBA                      0000            .word	0
30840                                           ! 4597                             0,
30841 7FBC                      0000            .word	0
30842                                           ! 4598                                100,
30843 7FBE                      0064            .word	$64
30844                                           ! 4599                             0,
30845 7FC0                        00            .byte	0
30846                                           ! 4600                             0,
30847 7FC1                        00            .byte	0
30848                                           ! 4601                           0,
30849 7FC2                        00            .byte	0
30850                                           ! 4602                                0,
30851 7FC3                        00            .byte	0
30852                                           ! 4603                             0,
30853 7FC4                        00            .byte	0
30854                                           ! 4604                                  0,
30855 7FC5                        00            .byte	0
30856                                           ! 4605                            0,
30857 7FC6                        00            .byte	0
30858                                           ! 4606                                 0,
30859 7FC7                        00            .byte	0
30860                                           ! 4607                            0,
30861 7FC8                        00            .byte	0
30862                                           ! 4608                                 0,
30863 7FC9                        00            .byte	0
30864                                           ! 4609                          0,
30865 7FCA                      0000            .word	0
30866 7FCC                      0000            .word	0
30867                                           ! 4610 } },
30868                                           ! 4611 { 0x0103,
30869 7FCE                      0103            .word	$103
30870                                           ! 4612 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30871 7FD0                      009B            .word	$9B
30872                                           ! 4613                           0x01 | 0x02 | 0x04,
30873 7FD2                        07            .byte	7
30874                                           ! 4614                           0,
30875 7FD3                        00            .byte	0
30876                                           ! 4615                           64,
30877 7FD4                      0040            .word	$40
30878                                           ! 4616                    64,
30879 7FD6                      0040            .word	$40
30880                                           ! 4617                        0xA000,
30881 7FD8                      A000            .word	$A000
30882                                           ! 4618                        0x0000,
30883 7FDA                      0000            .word	0
30884                                           ! 4619                       0,
30885 7FDC                      0000            .word	0
30886 7FDE                      0000            .word	0
30887                                           ! 4620                             800,
30888 7FE0                      0320            .word	$320
30889                                           ! 4621                        800,
30890 7FE2                      0320            .word	$320
30891                                           ! 4622             
30892                                           ! 4622            600,
30893 7FE4                      0258            .word	$258
30894                                           ! 4623                      8,
30895 7FE6                        08            .byte	8
30896                                           ! 4624                      16,
30897 7FE7                        10            .byte	$10
30898                                           ! 4625                           1,
30899 7FE8                        01            .byte	1
30900                                           ! 4626                         8,
30901 7FE9                        08            .byte	8
30902                                           ! 4627                          8,
30903 7FEA                        08            .byte	8
30904                                           ! 4628                        0x04,
30905 7FEB                        04            .byte	4
30906                                           ! 4629                     0,
30907 7FEC                        00            .byte	0
30908                                           ! 4630                               33,
30909 7FED                        21            .byte	$21
30910                                           ! 4631                          0,
30911 7FEE                        00            .byte	0
30912                                           ! 4632                        0,
30913 7FEF                        00            .byte	0
30914                                           ! 4633                             0,
30915 7FF0                        00            .byte	0
30916                                           ! 4634                          0,
30917 7FF1                        00            .byte	0
30918                                           ! 4635                               0,
30919 7FF2                        00            .byte	0
30920                                           ! 4636                         0,
30921 7FF3                        00            .byte	0
30922                                           ! 4637                              0,
30923 7FF4                        00            .byte	0
30924                                           ! 4638                         0,
30925 7FF5                        00            .byte	0
30926                                           ! 4639                              0,
30927 7FF6                        00            .byte	0
30928                                           ! 4640                                0,
30929 7FF7                        00            .byte	0
30930                                           ! 4641                        0xE0000000,
30931 7FF8                      0000            .word	0
30932 7FFA                      E000            .word	$E000
30933                                           ! 4642                               0,
30934 7FFC                      0000            .word	0
30935 7FFE                      0000            .word	0
30936                                           ! 4643                             0,
30937 8000                      0000            .word	0
30938                                           ! 4644                                800,
30939 8002                      0320            .word	$320
30940                                           ! 4645                             0,
30941 8004                        00            .byte	0
30942                                           ! 4646                             0,
30943 8005                        00            .byte	0
30944                                           ! 4647                           0,
30945 8006                        00            .byte	0
30946                                           ! 4648                                0,
30947 8007                        00            .byte	0
30948                                           ! 4649                             0,
30949 8008                        00            .byte	0
30950                                           ! 4650                                  0,
30951 8009                        00            .byte	0
30952                                           ! 4651                            0,
30953 800A                        00            .byte	0
30954                                           ! 4652                                 0,
30955 800B                        00            .byte	0
30956                                           ! 4653                            0,
30957 800C                        00            .byte	0
30958                                           ! 4654                                 0,
30959 800D                        00            .byte	0
30960                                           ! 4655                          0,
30961 800E                      0000            .word	0
30962 8010                      0000            .word	0
30963                                           ! 4656 } },
30964                                           ! 4657 { 0x0104,
30965 8012                      0104            .word	$104
30966                                           ! 4658 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30967 8014                      001F            .word	$1F
30968                                           ! 4659                           0x01 | 0x02 | 0x04,
30969 8016                        07            .byte	7
30970                                           ! 4660                           0,
30971 8017                        00            .byte	0
30972                                           ! 4661                           64,
30973 8018                      0040            .word	$40
30974                                           ! 4662                    64,
30975 801A                      0040            .word	$40
30976                                           ! 4663                        0xA000,
30977 801C                      A000            .word	$A000
30978                                           ! 4664                        0x0000,
30979 801E                      0000            .word	0
30980                                           ! 4665                       0,
30981 8020                      0000            .word	0
30982 8022                      0000            .word	0
30983                                           ! 4666                             128,
30984 8024                      0080            .word	$80
30985                                           ! 4667                        1024,
30986 8026                      0400            .word	$400
30987                                           ! 4668                        768,
30988 8028                      0300            .word	$300
30989                                           ! 4669                      8,
30990 802A                        08            .byte	8
30991                                           ! 4670                      16,
30992 802B                        10            .byte	$10
30993                                           ! 4671                           4,
30994 802C                        04            .byte	4
30995                                           ! 4672                         4,
30996 802D                        04            .byte	4
30997                                           ! 4673                          2,
30998 802E                        02            .byte	2
30999                                           ! 4674                        0x03,
31000 802F                        03            .byte	3
31001                                           ! 4675                     0,
31002 8030                        00            .byte	0
31003                                           ! 4676                               41,
31004 8031                        29            .byte	$29
31005                                           ! 4677                          0,
31006 8032                        00            .byte	0
31007                                           ! 4678                        0,
31008 8033                        00            .byte	0
31009                                           ! 4679                             0,
31010 8034                        00            .byte	0
31011                                           ! 4680                          0,
31012 8035                        00            .byte	0
31013                                           ! 4681                               0,
31014 8036                        00            .byte	0
31015                                           ! 4682                         0,
31016 8037                        00            .byte	0
31017                                           ! 4683                              0,
31018 8038                        00            .byte	0
31019                                           ! 4684                         0,
31020 8039                        00            .byte	0
31021                                           ! 4685                              0,
31022 803A                        00            .byte	0
31023                                           ! 4686                                0,
31024 803B                        00            .byte	0
31025                                           ! 4687                        0,
31026 803C                      0000            .word	0
31027 803E                      0000            .word	0
31028                                           ! 4688                               0,
31029 8040                      0000            .word	0
31030 8042                      0000            .word	0
31031                                           ! 4689                             0,
31032 8044                      0000            .word	0
31033                                           ! 4690                                128,
31034 8046                      0080            .word	$80
31035                                           ! 4691                      
31036                                           ! 4691        0,
31037 8048                        00            .byte	0
31038                                           ! 4692                             0,
31039 8049                        00            .byte	0
31040                                           ! 4693                           0,
31041 804A                        00            .byte	0
31042                                           ! 4694                                0,
31043 804B                        00            .byte	0
31044                                           ! 4695                             0,
31045 804C                        00            .byte	0
31046                                           ! 4696                                  0,
31047 804D                        00            .byte	0
31048                                           ! 4697                            0,
31049 804E                        00            .byte	0
31050                                           ! 4698                                 0,
31051 804F                        00            .byte	0
31052                                           ! 4699                            0,
31053 8050                        00            .byte	0
31054                                           ! 4700                                 0,
31055 8051                        00            .byte	0
31056                                           ! 4701                          0,
31057 8052                      0000            .word	0
31058 8054                      0000            .word	0
31059                                           ! 4702 } },
31060                                           ! 4703 { 0x0105,
31061 8056                      0105            .word	$105
31062                                           ! 4704 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31063 8058                      009B            .word	$9B
31064                                           ! 4705                           0x01 | 0x02 | 0x04,
31065 805A                        07            .byte	7
31066                                           ! 4706                           0,
31067 805B                        00            .byte	0
31068                                           ! 4707                           64,
31069 805C                      0040            .word	$40
31070                                           ! 4708                    64,
31071 805E                      0040            .word	$40
31072                                           ! 4709                        0xA000,
31073 8060                      A000            .word	$A000
31074                                           ! 4710                        0x0000,
31075 8062                      0000            .word	0
31076                                           ! 4711                       0,
31077 8064                      0000            .word	0
31078 8066                      0000            .word	0
31079                                           ! 4712                             1024,
31080 8068                      0400            .word	$400
31081                                           ! 4713                        1024,
31082 806A                      0400            .word	$400
31083                                           ! 4714                        768,
31084 806C                      0300            .word	$300
31085                                           ! 4715                      8,
31086 806E                        08            .byte	8
31087                                           ! 4716                      16,
31088 806F                        10            .byte	$10
31089                                           ! 4717                           1,
31090 8070                        01            .byte	1
31091                                           ! 4718                         8,
31092 8071                        08            .byte	8
31093                                           ! 4719                          12,
31094 8072                        0C            .byte	$C
31095                                           ! 4720                        0x04,
31096 8073                        04            .byte	4
31097                                           ! 4721                     0,
31098 8074                        00            .byte	0
31099                                           ! 4722                               20,
31100 8075                        14            .byte	$14
31101                                           ! 4723                          0,
31102 8076                        00            .byte	0
31103                                           ! 4724                        0,
31104 8077                        00            .byte	0
31105                                           ! 4725                             0,
31106 8078                        00            .byte	0
31107                                           ! 4726                          0,
31108 8079                        00            .byte	0
31109                                           ! 4727                               0,
31110 807A                        00            .byte	0
31111                                           ! 4728                         0,
31112 807B                        00            .byte	0
31113                                           ! 4729                              0,
31114 807C                        00            .byte	0
31115                                           ! 4730                         0,
31116 807D                        00            .byte	0
31117                                           ! 4731                              0,
31118 807E                        00            .byte	0
31119                                           ! 4732                                0,
31120 807F                        00            .byte	0
31121                                           ! 4733                        0xE0000000,
31122 8080                      0000            .word	0
31123 8082                      E000            .word	$E000
31124                                           ! 4734                               0,
31125 8084                      0000            .word	0
31126 8086                      0000            .word	0
31127                                           ! 4735                             0,
31128 8088                      0000            .word	0
31129                                           ! 4736                                1024,
31130 808A                      0400            .word	$400
31131                                           ! 4737                             0,
31132 808C                        00            .byte	0
31133                                           ! 4738                             0,
31134 808D                        00            .byte	0
31135                                           ! 4739                           0,
31136 808E                        00            .byte	0
31137                                           ! 4740                                0,
31138 808F                        00            .byte	0
31139                                           ! 4741                             0,
31140 8090                        00            .byte	0
31141                                           ! 4742                                  0,
31142 8091                        00            .byte	0
31143                                           ! 4743                            0,
31144 8092                        00            .byte	0
31145                                           ! 4744                                 0,
31146 8093                        00            .byte	0
31147                                           ! 4745                            0,
31148 8094                        00            .byte	0
31149                                           ! 4746                                 0,
31150 8095                        00            .byte	0
31151                                           ! 4747                          0,
31152 8096                      0000            .word	0
31153 8098                      0000            .word	0
31154                                           ! 4748 } },
31155                                           ! 4749 { 0x0106,
31156 809A                      0106            .word	$106
31157                                           ! 4750 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31158 809C                      001F            .word	$1F
31159                                           ! 4751                           0x01 | 0x02 | 0x04,
31160 809E                        07            .byte	7
31161                                           ! 4752                           0,
31162 809F                        00            .byte	0
31163                                           ! 4753                           64,
31164 80A0                      0040            .word	$40
31165                                           ! 4754                    64,
31166 80A2                      0040            .word	$40
31167                                           ! 4755                        0xA000,
31168 80A4                      A000            .word	$A000
31169                                           ! 4756                        0x0000,
31170 80A6                      0000            .word	0
31171                                           ! 4757                       0,
31172 80A8                      0000            .word	0
31173 80AA                      0000            .word	0
31174                                           ! 4758                             160,
31175 80AC                      00A0            .word	$A0
31176                                           ! 4759                        1280,
31177 80AE                      0500            .word	$500
31178                                           ! 4760           
31179                                           ! 4760              1024,
31180 80B0                      0400            .word	$400
31181                                           ! 4761                      8,
31182 80B2                        08            .byte	8
31183                                           ! 4762                      16,
31184 80B3                        10            .byte	$10
31185                                           ! 4763                           4,
31186 80B4                        04            .byte	4
31187                                           ! 4764                         4,
31188 80B5                        04            .byte	4
31189                                           ! 4765                          3,
31190 80B6                        03            .byte	3
31191                                           ! 4766                        0x03,
31192 80B7                        03            .byte	3
31193                                           ! 4767                     0,
31194 80B8                        00            .byte	0
31195                                           ! 4768                               24,
31196 80B9                        18            .byte	$18
31197                                           ! 4769                          0,
31198 80BA                        00            .byte	0
31199                                           ! 4770                        0,
31200 80BB                        00            .byte	0
31201                                           ! 4771                             0,
31202 80BC                        00            .byte	0
31203                                           ! 4772                          0,
31204 80BD                        00            .byte	0
31205                                           ! 4773                               0,
31206 80BE                        00            .byte	0
31207                                           ! 4774                         0,
31208 80BF                        00            .byte	0
31209                                           ! 4775                              0,
31210 80C0                        00            .byte	0
31211                                           ! 4776                         0,
31212 80C1                        00            .byte	0
31213                                           ! 4777                              0,
31214 80C2                        00            .byte	0
31215                                           ! 4778                                0,
31216 80C3                        00            .byte	0
31217                                           ! 4779                        0,
31218 80C4                      0000            .word	0
31219 80C6                      0000            .word	0
31220                                           ! 4780                               0,
31221 80C8                      0000            .word	0
31222 80CA                      0000            .word	0
31223                                           ! 4781                             0,
31224 80CC                      0000            .word	0
31225                                           ! 4782                                160,
31226 80CE                      00A0            .word	$A0
31227                                           ! 4783                             0,
31228 80D0                        00            .byte	0
31229                                           ! 4784                             0,
31230 80D1                        00            .byte	0
31231                                           ! 4785                           0,
31232 80D2                        00            .byte	0
31233                                           ! 4786                                0,
31234 80D3                        00            .byte	0
31235                                           ! 4787                             0,
31236 80D4                        00            .byte	0
31237                                           ! 4788                                  0,
31238 80D5                        00            .byte	0
31239                                           ! 4789                            0,
31240 80D6                        00            .byte	0
31241                                           ! 4790                                 0,
31242 80D7                        00            .byte	0
31243                                           ! 4791                            0,
31244 80D8                        00            .byte	0
31245                                           ! 4792                                 0,
31246 80D9                        00            .byte	0
31247                                           ! 4793                          0,
31248 80DA                      0000            .word	0
31249 80DC                      0000            .word	0
31250                                           ! 4794 } },
31251                                           ! 4795 { 0x0107,
31252 80DE                      0107            .word	$107
31253                                           ! 4796 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31254 80E0                      009B            .word	$9B
31255                                           ! 4797                           0x01 | 0x02 | 0x04,
31256 80E2                        07            .byte	7
31257                                           ! 4798                           0,
31258 80E3                        00            .byte	0
31259                                           ! 4799                           64,
31260 80E4                      0040            .word	$40
31261                                           ! 4800                    64,
31262 80E6                      0040            .word	$40
31263                                           ! 4801                        0xA000,
31264 80E8                      A000            .word	$A000
31265                                           ! 4802                        0x0000,
31266 80EA                      0000            .word	0
31267                                           ! 4803                       0,
31268 80EC                      0000            .word	0
31269 80EE                      0000            .word	0
31270                                           ! 4804                             1280,
31271 80F0                      0500            .word	$500
31272                                           ! 4805                        1280,
31273 80F2                      0500            .word	$500
31274                                           ! 4806                        1024,
31275 80F4                      0400            .word	$400
31276                                           ! 4807                      8,
31277 80F6                        08            .byte	8
31278                                           ! 4808                      16,
31279 80F7                        10            .byte	$10
31280                                           ! 4809                           1,
31281 80F8                        01            .byte	1
31282                                           ! 4810                         8,
31283 80F9                        08            .byte	8
31284                                           ! 4811                          20,
31285 80FA                        14            .byte	$14
31286                                           ! 4812                        0x04,
31287 80FB                        04            .byte	4
31288                                           ! 4813                     0,
31289 80FC                        00            .byte	0
31290                                           ! 4814                               11,
31291 80FD                        0B            .byte	$B
31292                                           ! 4815                          0,
31293 80FE                        00            .byte	0
31294                                           ! 4816                        0,
31295 80FF                        00            .byte	0
31296                                           ! 4817                             0,
31297 8100                        00            .byte	0
31298                                           ! 4818                          0,
31299 8101                        00            .byte	0
31300                                           ! 4819                               0,
31301 8102                        00            .byte	0
31302                                           ! 4820                         0,
31303 8103                        00            .byte	0
31304                                           ! 4821                              0,
31305 8104                        00            .byte	0
31306                                           ! 4822                         0,
31307 8105                        00            .byte	0
31308                                           ! 4823                              0,
31309 8106                        00            .byte	0
31310                                           ! 4824                                0,
31311 8107                        00            .byte	0
31312                                           ! 4825                        0xE0000000,
31313 8108                      0000            .word	0
31314 810A                      E000            .word	$E000
31315                                           ! 4826                               0,
31316 810C                      0000            .word	0
31317 810E                      0000            .word	0
31318                                           ! 4827                             0,
31319 8110                      0000            .word	0
31320                                           ! 4828                                1280,
31321 8112                      0500            .word	$500
31322                                           ! 4829               
31323                                           ! 4829               0,
31324 8114                        00            .byte	0
31325                                           ! 4830                             0,
31326 8115                        00            .byte	0
31327                                           ! 4831                           0,
31328 8116                        00            .byte	0
31329                                           ! 4832                                0,
31330 8117                        00            .byte	0
31331                                           ! 4833                             0,
31332 8118                        00            .byte	0
31333                                           ! 4834                                  0,
31334 8119                        00            .byte	0
31335                                           ! 4835                            0,
31336 811A                        00            .byte	0
31337                                           ! 4836                                 0,
31338 811B                        00            .byte	0
31339                                           ! 4837                            0,
31340 811C                        00            .byte	0
31341                                           ! 4838                                 0,
31342 811D                        00            .byte	0
31343                                           ! 4839                          0,
31344 811E                      0000            .word	0
31345 8120                      0000            .word	0
31346                                           ! 4840 } },
31347                                           ! 4841 { 0x010d,
31348 8122                      010D            .word	$10D
31349                                           ! 4842 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31350 8124                      009B            .word	$9B
31351                                           ! 4843                           0x01 | 0x02 | 0x04,
31352 8126                        07            .byte	7
31353                                           ! 4844                           0,
31354 8127                        00            .byte	0
31355                                           ! 4845                           64,
31356 8128                      0040            .word	$40
31357                                           ! 4846                    64,
31358 812A                      0040            .word	$40
31359                                           ! 4847                        0xA000,
31360 812C                      A000            .word	$A000
31361                                           ! 4848                        0x0000,
31362 812E                      0000            .word	0
31363                                           ! 4849                       0,
31364 8130                      0000            .word	0
31365 8132                      0000            .word	0
31366                                           ! 4850                             640,
31367 8134                      0280            .word	$280
31368                                           ! 4851                        320,
31369 8136                      0140            .word	$140
31370                                           ! 4852                        200,
31371 8138                      00C8            .word	$C8
31372                                           ! 4853                      8,
31373 813A                        08            .byte	8
31374                                           ! 4854                      16,
31375 813B                        10            .byte	$10
31376                                           ! 4855                           1,
31377 813C                        01            .byte	1
31378                                           ! 4856                         15,
31379 813D                        0F            .byte	$F
31380                                           ! 4857                          2,
31381 813E                        02            .byte	2
31382                                           ! 4858                        0x06,
31383 813F                        06            .byte	6
31384                                           ! 4859                     0,
31385 8140                        00            .byte	0
31386                                           ! 4860                               130,
31387 8141                        82            .byte	$82
31388                                           ! 4861                          0,
31389 8142                        00            .byte	0
31390                                           ! 4862                        5,
31391 8143                        05            .byte	5
31392                                           ! 4863                             10,
31393 8144                        0A            .byte	$A
31394                                           ! 4864                          5,
31395 8145                        05            .byte	5
31396                                           ! 4865                               5,
31397 8146                        05            .byte	5
31398                                           ! 4866                         5,
31399 8147                        05            .byte	5
31400                                           ! 4867                              0,
31401 8148                        00            .byte	0
31402                                           ! 4868                         1,
31403 8149                        01            .byte	1
31404                                           ! 4869                              15,
31405 814A                        0F            .byte	$F
31406                                           ! 4870                                0,
31407 814B                        00            .byte	0
31408                                           ! 4871                        0xE0000000,
31409 814C                      0000            .word	0
31410 814E                      E000            .word	$E000
31411                                           ! 4872                               0,
31412 8150                      0000            .word	0
31413 8152                      0000            .word	0
31414                                           ! 4873                             0,
31415 8154                      0000            .word	0
31416                                           ! 4874                                640,
31417 8156                      0280            .word	$280
31418                                           ! 4875                             0,
31419 8158                        00            .byte	0
31420                                           ! 4876                             0,
31421 8159                        00            .byte	0
31422                                           ! 4877                           5,
31423 815A                        05            .byte	5
31424                                           ! 4878                                10,
31425 815B                        0A            .byte	$A
31426                                           ! 4879                             5,
31427 815C                        05            .byte	5
31428                                           ! 4880                                  5,
31429 815D                        05            .byte	5
31430                                           ! 4881                            5,
31431 815E                        05            .byte	5
31432                                           ! 4882                                 0,
31433 815F                        00            .byte	0
31434                                           ! 4883                            1,
31435 8160                        01            .byte	1
31436                                           ! 4884                                 15,
31437 8161                        0F            .byte	$F
31438                                           ! 4885                          0,
31439 8162                      0000            .word	0
31440 8164                      0000            .word	0
31441                                           ! 4886 } },
31442                                           ! 4887 { 0x010e,
31443 8166                      010E            .word	$10E
31444                                           ! 4888 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31445 8168                      009B            .word	$9B
31446                                           ! 4889                           0x01 | 0x02 | 0x04,
31447 816A                        07            .byte	7
31448                                           ! 4890                           0,
31449 816B                        00            .byte	0
31450                                           ! 4891                           64,
31451 816C                      0040            .word	$40
31452                                           ! 4892                    64,
31453 816E                      0040            .word	$40
31454                                           ! 4893                        0xA000,
31455 8170                      A000            .word	$A000
31456                                           ! 4894                        0x0000,
31457 8172                      0000            .word	0
31458                                           ! 4895                       0,
31459 8174                      0000            .word	0
31460 8176                      0000            .word	0
31461                                           ! 4896                             640,
31462 8178                      0280            .word	$280
31463                                           ! 4897                        320,
31464 817A                      0140            .word	$140
31465                                           ! 4898   
31466                                           ! 4898                      200,
31467 817C                      00C8            .word	$C8
31468                                           ! 4899                      8,
31469 817E                        08            .byte	8
31470                                           ! 4900                      16,
31471 817F                        10            .byte	$10
31472                                           ! 4901                           1,
31473 8180                        01            .byte	1
31474                                           ! 4902                         16,
31475 8181                        10            .byte	$10
31476                                           ! 4903                          2,
31477 8182                        02            .byte	2
31478                                           ! 4904                        0x06,
31479 8183                        06            .byte	6
31480                                           ! 4905                     0,
31481 8184                        00            .byte	0
31482                                           ! 4906                               130,
31483 8185                        82            .byte	$82
31484                                           ! 4907                          0,
31485 8186                        00            .byte	0
31486                                           ! 4908                        5,
31487 8187                        05            .byte	5
31488                                           ! 4909                             11,
31489 8188                        0B            .byte	$B
31490                                           ! 4910                          6,
31491 8189                        06            .byte	6
31492                                           ! 4911                               5,
31493 818A                        05            .byte	5
31494                                           ! 4912                         5,
31495 818B                        05            .byte	5
31496                                           ! 4913                              0,
31497 818C                        00            .byte	0
31498                                           ! 4914                         0,
31499 818D                        00            .byte	0
31500                                           ! 4915                              0,
31501 818E                        00            .byte	0
31502                                           ! 4916                                0,
31503 818F                        00            .byte	0
31504                                           ! 4917                        0xE0000000,
31505 8190                      0000            .word	0
31506 8192                      E000            .word	$E000
31507                                           ! 4918                               0,
31508 8194                      0000            .word	0
31509 8196                      0000            .word	0
31510                                           ! 4919                             0,
31511 8198                      0000            .word	0
31512                                           ! 4920                                640,
31513 819A                      0280            .word	$280
31514                                           ! 4921                             0,
31515 819C                        00            .byte	0
31516                                           ! 4922                             0,
31517 819D                        00            .byte	0
31518                                           ! 4923                           5,
31519 819E                        05            .byte	5
31520                                           ! 4924                                11,
31521 819F                        0B            .byte	$B
31522                                           ! 4925                             6,
31523 81A0                        06            .byte	6
31524                                           ! 4926                                  5,
31525 81A1                        05            .byte	5
31526                                           ! 4927                            5,
31527 81A2                        05            .byte	5
31528                                           ! 4928                                 0,
31529 81A3                        00            .byte	0
31530                                           ! 4929                            0,
31531 81A4                        00            .byte	0
31532                                           ! 4930                                 0,
31533 81A5                        00            .byte	0
31534                                           ! 4931                          0,
31535 81A6                      0000            .word	0
31536 81A8                      0000            .word	0
31537                                           ! 4932 } },
31538                                           ! 4933 { 0x010f,
31539 81AA                      010F            .word	$10F
31540                                           ! 4934 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31541 81AC                      009B            .word	$9B
31542                                           ! 4935                           0x01 | 0x02 | 0x04,
31543 81AE                        07            .byte	7
31544                                           ! 4936                           0,
31545 81AF                        00            .byte	0
31546                                           ! 4937                           64,
31547 81B0                      0040            .word	$40
31548                                           ! 4938                    64,
31549 81B2                      0040            .word	$40
31550                                           ! 4939                        0xA000,
31551 81B4                      A000            .word	$A000
31552                                           ! 4940                        0x0000,
31553 81B6                      0000            .word	0
31554                                           ! 4941                       0,
31555 81B8                      0000            .word	0
31556 81BA                      0000            .word	0
31557                                           ! 4942                             960,
31558 81BC                      03C0            .word	$3C0
31559                                           ! 4943                        320,
31560 81BE                      0140            .word	$140
31561                                           ! 4944                        200,
31562 81C0                      00C8            .word	$C8
31563                                           ! 4945                      8,
31564 81C2                        08            .byte	8
31565                                           ! 4946                      16,
31566 81C3                        10            .byte	$10
31567                                           ! 4947                           1,
31568 81C4                        01            .byte	1
31569                                           ! 4948                         24,
31570 81C5                        18            .byte	$18
31571                                           ! 4949                          3,
31572 81C6                        03            .byte	3
31573                                           ! 4950                        0x06,
31574 81C7                        06            .byte	6
31575                                           ! 4951                     0,
31576 81C8                        00            .byte	0
31577                                           ! 4952                               86,
31578 81C9                        56            .byte	$56
31579                                           ! 4953                          0,
31580 81CA                        00            .byte	0
31581                                           ! 4954                        8,
31582 81CB                        08            .byte	8
31583                                           ! 4955                             16,
31584 81CC                        10            .byte	$10
31585                                           ! 4956                          8,
31586 81CD                        08            .byte	8
31587                                           ! 4957                               8,
31588 81CE                        08            .byte	8
31589                                           ! 4958                         8,
31590 81CF                        08            .byte	8
31591                                           ! 4959                              0,
31592 81D0                        00            .byte	0
31593                                           ! 4960                         0,
31594 81D1                        00            .byte	0
31595                                           ! 4961                              0,
31596 81D2                        00            .byte	0
31597                                           ! 4962                                0,
31598 81D3                        00            .byte	0
31599                                           ! 4963                        0xE0000000,
31600 81D4                      0000            .word	0
31601 81D6                      E000            .word	$E000
31602                                           ! 4964                               0,
31603 81D8                      0000            .word	0
31604 81DA                      0000            .word	0
31605                                           ! 4965                             0,
31606 81DC                      0000            .word	0
31607                                           ! 4966                                96
31608                                           ! 4966 0,
31609 81DE                      03C0            .word	$3C0
31610                                           ! 4967                             0,
31611 81E0                        00            .byte	0
31612                                           ! 4968                             0,
31613 81E1                        00            .byte	0
31614                                           ! 4969                           8,
31615 81E2                        08            .byte	8
31616                                           ! 4970                                16,
31617 81E3                        10            .byte	$10
31618                                           ! 4971                             8,
31619 81E4                        08            .byte	8
31620                                           ! 4972                                  8,
31621 81E5                        08            .byte	8
31622                                           ! 4973                            8,
31623 81E6                        08            .byte	8
31624                                           ! 4974                                 0,
31625 81E7                        00            .byte	0
31626                                           ! 4975                            0,
31627 81E8                        00            .byte	0
31628                                           ! 4976                                 0,
31629 81E9                        00            .byte	0
31630                                           ! 4977                          0,
31631 81EA                      0000            .word	0
31632 81EC                      0000            .word	0
31633                                           ! 4978 } },
31634                                           ! 4979 { 0x0110,
31635 81EE                      0110            .word	$110
31636                                           ! 4980 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31637 81F0                      009B            .word	$9B
31638                                           ! 4981                           0x01 | 0x02 | 0x04,
31639 81F2                        07            .byte	7
31640                                           ! 4982                           0,
31641 81F3                        00            .byte	0
31642                                           ! 4983                           64,
31643 81F4                      0040            .word	$40
31644                                           ! 4984                    64,
31645 81F6                      0040            .word	$40
31646                                           ! 4985                        0xA000,
31647 81F8                      A000            .word	$A000
31648                                           ! 4986                        0x0000,
31649 81FA                      0000            .word	0
31650                                           ! 4987                       0,
31651 81FC                      0000            .word	0
31652 81FE                      0000            .word	0
31653                                           ! 4988                             1280,
31654 8200                      0500            .word	$500
31655                                           ! 4989                        640,
31656 8202                      0280            .word	$280
31657                                           ! 4990                        480,
31658 8204                      01E0            .word	$1E0
31659                                           ! 4991                      8,
31660 8206                        08            .byte	8
31661                                           ! 4992                      16,
31662 8207                        10            .byte	$10
31663                                           ! 4993                           1,
31664 8208                        01            .byte	1
31665                                           ! 4994                         15,
31666 8209                        0F            .byte	$F
31667                                           ! 4995                          10,
31668 820A                        0A            .byte	$A
31669                                           ! 4996                        0x06,
31670 820B                        06            .byte	6
31671                                           ! 4997                     0,
31672 820C                        00            .byte	0
31673                                           ! 4998                               26,
31674 820D                        1A            .byte	$1A
31675                                           ! 4999                          0,
31676 820E                        00            .byte	0
31677                                           ! 5000                        5,
31678 820F                        05            .byte	5
31679                                           ! 5001                             10,
31680 8210                        0A            .byte	$A
31681                                           ! 5002                          5,
31682 8211                        05            .byte	5
31683                                           ! 5003                               5,
31684 8212                        05            .byte	5
31685                                           ! 5004                         5,
31686 8213                        05            .byte	5
31687                                           ! 5005                              0,
31688 8214                        00            .byte	0
31689                                           ! 5006                         1,
31690 8215                        01            .byte	1
31691                                           ! 5007                              15,
31692 8216                        0F            .byte	$F
31693                                           ! 5008                                0,
31694 8217                        00            .byte	0
31695                                           ! 5009                        0xE0000000,
31696 8218                      0000            .word	0
31697 821A                      E000            .word	$E000
31698                                           ! 5010                               0,
31699 821C                      0000            .word	0
31700 821E                      0000            .word	0
31701                                           ! 5011                             0,
31702 8220                      0000            .word	0
31703                                           ! 5012                                1280,
31704 8222                      0500            .word	$500
31705                                           ! 5013                             0,
31706 8224                        00            .byte	0
31707                                           ! 5014                             0,
31708 8225                        00            .byte	0
31709                                           ! 5015                           5,
31710 8226                        05            .byte	5
31711                                           ! 5016                                10,
31712 8227                        0A            .byte	$A
31713                                           ! 5017                             5,
31714 8228                        05            .byte	5
31715                                           ! 5018                                  5,
31716 8229                        05            .byte	5
31717                                           ! 5019                            5,
31718 822A                        05            .byte	5
31719                                           ! 5020                                 0,
31720 822B                        00            .byte	0
31721                                           ! 5021                            1,
31722 822C                        01            .byte	1
31723                                           ! 5022                                 15,
31724 822D                        0F            .byte	$F
31725                                           ! 5023                          0,
31726 822E                      0000            .word	0
31727 8230                      0000            .word	0
31728                                           ! 5024 } },
31729                                           ! 5025 { 0x0111,
31730 8232                      0111            .word	$111
31731                                           ! 5026 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31732 8234                      009B            .word	$9B
31733                                           ! 5027                           0x01 | 0x02 | 0x04,
31734 8236                        07            .byte	7
31735                                           ! 5028                           0,
31736 8237                        00            .byte	0
31737                                           ! 5029                           64,
31738 8238                      0040            .word	$40
31739                                           ! 5030                    64,
31740 823A                      0040            .word	$40
31741                                           ! 5031                        0xA000,
31742 823C                      A000            .word	$A000
31743                                           ! 5032                        0x0000,
31744 823E                      0000            .word	0
31745                                           ! 5033                       0,
31746 8240                      0000            .word	0
31747 8242                      0000            .word	0
31748                                           ! 5034                             1280,
31749 8244                      0500            .word	$500
31750                                           ! 5035          
31751                                           ! 5035               640,
31752 8246                      0280            .word	$280
31753                                           ! 5036                        480,
31754 8248                      01E0            .word	$1E0
31755                                           ! 5037                      8,
31756 824A                        08            .byte	8
31757                                           ! 5038                      16,
31758 824B                        10            .byte	$10
31759                                           ! 5039                           1,
31760 824C                        01            .byte	1
31761                                           ! 5040                         16,
31762 824D                        10            .byte	$10
31763                                           ! 5041                          10,
31764 824E                        0A            .byte	$A
31765                                           ! 5042                        0x06,
31766 824F                        06            .byte	6
31767                                           ! 5043                     0,
31768 8250                        00            .byte	0
31769                                           ! 5044                               26,
31770 8251                        1A            .byte	$1A
31771                                           ! 5045                          0,
31772 8252                        00            .byte	0
31773                                           ! 5046                        5,
31774 8253                        05            .byte	5
31775                                           ! 5047                             11,
31776 8254                        0B            .byte	$B
31777                                           ! 5048                          6,
31778 8255                        06            .byte	6
31779                                           ! 5049                               5,
31780 8256                        05            .byte	5
31781                                           ! 5050                         5,
31782 8257                        05            .byte	5
31783                                           ! 5051                              0,
31784 8258                        00            .byte	0
31785                                           ! 5052                         0,
31786 8259                        00            .byte	0
31787                                           ! 5053                              0,
31788 825A                        00            .byte	0
31789                                           ! 5054                                0,
31790 825B                        00            .byte	0
31791                                           ! 5055                        0xE0000000,
31792 825C                      0000            .word	0
31793 825E                      E000            .word	$E000
31794                                           ! 5056                               0,
31795 8260                      0000            .word	0
31796 8262                      0000            .word	0
31797                                           ! 5057                             0,
31798 8264                      0000            .word	0
31799                                           ! 5058                                1280,
31800 8266                      0500            .word	$500
31801                                           ! 5059                             0,
31802 8268                        00            .byte	0
31803                                           ! 5060                             0,
31804 8269                        00            .byte	0
31805                                           ! 5061                           5,
31806 826A                        05            .byte	5
31807                                           ! 5062                                11,
31808 826B                        0B            .byte	$B
31809                                           ! 5063                             6,
31810 826C                        06            .byte	6
31811                                           ! 5064                                  5,
31812 826D                        05            .byte	5
31813                                           ! 5065                            5,
31814 826E                        05            .byte	5
31815                                           ! 5066                                 0,
31816 826F                        00            .byte	0
31817                                           ! 5067                            0,
31818 8270                        00            .byte	0
31819                                           ! 5068                                 0,
31820 8271                        00            .byte	0
31821                                           ! 5069                          0,
31822 8272                      0000            .word	0
31823 8274                      0000            .word	0
31824                                           ! 5070 } },
31825                                           ! 5071 { 0x0112,
31826 8276                      0112            .word	$112
31827                                           ! 5072 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31828 8278                      009B            .word	$9B
31829                                           ! 5073                           0x01 | 0x02 | 0x04,
31830 827A                        07            .byte	7
31831                                           ! 5074                           0,
31832 827B                        00            .byte	0
31833                                           ! 5075                           64,
31834 827C                      0040            .word	$40
31835                                           ! 5076                    64,
31836 827E                      0040            .word	$40
31837                                           ! 5077                        0xA000,
31838 8280                      A000            .word	$A000
31839                                           ! 5078                        0x0000,
31840 8282                      0000            .word	0
31841                                           ! 5079                       0,
31842 8284                      0000            .word	0
31843 8286                      0000            .word	0
31844                                           ! 5080                             1920,
31845 8288                      0780            .word	$780
31846                                           ! 5081                        640,
31847 828A                      0280            .word	$280
31848                                           ! 5082                        480,
31849 828C                      01E0            .word	$1E0
31850                                           ! 5083                      8,
31851 828E                        08            .byte	8
31852                                           ! 5084                      16,
31853 828F                        10            .byte	$10
31854                                           ! 5085                           1,
31855 8290                        01            .byte	1
31856                                           ! 5086                         24,
31857 8291                        18            .byte	$18
31858                                           ! 5087                          15,
31859 8292                        0F            .byte	$F
31860                                           ! 5088                        0x06,
31861 8293                        06            .byte	6
31862                                           ! 5089                     0,
31863 8294                        00            .byte	0
31864                                           ! 5090                               17,
31865 8295                        11            .byte	$11
31866                                           ! 5091                          0,
31867 8296                        00            .byte	0
31868                                           ! 5092                        8,
31869 8297                        08            .byte	8
31870                                           ! 5093                             16,
31871 8298                        10            .byte	$10
31872                                           ! 5094                          8,
31873 8299                        08            .byte	8
31874                                           ! 5095                               8,
31875 829A                        08            .byte	8
31876                                           ! 5096                         8,
31877 829B                        08            .byte	8
31878                                           ! 5097                              0,
31879 829C                        00            .byte	0
31880                                           ! 5098                         0,
31881 829D                        00            .byte	0
31882                                           ! 5099                              0,
31883 829E                        00            .byte	0
31884                                           ! 5100                                0,
31885 829F                        00            .byte	0
31886                                           ! 5101                        0xE0000000,
31887 82A0                      0000            .word	0
31888 82A2                      E000            .word	$E000
31889                                           ! 5102                               0,
31890 82A4                      0000            .word	0
31891 82A6                      0000            .word	0
31892                                           ! 5103                             0,
31893 82A8                      0000            .word	0
31894                                           ! 5104          
31895                                           ! 5104                       1920,
31896 82AA                      0780            .word	$780
31897                                           ! 5105                             0,
31898 82AC                        00            .byte	0
31899                                           ! 5106                             0,
31900 82AD                        00            .byte	0
31901                                           ! 5107                           8,
31902 82AE                        08            .byte	8
31903                                           ! 5108                                16,
31904 82AF                        10            .byte	$10
31905                                           ! 5109                             8,
31906 82B0                        08            .byte	8
31907                                           ! 5110                                  8,
31908 82B1                        08            .byte	8
31909                                           ! 5111                            8,
31910 82B2                        08            .byte	8
31911                                           ! 5112                                 0,
31912 82B3                        00            .byte	0
31913                                           ! 5113                            0,
31914 82B4                        00            .byte	0
31915                                           ! 5114                                 0,
31916 82B5                        00            .byte	0
31917                                           ! 5115                          0,
31918 82B6                      0000            .word	0
31919 82B8                      0000            .word	0
31920                                           ! 5116 } },
31921                                           ! 5117 { 0x0113,
31922 82BA                      0113            .word	$113
31923                                           ! 5118 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31924 82BC                      009B            .word	$9B
31925                                           ! 5119                           0x01 | 0x02 | 0x04,
31926 82BE                        07            .byte	7
31927                                           ! 5120                           0,
31928 82BF                        00            .byte	0
31929                                           ! 5121                           64,
31930 82C0                      0040            .word	$40
31931                                           ! 5122                    64,
31932 82C2                      0040            .word	$40
31933                                           ! 5123                        0xA000,
31934 82C4                      A000            .word	$A000
31935                                           ! 5124                        0x0000,
31936 82C6                      0000            .word	0
31937                                           ! 5125                       0,
31938 82C8                      0000            .word	0
31939 82CA                      0000            .word	0
31940                                           ! 5126                             1600,
31941 82CC                      0640            .word	$640
31942                                           ! 5127                        800,
31943 82CE                      0320            .word	$320
31944                                           ! 5128                        600,
31945 82D0                      0258            .word	$258
31946                                           ! 5129                      8,
31947 82D2                        08            .byte	8
31948                                           ! 5130                      16,
31949 82D3                        10            .byte	$10
31950                                           ! 5131                           1,
31951 82D4                        01            .byte	1
31952                                           ! 5132                         15,
31953 82D5                        0F            .byte	$F
31954                                           ! 5133                          15,
31955 82D6                        0F            .byte	$F
31956                                           ! 5134                        0x06,
31957 82D7                        06            .byte	6
31958                                           ! 5135                     0,
31959 82D8                        00            .byte	0
31960                                           ! 5136                               16,
31961 82D9                        10            .byte	$10
31962                                           ! 5137                          0,
31963 82DA                        00            .byte	0
31964                                           ! 5138                        5,
31965 82DB                        05            .byte	5
31966                                           ! 5139                             10,
31967 82DC                        0A            .byte	$A
31968                                           ! 5140                          5,
31969 82DD                        05            .byte	5
31970                                           ! 5141                               5,
31971 82DE                        05            .byte	5
31972                                           ! 5142                         5,
31973 82DF                        05            .byte	5
31974                                           ! 5143                              0,
31975 82E0                        00            .byte	0
31976                                           ! 5144                         1,
31977 82E1                        01            .byte	1
31978                                           ! 5145                              15,
31979 82E2                        0F            .byte	$F
31980                                           ! 5146                                0,
31981 82E3                        00            .byte	0
31982                                           ! 5147                        0xE0000000,
31983 82E4                      0000            .word	0
31984 82E6                      E000            .word	$E000
31985                                           ! 5148                               0,
31986 82E8                      0000            .word	0
31987 82EA                      0000            .word	0
31988                                           ! 5149                             0,
31989 82EC                      0000            .word	0
31990                                           ! 5150                                1600,
31991 82EE                      0640            .word	$640
31992                                           ! 5151                             0,
31993 82F0                        00            .byte	0
31994                                           ! 5152                             0,
31995 82F1                        00            .byte	0
31996                                           ! 5153                           5,
31997 82F2                        05            .byte	5
31998                                           ! 5154                                10,
31999 82F3                        0A            .byte	$A
32000                                           ! 5155                             5,
32001 82F4                        05            .byte	5
32002                                           ! 5156                                  5,
32003 82F5                        05            .byte	5
32004                                           ! 5157                            5,
32005 82F6                        05            .byte	5
32006                                           ! 5158                                 0,
32007 82F7                        00            .byte	0
32008                                           ! 5159                            1,
32009 82F8                        01            .byte	1
32010                                           ! 5160                                 15,
32011 82F9                        0F            .byte	$F
32012                                           ! 5161                          0,
32013 82FA                      0000            .word	0
32014 82FC                      0000            .word	0
32015                                           ! 5162 } },
32016                                           ! 5163 { 0x0114,
32017 82FE                      0114            .word	$114
32018                                           ! 5164 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32019 8300                      009B            .word	$9B
32020                                           ! 5165                           0x01 | 0x02 | 0x04,
32021 8302                        07            .byte	7
32022                                           ! 5166                           0,
32023 8303                        00            .byte	0
32024                                           ! 5167                           64,
32025 8304                      0040            .word	$40
32026                                           ! 5168                    64,
32027 8306                      0040            .word	$40
32028                                           ! 5169                        0xA000,
32029 8308                      A000            .word	$A000
32030                                           ! 5170                        0x0000,
32031 830A                      0000            .word	0
32032                                           ! 5171                       0,
32033 830C                      0000            .word	0
32034 830E                      0000            .word	0
32035                                           ! 5172                   
32036                                           ! 5172           1600,
32037 8310                      0640            .word	$640
32038                                           ! 5173                        800,
32039 8312                      0320            .word	$320
32040                                           ! 5174                        600,
32041 8314                      0258            .word	$258
32042                                           ! 5175                      8,
32043 8316                        08            .byte	8
32044                                           ! 5176                      16,
32045 8317                        10            .byte	$10
32046                                           ! 5177                           1,
32047 8318                        01            .byte	1
32048                                           ! 5178                         16,
32049 8319                        10            .byte	$10
32050                                           ! 5179                          15,
32051 831A                        0F            .byte	$F
32052                                           ! 5180                        0x06,
32053 831B                        06            .byte	6
32054                                           ! 5181                     0,
32055 831C                        00            .byte	0
32056                                           ! 5182                               16,
32057 831D                        10            .byte	$10
32058                                           ! 5183                          0,
32059 831E                        00            .byte	0
32060                                           ! 5184                        5,
32061 831F                        05            .byte	5
32062                                           ! 5185                             11,
32063 8320                        0B            .byte	$B
32064                                           ! 5186                          6,
32065 8321                        06            .byte	6
32066                                           ! 5187                               5,
32067 8322                        05            .byte	5
32068                                           ! 5188                         5,
32069 8323                        05            .byte	5
32070                                           ! 5189                              0,
32071 8324                        00            .byte	0
32072                                           ! 5190                         0,
32073 8325                        00            .byte	0
32074                                           ! 5191                              0,
32075 8326                        00            .byte	0
32076                                           ! 5192                                0,
32077 8327                        00            .byte	0
32078                                           ! 5193                        0xE0000000,
32079 8328                      0000            .word	0
32080 832A                      E000            .word	$E000
32081                                           ! 5194                               0,
32082 832C                      0000            .word	0
32083 832E                      0000            .word	0
32084                                           ! 5195                             0,
32085 8330                      0000            .word	0
32086                                           ! 5196                                1600,
32087 8332                      0640            .word	$640
32088                                           ! 5197                             0,
32089 8334                        00            .byte	0
32090                                           ! 5198                             0,
32091 8335                        00            .byte	0
32092                                           ! 5199                           5,
32093 8336                        05            .byte	5
32094                                           ! 5200                                11,
32095 8337                        0B            .byte	$B
32096                                           ! 5201                             6,
32097 8338                        06            .byte	6
32098                                           ! 5202                                  5,
32099 8339                        05            .byte	5
32100                                           ! 5203                            5,
32101 833A                        05            .byte	5
32102                                           ! 5204                                 0,
32103 833B                        00            .byte	0
32104                                           ! 5205                            0,
32105 833C                        00            .byte	0
32106                                           ! 5206                                 0,
32107 833D                        00            .byte	0
32108                                           ! 5207                          0,
32109 833E                      0000            .word	0
32110 8340                      0000            .word	0
32111                                           ! 5208 } },
32112                                           ! 5209 { 0x0115,
32113 8342                      0115            .word	$115
32114                                           ! 5210 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32115 8344                      009B            .word	$9B
32116                                           ! 5211                           0x01 | 0x02 | 0x04,
32117 8346                        07            .byte	7
32118                                           ! 5212                           0,
32119 8347                        00            .byte	0
32120                                           ! 5213                           64,
32121 8348                      0040            .word	$40
32122                                           ! 5214                    64,
32123 834A                      0040            .word	$40
32124                                           ! 5215                        0xA000,
32125 834C                      A000            .word	$A000
32126                                           ! 5216                        0x0000,
32127 834E                      0000            .word	0
32128                                           ! 5217                       0,
32129 8350                      0000            .word	0
32130 8352                      0000            .word	0
32131                                           ! 5218                             2400,
32132 8354                      0960            .word	$960
32133                                           ! 5219                        800,
32134 8356                      0320            .word	$320
32135                                           ! 5220                        600,
32136 8358                      0258            .word	$258
32137                                           ! 5221                      8,
32138 835A                        08            .byte	8
32139                                           ! 5222                      16,
32140 835B                        10            .byte	$10
32141                                           ! 5223                           1,
32142 835C                        01            .byte	1
32143                                           ! 5224                         24,
32144 835D                        18            .byte	$18
32145                                           ! 5225                          22,
32146 835E                        16            .byte	$16
32147                                           ! 5226                        0x06,
32148 835F                        06            .byte	6
32149                                           ! 5227                     0,
32150 8360                        00            .byte	0
32151                                           ! 5228                               10,
32152 8361                        0A            .byte	$A
32153                                           ! 5229                          0,
32154 8362                        00            .byte	0
32155                                           ! 5230                        8,
32156 8363                        08            .byte	8
32157                                           ! 5231                             16,
32158 8364                        10            .byte	$10
32159                                           ! 5232                          8,
32160 8365                        08            .byte	8
32161                                           ! 5233                               8,
32162 8366                        08            .byte	8
32163                                           ! 5234                         8,
32164 8367                        08            .byte	8
32165                                           ! 5235                              0,
32166 8368                        00            .byte	0
32167                                           ! 5236                         0,
32168 8369                        00            .byte	0
32169                                           ! 5237                              0,
32170 836A                        00            .byte	0
32171                                           ! 5238                                0,
32172 836B                        00            .byte	0
32173                                           ! 5239                        0xE0000000,
32174 836C                      0000            .word	0
32175 836E                      E000            .word	$E000
32176                                           ! 5240                               0,
32177 8370                      0000            .word	0
32178 8372                      0000            .word	0
32179                                           ! 5241                
32180                                           ! 5241              0,
32181 8374                      0000            .word	0
32182                                           ! 5242                                2400,
32183 8376                      0960            .word	$960
32184                                           ! 5243                             0,
32185 8378                        00            .byte	0
32186                                           ! 5244                             0,
32187 8379                        00            .byte	0
32188                                           ! 5245                           8,
32189 837A                        08            .byte	8
32190                                           ! 5246                                16,
32191 837B                        10            .byte	$10
32192                                           ! 5247                             8,
32193 837C                        08            .byte	8
32194                                           ! 5248                                  8,
32195 837D                        08            .byte	8
32196                                           ! 5249                            8,
32197 837E                        08            .byte	8
32198                                           ! 5250                                 0,
32199 837F                        00            .byte	0
32200                                           ! 5251                            0,
32201 8380                        00            .byte	0
32202                                           ! 5252                                 0,
32203 8381                        00            .byte	0
32204                                           ! 5253                          0,
32205 8382                      0000            .word	0
32206 8384                      0000            .word	0
32207                                           ! 5254 } },
32208                                           ! 5255 { 0x0116,
32209 8386                      0116            .word	$116
32210                                           ! 5256 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32211 8388                      009B            .word	$9B
32212                                           ! 5257                           0x01 | 0x02 | 0x04,
32213 838A                        07            .byte	7
32214                                           ! 5258                           0,
32215 838B                        00            .byte	0
32216                                           ! 5259                           64,
32217 838C                      0040            .word	$40
32218                                           ! 5260                    64,
32219 838E                      0040            .word	$40
32220                                           ! 5261                        0xA000,
32221 8390                      A000            .word	$A000
32222                                           ! 5262                        0x0000,
32223 8392                      0000            .word	0
32224                                           ! 5263                       0,
32225 8394                      0000            .word	0
32226 8396                      0000            .word	0
32227                                           ! 5264                             2048,
32228 8398                      0800            .word	$800
32229                                           ! 5265                        1024,
32230 839A                      0400            .word	$400
32231                                           ! 5266                        768,
32232 839C                      0300            .word	$300
32233                                           ! 5267                      8,
32234 839E                        08            .byte	8
32235                                           ! 5268                      16,
32236 839F                        10            .byte	$10
32237                                           ! 5269                           1,
32238 83A0                        01            .byte	1
32239                                           ! 5270                         15,
32240 83A1                        0F            .byte	$F
32241                                           ! 5271                          24,
32242 83A2                        18            .byte	$18
32243                                           ! 5272                        0x06,
32244 83A3                        06            .byte	6
32245                                           ! 5273                     0,
32246 83A4                        00            .byte	0
32247                                           ! 5274                               9,
32248 83A5                        09            .byte	9
32249                                           ! 5275                          0,
32250 83A6                        00            .byte	0
32251                                           ! 5276                        5,
32252 83A7                        05            .byte	5
32253                                           ! 5277                             10,
32254 83A8                        0A            .byte	$A
32255                                           ! 5278                          5,
32256 83A9                        05            .byte	5
32257                                           ! 5279                               5,
32258 83AA                        05            .byte	5
32259                                           ! 5280                         5,
32260 83AB                        05            .byte	5
32261                                           ! 5281                              0,
32262 83AC                        00            .byte	0
32263                                           ! 5282                         1,
32264 83AD                        01            .byte	1
32265                                           ! 5283                              15,
32266 83AE                        0F            .byte	$F
32267                                           ! 5284                                0,
32268 83AF                        00            .byte	0
32269                                           ! 5285                        0xE0000000,
32270 83B0                      0000            .word	0
32271 83B2                      E000            .word	$E000
32272                                           ! 5286                               0,
32273 83B4                      0000            .word	0
32274 83B6                      0000            .word	0
32275                                           ! 5287                             0,
32276 83B8                      0000            .word	0
32277                                           ! 5288                                2048,
32278 83BA                      0800            .word	$800
32279                                           ! 5289                             0,
32280 83BC                        00            .byte	0
32281                                           ! 5290                             0,
32282 83BD                        00            .byte	0
32283                                           ! 5291                           5,
32284 83BE                        05            .byte	5
32285                                           ! 5292                                10,
32286 83BF                        0A            .byte	$A
32287                                           ! 5293                             5,
32288 83C0                        05            .byte	5
32289                                           ! 5294                                  5,
32290 83C1                        05            .byte	5
32291                                           ! 5295                            5,
32292 83C2                        05            .byte	5
32293                                           ! 5296                                 0,
32294 83C3                        00            .byte	0
32295                                           ! 5297                            1,
32296 83C4                        01            .byte	1
32297                                           ! 5298                                 15,
32298 83C5                        0F            .byte	$F
32299                                           ! 5299                          0,
32300 83C6                      0000            .word	0
32301 83C8                      0000            .word	0
32302                                           ! 5300 } },
32303                                           ! 5301 { 0x0117,
32304 83CA                      0117            .word	$117
32305                                           ! 5302 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32306 83CC                      009B            .word	$9B
32307                                           ! 5303                           0x01 | 0x02 | 0x04,
32308 83CE                        07            .byte	7
32309                                           ! 5304                           0,
32310 83CF                        00            .byte	0
32311                                           ! 5305                           64,
32312 83D0                      0040            .word	$40
32313                                           ! 5306                    64,
32314 83D2                      0040            .word	$40
32315                                           ! 5307                        0xA000,
32316 83D4                      A000            .word	$A000
32317                                           ! 5308                        0x0000,
32318 83D6                      0000            .word	0
32319                                           ! 5309                   
32320                                           ! 5309     0,
32321 83D8                      0000            .word	0
32322 83DA                      0000            .word	0
32323                                           ! 5310                             2048,
32324 83DC                      0800            .word	$800
32325                                           ! 5311                        1024,
32326 83DE                      0400            .word	$400
32327                                           ! 5312                        768,
32328 83E0                      0300            .word	$300
32329                                           ! 5313                      8,
32330 83E2                        08            .byte	8
32331                                           ! 5314                      16,
32332 83E3                        10            .byte	$10
32333                                           ! 5315                           1,
32334 83E4                        01            .byte	1
32335                                           ! 5316                         16,
32336 83E5                        10            .byte	$10
32337                                           ! 5317                          24,
32338 83E6                        18            .byte	$18
32339                                           ! 5318                        0x06,
32340 83E7                        06            .byte	6
32341                                           ! 5319                     0,
32342 83E8                        00            .byte	0
32343                                           ! 5320                               9,
32344 83E9                        09            .byte	9
32345                                           ! 5321                          0,
32346 83EA                        00            .byte	0
32347                                           ! 5322                        5,
32348 83EB                        05            .byte	5
32349                                           ! 5323                             11,
32350 83EC                        0B            .byte	$B
32351                                           ! 5324                          6,
32352 83ED                        06            .byte	6
32353                                           ! 5325                               5,
32354 83EE                        05            .byte	5
32355                                           ! 5326                         5,
32356 83EF                        05            .byte	5
32357                                           ! 5327                              0,
32358 83F0                        00            .byte	0
32359                                           ! 5328                         0,
32360 83F1                        00            .byte	0
32361                                           ! 5329                              0,
32362 83F2                        00            .byte	0
32363                                           ! 5330                                0,
32364 83F3                        00            .byte	0
32365                                           ! 5331                        0xE0000000,
32366 83F4                      0000            .word	0
32367 83F6                      E000            .word	$E000
32368                                           ! 5332                               0,
32369 83F8                      0000            .word	0
32370 83FA                      0000            .word	0
32371                                           ! 5333                             0,
32372 83FC                      0000            .word	0
32373                                           ! 5334                                2048,
32374 83FE                      0800            .word	$800
32375                                           ! 5335                             0,
32376 8400                        00            .byte	0
32377                                           ! 5336                             0,
32378 8401                        00            .byte	0
32379                                           ! 5337                           5,
32380 8402                        05            .byte	5
32381                                           ! 5338                                11,
32382 8403                        0B            .byte	$B
32383                                           ! 5339                             6,
32384 8404                        06            .byte	6
32385                                           ! 5340                                  5,
32386 8405                        05            .byte	5
32387                                           ! 5341                            5,
32388 8406                        05            .byte	5
32389                                           ! 5342                                 0,
32390 8407                        00            .byte	0
32391                                           ! 5343                            0,
32392 8408                        00            .byte	0
32393                                           ! 5344                                 0,
32394 8409                        00            .byte	0
32395                                           ! 5345                          0,
32396 840A                      0000            .word	0
32397 840C                      0000            .word	0
32398                                           ! 5346 } },
32399                                           ! 5347 { 0x0118,
32400 840E                      0118            .word	$118
32401                                           ! 5348 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32402 8410                      009B            .word	$9B
32403                                           ! 5349                           0x01 | 0x02 | 0x04,
32404 8412                        07            .byte	7
32405                                           ! 5350                           0,
32406 8413                        00            .byte	0
32407                                           ! 5351                           64,
32408 8414                      0040            .word	$40
32409                                           ! 5352                    64,
32410 8416                      0040            .word	$40
32411                                           ! 5353                        0xA000,
32412 8418                      A000            .word	$A000
32413                                           ! 5354                        0x0000,
32414 841A                      0000            .word	0
32415                                           ! 5355                       0,
32416 841C                      0000            .word	0
32417 841E                      0000            .word	0
32418                                           ! 5356                             3072,
32419 8420                      0C00            .word	$C00
32420                                           ! 5357                        1024,
32421 8422                      0400            .word	$400
32422                                           ! 5358                        768,
32423 8424                      0300            .word	$300
32424                                           ! 5359                      8,
32425 8426                        08            .byte	8
32426                                           ! 5360                      16,
32427 8427                        10            .byte	$10
32428                                           ! 5361                           1,
32429 8428                        01            .byte	1
32430                                           ! 5362                         24,
32431 8429                        18            .byte	$18
32432                                           ! 5363                          36,
32433 842A                        24            .byte	$24
32434                                           ! 5364                        0x06,
32435 842B                        06            .byte	6
32436                                           ! 5365                     0,
32437 842C                        00            .byte	0
32438                                           ! 5366                               6,
32439 842D                        06            .byte	6
32440                                           ! 5367                          0,
32441 842E                        00            .byte	0
32442                                           ! 5368                        8,
32443 842F                        08            .byte	8
32444                                           ! 5369                             16,
32445 8430                        10            .byte	$10
32446                                           ! 5370                          8,
32447 8431                        08            .byte	8
32448                                           ! 5371                               8,
32449 8432                        08            .byte	8
32450                                           ! 5372                         8,
32451 8433                        08            .byte	8
32452                                           ! 5373                              0,
32453 8434                        00            .byte	0
32454                                           ! 5374                         0,
32455 8435                        00            .byte	0
32456                                           ! 5375                              0,
32457 8436                        00            .byte	0
32458                                           ! 5376                                0,
32459 8437                        00            .byte	0
32460                                           ! 5377                        0xE0000000,
32461 8438                      0000            .word	0
32462 843A                      E000            .word	$E000
32463                                           ! 5378                        
32464                                           ! 5378        0,
32465 843C                      0000            .word	0
32466 843E                      0000            .word	0
32467                                           ! 5379                             0,
32468 8440                      0000            .word	0
32469                                           ! 5380                                3072,
32470 8442                      0C00            .word	$C00
32471                                           ! 5381                             0,
32472 8444                        00            .byte	0
32473                                           ! 5382                             0,
32474 8445                        00            .byte	0
32475                                           ! 5383                           8,
32476 8446                        08            .byte	8
32477                                           ! 5384                                16,
32478 8447                        10            .byte	$10
32479                                           ! 5385                             8,
32480 8448                        08            .byte	8
32481                                           ! 5386                                  8,
32482 8449                        08            .byte	8
32483                                           ! 5387                            8,
32484 844A                        08            .byte	8
32485                                           ! 5388                                 0,
32486 844B                        00            .byte	0
32487                                           ! 5389                            0,
32488 844C                        00            .byte	0
32489                                           ! 5390                                 0,
32490 844D                        00            .byte	0
32491                                           ! 5391                          0,
32492 844E                      0000            .word	0
32493 8450                      0000            .word	0
32494                                           ! 5392 } },
32495                                           ! 5393 { 0x0119,
32496 8452                      0119            .word	$119
32497                                           ! 5394 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32498 8454                      009B            .word	$9B
32499                                           ! 5395                           0x01 | 0x02 | 0x04,
32500 8456                        07            .byte	7
32501                                           ! 5396                           0,
32502 8457                        00            .byte	0
32503                                           ! 5397                           64,
32504 8458                      0040            .word	$40
32505                                           ! 5398                    64,
32506 845A                      0040            .word	$40
32507                                           ! 5399                        0xA000,
32508 845C                      A000            .word	$A000
32509                                           ! 5400                        0x0000,
32510 845E                      0000            .word	0
32511                                           ! 5401                       0,
32512 8460                      0000            .word	0
32513 8462                      0000            .word	0
32514                                           ! 5402                             2560,
32515 8464                      0A00            .word	$A00
32516                                           ! 5403                        1280,
32517 8466                      0500            .word	$500
32518                                           ! 5404                        1024,
32519 8468                      0400            .word	$400
32520                                           ! 5405                      8,
32521 846A                        08            .byte	8
32522                                           ! 5406                      16,
32523 846B                        10            .byte	$10
32524                                           ! 5407                           1,
32525 846C                        01            .byte	1
32526                                           ! 5408                         15,
32527 846D                        0F            .byte	$F
32528                                           ! 5409                          40,
32529 846E                        28            .byte	$28
32530                                           ! 5410                        0x06,
32531 846F                        06            .byte	6
32532                                           ! 5411                     0,
32533 8470                        00            .byte	0
32534                                           ! 5412                               5,
32535 8471                        05            .byte	5
32536                                           ! 5413                          0,
32537 8472                        00            .byte	0
32538                                           ! 5414                        5,
32539 8473                        05            .byte	5
32540                                           ! 5415                             10,
32541 8474                        0A            .byte	$A
32542                                           ! 5416                          5,
32543 8475                        05            .byte	5
32544                                           ! 5417                               5,
32545 8476                        05            .byte	5
32546                                           ! 5418                         5,
32547 8477                        05            .byte	5
32548                                           ! 5419                              0,
32549 8478                        00            .byte	0
32550                                           ! 5420                         1,
32551 8479                        01            .byte	1
32552                                           ! 5421                              15,
32553 847A                        0F            .byte	$F
32554                                           ! 5422                                0,
32555 847B                        00            .byte	0
32556                                           ! 5423                        0xE0000000,
32557 847C                      0000            .word	0
32558 847E                      E000            .word	$E000
32559                                           ! 5424                               0,
32560 8480                      0000            .word	0
32561 8482                      0000            .word	0
32562                                           ! 5425                             0,
32563 8484                      0000            .word	0
32564                                           ! 5426                                2560,
32565 8486                      0A00            .word	$A00
32566                                           ! 5427                             0,
32567 8488                        00            .byte	0
32568                                           ! 5428                             0,
32569 8489                        00            .byte	0
32570                                           ! 5429                           5,
32571 848A                        05            .byte	5
32572                                           ! 5430                                10,
32573 848B                        0A            .byte	$A
32574                                           ! 5431                             5,
32575 848C                        05            .byte	5
32576                                           ! 5432                                  5,
32577 848D                        05            .byte	5
32578                                           ! 5433                            5,
32579 848E                        05            .byte	5
32580                                           ! 5434                                 0,
32581 848F                        00            .byte	0
32582                                           ! 5435                            1,
32583 8490                        01            .byte	1
32584                                           ! 5436                                 15,
32585 8491                        0F            .byte	$F
32586                                           ! 5437                          0,
32587 8492                      0000            .word	0
32588 8494                      0000            .word	0
32589                                           ! 5438 } },
32590                                           ! 5439 { 0x011a,
32591 8496                      011A            .word	$11A
32592                                           ! 5440 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32593 8498                      009B            .word	$9B
32594                                           ! 5441                           0x01 | 0x02 | 0x04,
32595 849A                        07            .byte	7
32596                                           ! 5442                           0,
32597 849B                        00            .byte	0
32598                                           ! 5443                           64,
32599 849C                      0040            .word	$40
32600                                           ! 5444                    64,
32601 849E                      0040            .word	$40
32602                                           ! 5445                        0xA000,
32603 84A0                      A000            .word	$A000
32604                                           ! 5446                        
32605                                           ! 5446 0x0000,
32606 84A2                      0000            .word	0
32607                                           ! 5447                       0,
32608 84A4                      0000            .word	0
32609 84A6                      0000            .word	0
32610                                           ! 5448                             2560,
32611 84A8                      0A00            .word	$A00
32612                                           ! 5449                        1280,
32613 84AA                      0500            .word	$500
32614                                           ! 5450                        1024,
32615 84AC                      0400            .word	$400
32616                                           ! 5451                      8,
32617 84AE                        08            .byte	8
32618                                           ! 5452                      16,
32619 84AF                        10            .byte	$10
32620                                           ! 5453                           1,
32621 84B0                        01            .byte	1
32622                                           ! 5454                         16,
32623 84B1                        10            .byte	$10
32624                                           ! 5455                          40,
32625 84B2                        28            .byte	$28
32626                                           ! 5456                        0x06,
32627 84B3                        06            .byte	6
32628                                           ! 5457                     0,
32629 84B4                        00            .byte	0
32630                                           ! 5458                               5,
32631 84B5                        05            .byte	5
32632                                           ! 5459                          0,
32633 84B6                        00            .byte	0
32634                                           ! 5460                        5,
32635 84B7                        05            .byte	5
32636                                           ! 5461                             11,
32637 84B8                        0B            .byte	$B
32638                                           ! 5462                          6,
32639 84B9                        06            .byte	6
32640                                           ! 5463                               5,
32641 84BA                        05            .byte	5
32642                                           ! 5464                         5,
32643 84BB                        05            .byte	5
32644                                           ! 5465                              0,
32645 84BC                        00            .byte	0
32646                                           ! 5466                         0,
32647 84BD                        00            .byte	0
32648                                           ! 5467                              0,
32649 84BE                        00            .byte	0
32650                                           ! 5468                                0,
32651 84BF                        00            .byte	0
32652                                           ! 5469                        0xE0000000,
32653 84C0                      0000            .word	0
32654 84C2                      E000            .word	$E000
32655                                           ! 5470                               0,
32656 84C4                      0000            .word	0
32657 84C6                      0000            .word	0
32658                                           ! 5471                             0,
32659 84C8                      0000            .word	0
32660                                           ! 5472                                2560,
32661 84CA                      0A00            .word	$A00
32662                                           ! 5473                             0,
32663 84CC                        00            .byte	0
32664                                           ! 5474                             0,
32665 84CD                        00            .byte	0
32666                                           ! 5475                           5,
32667 84CE                        05            .byte	5
32668                                           ! 5476                                11,
32669 84CF                        0B            .byte	$B
32670                                           ! 5477                             6,
32671 84D0                        06            .byte	6
32672                                           ! 5478                                  5,
32673 84D1                        05            .byte	5
32674                                           ! 5479                            5,
32675 84D2                        05            .byte	5
32676                                           ! 5480                                 0,
32677 84D3                        00            .byte	0
32678                                           ! 5481                            0,
32679 84D4                        00            .byte	0
32680                                           ! 5482                                 0,
32681 84D5                        00            .byte	0
32682                                           ! 5483                          0,
32683 84D6                      0000            .word	0
32684 84D8                      0000            .word	0
32685                                           ! 5484 } },
32686                                           ! 5485 { 0x011b,
32687 84DA                      011B            .word	$11B
32688                                           ! 5486 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32689 84DC                      009B            .word	$9B
32690                                           ! 5487                           0x01 | 0x02 | 0x04,
32691 84DE                        07            .byte	7
32692                                           ! 5488                           0,
32693 84DF                        00            .byte	0
32694                                           ! 5489                           64,
32695 84E0                      0040            .word	$40
32696                                           ! 5490                    64,
32697 84E2                      0040            .word	$40
32698                                           ! 5491                        0xA000,
32699 84E4                      A000            .word	$A000
32700                                           ! 5492                        0x0000,
32701 84E6                      0000            .word	0
32702                                           ! 5493                       0,
32703 84E8                      0000            .word	0
32704 84EA                      0000            .word	0
32705                                           ! 5494                             3840,
32706 84EC                      0F00            .word	$F00
32707                                           ! 5495                        1280,
32708 84EE                      0500            .word	$500
32709                                           ! 5496                        1024,
32710 84F0                      0400            .word	$400
32711                                           ! 5497                      8,
32712 84F2                        08            .byte	8
32713                                           ! 5498                      16,
32714 84F3                        10            .byte	$10
32715                                           ! 5499                           1,
32716 84F4                        01            .byte	1
32717                                           ! 5500                         24,
32718 84F5                        18            .byte	$18
32719                                           ! 5501                          60,
32720 84F6                        3C            .byte	$3C
32721                                           ! 5502                        0x06,
32722 84F7                        06            .byte	6
32723                                           ! 5503                     0,
32724 84F8                        00            .byte	0
32725                                           ! 5504                               3,
32726 84F9                        03            .byte	3
32727                                           ! 5505                          0,
32728 84FA                        00            .byte	0
32729                                           ! 5506                        8,
32730 84FB                        08            .byte	8
32731                                           ! 5507                             16,
32732 84FC                        10            .byte	$10
32733                                           ! 5508                          8,
32734 84FD                        08            .byte	8
32735                                           ! 5509                               8,
32736 84FE                        08            .byte	8
32737                                           ! 5510                         8,
32738 84FF                        08            .byte	8
32739                                           ! 5511                              0,
32740 8500                        00            .byte	0
32741                                           ! 5512                         0,
32742 8501                        00            .byte	0
32743                                           ! 5513                              0,
32744 8502                        00            .byte	0
32745                                           ! 5514                                0,
32746 8503                        00            .byte	0
32747                                           ! 5515                        0xE0000
32748                                           ! 5515 000,
32749 8504                      0000            .word	0
32750 8506                      E000            .word	$E000
32751                                           ! 5516                               0,
32752 8508                      0000            .word	0
32753 850A                      0000            .word	0
32754                                           ! 5517                             0,
32755 850C                      0000            .word	0
32756                                           ! 5518                                3840,
32757 850E                      0F00            .word	$F00
32758                                           ! 5519                             0,
32759 8510                        00            .byte	0
32760                                           ! 5520                             0,
32761 8511                        00            .byte	0
32762                                           ! 5521                           8,
32763 8512                        08            .byte	8
32764                                           ! 5522                                16,
32765 8513                        10            .byte	$10
32766                                           ! 5523                             8,
32767 8514                        08            .byte	8
32768                                           ! 5524                                  8,
32769 8515                        08            .byte	8
32770                                           ! 5525                            8,
32771 8516                        08            .byte	8
32772                                           ! 5526                                 0,
32773 8517                        00            .byte	0
32774                                           ! 5527                            0,
32775 8518                        00            .byte	0
32776                                           ! 5528                                 0,
32777 8519                        00            .byte	0
32778                                           ! 5529                          0,
32779 851A                      0000            .word	0
32780 851C                      0000            .word	0
32781                                           ! 5530 } },
32782                                           ! 5531 { 0x011c,
32783 851E                      011C            .word	$11C
32784                                           ! 5532 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32785 8520                      009B            .word	$9B
32786                                           ! 5533                           0x01 | 0x02 | 0x04,
32787 8522                        07            .byte	7
32788                                           ! 5534                           0,
32789 8523                        00            .byte	0
32790                                           ! 5535                           64,
32791 8524                      0040            .word	$40
32792                                           ! 5536                    64,
32793 8526                      0040            .word	$40
32794                                           ! 5537                        0xA000,
32795 8528                      A000            .word	$A000
32796                                           ! 5538                        0x0000,
32797 852A                      0000            .word	0
32798                                           ! 5539                       0,
32799 852C                      0000            .word	0
32800 852E                      0000            .word	0
32801                                           ! 5540                             1600,
32802 8530                      0640            .word	$640
32803                                           ! 5541                        1600,
32804 8532                      0640            .word	$640
32805                                           ! 5542                        1200,
32806 8534                      04B0            .word	$4B0
32807                                           ! 5543                      8,
32808 8536                        08            .byte	8
32809                                           ! 5544                      16,
32810 8537                        10            .byte	$10
32811                                           ! 5545                           1,
32812 8538                        01            .byte	1
32813                                           ! 5546                         8,
32814 8539                        08            .byte	8
32815                                           ! 5547                          30,
32816 853A                        1E            .byte	$1E
32817                                           ! 5548                        0x04,
32818 853B                        04            .byte	4
32819                                           ! 5549                     0,
32820 853C                        00            .byte	0
32821                                           ! 5550                               7,
32822 853D                        07            .byte	7
32823                                           ! 5551                          0,
32824 853E                        00            .byte	0
32825                                           ! 5552                        0,
32826 853F                        00            .byte	0
32827                                           ! 5553                             0,
32828 8540                        00            .byte	0
32829                                           ! 5554                          0,
32830 8541                        00            .byte	0
32831                                           ! 5555                               0,
32832 8542                        00            .byte	0
32833                                           ! 5556                         0,
32834 8543                        00            .byte	0
32835                                           ! 5557                              0,
32836 8544                        00            .byte	0
32837                                           ! 5558                         0,
32838 8545                        00            .byte	0
32839                                           ! 5559                              0,
32840 8546                        00            .byte	0
32841                                           ! 5560                                0,
32842 8547                        00            .byte	0
32843                                           ! 5561                        0xE0000000,
32844 8548                      0000            .word	0
32845 854A                      E000            .word	$E000
32846                                           ! 5562                               0,
32847 854C                      0000            .word	0
32848 854E                      0000            .word	0
32849                                           ! 5563                             0,
32850 8550                      0000            .word	0
32851                                           ! 5564                                1600,
32852 8552                      0640            .word	$640
32853                                           ! 5565                             0,
32854 8554                        00            .byte	0
32855                                           ! 5566                             0,
32856 8555                        00            .byte	0
32857                                           ! 5567                           0,
32858 8556                        00            .byte	0
32859                                           ! 5568                                0,
32860 8557                        00            .byte	0
32861                                           ! 5569                             0,
32862 8558                        00            .byte	0
32863                                           ! 5570                                  0,
32864 8559                        00            .byte	0
32865                                           ! 5571                            0,
32866 855A                        00            .byte	0
32867                                           ! 5572                                 0,
32868 855B                        00            .byte	0
32869                                           ! 5573                            0,
32870 855C                        00            .byte	0
32871                                           ! 5574                                 0,
32872 855D                        00            .byte	0
32873                                           ! 5575                          0,
32874 855E                      0000            .word	0
32875 8560                      0000            .word	0
32876                                           ! 5576 } },
32877                                           ! 5577 { 0x011d,
32878 8562                      011D            .word	$11D
32879                                           ! 5578 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32880 8564                      009B            .word	$9B
32881                                           ! 5579                           0x01 | 0x02 | 0x04,
32882 8566                        07            .byte	7
32883                                           ! 5580                           0,
32884 8567                        00            .byte	0
32885                                           ! 5581                           64,
32886 8568                      0040            .word	$40
32887                                           ! 5582                    64,
32888 856A                      0040            .word	$40
32889                                           ! 5583                        0xA000,
32890 856C                      A000            .word	$A000
32891                                           ! 5584 
32892                                           ! 5584                        0x0000,
32893 856E                      0000            .word	0
32894                                           ! 5585                       0,
32895 8570                      0000            .word	0
32896 8572                      0000            .word	0
32897                                           ! 5586                             3200,
32898 8574                      0C80            .word	$C80
32899                                           ! 5587                        1600,
32900 8576                      0640            .word	$640
32901                                           ! 5588                        1200,
32902 8578                      04B0            .word	$4B0
32903                                           ! 5589                      8,
32904 857A                        08            .byte	8
32905                                           ! 5590                      16,
32906 857B                        10            .byte	$10
32907                                           ! 5591                           1,
32908 857C                        01            .byte	1
32909                                           ! 5592                         15,
32910 857D                        0F            .byte	$F
32911                                           ! 5593                          59,
32912 857E                        3B            .byte	$3B
32913                                           ! 5594                        0x06,
32914 857F                        06            .byte	6
32915                                           ! 5595                     0,
32916 8580                        00            .byte	0
32917                                           ! 5596                               3,
32918 8581                        03            .byte	3
32919                                           ! 5597                          0,
32920 8582                        00            .byte	0
32921                                           ! 5598                        5,
32922 8583                        05            .byte	5
32923                                           ! 5599                             10,
32924 8584                        0A            .byte	$A
32925                                           ! 5600                          5,
32926 8585                        05            .byte	5
32927                                           ! 5601                               5,
32928 8586                        05            .byte	5
32929                                           ! 5602                         5,
32930 8587                        05            .byte	5
32931                                           ! 5603                              0,
32932 8588                        00            .byte	0
32933                                           ! 5604                         1,
32934 8589                        01            .byte	1
32935                                           ! 5605                              15,
32936 858A                        0F            .byte	$F
32937                                           ! 5606                                0,
32938 858B                        00            .byte	0
32939                                           ! 5607                        0xE0000000,
32940 858C                      0000            .word	0
32941 858E                      E000            .word	$E000
32942                                           ! 5608                               0,
32943 8590                      0000            .word	0
32944 8592                      0000            .word	0
32945                                           ! 5609                             0,
32946 8594                      0000            .word	0
32947                                           ! 5610                                3200,
32948 8596                      0C80            .word	$C80
32949                                           ! 5611                             0,
32950 8598                        00            .byte	0
32951                                           ! 5612                             0,
32952 8599                        00            .byte	0
32953                                           ! 5613                           5,
32954 859A                        05            .byte	5
32955                                           ! 5614                                10,
32956 859B                        0A            .byte	$A
32957                                           ! 5615                             5,
32958 859C                        05            .byte	5
32959                                           ! 5616                                  5,
32960 859D                        05            .byte	5
32961                                           ! 5617                            5,
32962 859E                        05            .byte	5
32963                                           ! 5618                                 0,
32964 859F                        00            .byte	0
32965                                           ! 5619                            1,
32966 85A0                        01            .byte	1
32967                                           ! 5620                                 15,
32968 85A1                        0F            .byte	$F
32969                                           ! 5621                          0,
32970 85A2                      0000            .word	0
32971 85A4                      0000            .word	0
32972                                           ! 5622 } },
32973                                           ! 5623 { 0x011e,
32974 85A6                      011E            .word	$11E
32975                                           ! 5624 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32976 85A8                      009B            .word	$9B
32977                                           ! 5625                           0x01 | 0x02 | 0x04,
32978 85AA                        07            .byte	7
32979                                           ! 5626                           0,
32980 85AB                        00            .byte	0
32981                                           ! 5627                           64,
32982 85AC                      0040            .word	$40
32983                                           ! 5628                    64,
32984 85AE                      0040            .word	$40
32985                                           ! 5629                        0xA000,
32986 85B0                      A000            .word	$A000
32987                                           ! 5630                        0x0000,
32988 85B2                      0000            .word	0
32989                                           ! 5631                       0,
32990 85B4                      0000            .word	0
32991 85B6                      0000            .word	0
32992                                           ! 5632                             3200,
32993 85B8                      0C80            .word	$C80
32994                                           ! 5633                        1600,
32995 85BA                      0640            .word	$640
32996                                           ! 5634                        1200,
32997 85BC                      04B0            .word	$4B0
32998                                           ! 5635                      8,
32999 85BE                        08            .byte	8
33000                                           ! 5636                      16,
33001 85BF                        10            .byte	$10
33002                                           ! 5637                           1,
33003 85C0                        01            .byte	1
33004                                           ! 5638                         16,
33005 85C1                        10            .byte	$10
33006                                           ! 5639                          59,
33007 85C2                        3B            .byte	$3B
33008                                           ! 5640                        0x06,
33009 85C3                        06            .byte	6
33010                                           ! 5641                     0,
33011 85C4                        00            .byte	0
33012                                           ! 5642                               3,
33013 85C5                        03            .byte	3
33014                                           ! 5643                          0,
33015 85C6                        00            .byte	0
33016                                           ! 5644                        5,
33017 85C7                        05            .byte	5
33018                                           ! 5645                             11,
33019 85C8                        0B            .byte	$B
33020                                           ! 5646                          6,
33021 85C9                        06            .byte	6
33022                                           ! 5647                               5,
33023 85CA                        05            .byte	5
33024                                           ! 5648                         5,
33025 85CB                        05            .byte	5
33026                                           ! 5649                              0,
33027 85CC                        00            .byte	0
33028                                           ! 5650                         0,
33029 85CD                        00            .byte	0
33030                                           ! 5651                              0,
33031 85CE                        00            .byte	0
33032                                           ! 5652                                0,
33033 85CF                        00            .byte	0
33034                                           ! 5653      
33035                                           ! 5653                   0xE0000000,
33036 85D0                      0000            .word	0
33037 85D2                      E000            .word	$E000
33038                                           ! 5654                               0,
33039 85D4                      0000            .word	0
33040 85D6                      0000            .word	0
33041                                           ! 5655                             0,
33042 85D8                      0000            .word	0
33043                                           ! 5656                                3200,
33044 85DA                      0C80            .word	$C80
33045                                           ! 5657                             0,
33046 85DC                        00            .byte	0
33047                                           ! 5658                             0,
33048 85DD                        00            .byte	0
33049                                           ! 5659                           5,
33050 85DE                        05            .byte	5
33051                                           ! 5660                                11,
33052 85DF                        0B            .byte	$B
33053                                           ! 5661                             6,
33054 85E0                        06            .byte	6
33055                                           ! 5662                                  5,
33056 85E1                        05            .byte	5
33057                                           ! 5663                            5,
33058 85E2                        05            .byte	5
33059                                           ! 5664                                 0,
33060 85E3                        00            .byte	0
33061                                           ! 5665                            0,
33062 85E4                        00            .byte	0
33063                                           ! 5666                                 0,
33064 85E5                        00            .byte	0
33065                                           ! 5667                          0,
33066 85E6                      0000            .word	0
33067 85E8                      0000            .word	0
33068                                           ! 5668 } },
33069                                           ! 5669 { 0x011f,
33070 85EA                      011F            .word	$11F
33071                                           ! 5670 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33072 85EC                      009B            .word	$9B
33073                                           ! 5671                           0x01 | 0x02 | 0x04,
33074 85EE                        07            .byte	7
33075                                           ! 5672                           0,
33076 85EF                        00            .byte	0
33077                                           ! 5673                           64,
33078 85F0                      0040            .word	$40
33079                                           ! 5674                    64,
33080 85F2                      0040            .word	$40
33081                                           ! 5675                        0xA000,
33082 85F4                      A000            .word	$A000
33083                                           ! 5676                        0x0000,
33084 85F6                      0000            .word	0
33085                                           ! 5677                       0,
33086 85F8                      0000            .word	0
33087 85FA                      0000            .word	0
33088                                           ! 5678                             4800,
33089 85FC                      12C0            .word	$12C0
33090                                           ! 5679                        1600,
33091 85FE                      0640            .word	$640
33092                                           ! 5680                        1200,
33093 8600                      04B0            .word	$4B0
33094                                           ! 5681                      8,
33095 8602                        08            .byte	8
33096                                           ! 5682                      16,
33097 8603                        10            .byte	$10
33098                                           ! 5683                           1,
33099 8604                        01            .byte	1
33100                                           ! 5684                         24,
33101 8605                        18            .byte	$18
33102                                           ! 5685                          88,
33103 8606                        58            .byte	$58
33104                                           ! 5686                        0x06,
33105 8607                        06            .byte	6
33106                                           ! 5687                     0,
33107 8608                        00            .byte	0
33108                                           ! 5688                               1,
33109 8609                        01            .byte	1
33110                                           ! 5689                          0,
33111 860A                        00            .byte	0
33112                                           ! 5690                        8,
33113 860B                        08            .byte	8
33114                                           ! 5691                             16,
33115 860C                        10            .byte	$10
33116                                           ! 5692                          8,
33117 860D                        08            .byte	8
33118                                           ! 5693                               8,
33119 860E                        08            .byte	8
33120                                           ! 5694                         8,
33121 860F                        08            .byte	8
33122                                           ! 5695                              0,
33123 8610                        00            .byte	0
33124                                           ! 5696                         0,
33125 8611                        00            .byte	0
33126                                           ! 5697                              0,
33127 8612                        00            .byte	0
33128                                           ! 5698                                0,
33129 8613                        00            .byte	0
33130                                           ! 5699                        0xE0000000,
33131 8614                      0000            .word	0
33132 8616                      E000            .word	$E000
33133                                           ! 5700                               0,
33134 8618                      0000            .word	0
33135 861A                      0000            .word	0
33136                                           ! 5701                             0,
33137 861C                      0000            .word	0
33138                                           ! 5702                                4800,
33139 861E                      12C0            .word	$12C0
33140                                           ! 5703                             0,
33141 8620                        00            .byte	0
33142                                           ! 5704                             0,
33143 8621                        00            .byte	0
33144                                           ! 5705                           8,
33145 8622                        08            .byte	8
33146                                           ! 5706                                16,
33147 8623                        10            .byte	$10
33148                                           ! 5707                             8,
33149 8624                        08            .byte	8
33150                                           ! 5708                                  8,
33151 8625                        08            .byte	8
33152                                           ! 5709                            8,
33153 8626                        08            .byte	8
33154                                           ! 5710                                 0,
33155 8627                        00            .byte	0
33156                                           ! 5711                            0,
33157 8628                        00            .byte	0
33158                                           ! 5712                                 0,
33159 8629                        00            .byte	0
33160                                           ! 5713                          0,
33161 862A                      0000            .word	0
33162 862C                      0000            .word	0
33163                                           ! 5714 } },
33164                                           ! 5715 { 0x0140,
33165 862E                      0140            .word	$140
33166                                           ! 5716 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33167 8630                      009B            .word	$9B
33168                                           ! 5717                           0x01 | 0x02 | 0x04,
33169 8632                        07            .byte	7
33170                                           ! 5718                           0,
33171 8633                        00            .byte	0
33172                                           ! 5719                           64,
33173 8634                      0040            .word	$40
33174                                           ! 5720                    64,
33175 8636                      0040            .word	$40
33176                                           ! 5721    
33177                                           ! 5721                     0xA000,
33178 8638                      A000            .word	$A000
33179                                           ! 5722                        0x0000,
33180 863A                      0000            .word	0
33181                                           ! 5723                       0,
33182 863C                      0000            .word	0
33183 863E                      0000            .word	0
33184                                           ! 5724                             1280,
33185 8640                      0500            .word	$500
33186                                           ! 5725                        320,
33187 8642                      0140            .word	$140
33188                                           ! 5726                        200,
33189 8644                      00C8            .word	$C8
33190                                           ! 5727                      8,
33191 8646                        08            .byte	8
33192                                           ! 5728                      16,
33193 8647                        10            .byte	$10
33194                                           ! 5729                           1,
33195 8648                        01            .byte	1
33196                                           ! 5730                         32,
33197 8649                        20            .byte	$20
33198                                           ! 5731                          4,
33199 864A                        04            .byte	4
33200                                           ! 5732                        0x06,
33201 864B                        06            .byte	6
33202                                           ! 5733                     0,
33203 864C                        00            .byte	0
33204                                           ! 5734                               64,
33205 864D                        40            .byte	$40
33206                                           ! 5735                          0,
33207 864E                        00            .byte	0
33208                                           ! 5736                        8,
33209 864F                        08            .byte	8
33210                                           ! 5737                             16,
33211 8650                        10            .byte	$10
33212                                           ! 5738                          8,
33213 8651                        08            .byte	8
33214                                           ! 5739                               8,
33215 8652                        08            .byte	8
33216                                           ! 5740                         8,
33217 8653                        08            .byte	8
33218                                           ! 5741                              0,
33219 8654                        00            .byte	0
33220                                           ! 5742                         8,
33221 8655                        08            .byte	8
33222                                           ! 5743                              24,
33223 8656                        18            .byte	$18
33224                                           ! 5744                                0x02,
33225 8657                        02            .byte	2
33226                                           ! 5745                        0xE0000000,
33227 8658                      0000            .word	0
33228 865A                      E000            .word	$E000
33229                                           ! 5746                               0,
33230 865C                      0000            .word	0
33231 865E                      0000            .word	0
33232                                           ! 5747                             0,
33233 8660                      0000            .word	0
33234                                           ! 5748                                1280,
33235 8662                      0500            .word	$500
33236                                           ! 5749                             0,
33237 8664                        00            .byte	0
33238                                           ! 5750                             0,
33239 8665                        00            .byte	0
33240                                           ! 5751                           8,
33241 8666                        08            .byte	8
33242                                           ! 5752                                16,
33243 8667                        10            .byte	$10
33244                                           ! 5753                             8,
33245 8668                        08            .byte	8
33246                                           ! 5754                                  8,
33247 8669                        08            .byte	8
33248                                           ! 5755                            8,
33249 866A                        08            .byte	8
33250                                           ! 5756                                 0,
33251 866B                        00            .byte	0
33252                                           ! 5757                            8,
33253 866C                        08            .byte	8
33254                                           ! 5758                                 24,
33255 866D                        18            .byte	$18
33256                                           ! 5759                          0,
33257 866E                      0000            .word	0
33258 8670                      0000            .word	0
33259                                           ! 5760 } },
33260                                           ! 5761 { 0x0141,
33261 8672                      0141            .word	$141
33262                                           ! 5762 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33263 8674                      009B            .word	$9B
33264                                           ! 5763                           0x01 | 0x02 | 0x04,
33265 8676                        07            .byte	7
33266                                           ! 5764                           0,
33267 8677                        00            .byte	0
33268                                           ! 5765                           64,
33269 8678                      0040            .word	$40
33270                                           ! 5766                    64,
33271 867A                      0040            .word	$40
33272                                           ! 5767                        0xA000,
33273 867C                      A000            .word	$A000
33274                                           ! 5768                        0x0000,
33275 867E                      0000            .word	0
33276                                           ! 5769                       0,
33277 8680                      0000            .word	0
33278 8682                      0000            .word	0
33279                                           ! 5770                             2560,
33280 8684                      0A00            .word	$A00
33281                                           ! 5771                        640,
33282 8686                      0280            .word	$280
33283                                           ! 5772                        400,
33284 8688                      0190            .word	$190
33285                                           ! 5773                      8,
33286 868A                        08            .byte	8
33287                                           ! 5774                      16,
33288 868B                        10            .byte	$10
33289                                           ! 5775                           1,
33290 868C                        01            .byte	1
33291                                           ! 5776                         32,
33292 868D                        20            .byte	$20
33293                                           ! 5777                          16,
33294 868E                        10            .byte	$10
33295                                           ! 5778                        0x06,
33296 868F                        06            .byte	6
33297                                           ! 5779                     0,
33298 8690                        00            .byte	0
33299                                           ! 5780                               15,
33300 8691                        0F            .byte	$F
33301                                           ! 5781                          0,
33302 8692                        00            .byte	0
33303                                           ! 5782                        8,
33304 8693                        08            .byte	8
33305                                           ! 5783                             16,
33306 8694                        10            .byte	$10
33307                                           ! 5784                          8,
33308 8695                        08            .byte	8
33309                                           ! 5785                               8,
33310 8696                        08            .byte	8
33311                                           ! 5786                         8,
33312 8697                        08            .byte	8
33313                                           ! 5787                              0,
33314 8698                        00            .byte	0
33315                                           ! 5788                         8,
33316 8699                        08            .byte	8
33317                                           ! 5789                              24,
33318 869A                        18            .byte	$18
33319                                           ! 5790           
33320                                           ! 5790                      0x02,
33321 869B                        02            .byte	2
33322                                           ! 5791                        0xE0000000,
33323 869C                      0000            .word	0
33324 869E                      E000            .word	$E000
33325                                           ! 5792                               0,
33326 86A0                      0000            .word	0
33327 86A2                      0000            .word	0
33328                                           ! 5793                             0,
33329 86A4                      0000            .word	0
33330                                           ! 5794                                2560,
33331 86A6                      0A00            .word	$A00
33332                                           ! 5795                             0,
33333 86A8                        00            .byte	0
33334                                           ! 5796                             0,
33335 86A9                        00            .byte	0
33336                                           ! 5797                           8,
33337 86AA                        08            .byte	8
33338                                           ! 5798                                16,
33339 86AB                        10            .byte	$10
33340                                           ! 5799                             8,
33341 86AC                        08            .byte	8
33342                                           ! 5800                                  8,
33343 86AD                        08            .byte	8
33344                                           ! 5801                            8,
33345 86AE                        08            .byte	8
33346                                           ! 5802                                 0,
33347 86AF                        00            .byte	0
33348                                           ! 5803                            8,
33349 86B0                        08            .byte	8
33350                                           ! 5804                                 24,
33351 86B1                        18            .byte	$18
33352                                           ! 5805                          0,
33353 86B2                      0000            .word	0
33354 86B4                      0000            .word	0
33355                                           ! 5806 } },
33356                                           ! 5807 { 0x0142,
33357 86B6                      0142            .word	$142
33358                                           ! 5808 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33359 86B8                      009B            .word	$9B
33360                                           ! 5809                           0x01 | 0x02 | 0x04,
33361 86BA                        07            .byte	7
33362                                           ! 5810                           0,
33363 86BB                        00            .byte	0
33364                                           ! 5811                           64,
33365 86BC                      0040            .word	$40
33366                                           ! 5812                    64,
33367 86BE                      0040            .word	$40
33368                                           ! 5813                        0xA000,
33369 86C0                      A000            .word	$A000
33370                                           ! 5814                        0x0000,
33371 86C2                      0000            .word	0
33372                                           ! 5815                       0,
33373 86C4                      0000            .word	0
33374 86C6                      0000            .word	0
33375                                           ! 5816                             2560,
33376 86C8                      0A00            .word	$A00
33377                                           ! 5817                        640,
33378 86CA                      0280            .word	$280
33379                                           ! 5818                        480,
33380 86CC                      01E0            .word	$1E0
33381                                           ! 5819                      8,
33382 86CE                        08            .byte	8
33383                                           ! 5820                      16,
33384 86CF                        10            .byte	$10
33385                                           ! 5821                           1,
33386 86D0                        01            .byte	1
33387                                           ! 5822                         32,
33388 86D1                        20            .byte	$20
33389                                           ! 5823                          19,
33390 86D2                        13            .byte	$13
33391                                           ! 5824                        0x06,
33392 86D3                        06            .byte	6
33393                                           ! 5825                     0,
33394 86D4                        00            .byte	0
33395                                           ! 5826                               12,
33396 86D5                        0C            .byte	$C
33397                                           ! 5827                          0,
33398 86D6                        00            .byte	0
33399                                           ! 5828                        8,
33400 86D7                        08            .byte	8
33401                                           ! 5829                             16,
33402 86D8                        10            .byte	$10
33403                                           ! 5830                          8,
33404 86D9                        08            .byte	8
33405                                           ! 5831                               8,
33406 86DA                        08            .byte	8
33407                                           ! 5832                         8,
33408 86DB                        08            .byte	8
33409                                           ! 5833                              0,
33410 86DC                        00            .byte	0
33411                                           ! 5834                         8,
33412 86DD                        08            .byte	8
33413                                           ! 5835                              24,
33414 86DE                        18            .byte	$18
33415                                           ! 5836                                0x02,
33416 86DF                        02            .byte	2
33417                                           ! 5837                        0xE0000000,
33418 86E0                      0000            .word	0
33419 86E2                      E000            .word	$E000
33420                                           ! 5838                               0,
33421 86E4                      0000            .word	0
33422 86E6                      0000            .word	0
33423                                           ! 5839                             0,
33424 86E8                      0000            .word	0
33425                                           ! 5840                                2560,
33426 86EA                      0A00            .word	$A00
33427                                           ! 5841                             0,
33428 86EC                        00            .byte	0
33429                                           ! 5842                             0,
33430 86ED                        00            .byte	0
33431                                           ! 5843                           8,
33432 86EE                        08            .byte	8
33433                                           ! 5844                                16,
33434 86EF                        10            .byte	$10
33435                                           ! 5845                             8,
33436 86F0                        08            .byte	8
33437                                           ! 5846                                  8,
33438 86F1                        08            .byte	8
33439                                           ! 5847                            8,
33440 86F2                        08            .byte	8
33441                                           ! 5848                                 0,
33442 86F3                        00            .byte	0
33443                                           ! 5849                            8,
33444 86F4                        08            .byte	8
33445                                           ! 5850                                 24,
33446 86F5                        18            .byte	$18
33447                                           ! 5851                          0,
33448 86F6                      0000            .word	0
33449 86F8                      0000            .word	0
33450                                           ! 5852 } },
33451                                           ! 5853 { 0x0143,
33452 86FA                      0143            .word	$143
33453                                           ! 5854 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33454 86FC                      009B            .word	$9B
33455                                           ! 5855                           0x01 | 0x02 | 0x04,
33456 86FE                        07            .byte	7
33457                                           ! 5856                           0,
33458 86FF                        00            .byte	0
33459                                           ! 5857                    
33460                                           ! 5857        64,
33461 8700                      0040            .word	$40
33462                                           ! 5858                    64,
33463 8702                      0040            .word	$40
33464                                           ! 5859                        0xA000,
33465 8704                      A000            .word	$A000
33466                                           ! 5860                        0x0000,
33467 8706                      0000            .word	0
33468                                           ! 5861                       0,
33469 8708                      0000            .word	0
33470 870A                      0000            .word	0
33471                                           ! 5862                             3200,
33472 870C                      0C80            .word	$C80
33473                                           ! 5863                        800,
33474 870E                      0320            .word	$320
33475                                           ! 5864                        600,
33476 8710                      0258            .word	$258
33477                                           ! 5865                      8,
33478 8712                        08            .byte	8
33479                                           ! 5866                      16,
33480 8713                        10            .byte	$10
33481                                           ! 5867                           1,
33482 8714                        01            .byte	1
33483                                           ! 5868                         32,
33484 8715                        20            .byte	$20
33485                                           ! 5869                          30,
33486 8716                        1E            .byte	$1E
33487                                           ! 5870                        0x06,
33488 8717                        06            .byte	6
33489                                           ! 5871                     0,
33490 8718                        00            .byte	0
33491                                           ! 5872                               7,
33492 8719                        07            .byte	7
33493                                           ! 5873                          0,
33494 871A                        00            .byte	0
33495                                           ! 5874                        8,
33496 871B                        08            .byte	8
33497                                           ! 5875                             16,
33498 871C                        10            .byte	$10
33499                                           ! 5876                          8,
33500 871D                        08            .byte	8
33501                                           ! 5877                               8,
33502 871E                        08            .byte	8
33503                                           ! 5878                         8,
33504 871F                        08            .byte	8
33505                                           ! 5879                              0,
33506 8720                        00            .byte	0
33507                                           ! 5880                         8,
33508 8721                        08            .byte	8
33509                                           ! 5881                              24,
33510 8722                        18            .byte	$18
33511                                           ! 5882                                0x02,
33512 8723                        02            .byte	2
33513                                           ! 5883                        0xE0000000,
33514 8724                      0000            .word	0
33515 8726                      E000            .word	$E000
33516                                           ! 5884                               0,
33517 8728                      0000            .word	0
33518 872A                      0000            .word	0
33519                                           ! 5885                             0,
33520 872C                      0000            .word	0
33521                                           ! 5886                                3200,
33522 872E                      0C80            .word	$C80
33523                                           ! 5887                             0,
33524 8730                        00            .byte	0
33525                                           ! 5888                             0,
33526 8731                        00            .byte	0
33527                                           ! 5889                           8,
33528 8732                        08            .byte	8
33529                                           ! 5890                                16,
33530 8733                        10            .byte	$10
33531                                           ! 5891                             8,
33532 8734                        08            .byte	8
33533                                           ! 5892                                  8,
33534 8735                        08            .byte	8
33535                                           ! 5893                            8,
33536 8736                        08            .byte	8
33537                                           ! 5894                                 0,
33538 8737                        00            .byte	0
33539                                           ! 5895                            8,
33540 8738                        08            .byte	8
33541                                           ! 5896                                 24,
33542 8739                        18            .byte	$18
33543                                           ! 5897                          0,
33544 873A                      0000            .word	0
33545 873C                      0000            .word	0
33546                                           ! 5898 } },
33547                                           ! 5899 { 0x0144,
33548 873E                      0144            .word	$144
33549                                           ! 5900 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33550 8740                      009B            .word	$9B
33551                                           ! 5901                           0x01 | 0x02 | 0x04,
33552 8742                        07            .byte	7
33553                                           ! 5902                           0,
33554 8743                        00            .byte	0
33555                                           ! 5903                           64,
33556 8744                      0040            .word	$40
33557                                           ! 5904                    64,
33558 8746                      0040            .word	$40
33559                                           ! 5905                        0xA000,
33560 8748                      A000            .word	$A000
33561                                           ! 5906                        0x0000,
33562 874A                      0000            .word	0
33563                                           ! 5907                       0,
33564 874C                      0000            .word	0
33565 874E                      0000            .word	0
33566                                           ! 5908                             4096,
33567 8750                      1000            .word	$1000
33568                                           ! 5909                        1024,
33569 8752                      0400            .word	$400
33570                                           ! 5910                        768,
33571 8754                      0300            .word	$300
33572                                           ! 5911                      8,
33573 8756                        08            .byte	8
33574                                           ! 5912                      16,
33575 8757                        10            .byte	$10
33576                                           ! 5913                           1,
33577 8758                        01            .byte	1
33578                                           ! 5914                         32,
33579 8759                        20            .byte	$20
33580                                           ! 5915                          48,
33581 875A                        30            .byte	$30
33582                                           ! 5916                        0x06,
33583 875B                        06            .byte	6
33584                                           ! 5917                     0,
33585 875C                        00            .byte	0
33586                                           ! 5918                               4,
33587 875D                        04            .byte	4
33588                                           ! 5919                          0,
33589 875E                        00            .byte	0
33590                                           ! 5920                        8,
33591 875F                        08            .byte	8
33592                                           ! 5921                             16,
33593 8760                        10            .byte	$10
33594                                           ! 5922                          8,
33595 8761                        08            .byte	8
33596                                           ! 5923                               8,
33597 8762                        08            .byte	8
33598                                           ! 5924                         8,
33599 8763                        08            .byte	8
33600                                           ! 5925                              0,
33601 8764                        00            .byte	0
33602                                           ! 5926                         8,
33603 8765                        08            .byte	8
33604                                           ! 5927       
33605                                           ! 5927                        24,
33606 8766                        18            .byte	$18
33607                                           ! 5928                                0x02,
33608 8767                        02            .byte	2
33609                                           ! 5929                        0xE0000000,
33610 8768                      0000            .word	0
33611 876A                      E000            .word	$E000
33612                                           ! 5930                               0,
33613 876C                      0000            .word	0
33614 876E                      0000            .word	0
33615                                           ! 5931                             0,
33616 8770                      0000            .word	0
33617                                           ! 5932                                4096,
33618 8772                      1000            .word	$1000
33619                                           ! 5933                             0,
33620 8774                        00            .byte	0
33621                                           ! 5934                             0,
33622 8775                        00            .byte	0
33623                                           ! 5935                           8,
33624 8776                        08            .byte	8
33625                                           ! 5936                                16,
33626 8777                        10            .byte	$10
33627                                           ! 5937                             8,
33628 8778                        08            .byte	8
33629                                           ! 5938                                  8,
33630 8779                        08            .byte	8
33631                                           ! 5939                            8,
33632 877A                        08            .byte	8
33633                                           ! 5940                                 0,
33634 877B                        00            .byte	0
33635                                           ! 5941                            8,
33636 877C                        08            .byte	8
33637                                           ! 5942                                 24,
33638 877D                        18            .byte	$18
33639                                           ! 5943                          0,
33640 877E                      0000            .word	0
33641 8780                      0000            .word	0
33642                                           ! 5944 } },
33643                                           ! 5945 { 0x0145,
33644 8782                      0145            .word	$145
33645                                           ! 5946 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33646 8784                      009B            .word	$9B
33647                                           ! 5947                           0x01 | 0x02 | 0x04,
33648 8786                        07            .byte	7
33649                                           ! 5948                           0,
33650 8787                        00            .byte	0
33651                                           ! 5949                           64,
33652 8788                      0040            .word	$40
33653                                           ! 5950                    64,
33654 878A                      0040            .word	$40
33655                                           ! 5951                        0xA000,
33656 878C                      A000            .word	$A000
33657                                           ! 5952                        0x0000,
33658 878E                      0000            .word	0
33659                                           ! 5953                       0,
33660 8790                      0000            .word	0
33661 8792                      0000            .word	0
33662                                           ! 5954                             5120,
33663 8794                      1400            .word	$1400
33664                                           ! 5955                        1280,
33665 8796                      0500            .word	$500
33666                                           ! 5956                        1024,
33667 8798                      0400            .word	$400
33668                                           ! 5957                      8,
33669 879A                        08            .byte	8
33670                                           ! 5958                      16,
33671 879B                        10            .byte	$10
33672                                           ! 5959                           1,
33673 879C                        01            .byte	1
33674                                           ! 5960                         32,
33675 879D                        20            .byte	$20
33676                                           ! 5961                          80,
33677 879E                        50            .byte	$50
33678                                           ! 5962                        0x06,
33679 879F                        06            .byte	6
33680                                           ! 5963                     0,
33681 87A0                        00            .byte	0
33682                                           ! 5964                               2,
33683 87A1                        02            .byte	2
33684                                           ! 5965                          0,
33685 87A2                        00            .byte	0
33686                                           ! 5966                        8,
33687 87A3                        08            .byte	8
33688                                           ! 5967                             16,
33689 87A4                        10            .byte	$10
33690                                           ! 5968                          8,
33691 87A5                        08            .byte	8
33692                                           ! 5969                               8,
33693 87A6                        08            .byte	8
33694                                           ! 5970                         8,
33695 87A7                        08            .byte	8
33696                                           ! 5971                              0,
33697 87A8                        00            .byte	0
33698                                           ! 5972                         8,
33699 87A9                        08            .byte	8
33700                                           ! 5973                              24,
33701 87AA                        18            .byte	$18
33702                                           ! 5974                                0x02,
33703 87AB                        02            .byte	2
33704                                           ! 5975                        0xE0000000,
33705 87AC                      0000            .word	0
33706 87AE                      E000            .word	$E000
33707                                           ! 5976                               0,
33708 87B0                      0000            .word	0
33709 87B2                      0000            .word	0
33710                                           ! 5977                             0,
33711 87B4                      0000            .word	0
33712                                           ! 5978                                5120,
33713 87B6                      1400            .word	$1400
33714                                           ! 5979                             0,
33715 87B8                        00            .byte	0
33716                                           ! 5980                             0,
33717 87B9                        00            .byte	0
33718                                           ! 5981                           8,
33719 87BA                        08            .byte	8
33720                                           ! 5982                                16,
33721 87BB                        10            .byte	$10
33722                                           ! 5983                             8,
33723 87BC                        08            .byte	8
33724                                           ! 5984                                  8,
33725 87BD                        08            .byte	8
33726                                           ! 5985                            8,
33727 87BE                        08            .byte	8
33728                                           ! 5986                                 0,
33729 87BF                        00            .byte	0
33730                                           ! 5987                            8,
33731 87C0                        08            .byte	8
33732                                           ! 5988                                 24,
33733 87C1                        18            .byte	$18
33734                                           ! 5989                          0,
33735 87C2                      0000            .word	0
33736 87C4                      0000            .word	0
33737                                           ! 5990 } },
33738                                           ! 5991 { 0x0146,
33739 87C6                      0146            .word	$146
33740                                           ! 5992 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33741 87C8                      009B            .word	$9B
33742                                           ! 5993                           0x01 | 0x02 | 0x04,
33743 87CA                        07            .byte	7
33744                                           ! 5994           
33745                                           ! 5994                 0,
33746 87CB                        00            .byte	0
33747                                           ! 5995                           64,
33748 87CC                      0040            .word	$40
33749                                           ! 5996                    64,
33750 87CE                      0040            .word	$40
33751                                           ! 5997                        0xA000,
33752 87D0                      A000            .word	$A000
33753                                           ! 5998                        0x0000,
33754 87D2                      0000            .word	0
33755                                           ! 5999                       0,
33756 87D4                      0000            .word	0
33757 87D6                      0000            .word	0
33758                                           ! 6000                             320,
33759 87D8                      0140            .word	$140
33760                                           ! 6001                        320,
33761 87DA                      0140            .word	$140
33762                                           ! 6002                        200,
33763 87DC                      00C8            .word	$C8
33764                                           ! 6003                      8,
33765 87DE                        08            .byte	8
33766                                           ! 6004                      16,
33767 87DF                        10            .byte	$10
33768                                           ! 6005                           1,
33769 87E0                        01            .byte	1
33770                                           ! 6006                         8,
33771 87E1                        08            .byte	8
33772                                           ! 6007                          1,
33773 87E2                        01            .byte	1
33774                                           ! 6008                        0x04,
33775 87E3                        04            .byte	4
33776                                           ! 6009                     0,
33777 87E4                        00            .byte	0
33778                                           ! 6010                               261,
33779 87E5                        05            .byte	5
33780                                           ! 6011                          0,
33781 87E6                        00            .byte	0
33782                                           ! 6012                        0,
33783 87E7                        00            .byte	0
33784                                           ! 6013                             0,
33785 87E8                        00            .byte	0
33786                                           ! 6014                          0,
33787 87E9                        00            .byte	0
33788                                           ! 6015                               0,
33789 87EA                        00            .byte	0
33790                                           ! 6016                         0,
33791 87EB                        00            .byte	0
33792                                           ! 6017                              0,
33793 87EC                        00            .byte	0
33794                                           ! 6018                         0,
33795 87ED                        00            .byte	0
33796                                           ! 6019                              0,
33797 87EE                        00            .byte	0
33798                                           ! 6020                                0,
33799 87EF                        00            .byte	0
33800                                           ! 6021                        0xE0000000,
33801 87F0                      0000            .word	0
33802 87F2                      E000            .word	$E000
33803                                           ! 6022                               0,
33804 87F4                      0000            .word	0
33805 87F6                      0000            .word	0
33806                                           ! 6023                             0,
33807 87F8                      0000            .word	0
33808                                           ! 6024                                320,
33809 87FA                      0140            .word	$140
33810                                           ! 6025                             0,
33811 87FC                        00            .byte	0
33812                                           ! 6026                             0,
33813 87FD                        00            .byte	0
33814                                           ! 6027                           0,
33815 87FE                        00            .byte	0
33816                                           ! 6028                                0,
33817 87FF                        00            .byte	0
33818                                           ! 6029                             0,
33819 8800                        00            .byte	0
33820                                           ! 6030                                  0,
33821 8801                        00            .byte	0
33822                                           ! 6031                            0,
33823 8802                        00            .byte	0
33824                                           ! 6032                                 0,
33825 8803                        00            .byte	0
33826                                           ! 6033                            0,
33827 8804                        00            .byte	0
33828                                           ! 6034                                 0,
33829 8805                        00            .byte	0
33830                                           ! 6035                          0,
33831 8806                      0000            .word	0
33832 8808                      0000            .word	0
33833                                           ! 6036 } },
33834                                           ! 6037 { 0x0147,
33835 880A                      0147            .word	$147
33836                                           ! 6038 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33837 880C                      009B            .word	$9B
33838                                           ! 6039                           0x01 | 0x02 | 0x04,
33839 880E                        07            .byte	7
33840                                           ! 6040                           0,
33841 880F                        00            .byte	0
33842                                           ! 6041                           64,
33843 8810                      0040            .word	$40
33844                                           ! 6042                    64,
33845 8812                      0040            .word	$40
33846                                           ! 6043                        0xA000,
33847 8814                      A000            .word	$A000
33848                                           ! 6044                        0x0000,
33849 8816                      0000            .word	0
33850                                           ! 6045                       0,
33851 8818                      0000            .word	0
33852 881A                      0000            .word	0
33853                                           ! 6046                             6400,
33854 881C                      1900            .word	$1900
33855                                           ! 6047                        1600,
33856 881E                      0640            .word	$640
33857                                           ! 6048                        1200,
33858 8820                      04B0            .word	$4B0
33859                                           ! 6049                      8,
33860 8822                        08            .byte	8
33861                                           ! 6050                      16,
33862 8823                        10            .byte	$10
33863                                           ! 6051                           1,
33864 8824                        01            .byte	1
33865                                           ! 6052                         32,
33866 8825                        20            .byte	$20
33867                                           ! 6053                          118,
33868 8826                        76            .byte	$76
33869                                           ! 6054                        0x06,
33870 8827                        06            .byte	6
33871                                           ! 6055                     0,
33872 8828                        00            .byte	0
33873                                           ! 6056                               1,
33874 8829                        01            .byte	1
33875                                           ! 6057                          0,
33876 882A                        00            .byte	0
33877                                           ! 6058                        8,
33878 882B                        08            .byte	8
33879                                           ! 6059                             16,
33880 882C                        10            .byte	$10
33881                                           ! 6060                          8,
33882 882D                        08            .byte	8
33883                                           ! 6061                               8,
33884 882E                        08            .byte	8
33885                                           ! 6062                         8,
33886 882F                        08            .byte	8
33887                                           ! 6063                              0,
33888 8830                        00            .byte	0
33889                                           ! 6064   
33890                                           ! 6064                       8,
33891 8831                        08            .byte	8
33892                                           ! 6065                              24,
33893 8832                        18            .byte	$18
33894                                           ! 6066                                0x02,
33895 8833                        02            .byte	2
33896                                           ! 6067                        0xE0000000,
33897 8834                      0000            .word	0
33898 8836                      E000            .word	$E000
33899                                           ! 6068                               0,
33900 8838                      0000            .word	0
33901 883A                      0000            .word	0
33902                                           ! 6069                             0,
33903 883C                      0000            .word	0
33904                                           ! 6070                                6400,
33905 883E                      1900            .word	$1900
33906                                           ! 6071                             0,
33907 8840                        00            .byte	0
33908                                           ! 6072                             0,
33909 8841                        00            .byte	0
33910                                           ! 6073                           8,
33911 8842                        08            .byte	8
33912                                           ! 6074                                16,
33913 8843                        10            .byte	$10
33914                                           ! 6075                             8,
33915 8844                        08            .byte	8
33916                                           ! 6076                                  8,
33917 8845                        08            .byte	8
33918                                           ! 6077                            8,
33919 8846                        08            .byte	8
33920                                           ! 6078                                 0,
33921 8847                        00            .byte	0
33922                                           ! 6079                            8,
33923 8848                        08            .byte	8
33924                                           ! 6080                                 24,
33925 8849                        18            .byte	$18
33926                                           ! 6081                          0,
33927 884A                      0000            .word	0
33928 884C                      0000            .word	0
33929                                           ! 6082 } },
33930                                           ! 6083 { 0x0148,
33931 884E                      0148            .word	$148
33932                                           ! 6084 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33933 8850                      009B            .word	$9B
33934                                           ! 6085                           0x01 | 0x02 | 0x04,
33935 8852                        07            .byte	7
33936                                           ! 6086                           0,
33937 8853                        00            .byte	0
33938                                           ! 6087                           64,
33939 8854                      0040            .word	$40
33940                                           ! 6088                    64,
33941 8856                      0040            .word	$40
33942                                           ! 6089                        0xA000,
33943 8858                      A000            .word	$A000
33944                                           ! 6090                        0x0000,
33945 885A                      0000            .word	0
33946                                           ! 6091                       0,
33947 885C                      0000            .word	0
33948 885E                      0000            .word	0
33949                                           ! 6092                             1152,
33950 8860                      0480            .word	$480
33951                                           ! 6093                        1152,
33952 8862                      0480            .word	$480
33953                                           ! 6094                        864,
33954 8864                      0360            .word	$360
33955                                           ! 6095                      8,
33956 8866                        08            .byte	8
33957                                           ! 6096                      16,
33958 8867                        10            .byte	$10
33959                                           ! 6097                           1,
33960 8868                        01            .byte	1
33961                                           ! 6098                         8,
33962 8869                        08            .byte	8
33963                                           ! 6099                          16,
33964 886A                        10            .byte	$10
33965                                           ! 6100                        0x04,
33966 886B                        04            .byte	4
33967                                           ! 6101                     0,
33968 886C                        00            .byte	0
33969                                           ! 6102                               15,
33970 886D                        0F            .byte	$F
33971                                           ! 6103                          0,
33972 886E                        00            .byte	0
33973                                           ! 6104                        0,
33974 886F                        00            .byte	0
33975                                           ! 6105                             0,
33976 8870                        00            .byte	0
33977                                           ! 6106                          0,
33978 8871                        00            .byte	0
33979                                           ! 6107                               0,
33980 8872                        00            .byte	0
33981                                           ! 6108                         0,
33982 8873                        00            .byte	0
33983                                           ! 6109                              0,
33984 8874                        00            .byte	0
33985                                           ! 6110                         0,
33986 8875                        00            .byte	0
33987                                           ! 6111                              0,
33988 8876                        00            .byte	0
33989                                           ! 6112                                0,
33990 8877                        00            .byte	0
33991                                           ! 6113                        0xE0000000,
33992 8878                      0000            .word	0
33993 887A                      E000            .word	$E000
33994                                           ! 6114                               0,
33995 887C                      0000            .word	0
33996 887E                      0000            .word	0
33997                                           ! 6115                             0,
33998 8880                      0000            .word	0
33999                                           ! 6116                                1152,
34000 8882                      0480            .word	$480
34001                                           ! 6117                             0,
34002 8884                        00            .byte	0
34003                                           ! 6118                             0,
34004 8885                        00            .byte	0
34005                                           ! 6119                           0,
34006 8886                        00            .byte	0
34007                                           ! 6120                                0,
34008 8887                        00            .byte	0
34009                                           ! 6121                             0,
34010 8888                        00            .byte	0
34011                                           ! 6122                                  0,
34012 8889                        00            .byte	0
34013                                           ! 6123                            0,
34014 888A                        00            .byte	0
34015                                           ! 6124                                 0,
34016 888B                        00            .byte	0
34017                                           ! 6125                            0,
34018 888C                        00            .byte	0
34019                                           ! 6126                                 0,
34020 888D                        00            .byte	0
34021                                           ! 6127                          0,
34022 888E                      0000            .word	0
34023 8890                      0000            .word	0
34024                                           ! 6128 } },
34025                                           ! 6129 { 0x0149,
34026 8892                      0149            .word	$149
34027                                           ! 6130 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34028 8894                      009B            .word	$9B
34029                                           ! 6131                           0x01 | 
34030                                           ! 6131 0x02 | 0x04,
34031 8896                        07            .byte	7
34032                                           ! 6132                           0,
34033 8897                        00            .byte	0
34034                                           ! 6133                           64,
34035 8898                      0040            .word	$40
34036                                           ! 6134                    64,
34037 889A                      0040            .word	$40
34038                                           ! 6135                        0xA000,
34039 889C                      A000            .word	$A000
34040                                           ! 6136                        0x0000,
34041 889E                      0000            .word	0
34042                                           ! 6137                       0,
34043 88A0                      0000            .word	0
34044 88A2                      0000            .word	0
34045                                           ! 6138                             2304,
34046 88A4                      0900            .word	$900
34047                                           ! 6139                        1152,
34048 88A6                      0480            .word	$480
34049                                           ! 6140                        864,
34050 88A8                      0360            .word	$360
34051                                           ! 6141                      8,
34052 88AA                        08            .byte	8
34053                                           ! 6142                      16,
34054 88AB                        10            .byte	$10
34055                                           ! 6143                           1,
34056 88AC                        01            .byte	1
34057                                           ! 6144                         15,
34058 88AD                        0F            .byte	$F
34059                                           ! 6145                          31,
34060 88AE                        1F            .byte	$1F
34061                                           ! 6146                        0x06,
34062 88AF                        06            .byte	6
34063                                           ! 6147                     0,
34064 88B0                        00            .byte	0
34065                                           ! 6148                               7,
34066 88B1                        07            .byte	7
34067                                           ! 6149                          0,
34068 88B2                        00            .byte	0
34069                                           ! 6150                        5,
34070 88B3                        05            .byte	5
34071                                           ! 6151                             10,
34072 88B4                        0A            .byte	$A
34073                                           ! 6152                          5,
34074 88B5                        05            .byte	5
34075                                           ! 6153                               5,
34076 88B6                        05            .byte	5
34077                                           ! 6154                         5,
34078 88B7                        05            .byte	5
34079                                           ! 6155                              0,
34080 88B8                        00            .byte	0
34081                                           ! 6156                         1,
34082 88B9                        01            .byte	1
34083                                           ! 6157                              15,
34084 88BA                        0F            .byte	$F
34085                                           ! 6158                                0,
34086 88BB                        00            .byte	0
34087                                           ! 6159                        0xE0000000,
34088 88BC                      0000            .word	0
34089 88BE                      E000            .word	$E000
34090                                           ! 6160                               0,
34091 88C0                      0000            .word	0
34092 88C2                      0000            .word	0
34093                                           ! 6161                             0,
34094 88C4                      0000            .word	0
34095                                           ! 6162                                2304,
34096 88C6                      0900            .word	$900
34097                                           ! 6163                             0,
34098 88C8                        00            .byte	0
34099                                           ! 6164                             0,
34100 88C9                        00            .byte	0
34101                                           ! 6165                           5,
34102 88CA                        05            .byte	5
34103                                           ! 6166                                10,
34104 88CB                        0A            .byte	$A
34105                                           ! 6167                             5,
34106 88CC                        05            .byte	5
34107                                           ! 6168                                  5,
34108 88CD                        05            .byte	5
34109                                           ! 6169                            5,
34110 88CE                        05            .byte	5
34111                                           ! 6170                                 0,
34112 88CF                        00            .byte	0
34113                                           ! 6171                            1,
34114 88D0                        01            .byte	1
34115                                           ! 6172                                 15,
34116 88D1                        0F            .byte	$F
34117                                           ! 6173                          0,
34118 88D2                      0000            .word	0
34119 88D4                      0000            .word	0
34120                                           ! 6174 } },
34121                                           ! 6175 { 0x014a,
34122 88D6                      014A            .word	$14A
34123                                           ! 6176 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34124 88D8                      009B            .word	$9B
34125                                           ! 6177                           0x01 | 0x02 | 0x04,
34126 88DA                        07            .byte	7
34127                                           ! 6178                           0,
34128 88DB                        00            .byte	0
34129                                           ! 6179                           64,
34130 88DC                      0040            .word	$40
34131                                           ! 6180                    64,
34132 88DE                      0040            .word	$40
34133                                           ! 6181                        0xA000,
34134 88E0                      A000            .word	$A000
34135                                           ! 6182                        0x0000,
34136 88E2                      0000            .word	0
34137                                           ! 6183                       0,
34138 88E4                      0000            .word	0
34139 88E6                      0000            .word	0
34140                                           ! 6184                             2304,
34141 88E8                      0900            .word	$900
34142                                           ! 6185                        1152,
34143 88EA                      0480            .word	$480
34144                                           ! 6186                        864,
34145 88EC                      0360            .word	$360
34146                                           ! 6187                      8,
34147 88EE                        08            .byte	8
34148                                           ! 6188                      16,
34149 88EF                        10            .byte	$10
34150                                           ! 6189                           1,
34151 88F0                        01            .byte	1
34152                                           ! 6190                         16,
34153 88F1                        10            .byte	$10
34154                                           ! 6191                          31,
34155 88F2                        1F            .byte	$1F
34156                                           ! 6192                        0x06,
34157 88F3                        06            .byte	6
34158                                           ! 6193                     0,
34159 88F4                        00            .byte	0
34160                                           ! 6194                               7,
34161 88F5                        07            .byte	7
34162                                           ! 6195                          0,
34163 88F6                        00            .byte	0
34164                                           ! 6196                        5,
34165 88F7                        05            .byte	5
34166                                           ! 6197                             11,
34167 88F8                        0B            .byte	$B
34168                                           ! 6198                          6,
34169 88F9                        06            .byte	6
34170                                           ! 6199                               5,
34171 88FA                        05            .byte	5
34172                                           ! 6200                         5,
34173 88FB                        05            .byte	5
34174                                           ! 6201       
34175                                           ! 6201                        0,
34176 88FC                        00            .byte	0
34177                                           ! 6202                         0,
34178 88FD                        00            .byte	0
34179                                           ! 6203                              0,
34180 88FE                        00            .byte	0
34181                                           ! 6204                                0,
34182 88FF                        00            .byte	0
34183                                           ! 6205                        0xE0000000,
34184 8900                      0000            .word	0
34185 8902                      E000            .word	$E000
34186                                           ! 6206                               0,
34187 8904                      0000            .word	0
34188 8906                      0000            .word	0
34189                                           ! 6207                             0,
34190 8908                      0000            .word	0
34191                                           ! 6208                                2304,
34192 890A                      0900            .word	$900
34193                                           ! 6209                             0,
34194 890C                        00            .byte	0
34195                                           ! 6210                             0,
34196 890D                        00            .byte	0
34197                                           ! 6211                           5,
34198 890E                        05            .byte	5
34199                                           ! 6212                                11,
34200 890F                        0B            .byte	$B
34201                                           ! 6213                             6,
34202 8910                        06            .byte	6
34203                                           ! 6214                                  5,
34204 8911                        05            .byte	5
34205                                           ! 6215                            5,
34206 8912                        05            .byte	5
34207                                           ! 6216                                 0,
34208 8913                        00            .byte	0
34209                                           ! 6217                            0,
34210 8914                        00            .byte	0
34211                                           ! 6218                                 0,
34212 8915                        00            .byte	0
34213                                           ! 6219                          0,
34214 8916                      0000            .word	0
34215 8918                      0000            .word	0
34216                                           ! 6220 } },
34217                                           ! 6221 { 0x014b,
34218 891A                      014B            .word	$14B
34219                                           ! 6222 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34220 891C                      009B            .word	$9B
34221                                           ! 6223                           0x01 | 0x02 | 0x04,
34222 891E                        07            .byte	7
34223                                           ! 6224                           0,
34224 891F                        00            .byte	0
34225                                           ! 6225                           64,
34226 8920                      0040            .word	$40
34227                                           ! 6226                    64,
34228 8922                      0040            .word	$40
34229                                           ! 6227                        0xA000,
34230 8924                      A000            .word	$A000
34231                                           ! 6228                        0x0000,
34232 8926                      0000            .word	0
34233                                           ! 6229                       0,
34234 8928                      0000            .word	0
34235 892A                      0000            .word	0
34236                                           ! 6230                             3456,
34237 892C                      0D80            .word	$D80
34238                                           ! 6231                        1152,
34239 892E                      0480            .word	$480
34240                                           ! 6232                        864,
34241 8930                      0360            .word	$360
34242                                           ! 6233                      8,
34243 8932                        08            .byte	8
34244                                           ! 6234                      16,
34245 8933                        10            .byte	$10
34246                                           ! 6235                           1,
34247 8934                        01            .byte	1
34248                                           ! 6236                         24,
34249 8935                        18            .byte	$18
34250                                           ! 6237                          46,
34251 8936                        2E            .byte	$2E
34252                                           ! 6238                        0x06,
34253 8937                        06            .byte	6
34254                                           ! 6239                     0,
34255 8938                        00            .byte	0
34256                                           ! 6240                               4,
34257 8939                        04            .byte	4
34258                                           ! 6241                          0,
34259 893A                        00            .byte	0
34260                                           ! 6242                        8,
34261 893B                        08            .byte	8
34262                                           ! 6243                             16,
34263 893C                        10            .byte	$10
34264                                           ! 6244                          8,
34265 893D                        08            .byte	8
34266                                           ! 6245                               8,
34267 893E                        08            .byte	8
34268                                           ! 6246                         8,
34269 893F                        08            .byte	8
34270                                           ! 6247                              0,
34271 8940                        00            .byte	0
34272                                           ! 6248                         0,
34273 8941                        00            .byte	0
34274                                           ! 6249                              0,
34275 8942                        00            .byte	0
34276                                           ! 6250                                0,
34277 8943                        00            .byte	0
34278                                           ! 6251                        0xE0000000,
34279 8944                      0000            .word	0
34280 8946                      E000            .word	$E000
34281                                           ! 6252                               0,
34282 8948                      0000            .word	0
34283 894A                      0000            .word	0
34284                                           ! 6253                             0,
34285 894C                      0000            .word	0
34286                                           ! 6254                                3456,
34287 894E                      0D80            .word	$D80
34288                                           ! 6255                             0,
34289 8950                        00            .byte	0
34290                                           ! 6256                             0,
34291 8951                        00            .byte	0
34292                                           ! 6257                           8,
34293 8952                        08            .byte	8
34294                                           ! 6258                                16,
34295 8953                        10            .byte	$10
34296                                           ! 6259                             8,
34297 8954                        08            .byte	8
34298                                           ! 6260                                  8,
34299 8955                        08            .byte	8
34300                                           ! 6261                            8,
34301 8956                        08            .byte	8
34302                                           ! 6262                                 0,
34303 8957                        00            .byte	0
34304                                           ! 6263                            0,
34305 8958                        00            .byte	0
34306                                           ! 6264                                 0,
34307 8959                        00            .byte	0
34308                                           ! 6265                          0,
34309 895A                      0000            .word	0
34310 895C                      0000            .word	0
34311                                           ! 6266 } },
34312                                           ! 6267 { 0x014c,
34313 895E                      014C            .word	$14C
34314                                           ! 6268 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34315 8960                      009B            .word	$9B
34316                                           ! 6269         
34317                                           ! 6269                   0x01 | 0x02 | 0x04,
34318 8962                        07            .byte	7
34319                                           ! 6270                           0,
34320 8963                        00            .byte	0
34321                                           ! 6271                           64,
34322 8964                      0040            .word	$40
34323                                           ! 6272                    64,
34324 8966                      0040            .word	$40
34325                                           ! 6273                        0xA000,
34326 8968                      A000            .word	$A000
34327                                           ! 6274                        0x0000,
34328 896A                      0000            .word	0
34329                                           ! 6275                       0,
34330 896C                      0000            .word	0
34331 896E                      0000            .word	0
34332                                           ! 6276                             4608,
34333 8970                      1200            .word	$1200
34334                                           ! 6277                        1152,
34335 8972                      0480            .word	$480
34336                                           ! 6278                        864,
34337 8974                      0360            .word	$360
34338                                           ! 6279                      8,
34339 8976                        08            .byte	8
34340                                           ! 6280                      16,
34341 8977                        10            .byte	$10
34342                                           ! 6281                           1,
34343 8978                        01            .byte	1
34344                                           ! 6282                         32,
34345 8979                        20            .byte	$20
34346                                           ! 6283                          61,
34347 897A                        3D            .byte	$3D
34348                                           ! 6284                        0x06,
34349 897B                        06            .byte	6
34350                                           ! 6285                     0,
34351 897C                        00            .byte	0
34352                                           ! 6286                               3,
34353 897D                        03            .byte	3
34354                                           ! 6287                          0,
34355 897E                        00            .byte	0
34356                                           ! 6288                        8,
34357 897F                        08            .byte	8
34358                                           ! 6289                             16,
34359 8980                        10            .byte	$10
34360                                           ! 6290                          8,
34361 8981                        08            .byte	8
34362                                           ! 6291                               8,
34363 8982                        08            .byte	8
34364                                           ! 6292                         8,
34365 8983                        08            .byte	8
34366                                           ! 6293                              0,
34367 8984                        00            .byte	0
34368                                           ! 6294                         8,
34369 8985                        08            .byte	8
34370                                           ! 6295                              24,
34371 8986                        18            .byte	$18
34372                                           ! 6296                                0x02,
34373 8987                        02            .byte	2
34374                                           ! 6297                        0xE0000000,
34375 8988                      0000            .word	0
34376 898A                      E000            .word	$E000
34377                                           ! 6298                               0,
34378 898C                      0000            .word	0
34379 898E                      0000            .word	0
34380                                           ! 6299                             0,
34381 8990                      0000            .word	0
34382                                           ! 6300                                4608,
34383 8992                      1200            .word	$1200
34384                                           ! 6301                             0,
34385 8994                        00            .byte	0
34386                                           ! 6302                             0,
34387 8995                        00            .byte	0
34388                                           ! 6303                           8,
34389 8996                        08            .byte	8
34390                                           ! 6304                                16,
34391 8997                        10            .byte	$10
34392                                           ! 6305                             8,
34393 8998                        08            .byte	8
34394                                           ! 6306                                  8,
34395 8999                        08            .byte	8
34396                                           ! 6307                            8,
34397 899A                        08            .byte	8
34398                                           ! 6308                                 0,
34399 899B                        00            .byte	0
34400                                           ! 6309                            8,
34401 899C                        08            .byte	8
34402                                           ! 6310                                 24,
34403 899D                        18            .byte	$18
34404                                           ! 6311                          0,
34405 899E                      0000            .word	0
34406 89A0                      0000            .word	0
34407                                           ! 6312 } },
34408                                           ! 6313 { 0x0178,
34409 89A2                      0178            .word	$178
34410                                           ! 6314 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34411 89A4                      009B            .word	$9B
34412                                           ! 6315                           0x01 | 0x02 | 0x04,
34413 89A6                        07            .byte	7
34414                                           ! 6316                           0,
34415 89A7                        00            .byte	0
34416                                           ! 6317                           64,
34417 89A8                      0040            .word	$40
34418                                           ! 6318                    64,
34419 89AA                      0040            .word	$40
34420                                           ! 6319                        0xA000,
34421 89AC                      A000            .word	$A000
34422                                           ! 6320                        0x0000,
34423 89AE                      0000            .word	0
34424                                           ! 6321                       0,
34425 89B0                      0000            .word	0
34426 89B2                      0000            .word	0
34427                                           ! 6322                             2560,
34428 89B4                      0A00            .word	$A00
34429                                           ! 6323                        1280,
34430 89B6                      0500            .word	$500
34431                                           ! 6324                        800,
34432 89B8                      0320            .word	$320
34433                                           ! 6325                      8,
34434 89BA                        08            .byte	8
34435                                           ! 6326                      16,
34436 89BB                        10            .byte	$10
34437                                           ! 6327                           1,
34438 89BC                        01            .byte	1
34439                                           ! 6328                         16,
34440 89BD                        10            .byte	$10
34441                                           ! 6329                          32,
34442 89BE                        20            .byte	$20
34443                                           ! 6330                        0x06,
34444 89BF                        06            .byte	6
34445                                           ! 6331                     0,
34446 89C0                        00            .byte	0
34447                                           ! 6332                               7,
34448 89C1                        07            .byte	7
34449                                           ! 6333                          0,
34450 89C2                        00            .byte	0
34451                                           ! 6334                        5,
34452 89C3                        05            .byte	5
34453                                           ! 6335                             11,
34454 89C4                        0B            .byte	$B
34455                                           ! 6336                          6,
34456 89C5                        06            .byte	6
34457                                           ! 6337                               5,
34458 89C6                        05            .byte	5
34459                                           ! 6338      
34460                                           ! 6338                    5,
34461 89C7                        05            .byte	5
34462                                           ! 6339                              0,
34463 89C8                        00            .byte	0
34464                                           ! 6340                         0,
34465 89C9                        00            .byte	0
34466                                           ! 6341                              0,
34467 89CA                        00            .byte	0
34468                                           ! 6342                                0,
34469 89CB                        00            .byte	0
34470                                           ! 6343                        0xE0000000,
34471 89CC                      0000            .word	0
34472 89CE                      E000            .word	$E000
34473                                           ! 6344                               0,
34474 89D0                      0000            .word	0
34475 89D2                      0000            .word	0
34476                                           ! 6345                             0,
34477 89D4                      0000            .word	0
34478                                           ! 6346                                2560,
34479 89D6                      0A00            .word	$A00
34480                                           ! 6347                             0,
34481 89D8                        00            .byte	0
34482                                           ! 6348                             0,
34483 89D9                        00            .byte	0
34484                                           ! 6349                           5,
34485 89DA                        05            .byte	5
34486                                           ! 6350                                11,
34487 89DB                        0B            .byte	$B
34488                                           ! 6351                             6,
34489 89DC                        06            .byte	6
34490                                           ! 6352                                  5,
34491 89DD                        05            .byte	5
34492                                           ! 6353                            5,
34493 89DE                        05            .byte	5
34494                                           ! 6354                                 0,
34495 89DF                        00            .byte	0
34496                                           ! 6355                            0,
34497 89E0                        00            .byte	0
34498                                           ! 6356                                 0,
34499 89E1                        00            .byte	0
34500                                           ! 6357                          0,
34501 89E2                      0000            .word	0
34502 89E4                      0000            .word	0
34503                                           ! 6358 } },
34504                                           ! 6359 { 0x0179,
34505 89E6                      0179            .word	$179
34506                                           ! 6360 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34507 89E8                      009B            .word	$9B
34508                                           ! 6361                           0x01 | 0x02 | 0x04,
34509 89EA                        07            .byte	7
34510                                           ! 6362                           0,
34511 89EB                        00            .byte	0
34512                                           ! 6363                           64,
34513 89EC                      0040            .word	$40
34514                                           ! 6364                    64,
34515 89EE                      0040            .word	$40
34516                                           ! 6365                        0xA000,
34517 89F0                      A000            .word	$A000
34518                                           ! 6366                        0x0000,
34519 89F2                      0000            .word	0
34520                                           ! 6367                       0,
34521 89F4                      0000            .word	0
34522 89F6                      0000            .word	0
34523                                           ! 6368                             3840,
34524 89F8                      0F00            .word	$F00
34525                                           ! 6369                        1280,
34526 89FA                      0500            .word	$500
34527                                           ! 6370                        800,
34528 89FC                      0320            .word	$320
34529                                           ! 6371                      8,
34530 89FE                        08            .byte	8
34531                                           ! 6372                      16,
34532 89FF                        10            .byte	$10
34533                                           ! 6373                           1,
34534 8A00                        01            .byte	1
34535                                           ! 6374                         24,
34536 8A01                        18            .byte	$18
34537                                           ! 6375                          47,
34538 8A02                        2F            .byte	$2F
34539                                           ! 6376                        0x06,
34540 8A03                        06            .byte	6
34541                                           ! 6377                     0,
34542 8A04                        00            .byte	0
34543                                           ! 6378                               4,
34544 8A05                        04            .byte	4
34545                                           ! 6379                          0,
34546 8A06                        00            .byte	0
34547                                           ! 6380                        8,
34548 8A07                        08            .byte	8
34549                                           ! 6381                             16,
34550 8A08                        10            .byte	$10
34551                                           ! 6382                          8,
34552 8A09                        08            .byte	8
34553                                           ! 6383                               8,
34554 8A0A                        08            .byte	8
34555                                           ! 6384                         8,
34556 8A0B                        08            .byte	8
34557                                           ! 6385                              0,
34558 8A0C                        00            .byte	0
34559                                           ! 6386                         0,
34560 8A0D                        00            .byte	0
34561                                           ! 6387                              0,
34562 8A0E                        00            .byte	0
34563                                           ! 6388                                0,
34564 8A0F                        00            .byte	0
34565                                           ! 6389                        0xE0000000,
34566 8A10                      0000            .word	0
34567 8A12                      E000            .word	$E000
34568                                           ! 6390                               0,
34569 8A14                      0000            .word	0
34570 8A16                      0000            .word	0
34571                                           ! 6391                             0,
34572 8A18                      0000            .word	0
34573                                           ! 6392                                3840,
34574 8A1A                      0F00            .word	$F00
34575                                           ! 6393                             0,
34576 8A1C                        00            .byte	0
34577                                           ! 6394                             0,
34578 8A1D                        00            .byte	0
34579                                           ! 6395                           8,
34580 8A1E                        08            .byte	8
34581                                           ! 6396                                16,
34582 8A1F                        10            .byte	$10
34583                                           ! 6397                             8,
34584 8A20                        08            .byte	8
34585                                           ! 6398                                  8,
34586 8A21                        08            .byte	8
34587                                           ! 6399                            8,
34588 8A22                        08            .byte	8
34589                                           ! 6400                                 0,
34590 8A23                        00            .byte	0
34591                                           ! 6401                            0,
34592 8A24                        00            .byte	0
34593                                           ! 6402                                 0,
34594 8A25                        00            .byte	0
34595                                           ! 6403                          0,
34596 8A26                      0000            .word	0
34597 8A28                      0000            .word	0
34598                                           ! 6404 } },
34599                                           ! 6405 { 0x017a,
34600 8A2A                      017A            .word	$17A
34601                                           ! 6406 { 0x0001 | 0x0002 | 0x0008
34602                                           ! 6406  | 0x0080 | 0x0010,
34603 8A2C                      009B            .word	$9B
34604                                           ! 6407                           0x01 | 0x02 | 0x04,
34605 8A2E                        07            .byte	7
34606                                           ! 6408                           0,
34607 8A2F                        00            .byte	0
34608                                           ! 6409                           64,
34609 8A30                      0040            .word	$40
34610                                           ! 6410                    64,
34611 8A32                      0040            .word	$40
34612                                           ! 6411                        0xA000,
34613 8A34                      A000            .word	$A000
34614                                           ! 6412                        0x0000,
34615 8A36                      0000            .word	0
34616                                           ! 6413                       0,
34617 8A38                      0000            .word	0
34618 8A3A                      0000            .word	0
34619                                           ! 6414                             5120,
34620 8A3C                      1400            .word	$1400
34621                                           ! 6415                        1280,
34622 8A3E                      0500            .word	$500
34623                                           ! 6416                        800,
34624 8A40                      0320            .word	$320
34625                                           ! 6417                      8,
34626 8A42                        08            .byte	8
34627                                           ! 6418                      16,
34628 8A43                        10            .byte	$10
34629                                           ! 6419                           1,
34630 8A44                        01            .byte	1
34631                                           ! 6420                         32,
34632 8A45                        20            .byte	$20
34633                                           ! 6421                          63,
34634 8A46                        3F            .byte	$3F
34635                                           ! 6422                        0x06,
34636 8A47                        06            .byte	6
34637                                           ! 6423                     0,
34638 8A48                        00            .byte	0
34639                                           ! 6424                               3,
34640 8A49                        03            .byte	3
34641                                           ! 6425                          0,
34642 8A4A                        00            .byte	0
34643                                           ! 6426                        8,
34644 8A4B                        08            .byte	8
34645                                           ! 6427                             16,
34646 8A4C                        10            .byte	$10
34647                                           ! 6428                          8,
34648 8A4D                        08            .byte	8
34649                                           ! 6429                               8,
34650 8A4E                        08            .byte	8
34651                                           ! 6430                         8,
34652 8A4F                        08            .byte	8
34653                                           ! 6431                              0,
34654 8A50                        00            .byte	0
34655                                           ! 6432                         8,
34656 8A51                        08            .byte	8
34657                                           ! 6433                              24,
34658 8A52                        18            .byte	$18
34659                                           ! 6434                                0x02,
34660 8A53                        02            .byte	2
34661                                           ! 6435                        0xE0000000,
34662 8A54                      0000            .word	0
34663 8A56                      E000            .word	$E000
34664                                           ! 6436                               0,
34665 8A58                      0000            .word	0
34666 8A5A                      0000            .word	0
34667                                           ! 6437                             0,
34668 8A5C                      0000            .word	0
34669                                           ! 6438                                5120,
34670 8A5E                      1400            .word	$1400
34671                                           ! 6439                             0,
34672 8A60                        00            .byte	0
34673                                           ! 6440                             0,
34674 8A61                        00            .byte	0
34675                                           ! 6441                           8,
34676 8A62                        08            .byte	8
34677                                           ! 6442                                16,
34678 8A63                        10            .byte	$10
34679                                           ! 6443                             8,
34680 8A64                        08            .byte	8
34681                                           ! 6444                                  8,
34682 8A65                        08            .byte	8
34683                                           ! 6445                            8,
34684 8A66                        08            .byte	8
34685                                           ! 6446                                 0,
34686 8A67                        00            .byte	0
34687                                           ! 6447                            8,
34688 8A68                        08            .byte	8
34689                                           ! 6448                                 24,
34690 8A69                        18            .byte	$18
34691                                           ! 6449                          0,
34692 8A6A                      0000            .word	0
34693 8A6C                      0000            .word	0
34694                                           ! 6450 } },
34695                                           ! 6451 { 0x017b,
34696 8A6E                      017B            .word	$17B
34697                                           ! 6452 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34698 8A70                      009B            .word	$9B
34699                                           ! 6453                           0x01 | 0x02 | 0x04,
34700 8A72                        07            .byte	7
34701                                           ! 6454                           0,
34702 8A73                        00            .byte	0
34703                                           ! 6455                           64,
34704 8A74                      0040            .word	$40
34705                                           ! 6456                    64,
34706 8A76                      0040            .word	$40
34707                                           ! 6457                        0xA000,
34708 8A78                      A000            .word	$A000
34709                                           ! 6458                        0x0000,
34710 8A7A                      0000            .word	0
34711                                           ! 6459                       0,
34712 8A7C                      0000            .word	0
34713 8A7E                      0000            .word	0
34714                                           ! 6460                             2560,
34715 8A80                      0A00            .word	$A00
34716                                           ! 6461                        1280,
34717 8A82                      0500            .word	$500
34718                                           ! 6462                        960,
34719 8A84                      03C0            .word	$3C0
34720                                           ! 6463                      8,
34721 8A86                        08            .byte	8
34722                                           ! 6464                      16,
34723 8A87                        10            .byte	$10
34724                                           ! 6465                           1,
34725 8A88                        01            .byte	1
34726                                           ! 6466                         16,
34727 8A89                        10            .byte	$10
34728                                           ! 6467                          38,
34729 8A8A                        26            .byte	$26
34730                                           ! 6468                        0x06,
34731 8A8B                        06            .byte	6
34732                                           ! 6469                     0,
34733 8A8C                        00            .byte	0
34734                                           ! 6470                               5,
34735 8A8D                        05            .byte	5
34736                                           ! 6471                          0,
34737 8A8E                        00            .byte	0
34738                                           ! 6472                        5,
34739 8A8F                        05            .byte	5
34740                                           ! 6473                             11,
34741 8A90                        0B            .byte	$B
34742                                           ! 6474                          6,
34743 8A91                        06            .byte	6
34744                                           ! 6475           
34745                                           ! 6475                     5,
34746 8A92                        05            .byte	5
34747                                           ! 6476                         5,
34748 8A93                        05            .byte	5
34749                                           ! 6477                              0,
34750 8A94                        00            .byte	0
34751                                           ! 6478                         0,
34752 8A95                        00            .byte	0
34753                                           ! 6479                              0,
34754 8A96                        00            .byte	0
34755                                           ! 6480                                0,
34756 8A97                        00            .byte	0
34757                                           ! 6481                        0xE0000000,
34758 8A98                      0000            .word	0
34759 8A9A                      E000            .word	$E000
34760                                           ! 6482                               0,
34761 8A9C                      0000            .word	0
34762 8A9E                      0000            .word	0
34763                                           ! 6483                             0,
34764 8AA0                      0000            .word	0
34765                                           ! 6484                                2560,
34766 8AA2                      0A00            .word	$A00
34767                                           ! 6485                             0,
34768 8AA4                        00            .byte	0
34769                                           ! 6486                             0,
34770 8AA5                        00            .byte	0
34771                                           ! 6487                           5,
34772 8AA6                        05            .byte	5
34773                                           ! 6488                                11,
34774 8AA7                        0B            .byte	$B
34775                                           ! 6489                             6,
34776 8AA8                        06            .byte	6
34777                                           ! 6490                                  5,
34778 8AA9                        05            .byte	5
34779                                           ! 6491                            5,
34780 8AAA                        05            .byte	5
34781                                           ! 6492                                 0,
34782 8AAB                        00            .byte	0
34783                                           ! 6493                            0,
34784 8AAC                        00            .byte	0
34785                                           ! 6494                                 0,
34786 8AAD                        00            .byte	0
34787                                           ! 6495                          0,
34788 8AAE                      0000            .word	0
34789 8AB0                      0000            .word	0
34790                                           ! 6496 } },
34791                                           ! 6497 { 0x017c,
34792 8AB2                      017C            .word	$17C
34793                                           ! 6498 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34794 8AB4                      009B            .word	$9B
34795                                           ! 6499                           0x01 | 0x02 | 0x04,
34796 8AB6                        07            .byte	7
34797                                           ! 6500                           0,
34798 8AB7                        00            .byte	0
34799                                           ! 6501                           64,
34800 8AB8                      0040            .word	$40
34801                                           ! 6502                    64,
34802 8ABA                      0040            .word	$40
34803                                           ! 6503                        0xA000,
34804 8ABC                      A000            .word	$A000
34805                                           ! 6504                        0x0000,
34806 8ABE                      0000            .word	0
34807                                           ! 6505                       0,
34808 8AC0                      0000            .word	0
34809 8AC2                      0000            .word	0
34810                                           ! 6506                             3840,
34811 8AC4                      0F00            .word	$F00
34812                                           ! 6507                        1280,
34813 8AC6                      0500            .word	$500
34814                                           ! 6508                        960,
34815 8AC8                      03C0            .word	$3C0
34816                                           ! 6509                      8,
34817 8ACA                        08            .byte	8
34818                                           ! 6510                      16,
34819 8ACB                        10            .byte	$10
34820                                           ! 6511                           1,
34821 8ACC                        01            .byte	1
34822                                           ! 6512                         24,
34823 8ACD                        18            .byte	$18
34824                                           ! 6513                          57,
34825 8ACE                        39            .byte	$39
34826                                           ! 6514                        0x06,
34827 8ACF                        06            .byte	6
34828                                           ! 6515                     0,
34829 8AD0                        00            .byte	0
34830                                           ! 6516                               3,
34831 8AD1                        03            .byte	3
34832                                           ! 6517                          0,
34833 8AD2                        00            .byte	0
34834                                           ! 6518                        8,
34835 8AD3                        08            .byte	8
34836                                           ! 6519                             16,
34837 8AD4                        10            .byte	$10
34838                                           ! 6520                          8,
34839 8AD5                        08            .byte	8
34840                                           ! 6521                               8,
34841 8AD6                        08            .byte	8
34842                                           ! 6522                         8,
34843 8AD7                        08            .byte	8
34844                                           ! 6523                              0,
34845 8AD8                        00            .byte	0
34846                                           ! 6524                         0,
34847 8AD9                        00            .byte	0
34848                                           ! 6525                              0,
34849 8ADA                        00            .byte	0
34850                                           ! 6526                                0,
34851 8ADB                        00            .byte	0
34852                                           ! 6527                        0xE0000000,
34853 8ADC                      0000            .word	0
34854 8ADE                      E000            .word	$E000
34855                                           ! 6528                               0,
34856 8AE0                      0000            .word	0
34857 8AE2                      0000            .word	0
34858                                           ! 6529                             0,
34859 8AE4                      0000            .word	0
34860                                           ! 6530                                3840,
34861 8AE6                      0F00            .word	$F00
34862                                           ! 6531                             0,
34863 8AE8                        00            .byte	0
34864                                           ! 6532                             0,
34865 8AE9                        00            .byte	0
34866                                           ! 6533                           8,
34867 8AEA                        08            .byte	8
34868                                           ! 6534                                16,
34869 8AEB                        10            .byte	$10
34870                                           ! 6535                             8,
34871 8AEC                        08            .byte	8
34872                                           ! 6536                                  8,
34873 8AED                        08            .byte	8
34874                                           ! 6537                            8,
34875 8AEE                        08            .byte	8
34876                                           ! 6538                                 0,
34877 8AEF                        00            .byte	0
34878                                           ! 6539                            0,
34879 8AF0                        00            .byte	0
34880                                           ! 6540                                 0,
34881 8AF1                        00            .byte	0
34882                                           ! 6541                          0,
34883 8AF2                      0000            .word	0
34884 8AF4                      0000            .word	0
34885                                           ! 6542 } },
34886                                           ! 6543 { 0x017d
34887                                           ! 6543 ,
34888 8AF6                      017D            .word	$17D
34889                                           ! 6544 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34890 8AF8                      009B            .word	$9B
34891                                           ! 6545                           0x01 | 0x02 | 0x04,
34892 8AFA                        07            .byte	7
34893                                           ! 6546                           0,
34894 8AFB                        00            .byte	0
34895                                           ! 6547                           64,
34896 8AFC                      0040            .word	$40
34897                                           ! 6548                    64,
34898 8AFE                      0040            .word	$40
34899                                           ! 6549                        0xA000,
34900 8B00                      A000            .word	$A000
34901                                           ! 6550                        0x0000,
34902 8B02                      0000            .word	0
34903                                           ! 6551                       0,
34904 8B04                      0000            .word	0
34905 8B06                      0000            .word	0
34906                                           ! 6552                             5120,
34907 8B08                      1400            .word	$1400
34908                                           ! 6553                        1280,
34909 8B0A                      0500            .word	$500
34910                                           ! 6554                        960,
34911 8B0C                      03C0            .word	$3C0
34912                                           ! 6555                      8,
34913 8B0E                        08            .byte	8
34914                                           ! 6556                      16,
34915 8B0F                        10            .byte	$10
34916                                           ! 6557                           1,
34917 8B10                        01            .byte	1
34918                                           ! 6558                         32,
34919 8B11                        20            .byte	$20
34920                                           ! 6559                          75,
34921 8B12                        4B            .byte	$4B
34922                                           ! 6560                        0x06,
34923 8B13                        06            .byte	6
34924                                           ! 6561                     0,
34925 8B14                        00            .byte	0
34926                                           ! 6562                               2,
34927 8B15                        02            .byte	2
34928                                           ! 6563                          0,
34929 8B16                        00            .byte	0
34930                                           ! 6564                        8,
34931 8B17                        08            .byte	8
34932                                           ! 6565                             16,
34933 8B18                        10            .byte	$10
34934                                           ! 6566                          8,
34935 8B19                        08            .byte	8
34936                                           ! 6567                               8,
34937 8B1A                        08            .byte	8
34938                                           ! 6568                         8,
34939 8B1B                        08            .byte	8
34940                                           ! 6569                              0,
34941 8B1C                        00            .byte	0
34942                                           ! 6570                         8,
34943 8B1D                        08            .byte	8
34944                                           ! 6571                              24,
34945 8B1E                        18            .byte	$18
34946                                           ! 6572                                0x02,
34947 8B1F                        02            .byte	2
34948                                           ! 6573                        0xE0000000,
34949 8B20                      0000            .word	0
34950 8B22                      E000            .word	$E000
34951                                           ! 6574                               0,
34952 8B24                      0000            .word	0
34953 8B26                      0000            .word	0
34954                                           ! 6575                             0,
34955 8B28                      0000            .word	0
34956                                           ! 6576                                5120,
34957 8B2A                      1400            .word	$1400
34958                                           ! 6577                             0,
34959 8B2C                        00            .byte	0
34960                                           ! 6578                             0,
34961 8B2D                        00            .byte	0
34962                                           ! 6579                           8,
34963 8B2E                        08            .byte	8
34964                                           ! 6580                                16,
34965 8B2F                        10            .byte	$10
34966                                           ! 6581                             8,
34967 8B30                        08            .byte	8
34968                                           ! 6582                                  8,
34969 8B31                        08            .byte	8
34970                                           ! 6583                            8,
34971 8B32                        08            .byte	8
34972                                           ! 6584                                 0,
34973 8B33                        00            .byte	0
34974                                           ! 6585                            8,
34975 8B34                        08            .byte	8
34976                                           ! 6586                                 24,
34977 8B35                        18            .byte	$18
34978                                           ! 6587                          0,
34979 8B36                      0000            .word	0
34980 8B38                      0000            .word	0
34981                                           ! 6588 } },
34982                                           ! 6589 { 0x017e,
34983 8B3A                      017E            .word	$17E
34984                                           ! 6590 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34985 8B3C                      009B            .word	$9B
34986                                           ! 6591                           0x01 | 0x02 | 0x04,
34987 8B3E                        07            .byte	7
34988                                           ! 6592                           0,
34989 8B3F                        00            .byte	0
34990                                           ! 6593                           64,
34991 8B40                      0040            .word	$40
34992                                           ! 6594                    64,
34993 8B42                      0040            .word	$40
34994                                           ! 6595                        0xA000,
34995 8B44                      A000            .word	$A000
34996                                           ! 6596                        0x0000,
34997 8B46                      0000            .word	0
34998                                           ! 6597                       0,
34999 8B48                      0000            .word	0
35000 8B4A                      0000            .word	0
35001                                           ! 6598                             2880,
35002 8B4C                      0B40            .word	$B40
35003                                           ! 6599                        1440,
35004 8B4E                      05A0            .word	$5A0
35005                                           ! 6600                        900,
35006 8B50                      0384            .word	$384
35007                                           ! 6601                      8,
35008 8B52                        08            .byte	8
35009                                           ! 6602                      16,
35010 8B53                        10            .byte	$10
35011                                           ! 6603                           1,
35012 8B54                        01            .byte	1
35013                                           ! 6604                         16,
35014 8B55                        10            .byte	$10
35015                                           ! 6605                          40,
35016 8B56                        28            .byte	$28
35017                                           ! 6606                        0x06,
35018 8B57                        06            .byte	6
35019                                           ! 6607                     0,
35020 8B58                        00            .byte	0
35021                                           ! 6608                               5,
35022 8B59                        05            .byte	5
35023                                           ! 6609                          0,
35024 8B5A                        00            .byte	0
35025                                           ! 6610                        5,
35026 8B5B                        05            .byte	5
35027                                           ! 6611                             11,
35028 8B5C                        0B            .byte	$B
35029                                           ! 6612           
35030                                           ! 6612                6,
35031 8B5D                        06            .byte	6
35032                                           ! 6613                               5,
35033 8B5E                        05            .byte	5
35034                                           ! 6614                         5,
35035 8B5F                        05            .byte	5
35036                                           ! 6615                              0,
35037 8B60                        00            .byte	0
35038                                           ! 6616                         0,
35039 8B61                        00            .byte	0
35040                                           ! 6617                              0,
35041 8B62                        00            .byte	0
35042                                           ! 6618                                0,
35043 8B63                        00            .byte	0
35044                                           ! 6619                        0xE0000000,
35045 8B64                      0000            .word	0
35046 8B66                      E000            .word	$E000
35047                                           ! 6620                               0,
35048 8B68                      0000            .word	0
35049 8B6A                      0000            .word	0
35050                                           ! 6621                             0,
35051 8B6C                      0000            .word	0
35052                                           ! 6622                                2880,
35053 8B6E                      0B40            .word	$B40
35054                                           ! 6623                             0,
35055 8B70                        00            .byte	0
35056                                           ! 6624                             0,
35057 8B71                        00            .byte	0
35058                                           ! 6625                           5,
35059 8B72                        05            .byte	5
35060                                           ! 6626                                11,
35061 8B73                        0B            .byte	$B
35062                                           ! 6627                             6,
35063 8B74                        06            .byte	6
35064                                           ! 6628                                  5,
35065 8B75                        05            .byte	5
35066                                           ! 6629                            5,
35067 8B76                        05            .byte	5
35068                                           ! 6630                                 0,
35069 8B77                        00            .byte	0
35070                                           ! 6631                            0,
35071 8B78                        00            .byte	0
35072                                           ! 6632                                 0,
35073 8B79                        00            .byte	0
35074                                           ! 6633                          0,
35075 8B7A                      0000            .word	0
35076 8B7C                      0000            .word	0
35077                                           ! 6634 } },
35078                                           ! 6635 { 0x017f,
35079 8B7E                      017F            .word	$17F
35080                                           ! 6636 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35081 8B80                      009B            .word	$9B
35082                                           ! 6637                           0x01 | 0x02 | 0x04,
35083 8B82                        07            .byte	7
35084                                           ! 6638                           0,
35085 8B83                        00            .byte	0
35086                                           ! 6639                           64,
35087 8B84                      0040            .word	$40
35088                                           ! 6640                    64,
35089 8B86                      0040            .word	$40
35090                                           ! 6641                        0xA000,
35091 8B88                      A000            .word	$A000
35092                                           ! 6642                        0x0000,
35093 8B8A                      0000            .word	0
35094                                           ! 6643                       0,
35095 8B8C                      0000            .word	0
35096 8B8E                      0000            .word	0
35097                                           ! 6644                             4320,
35098 8B90                      10E0            .word	$10E0
35099                                           ! 6645                        1440,
35100 8B92                      05A0            .word	$5A0
35101                                           ! 6646                        900,
35102 8B94                      0384            .word	$384
35103                                           ! 6647                      8,
35104 8B96                        08            .byte	8
35105                                           ! 6648                      16,
35106 8B97                        10            .byte	$10
35107                                           ! 6649                           1,
35108 8B98                        01            .byte	1
35109                                           ! 6650                         24,
35110 8B99                        18            .byte	$18
35111                                           ! 6651                          60,
35112 8B9A                        3C            .byte	$3C
35113                                           ! 6652                        0x06,
35114 8B9B                        06            .byte	6
35115                                           ! 6653                     0,
35116 8B9C                        00            .byte	0
35117                                           ! 6654                               3,
35118 8B9D                        03            .byte	3
35119                                           ! 6655                          0,
35120 8B9E                        00            .byte	0
35121                                           ! 6656                        8,
35122 8B9F                        08            .byte	8
35123                                           ! 6657                             16,
35124 8BA0                        10            .byte	$10
35125                                           ! 6658                          8,
35126 8BA1                        08            .byte	8
35127                                           ! 6659                               8,
35128 8BA2                        08            .byte	8
35129                                           ! 6660                         8,
35130 8BA3                        08            .byte	8
35131                                           ! 6661                              0,
35132 8BA4                        00            .byte	0
35133                                           ! 6662                         0,
35134 8BA5                        00            .byte	0
35135                                           ! 6663                              0,
35136 8BA6                        00            .byte	0
35137                                           ! 6664                                0,
35138 8BA7                        00            .byte	0
35139                                           ! 6665                        0xE0000000,
35140 8BA8                      0000            .word	0
35141 8BAA                      E000            .word	$E000
35142                                           ! 6666                               0,
35143 8BAC                      0000            .word	0
35144 8BAE                      0000            .word	0
35145                                           ! 6667                             0,
35146 8BB0                      0000            .word	0
35147                                           ! 6668                                4320,
35148 8BB2                      10E0            .word	$10E0
35149                                           ! 6669                             0,
35150 8BB4                        00            .byte	0
35151                                           ! 6670                             0,
35152 8BB5                        00            .byte	0
35153                                           ! 6671                           8,
35154 8BB6                        08            .byte	8
35155                                           ! 6672                                16,
35156 8BB7                        10            .byte	$10
35157                                           ! 6673                             8,
35158 8BB8                        08            .byte	8
35159                                           ! 6674                                  8,
35160 8BB9                        08            .byte	8
35161                                           ! 6675                            8,
35162 8BBA                        08            .byte	8
35163                                           ! 6676                                 0,
35164 8BBB                        00            .byte	0
35165                                           ! 6677                            0,
35166 8BBC                        00            .byte	0
35167                                           ! 6678                                 0,
35168 8BBD                        00            .byte	0
35169                                           ! 6679              
35170                                           ! 6679             0,
35171 8BBE                      0000            .word	0
35172 8BC0                      0000            .word	0
35173                                           ! 6680 } },
35174                                           ! 6681 { 0x0180,
35175 8BC2                      0180            .word	$180
35176                                           ! 6682 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35177 8BC4                      009B            .word	$9B
35178                                           ! 6683                           0x01 | 0x02 | 0x04,
35179 8BC6                        07            .byte	7
35180                                           ! 6684                           0,
35181 8BC7                        00            .byte	0
35182                                           ! 6685                           64,
35183 8BC8                      0040            .word	$40
35184                                           ! 6686                    64,
35185 8BCA                      0040            .word	$40
35186                                           ! 6687                        0xA000,
35187 8BCC                      A000            .word	$A000
35188                                           ! 6688                        0x0000,
35189 8BCE                      0000            .word	0
35190                                           ! 6689                       0,
35191 8BD0                      0000            .word	0
35192 8BD2                      0000            .word	0
35193                                           ! 6690                             5760,
35194 8BD4                      1680            .word	$1680
35195                                           ! 6691                        1440,
35196 8BD6                      05A0            .word	$5A0
35197                                           ! 6692                        900,
35198 8BD8                      0384            .word	$384
35199                                           ! 6693                      8,
35200 8BDA                        08            .byte	8
35201                                           ! 6694                      16,
35202 8BDB                        10            .byte	$10
35203                                           ! 6695                           1,
35204 8BDC                        01            .byte	1
35205                                           ! 6696                         32,
35206 8BDD                        20            .byte	$20
35207                                           ! 6697                          80,
35208 8BDE                        50            .byte	$50
35209                                           ! 6698                        0x06,
35210 8BDF                        06            .byte	6
35211                                           ! 6699                     0,
35212 8BE0                        00            .byte	0
35213                                           ! 6700                               2,
35214 8BE1                        02            .byte	2
35215                                           ! 6701                          0,
35216 8BE2                        00            .byte	0
35217                                           ! 6702                        8,
35218 8BE3                        08            .byte	8
35219                                           ! 6703                             16,
35220 8BE4                        10            .byte	$10
35221                                           ! 6704                          8,
35222 8BE5                        08            .byte	8
35223                                           ! 6705                               8,
35224 8BE6                        08            .byte	8
35225                                           ! 6706                         8,
35226 8BE7                        08            .byte	8
35227                                           ! 6707                              0,
35228 8BE8                        00            .byte	0
35229                                           ! 6708                         8,
35230 8BE9                        08            .byte	8
35231                                           ! 6709                              24,
35232 8BEA                        18            .byte	$18
35233                                           ! 6710                                0x02,
35234 8BEB                        02            .byte	2
35235                                           ! 6711                        0xE0000000,
35236 8BEC                      0000            .word	0
35237 8BEE                      E000            .word	$E000
35238                                           ! 6712                               0,
35239 8BF0                      0000            .word	0
35240 8BF2                      0000            .word	0
35241                                           ! 6713                             0,
35242 8BF4                      0000            .word	0
35243                                           ! 6714                                5760,
35244 8BF6                      1680            .word	$1680
35245                                           ! 6715                             0,
35246 8BF8                        00            .byte	0
35247                                           ! 6716                             0,
35248 8BF9                        00            .byte	0
35249                                           ! 6717                           8,
35250 8BFA                        08            .byte	8
35251                                           ! 6718                                16,
35252 8BFB                        10            .byte	$10
35253                                           ! 6719                             8,
35254 8BFC                        08            .byte	8
35255                                           ! 6720                                  8,
35256 8BFD                        08            .byte	8
35257                                           ! 6721                            8,
35258 8BFE                        08            .byte	8
35259                                           ! 6722                                 0,
35260 8BFF                        00            .byte	0
35261                                           ! 6723                            8,
35262 8C00                        08            .byte	8
35263                                           ! 6724                                 24,
35264 8C01                        18            .byte	$18
35265                                           ! 6725                          0,
35266 8C02                      0000            .word	0
35267 8C04                      0000            .word	0
35268                                           ! 6726 } },
35269                                           ! 6727 { 0x0181,
35270 8C06                      0181            .word	$181
35271                                           ! 6728 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35272 8C08                      009B            .word	$9B
35273                                           ! 6729                           0x01 | 0x02 | 0x04,
35274 8C0A                        07            .byte	7
35275                                           ! 6730                           0,
35276 8C0B                        00            .byte	0
35277                                           ! 6731                           64,
35278 8C0C                      0040            .word	$40
35279                                           ! 6732                    64,
35280 8C0E                      0040            .word	$40
35281                                           ! 6733                        0xA000,
35282 8C10                      A000            .word	$A000
35283                                           ! 6734                        0x0000,
35284 8C12                      0000            .word	0
35285                                           ! 6735                       0,
35286 8C14                      0000            .word	0
35287 8C16                      0000            .word	0
35288                                           ! 6736                             2800,
35289 8C18                      0AF0            .word	$AF0
35290                                           ! 6737                        1400,
35291 8C1A                      0578            .word	$578
35292                                           ! 6738                        1050,
35293 8C1C                      041A            .word	$41A
35294                                           ! 6739                      8,
35295 8C1E                        08            .byte	8
35296                                           ! 6740                      16,
35297 8C1F                        10            .byte	$10
35298                                           ! 6741                           1,
35299 8C20                        01            .byte	1
35300                                           ! 6742                         16,
35301 8C21                        10            .byte	$10
35302                                           ! 6743                          45,
35303 8C22                        2D            .byte	$2D
35304                                           ! 6744                        0x06,
35305 8C23                        06            .byte	6
35306                                           ! 6745                     0,
35307 8C24                        00            .byte	0
35308                                           ! 6746                               4,
35309 8C25                        04            .byte	4
35310                                           ! 6747                          0,
35311 8C26                        00            .byte	0
35312                                           ! 6748                        5,
35313 8C27                        05            .byte	5
35314                                           ! 6749              
35315                                           ! 6749                11,
35316 8C28                        0B            .byte	$B
35317                                           ! 6750                          6,
35318 8C29                        06            .byte	6
35319                                           ! 6751                               5,
35320 8C2A                        05            .byte	5
35321                                           ! 6752                         5,
35322 8C2B                        05            .byte	5
35323                                           ! 6753                              0,
35324 8C2C                        00            .byte	0
35325                                           ! 6754                         0,
35326 8C2D                        00            .byte	0
35327                                           ! 6755                              0,
35328 8C2E                        00            .byte	0
35329                                           ! 6756                                0,
35330 8C2F                        00            .byte	0
35331                                           ! 6757                        0xE0000000,
35332 8C30                      0000            .word	0
35333 8C32                      E000            .word	$E000
35334                                           ! 6758                               0,
35335 8C34                      0000            .word	0
35336 8C36                      0000            .word	0
35337                                           ! 6759                             0,
35338 8C38                      0000            .word	0
35339                                           ! 6760                                2800,
35340 8C3A                      0AF0            .word	$AF0
35341                                           ! 6761                             0,
35342 8C3C                        00            .byte	0
35343                                           ! 6762                             0,
35344 8C3D                        00            .byte	0
35345                                           ! 6763                           5,
35346 8C3E                        05            .byte	5
35347                                           ! 6764                                11,
35348 8C3F                        0B            .byte	$B
35349                                           ! 6765                             6,
35350 8C40                        06            .byte	6
35351                                           ! 6766                                  5,
35352 8C41                        05            .byte	5
35353                                           ! 6767                            5,
35354 8C42                        05            .byte	5
35355                                           ! 6768                                 0,
35356 8C43                        00            .byte	0
35357                                           ! 6769                            0,
35358 8C44                        00            .byte	0
35359                                           ! 6770                                 0,
35360 8C45                        00            .byte	0
35361                                           ! 6771                          0,
35362 8C46                      0000            .word	0
35363 8C48                      0000            .word	0
35364                                           ! 6772 } },
35365                                           ! 6773 { 0x0182,
35366 8C4A                      0182            .word	$182
35367                                           ! 6774 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35368 8C4C                      009B            .word	$9B
35369                                           ! 6775                           0x01 | 0x02 | 0x04,
35370 8C4E                        07            .byte	7
35371                                           ! 6776                           0,
35372 8C4F                        00            .byte	0
35373                                           ! 6777                           64,
35374 8C50                      0040            .word	$40
35375                                           ! 6778                    64,
35376 8C52                      0040            .word	$40
35377                                           ! 6779                        0xA000,
35378 8C54                      A000            .word	$A000
35379                                           ! 6780                        0x0000,
35380 8C56                      0000            .word	0
35381                                           ! 6781                       0,
35382 8C58                      0000            .word	0
35383 8C5A                      0000            .word	0
35384                                           ! 6782                             4200,
35385 8C5C                      1068            .word	$1068
35386                                           ! 6783                        1400,
35387 8C5E                      0578            .word	$578
35388                                           ! 6784                        1050,
35389 8C60                      041A            .word	$41A
35390                                           ! 6785                      8,
35391 8C62                        08            .byte	8
35392                                           ! 6786                      16,
35393 8C63                        10            .byte	$10
35394                                           ! 6787                           1,
35395 8C64                        01            .byte	1
35396                                           ! 6788                         24,
35397 8C65                        18            .byte	$18
35398                                           ! 6789                          68,
35399 8C66                        44            .byte	$44
35400                                           ! 6790                        0x06,
35401 8C67                        06            .byte	6
35402                                           ! 6791                     0,
35403 8C68                        00            .byte	0
35404                                           ! 6792                               2,
35405 8C69                        02            .byte	2
35406                                           ! 6793                          0,
35407 8C6A                        00            .byte	0
35408                                           ! 6794                        8,
35409 8C6B                        08            .byte	8
35410                                           ! 6795                             16,
35411 8C6C                        10            .byte	$10
35412                                           ! 6796                          8,
35413 8C6D                        08            .byte	8
35414                                           ! 6797                               8,
35415 8C6E                        08            .byte	8
35416                                           ! 6798                         8,
35417 8C6F                        08            .byte	8
35418                                           ! 6799                              0,
35419 8C70                        00            .byte	0
35420                                           ! 6800                         0,
35421 8C71                        00            .byte	0
35422                                           ! 6801                              0,
35423 8C72                        00            .byte	0
35424                                           ! 6802                                0,
35425 8C73                        00            .byte	0
35426                                           ! 6803                        0xE0000000,
35427 8C74                      0000            .word	0
35428 8C76                      E000            .word	$E000
35429                                           ! 6804                               0,
35430 8C78                      0000            .word	0
35431 8C7A                      0000            .word	0
35432                                           ! 6805                             0,
35433 8C7C                      0000            .word	0
35434                                           ! 6806                                4200,
35435 8C7E                      1068            .word	$1068
35436                                           ! 6807                             0,
35437 8C80                        00            .byte	0
35438                                           ! 6808                             0,
35439 8C81                        00            .byte	0
35440                                           ! 6809                           8,
35441 8C82                        08            .byte	8
35442                                           ! 6810                                16,
35443 8C83                        10            .byte	$10
35444                                           ! 6811                             8,
35445 8C84                        08            .byte	8
35446                                           ! 6812                                  8,
35447 8C85                        08            .byte	8
35448                                           ! 6813                            8,
35449 8C86                        08            .byte	8
35450                                           ! 6814                                 0,
35451 8C87                        00            .byte	0
35452                                           ! 6815                            0,
35453 8C88                        00            .byte	0
35454                                           ! 6816                   
35455                                           ! 6816               0,
35456 8C89                        00            .byte	0
35457                                           ! 6817                          0,
35458 8C8A                      0000            .word	0
35459 8C8C                      0000            .word	0
35460                                           ! 6818 } },
35461                                           ! 6819 { 0x0183,
35462 8C8E                      0183            .word	$183
35463                                           ! 6820 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35464 8C90                      009B            .word	$9B
35465                                           ! 6821                           0x01 | 0x02 | 0x04,
35466 8C92                        07            .byte	7
35467                                           ! 6822                           0,
35468 8C93                        00            .byte	0
35469                                           ! 6823                           64,
35470 8C94                      0040            .word	$40
35471                                           ! 6824                    64,
35472 8C96                      0040            .word	$40
35473                                           ! 6825                        0xA000,
35474 8C98                      A000            .word	$A000
35475                                           ! 6826                        0x0000,
35476 8C9A                      0000            .word	0
35477                                           ! 6827                       0,
35478 8C9C                      0000            .word	0
35479 8C9E                      0000            .word	0
35480                                           ! 6828                             5600,
35481 8CA0                      15E0            .word	$15E0
35482                                           ! 6829                        1400,
35483 8CA2                      0578            .word	$578
35484                                           ! 6830                        1050,
35485 8CA4                      041A            .word	$41A
35486                                           ! 6831                      8,
35487 8CA6                        08            .byte	8
35488                                           ! 6832                      16,
35489 8CA7                        10            .byte	$10
35490                                           ! 6833                           1,
35491 8CA8                        01            .byte	1
35492                                           ! 6834                         32,
35493 8CA9                        20            .byte	$20
35494                                           ! 6835                          90,
35495 8CAA                        5A            .byte	$5A
35496                                           ! 6836                        0x06,
35497 8CAB                        06            .byte	6
35498                                           ! 6837                     0,
35499 8CAC                        00            .byte	0
35500                                           ! 6838                               1,
35501 8CAD                        01            .byte	1
35502                                           ! 6839                          0,
35503 8CAE                        00            .byte	0
35504                                           ! 6840                        8,
35505 8CAF                        08            .byte	8
35506                                           ! 6841                             16,
35507 8CB0                        10            .byte	$10
35508                                           ! 6842                          8,
35509 8CB1                        08            .byte	8
35510                                           ! 6843                               8,
35511 8CB2                        08            .byte	8
35512                                           ! 6844                         8,
35513 8CB3                        08            .byte	8
35514                                           ! 6845                              0,
35515 8CB4                        00            .byte	0
35516                                           ! 6846                         8,
35517 8CB5                        08            .byte	8
35518                                           ! 6847                              24,
35519 8CB6                        18            .byte	$18
35520                                           ! 6848                                0x02,
35521 8CB7                        02            .byte	2
35522                                           ! 6849                        0xE0000000,
35523 8CB8                      0000            .word	0
35524 8CBA                      E000            .word	$E000
35525                                           ! 6850                               0,
35526 8CBC                      0000            .word	0
35527 8CBE                      0000            .word	0
35528                                           ! 6851                             0,
35529 8CC0                      0000            .word	0
35530                                           ! 6852                                5600,
35531 8CC2                      15E0            .word	$15E0
35532                                           ! 6853                             0,
35533 8CC4                        00            .byte	0
35534                                           ! 6854                             0,
35535 8CC5                        00            .byte	0
35536                                           ! 6855                           8,
35537 8CC6                        08            .byte	8
35538                                           ! 6856                                16,
35539 8CC7                        10            .byte	$10
35540                                           ! 6857                             8,
35541 8CC8                        08            .byte	8
35542                                           ! 6858                                  8,
35543 8CC9                        08            .byte	8
35544                                           ! 6859                            8,
35545 8CCA                        08            .byte	8
35546                                           ! 6860                                 0,
35547 8CCB                        00            .byte	0
35548                                           ! 6861                            8,
35549 8CCC                        08            .byte	8
35550                                           ! 6862                                 24,
35551 8CCD                        18            .byte	$18
35552                                           ! 6863                          0,
35553 8CCE                      0000            .word	0
35554 8CD0                      0000            .word	0
35555                                           ! 6864 } },
35556                                           ! 6865 { 0x0184,
35557 8CD2                      0184            .word	$184
35558                                           ! 6866 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35559 8CD4                      009B            .word	$9B
35560                                           ! 6867                           0x01 | 0x02 | 0x04,
35561 8CD6                        07            .byte	7
35562                                           ! 6868                           0,
35563 8CD7                        00            .byte	0
35564                                           ! 6869                           64,
35565 8CD8                      0040            .word	$40
35566                                           ! 6870                    64,
35567 8CDA                      0040            .word	$40
35568                                           ! 6871                        0xA000,
35569 8CDC                      A000            .word	$A000
35570                                           ! 6872                        0x0000,
35571 8CDE                      0000            .word	0
35572                                           ! 6873                       0,
35573 8CE0                      0000            .word	0
35574 8CE2                      0000            .word	0
35575                                           ! 6874                             3360,
35576 8CE4                      0D20            .word	$D20
35577                                           ! 6875                        1680,
35578 8CE6                      0690            .word	$690
35579                                           ! 6876                        1050,
35580 8CE8                      041A            .word	$41A
35581                                           ! 6877                      8,
35582 8CEA                        08            .byte	8
35583                                           ! 6878                      16,
35584 8CEB                        10            .byte	$10
35585                                           ! 6879                           1,
35586 8CEC                        01            .byte	1
35587                                           ! 6880                         16,
35588 8CED                        10            .byte	$10
35589                                           ! 6881                          54,
35590 8CEE                        36            .byte	$36
35591                                           ! 6882                        0x06,
35592 8CEF                        06            .byte	6
35593                                           ! 6883                     0,
35594 8CF0                        00            .byte	0
35595                                           ! 6884                               3,
35596 8CF1                        03            .byte	3
35597                                           ! 6885                          0,
35598 8CF2                        00            .byte	0
35599                                           ! 6886         
35600                                           ! 6886                5,
35601 8CF3                        05            .byte	5
35602                                           ! 6887                             11,
35603 8CF4                        0B            .byte	$B
35604                                           ! 6888                          6,
35605 8CF5                        06            .byte	6
35606                                           ! 6889                               5,
35607 8CF6                        05            .byte	5
35608                                           ! 6890                         5,
35609 8CF7                        05            .byte	5
35610                                           ! 6891                              0,
35611 8CF8                        00            .byte	0
35612                                           ! 6892                         0,
35613 8CF9                        00            .byte	0
35614                                           ! 6893                              0,
35615 8CFA                        00            .byte	0
35616                                           ! 6894                                0,
35617 8CFB                        00            .byte	0
35618                                           ! 6895                        0xE0000000,
35619 8CFC                      0000            .word	0
35620 8CFE                      E000            .word	$E000
35621                                           ! 6896                               0,
35622 8D00                      0000            .word	0
35623 8D02                      0000            .word	0
35624                                           ! 6897                             0,
35625 8D04                      0000            .word	0
35626                                           ! 6898                                3360,
35627 8D06                      0D20            .word	$D20
35628                                           ! 6899                             0,
35629 8D08                        00            .byte	0
35630                                           ! 6900                             0,
35631 8D09                        00            .byte	0
35632                                           ! 6901                           5,
35633 8D0A                        05            .byte	5
35634                                           ! 6902                                11,
35635 8D0B                        0B            .byte	$B
35636                                           ! 6903                             6,
35637 8D0C                        06            .byte	6
35638                                           ! 6904                                  5,
35639 8D0D                        05            .byte	5
35640                                           ! 6905                            5,
35641 8D0E                        05            .byte	5
35642                                           ! 6906                                 0,
35643 8D0F                        00            .byte	0
35644                                           ! 6907                            0,
35645 8D10                        00            .byte	0
35646                                           ! 6908                                 0,
35647 8D11                        00            .byte	0
35648                                           ! 6909                          0,
35649 8D12                      0000            .word	0
35650 8D14                      0000            .word	0
35651                                           ! 6910 } },
35652                                           ! 6911 { 0x0185,
35653 8D16                      0185            .word	$185
35654                                           ! 6912 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35655 8D18                      009B            .word	$9B
35656                                           ! 6913                           0x01 | 0x02 | 0x04,
35657 8D1A                        07            .byte	7
35658                                           ! 6914                           0,
35659 8D1B                        00            .byte	0
35660                                           ! 6915                           64,
35661 8D1C                      0040            .word	$40
35662                                           ! 6916                    64,
35663 8D1E                      0040            .word	$40
35664                                           ! 6917                        0xA000,
35665 8D20                      A000            .word	$A000
35666                                           ! 6918                        0x0000,
35667 8D22                      0000            .word	0
35668                                           ! 6919                       0,
35669 8D24                      0000            .word	0
35670 8D26                      0000            .word	0
35671                                           ! 6920                             5040,
35672 8D28                      13B0            .word	$13B0
35673                                           ! 6921                        1680,
35674 8D2A                      0690            .word	$690
35675                                           ! 6922                        1050,
35676 8D2C                      041A            .word	$41A
35677                                           ! 6923                      8,
35678 8D2E                        08            .byte	8
35679                                           ! 6924                      16,
35680 8D2F                        10            .byte	$10
35681                                           ! 6925                           1,
35682 8D30                        01            .byte	1
35683                                           ! 6926                         24,
35684 8D31                        18            .byte	$18
35685                                           ! 6927                          81,
35686 8D32                        51            .byte	$51
35687                                           ! 6928                        0x06,
35688 8D33                        06            .byte	6
35689                                           ! 6929                     0,
35690 8D34                        00            .byte	0
35691                                           ! 6930                               2,
35692 8D35                        02            .byte	2
35693                                           ! 6931                          0,
35694 8D36                        00            .byte	0
35695                                           ! 6932                        8,
35696 8D37                        08            .byte	8
35697                                           ! 6933                             16,
35698 8D38                        10            .byte	$10
35699                                           ! 6934                          8,
35700 8D39                        08            .byte	8
35701                                           ! 6935                               8,
35702 8D3A                        08            .byte	8
35703                                           ! 6936                         8,
35704 8D3B                        08            .byte	8
35705                                           ! 6937                              0,
35706 8D3C                        00            .byte	0
35707                                           ! 6938                         0,
35708 8D3D                        00            .byte	0
35709                                           ! 6939                              0,
35710 8D3E                        00            .byte	0
35711                                           ! 6940                                0,
35712 8D3F                        00            .byte	0
35713                                           ! 6941                        0xE0000000,
35714 8D40                      0000            .word	0
35715 8D42                      E000            .word	$E000
35716                                           ! 6942                               0,
35717 8D44                      0000            .word	0
35718 8D46                      0000            .word	0
35719                                           ! 6943                             0,
35720 8D48                      0000            .word	0
35721                                           ! 6944                                5040,
35722 8D4A                      13B0            .word	$13B0
35723                                           ! 6945                             0,
35724 8D4C                        00            .byte	0
35725                                           ! 6946                             0,
35726 8D4D                        00            .byte	0
35727                                           ! 6947                           8,
35728 8D4E                        08            .byte	8
35729                                           ! 6948                                16,
35730 8D4F                        10            .byte	$10
35731                                           ! 6949                             8,
35732 8D50                        08            .byte	8
35733                                           ! 6950                                  8,
35734 8D51                        08            .byte	8
35735                                           ! 6951                            8,
35736 8D52                        08            .byte	8
35737                                           ! 6952                                 0,
35738 8D53                        00            .byte	0
35739                                           ! 6953                  
35740                                           ! 6953           0,
35741 8D54                        00            .byte	0
35742                                           ! 6954                                 0,
35743 8D55                        00            .byte	0
35744                                           ! 6955                          0,
35745 8D56                      0000            .word	0
35746 8D58                      0000            .word	0
35747                                           ! 6956 } },
35748                                           ! 6957 { 0x0186,
35749 8D5A                      0186            .word	$186
35750                                           ! 6958 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35751 8D5C                      009B            .word	$9B
35752                                           ! 6959                           0x01 | 0x02 | 0x04,
35753 8D5E                        07            .byte	7
35754                                           ! 6960                           0,
35755 8D5F                        00            .byte	0
35756                                           ! 6961                           64,
35757 8D60                      0040            .word	$40
35758                                           ! 6962                    64,
35759 8D62                      0040            .word	$40
35760                                           ! 6963                        0xA000,
35761 8D64                      A000            .word	$A000
35762                                           ! 6964                        0x0000,
35763 8D66                      0000            .word	0
35764                                           ! 6965                       0,
35765 8D68                      0000            .word	0
35766 8D6A                      0000            .word	0
35767                                           ! 6966                             6720,
35768 8D6C                      1A40            .word	$1A40
35769                                           ! 6967                        1680,
35770 8D6E                      0690            .word	$690
35771                                           ! 6968                        1050,
35772 8D70                      041A            .word	$41A
35773                                           ! 6969                      8,
35774 8D72                        08            .byte	8
35775                                           ! 6970                      16,
35776 8D73                        10            .byte	$10
35777                                           ! 6971                           1,
35778 8D74                        01            .byte	1
35779                                           ! 6972                         32,
35780 8D75                        20            .byte	$20
35781                                           ! 6973                          108,
35782 8D76                        6C            .byte	$6C
35783                                           ! 6974                        0x06,
35784 8D77                        06            .byte	6
35785                                           ! 6975                     0,
35786 8D78                        00            .byte	0
35787                                           ! 6976                               1,
35788 8D79                        01            .byte	1
35789                                           ! 6977                          0,
35790 8D7A                        00            .byte	0
35791                                           ! 6978                        8,
35792 8D7B                        08            .byte	8
35793                                           ! 6979                             16,
35794 8D7C                        10            .byte	$10
35795                                           ! 6980                          8,
35796 8D7D                        08            .byte	8
35797                                           ! 6981                               8,
35798 8D7E                        08            .byte	8
35799                                           ! 6982                         8,
35800 8D7F                        08            .byte	8
35801                                           ! 6983                              0,
35802 8D80                        00            .byte	0
35803                                           ! 6984                         8,
35804 8D81                        08            .byte	8
35805                                           ! 6985                              24,
35806 8D82                        18            .byte	$18
35807                                           ! 6986                                0x02,
35808 8D83                        02            .byte	2
35809                                           ! 6987                        0xE0000000,
35810 8D84                      0000            .word	0
35811 8D86                      E000            .word	$E000
35812                                           ! 6988                               0,
35813 8D88                      0000            .word	0
35814 8D8A                      0000            .word	0
35815                                           ! 6989                             0,
35816 8D8C                      0000            .word	0
35817                                           ! 6990                                6720,
35818 8D8E                      1A40            .word	$1A40
35819                                           ! 6991                             0,
35820 8D90                        00            .byte	0
35821                                           ! 6992                             0,
35822 8D91                        00            .byte	0
35823                                           ! 6993                           8,
35824 8D92                        08            .byte	8
35825                                           ! 6994                                16,
35826 8D93                        10            .byte	$10
35827                                           ! 6995                             8,
35828 8D94                        08            .byte	8
35829                                           ! 6996                                  8,
35830 8D95                        08            .byte	8
35831                                           ! 6997                            8,
35832 8D96                        08            .byte	8
35833                                           ! 6998                                 0,
35834 8D97                        00            .byte	0
35835                                           ! 6999                            8,
35836 8D98                        08            .byte	8
35837                                           ! 7000                                 24,
35838 8D99                        18            .byte	$18
35839                                           ! 7001                          0,
35840 8D9A                      0000            .word	0
35841 8D9C                      0000            .word	0
35842                                           ! 7002 } },
35843                                           ! 7003 { 0x0187,
35844 8D9E                      0187            .word	$187
35845                                           ! 7004 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35846 8DA0                      009B            .word	$9B
35847                                           ! 7005                           0x01 | 0x02 | 0x04,
35848 8DA2                        07            .byte	7
35849                                           ! 7006                           0,
35850 8DA3                        00            .byte	0
35851                                           ! 7007                           64,
35852 8DA4                      0040            .word	$40
35853                                           ! 7008                    64,
35854 8DA6                      0040            .word	$40
35855                                           ! 7009                        0xA000,
35856 8DA8                      A000            .word	$A000
35857                                           ! 7010                        0x0000,
35858 8DAA                      0000            .word	0
35859                                           ! 7011                       0,
35860 8DAC                      0000            .word	0
35861 8DAE                      0000            .word	0
35862                                           ! 7012                             3840,
35863 8DB0                      0F00            .word	$F00
35864                                           ! 7013                        1920,
35865 8DB2                      0780            .word	$780
35866                                           ! 7014                        1200,
35867 8DB4                      04B0            .word	$4B0
35868                                           ! 7015                      8,
35869 8DB6                        08            .byte	8
35870                                           ! 7016                      16,
35871 8DB7                        10            .byte	$10
35872                                           ! 7017                           1,
35873 8DB8                        01            .byte	1
35874                                           ! 7018                         16,
35875 8DB9                        10            .byte	$10
35876                                           ! 7019                          71,
35877 8DBA                        47            .byte	$47
35878                                           ! 7020                        0x06,
35879 8DBB                        06            .byte	6
35880                                           ! 7021                     0,
35881 8DBC                        00            .byte	0
35882                                           ! 7022                               2,
35883 8DBD                        02            .byte	2
35884                                           ! 7023     
35885                                           ! 7023                      0,
35886 8DBE                        00            .byte	0
35887                                           ! 7024                        5,
35888 8DBF                        05            .byte	5
35889                                           ! 7025                             11,
35890 8DC0                        0B            .byte	$B
35891                                           ! 7026                          6,
35892 8DC1                        06            .byte	6
35893                                           ! 7027                               5,
35894 8DC2                        05            .byte	5
35895                                           ! 7028                         5,
35896 8DC3                        05            .byte	5
35897                                           ! 7029                              0,
35898 8DC4                        00            .byte	0
35899                                           ! 7030                         0,
35900 8DC5                        00            .byte	0
35901                                           ! 7031                              0,
35902 8DC6                        00            .byte	0
35903                                           ! 7032                                0,
35904 8DC7                        00            .byte	0
35905                                           ! 7033                        0xE0000000,
35906 8DC8                      0000            .word	0
35907 8DCA                      E000            .word	$E000
35908                                           ! 7034                               0,
35909 8DCC                      0000            .word	0
35910 8DCE                      0000            .word	0
35911                                           ! 7035                             0,
35912 8DD0                      0000            .word	0
35913                                           ! 7036                                3840,
35914 8DD2                      0F00            .word	$F00
35915                                           ! 7037                             0,
35916 8DD4                        00            .byte	0
35917                                           ! 7038                             0,
35918 8DD5                        00            .byte	0
35919                                           ! 7039                           5,
35920 8DD6                        05            .byte	5
35921                                           ! 7040                                11,
35922 8DD7                        0B            .byte	$B
35923                                           ! 7041                             6,
35924 8DD8                        06            .byte	6
35925                                           ! 7042                                  5,
35926 8DD9                        05            .byte	5
35927                                           ! 7043                            5,
35928 8DDA                        05            .byte	5
35929                                           ! 7044                                 0,
35930 8DDB                        00            .byte	0
35931                                           ! 7045                            0,
35932 8DDC                        00            .byte	0
35933                                           ! 7046                                 0,
35934 8DDD                        00            .byte	0
35935                                           ! 7047                          0,
35936 8DDE                      0000            .word	0
35937 8DE0                      0000            .word	0
35938                                           ! 7048 } },
35939                                           ! 7049 { 0x0188,
35940 8DE2                      0188            .word	$188
35941                                           ! 7050 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35942 8DE4                      009B            .word	$9B
35943                                           ! 7051                           0x01 | 0x02 | 0x04,
35944 8DE6                        07            .byte	7
35945                                           ! 7052                           0,
35946 8DE7                        00            .byte	0
35947                                           ! 7053                           64,
35948 8DE8                      0040            .word	$40
35949                                           ! 7054                    64,
35950 8DEA                      0040            .word	$40
35951                                           ! 7055                        0xA000,
35952 8DEC                      A000            .word	$A000
35953                                           ! 7056                        0x0000,
35954 8DEE                      0000            .word	0
35955                                           ! 7057                       0,
35956 8DF0                      0000            .word	0
35957 8DF2                      0000            .word	0
35958                                           ! 7058                             5760,
35959 8DF4                      1680            .word	$1680
35960                                           ! 7059                        1920,
35961 8DF6                      0780            .word	$780
35962                                           ! 7060                        1200,
35963 8DF8                      04B0            .word	$4B0
35964                                           ! 7061                      8,
35965 8DFA                        08            .byte	8
35966                                           ! 7062                      16,
35967 8DFB                        10            .byte	$10
35968                                           ! 7063                           1,
35969 8DFC                        01            .byte	1
35970                                           ! 7064                         24,
35971 8DFD                        18            .byte	$18
35972                                           ! 7065                          106,
35973 8DFE                        6A            .byte	$6A
35974                                           ! 7066                        0x06,
35975 8DFF                        06            .byte	6
35976                                           ! 7067                     0,
35977 8E00                        00            .byte	0
35978                                           ! 7068                               1,
35979 8E01                        01            .byte	1
35980                                           ! 7069                          0,
35981 8E02                        00            .byte	0
35982                                           ! 7070                        8,
35983 8E03                        08            .byte	8
35984                                           ! 7071                             16,
35985 8E04                        10            .byte	$10
35986                                           ! 7072                          8,
35987 8E05                        08            .byte	8
35988                                           ! 7073                               8,
35989 8E06                        08            .byte	8
35990                                           ! 7074                         8,
35991 8E07                        08            .byte	8
35992                                           ! 7075                              0,
35993 8E08                        00            .byte	0
35994                                           ! 7076                         0,
35995 8E09                        00            .byte	0
35996                                           ! 7077                              0,
35997 8E0A                        00            .byte	0
35998                                           ! 7078                                0,
35999 8E0B                        00            .byte	0
36000                                           ! 7079                        0xE0000000,
36001 8E0C                      0000            .word	0
36002 8E0E                      E000            .word	$E000
36003                                           ! 7080                               0,
36004 8E10                      0000            .word	0
36005 8E12                      0000            .word	0
36006                                           ! 7081                             0,
36007 8E14                      0000            .word	0
36008                                           ! 7082                                5760,
36009 8E16                      1680            .word	$1680
36010                                           ! 7083                             0,
36011 8E18                        00            .byte	0
36012                                           ! 7084                             0,
36013 8E19                        00            .byte	0
36014                                           ! 7085                           8,
36015 8E1A                        08            .byte	8
36016                                           ! 7086                                16,
36017 8E1B                        10            .byte	$10
36018                                           ! 7087                             8,
36019 8E1C                        08            .byte	8
36020                                           ! 7088                                  8,
36021 8E1D                        08            .byte	8
36022                                           ! 7089                            8,
36023 8E1E                        08            .byte	8
36024                                           ! 7090                    
36025                                           ! 7090              0,
36026 8E1F                        00            .byte	0
36027                                           ! 7091                            0,
36028 8E20                        00            .byte	0
36029                                           ! 7092                                 0,
36030 8E21                        00            .byte	0
36031                                           ! 7093                          0,
36032 8E22                      0000            .word	0
36033 8E24                      0000            .word	0
36034                                           ! 7094 } },
36035                                           ! 7095 { 0x0189,
36036 8E26                      0189            .word	$189
36037                                           ! 7096 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36038 8E28                      009B            .word	$9B
36039                                           ! 7097                           0x01 | 0x02 | 0x04,
36040 8E2A                        07            .byte	7
36041                                           ! 7098                           0,
36042 8E2B                        00            .byte	0
36043                                           ! 7099                           64,
36044 8E2C                      0040            .word	$40
36045                                           ! 7100                    64,
36046 8E2E                      0040            .word	$40
36047                                           ! 7101                        0xA000,
36048 8E30                      A000            .word	$A000
36049                                           ! 7102                        0x0000,
36050 8E32                      0000            .word	0
36051                                           ! 7103                       0,
36052 8E34                      0000            .word	0
36053 8E36                      0000            .word	0
36054                                           ! 7104                             7680,
36055 8E38                      1E00            .word	$1E00
36056                                           ! 7105                        1920,
36057 8E3A                      0780            .word	$780
36058                                           ! 7106                        1200,
36059 8E3C                      04B0            .word	$4B0
36060                                           ! 7107                      8,
36061 8E3E                        08            .byte	8
36062                                           ! 7108                      16,
36063 8E3F                        10            .byte	$10
36064                                           ! 7109                           1,
36065 8E40                        01            .byte	1
36066                                           ! 7110                         32,
36067 8E41                        20            .byte	$20
36068                                           ! 7111                          141,
36069 8E42                        8D            .byte	$8D
36070                                           ! 7112                        0x06,
36071 8E43                        06            .byte	6
36072                                           ! 7113                     0,
36073 8E44                        00            .byte	0
36074                                           ! 7114                               0,
36075 8E45                        00            .byte	0
36076                                           ! 7115                          0,
36077 8E46                        00            .byte	0
36078                                           ! 7116                        8,
36079 8E47                        08            .byte	8
36080                                           ! 7117                             16,
36081 8E48                        10            .byte	$10
36082                                           ! 7118                          8,
36083 8E49                        08            .byte	8
36084                                           ! 7119                               8,
36085 8E4A                        08            .byte	8
36086                                           ! 7120                         8,
36087 8E4B                        08            .byte	8
36088                                           ! 7121                              0,
36089 8E4C                        00            .byte	0
36090                                           ! 7122                         8,
36091 8E4D                        08            .byte	8
36092                                           ! 7123                              24,
36093 8E4E                        18            .byte	$18
36094                                           ! 7124                                0x02,
36095 8E4F                        02            .byte	2
36096                                           ! 7125                        0xE0000000,
36097 8E50                      0000            .word	0
36098 8E52                      E000            .word	$E000
36099                                           ! 7126                               0,
36100 8E54                      0000            .word	0
36101 8E56                      0000            .word	0
36102                                           ! 7127                             0,
36103 8E58                      0000            .word	0
36104                                           ! 7128                                7680,
36105 8E5A                      1E00            .word	$1E00
36106                                           ! 7129                             0,
36107 8E5C                        00            .byte	0
36108                                           ! 7130                             0,
36109 8E5D                        00            .byte	0
36110                                           ! 7131                           8,
36111 8E5E                        08            .byte	8
36112                                           ! 7132                                16,
36113 8E5F                        10            .byte	$10
36114                                           ! 7133                             8,
36115 8E60                        08            .byte	8
36116                                           ! 7134                                  8,
36117 8E61                        08            .byte	8
36118                                           ! 7135                            8,
36119 8E62                        08            .byte	8
36120                                           ! 7136                                 0,
36121 8E63                        00            .byte	0
36122                                           ! 7137                            8,
36123 8E64                        08            .byte	8
36124                                           ! 7138                                 24,
36125 8E65                        18            .byte	$18
36126                                           ! 7139                          0,
36127 8E66                      0000            .word	0
36128 8E68                      0000            .word	0
36129                                           ! 7140 } },
36130                                           ! 7141 { 0x018a,
36131 8E6A                      018A            .word	$18A
36132                                           ! 7142 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36133 8E6C                      009B            .word	$9B
36134                                           ! 7143                           0x01 | 0x02 | 0x04,
36135 8E6E                        07            .byte	7
36136                                           ! 7144                           0,
36137 8E6F                        00            .byte	0
36138                                           ! 7145                           64,
36139 8E70                      0040            .word	$40
36140                                           ! 7146                    64,
36141 8E72                      0040            .word	$40
36142                                           ! 7147                        0xA000,
36143 8E74                      A000            .word	$A000
36144                                           ! 7148                        0x0000,
36145 8E76                      0000            .word	0
36146                                           ! 7149                       0,
36147 8E78                      0000            .word	0
36148 8E7A                      0000            .word	0
36149                                           ! 7150                             5120,
36150 8E7C                      1400            .word	$1400
36151                                           ! 7151                        2560,
36152 8E7E                      0A00            .word	$A00
36153                                           ! 7152                        1600,
36154 8E80                      0640            .word	$640
36155                                           ! 7153                      8,
36156 8E82                        08            .byte	8
36157                                           ! 7154                      16,
36158 8E83                        10            .byte	$10
36159                                           ! 7155                           1,
36160 8E84                        01            .byte	1
36161                                           ! 7156                         16,
36162 8E85                        10            .byte	$10
36163                                           ! 7157                          125,
36164 8E86                        7D            .byte	$7D
36165                                           ! 7158                        0x06,
36166 8E87                        06            .byte	6
36167                                           ! 7159                     0,
36168 8E88                        00            .byte	0
36169                                           ! 7160    
36170                                           ! 7160                            1,
36171 8E89                        01            .byte	1
36172                                           ! 7161                          0,
36173 8E8A                        00            .byte	0
36174                                           ! 7162                        5,
36175 8E8B                        05            .byte	5
36176                                           ! 7163                             11,
36177 8E8C                        0B            .byte	$B
36178                                           ! 7164                          6,
36179 8E8D                        06            .byte	6
36180                                           ! 7165                               5,
36181 8E8E                        05            .byte	5
36182                                           ! 7166                         5,
36183 8E8F                        05            .byte	5
36184                                           ! 7167                              0,
36185 8E90                        00            .byte	0
36186                                           ! 7168                         0,
36187 8E91                        00            .byte	0
36188                                           ! 7169                              0,
36189 8E92                        00            .byte	0
36190                                           ! 7170                                0,
36191 8E93                        00            .byte	0
36192                                           ! 7171                        0xE0000000,
36193 8E94                      0000            .word	0
36194 8E96                      E000            .word	$E000
36195                                           ! 7172                               0,
36196 8E98                      0000            .word	0
36197 8E9A                      0000            .word	0
36198                                           ! 7173                             0,
36199 8E9C                      0000            .word	0
36200                                           ! 7174                                5120,
36201 8E9E                      1400            .word	$1400
36202                                           ! 7175                             0,
36203 8EA0                        00            .byte	0
36204                                           ! 7176                             0,
36205 8EA1                        00            .byte	0
36206                                           ! 7177                           5,
36207 8EA2                        05            .byte	5
36208                                           ! 7178                                11,
36209 8EA3                        0B            .byte	$B
36210                                           ! 7179                             6,
36211 8EA4                        06            .byte	6
36212                                           ! 7180                                  5,
36213 8EA5                        05            .byte	5
36214                                           ! 7181                            5,
36215 8EA6                        05            .byte	5
36216                                           ! 7182                                 0,
36217 8EA7                        00            .byte	0
36218                                           ! 7183                            0,
36219 8EA8                        00            .byte	0
36220                                           ! 7184                                 0,
36221 8EA9                        00            .byte	0
36222                                           ! 7185                          0,
36223 8EAA                      0000            .word	0
36224 8EAC                      0000            .word	0
36225                                           ! 7186 } },
36226                                           ! 7187 { 0x018b,
36227 8EAE                      018B            .word	$18B
36228                                           ! 7188 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36229 8EB0                      009B            .word	$9B
36230                                           ! 7189                           0x01 | 0x02 | 0x04,
36231 8EB2                        07            .byte	7
36232                                           ! 7190                           0,
36233 8EB3                        00            .byte	0
36234                                           ! 7191                           64,
36235 8EB4                      0040            .word	$40
36236                                           ! 7192                    64,
36237 8EB6                      0040            .word	$40
36238                                           ! 7193                        0xA000,
36239 8EB8                      A000            .word	$A000
36240                                           ! 7194                        0x0000,
36241 8EBA                      0000            .word	0
36242                                           ! 7195                       0,
36243 8EBC                      0000            .word	0
36244 8EBE                      0000            .word	0
36245                                           ! 7196                             7680,
36246 8EC0                      1E00            .word	$1E00
36247                                           ! 7197                        2560,
36248 8EC2                      0A00            .word	$A00
36249                                           ! 7198                        1600,
36250 8EC4                      0640            .word	$640
36251                                           ! 7199                      8,
36252 8EC6                        08            .byte	8
36253                                           ! 7200                      16,
36254 8EC7                        10            .byte	$10
36255                                           ! 7201                           1,
36256 8EC8                        01            .byte	1
36257                                           ! 7202                         24,
36258 8EC9                        18            .byte	$18
36259                                           ! 7203                          188,
36260 8ECA                        BC            .byte	$BC
36261                                           ! 7204                        0x06,
36262 8ECB                        06            .byte	6
36263                                           ! 7205                     0,
36264 8ECC                        00            .byte	0
36265                                           ! 7206                               0,
36266 8ECD                        00            .byte	0
36267                                           ! 7207                          0,
36268 8ECE                        00            .byte	0
36269                                           ! 7208                        8,
36270 8ECF                        08            .byte	8
36271                                           ! 7209                             16,
36272 8ED0                        10            .byte	$10
36273                                           ! 7210                          8,
36274 8ED1                        08            .byte	8
36275                                           ! 7211                               8,
36276 8ED2                        08            .byte	8
36277                                           ! 7212                         8,
36278 8ED3                        08            .byte	8
36279                                           ! 7213                              0,
36280 8ED4                        00            .byte	0
36281                                           ! 7214                         0,
36282 8ED5                        00            .byte	0
36283                                           ! 7215                              0,
36284 8ED6                        00            .byte	0
36285                                           ! 7216                                0,
36286 8ED7                        00            .byte	0
36287                                           ! 7217                        0xE0000000,
36288 8ED8                      0000            .word	0
36289 8EDA                      E000            .word	$E000
36290                                           ! 7218                               0,
36291 8EDC                      0000            .word	0
36292 8EDE                      0000            .word	0
36293                                           ! 7219                             0,
36294 8EE0                      0000            .word	0
36295                                           ! 7220                                7680,
36296 8EE2                      1E00            .word	$1E00
36297                                           ! 7221                             0,
36298 8EE4                        00            .byte	0
36299                                           ! 7222                             0,
36300 8EE5                        00            .byte	0
36301                                           ! 7223                           8,
36302 8EE6                        08            .byte	8
36303                                           ! 7224                                16,
36304 8EE7                        10            .byte	$10
36305                                           ! 7225                             8,
36306 8EE8                        08            .byte	8
36307                                           ! 7226                                  8,
36308 8EE9                        08            .byte	8
36309                                           ! 7227                
36310                                           ! 7227             8,
36311 8EEA                        08            .byte	8
36312                                           ! 7228                                 0,
36313 8EEB                        00            .byte	0
36314                                           ! 7229                            0,
36315 8EEC                        00            .byte	0
36316                                           ! 7230                                 0,
36317 8EED                        00            .byte	0
36318                                           ! 7231                          0,
36319 8EEE                      0000            .word	0
36320 8EF0                      0000            .word	0
36321                                           ! 7232 } },
36322                                           ! 7233 { 0x018c,
36323 8EF2                      018C            .word	$18C
36324                                           ! 7234 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36325 8EF4                      009B            .word	$9B
36326                                           ! 7235                           0x01 | 0x02 | 0x04,
36327 8EF6                        07            .byte	7
36328                                           ! 7236                           0,
36329 8EF7                        00            .byte	0
36330                                           ! 7237                           64,
36331 8EF8                      0040            .word	$40
36332                                           ! 7238                    64,
36333 8EFA                      0040            .word	$40
36334                                           ! 7239                        0xA000,
36335 8EFC                      A000            .word	$A000
36336                                           ! 7240                        0x0000,
36337 8EFE                      0000            .word	0
36338                                           ! 7241                       0,
36339 8F00                      0000            .word	0
36340 8F02                      0000            .word	0
36341                                           ! 7242                             10240,
36342 8F04                      2800            .word	$2800
36343                                           ! 7243                        2560,
36344 8F06                      0A00            .word	$A00
36345                                           ! 7244                        1600,
36346 8F08                      0640            .word	$640
36347                                           ! 7245                      8,
36348 8F0A                        08            .byte	8
36349                                           ! 7246                      16,
36350 8F0B                        10            .byte	$10
36351                                           ! 7247                           1,
36352 8F0C                        01            .byte	1
36353                                           ! 7248                         32,
36354 8F0D                        20            .byte	$20
36355                                           ! 7249                          250,
36356 8F0E                        FA            .byte	$FA
36357                                           ! 7250                        0x06,
36358 8F0F                        06            .byte	6
36359                                           ! 7251                     0,
36360 8F10                        00            .byte	0
36361                                           ! 7252                               0,
36362 8F11                        00            .byte	0
36363                                           ! 7253                          0,
36364 8F12                        00            .byte	0
36365                                           ! 7254                        8,
36366 8F13                        08            .byte	8
36367                                           ! 7255                             16,
36368 8F14                        10            .byte	$10
36369                                           ! 7256                          8,
36370 8F15                        08            .byte	8
36371                                           ! 7257                               8,
36372 8F16                        08            .byte	8
36373                                           ! 7258                         8,
36374 8F17                        08            .byte	8
36375                                           ! 7259                              0,
36376 8F18                        00            .byte	0
36377                                           ! 7260                         8,
36378 8F19                        08            .byte	8
36379                                           ! 7261                              24,
36380 8F1A                        18            .byte	$18
36381                                           ! 7262                                0x02,
36382 8F1B                        02            .byte	2
36383                                           ! 7263                        0xE0000000,
36384 8F1C                      0000            .word	0
36385 8F1E                      E000            .word	$E000
36386                                           ! 7264                               0,
36387 8F20                      0000            .word	0
36388 8F22                      0000            .word	0
36389                                           ! 7265                             0,
36390 8F24                      0000            .word	0
36391                                           ! 7266                                10240,
36392 8F26                      2800            .word	$2800
36393                                           ! 7267                             0,
36394 8F28                        00            .byte	0
36395                                           ! 7268                             0,
36396 8F29                        00            .byte	0
36397                                           ! 7269                           8,
36398 8F2A                        08            .byte	8
36399                                           ! 7270                                16,
36400 8F2B                        10            .byte	$10
36401                                           ! 7271                             8,
36402 8F2C                        08            .byte	8
36403                                           ! 7272                                  8,
36404 8F2D                        08            .byte	8
36405                                           ! 7273                            8,
36406 8F2E                        08            .byte	8
36407                                           ! 7274                                 0,
36408 8F2F                        00            .byte	0
36409                                           ! 7275                            8,
36410 8F30                        08            .byte	8
36411                                           ! 7276                                 24,
36412 8F31                        18            .byte	$18
36413                                           ! 7277                          0,
36414 8F32                      0000            .word	0
36415 8F34                      0000            .word	0
36416                                           ! 7278 } },
36417                                           ! 7279 { 0xFFFF,
36418 8F36                      FFFF            .word	$FFFF
36419                                           ! 7280 { 0,
36420 8F38                      0000            .word	0
36421                                           ! 7281 } },
36422 8F3A                  00000040            .blkb	$40
36423                                           ! 7282 };
36424                                           !BCC_EOS
36425                                           ! 7283 extern char vbebios_copyright;
36426                                           !BCC_EOS
36427                                           ! 7284 extern char vbebios_vendor_name;
36428                                           !BCC_EOS
36429                                           ! 7285 extern char vbebios_product_name;
36430                                           !BCC_EOS
36431                                           ! 7286 extern char vbebios_product_revision;
36432                                           !BCC_EOS
36433                                           ! 7287 #asm
36434                                           !BCC_ASM
36435                       00008F7A            _vbebios_copyright:
36436 8F7A                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
36437 8FBF                        00            .byte 0x00
36438                       00008FC0            _vbebios_vendor_name:
36439 8FC0                        42            .ascii "Bochs/Plex86 Developers"
36440 8FD7                        00            .byte 0x00
36441                       00008FD8            _vbebios_product_name:
36442 8FD8                        42            .ascii "Bochs/Plex86 VBE Adapter"
36443 8FF0                        00            .byte 0x00
36444                       00008FF1            _vbebios_product_revision:
36445 8FF1                        24            .ascii "$Id: vbe.c,v 1.60 2008/03/02 07:47:21 vruppert Exp $"
36446 9025                        00            .byte 0x00
36447                       00009026            _vbebios_info_string:
36448 9026                        42            .ascii "Bochs VBE Display Adapter enabled"
36449 9047                        0A            .byte 0x0a,0x0d
36450 9049                        0A            .byte 0x0a,0x0d
36451 904B                        00            .byte 0x00
36452                       0000904C            _no_vbebios_info_string:
36453 904C                        4E            .ascii "NO Bochs VBE Support available!"
36454 906B                        0A            .byte 0x0a,0x0d
36455 906D                        0A            .byte 0x0a,0x0d
36456 906F                        00            .byte 0x00
36457                       00009070            msg_vbe_init:
36458 9070                        56            .ascii "VBE Bios $Id: vbe.c,v 1.60 2008/03/02 07:47:21 vruppert Exp $"
36459 90AD                        0A            .byte 0x0a,0x0d, 0x00
36460 90B0                  00000002              .align 2
36461                       000090B0            vesa_pm_start:
36462 90B0                      0014              dw vesa_pm_set_window - vesa_pm_start
36463 90B2                      004B              dw vesa_pm_set_display_start - vesa_pm_start
36464 90B4                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
36465 90B6                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
36466                       000090B8            vesa_pm_io_ports_table:
36467 90B8                      01CE              dw 0x01CE
36468 90BA                      01CF              dw 0x01CE + 1
36469 90BC                      01CF              dw 0x01CF
36470 90BE                      01D0              dw 0x01CF + 1
36471 90C0                      FFFF              dw 0xffff
36472 90C2                      FFFF              dw 0xffff
36473                                             USE32
36474                       000090C4            vesa_pm_set_window:
36475 90C4     66    83FB                   00    cmp bx, #0x00
36476 90C8           74           05              je vesa_pm_set_display_window1
36477 90CA     66    B8                   0100    mov ax, #0x0100
36478 90CE           C3                           ret
36479                       000090CF            vesa_pm_set_display_window1:
36480 90CF     66    89D0                         mov ax, dx
36481 90D2     66    52                           push dx
36482 90D4     66    50                           push ax
36483 90D6     66    BA                   01CE    mov dx, # 0x01CE
36484 90DA     66    B8                   0005    mov ax, # 0x5
36485 90DE     66    EF                           out dx, ax
36486 90E0     66    58                           pop ax
36487 90E2     66    BA                   01CF    mov dx, # 0x01CF
36488 90E6     66    EF                           out dx, ax
36489 90E8     66    ED                           in ax, dx
36490 90EA     66    5A                           pop dx
36491 90EC     66    39C2                         cmp dx, ax
36492 90EF           75           05              jne illegal_window
36493 90F1     66    B8                   004F    mov ax, #0x004f
36494 90F5           C3                           ret
36495                       000090F6            illegal_window:
36496 90F6     66    B8                   014F    mov ax, #0x014f
36497 90FA           C3                           ret
36498                       000090FB            vesa_pm_set_display_start:
36499 90FB           80FB                   80    cmp bl, #0x80
36500 90FE           74           0A              je vesa_pm_set_display_start1
36501 9100           80FB                   00    cmp bl, #0x00
36502 9103           74           05              je vesa_pm_set_display_start1
36503 9105     66    B8                   0100    mov ax, #0x0100
36504 9109           C3                           ret
36505                       0000910A            vesa_pm_set_display_start1:
36506                                           ; convert offset to (X, Y) coordinate
36507                                           ; (would be simpler to change Bochs 1 API...)
36508 910A           50                           push eax
36509 910B           51                           push ecx
36510 910C           52                           push edx
36511 910D           56                           push esi
36512 910E           57                           push edi
36513 910F           C1E2                   10    shl edx, #16
36514 9112           81E1             0000FFFF    and ecx, #0xffff
36515 9118           09D1                         or ecx, edx
36516 911A           C1E1                   02    shl ecx, #2
36517 911D           89C8                         mov eax, ecx
36518 911F           50                           push eax
36519 9120     66    BA                   01CE    mov dx, # 0x01CE
36520 9124     66    B8                   0006    mov ax, # 0x6
36521 9128     66    EF                           out dx, ax
36522 912A     66    BA                   01CF    mov dx, # 0x01CF
36523 912E     66    ED                           in ax, dx
36524 9130         0FB7C8                         movzx ecx, ax
36525 9133     66    BA                   01CE    mov dx, # 0x01CE
36526 9137     66    B8                   0003    mov ax, # 0x3
36527 913B     66    EF                           out dx, ax
36528 913D     66    BA                   01CF    mov dx, # 0x01CF
36529 9141     66    ED                           in ax, dx
36530 9143         0FB7F0                         movzx esi, ax
36531 9146           58                           pop eax
36532 9147           83FE                   04    cmp esi, #4
36533 914A           74           17              jz bpp4_mode
36534 914C           83C6                   07    add esi, #7
36535 914F           C1EE                   03    shr esi, #3
36536 9152         0FAFCE                         imul ecx, esi
36537 9155           31D2                         xor edx, edx
36538 9157           F7F1                         div ecx
36539 9159           89C7                         mov edi, eax
36540 915B           89D0                         mov eax, edx
36541 915D           31D2                         xor edx, edx
36542 915F           F7F6                         div esi
36543 9161           EB           0C              jmp set_xy_regs
36544                       00009163            bpp4_mode:
36545 9163           D1E9                         shr ecx, #1
36546 9165           31D2                         xor edx, edx
36547 9167           F7F1                         div ecx
36548 9169           89C7                         mov edi, eax
36549 916B           89D0                         mov eax, edx
36550 916D           D1E0                         shl eax, #1
36551                       0000916F            set_xy_regs:
36552 916F     66    52                           push dx
36553 9171     66    50                           push ax
36554 9173     66    BA                   01CE    mov dx, # 0x01CE
36555 9177     66    B8                   0008    mov ax, # 0x8
36556 917B     66    EF                           out dx, ax
36557 917D     66    58                           pop ax
36558 917F     66    BA                   01CF    mov dx, # 0x01CF
36559 9183     66    EF                           out dx, ax
36560 9185     66    5A                           pop dx
36561 9187     66    89F8                         mov ax, di
36562 918A     66    52                           push dx
36563 918C     66    50                           push ax
36564 918E     66    BA                   01CE    mov dx, # 0x01CE
36565 9192     66    B8                   0009    mov ax, # 0x9
36566 9196     66    EF                           out dx, ax
36567 9198     66    58                           pop ax
36568 919A     66    BA                   01CF    mov dx, # 0x01CF
36569 919E     66    EF                           out dx, ax
36570 91A0     66    5A                           pop dx
36571 91A2           5F                           pop edi
36572 91A3           5E                           pop esi
36573 91A4           5A                           pop edx
36574 91A5           59                           pop ecx
36575 91A6           58                           pop eax
36576 91A7     66    B8                   004F    mov ax, #0x004f
36577 91AB           C3                           ret
36578                       000091AC            vesa_pm_unimplemented:
36579 91AC     66    B8                   014F    mov ax, #0x014f
36580 91B0           C3                           ret
36581                                             USE16
36582                       000091B1            vesa_pm_end:
36583                                           ; DISPI ioport functions
36584                       000091B1            dispi_get_id:
36585 91B1           52                           push dx
36586 91B2           BA                   01CE    mov dx, # 0x01CE
36587 91B5           B8                   0000    mov ax, # 0x0
36588 91B8           EF                           out dx, ax
36589 91B9           BA                   01CF    mov dx, # 0x01CF
36590 91BC           ED                           in ax, dx
36591 91BD           5A                           pop dx
36592 91BE           C3                           ret
36593                       000091BF            dispi_set_id:
36594 91BF           52                           push dx
36595 91C0           50                           push ax
36596 91C1           BA                   01CE    mov dx, # 0x01CE
36597 91C4           B8                   0000    mov ax, # 0x0
36598 91C7           EF                           out dx, ax
36599 91C8           58                           pop ax
36600 91C9           BA                   01CF    mov dx, # 0x01CF
36601 91CC           EF                           out dx, ax
36602 91CD           5A                           pop dx
36603 91CE           C3                           ret
36604                                           ! 7457 endasm
36605                                           !BCC_ENDASM
36606                                           ! 7458 static void dispi_set_xres(xres)
36607                                           ! 7459   Bit16u xres;
36608                                           
36609                       000091CF            _dispi_set_xres:
36610                                           !BCC_EOS
36611                                           ! 7460 {
36612                                           ! 7461 #asm
36613                                           !BCC_ASM
36614                       00000002            _dispi_set_xres.xres	set	2
36615 91CF           55                           push bp
36616 91D0           89E5                         mov bp, sp
36617 91D2           50                           push ax
36618 91D3           52                           push dx
36619 91D4           BA                   01CE    mov dx, # 0x01CE
36620 91D7           B8                   0001    mov ax, # 0x1
36621 91DA           EF                           out dx, ax
36622 91DB           BA                   01CF    mov dx, # 0x01CF
36623 91DE           8B46         04              mov ax, 4[bp] ; xres
36624 91E1           EF                           out dx, ax
36625 91E2           5A                           pop dx
36626 91E3           58                           pop ax
36627 91E4           5D                           pop bp
36628                                           ! 7475 endasm
36629                                           !BCC_ENDASM
36630                                           ! 7476 }
36631 91E5           C3                         ret
36632                                           ! 7477 static void dispi_set_yres(yres)
36633                                           ! 7478   Bit16u yres;
36634                       000091E6            _dispi_set_yres:
36635                                           !BCC_EOS
36636                                           ! 7479 {
36637                                           ! 7480   outw(0x01CE,0x2);
36638 91E6           55                         push	bp
36639 91E7           89E5                       mov	bp,sp
36640                                           ! Debug: list int = const 2 (used reg = )
36641 91E9           B8                   0002  mov	ax,*2
36642 91EC           50                         push	ax
36643                                           ! Debug: list int = const $1CE (used reg = )
36644 91ED           B8                   01CE  mov	ax,#$1CE
36645 91F0           50                         push	ax
36646                                           ! Debug: func () void = outw+0 (used reg = )
36647 91F1           E8         EBA2            call	_outw
36648 91F4           89EC                       mov	sp,bp
36649                                           !BCC_EOS
36650                                           ! 7481   outw(0x01CF,yres);
36651                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
36652 91F6           FF76         04            push	4[bp]
36653                                           ! Debug: list int = const $1CF (used reg = )
36654 91F9           B8                   01CF  mov	ax,#$1CF
36655 91FC           50                         push	ax
36656                                           ! Debug: func () void = outw+0 (used reg = )
36657 91FD           E8         EB96            call	_outw
36658 9200           89EC                       mov	sp,bp
36659                                           !BCC_EOS
36660                                           ! 7482 }
36661 9202           5D                         pop	bp
36662 9203           C3                         ret
36663                                           ! 7483 static void dispi_set_bpp(bpp)
36664                                           ! 7484   Bit16u bpp;
36665                       00009204            _dispi_set_bpp:
36666                                           !BCC_EOS
36667                                           ! 7485 {
36668                                           ! 7486   outw(0x01CE,0x3);
36669 9204           55                         push	bp
36670 9205           89E5                       mov	bp,sp
36671                                           ! Debug: list int = const 3 (used reg = )
36672 9207           B8                   0003  mov	ax,*3
36673 920A           50                         push	ax
36674                                           ! Debug: list int = const $1CE (used reg = )
36675 920B           B8                   01CE  mov	ax,#$1CE
36676 920E           50                         push	ax
36677                                           ! Debug: func () void = outw+0 (used reg = )
36678 920F           E8         EB84            call	_outw
36679 9212           89EC                       mov	sp,bp
36680                                           !BCC_EOS
36681                                           ! 7487   outw(0x01CF,bpp);
36682                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
36683 9214           FF76         04            push	4[bp]
36684                                           ! Debug: list int = const $1CF (used reg = )
36685 9217           B8                   01CF  mov	ax,#$1CF
36686 921A           50                         push	ax
36687                                           ! Debug: func () void = outw+0 (used reg = )
36688 921B           E8         EB78            call	_outw
36689 921E           89EC                       mov	sp,bp
36690                                           !BCC_EOS
36691                                           ! 7488 }
36692 9220           5D                         pop	bp
36693 9221           C3                         ret
36694                                           ! 7489 #asm
36695                                           !BCC_ASM
36696                       00000002            _dispi_set_bpp.bpp	set	2
36697                                           ; AL = bits per pixel / AH = bytes per pixel
36698                       00009222            dispi_get_bpp:
36699 9222           52                           push dx
36700 9223           BA                   01CE    mov dx, # 0x01CE
36701 9226           B8                   0003    mov ax, # 0x3
36702 9229           EF                           out dx, ax
36703 922A           BA                   01CF    mov dx, # 0x01CF
36704 922D           ED                           in ax, dx
36705 922E           88C4                         mov ah, al
36706 9230           C0EC                   03    shr ah, 3
36707 9233           A8                     07    test al, #0x07
36708 9235           74           02              jz get_bpp_noinc
36709 9237           FEC4                         inc ah
36710                       00009239            get_bpp_noinc:
36711 9239           5A                           pop dx
36712 923A           C3                           ret
36713                                           ; get display capabilities
36714                       0000923B            _dispi_get_max_xres:
36715 923B           52                           push dx
36716 923C           53                           push bx
36717 923D           E8         004F              call dispi_get_enable
36718 9240           89C3                         mov bx, ax
36719 9242           0D                   0002    or ax, # 0x02
36720 9245           E8         0037              call _dispi_set_enable
36721 9248           BA                   01CE    mov dx, # 0x01CE
36722 924B           B8                   0001    mov ax, # 0x1
36723 924E           EF                           out dx, ax
36724 924F           BA                   01CF    mov dx, # 0x01CF
36725 9252           ED                           in ax, dx
36726 9253           50                           push ax
36727 9254           89D8                         mov ax, bx
36728 9256           E8         0026              call _dispi_set_enable
36729 9259           58                           pop ax
36730 925A           5B                           pop bx
36731 925B           5A                           pop dx
36732 925C           C3                           ret
36733                       0000925D            _dispi_get_max_bpp:
36734 925D           52                           push dx
36735 925E           53                           push bx
36736 925F           E8         002D              call dispi_get_enable
36737 9262           89C3                         mov bx, ax
36738 9264           0D                   0002    or ax, # 0x02
36739 9267           E8         0015              call _dispi_set_enable
36740 926A           BA                   01CE    mov dx, # 0x01CE
36741 926D           B8                   0003    mov ax, # 0x3
36742 9270           EF                           out dx, ax
36743 9271           BA                   01CF    mov dx, # 0x01CF
36744 9274           ED                           in ax, dx
36745 9275           50                           push ax
36746 9276           89D8                         mov ax, bx
36747 9278           E8         0004              call _dispi_set_enable
36748 927B           58                           pop ax
36749 927C           5B                           pop bx
36750 927D           5A                           pop dx
36751 927E           C3                           ret
36752                       0000927F            _dispi_set_enable:
36753 927F           52                           push dx
36754 9280           50                           push ax
36755 9281           BA                   01CE    mov dx, # 0x01CE
36756 9284           B8                   0004    mov ax, # 0x4
36757 9287           EF                           out dx, ax
36758 9288           58                           pop ax
36759 9289           BA                   01CF    mov dx, # 0x01CF
36760 928C           EF                           out dx, ax
36761 928D           5A                           pop dx
36762 928E           C3                           ret
36763                       0000928F            dispi_get_enable:
36764 928F           52                           push dx
36765 9290           BA                   01CE    mov dx, # 0x01CE
36766 9293           B8                   0004    mov ax, # 0x4
36767 9296           EF                           out dx, ax
36768 9297           BA                   01CF    mov dx, # 0x01CF
36769 929A           ED                           in ax, dx
36770 929B           5A                           pop dx
36771 929C           C3                           ret
36772                       0000929D            _dispi_set_bank:
36773 929D           52                           push dx
36774 929E           50                           push ax
36775 929F           BA                   01CE    mov dx, # 0x01CE
36776 92A2           B8                   0005    mov ax, # 0x5
36777 92A5           EF                           out dx, ax
36778 92A6           58                           pop ax
36779 92A7           BA                   01CF    mov dx, # 0x01CF
36780 92AA           EF                           out dx, ax
36781 92AB           5A                           pop dx
36782 92AC           C3                           ret
36783                       000092AD            dispi_get_bank:
36784 92AD           52                           push dx
36785 92AE           BA                   01CE    mov dx, # 0x01CE
36786 92B1           B8                   0005    mov ax, # 0x5
36787 92B4           EF                           out dx, ax
36788 92B5           BA                   01CF    mov dx, # 0x01CF
36789 92B8           ED                           in ax, dx
36790 92B9           5A                           pop dx
36791 92BA           C3                           ret
36792                                           ! 7585 endasm
36793                                           !BCC_ENDASM
36794                                           ! 7586 static void dispi_set_bank_farcall()
36795                                           ! 7587 {
36796                       000092BB            _dispi_set_bank_farcall:
36797                                           ! 7588 #asm
36798                                           !BCC_ASM
36799 92BB           81FB                 0100    cmp bx,#0x0100
36800 92BF           74           1E              je dispi_set_bank_farcall_get
36801 92C1           09DB                         or bx,bx
36802 92C3           75           28              jnz dispi_set_bank_farcall_error
36803 92C5           89D0                         mov ax,dx
36804 92C7           52                           push dx
36805 92C8           50                           push ax
36806 92C9           B8                   0005    mov ax,# 0x5
36807 92CC           BA                   01CE    mov dx,# 0x01CE
36808 92CF           EF                           out dx,ax
36809 92D0           58                           pop ax
36810 92D1           BA                   01CF    mov dx,# 0x01CF
36811 92D4           EF                           out dx,ax
36812 92D5           ED                           in ax,dx
36813 92D6           5A                           pop dx
36814 92D7           39C2                         cmp dx,ax
36815 92D9           75           12              jne dispi_set_bank_farcall_error
36816 92DB           B8                   004F    mov ax, #0x004f
36817 92DE           CB                           retf
36818                       000092DF            dispi_set_bank_farcall_get:
36819 92DF           B8                   0005    mov ax,# 0x5
36820 92E2           BA                   01CE    mov dx,# 0x01CE
36821 92E5           EF                           out dx,ax
36822 92E6           BA                   01CF    mov dx,# 0x01CF
36823 92E9           ED                           in ax,dx
36824 92EA           89C2                         mov dx,ax
36825 92EC           CB                           retf
36826                       000092ED            dispi_set_bank_farcall_error:
36827 92ED           B8                   014F    mov ax,#0x014F
36828 92F0           CB                           retf
36829                                           ! 7619 endasm
36830                                           !BCC_ENDASM
36831                                           ! 7620 }
36832 92F1           C3                         ret
36833                                           ! 7621 #asm
36834                                           !BCC_ASM
36835                       000092F2            dispi_set_x_offset:
36836 92F2           52                           push dx
36837 92F3           50                           push ax
36838 92F4           BA                   01CE    mov dx, # 0x01CE
36839 92F7           B8                   0008    mov ax, # 0x8
36840 92FA           EF                           out dx, ax
36841 92FB           58                           pop ax
36842 92FC           BA                   01CF    mov dx, # 0x01CF
36843 92FF           EF                           out dx, ax
36844 9300           5A                           pop dx
36845 9301           C3                           ret
36846                       00009302            dispi_get_x_offset:
36847 9302           52                           push dx
36848 9303           BA                   01CE    mov dx, # 0x01CE
36849 9306           B8                   0008    mov ax, # 0x8
36850 9309           EF                           out dx, ax
36851 930A           BA                   01CF    mov dx, # 0x01CF
36852 930D           ED                           in ax, dx
36853 930E           5A                           pop dx
36854 930F           C3                           ret
36855                       00009310            dispi_set_y_offset:
36856 9310           52                           push dx
36857 9311           50                           push ax
36858 9312           BA                   01CE    mov dx, # 0x01CE
36859 9315           B8                   0009    mov ax, # 0x9
36860 9318           EF                           out dx, ax
36861 9319           58                           pop ax
36862 931A           BA                   01CF    mov dx, # 0x01CF
36863 931D           EF                           out dx, ax
36864 931E           5A                           pop dx
36865 931F           C3                           ret
36866                       00009320            dispi_get_y_offset:
36867 9320           52                           push dx
36868 9321           BA                   01CE    mov dx, # 0x01CE
36869 9324           B8                   0009    mov ax, # 0x9
36870 9327           EF                           out dx, ax
36871 9328           BA                   01CF    mov dx, # 0x01CF
36872 932B           ED                           in ax, dx
36873 932C           5A                           pop dx
36874 932D           C3                           ret
36875                       0000932E            vga_set_virt_width:
36876 932E           50                           push ax
36877 932F           53                           push bx
36878 9330           52                           push dx
36879 9331           89C3                         mov bx, ax
36880 9333           E8         FEEC              call dispi_get_bpp
36881 9336           3C                     04    cmp al, #0x04
36882 9338           77           02              ja set_width_svga
36883 933A           D1EB                         shr bx, #1
36884                       0000933C            set_width_svga:
36885 933C           C1EB                   03    shr bx, #3
36886 933F           BA                   03D4    mov dx, # 0x3d4
36887 9342           88DC                         mov ah, bl
36888 9344           B0                     13    mov al, #0x13
36889 9346           EF                           out dx, ax
36890 9347           5A                           pop dx
36891 9348           5B                           pop bx
36892 9349           58                           pop ax
36893 934A           C3                           ret
36894                       0000934B            dispi_set_virt_width:
36895 934B           E8         FFE0              call vga_set_virt_width
36896 934E           52                           push dx
36897 934F           50                           push ax
36898 9350           BA                   01CE    mov dx, # 0x01CE
36899 9353           B8                   0006    mov ax, # 0x6
36900 9356           EF                           out dx, ax
36901 9357           58                           pop ax
36902 9358           BA                   01CF    mov dx, # 0x01CF
36903 935B           EF                           out dx, ax
36904 935C           5A                           pop dx
36905 935D           C3                           ret
36906                       0000935E            dispi_get_virt_width:
36907 935E           52                           push dx
36908 935F           BA                   01CE    mov dx, # 0x01CE
36909 9362           B8                   0006    mov ax, # 0x6
36910 9365           EF                           out dx, ax
36911 9366           BA                   01CF    mov dx, # 0x01CF
36912 9369           ED                           in ax, dx
36913 936A           5A                           pop dx
36914 936B           C3                           ret
36915                       0000936C            dispi_get_virt_height:
36916 936C           52                           push dx
36917 936D           BA                   01CE    mov dx, # 0x01CE
36918 9370           B8                   0007    mov ax, # 0x7
36919 9373           EF                           out dx, ax
36920 9374           BA                   01CF    mov dx, # 0x01CF
36921 9377           ED                           in ax, dx
36922 9378           5A                           pop dx
36923 9379           C3                           ret
36924                       0000937A            _vga_compat_setup:
36925 937A           50                           push ax
36926 937B           52                           push dx
36927                                             ; set CRT X resolution
36928 937C           BA                   01CE    mov dx, # 0x01CE
36929 937F           B8                   0001    mov ax, # 0x1
36930 9382           EF                           out dx, ax
36931 9383           BA                   01CF    mov dx, # 0x01CF
36932 9386           ED                           in ax, dx
36933 9387           50                           push ax
36934 9388           BA                   03D4    mov dx, # 0x3d4
36935 938B           B8                   0011    mov ax, #0x0011
36936 938E           EF                           out dx, ax
36937 938F           58                           pop ax
36938 9390           50                           push ax
36939 9391           C1E8                   03    shr ax, #3
36940 9394           48                           dec ax
36941 9395           88C4                         mov ah, al
36942 9397           B0                     01    mov al, #0x01
36943 9399           EF                           out dx, ax
36944 939A           58                           pop ax
36945 939B           E8         FF90              call vga_set_virt_width
36946                                             ; set CRT Y resolution
36947 939E           BA                   01CE    mov dx, # 0x01CE
36948 93A1           B8                   0002    mov ax, # 0x2
36949 93A4           EF                           out dx, ax
36950 93A5           BA                   01CF    mov dx, # 0x01CF
36951 93A8           ED                           in ax, dx
36952 93A9           48                           dec ax
36953 93AA           50                           push ax
36954 93AB           BA                   03D4    mov dx, # 0x3d4
36955 93AE           88C4                         mov ah, al
36956 93B0           B0                     12    mov al, #0x12
36957 93B2           EF                           out dx, ax
36958 93B3           58                           pop ax
36959 93B4           B0                     07    mov al, #0x07
36960 93B6           EE                           out dx, al
36961 93B7           42                           inc dx
36962 93B8           EC                           in al, dx
36963 93B9           24                     BD    and al, #0xbd
36964 93BB           F6C4                   01    test ah, #0x01
36965 93BE           74           02              jz bit8_clear
36966 93C0           0C                     02    or al, #0x02
36967                       000093C2            bit8_clear:
36968 93C2           F6C4                   02    test ah, #0x02
36969 93C5           74           02              jz bit9_clear
36970 93C7           0C                     40    or al, #0x40
36971                       000093C9            bit9_clear:
36972 93C9           EE                           out dx, al
36973                                             ; other settings
36974 93CA           BA                   03D4    mov dx, # 0x3d4
36975 93CD           B8                   0009    mov ax, #0x0009
36976 93D0           EF                           out dx, ax
36977 93D1           B0                     17    mov al, #0x17
36978 93D3           EE                           out dx, al
36979 93D4           BA                   03D5    mov dx, # 0x3d5
36980 93D7           EC                           in al, dx
36981 93D8           0C                     03    or al, #0x03
36982 93DA           EE                           out dx, al
36983 93DB           BA                   03DA    mov dx, # 0x3da
36984 93DE           EC                           in al, dx
36985 93DF           BA                   03C0    mov dx, # 0x3c0
36986 93E2           B0                     10    mov al, #0x10
36987 93E4           EE                           out dx, al
36988 93E5           BA                   03C1    mov dx, # 0x3c1
36989 93E8           EC                           in al, dx
36990 93E9           0C                     01    or al, #0x01
36991 93EB           BA                   03C0    mov dx, # 0x3c0
36992 93EE           EE                           out dx, al
36993 93EF           B0                     20    mov al, #0x20
36994 93F1           EE                           out dx, al
36995 93F2           BA                   03CE    mov dx, # 0x3ce
36996 93F5           B8                   0506    mov ax, #0x0506
36997 93F8           EF                           out dx, ax
36998 93F9           BA                   03C4    mov dx, # 0x3c4
36999 93FC           B8                   0F02    mov ax, #0x0f02
37000 93FF           EF                           out dx, ax
37001                                             ; settings for >= 8bpp
37002 9400           BA                   01CE    mov dx, # 0x01CE
37003 9403           B8                   0003    mov ax, # 0x3
37004 9406           EF                           out dx, ax
37005 9407           BA                   01CF    mov dx, # 0x01CF
37006 940A           ED                           in ax, dx
37007 940B           3C                     08    cmp al, #0x08
37008 940D           72           40              jb vga_compat_end
37009 940F           BA                   03D4    mov dx, # 0x3d4
37010 9412           B0                     14    mov al, #0x14
37011 9414           EE                           out dx, al
37012 9415           BA                   03D5    mov dx, # 0x3d5
37013 9418           EC                           in al, dx
37014 9419           0C                     40    or al, #0x40
37015 941B           EE                           out dx, al
37016 941C           BA                   03DA    mov dx, # 0x3da
37017 941F           EC                           in al, dx
37018 9420           BA                   03C0    mov dx, # 0x3c0
37019 9423           B0                     10    mov al, #0x10
37020 9425           EE                           out dx, al
37021 9426           BA                   03C1    mov dx, # 0x3c1
37022 9429           EC                           in al, dx
37023 942A           0C                     40    or al, #0x40
37024 942C           BA                   03C0    mov dx, # 0x3c0
37025 942F           EE                           out dx, al
37026 9430           B0                     20    mov al, #0x20
37027 9432           EE                           out dx, al
37028 9433           BA                   03C4    mov dx, # 0x3c4
37029 9436           B0                     04    mov al, #0x04
37030 9438           EE                           out dx, al
37031 9439           BA                   03C5    mov dx, # 0x3c5
37032 943C           EC                           in al, dx
37033 943D           0C                     08    or al, #0x08
37034 943F           EE                           out dx, al
37035 9440           BA                   03CE    mov dx, # 0x3ce
37036 9443           B0                     05    mov al, #0x05
37037 9445           EE                           out dx, al
37038 9446           BA                   03CF    mov dx, # 0x3cf
37039 9449           EC                           in al, dx
37040 944A           24                     9F    and al, #0x9f
37041 944C           0C                     40    or al, #0x40
37042 944E           EE                           out dx, al
37043                       0000944F            vga_compat_end:
37044 944F           5A                           pop dx
37045 9450           58                           pop ax
37046                                           ! 7833 endasm
37047                                           !BCC_ENDASM
37048                                           ! 7834 static ModeInfoListItem* mode_info_find_mode(mode, using_lfb)
37049                                           ! 7835   Bit16u mode; Boolean using_lfb;
37050                       00009451            _mode_info_find_mode:
37051                                           !BCC_EOS
37052                                           !BCC_EOS
37053                                           ! 7836 {
37054                                           ! 7837   ModeInfoListItem *cur_info=&mode_info_list;
37055 9451           55                         push	bp
37056 9452           89E5                       mov	bp,sp
37057 9454           4C                         dec	sp
37058 9455           4C                         dec	sp
37059                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
37060 9456           BB                   7F02  mov	bx,#_mode_info_list
37061 9459           895E         FE            mov	-2[bp],bx
37062                                           !BCC_EOS
37063                                           ! 7838   while (cur_info->mode != 0xFFFF)
37064                                           ! 7839   {
37065 945C           EB           43            jmp .2CC
37066                       0000945E            .2CD:
37067                                           ! 7840     if (cur_info->mode == mode)
37068 945E           8B5E         FE            mov	bx,-2[bp]
37069                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
37070 9461           8B1F                       mov	bx,[bx]
37071 9463           3B5E         04            cmp	bx,4[bp]
37072 9466           75           30            jne 	.2CE
37073                       00009468            .2CF:
37074                                           ! 7841     {
37075                                           ! 7842       if (!using_lfb)
37076 9468           8B46         06            mov	ax,6[bp]
37077 946B           85C0                       test	ax,ax
37078 946D           75           09            jne 	.2D0
37079                       0000946F            .2D1:
37080                                           ! 7843       {
37081                                           ! 7844       
37082                                           ! 7844   return cur_info;
37083 946F           8B46         FE            mov	ax,-2[bp]
37084 9472           89EC                       mov	sp,bp
37085 9474           5D                         pop	bp
37086 9475           C3                         ret
37087                                           !BCC_EOS
37088                                           ! 7845       }
37089                                           ! 7846       else if (cur_info->info.ModeAttributes & 0x0080)
37090 9476           EB           1E            jmp .2D2
37091                       00009478            .2D0:
37092 9478           8B5E         FE            mov	bx,-2[bp]
37093                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
37094 947B           8A47         02            mov	al,2[bx]
37095 947E           24                     80  and	al,#$80
37096 9480           84C0                       test	al,al
37097 9482           74           09            je  	.2D3
37098                       00009484            .2D4:
37099                                           ! 7847       {
37100                                           ! 7848         return cur_info;
37101 9484           8B46         FE            mov	ax,-2[bp]
37102 9487           89EC                       mov	sp,bp
37103 9489           5D                         pop	bp
37104 948A           C3                         ret
37105                                           !BCC_EOS
37106                                           ! 7849       }
37107                                           ! 7850       else
37108                                           ! 7851       {
37109 948B           EB           09            jmp .2D5
37110                       0000948D            .2D3:
37111                                           ! 7852         cur_info++;
37112                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
37113 948D           8B5E         FE            mov	bx,-2[bp]
37114 9490           83C3                   44  add	bx,*$44
37115 9493           895E         FE            mov	-2[bp],bx
37116                                           !BCC_EOS
37117                                           ! 7853       }
37118                                           ! 7854     }
37119                       00009496            .2D5:
37120                       00009496            .2D2:
37121                                           ! 7855     else
37122                                           ! 7856     {
37123 9496           EB           09            jmp .2D6
37124                       00009498            .2CE:
37125                                           ! 7857       cur_info++;
37126                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
37127 9498           8B5E         FE            mov	bx,-2[bp]
37128 949B           83C3                   44  add	bx,*$44
37129 949E           895E         FE            mov	-2[bp],bx
37130                                           !BCC_EOS
37131                                           ! 7858     }
37132                                           ! 7859   }
37133                       000094A1            .2D6:
37134                                           ! 7860   return 0;
37135                       000094A1            .2CC:
37136 94A1           8B5E         FE            mov	bx,-2[bp]
37137                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
37138 94A4           8B1F                       mov	bx,[bx]
37139 94A6           81FB                 FFFF  cmp	bx,#$FFFF
37140 94AA           75           B2            jne	.2CD
37141                       000094AC            .2D7:
37142                       000094AC            .2CB:
37143 94AC           31C0                       xor	ax,ax
37144 94AE           89EC                       mov	sp,bp
37145 94B0           5D                         pop	bp
37146 94B1           C3                         ret
37147                                           !BCC_EOS
37148                                           ! 7861 }
37149                                           ! 7862 #asm
37150                                           !BCC_ASM
37151                       00000004            _mode_info_find_mode.using_lfb	set	4
37152                       00000002            _mode_info_find_mode.mode	set	2
37153                                           ; Has 1 display - Returns true if 1 display detected
37154                       000094B2            _vbe_has_vbe_display:
37155 94B2           1E                           push ds
37156 94B3           53                           push bx
37157 94B4           B8                   0040    mov ax, # 0x40
37158 94B7           8ED8                         mov ds, ax
37159 94B9           BB                   00B9    mov bx, # 0xB9
37160 94BC           8A07                         mov al, [bx]
37161 94BE           24                     01    and al, #0x01
37162 94C0           30E4                         xor ah, ah
37163 94C2           5B                           pop bx
37164 94C3           1F                           pop ds
37165 94C4           C3                           ret
37166                                           ; 1 Init - Initialise the Vesa Bios Extension Code
37167                                           ; This function does a sanity check on the host side display code interface.
37168                       000094C5            vbe_init:
37169 94C5           B8                   B0C0    mov ax, # 0xB0C0
37170 94C8           E8         FCF4              call dispi_set_id
37171 94CB           E8         FCE3              call dispi_get_id
37172 94CE           3D                   B0C0    cmp ax, # 0xB0C0
37173 94D1           75           16              jne no_vbe_interface
37174 94D3           1E                           push ds
37175 94D4           53                           push bx
37176 94D5           B8                   0040    mov ax, # 0x40
37177 94D8           8ED8                         mov ds, ax
37178 94DA           BB                   00B9    mov bx, # 0xB9
37179 94DD           B0                     01    mov al, #0x01
37180 94DF           8807                         mov [bx], al
37181 94E1           5B                           pop bx
37182 94E2           1F                           pop ds
37183 94E3           B8                   B0C4    mov ax, # 0xB0C4
37184 94E6           E8         FCD6              call dispi_set_id
37185                       000094E9            no_vbe_interface:
37186 94E9           BB                   9070    mov bx, #msg_vbe_init
37187 94EC           53                           push bx
37188 94ED           E8         E8D5              call _printf
37189 94F0           44                           inc sp
37190 94F1           44                           inc sp
37191 94F2           C3                           ret
37192                                           ; 1 Display Info - Display information on screen about the 1
37193                       000094F3            vbe_display_info:
37194 94F3           E8         FFBC              call _vbe_has_vbe_display
37195 94F6           85C0                         test ax, ax
37196 94F8           74           0B              jz no_vbe_flag
37197 94FA           B8                   C000    mov ax, #0xc000
37198 94FD           8ED8                         mov ds, ax
37199 94FF           BE                   9026    mov si, #_vbebios_info_string
37200 9502           E9         A13E              jmp _display_string
37201                       00009505            no_vbe_flag:
37202 9505           B8                   C000    mov ax, #0xc000
37203 9508           8ED8                         mov ds, ax
37204 950A           BE                   904C    mov si, #_no_vbebios_info_string
37205 950D           E9         A133              jmp _display_string
37206                                           ! 7916 endasm
37207                                           !BCC_ENDASM
37208                                           ! 7917 void vbe_biosfn_return_controller_information(AX, ES, DI)
37209                                           ! Register BX used in function mode_info_find_mode
37210                                           ! 7918 Bit16u *AX;Bit16u ES;Bit16u DI;
37211                                           export	_vbe_biosfn_return_controller_information
37212                       00009510            _vbe_biosfn_return_controller_information:
37213                                           !BCC_EOS
37214                                           !BCC_EOS
37215                                           !BCC_EOS
37216                                           ! 7919 {
37217                                           ! 7920         Bit16u ss=get_SS();
37218 9510           55                         push	bp
37219 9511           89E5                       mov	bp,sp
37220 9513           4C                         dec	sp
37221 9514           4C                         dec	sp
37222                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37223 9515           E8         E88E            call	_get_SS
37224                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
37225 9518           8946         FE            mov	-2[bp],ax
37226                                           !BCC_EOS
37227                                           ! 7921         VbeInfoBlock vbe_info_block;
37228                                           !BCC_EOS
37229                                           ! 7922         Bit16u status;
37230                                           !BCC_EOS
37231                                           ! 7923         Bit16u result;
37232                                           !BCC_EOS
37233                                           ! 7924         Bit16u vbe2_info;
37234                                           !BCC_EOS
37235                                           ! 7925         Bit16u cur_mode=0;
37236 951B           81C4                 FDF8  add	sp,#-$208
37237                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
37238 951F           31C0                       xor	ax,ax
37239 9521           8986       FDF6            mov	-$20A[bp],ax
37240                                           !BCC_EOS
37241                                           ! 7926         Bit16u cur_ptr=34;
37242 9525           4C                         dec	sp
37243 9526           4C                         dec	sp
37244                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
37245 9527           B8                   0022  mov	ax,*$22
37246 952A           8986       FDF4            mov	-$20C[bp],ax
37247                                           !BCC_EOS
37248                                           ! 7927         ModeInfoListItem *cur_info=&mode_info_list;
37249 952E           4C                         dec	sp
37250 952F           4C                         dec	sp
37251                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$210-$210] (used reg = )
37252 9530           BB                   7F02  mov	bx,#_mode_info_list
37253 9533           899E       FDF2            mov	-$20E[bp],bx
37254                                           !BCC_EOS
37255                                           ! 7928         status = read_word(ss, AX);
37256                                           ! Debug: list * unsigned short AX = [S+$210+2] (used reg = )
37257 9537           FF76         04            push	4[bp]
37258                                           ! Debug: list unsigned short ss = [S+$212-4] (used reg = )
37259 953A           FF76         FE            push	-2[bp]
37260                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
37261 953D           E8         E7ED            call	_read_word
37262 9540           83C4                   04  add	sp,*4
37263                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$210-$206] (used reg = )
37264 9543           8986       FDFC            mov	-$204[bp],ax
37265                                           !BCC_EOS
37266                                           ! 7929         printf("VBE vbe_biosfn_return_vbe_info ES%x DI%x AX%x\n",ES,DI,status);
37267                                           ! Debug: list unsigned short status = [S+$210-$206] (used reg = )
37268 9547           FFB6       FDFC            push	-$204[bp]
37269                                           ! Debug: list unsigned short DI = [S+$212+6] (used reg = )
37270 954B           FF76         08            push	8[bp]
37271                                           ! Debug: list unsigned short ES = [S+$214+4] (used reg = )
37272 954E           FF76         06            push	6[bp]
37273                                           ! Debug: list * char = .2D8+0 (used reg = )
37274 9551           BB                   9FF7  mov	bx,#.2D8
37275 9554           53                         push	bx
37276                                           ! Debug: func () void = printf+0 (used reg = )
37277 9555           E8         E86D            call	_printf
37278 9558           83C4                   08  add	sp,*8
37279                                           !BCC_EOS
37280                                           ! 7930         vbe2_info = 0;
37281                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$210-$20A] (used reg = )
37282 955B           31C0                       xor	ax,ax
37283 955D           8986       FDF8            mov	-$208[bp],ax
37284                                           !BCC_EOS
37285                                           ! 7931         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
37286                                           ! Debug: list int = const $200 (used reg = )
37287 9561           B8                   0200  mov	ax,#$200
37288 9564           50                         push	ax
37289                                           ! Debug: list unsigned short DI = [S+$212+6] (used reg = )
37290 9565           FF76         08            push	8[bp]
37291                                           ! Debug: list unsigned short ES = [S+$214+4] (used reg = )
37292 9568           FF76         06            push	6[bp]
37293                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$216-$204 (used reg = )
37294 956B           8D9E       FDFE            lea	bx,-$202[bp]
37295 956F           53                         push	bx
37296                                           ! Debug: list unsigned short ss = [S+$218-4] (used reg = )
37297 9570           FF76         FE            push	-2[bp]
37298                                           ! Debug: func () void = memcpyb+0 (used reg = )
37299 9573           E8         E744            call	_memcpyb
37300 9576           83C4                   0A  add	sp,*$A
37301                                           !BCC_EOS
37302                                           ! 7932         if (((vbe_info_block.VbeSignature[0] == 'V') &&
37303                                           ! 7933              (vbe_info_block.VbeSignature[1] == 'B') &&
37304                                           ! 7934              (vbe_info_block.VbeSignature[2] == 'E') &&
37305                                           ! 7935              (vbe_info_block.VbeSignature[3] == '2')) ||
37306                                           ! 7936             ((
37307                                           ! 7936 vbe_info_block.VbeSignature[0] == 'V') &&
37308                                           ! 7937              (vbe_info_block.VbeSignature[1] == 'E') &&
37309                                           ! 7938              (vbe_info_block.VbeSignature[2] == 'S') &&
37310                                           ! 7939              (vbe_info_block.VbeSignature[3] == 'A')) )
37311                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
37312 9579           8A86       FDFE            mov	al,-$202[bp]
37313 957D           3C                     56  cmp	al,*$56
37314 957F           75           1A            jne 	.2DB
37315                       00009581            .2DE:
37316                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
37317 9581           8A86       FDFF            mov	al,-$201[bp]
37318 9585           3C                     42  cmp	al,*$42
37319 9587         0F85         0010            bne 	.2DB
37320                       0000958B            .2DD:
37321                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
37322 958B           8A86       FE00            mov	al,-$200[bp]
37323 958F           3C                     45  cmp	al,*$45
37324 9591           75           08            jne 	.2DB
37325                       00009593            .2DC:
37326                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
37327 9593           8A86       FE01            mov	al,-$1FF[bp]
37328 9597           3C                     32  cmp	al,*$32
37329 9599           74           20            je  	.2DA
37330                       0000959B            .2DB:
37331                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
37332 959B           8A86       FDFE            mov	al,-$202[bp]
37333 959F           3C                     56  cmp	al,*$56
37334 95A1           75           28            jne 	.2D9
37335                       000095A3            .2E1:
37336                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
37337 95A3           8A86       FDFF            mov	al,-$201[bp]
37338 95A7           3C                     45  cmp	al,*$45
37339 95A9           75           20            jne 	.2D9
37340                       000095AB            .2E0:
37341                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
37342 95AB           8A86       FE00            mov	al,-$200[bp]
37343 95AF           3C                     53  cmp	al,*$53
37344 95B1           75           18            jne 	.2D9
37345                       000095B3            .2DF:
37346                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
37347 95B3           8A86       FE01            mov	al,-$1FF[bp]
37348 95B7           3C                     41  cmp	al,*$41
37349 95B9           75           10            jne 	.2D9
37350                       000095BB            .2DA:
37351                                           ! 7940         {
37352                                           ! 7941                 vbe2_info = 1;
37353                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$210-$20A] (used reg = )
37354 95BB           B8                   0001  mov	ax,*1
37355 95BE           8986       FDF8            mov	-$208[bp],ax
37356                                           !BCC_EOS
37357                                           ! 7942                 printf("VBE correct VESA/VBE2 signature found\n");
37358                                           ! Debug: list * char = .2E2+0 (used reg = )
37359 95C2           BB                   9FD0  mov	bx,#.2E2
37360 95C5           53                         push	bx
37361                                           ! Debug: func () void = printf+0 (used reg = )
37362 95C6           E8         E7FC            call	_printf
37363 95C9           44                         inc	sp
37364 95CA           44                         inc	sp
37365                                           !BCC_EOS
37366                                           ! 7943         }
37367                                           ! 7944         vbe_info_block.VbeSignature[0] = 'V';
37368                       000095CB            .2D9:
37369                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
37370 95CB           B0                     56  mov	al,*$56
37371 95CD           8886       FDFE            mov	-$202[bp],al
37372                                           !BCC_EOS
37373                                           ! 7945         vbe_info_block.VbeSignature[1] = 'E';
37374                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
37375 95D1           B0                     45  mov	al,*$45
37376 95D3           8886       FDFF            mov	-$201[bp],al
37377                                           !BCC_EOS
37378                                           ! 7946         vbe_info_block.VbeSignature[2] = 'S';
37379                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
37380 95D7           B0                     53  mov	al,*$53
37381 95D9           8886       FE00            mov	-$200[bp],al
37382                                           !BCC_EOS
37383                                           ! 7947         vbe_info_block.VbeSignature[3] = 'A';
37384                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
37385 95DD           B0                     41  mov	al,*$41
37386 95DF           8886       FE01            mov	-$1FF[bp],al
37387                                           !BCC_EOS
37388                                           ! 7948         vbe_info_block.VbeVersion = 0x0200;
37389                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$210-$200] (used reg = )
37390 95E3           B8                   0200  mov	ax,#$200
37391 95E6           8986       FE02            mov	-$1FE[bp],ax
37392                                           !BCC_EOS
37393                                           ! 7949         vbe_info_block.OemStringPtr_Seg = 0xc000;
37394                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1FC] (used reg = )
37395 95EA           B8                   C000  mov	ax,#$C000
37396 95ED           8986       FE06            mov	-$1FA[bp],ax
37397                                           !BCC_EOS
37398                                           ! 7950         vbe_info_block.OemStringPtr_Off = &vbebios_copyright;
37399                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$210-$1FE] (used reg = )
37400 95F1           BB                   8F7A  mov	bx,#_vbebios_copyright
37401 95F4           899E       FE04            mov	-$1FC[bp],bx
37402                                           !BCC_EOS
37403                                           ! 7951         vbe_info_block.Capabilities[0] = 0x0001;
37404                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$210-$1FA] (used reg = )
37405 95F8           B0                     01  mov	al,*1
37406 95FA           8886       FE08            mov	-$1F8[bp],al
37407                                           !BCC_EOS
37408                                           ! 7952         vbe_info_block.Capabilities[1] = 0;
37409                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F9] (used reg = )
37410 95FE           30C0                       xor	al,al
37411 9600           8886       FE09            mov	-$1F7[bp],al
37412                                           !BCC_EOS
37413                                           ! 7953         vbe_info_block.Capabilities[2] = 0;
37414                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F8] (used reg = )
37415 9604           30C0                       xor	al,al
37416 9606           8886       FE0A            mov	-$1F6[bp],al
37417                                           !BCC_EOS
37418                                           ! 7954         vbe_info_block.Capabilities[3] = 0;
37419                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F7] (used reg = )
37420 960A           30C0                       xor	al,al
37421 960C           8886       FE0B            mov	-$1F5[bp],al
37422                                           !BCC_EOS
37423                                           ! 7955         vbe_info_block.VideoModePtr_Seg= ES ;
37424                                           ! Debug: eq unsigned short ES = [S+$210+4] to unsigned short vbe_info_block = [S+$210-$1F4] (used reg = )
37425 9610           8B46         06            mov	ax,6[bp]
37426 9613           8986       FE0E            mov	-$1F2[bp],ax
37427                                           !BCC_EOS
37428                                           ! 7956         vbe_info_block.VideoModePtr_Off= DI + 34;
37429                                           ! Debug: add int = const $22 to unsigned short DI = [S+$210+6] (used reg = )
37430 9617           8B46         08            mov	ax,8[bp]
37431                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$210-$1F6] (used reg = )
37432 961A           05                   0022  add	ax,*$22
37433 961D           8986       FE0C            mov	-$1F4[bp],ax
37434                                           !BCC_EOS
37435                                           ! 7957         outw(0x01CE, 0xa);
37436                                           ! Debug: list int = const $A (used reg = )
37437 9621           B8                   000A  mov	ax,*$A
37438 9624           50                         push	ax
37439                                           ! Debug: list int = const $1CE (used reg = )
37440 9625           B8                   01CE  mov	ax,#$1CE
37441 9628           50                         push	ax
37442                                           ! Debug: func () void = outw+0 (used reg = )
37443 9629           E8         E76A            call	_outw
37444 962C           83C4                   04  add	sp,*4
37445                                           !BCC_EOS
37446                                           ! 7958         vbe_info_block.TotalMemory = inw(0x01CF);
37447                                           ! Debug: list int = const $1CF (used reg = )
37448 962F           B8                   01CF  mov	ax,#$1CF
37449 9632           50                         push	ax
37450                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37451 9633           E8         E745            call	_inw
37452 9636           44                         inc	sp
37453 9637           44                         inc	sp
37454                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$210-$1F2] (used reg = )
37455 9638           8986       FE10            mov	-$1F0[bp],ax
37456                                           !BCC_EOS
37457                                           ! 7959         if (vbe2_info)
37458 963C           8B86       FDF8            mov	ax,-$208[bp]
37459 9640           85C0                       test	ax,ax
37460 9642           74           4B            je  	.2E3
37461                       00009644            .2E4:
37462                                           ! 7960  {
37463                                           ! 7961                 vbe_info_block.OemSoftwareRev = 0x0002;;
37464                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$210-$1F0] (used reg = )
37465 9644           B8                   0002  mov	ax,*2
37466 9647           8986       FE12            mov	-$1EE[bp],ax
37467                                           !BCC_EOS
37468                                           !BCC_EOS
37469                                           ! 7962                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
37470                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1EC] (used reg = )
37471 964B           B8                   C000  mov	ax,#$C000
37472 964E           8986       FE16            mov	-$1EA[bp],ax
37473                                           !BCC_EOS
37474                                           ! 7963                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
37475                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$210-$1EE] (used reg = )
37476 9652           BB                   8FC0  mov	bx,#_vbebios_vendor_name
37477 9655           899E       FE14            mov	-$1EC[bp],bx
37478                                           !BCC_EOS
37479                                           ! 7964                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
37480                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1E8] (used reg = )
37481 9659           B8                   C000  mov	ax,#$C000
37482 965C           8986       FE1A            mov	-$1E6[bp],ax
37483                                           !BCC_EOS
37484                                           ! 7965                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
37485                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$210-$1EA] (used reg = )
37486 9660           BB                   8FD8  mov	bx,#_vbebios_product_name
37487 9663           899E       FE18            mov	-$1E8[bp],bx
37488                                           !BCC_EOS
37489                                           ! 7966                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
37490                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1E4] (used reg = )
37491 9667           B8                   C000  mov	ax,#$C000
37492 966A           8986       FE1E            mov	-$1E2[bp],ax
37493                                           !BCC_EOS
37494                                           ! 7967                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
37495                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$210-$1E6] (used reg = )
37496 966E           BB                   8FF1  mov	bx,#_vbebios_product_revision
37497 9671           899E       FE1C            mov	-$1E4[bp],bx
37498                                           !BCC_EOS
37499                                           ! 7968                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
37500                                           ! Debug: list int = const $200 (used reg = )
37501 9675           B8                   0200  mov	ax,#$200
37502 9678           50                         push	ax
37503                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$212-$204 (used reg = )
37504 9679           8D9E       FDFE            lea	bx,-$202[bp]
37505 967D           53                         push	bx
37506                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37507 967E           FF76         FE            push	-2[bp]
37508                                           ! Debug: list unsigned short DI = [S+$216+6] (used reg = )
37509 9681           FF76         08            push	8[bp]
37510                                           ! Debug: list unsigned short ES = [S+$218+4] (used reg = )
37511 9684           FF76         06            push	6[bp]
37512                                           ! Debug: func () void = memcpyb+0 (used reg = )
37513 9687           E8         E630            call	_memcpyb
37514 968A           83C4                   0A  add	sp,*$A
37515                                           !BCC_EOS
37516                                           ! 7969         }
37517                                           ! 7970  else
37518                                           ! 7971  {
37519 968D           EB           18            jmp .2E5
37520                       0000968F            .2E3:
37521                                           ! 7972                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
37522                                           ! Debug: list int = const $100 (used reg = )
37523 968F           B8                   0100  mov	ax,#$100
37524 9692           50                         push	ax
37525                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$212-$204 (used reg = )
37526 9693           8D9E       FDFE            lea	bx,-$202[bp]
37527 9697           53                         push	bx
37528                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37529 9698           FF76         FE            push	-2[bp]
37530                                           ! Debug: list unsigned short DI = [S+$216+6] (used reg = )
37531 969B           FF76         08            push	8[bp]
37532                                           ! Debug: list unsigned short ES = [S+$218+4] (used reg = )
37533 969E           FF76         06            push	6[bp]
37534                                           ! Debug: func () void = memcpyb+0 (used reg = )
37535 96A1           E8         E616            call	_memcpyb
37536 96A4           83C4                   0A  add	sp,*$A
37537                                           !BCC_EOS
37538                                           ! 7973  }
37539                                           ! 7974         do
37540                       000096A7            .2E5:
37541                                           ! 7975         {
37542                       000096A7            .2E8:
37543                                           ! 7976                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
37544                                           ! 7977                     (cur_info->info.BitsPerPixel <= dispi_get_max_bpp()) &&
37545                                           ! 7978                     (cur_info->info.XResolution * cur_info->info.XResolution * cur_info->info.BitsPerPixel <= vbe_info_block.TotalMemory << 19 )) {
37546                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
37547 96A7           E8         FB91            call	_dispi_get_max_xres
37548 96AA           8B9E       FDF2            mov	bx,-$20E[bp]
37549                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
37550 96AE           3B47         14            cmp	ax,$14[bx]
37551 96B1         0F82         008D            blo 	.2E9
37552                       000096B5            .2EC:
37553                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
37554 96B5           E8         FBA5            call	_dispi_get_max_bpp
37555 96B8           8B9E       FDF2            mov	bx,-$20E[bp]
37556                                           ! Debug: le int = ax+0 to unsigned char = [bx+$1B] (used reg = )
37557 96BC           50                         push	ax
37558 96BD           8A47         1B            mov	al,$1B[bx]
37559 96C0           30E4                       xor	ah,ah
37560 96C2           3B86       FDF0            cmp	ax,-$210[bp]
37561 96C6           8DA6       FDF2            lea	sp,-$20E[bp]
37562 96CA           77           76            ja  	.2E9
37563                       000096CC            .2EB:
37564                                           ! Debug: sl int = const $13 to unsigned short vbe_info_block = [S+$210-$1F2] (used reg = )
37565 96CC           8B86       FE10            mov	ax,-$1F0[bp]
37566 96D0           31C0                       xor	ax,ax
37567 96D2           50                         push	ax
37568 96D3           8B9E       FDF2            mov	bx,-$20E[bp]
37569 96D7           8BB6       FDF2            mov	si,-$20E[bp]
37570 96DB           8BBE       FDF2            mov	di,-$20E[bp]
37571                                           ! Debug: mul unsigned short = [si+$14] to unsigned short = [di+$14] (used reg = bx)
37572 96DF           53                         push	bx
37573 96E0           8B45         14            mov	ax,$14[di]
37574 96E3           8B4C         14            mov	cx,$14[si]
37575 96E6           F7E9                       imul	cx
37576 96E8           5B                         pop	bx
37577                                           ! Debug: mul unsigned char = [bx+$1B] to unsigned int = ax+0 (used reg = )
37578 96E9           89C6                       mov	si,ax
37579 96EB           8A47         1B            mov	al,$1B[bx]
37580 96EE           30E4                       xor	ah,ah
37581 96F0           89C3                       mov	bx,ax
37582 96F2           89F0                       mov	ax,si
37583 96F4           89D9                       mov	cx,bx
37584 96F6           F7E9                       imul	cx
37585                                           ! Debug: le unsigned int (temp) = [S+$212-$212] to unsigned int = ax+0 (used reg = )
37586 96F8           3B86       FDF0            cmp	ax,-$210[bp]
37587 96FC           8DA6       FDF2            lea	sp,-$20E[bp]
37588 9700           77           40            ja  	.2E9
37589                       00009702            .2EA:
37590                                           ! 7979                   printf("VBE found mode 
37591                                           ! 7979 %x => %x\n", cur_info->mode,cur_mode);
37592                                           ! Debug: list unsigned short cur_mode = [S+$210-$20C] (used reg = )
37593 9702           FFB6       FDF6            push	-$20A[bp]
37594 9706           8B9E       FDF2            mov	bx,-$20E[bp]
37595                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37596 970A           FF37                       push	[bx]
37597                                           ! Debug: list * char = .2ED+0 (used reg = )
37598 970C           BB                   9FB7  mov	bx,#.2ED
37599 970F           53                         push	bx
37600                                           ! Debug: func () void = printf+0 (used reg = )
37601 9710           E8         E6B2            call	_printf
37602 9713           83C4                   06  add	sp,*6
37603                                           !BCC_EOS
37604                                           ! 7980                   write_word(ES, DI + cur_ptr, cur_info->mode);
37605 9716           8B9E       FDF2            mov	bx,-$20E[bp]
37606                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37607 971A           FF37                       push	[bx]
37608                                           ! Debug: add unsigned short cur_ptr = [S+$212-$20E] to unsigned short DI = [S+$212+6] (used reg = )
37609 971C           8B46         08            mov	ax,8[bp]
37610 971F           0386       FDF4            add	ax,-$20C[bp]
37611                                           ! Debug: list unsigned int = ax+0 (used reg = )
37612 9723           50                         push	ax
37613                                           ! Debug: list unsigned short ES = [S+$214+4] (used reg = )
37614 9724           FF76         06            push	6[bp]
37615                                           ! Debug: func () void = write_word+0 (used reg = )
37616 9727           E8         E62E            call	_write_word
37617 972A           83C4                   06  add	sp,*6
37618                                           !BCC_EOS
37619                                           ! 7981                   cur_mode++;
37620                                           ! Debug: postinc unsigned short cur_mode = [S+$210-$20C] (used reg = )
37621 972D           8B86       FDF6            mov	ax,-$20A[bp]
37622 9731           40                         inc	ax
37623 9732           8986       FDF6            mov	-$20A[bp],ax
37624                                           !BCC_EOS
37625                                           ! 7982                   cur_ptr+=2;
37626                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$210-$20E] (used reg = )
37627 9736           8B86       FDF4            mov	ax,-$20C[bp]
37628 973A           40                         inc	ax
37629 973B           40                         inc	ax
37630 973C           8986       FDF4            mov	-$20C[bp],ax
37631                                           !BCC_EOS
37632                                           ! 7983                 } else {
37633 9740           EB           21            jmp .2EE
37634                       00009742            .2E9:
37635                                           ! 7984                   printf("VBE mode %x (xres=%x / bpp=%02x) not supported \n", cur_info->mode,cur_info->info.XResolution,cur_info->info.BitsPerPixel);
37636 9742           8B9E       FDF2            mov	bx,-$20E[bp]
37637                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
37638 9746           8A47         1B            mov	al,$1B[bx]
37639 9749           30E4                       xor	ah,ah
37640 974B           50                         push	ax
37641 974C           8B9E       FDF2            mov	bx,-$20E[bp]
37642                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
37643 9750           FF77         14            push	$14[bx]
37644 9753           8B9E       FDF2            mov	bx,-$20E[bp]
37645                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37646 9757           FF37                       push	[bx]
37647                                           ! Debug: list * char = .2EF+0 (used reg = )
37648 9759           BB                   9F86  mov	bx,#.2EF
37649 975C           53                         push	bx
37650                                           ! Debug: func () void = printf+0 (used reg = )
37651 975D           E8         E665            call	_printf
37652 9760           83C4                   08  add	sp,*8
37653                                           !BCC_EOS
37654                                           ! 7985                 }
37655                                           ! 7986                 cur_info++;
37656                       00009763            .2EE:
37657                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$210-$210] (used reg = )
37658 9763           8B9E       FDF2            mov	bx,-$20E[bp]
37659 9767           83C3                   44  add	bx,*$44
37660 976A           899E       FDF2            mov	-$20E[bp],bx
37661                                           !BCC_EOS
37662                                           ! 7987         } while (cur_info->mode != 0xFFFF);
37663                       0000976E            .2E7:
37664 976E           8B9E       FDF2            mov	bx,-$20E[bp]
37665                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
37666 9772           8B1F                       mov	bx,[bx]
37667 9774           81FB                 FFFF  cmp	bx,#$FFFF
37668 9778         0F85         FF2B            bne 	.2E8
37669                       0000977C            .2F0:
37670                                           !BCC_EOS
37671                                           ! 7988         write_word(ES, DI + cur_ptr, cur_info->mode);
37672                       0000977C            .2E6:
37673 977C           8B9E       FDF2            mov	bx,-$20E[bp]
37674                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37675 9780           FF37                       push	[bx]
37676                                           ! Debug: add unsigned short cur_ptr = [S+$212-$20E] to unsigned short DI = [S+$212+6] (used reg = )
37677 9782           8B46         08            mov	ax,8[bp]
37678 9785           0386       FDF4            add	ax,-$20C[bp]
37679                                           ! Debug: list unsigned int = ax+0 (used reg = )
37680 9789           50                         push	ax
37681                                           ! Debug: list unsigned short ES = [S+$214+4] (used reg = )
37682 978A           FF76         06            push	6[bp]
37683                                           ! Debug: func () void = write_word+0 (used reg = )
37684 978D           E8         E5C8            call	_write_word
37685 9790           83C4                   06  add	sp,*6
37686                                           !BCC_EOS
37687                                           ! 7989         result = 0x4f;
37688                                           ! Debug: eq int = const $4F to unsigned short result = [S+$210-$208] (used reg = )
37689 9793           B8                   004F  mov	ax,*$4F
37690 9796           8986       FDFA            mov	-$206[bp],ax
37691                                           !BCC_EOS
37692                                           ! 7990         write_word(ss, AX, result);
37693                                           ! Debug: list unsigned short result = [S+$210-$208] (used reg = )
37694 979A           FFB6       FDFA            push	-$206[bp]
37695                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
37696 979E           FF76         04            push	4[bp]
37697                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37698 97A1           FF76         FE            push	-2[bp]
37699                                           ! Debug: func () void = write_word+0 (used reg = )
37700 97A4           E8         E5B1            call	_write_word
37701 97A7           83C4                   06  add	sp,*6
37702                                           !BCC_EOS
37703                                           ! 7991 }
37704 97AA           89EC                       mov	sp,bp
37705 97AC           5D                         pop	bp
37706 97AD           C3                         ret
37707                                           ! 7992 void vbe_biosfn_return_mode_information(AX, CX, ES, DI)
37708                                           ! Register BX used in function vbe_biosfn_return_controller_information
37709                                           ! 7993 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
37710                                           export	_vbe_biosfn_return_mode_information
37711                       000097AE            _vbe_biosfn_return_mode_information:
37712                                           !BCC_EOS
37713                                           !BCC_EOS
37714                                           !BCC_EOS
37715                                           !BCC_EOS
37716                                           ! 7994 {
37717                                           ! 7995         Bit16u result=0x0100;
37718 97AE           55                         push	bp
37719 97AF           89E5                       mov	bp,sp
37720 97B1           4C                         dec	sp
37721 97B2           4C                         dec	sp
37722                                           ! Debug: eq int = const $100 to unsigned short result = [S+4-4] (used reg = )
37723 97B3           B8                   0100  mov	ax,#$100
37724 97B6           8946         FE            mov	-2[bp],ax
37725                                           !BCC_EOS
37726                                           ! 7996         Bit16u ss=get_SS();
37727 97B9           4C                         dec	sp
37728 97BA           4C                         dec	sp
37729                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37730 97BB           E8         E5E8            call	_get_SS
37731                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
37732 97BE           8946         FC            mov	-4[bp],ax
37733                                           !BCC_EOS
37734                                           ! 7997         ModeInfoBlock info;
37735                                           !BCC_EOS
37736                                           ! 7998         ModeInfoListItem *cur_info;
37737                                           !BCC_EOS
37738                                           ! 7999         Boolean using_lfb;
37739                                           !BCC_EOS
37740                                           ! 8000         printf("VBE vbe_biosfn_return_mode_information ES%x DI%x CX%x\n",ES,DI,CX);
37741 97C1           81C4                 FEFC  add	sp,#-$104
37742                                           ! Debug: list unsigned short CX = [S+$10A+4] (used reg = )
37743 97C5           FF76         06            push	6[bp]
37744                                           ! Debug: list unsigned short DI = [S+$10C+8] (used reg = )
37745 97C8           FF76         0A            push	$A[bp]
37746                                           ! Debug: list unsigned short ES = [S+$10E+6] (used reg = )
37747 97CB           FF76         08            push	8[bp]
37748                                           ! Debug: list * char = .2F1+0 (used reg = )
37749 97CE           BB                   9F4F  mov	bx,#.2F1
37750 97D1           53                         push	bx
37751                                           ! Debug: func () void = printf+0 (used reg = )
37752 97D2           E8         E5F0            call	_printf
37753 97D5           83C4                   08  add	sp,*8
37754                                           !BCC_EOS
37755                                           ! 8001         using_lfb=((CX & 0x4000) == 0x4000);
37756                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$10A+4] (used reg = )
37757 97D8           8B46         06            mov	ax,6[bp]
37758 97DB           25                   4000  and	ax,#$4000
37759                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
37760 97DE           3D                   4000  cmp	ax,#$4000
37761 97E1           75           04            jne	.2F2
37762 97E3           B0                     01  mov	al,*1
37763 97E5           EB           02            jmp	.2F3
37764                       000097E7            .2F2:
37765 97E7           30C0                       xor	al,al
37766                       000097E9            .2F3:
37767                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$10A-$10A] (used reg = )
37768 97E9           30E4                       xor	ah,ah
37769 97EB           8986       FEF8            mov	-$108[bp],ax
37770                                           !BCC_EOS
37771                                           ! 8002         CX = (CX & 0x1ff);
37772                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$10A+4] (used reg = )
37773 97EF           8B46         06            mov	ax,6[bp]
37774 97F2           25                   01FF  and	ax,#$1FF
37775                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$10A+4] (used reg = )
37776 97F5           8946         06            mov	6[bp],ax
37777                                           !BCC_EOS
37778                                           ! 8003         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
37779                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$10A-$108 (used reg = )
37780 97F8           8D9E       FEFA            lea	bx,-$106[bp]
37781 97FC           53                         push	bx
37782                                           ! Debug: list unsigned short using_lfb = [S+$10C-$10A] (used reg = )
37783 97FD           FFB6       FEF8            push	-$108[bp]
37784                                           ! Debug: list unsigned short CX = [S+$10E+4] (used reg = )
37785 9801           FF76         06            push	6[bp]
37786                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
37787 9804           E8         FC4A            call	_mode_info_find_mode
37788 9807           83C4                   06  add	sp,*6
37789                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$10A-$108] (used reg = )
37790 980A           8986       FEFA            mov	-$106[bp],ax
37791                                           !BCC_EOS
37792                                           ! 8004         if (cur_info != 0)
37793                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$10A-$108] (used reg = )
37794 980E           8B86       FEFA            mov	ax,-$106[bp]
37795 9812           85C0                       test	ax,ax
37796 9814         0F84         00A7            beq 	.2F4
37797                       00009818            .2F5:
37798                                           ! 8005         {
37799                                           ! 8006                 printf("VBE found mode %x\n",CX);
37800                                           ! Debug: list unsigned short CX = [S+$10A+4] (used reg = )
37801 9818           FF76         06            push	6[bp]
37802                                           ! Debug: list * char = .2F6+0 (used reg = )
37803 981B           BB                   9F3C  mov	bx,#.2F6
37804 981E           53                         push	bx
37805                                           ! Debug: func () void = printf+0 (used reg = )
37806 981F           E8         E5A3            call	_printf
37807 9822           83C4                   04  add	sp,*4
37808                                           !BCC_EOS
37809                                           ! 8007                 memsetb(ss, &info, 0, sizeof(ModeInfoBlock));
37810                                           ! Debug: list int = const $100 (used reg = )
37811 9825           B8                   0100  mov	ax,#$100
37812 9828           50                         push	ax
37813                                           ! Debug: list int = const 0 (used reg = )
37814 9829           31C0                       xor	ax,ax
37815 982B           50                         push	ax
37816                                           ! Debug: list * struct ModeInfoBlock info = S+$10E-$106 (used reg = )
37817 982C           8D9E       FEFC            lea	bx,-$104[bp]
37818 9830           53                         push	bx
37819                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
37820 9831           FF76         FC            push	-4[bp]
37821                                           ! Debug: func () void = memsetb+0 (used reg = )
37822 9834           E8         E439            call	_memsetb
37823 9837           83C4                   08  add	sp,*8
37824                                           !BCC_EOS
37825                                           ! 8008                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
37826                                           ! Debug: list int = const $42 (used reg = )
37827 983A           B8                   0042  mov	ax,*$42
37828 983D           50                         push	ax
37829 983E           8B9E       FEFA            mov	bx,-$106[bp]
37830                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
37831                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
37832 9842           43                         inc	bx
37833 9843           43                         inc	bx
37834 9844           53                         push	bx
37835                                           ! Debug: list unsigned int = const $C000 (used reg = )
37836 9845           B8                   C000  mov	ax,#$C000
37837 9848           50                         push	ax
37838                                           ! Debug: list * struct ModeInfoBlock info = S+$110-$106 (used reg = )
37839 9849           8D9E       FEFC            lea	bx,-$104[bp]
37840 984D           53                         push	bx
37841                                           ! Debug: list unsigned short ss = [S+$112-6] (used reg = )
37842 984E           FF76         FC            push	-4[bp]
37843                                           ! Debug: func () void = memcpyb+0 (used reg = )
37844 9851           E8         E466            call	_memcpyb
37845 9854           83C4                   0A  add	sp,*$A
37846                                           !BCC_EOS
37847                                           ! 8009                 if (using_lfb) {
37848 9857           8B86       FEF8            mov	ax,-$108[bp]
37849 985B           85C0                       test	ax,ax
37850 985D           74           06            je  	.2F7
37851                       0000985F            .2F8:
37852                                           ! 8010                   info.NumberOfBanks = 1;
37853                                           ! Debug: eq int = const 1 to unsigned char info = [S+$10A-$EC] (used reg = )
37854 985F           B0                     01  mov	al,*1
37855 9861           8886       FF16            mov	-$EA[bp],al
37856                                           !BCC_EOS
37857                                           ! 8011                 }
37858                                           ! 8012                 if (info.WinAAttributes & 0x01) {
37859                       00009865            .2F7:
37860                                           ! Debug: and int = const 1 to unsigned char info = [S+$10A-$104] (used reg = )
37861 9865           8A86       FEFE            mov	al,-$102[bp]
37862 9869           24                     01  and	al,*1
37863 986B           84C0                       test	al,al
37864 986D           74           14            je  	.2F9
37865                       0000986F            .2FA:
37866                                           ! 8013                   info.WinFuncPtr = 0xC0000000UL;
37867                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$10A-$FA] (used reg = )
37868 986F           31C0                       xor	ax,ax
37869 9871           BB                   C000  mov	bx,#$C000
37870 9874           8986       FF08            mov	-$F8[bp],ax
37871 9878           899E       FF0A            mov	-$F6[bp],bx
37872                                           !BCC_EOS
37873                                           ! 8014                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
37874                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
37875                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$10A-$FA] (used reg = )
37876 987C           BB                   92BB  mov	bx,#_dispi_set_bank_farcall
37877 987F           899E       FF08            mov	-$F8[bp],bx
37878                                           !BCC_EOS
37879                                           ! 8015                 }
37880                                           ! 8016                 outw(0x01CE,0xb);
37881                       00009883            .2F9:
37882                                           ! Debug: list int = const $B (used reg = )
37883 9883           B8                   000B  mov	ax,*$B
37884 9886           50                         push	ax
37885                                           ! Debug: list int = const $1CE (used reg = )
37886 9887           B8                   01CE  mov	ax,#$1CE
37887 988A           50                         push	ax
37888                                           ! Debug: func () void = outw+0 (used reg = )
37889 988B           E8         E508            call	_outw
37890 988E           83C4                   04  add	sp,*4
37891                                           !BCC_EOS
37892                                           ! 8017                 info.PhysBasePtr = inw(0x01CF);
37893                                           ! Debug: list int = const $1CF (used reg = )
37894 9891           B8                   01CF  mov	ax,#$1CF
37895 9894           50                         push	ax
37896                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37897 9895           E8         E4E3            call	_inw
37898 9898           44                         inc	sp
37899 9899           44                         inc	sp
37900                                           ! Debug: eq unsigned short = ax+0 to unsigned long info = [S+$10A-$DE] (used reg = )
37901 989A           31DB                       xor	bx,bx
37902 989C           8986       FF24            mov	-$DC[bp],ax
37903 98A0           899E       FF26            mov	-$DA[bp],bx
37904                                           !BCC_EOS
37905                                           ! 8018                 info.PhysBasePtr = info.PhysBasePtr << 16;
37906                                           ! Debug: sl int = const $10 to unsigned long info = [S+$10A-$DE] (used reg = )
37907 98A4           8B86       FF24            mov	ax,-$DC[bp]
37908 98A8           8B9E       FF26            mov	bx,-$DA[bp]
37909 98AC           93                         xchg	bx,ax
37910 98AD           31C0                       xor	ax,ax
37911                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$10A-$DE] (used reg = )
37912 98AF           8986       FF24            mov	-$DC[bp],ax
37913 98B3           899E       FF26            mov	-$DA[bp],bx
37914                                           !BCC_EOS
37915                                           ! 8019                 result = 0x4f;
37916                                           ! Debug: eq int = const $4F to unsigned short result = [S+$10A-4] (used reg = )
37917 98B7           B8                   004F  mov	ax,*$4F
37918 98BA           8946         FE            mov	-2[bp],ax
37919                                           !BCC_EOS
37920                                           ! 8020         }
37921                                           ! 8021         else
37922                                           ! 8022         {
37923 98BD           EB           13            jmp .2FB
37924                       000098BF            .2F4:
37925                                           ! 8023                 printf("VBE *NOT* found mode %x\n",CX);
37926                                           ! Debug: list unsigned short CX = [S+$10A+4] (used reg = )
37927 98BF           FF76         06            push	6[bp]
37928                                           ! Debug: list * char = .2FC+0 (used reg = )
37929 98C2           BB                   9F23  mov	bx,#.2FC
37930 98C5           53                         push	bx
37931                                           ! Debug: func () void = printf+0 (used reg = )
37932 98C6           E8         E4FC            call	_printf
37933 98C9           83C4                   04  add	sp,*4
37934                                           !BCC_EOS
37935                                           ! 8024                 result = 0x100;
37936                                           ! Debug: eq int = const $100 to unsigned short result = [S+$10A-4] (used reg = )
37937 98CC           B8                   0100  mov	ax,#$100
37938 98CF           8946         FE            mov	-2[bp],ax
37939                                           !BCC_EOS
37940                                           ! 8025         }
37941                                           ! 8026         if (result == 0x4f)
37942                       000098D2            .2FB:
37943                                           ! Debug: logeq int = const $4F to unsigned short result = [S+$10A-4] (used reg = )
37944 98D2           8B46         FE            mov	ax,-2[bp]
37945 98D5           3D                   004F  cmp	ax,*$4F
37946 98D8           75           18            jne 	.2FD
37947                       000098DA            .2FE:
37948                                           ! 8027         {
37949                                           ! 8028                 memcpyb(ES, DI, ss, &info, sizeof(info));
37950                                           ! Debug: list int = const $100 (used reg = )
37951 98DA           B8                   0100  mov	ax,#$100
37952 98DD           50                         push	ax
37953                                           ! Debug: list * struct ModeInfoBlock info = S+$10C-$106 (used reg = )
37954 98DE           8D9E       FEFC            lea	bx,-$104[bp]
37955 98E2           53                         push	bx
37956                                           ! Debug: list unsigned short ss = [S+$10E-6] (used reg = )
37957 98E3           FF76         FC            push	-4[bp]
37958                                           ! Debug: list unsigned short DI = [S+$110+8] (used reg = )
37959 98E6           FF76         0A            push	$A[bp]
37960                                           ! Debug: list unsigned short ES = [S+$112+6] (used reg = )
37961 98E9           FF76         08            push	8[bp]
37962                                           ! Debug: func () void = memcpyb+0 (used reg = )
37963 98EC           E8         E3CB            call	_memcpyb
37964 98EF           83C4                   0A  add	sp,*$A
37965                                           !BCC_EOS
37966                                           ! 8029         }
37967                                           ! 8030         write_word(ss, AX, result);
37968                       000098F2            .2FD:
37969                                           ! Debug: list unsigned short result = [S+$10A-4] (used reg = )
37970 98F2           FF76         FE            push	-2[bp]
37971                                           ! Debug: list * unsigned short AX = [S+$10C+2] (used reg = )
37972 98F5           FF76         04            push	4[bp]
37973                                           ! Debug: list unsigned short ss = [S+$10E-6] (used reg = )
37974 98F8           FF76         FC            push	-4[bp]
37975                                           ! Debug: func () void = write_word+0 (used reg = )
37976 98FB           E8         E45A            call	_write_word
37977 98FE           83C4                   06  add	sp,*6
37978                                           !BCC_EOS
37979                                           ! 8031 }
37980 9901           89EC                       mov	sp,bp
37981 9903           5D                         pop	bp
37982 9904           C3                         ret
37983                                           ! 8032 void vbe_biosfn_set_mode(AX, BX, ES, DI)
37984                                           ! Register BX used in function vbe_biosfn_return_mode_information
37985                                           ! 8033 Bit16u *
37986                                           export	_vbe_biosfn_set_mode
37987                       00009905            _vbe_biosfn_set_mode:
37988                                           ! 8033 AX;Bit16u BX; Bit16u ES;Bit16u DI;
37989                                           !BCC_EOS
37990                                           !BCC_EOS
37991                                           !BCC_EOS
37992                                           !BCC_EOS
37993                                           ! 8034 {
37994                                           ! 8035         Bit16u ss = get_SS();
37995 9905           55                         push	bp
37996 9906           89E5                       mov	bp,sp
37997 9908           4C                         dec	sp
37998 9909           4C                         dec	sp
37999                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38000 990A           E8         E499            call	_get_SS
38001                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38002 990D           8946         FE            mov	-2[bp],ax
38003                                           !BCC_EOS
38004                                           ! 8036         Bit16u result;
38005                                           !BCC_EOS
38006                                           ! 8037         ModeInfoListItem *cur_info;
38007                                           !BCC_EOS
38008                                           ! 8038         Boolean using_lfb;
38009                                           !BCC_EOS
38010                                           ! 8039         Bit8u no_clear;
38011                                           !BCC_EOS
38012                                           ! 8040         Bit8u lfb_flag;
38013                                           !BCC_EOS
38014                                           ! 8041         using_lfb=((BX & 0x4000) == 0x4000);
38015 9910           83C4                   F8  add	sp,*-8
38016                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
38017 9913           8B46         06            mov	ax,6[bp]
38018 9916           25                   4000  and	ax,#$4000
38019                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
38020 9919           3D                   4000  cmp	ax,#$4000
38021 991C           75           04            jne	.2FF
38022 991E           B0                     01  mov	al,*1
38023 9920           EB           02            jmp	.300
38024                       00009922            .2FF:
38025 9922           30C0                       xor	al,al
38026                       00009924            .300:
38027                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
38028 9924           30E4                       xor	ah,ah
38029 9926           8946         F8            mov	-8[bp],ax
38030                                           !BCC_EOS
38031                                           ! 8042         lfb_flag=using_lfb?0x40:0;
38032 9929           8B46         F8            mov	ax,-8[bp]
38033 992C           85C0                       test	ax,ax
38034 992E           74           04            je  	.301
38035                       00009930            .302:
38036 9930           B0                     40  mov	al,*$40
38037 9932           EB           02            jmp .303
38038                       00009934            .301:
38039 9934           30C0                       xor	al,al
38040                       00009936            .303:
38041                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
38042 9936           8846         F6            mov	-$A[bp],al
38043                                           !BCC_EOS
38044                                           ! 8043         no_clear=((BX & 0x8000) == 0x8000)?0x80:0;
38045                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
38046 9939           8B46         06            mov	ax,6[bp]
38047 993C           25                   8000  and	ax,#$8000
38048                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
38049 993F           3D                   8000  cmp	ax,#$8000
38050 9942           75           04            jne 	.304
38051                       00009944            .305:
38052 9944           B0                     80  mov	al,#$80
38053 9946           EB           02            jmp .306
38054                       00009948            .304:
38055 9948           30C0                       xor	al,al
38056                       0000994A            .306:
38057                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
38058 994A           8846         F7            mov	-9[bp],al
38059                                           !BCC_EOS
38060                                           ! 8044         BX = (BX & 0x1ff);
38061                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
38062 994D           8B46         06            mov	ax,6[bp]
38063 9950           25                   01FF  and	ax,#$1FF
38064                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
38065 9953           8946         06            mov	6[bp],ax
38066                                           !BCC_EOS
38067                                           ! 8045         if (BX<0x0100)
38068                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
38069 9956           8B46         06            mov	ax,6[bp]
38070 9959           3D                   0100  cmp	ax,#$100
38071 995C           73           23            jae 	.307
38072                       0000995E            .308:
38073                                           ! 8046         {
38074                                           ! 8047                 Bit8u mode;
38075                                           !BCC_EOS
38076                                           ! 8048                 dispi_set_enable(0x00);
38077 995E           4C                         dec	sp
38078 995F           4C                         dec	sp
38079                                           ! Debug: list int = const 0 (used reg = )
38080 9960           31C0                       xor	ax,ax
38081 9962           50                         push	ax
38082                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
38083 9963           E8         F919            call	_dispi_set_enable
38084 9966           44                         inc	sp
38085 9967           44                         inc	sp
38086                                           !BCC_EOS
38087                                           ! 8049                 mode=(BX & 0xff);
38088                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
38089 9968           8A46         06            mov	al,6[bp]
38090                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
38091 996B           8846         F5            mov	-$B[bp],al
38092                                           !BCC_EOS
38093                                           ! 8050                 biosfn_set_video_mode(mode);
38094                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
38095 996E           8A46         F5            mov	al,-$B[bp]
38096 9971           30E4                       xor	ah,ah
38097 9973           50                         push	ax
38098                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
38099 9974           E8         A27E            call	_biosfn_set_video_mode
38100 9977           44                         inc	sp
38101 9978           44                         inc	sp
38102                                           !BCC_EOS
38103                                           ! 8051                 result = 0x4f;
38104                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
38105 9979           B8                   004F  mov	ax,*$4F
38106 997C           8946         FC            mov	-4[bp],ax
38107                                           !BCC_EOS
38108                                           ! 8052         }
38109 997F           44                         inc	sp
38110 9980           44                         inc	sp
38111                                           ! 8053         cur_info = mode_info_find_mode(BX, using_lfb, &cur_info);
38112                       00009981            .307:
38113                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
38114 9981           8D5E         FA            lea	bx,-6[bp]
38115 9984           53                         push	bx
38116                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
38117 9985           FF76         F8            push	-8[bp]
38118                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
38119 9988           FF76         06            push	6[bp]
38120                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
38121 998B           E8         FAC3            call	_mode_info_find_mode
38122 998E           83C4                   06  add	sp,*6
38123                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
38124 9991           8946         FA            mov	-6[bp],ax
38125                                           !BCC_EOS
38126                                           ! 8054         if (cur_info != 0)
38127                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
38128 9994           8B46         FA            mov	ax,-6[bp]
38129 9997           85C0                       test	ax,ax
38130 9999         0F84         00B5            beq 	.309
38131                       0000999D            .30A:
38132                                           ! 8055         {
38133                                           ! 8056                 printf("VBE found mode %x, setting:\n", BX);
38134                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
38135 999D           FF76         06            push	6[bp]
38136                                           ! Debug: list * char = .30B+0 (used reg = )
38137 99A0           BB                   9F06  mov	bx,#.30B
38138 99A3           53                         push	bx
38139                                           ! Debug: func () void = printf+0 (used reg = )
38140 99A4           E8         E41E            call	_printf
38141 99A7           83C4                   04  add	sp,*4
38142                                           !BCC_EOS
38143                                           ! 8057                 printf("\txres%x yres%x bpp%x\n",
38144                                           ! 8058                         cur_info->info.XResolution,
38145                                           ! 8059                         cur_info->info.YResolution,
38146                                           ! 8060                         cur_info->info.BitsPerPixel);
38147 99AA           8B5E         FA            mov	bx,-6[bp]
38148                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
38149 99AD           8A47         1B            mov	al,$1B[bx]
38150 99B0           30E4                       xor	ah,ah
38151 99B2           50                         push	ax
38152 99B3           8B5E         FA            mov	bx,-6[bp]
38153                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
38154 99B6           FF77         16            push	$16[bx]
38155 99B9           8B5E         FA            mov	bx,-6[bp]
38156                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
38157 99BC           FF77         14            push	$14[bx]
38158                                           ! Debug: list * char = .30C+0 (used reg = )
38159 99BF           BB                   9EF0  mov	bx,#.30C
38160 99C2           53                         push	bx
38161                                           ! Debug: func () void = printf+0 (used reg = )
38162 99C3           E8         E3FF            call	_printf
38163 99C6           83C4                   08  add	sp,*8
38164                                           !BCC_EOS
38165                                           ! 8061                 dispi_set_enable(0x00);
38166                                           ! Debug: list int = const 0 (used reg = )
38167 99C9           31C0                       xor	ax,ax
38168 99CB           50                         push	ax
38169                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
38170 99CC           E8         F8B0            call	_dispi_set_enable
38171 99CF           44                         inc	sp
38172 99D0           44                         inc	sp
38173                                           !BCC_EOS
38174                                           ! 8062                 if (cur_info->info.BitsPerPixel == 4)
38175 99D1           8B5E         FA            mov	bx,-6[bp]
38176                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
38177 99D4           8A47         1B            mov	al,$1B[bx]
38178 99D7           3C                     04  cmp	al,*4
38179 99D9           75           09            jne 	.30D
38180                       000099DB            .30E:
38181                                           ! 8063                 {
38182                                           ! 8064                   biosfn_set_video_mode(0x6a);
38183                                           ! Debug: list int = const $6A (used reg = )
38184 99DB           B8                   006A  mov	ax,*$6A
38185 99DE           50                         push	ax
38186                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
38187 99DF           E8         A213            call	_biosfn_set_video_mode
38188 99E2           44                         inc	sp
38189 99E3           44                         inc	sp
38190                                           !BCC_EOS
38191                                           ! 8065                 }
38192                                           ! 8066                 dispi_set_bpp(cur_info->info.BitsPerPixel);
38193                       000099E4            .30D:
38194 99E4           8B5E         FA            mov	bx,-6[bp]
38195                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
38196 99E7           8A47         1B            mov	al,$1B[bx]
38197 99EA           30E4                       xor	ah,ah
38198 99EC           50                         push	ax
38199                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
38200 99ED           E8         F814            call	_dispi_set_bpp
38201 99F0           44                         inc	sp
38202 99F1           44                         inc	sp
38203                                           !BCC_EOS
38204                                           ! 8067                 dispi_set_xres(cur_info->info.XResolution);
38205 99F2           8B5E         FA            mov	bx,-6[bp]
38206                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
38207 99F5           FF77         14            push	$14[bx]
38208                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
38209 99F8           E8         F7D4            call	_dispi_set_xres
38210 99FB           44                         inc	sp
38211 99FC           44                         inc	sp
38212                                           !BCC_EOS
38213                                           ! 8068                 dispi_set_yres(cur_info->info.YResolution);
38214 99FD           8B5E         FA            mov	bx,-6[bp]
38215                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
38216 9A00           FF77         16            push	$16[bx]
38217                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
38218 9A03           E8         F7E0            call	_dispi_set_yres
38219 9A06           44                         inc	sp
38220 9A07           44                         inc	sp
38221                                           !BCC_EOS
38222                                           ! 8069                 dispi_set_bank(0);
38223                                           ! Debug: list int = const 0 (used reg = )
38224 9A08           31C0                       xor	ax,ax
38225 9A0A           50                         push	ax
38226                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
38227 9A0B           E8         F88F            call	_dispi_set_bank
38228 9A0E           44                         inc	sp
38229 9A0F           44                         inc	sp
38230                                           !BCC_EOS
38231                                           ! 8070                 dispi_set_enable(0x01 | no_clear | lfb_flag);
38232                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
38233                                           ! Debug: expression subtree swapping
38234 9A10           8A46         F7            mov	al,-9[bp]
38235 9A13           0C                     01  or	al,*1
38236                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
38237 9A15           0A46         F6            or	al,-$A[bp]
38238                                           ! Debug: list unsigned char = al+0 (used reg = )
38239 9A18           30E4                       xor	ah,ah
38240 9A1A           50                         push	ax
38241                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
38242 9A1B           E8         F861            call	_dispi_set_enable
38243 9A1E           44                         inc	sp
38244 9A1F           44                         inc	sp
38245                                           !BCC_EOS
38246                                           ! 8071                 vga_compat_setup();
38247                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
38248 9A20           E8         F957            call	_vga_compat_setup
38249                                           !BCC_EOS
38250                                           ! 8072                 write_word(0x40,0xBA,BX);
38251                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
38252 9A23           FF76         06            push	6[bp]
38253                                           ! Debug: list int = const $BA (used reg = )
38254 9A26           B8                   00BA  mov	ax,#$BA
38255 9A29           50                         push	ax
38256                                           ! Debug: list int = const $40 (used reg = )
38257 9A2A           B8                   0040  mov	ax,*$40
38258 9A2D           50                         push	ax
38259                                           ! Debug: func () void = write_word+0 (used reg = )
38260 9A2E           E8         E327            call	_write_word
38261 9A31           83C4                   06  add	sp,*6
38262                                           !BCC_EOS
38263                                           ! 8073                 write_byte(0x40,0x87,(0x60 | no_clear));
38264                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
38265                                           ! Debug: expression subtree swapping
38266 9A34           8A46         F7            mov	al,-9[bp]
38267 9A37           0C                     60  or	al,*$60
38268                                           ! Debug: list unsigned char = al+0 (used reg = )
38269 9A39           30E4                       xor	ah,ah
38270 9A3B           50                         push	ax
38271                                           ! Debug: list int = const $87 (used reg = )
38272 9A3C           B8                   0087  mov	ax,#$87
38273 9A3F           50                         push	ax
38274                                           ! Debug: list int = const $40 (used reg = )
38275 9A40           B8                   0040  mov	ax,*$40
38276 9A43           50                         push	ax
38277                                           ! Debug: func () void = write_byte+0 (used reg = )
38278 9A44           E8         E2F9            call	_write_byte
38279 9A47           83C4                   06  add	sp,*6
38280                                           !BCC_EOS
38281                                           ! 8074                 result = 0x4f;
38282                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
38283 9A4A           B8                   004F  mov	ax,*$4F
38284 9A4D           8946         FC            mov	-4[bp],ax
38285                                           !BCC_EOS
38286                                           ! 8075         }
38287                                           ! 8076         else
38288                                           ! 8077         {
38289 9A50           EB           21            jmp .30F
38290                       00009A52            .309:
38291                                           ! 8078                 printf("VBE *NOT* found mode %x\n" , BX);
38292                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
38293 9A52           FF76         06            push	6[bp]
38294                                           ! Debug: list * char = .310+0 (used reg = )
38295 9A55           BB                   9ED7  mov	bx,#.310
38296 9A58           53                         push	bx
38297                                           ! Debug: func () void = printf+0 (used reg = )
38298 9A59           E8         E369            call	_printf
38299 9A5C           83C4                   04  add	sp,*4
38300                                           !BCC_EOS
38301                                           ! 8079                 result = 0x100;
38302                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
38303 9A5F           B8                   0100  mov	ax,#$100
38304 9A62           8946         FC            mov	-4[bp],ax
38305                                           !BCC_EOS
38306                                           ! 8080                 if (BX == 3)
38307                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
38308 9A65           8B46         06            mov	ax,6[bp]
38309 9A68           3D                   0003  cmp	ax,*3
38310 9A6B           75           06            jne 	.311
38311                       00009A6D            .312:
38312                                           ! 8081                         result = 0x4f;
38313                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
38314 9A6D           B8                   004F  mov	ax,*$4F
38315 9A70           8946         FC            mov	-4[bp],ax
38316                                           !BCC_EOS
38317                                           ! 8082         }
38318                       00009A73            .311:
38319                                           ! 8083         write_word(ss, AX, result);
38320                       00009A73            .30F:
38321                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
38322 9A73           FF76         FC            push	-4[bp]
38323                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
38324 9A76           FF76         04            push	4[bp]
38325                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
38326 9A79           FF76         FE            push	-2[bp]
38327                                           ! Debug: func () void = write_word+0 (used reg = )
38328 9A7C           E8         E2D9            call	_write_word
38329 9A7F           83C4                   06  add	sp,*6
38330                                           !BCC_EOS
38331                                           ! 8084 }
38332 9A82           89EC                       mov	sp,bp
38333 9A84           5D                         pop	bp
38334 9A85           C3                         ret
38335                                           ! 8085 #asm
38336                                           !BCC_ASM
38337                       00000008            _vbe_biosfn_set_mode.DI	set	8
38338                       00000006            _vbe_biosfn_set_mode.ES	set	6
38339                       00000002            _vbe_biosfn_set_mode.AX	set	2
38340                       00000004            _vbe_biosfn_set_mode.BX	set	4
38341                       00009A86            vbe_biosfn_return_current_mode:
38342 9A86           1E                           push ds
38343 9A87           B8                   0040    mov ax, # 0x40
38344 9A8A           8ED8                         mov ds, ax
38345 9A8C           E8         F800              call dispi_get_enable
38346 9A8F           25                   0001    and ax, # 0x01
38347 9A92           74           09              jz no_vbe_mode
38348 9A94           BB                   00BA    mov bx, # 0xBA
38349 9A97           8B07                         mov ax, [bx]
38350 9A99           89C3                         mov bx, ax
38351 9A9B           75           09              jnz vbe_03_ok
38352                       00009A9D            no_vbe_mode:
38353 9A9D           BB                   0049    mov bx, # 0x49
38354 9AA0           8A07                         mov al, [bx]
38355 9AA2           88C3                         mov bl, al
38356 9AA4           30FF                         xor bh, bh
38357                       00009AA6            vbe_03_ok:
38358 9AA6           B8                   004F    mov ax, #0x004f
38359 9AA9           1F                           pop ds
38360 9AAA           C3                           ret
38361                                           ! 8106 endasm
38362                                           !BCC_ENDASM
38363                                           ! 8107 Bit16u vbe_biosfn_read_video_state_size()
38364                                           ! Register BX used in function vbe_biosfn_set_mode
38365                                           ! 8108 {
38366                                           export	_vbe_biosfn_read_video_state_size
38367                       00009AAB            _vbe_biosfn_read_video_state_size:
38368                                           ! 8109     return 9 * 2;
38369 9AAB           55                         push	bp
38370 9AAC           89E5                       mov	bp,sp
38371 9AAE           B8                   0012  mov	ax,*$12
38372 9AB1           5D                         pop	bp
38373 9AB2           C3                         ret
38374                                           !BCC_EOS
38375                                           ! 8110 }
38376                                           ! 8111 void vbe_biosfn_save_video_state(ES, BX)
38377                                           ! 8112      Bit16u ES; Bit16u BX;
38378                                           export	_vbe_biosfn_save_video_state
38379                       00009AB3            _vbe_biosfn_save_video_state:
38380                                           !BCC_EOS
38381                                           !BCC_EOS
38382                                           ! 8113 {
38383                                           ! 8114     Bit16u enable, i;
38384                                           !BCC_EOS
38385                                           ! 8115     outw(0x01CE,0x4);
38386 9AB3           55                         push	bp
38387 9AB4           89E5                       mov	bp,sp
38388 9AB6           83C4                   FC  add	sp,*-4
38389                                           ! Debug: list int = const 4 (used reg = )
38390 9AB9           B8                   0004  mov	ax,*4
38391 9ABC           50                         push	ax
38392                                           ! Debug: list int = const $1CE (used reg = )
38393 9ABD           B8                   01CE  mov	ax,#$1CE
38394 9AC0           50                         push	ax
38395                                           ! Debug: func () void = outw+0 (used reg = )
38396 9AC1           E8         E2D2            call	_outw
38397 9AC4           83C4                   04  add	sp,*4
38398                                           !BCC_EOS
38399                                           ! 8116     enable = inw(0x01CF);
38400                                           ! Debug: list int = const $1CF (used reg = )
38401 9AC7           B8                   01CF  mov	ax,#$1CF
38402 9ACA           50                         push	ax
38403                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38404 9ACB           E8         E2AD            call	_inw
38405 9ACE           44                         inc	sp
38406 9ACF           44                         inc	sp
38407                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38408 9AD0           8946         FE            mov	-2[bp],ax
38409                                           !BCC_EOS
38410                                           ! 8117     write_word(ES, BX, enable);
38411                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38412 9AD3           FF76         FE            push	-2[bp]
38413                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38414 9AD6           FF76         06            push	6[bp]
38415                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38416 9AD9           FF76         04            push	4[bp]
38417                                           ! Debug: func () void = write_word+0 (used reg = )
38418 9ADC           E8         E279            call	_write_word
38419 9ADF           83C4                   06  add	sp,*6
38420                                           !BCC_EOS
38421                                           ! 8118     BX += 2;
38422                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38423 9AE2           8B46         06            mov	ax,6[bp]
38424 9AE5           40                         inc	ax
38425 9AE6           40                         inc	ax
38426 9AE7           8946         06            mov	6[bp],ax
38427                                           !BCC_EOS
38428                                           ! 8119     if (!(enable & 0x01))
38429                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38430 9AEA           8A46         FE            mov	al,-2[bp]
38431 9AED           24                     01  and	al,*1
38432 9AEF           84C0                       test	al,al
38433 9AF1           75           04            jne 	.313
38434                       00009AF3            .314:
38435                                           ! 8120         return;
38436 9AF3           89EC                       mov	sp,bp
38437 9AF5           5D                         pop	bp
38438 9AF6           C3                         ret
38439                                           !BCC_EOS
38440                                           ! 8121     for(i = 0x1; i <= 0x9; i++) {
38441                       00009AF7            .313:
38442                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
38443 9AF7           B8                   0001  mov	ax,*1
38444 9AFA           8946         FC            mov	-4[bp],ax
38445                                           !BCC_EOS
38446                                           !BCC_EOS
38447 9AFD           EB           3A            jmp .317
38448                       00009AFF            .318:
38449                                           ! 8122         if (i != 0x4) {
38450                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
38451 9AFF           8B46         FC            mov	ax,-4[bp]
38452 9B02           3D                   0004  cmp	ax,*4
38453 9B05           74           2B            je  	.319
38454                       00009B07            .31A:
38455                                           ! 8123             outw(0x01CE, i);
38456                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38457 9B07           FF76         FC            push	-4[bp]
38458                                           ! Debug: list int = const $1CE (used reg = )
38459 9B0A           B8                   01CE  mov	ax,#$1CE
38460 9B0D           50                         push	ax
38461                                           ! Debug: func () void = outw+0 (used reg = )
38462 9B0E           E8         E285            call	_outw
38463 9B11           83C4                   04  add	sp,*4
38464                                           !BCC_EOS
38465                                           ! 8124             write_word(ES, BX, inw(0x01CF));
38466                                           ! Debug: list int = const $1CF (used reg = )
38467 9B14           B8                   01CF  mov	ax,#$1CF
38468 9B17           50                         push	ax
38469                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38470 9B18           E8         E260            call	_inw
38471 9B1B           44                         inc	sp
38472 9B1C           44                         inc	sp
38473                                           ! Debug: list unsigned short = ax+0 (used reg = )
38474 9B1D           50                         push	ax
38475                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38476 9B1E           FF76         06            push	6[bp]
38477                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38478 9B21           FF76         04            push	4[bp]
38479                                           ! Debug: func () void = write_word+0 (used reg = )
38480 9B24           E8         E231            call	_write_word
38481 9B27           83C4                   06  add	sp,*6
38482                                           !BCC_EOS
38483                                           ! 8125             BX += 2;
38484                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38485 9B2A           8B46         06            mov	ax,6[bp]
38486 9B2D           40                         inc	ax
38487 9B2E           40                         inc	ax
38488 9B2F           8946         06            mov	6[bp],ax
38489                                           !BCC_EOS
38490                                           ! 8126         }
38491                                           ! 8127     }
38492                       00009B32            .319:
38493                                           ! 8128 }
38494                       00009B32            .316:
38495                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38496 9B32           8B46         FC            mov	ax,-4[bp]
38497 9B35           40                         inc	ax
38498 9B36           8946         FC            mov	-4[bp],ax
38499                       00009B39            .317:
38500                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38501 9B39           8B46         FC            mov	ax,-4[bp]
38502 9B3C           3D                   0009  cmp	ax,*9
38503 9B3F           76           BE            jbe	.318
38504                       00009B41            .31B:
38505                       00009B41            .315:
38506 9B41           89EC                       mov	sp,bp
38507 9B43           5D                         pop	bp
38508 9B44           C3                         ret
38509                                           ! 8129 void vbe_biosfn_restore_video_state(ES, BX)
38510                                           ! 8130      Bit16u ES; Bit16u BX;
38511                                           export	_vbe_biosfn_restore_video_state
38512                       00009B45            _vbe_biosfn_restore_video_state:
38513                                           !BCC_EOS
38514                                           !BCC_EOS
38515                                           ! 8131 {
38516                                           ! 8132     Bit16u enable, i;
38517                                           !BCC_EOS
38518                                           ! 8133     enable = read_word(ES, BX);
38519 9B45           55                         push	bp
38520 9B46           89E5                       mov	bp,sp
38521 9B48           83C4                   FC  add	sp,*-4
38522                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38523 9B4B           FF76         06            push	6[bp]
38524                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38525 9B4E           FF76         04            push	4[bp]
38526                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38527 9B51           E8         E1D9            call	_read_word
38528 9B54           83C4                   04  add	sp,*4
38529                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38530 9B57           8946         FE            mov	-2[bp],ax
38531                                           !BCC_EOS
38532                                           ! 8134     BX += 2;
38533                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38534 9B5A           8B46         06            mov	ax,6[bp]
38535 9B5D           40                         inc	ax
38536 9B5E           40                         inc	ax
38537 9B5F           8946         06            mov	6[bp],ax
38538                                           !BCC_EOS
38539                                           ! 8135     if (!(enable & 0x01)) {
38540                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38541 9B62           8A46         FE            mov	al,-2[bp]
38542 9B65           24                     01  and	al,*1
38543 9B67           84C0                       test	al,al
38544 9B69           75           1E            jne 	.31C
38545                       00009B6B            .31D:
38546                                           ! 8136         outw(0x01CE,0x4);
38547                                           ! Debug: list int = const 4 (used reg = )
38548 9B6B           B8                   0004  mov	ax,*4
38549 9B6E           50                         push	ax
38550                                           ! Debug: list int = const $1CE (used reg = )
38551 9B6F           B8                   01CE  mov	ax,#$1CE
38552 9B72           50                         push	ax
38553                                           ! Debug: func () void = outw+0 (used reg = )
38554 9B73           E8         E220            call	_outw
38555 9B76           83C4                   04  add	sp,*4
38556                                           !BCC_EOS
38557                                           ! 8137         outw(0x01CF, enable);
38558                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38559 9B79           FF76         FE            push	-2[bp]
38560                                           ! Debug: list int = const $1CF (used reg = )
38561 9B7C           B8                   01CF  mov	ax,#$1CF
38562 9B7F           50                         push	ax
38563                                           ! Debug: func () void = outw+0 (used reg = )
38564 9B80           E8         E213            call	_outw
38565 9B83           83C4                   04  add	sp,*4
38566                                           !BCC_EOS
38567                                           ! 8138     } else {
38568 9B86           E9         00E5            br 	.31E
38569                       00009B89            .31C:
38570                                           ! 8139         outw(0x01CE, 0x1);
38571                                           ! Debug: list int = const 1 (used reg = )
38572 9B89           B8                   0001  mov	ax,*1
38573 9B8C           50                         push	ax
38574                                           ! Debug: list int = const $1CE (used reg = )
38575 9B8D           B8                   01CE  mov	ax,#$1CE
38576 9B90           50                         push	ax
38577                                           ! Debug: func () void = outw+0 (used reg = )
38578 9B91           E8         E202            call	_outw
38579 9B94           83C4                   04  add	sp,*4
38580                                           !BCC_EOS
38581                                           ! 8140         outw(0x01CF, read_word(ES, BX));
38582                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38583 9B97           FF76         06            push	6[bp]
38584                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38585 9B9A           FF76         04            push	4[bp]
38586                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38587 9B9D           E8         E18D            call	_read_word
38588 9BA0           83C4                   04  add	sp,*4
38589                                           ! Debug: list unsigned short = ax+0 (used reg = )
38590 9BA3           50                         push	ax
38591                                           ! Debug: list int = const $1CF (used reg = )
38592 9BA4           B8                   01CF  mov	ax,#$1CF
38593 9BA7           50                         push	ax
38594                                           ! Debug: func () void = outw+0 (used reg = )
38595 9BA8           E8         E1EB            call	_outw
38596 9BAB           83C4                   04  add	sp,*4
38597                                           !BCC_EOS
38598                                           ! 8141         BX += 2;
38599                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38600 9BAE           8B46         06            mov	ax,6[bp]
38601 9BB1           40                         inc	ax
38602 9BB2           40                         inc	ax
38603 9BB3           8946         06            mov	6[bp],ax
38604                                           !BCC_EOS
38605                                           ! 8142         outw(0x01CE, 0x2);
38606                                           ! Debug: list int = const 2 (used reg = )
38607 9BB6           B8                   0002  mov	ax,*2
38608 9BB9           50                         push	ax
38609                                           ! Debug: list int = const $1CE (used reg = )
38610 9BBA           B8                   01CE  mov	ax,#$1CE
38611 9BBD           50                         push	ax
38612                                           ! Debug: func () void = outw+0 (used reg = )
38613 9BBE           E8         E1D5            call	_outw
38614 9BC1           83C4                   04  add	sp,*4
38615                                           !BCC_EOS
38616                                           ! 8143         outw(0x01CF, read_word(ES, BX));
38617                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38618 9BC4           FF76         06            push	6[bp]
38619                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38620 9BC7           FF76         04            push	4[bp]
38621                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38622 9BCA           E8         E160            call	_read_word
38623 9BCD           83C4                   04  add	sp,*4
38624                                           ! Debug: list unsigned short = ax+0 (used reg = )
38625 9BD0           50                         push	ax
38626                                           ! Debug: list int = const $1CF (used reg = )
38627 9BD1           B8                   01CF  mov	ax,#$1CF
38628 9BD4           50                         push	ax
38629                                           ! Debug: func () void = outw+0 (used reg = )
38630 9BD5           E8         E1BE            call	_outw
38631 9BD8           83C4                   04  add	sp,*4
38632                                           !BCC_EOS
38633                                           ! 8144         BX += 2;
38634                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38635 9BDB           8B46         06            mov	ax,6[bp]
38636 9BDE           40                         inc	ax
38637 9BDF           40                         inc	ax
38638 9BE0           8946         06            mov	6[bp],ax
38639                                           !BCC_EOS
38640                                           ! 8145         outw(0x01CE, 0x3);
38641                                           ! Debug: list int = const 3 (used reg = )
38642 9BE3           B8                   0003  mov	ax,*3
38643 9BE6           50                         push	ax
38644                                           ! Debug: list int = const $1CE (used reg = )
38645 9BE7           B8                   01CE  mov	ax,#$1CE
38646 9BEA           50                         push	ax
38647                                           ! Debug: func () void = outw+0 (used reg = )
38648 9BEB           E8         E1A8            call	_outw
38649 9BEE           83C4                   04  add	sp,*4
38650                                           !BCC_EOS
38651                                           ! 8146         outw(0x01CF, read_word(ES, BX));
38652                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38653 9BF1           FF76         06            push	6[bp]
38654                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38655 9BF4           FF76         04            push	4[bp]
38656                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38657 9BF7           E8         E133            call	_read_word
38658 9BFA           83C4                   04  add	sp,*4
38659                                           ! Debug: list unsigned short = ax+0 (used reg = )
38660 9BFD           50                         push	ax
38661                                           ! Debug: list int = const $1CF (used reg = )
38662 9BFE           B8                   01CF  mov	ax,#$1CF
38663 9C01           50                         push	ax
38664                                           ! Debug: func () void = outw+0 (used reg = )
38665 9C02           E8         E191            call	_outw
38666 9C05           83C4                   04  add	sp,*4
38667                                           !BCC_EOS
38668                                           ! 8147         BX += 2;
38669                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38670 9C08           8B46         06            mov	ax,6[bp]
38671 9C0B           40                         inc	ax
38672 9C0C           40                         inc	ax
38673 9C0D           8946         06            mov	6[bp],ax
38674                                           !BCC_EOS
38675                                           ! 8148         outw(0x01CE,0x4);
38676                                           ! Debug: list int = const 4 (used reg = )
38677 9C10           B8                   0004  mov	ax,*4
38678 9C13           50                         push	ax
38679                                           ! Debug: list int = const $1CE (used reg = )
38680 9C14           B8                   01CE  mov	ax,#$1CE
38681 9C17           50                         push	ax
38682                                           ! Debug: func () void = outw+0 (used reg = )
38683 9C18           E8         E17B            call	_outw
38684 9C1B           83C4                   04  add	sp,*4
38685                                           !BCC_EOS
38686                                           ! 8149         outw(0x01CF, enable);
38687                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38688 9C1E           FF76         FE            push	-2[bp]
38689                                           ! Debug: list int = const $1CF (used reg = )
38690 9C21           B8                   01CF  mov	ax,#$1CF
38691 9C24           50                         push	ax
38692                                           ! Debug: func () void = outw+0 (used reg = )
38693 9C25           E8         E16E            call	_outw
38694 9C28           83C4                   04  add	sp,*4
38695                                           !BCC_EOS
38696                                           ! 8150         for(i = 0x5; i <= 0x9; i++) {
38697                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
38698 9C2B           B8                   0005  mov	ax,*5
38699 9C2E           8946         FC            mov	-4[bp],ax
38700                                           !BCC_EOS
38701                                           !BCC_EOS
38702 9C31           EB           33            jmp .321
38703                       00009C33            .322:
38704                                           ! 8151             outw(0x01CE, i);
38705                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38706 9C33           FF76         FC            push	-4[bp]
38707                                           ! Debug: list int = const $1CE (used reg = )
38708 9C36           B8                   01CE  mov	ax,#$1CE
38709 9C39           50                         push	ax
38710                                           ! Debug: func () void = outw+0 (used reg = )
38711 9C3A           E8         E159            call	_outw
38712 9C3D           83C4                   04  add	sp,*4
38713                                           !BCC_EOS
38714                                           ! 8152             outw(0x01CF, read_word(ES, BX));
38715                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38716 9C40           FF76         06            push	6[bp]
38717                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38718 9C43           FF76         04            push	4[bp]
38719                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38720 9C46           E8         E0E4            call	_read_word
38721 9C49           83C4                   04  add	sp,*4
38722                                           ! Debug: list unsigned short = ax+0 (used reg = )
38723 9C4C           50                         push	ax
38724                                           ! Debug: list int = const $1CF (used reg = )
38725 9C4D           B8                   01CF  mov	ax,#$1CF
38726 9C50           50                         push	ax
38727                                           ! Debug: func () void = outw+0 (used reg = )
38728 9C51           E8         E142            call	_outw
38729 9C54           83C4                   04  add	sp,*4
38730                                           !BCC_EOS
38731                                           ! 8153             BX += 2;
38732                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38733 9C57           8B46         06            mov	ax,6[bp]
38734 9C5A           40                         inc	ax
38735 9C5B           40                         inc	ax
38736 9C5C           8946         06            mov	6[bp],ax
38737                                           !BCC_EOS
38738                                           ! 8154         }
38739                                           ! 8155     }
38740                       00009C5F            .320:
38741                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38742 9C5F           8B46         FC            mov	ax,-4[bp]
38743 9C62           40                         inc	ax
38744 9C63           8946         FC            mov	-4[bp],ax
38745                       00009C66            .321:
38746                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38747 9C66           8B46         FC            mov	ax,-4[bp]
38748 9C69           3D                   0009  cmp	ax,*9
38749 9C6C           76           C5            jbe	.322
38750                       00009C6E            .323:
38751                       00009C6E            .31F:
38752                                           ! 8156 }
38753                       00009C6E            .31E:
38754 9C6E           89EC                       mov	sp,bp
38755 9C70           5D                         pop	bp
38756 9C71           C3                         ret
38757                                           ! 8157 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
38758                                           ! 8158 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
38759                                           export	_vbe_biosfn_save_restore_state
38760                       00009C72            _vbe_biosfn_save_restore_state:
38761                                           !BCC_EOS
38762                                           !BCC_EOS
38763                                           !BCC_EOS
38764                                           !BCC_EOS
38765                                           !BCC_EOS
38766                                           ! 8159 {
38767                                           ! 8160     Bit16u ss=get_SS();
38768 9C72           55                         push	bp
38769 9C73           89E5                       mov	bp,sp
38770 9C75           4C                         dec	sp
38771 9C76           4C                         dec	sp
38772                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38773 9C77           E8         E12C            call	_get_SS
38774                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38775 9C7A           8946         FE            mov	-2[bp],ax
38776                                           !BCC_EOS
38777                                           ! 8161     Bit16u result, val;
38778                                           !BCC_EOS
38779                                           ! 8162     result = 0x4f;
38780 9C7D           83C4                   FC  add	sp,*-4
38781                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
38782 9C80           B8                   004F  mov	ax,*$4F
38783 9C83           8946         FC            mov	-4[bp],ax
38784                                           !BCC_EOS
38785                                           ! 8163     switch(( DX & 0x00ff )) {
38786                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
38787 9C86           8A46         08            mov	al,8[bp]
38788 9C89           E9         00D0            br 	.326
38789                                           ! 8164     case 0x00:
38790                                           ! 8165         val = biosfn_read_video_state_size2(CX);
38791                       00009C8C            .327:
38792                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
38793 9C8C           FF76         06            push	6[bp]
38794                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
38795 9C8F           E8         D389            call	_biosfn_read_video_state_size2
38796 9C92           44                         inc	sp
38797 9C93           44                         inc	sp
38798                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38799 9C94           8946         FA            mov	-6[bp],ax
38800                                           !BCC_EOS
38801                                           ! 8166         printf("VGA state size=%x\n", val);
38802                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38803 9C97           FF76         FA            push	-6[bp]
38804                                           ! Debug: list * char = .328+0 (used reg = )
38805 9C9A           BB                   9EC4  mov	bx,#.328
38806 9C9D           53                         push	bx
38807                                           ! Debug: func () void = printf+0 (used reg = )
38808 9C9E           E8         E124            call	_printf
38809 9CA1           83C4                   04  add	sp,*4
38810                                           !BCC_EOS
38811                                           ! 8167         if (CX & 8)
38812                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38813 9CA4           8A46         06            mov	al,6[bp]
38814 9CA7           24                     08  and	al,*8
38815 9CA9           84C0                       test	al,al
38816 9CAB           74           09            je  	.329
38817                       00009CAD            .32A:
38818                                           ! 8168             val += vbe_biosfn_read_video_state_size();
38819                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
38820 9CAD           E8         FDFB            call	_vbe_biosfn_read_video_state_size
38821                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38822 9CB0           0346         FA            add	ax,-6[bp]
38823 9CB3           8946         FA            mov	-6[bp],ax
38824                                           !BCC_EOS
38825                                           ! 8169         write_word(ss, BX, val);
38826                       00009CB6            .329:
38827                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38828 9CB6           FF76         FA            push	-6[bp]
38829                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
38830 9CB9           FF76         0C            push	$C[bp]
38831                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38832 9CBC           FF76         FE            push	-2[bp]
38833                                           ! Debug: func () void = write_word+0 (used reg = )
38834 9CBF           E8         E096            call	_write_word
38835 9CC2           83C4                   06  add	sp,*6
38836                                           !BCC_EOS
38837                                           ! 8170         break;
38838 9CC5           E9         00A6            br 	.324
38839                                           !BCC_EOS
38840                                           ! 8171     case 0x01:
38841                                           ! 8172         val = read_word(ss, BX);
38842                       00009CC8            .32B:
38843                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38844 9CC8           FF76         0C            push	$C[bp]
38845                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38846 9CCB           FF76         FE            push	-2[bp]
38847                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38848 9CCE           E8         E05C            call	_read_word
38849 9CD1           83C4                   04  add	sp,*4
38850                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38851 9CD4           8946         FA            mov	-6[bp],ax
38852                                           !BCC_EOS
38853                                           ! 8173         val = biosfn_save_video_state(CX, ES, val);
38854                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38855 9CD7           FF76         FA            push	-6[bp]
38856                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38857 9CDA           FF76         0A            push	$A[bp]
38858                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38859 9CDD           FF76         06            push	6[bp]
38860                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
38861 9CE0           E8         D3A3            call	_biosfn_save_video_state
38862 9CE3           83C4                   06  add	sp,*6
38863                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38864 9CE6           8946         FA            mov	-6[bp],ax
38865                                           !BCC_EOS
38866                                           ! 8174         printf("VGA save_state offset=%x\n", val);
38867                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38868 9CE9           FF76         FA            push	-6[bp]
38869                                           ! Debug: list * char = .32C+0 (used reg = )
38870 9CEC           BB                   9EAA  mov	bx,#.32C
38871 9CEF           53                         push	bx
38872                                           ! Debug: func () void = printf+0 (used reg = )
38873 9CF0           E8         E0D2            call	_printf
38874 9CF3           83C4                   04  add	sp,*4
38875                                           !BCC_EOS
38876                                           ! 8175         if (CX & 8)
38877                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38878 9CF6           8A46         06            mov	al,6[bp]
38879 9CF9           24                     08  and	al,*8
38880 9CFB           84C0                       test	al,al
38881 9CFD           74           0C            je  	.32D
38882                       00009CFF            .32E:
38883                                           ! 8176             vbe_biosfn_save_video_state(ES, val);
38884                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38885 9CFF           FF76         FA            push	-6[bp]
38886                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38887 9D02           FF76         0A            push	$A[bp]
38888                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
38889 9D05           E8         FDAB            call	_vbe_biosfn_save_video_state
38890 9D08           83C4                   04  add	sp,*4
38891                                           !BCC_EOS
38892                                           ! 8177         break;
38893                       00009D0B            .32D:
38894 9D0B           EB           61            jmp .324
38895                                           !BCC_EOS
38896                                           ! 8178     case 0x02:
38897                                           ! 8179         val = read_word(ss, BX);
38898                       00009D0D            .32F:
38899                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38900 9D0D           FF76         0C            push	$C[bp]
38901                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38902 9D10           FF76         FE            push	-2[bp]
38903                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38904 9D13           E8         E017            call	_read_word
38905 9D16           83C4                   04  add	sp,*4
38906                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38907 9D19           8946         FA            mov	-6[bp],ax
38908                                           !BCC_EOS
38909                                           ! 8180         val = biosfn_restore_video_state(CX, ES, val);
38910                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38911 9D1C           FF76         FA            push	-6[bp]
38912                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38913 9D1F           FF76         0A            push	$A[bp]
38914                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38915 9D22           FF76         06            push	6[bp]
38916                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
38917 9D25           E8         D928            call	_biosfn_restore_video_state
38918 9D28           83C4                   06  add	sp,*6
38919                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38920 9D2B           8946         FA            mov	-6[bp],ax
38921                                           !BCC_EOS
38922                                           ! 8181         printf("VGA rest
38923                                           ! 8181 ore_state offset=%x\n", val);
38924                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38925 9D2E           FF76         FA            push	-6[bp]
38926                                           ! Debug: list * char = .330+0 (used reg = )
38927 9D31           BB                   9E8D  mov	bx,#.330
38928 9D34           53                         push	bx
38929                                           ! Debug: func () void = printf+0 (used reg = )
38930 9D35           E8         E08D            call	_printf
38931 9D38           83C4                   04  add	sp,*4
38932                                           !BCC_EOS
38933                                           ! 8182         if (CX & 8)
38934                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38935 9D3B           8A46         06            mov	al,6[bp]
38936 9D3E           24                     08  and	al,*8
38937 9D40           84C0                       test	al,al
38938 9D42           74           0C            je  	.331
38939                       00009D44            .332:
38940                                           ! 8183             vbe_biosfn_restore_video_state(ES, val);
38941                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38942 9D44           FF76         FA            push	-6[bp]
38943                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38944 9D47           FF76         0A            push	$A[bp]
38945                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
38946 9D4A           E8         FDF8            call	_vbe_biosfn_restore_video_state
38947 9D4D           83C4                   04  add	sp,*4
38948                                           !BCC_EOS
38949                                           ! 8184         break;
38950                       00009D50            .331:
38951 9D50           EB           1C            jmp .324
38952                                           !BCC_EOS
38953                                           ! 8185     default:
38954                                           ! 8186         result = 0x100;
38955                       00009D52            .333:
38956                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
38957 9D52           B8                   0100  mov	ax,#$100
38958 9D55           8946         FC            mov	-4[bp],ax
38959                                           !BCC_EOS
38960                                           ! 8187         break;
38961 9D58           EB           14            jmp .324
38962                                           !BCC_EOS
38963                                           ! 8188     }
38964                                           ! 8189     write_word(ss, AX, result);
38965 9D5A           EB           12            jmp .324
38966                       00009D5C            .326:
38967 9D5C           2C                     00  sub	al,*0
38968 9D5E         0F84         FF2A            beq 	.327
38969 9D62           2C                     01  sub	al,*1
38970 9D64         0F84         FF60            beq 	.32B
38971 9D68           2C                     01  sub	al,*1
38972 9D6A           74           A1            je 	.32F
38973 9D6C           EB           E4            jmp	.333
38974                       00009D6E            .324:
38975                       FFFFFFF8            ..FFF4	=	-8
38976                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
38977 9D6E           FF76         FC            push	-4[bp]
38978                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
38979 9D71           FF76         04            push	4[bp]
38980                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38981 9D74           FF76         FE            push	-2[bp]
38982                                           ! Debug: func () void = write_word+0 (used reg = )
38983 9D77           E8         DFDE            call	_write_word
38984 9D7A           83C4                   06  add	sp,*6
38985                                           !BCC_EOS
38986                                           ! 8190 }
38987 9D7D           89EC                       mov	sp,bp
38988 9D7F           5D                         pop	bp
38989 9D80           C3                         ret
38990                                           ! 8191 #asm
38991                                           !BCC_ASM
38992                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38993                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38994                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38995                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38996                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38997                       00009D81            vbe_biosfn_display_window_control:
38998 9D81           80FB                   00    cmp bl, #0x00
38999 9D84           75           24              jne vbe_05_failed
39000 9D86           80FF                   01    cmp bh, #0x01
39001 9D89           74           16              je get_display_window
39002 9D8B           72           04              jb set_display_window
39003 9D8D           B8                   0100    mov ax, #0x0100
39004 9D90           C3                           ret
39005                       00009D91            set_display_window:
39006 9D91           89D0                         mov ax, dx
39007 9D93           E8         F507              call _dispi_set_bank
39008 9D96           E8         F514              call dispi_get_bank
39009 9D99           39D0                         cmp ax, dx
39010 9D9B           75           0D              jne vbe_05_failed
39011 9D9D           B8                   004F    mov ax, #0x004f
39012 9DA0           C3                           ret
39013                       00009DA1            get_display_window:
39014 9DA1           E8         F509              call dispi_get_bank
39015 9DA4           89C2                         mov dx, ax
39016 9DA6           B8                   004F    mov ax, #0x004f
39017 9DA9           C3                           ret
39018                       00009DAA            vbe_05_failed:
39019 9DAA           B8                   014F    mov ax, #0x014f
39020 9DAD           C3                           ret
39021                                           ! 8216 endasm
39022                                           !BCC_ENDASM
39023                                           ! 8217 #asm
39024                                           !BCC_ASM
39025                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39026                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39027                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39028                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39029                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39030                       00009DAE            vbe_biosfn_set_get_logical_scan_line_length:
39031 9DAE           89C8                         mov ax, cx
39032 9DB0           80FB                   01    cmp bl, #0x01
39033 9DB3           74           24              je get_logical_scan_line_length
39034 9DB5           80FB                   02    cmp bl, #0x02
39035 9DB8           74           06              je set_logical_scan_line_bytes
39036 9DBA           72           1A              jb set_logical_scan_line_pixels
39037 9DBC           B8                   0100    mov ax, #0x0100
39038 9DBF           C3                           ret
39039                       00009DC0            set_logical_scan_line_bytes:
39040 9DC0           50                           push ax
39041 9DC1           E8         F45E              call dispi_get_bpp
39042 9DC4           30FF                         xor bh, bh
39043 9DC6           88E3                         mov bl, ah
39044 9DC8           08DB                         or bl, bl
39045 9DCA           75           05              jnz no_4bpp_1
39046 9DCC           C1E0                   03    shl ax, #3
39047 9DCF           B3                     01    mov bl, #1
39048                       00009DD1            no_4bpp_1:
39049 9DD1           31D2                         xor dx, dx
39050 9DD3           58                           pop ax
39051 9DD4           F7F3                         div bx
39052                       00009DD6            set_logical_scan_line_pixels:
39053 9DD6           E8         F572              call dispi_set_virt_width
39054                       00009DD9            get_logical_scan_line_length:
39055 9DD9           E8         F446              call dispi_get_bpp
39056 9DDC           30FF                         xor bh, bh
39057 9DDE           88E3                         mov bl, ah
39058 9DE0           E8         F57B              call dispi_get_virt_width
39059 9DE3           89C1                         mov cx, ax
39060 9DE5           08DB                         or bl, bl
39061 9DE7           75           05              jnz no_4bpp_2
39062 9DE9           C1E8                   03    shr ax, #3
39063 9DEC           B3                     01    mov bl, #1
39064                       00009DEE            no_4bpp_2:
39065 9DEE           F7E3                         mul bx
39066 9DF0           89C3                         mov bx, ax
39067 9DF2           E8         F577              call dispi_get_virt_height
39068 9DF5           89C2                         mov dx, ax
39069 9DF7           B8                   004F    mov ax, #0x004f
39070 9DFA           C3                           ret
39071                                           ! 8259 endasm
39072                                           !BCC_ENDASM
39073                                           ! 8260 #asm
39074                                           !BCC_ASM
39075                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39076                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39077                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39078                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39079                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39080                       00009DFB            vbe_biosfn_set_get_display_start:
39081 9DFB           80FB                   80    cmp bl, #0x80
39082 9DFE           74           0B              je set_display_start
39083 9E00           80FB                   01    cmp bl, #0x01
39084 9E03           74           14              je get_display_start
39085 9E05           72           04              jb set_display_start
39086 9E07           B8                   0100    mov ax, #0x0100
39087 9E0A           C3                           ret
39088                       00009E0B            set_display_start:
39089 9E0B           89C8                         mov ax, cx
39090 9E0D           E8         F4E2              call dispi_set_x_offset
39091 9E10           89D0                         mov ax, dx
39092 9E12           E8         F4FB              call dispi_set_y_offset
39093 9E15           B8                   004F    mov ax, #0x004f
39094 9E18           C3                           ret
39095                       00009E19            get_display_start:
39096 9E19           E8         F4E6              call dispi_get_x_offset
39097 9E1C           89C1                         mov cx, ax
39098 9E1E           E8         F4FF              call dispi_get_y_offset
39099 9E21           89C2                         mov dx, ax
39100 9E23           30FF                         xor bh, bh
39101 9E25           B8                   004F    mov ax, #0x004f
39102 9E28           C3                           ret
39103                                           ! 8284 endasm
39104                                           !BCC_ENDASM
39105                                           ! 8285 #asm
39106                                           !BCC_ASM
39107                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39108                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39109                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39110                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39111                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39112                       00009E29            vbe_biosfn_set_get_dac_palette_format:
39113 9E29           80FB                   01    cmp bl, #0x01
39114 9E2C           74           1E              je get_dac_palette_format
39115 9E2E           72           04              jb set_dac_palette_format
39116 9E30           B8                   0100    mov ax, #0x0100
39117 9E33           C3                           ret
39118                       00009E34            set_dac_palette_format:
39119 9E34           E8         F458              call dispi_get_enable
39120 9E37           80FF                   06    cmp bh, #0x06
39121 9E3A           74           0A              je set_normal_dac
39122 9E3C           80FF                   08    cmp bh, #0x08
39123 9E3F           75           1B              jne vbe_08_unsupported
39124 9E41           0D                   0020    or ax, # 0x20
39125 9E44           75           03              jnz set_dac_mode
39126                       00009E46            set_normal_dac:
39127 9E46           25                   FFDF    and ax, #~ 0x20
39128                       00009E49            set_dac_mode:
39129 9E49           E8         F433              call _dispi_set_enable
39130                       00009E4C            get_dac_palette_format:
39131 9E4C           B7                     06    mov bh, #0x06
39132 9E4E           E8         F43E              call dispi_get_enable
39133 9E51           25                   0020    and ax, # 0x20
39134 9E54           74           02              jz vbe_08_ok
39135 9E56           B7                     08    mov bh, #0x08
39136                       00009E58            vbe_08_ok:
39137 9E58           B8                   004F    mov ax, #0x004f
39138 9E5B           C3                           ret
39139                       00009E5C            vbe_08_unsupported:
39140 9E5C           B8                   014F    mov ax, #0x014f
39141 9E5F           C3                           ret
39142                                           ! 8316 endasm
39143                                           !BCC_ENDASM
39144                                           ! 8317 void vbe_biosfn_set_get_palette_data(AX)
39145                                           ! Register BX used in function vbe_biosfn_save_restore_state
39146                                           ! 8318 {
39147                                           export	_vbe_biosfn_set_get_palette_data
39148                       00009E60            _vbe_biosfn_set_get_palette_data:
39149                                           ! 8319 }
39150 9E60           C3                         ret
39151                                           ! 8320 #asm
39152                                           !BCC_ASM
39153                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39154                       00009E61            vbe_biosfn_return_protected_mode_interface:
39155 9E61           84DB                         test bl, bl
39156 9E63           75           11              jnz _fail
39157 9E65           BF                   C000    mov di, #0xc000
39158 9E68           8EC7                         mov es, di
39159 9E6A           BF                   90B0    mov di, # vesa_pm_start
39160 9E6D           B9                   91B1    mov cx, # vesa_pm_end
39161 9E70           29F9                         sub cx, di
39162 9E72           B8                   004F    mov ax, #0x004f
39163 9E75           C3                           ret
39164                       00009E76            _fail:
39165 9E76           B8                   014F    mov ax, #0x014f
39166 9E79           C3                           ret
39167                                           ! 8334 endasm
39168                                           !BCC_ENDASM
39169                                           ! 8335 #asm
39170                                           !BCC_ASM
39171                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39172                                           ;; DATA_SEG_DEFS_HERE
39173                                           ! 8337 endasm
39174                                           !BCC_ENDASM
39175                                           ! 8338 #asm
39176                                           !BCC_ASM
39177                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39178 9E7A                        76            .ascii "vgabios ends here"
39179 9E8B                        00            .byte 0x00
39180                       00009E8C            vgabios_end:
39181 9E8C                        CB            .byte 0xCB
39182                                           ;; BLOCK_STRINGS_BEGIN
39183                                           ! 8344 endasm
39184                                           !BCC_ENDASM
39185                                           ! 8345 
39186                                           
39187                       00009E8D            .330:
39188                       00009E8D            .334:
39189 9E8D                        56            .ascii	"VGA restore_state offset=%x"
39190 9EA8                        0A            .byte	$A
39191 9EA9                        00            .byte	0
39192                       00009EAA            .32C:
39193                       00009EAA            .335:
39194 9EAA                        56            .ascii	"VGA save_state offset=%x"
39195 9EC2                        0A            .byte	$A
39196 9EC3                        00            .byte	0
39197                       00009EC4            .328:
39198                       00009EC4            .336:
39199 9EC4                        56            .ascii	"VGA state size=%x"
39200 9ED5                        0A            .byte	$A
39201 9ED6                        00            .byte	0
39202                       00009ED7            .310:
39203                       00009ED7            .337:
39204 9ED7                        56            .ascii	"VBE *NOT* found mode %x"
39205 9EEE                        0A            .byte	$A
39206 9EEF                        00            .byte	0
39207                       00009EF0            .30C:
39208                       00009EF0            .338:
39209 9EF0                        09            .byte	9
39210 9EF1                        78            .ascii	"xres%x yres%x bpp%x"
39211 9F04                        0A            .byte	$A
39212 9F05                        00            .byte	0
39213                       00009F06            .30B:
39214                       00009F06            .339:
39215 9F06                        56            .ascii	"VBE found mode %x, setting:"
39216 9F21                        0A            .byte	$A
39217 9F22                        00            .byte	0
39218                       00009F23            .2FC:
39219                       00009F23            .33A:
39220 9F23                        56            .ascii	"VBE *NOT* found mode %x"
39221 9F3A                        0A            .byte	$A
39222 9F3B                        00            .byte	0
39223                       00009F3C            .2F6:
39224                       00009F3C            .33B:
39225 9F3C                        56            .ascii	"VBE found mode %x"
39226 9F4D                        0A            .byte	$A
39227 9F4E                        00            .byte	0
39228                       00009F4F            .2F1:
39229                       00009F4F            .33C:
39230 9F4F                        56            .ascii	"VBE vbe_biosfn_return_mode_information E"
39231 9F77                        53            .ascii	"S%x DI%x CX%x"
39232 9F84                        0A            .byte	$A
39233 9F85                        00            .byte	0
39234                       00009F86            .2EF:
39235                       00009F86            .33D:
39236 9F86                        56            .ascii	"VBE mode %x (xres=%x / bpp=%02x) not sup"
39237 9FAE                        70            .ascii	"ported "
39238 9FB5                        0A            .byte	$A
39239 9FB6                        00            .byte	0
39240                       00009FB7            .2ED:
39241                       00009FB7            .33E:
39242 9FB7                        56            .ascii	"VBE found mode %x => %x"
39243 9FCE                        0A            .byte	$A
39244 9FCF                        00            .byte	0
39245                       00009FD0            .2E2:
39246                       00009FD0            .33F:
39247 9FD0                        56            .ascii	"VBE correct VESA/VBE2 signature found"
39248 9FF5                        0A            .byte	$A
39249 9FF6                        00            .byte	0
39250                       00009FF7            .2D8:
39251                       00009FF7            .340:
39252 9FF7                        56            .ascii	"VBE vbe_biosfn_return_vbe_info ES%x DI%x"
39253 A01F                        20            .ascii	" AX%x"
39254 A024                        0A            .byte	$A
39255 A025                        00            .byte	0
39256                       0000A026            .2B0:
39257                       0000A026            .341:
39258 A026                        2D            .ascii	"--> Unknown int10"
39259 A037                        0A            .byte	$A
39260 A038                        00            .byte	0
39261                       0000A039            .2AF:
39262                       0000A039            .342:
39263 A039                        2D            .ascii	"--> Unimplemented"
39264 A04A                        0A            .byte	$A
39265 A04B                        00            .byte	0
39266                       0000A04C            .249:
39267                       0000A04C            .343:
39268 A04C                        47            .ascii	"Get font info BH(%02x) was discarded"
39269 A070                        0A            .byte	$A
39270 A071                        00            .byte	0
39271                       0000A072            .147:
39272                       0000A072            .344:
39273 A072                        53            .ascii	"Scroll in graphics mode "
39274 A08A                        00            .byte	0
39275                       0000A08B            .E2:
39276                       0000A08B            .345:
39277 A08B                        53            .ascii	"Scroll, address %04x (%04x %04x %02x)"
39278 A0B0                        0A            .byte	$A
39279 A0B1                        00            .byte	0
39280                       0000A0B2            .B7:
39281                       0000A0B2            .346:
39282 A0B2                        53            .ascii	"Set active page %02x address %04x"
39283 A0D3                        0A            .byte	$A
39284 A0D4                        00            .byte	0
39285                       0000A0D5            .5E:
39286                       0000A0D5            .347:
39287 A0D5                        6D            .ascii	"mode search %02x found line %02x"
39288 A0F5                        0A            .byte	$A
39289 A0F6                        00            .byte	0
39290                       0000A0F7            .3:
39291                       0000A0F7            .348:
39292 A0F7                        76            .ascii	"vgabios call ah%02x al%02x bx%04x cx%04x"
39293 A11F                        20            .ascii	" dx%04x"
39294 A126                        0A            .byte	$A
39295 A127                        00            .byte	0
39296 A128                                      .bss
39297                                           
39298                                           ! 0 errors detected

Symbols:
..FFF4                      0 FFF8 A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFE8 A   ..FFFF                      0 FFFE A   
.1                          0 3699 A   .10                         0 36C6 A   
.100                        0 4D0B A   .101                        0 50F2 A   
.102                        0 50F2 A   .104                        0 50DE A   
.105                        0 4D40 A   .106                        0 4D40 A   
.107                        0 4DD2 A   .108                        0 4D7D A   
.109                        0 4D6B A   .10A                        0 4D59 A   
.10B                        0 4D52 A   .10C                        0 4D49 A   
.10D                        0 4EF4 A   .10E                        0 4E65 A   
.10F                        0 4DDB A   .11                         0 36C6 A   
.110                        0 4E62 A   .111                        0 4E51 A   
.112                        0 4E58 A   .113                        0 4DE5 A   
.114                        0 4E29 A   .115                        0 4E03 A   
.116                        0 4DFC A   .117                        0 4E51 A   
.118                        0 4E62 A   .119                        0 4EF4 A   
.11A                        0 4EF4 A   .11B                        0 4EE1 A   
.11C                        0 4EE8 A   .11D                        0 4E70 A   
.11E                        0 4EAD A   .11F                        0 4E87 A   
.12                         0 36C6 A   .120                        0 4E80 A   
.121                        0 4ED5 A   .122                        0 4EE1 A   
.123                        0 4EDF A   .124                        0 4EF4 A   
.125                        0 4EF7 A   .126                        0 4F8A A   
.127                        0 4F45 A   .128                        0 4F33 A   
.129                        0 4F21 A   .12A                        0 4F1A A   
.12B                        0 4F13 A   .12C                        0 50CE A   
.12D                        0 4FAD A   .12E                        0 4F91 A   
.12F                        0 5040 A   .13                         0 36D2 A   
.130                        0 4FB6 A   .131                        0 503D A   
.132                        0 502C A   .133                        0 5033 A   
.134                        0 4FC0 A   .135                        0 5004 A   
.136                        0 4FDE A   .137                        0 4FD7 A   
.138                        0 502C A   .139                        0 503D A   
.13A                        0 50CE A   .13B                        0 50CE A   
.13C                        0 50BB A   .13D                        0 50C2 A   
.13E                        0 504A A   .13F                        0 5087 A   
.14                         0 3701 A   .140                        0 5061 A   
.141                        0 505A A   .142                        0 50AF A   
.143                        0 50BB A   .144                        0 50B9 A   
.145                        0 50CE A   .146                        0 50D0 A   
.147                        0 A072 A   .148                        0 512E A   
.149                        0 512A A   .14A                        0 51ED A   
.14B                        0 518F A   .14C                        0 51F0 A   
.14D                        0 5221 A   .14F                        0 5217 A   
.15                         0 36F1 A   .150                        0 51FF A   
.151                        0 5207 A   .152                        0 520F A   
.153                        0 528E A   .154                        0 527E A   
.155                        0 529C A   .156                        0 5354 A   
.157                        0 5343 A   .158                        0 534A A   
.159                        0 52A4 A   .15A                        0 5343 A   
.15B                        0 5333 A   .15C                        0 533A A   
.15D                        0 52C1 A   .15E                        0 5323 A   
.15F                        0 530C A   .16                         0 3706 A   
.160                        0 5333 A   .161                        0 5343 A   
.162                        0 5354 A   .163                        0 5566 A   
.164                        0 5556 A   .165                        0 555D A   
.166                        0 53AA A   .167                        0 53CE A   
.168                        0 53C5 A   .169                        0 548F A   
.16A                        0 53DC A   .16B                        0 53F7 A   
.16C                        0 53E5 A   .16D                        0 53FC A   
.16E                        0 5479 A   .16F                        0 546B A   
.17                         0 371D A   .170                        0 5472 A   
.171                        0 5403 A   .172                        0 5461 A   
.173                        0 541A A   .174                        0 5443 A   
.175                        0 5423 A   .176                        0 5461 A   
.177                        0 5479 A   .178                        0 5556 A   
.179                        0 5556 A   .17A                        0 554D A   
.17B                        0 5492 A   .17C                        0 54AD A   
.17D                        0 549B A   .17E                        0 54B2 A   
.17F                        0 5533 A   .18                         0 3731 A   
.180                        0 5525 A   .181                        0 552C A   
.182                        0 54B9 A   .183                        0 551B A   
.184                        0 54D0 A   .185                        0 54FB A   
.186                        0 54D9 A   .187                        0 551B A   
.188                        0 5533 A   .189                        0 5556 A   
.18A                        0 5566 A   .18B                        0 563A A   
.18C                        0 562A A   .18D                        0 5631 A   
.18E                        0 55B0 A   .18F                        0 562A A   
.19                         0 374A A   .190                        0 561C A   
.191                        0 5623 A   .192                        0 55D6 A   
.193                        0 55F8 A   .194                        0 55F2 A   
.195                        0 562A A   .196                        0 563A A   
.197                        0 566E A   .198                        0 566A A   
.199                        0 5739 A   .19A                        0 56CF A   
.19B                        0 5831 A   .19C                        0 5831 A   
.19D                        0 5819 A   .19E                        0 576E A   
.19F                        0 5812 A   .1A                         0 3764 A   
.1A1                        0 57FC A   .1A2                        0 5782 A   
.1A3                        0 5782 A   .1A4                        0 57AB A   
.1A5                        0 57D4 A   .1A6                        0 57F7 A   
.1A7                        0 5831 A   .1A8                        0 5825 A   
.1A9                        0 5865 A   .1AA                        0 5861 A   
.1AB                        0 5934 A   .1AC                        0 58C6 A   
.1AD                        0 5931 A   .1AE                        0 5925 A   
.1AF                        0 58FC A   .1B                         0 3772 A   
.1B0                        0 5931 A   .1B1                        0 5A2C A   
.1B2                        0 5A2C A   .1B3                        0 5A14 A   
.1B4                        0 5969 A   .1B5                        0 5A0D A   
.1B7                        0 59F7 A   .1B8                        0 597D A   
.1B9                        0 597D A   .1BA                        0 59A6 A   
.1BB                        0 59CF A   .1BC                        0 59F2 A   
.1BD                        0 5A2C A   .1BE                        0 5A20 A   
.1BF                        0 5ADB A   .1C                         0 37AD A   
.1C0                        0 5AD7 A   .1C1                        0 5AF5 A   
.1C2                        0 5AF1 A   .1C3                        0 5D48 A   
.1C5                        0 5D30 A   .1C6                        0 5B0A A   
.1C7                        0 5B0A A   .1C8                        0 5B8B A   
.1C9                        0 5B7D A   .1CA                        0 5BB0 A   
.1CB                        0 5BE2 A   .1CC                        0 5BC6 A   
.1CD                        0 5BFC A   .1CE                        0 5C0E A   
.1CF                        0 5C05 A   .1D                         0 37E7 A   
.1D0                        0 5C7A A   .1D1                        0 5C34 A   
.1D2                        0 5CBA A   .1D3                        0 5CCE A   
.1D4                        0 5CC3 A   .1D5                        0 5CE4 A   
.1D6                        0 5CF9 A   .1D7                        0 5D2B A   
.1D8                        0 5D82 A   .1D9                        0 5D7E A   
.1DA                        0 5D9C A   .1DB                        0 5D98 A   
.1DC                        0 5F33 A   .1DE                        0 5F1B A   
.1DF                        0 5DB1 A   .1E                         0 37FC A   
.1E0                        0 5DB1 A   .1E1                        0 5E45 A   
.1E2                        0 5E37 A   .1E3                        0 5E3E A   
.1E4                        0 5DF3 A   .1E5                        0 5E37 A   
.1E6                        0 5E23 A   .1E7                        0 5E45 A   
.1E8                        0 5E48 A   .1E9                        0 5E74 A   
.1EA                        0 5E6B A   .1EB                        0 5EBF A   
.1EC                        0 5E9A A   .1ED                        0 5EE0 A   
.1EE                        0 5EE2 A   .1EF                        0 5F11 A   
.1F                         0 381C A   .1F0                        0 5F73 A   
.1F1                        0 5F62 A   .1F2                        0 5F9D A   
.1F3                        0 5F99 A   .1F4                        0 61FE A   
.1F6                        0 61DD A   .1F7                        0 5FEE A   
.1F8                        0 5FF1 A   .1F9                        0 5FFF A   
.1FA                        0 5FF8 A   .1FB                        0 6002 A   
.1FC                        0 600A A   .1FD                        0 6014 A   
.1FE                        0 6061 A   .1FF                        0 6056 A   
.2                          0 3679 A   .20                         0 383C A   
.200                        0 6014 A   .201                        0 6061 A   
.202                        0 6064 A   .203                        0 60FE A   
.204                        0 607C A   .205                        0 60FB A   
.206                        0 60D8 A   .207                        0 61D4 A   
.208                        0 61D4 A   .20A                        0 61BE A   
.20B                        0 6144 A   .20C                        0 6144 A   
.20D                        0 616D A   .20E                        0 6196 A   
.20F                        0 61B9 A   .21                         0 3859 A   
.210                        0 6214 A   .211                        0 6208 A   
.212                        0 6290 A   .213                        0 6220 A   
.214                        0 6260 A   .215                        0 6236 A   
.216                        0 6287 A   .217                        0 6640 A   
.218                        0 662F A   .219                        0 6636 A   
.21A                        0 6578 A   .21B                        0 65EB A   
.21C                        0 65E5 A   .21D                        0 6640 A   
.21E                        0 6721 A   .21F                        0 6711 A   
.22                         0 3874 A   .220                        0 6739 A   
.221                        0 687E A   .222                        0 686F A   
.223                        0 6876 A   .224                        0 6832 A   
.225                        0 687E A   .226                        0 6893 A   
.227                        0 6888 A   .228                        0 6917 A   
.229                        0 6908 A   .22A                        0 690F A   
.22B                        0 68CE A   .22C                        0 6917 A   
.22D                        0 692A A   .22E                        0 6921 A   
.22F                        0 69A8 A   .23                         0 3891 A   
.230                        0 6999 A   .231                        0 69A0 A   
.232                        0 6965 A   .233                        0 69A8 A   
.234                        0 69BB A   .235                        0 69B2 A   
.236                        0 6A46 A   .237                        0 6A37 A   
.238                        0 6A3E A   .239                        0 6A03 A   
.23A                        0 6A46 A   .23B                        0 6A59 A   
.23C                        0 6A50 A   .23D                        0 6C0F A   
.23F                        0 6BEA A   .24                         0 38A0 A   
.240                        0 6A96 A   .241                        0 6ACD A   
.242                        0 6B04 A   .243                        0 6B27 A   
.244                        0 6B4A A   .245                        0 6B6D A   
.246                        0 6B90 A   .247                        0 6BB2 A   
.248                        0 6BD4 A   .249                        0 A04C A   
.24A                        0 6C0D A   .24B                        0 6BFD A   
.24C                        0 6DCA A   .24D                        0 6DB8 A   
.24E                        0 6E54 A   .24F                        0 6E48 A   
.25                         0 39E0 A   .250                        0 6DF9 A   
.251                        0 6E2C A   .252                        0 6E17 A   
.253                        0 6E54 A   .254                        0 6E6C A   
.255                        0 6E5D A   .256                        0 7037 A   
.257                        0 702E A   .258                        0 7049 A   
.259                        0 7040 A   .25A                        0 705B A   
.25B                        0 7052 A   .25C                        0 730E A   
.25D                        0 70A8 A   .25E                        0 7193 A   
.25F                        0 7184 A   .260                        0 718B A   
.261                        0 7158 A   .262                        0 7193 A   
.263                        0 7201 A   .264                        0 71F2 A   
.265                        0 71F9 A   .266                        0 71C6 A   
.267                        0 7201 A   .268                        0 7254 A   
.269                        0 7245 A   .26A                        0 724C A   
.26B                        0 7208 A   .26C                        0 7254 A   
.26D                        0 729F A   .26E                        0 7290 A   
.26F                        0 7297 A   .27                         0 398A A   
.270                        0 7264 A   .271                        0 729F A   
.272                        0 7589 A   .273                        0 7319 A   
.274                        0 74BA A   .275                        0 74AB A   
.276                        0 74B2 A   .277                        0 7483 A   
.278                        0 74BA A   .279                        0 7649 A   
.27A                        0 7594 A   .27B                        0 7633 A   
.27C                        0 7624 A   .27D                        0 762B A   
.27E                        0 7605 A   .27F                        0 7633 A   
.28                         0 38A6 A   .280                        0 790B A   
.281                        0 7661 A   .282                        0 76D0 A   
.283                        0 76C1 A   .284                        0 76C8 A   
.285                        0 7694 A   .286                        0 76D0 A   
.287                        0 7755 A   .288                        0 7746 A   
.289                        0 774D A   .28A                        0 7711 A   
.28B                        0 773F A   .28C                        0 7719 A   
.28D                        0 7755 A   .28E                        0 7777 A   
.28F                        0 776F A   .29                         0 38A6 A   
.290                        0 7818 A   .291                        0 7809 A   
.292                        0 7810 A   .293                        0 77D4 A   
.294                        0 7818 A   .295                        0 7871 A   
.296                        0 7862 A   .297                        0 7869 A   
.298                        0 7835 A   .299                        0 7871 A   
.29A                        0 7B86 A   .29B                        0 7916 A   
.29C                        0 7AB7 A   .29D                        0 7AA8 A   
.29E                        0 7AAF A   .29F                        0 7A80 A   
.2A                         0 38CF A   .2A0                        0 7AB7 A   
.2A1                        0 7C27 A   .2A2                        0 7B91 A   
.2A3                        0 7C13 A   .2A4                        0 7C04 A   
.2A5                        0 7C0B A   .2A6                        0 7BE4 A   
.2A7                        0 7C13 A   .2A8                        0 7C69 A   
.2A9                        0 7C5B A   .2AA                        0 7C62 A   
.2AB                        0 7C3F A   .2AC                        0 7C5B A   
.2AD                        0 7C53 A   .2AE                        0 7C69 A   
.2AF                        0 A039 A   .2B                         0 38CF A   
.2B0                        0 A026 A   .2B1                        0 7EFE A   
.2B2                        0 7EE8 A   .2B3                        0 7DE4 A   
.2B4                        0 7DF9 A   .2B5                        0 7DEB A   
.2B6                        0 7EE1 A   .2B7                        0 7ED1 A   
.2B8                        0 7E02 A   .2B9                        0 7E31 A   
.2BA                        0 7E10 A   .2BB                        0 7E09 A   
.2BC                        0 7ECF A   .2BD                        0 7ECF A   
.2BE                        0 7E3A A   .2BF                        0 7E5E A   
.2C                         0 38E4 A   .2C0                        0 7E58 A   
.2C1                        0 7ECA A   .2C2                        0 7EBB A   
.2C3                        0 7EC2 A   .2C4                        0 7E71 A   
.2C5                        0 7EA3 A   .2C6                        0 7E90 A   
.2C7                        0 7EB4 A   .2C8                        0 7ECA A   
.2C9                        0 7EE1 A   .2CA                        0 7EFE A   
.2CB                        0 94AC A   .2CC                        0 94A1 A   
.2CD                        0 945E A   .2CE                        0 9498 A   
.2CF                        0 9468 A   .2D                         0 38E4 A   
.2D0                        0 9478 A   .2D1                        0 946F A   
.2D2                        0 9496 A   .2D3                        0 948D A   
.2D4                        0 9484 A   .2D5                        0 9496 A   
.2D6                        0 94A1 A   .2D7                        0 94AC A   
.2D8                        0 9FF7 A   .2D9                        0 95CB A   
.2DA                        0 95BB A   .2DB                        0 959B A   
.2DC                        0 9593 A   .2DD                        0 958B A   
.2DE                        0 9581 A   .2DF                        0 95B3 A   
.2E                         0 38F9 A   .2E0                        0 95AB A   
.2E1                        0 95A3 A   .2E2                        0 9FD0 A   
.2E3                        0 968F A   .2E4                        0 9644 A   
.2E5                        0 96A7 A   .2E6                        0 977C A   
.2E7                        0 976E A   .2E8                        0 96A7 A   
.2E9                        0 9742 A   .2EA                        0 9702 A   
.2EB                        0 96CC A   .2EC                        0 96B5 A   
.2ED                        0 9FB7 A   .2EE                        0 9763 A   
.2EF                        0 9F86 A   .2F                         0 38F9 A   
.2F0                        0 977C A   .2F1                        0 9F4F A   
.2F2                        0 97E7 A   .2F3                        0 97E9 A   
.2F4                        0 98BF A   .2F5                        0 9818 A   
.2F6                        0 9F3C A   .2F7                        0 9865 A   
.2F8                        0 985F A   .2F9                        0 9883 A   
.2FA                        0 986F A   .2FB                        0 98D2 A   
.2FC                        0 9F23 A   .2FD                        0 98F2 A   
.2FE                        0 98DA A   .2FF                        0 9922 A   
.3                          0 A0F7 A   .30                         0 390E A   
.300                        0 9924 A   .301                        0 9934 A   
.302                        0 9930 A   .303                        0 9936 A   
.304                        0 9948 A   .305                        0 9944 A   
.306                        0 994A A   .307                        0 9981 A   
.308                        0 995E A   .309                        0 9A52 A   
.30A                        0 999D A   .30B                        0 9F06 A   
.30C                        0 9EF0 A   .30D                        0 99E4 A   
.30E                        0 99DB A   .30F                        0 9A73 A   
.31                         0 391D A   .310                        0 9ED7 A   
.311                        0 9A73 A   .312                        0 9A6D A   
.313                        0 9AF7 A   .314                        0 9AF3 A   
.315                        0 9B41 A   .316                        0 9B32 A   
.317                        0 9B39 A   .318                        0 9AFF A   
.319                        0 9B32 A   .31A                        0 9B07 A   
.31B                        0 9B41 A   .31C                        0 9B89 A   
.31D                        0 9B6B A   .31E                        0 9C6E A   
.31F                        0 9C6E A   .32                         0 393B A   
.320                        0 9C5F A   .321                        0 9C66 A   
.322                        0 9C33 A   .323                        0 9C6E A   
.324                        0 9D6E A   .326                        0 9D5C A   
.327                        0 9C8C A   .328                        0 9EC4 A   
.329                        0 9CB6 A   .32A                        0 9CAD A   
.32B                        0 9CC8 A   .32C                        0 9EAA A   
.32D                        0 9D0B A   .32E                        0 9CFF A   
.32F                        0 9D0D A   .33                         0 3949 A   
.330                        0 9E8D A   .331                        0 9D50 A   
.332                        0 9D44 A   .333                        0 9D52 A   
.334                        0 9E8D A   .335                        0 9EAA A   
.336                        0 9EC4 A   .337                        0 9ED7 A   
.338                        0 9EF0 A   .339                        0 9F06 A   
.33A                        0 9F23 A   .33B                        0 9F3C A   
.33C                        0 9F4F A   .33D                        0 9F86 A   
.33E                        0 9FB7 A   .33F                        0 9FD0 A   
.34                         0 3957 A   .340                        0 9FF7 A   
.341                        0 A026 A   .342                        0 A039 A   
.343                        0 A04C A   .344                        0 A072 A   
.345                        0 A08B A   .346                        0 A0B2 A   
.347                        0 A0D5 A   .348                        0 A0F7 A   
.35                         0 3965 A   .36                         0 3985 A   
.37                         0 39E3 A   .38                         0 3A35 A   
.3A                         0 3A27 A   .3B                         0 39E8 A   
.3C                         0 39ED A   .3D                         0 3A0B A   
.3E                         0 3A22 A   .3F                         0 3A38 A   
.4                          0 3BF3 A   .40                         0 3A6C A   
.41                         0 3A88 A   .42                         0 3AD1 A   
.44                         0 3AC3 A   .45                         0 3A8D A   
.46                         0 3A9C A   .47                         0 3AAD A   
.48                         0 3ABE A   .49                         0 3ADE A   
.4A                         0 3B90 A   .4B                         0 3AE7 A   
.4C                         0 3B8E A   .4E                         0 3B63 A   
.4F                         0 3AEC A   .50                         0 3AFF A   
.51                         0 3B14 A   .52                         0 3B29 A   
.53                         0 3B42 A   .54                         0 3B4D A   
.55                         0 3B58 A   .56                         0 3B8C A   
.57                         0 3B76 A   .58                         0 3B96 A   
.59                         0 3B98 A   .5A                         0 3BEA A   
.5B                         0 3BB0 A   .5C                         0 3C13 A   
.5D                         0 3C0B A   .5E                         0 A0D5 A   
.5F                         0 3C4A A   .6                          0 3B9D A   
.60                         0 3C46 A   .61                         0 3E1D A   
.62                         0 3CD8 A   .63                         0 3D4A A   
.65                         0 3D3A A   .66                         0 3D18 A   
.67                         0 3D20 A   .68                         0 3D28 A   
.69                         0 3D30 A   .6A                         0 3E07 A   
.6B                         0 3DF6 A   .6C                         0 3DFD A   
.6D                         0 3D52 A   .6E                         0 3DCF A   
.6F                         0 3D73 A   .7                          0 36A8 A   
.70                         0 3DF6 A   .71                         0 3E07 A   
.72                         0 3E1D A   .73                         0 3E10 A   
.74                         0 3E6D A   .75                         0 3E5E A   
.76                         0 3E65 A   .77                         0 3E2D A   
.78                         0 3E6D A   .79                         0 3EF2 A   
.7A                         0 3EE3 A   .7B                         0 3EEA A   
.7C                         0 3EAB A   .7D                         0 3EF2 A   
.7E                         0 3F39 A   .7F                         0 3F2A A   
.8                          0 3703 A   .80                         0 3F31 A   
.81                         0 3EF9 A   .82                         0 3F39 A   
.83                         0 3F54 A   .84                         0 3F4F A   
.85                         0 3F57 A   .86                         0 3FAE A   
.87                         0 3F9F A   .88                         0 3FA6 A   
.89                         0 3F6E A   .8A                         0 3FAE A   
.8B                         0 40AE A   .8C                         0 3FED A   
.8D                         0 4029 A   .8E                         0 4003 A   
.8F                         0 40AE A   .90                         0 4054 A   
.91                         0 4030 A   .92                         0 40AE A   
.93                         0 41EB A   .94                         0 41DD A   
.95                         0 420D A   .96                         0 41FE A   
.97                         0 4205 A   .98                         0 41F2 A   
.99                         0 420D A   .9A                         0 4239 A   
.9B                         0 422B A   .9C                         0 429E A   
.9E                         0 428F A   .9F                         0 4251 A   
.A                          0 36DE A   .A0                         0 4265 A   
.A1                         0 4279 A   .A2                         0 436C A   
.A3                         0 431C A   .A4                         0 4315 A   
.A5                         0 430E A   .A6                         0 4306 A   
.A7                         0 4345 A   .A8                         0 4330 A   
.A9                         0 4359 A   .AA                         0 43CE A   
.AB                         0 43CA A   .AC                         0 44B9 A   
.AD                         0 4401 A   .AE                         0 44F1 A   
.AF                         0 44ED A   .B                          0 36BA A   
.B0                         0 4543 A   .B1                         0 453F A   
.B2                         0 456D A   .B3                         0 4569 A   
.B4                         0 4605 A   .B5                         0 4597 A   
.B6                         0 4629 A   .B7                         0 A0B2 A   
.B8                         0 4764 A   .B9                         0 4755 A   
.BA                         0 475C A   .BB                         0 4719 A   
.BC                         0 4764 A   .BD                         0 47EF A   
.BE                         0 47E0 A   .BF                         0 47E7 A   
.C                          0 36C6 A   .C0                         0 47B6 A   
.C1                         0 47EF A   .C2                         0 490F A   
.C3                         0 48FE A   .C4                         0 4905 A   
.C5                         0 485D A   .C6                         0 48BC A   
.C7                         0 4866 A   .C8                         0 48FE A   
.C9                         0 490F A   .CA                         0 49C4 A   
.CB                         0 49B5 A   .CC                         0 49BC A   
.CD                         0 4947 A   .CE                         0 4988 A   
.CF                         0 4950 A   .D                          0 36C6 A   
.D0                         0 49B5 A   .D1                         0 49C4 A   
.D2                         0 49DA A   .D3                         0 49D6 A   
.D4                         0 49E6 A   .D5                         0 49E2 A   
.D6                         0 4A10 A   .D7                         0 4A0C A   
.D8                         0 4A4D A   .D9                         0 4A3C A   
.DA                         0 4A5E A   .DB                         0 4A57 A   
.DC                         0 4A6F A   .DD                         0 4A68 A   
.DE                         0 4A7E A   .DF                         0 4A79 A   
.E                          0 36C6 A   .E0                         0 4D0E A   
.E1                         0 4AA5 A   .E2                         0 A08B A   
.E3                         0 4B48 A   .E4                         0 4B13 A   
.E5                         0 4B01 A   .E6                         0 4AEF A   
.E7                         0 4AE8 A   .E8                         0 4AE1 A   
.E9                         0 4D0B A   .EA                         0 4C2D A   
.EB                         0 4B51 A   .EC                         0 4C2A A   
.ED                         0 4C17 A   .EE                         0 4C1E A   
.EF                         0 4B5C A   .F                          0 36C6 A   
.F0                         0 4BBC A   .F1                         0 4B7A A   
.F2                         0 4B73 A   .F3                         0 4C17 A   
.F4                         0 4C2A A   .F5                         0 4D0B A   
.F6                         0 4D0B A   .F7                         0 4CF8 A   
.F8                         0 4CFF A   .F9                         0 4C38 A   
.FA                         0 4C91 A   .FB                         0 4C4F A   
.FC                         0 4C48 A   .FD                         0 4CEC A   
.FE                         0 4CF8 A   .FF                         0 4CF6 A   
_biosfn_alternate_prtsc     0 6C70 A   _biosfn_enable_video_refre+ 0 6D8F A   
_biosfn_get_cursor_pos      0 44BD A   _biosfn_get_font_info       0 6A85 A   
_biosfn_load_gfx_8_14_char+ 0 6A6D A   _biosfn_load_gfx_8_16_char+ 0 6A7D A   
_biosfn_load_gfx_8_8_chars  0 6A5D A   _biosfn_load_gfx_8_8_dd_ch+ 0 6A75 A   
_biosfn_load_gfx_user_char+ 0 6A65 A   _biosfn_load_text_8_14_pat  0 6897 A   
_biosfn_load_text_8_16_pat  0 69CC A   _biosfn_load_text_8_8_pat   0 692E A   
_biosfn_load_text_user_pat  0 67FB A   _biosfn_perform_gray_scale+ 0 6554 A   
_biosfn_read_char_attr      0 50F6 A   _biosfn_read_pixel          0 5D4C A   
_biosfn_read_state_info     0 6EE3 A   _biosfn_read_video_state_s+ 0 7062 A   
_biosfn_read_video_state_s+ 0 701B A   _biosfn_restore_video_stat+ 0 7650 A   
_biosfn_save_video_state    0 7086 A   _biosfn_scroll              0 49C8 A   
_biosfn_set_active_page     0 4532 A   _biosfn_set_cursor_pos      0 43BD A   
_biosfn_set_cursor_shape    0 42A2 A   _biosfn_set_video_mode      0 3BF5 A   
_biosfn_switch_video_inter+ 0 6D87 A   _biosfn_write_char_attr     0 563E A   
_biosfn_write_char_only     0 5835 A   _biosfn_write_pixel         0 5AAB A   
_biosfn_write_string        0 6D97 A   _biosfn_write_teletype      0 5F55 A   
_dac_regs                   0 029B A   _dispi_get_max_bpp          0 925D A   
_dispi_get_max_xres         0 923B A   _dispi_set_bank             0 929D A   
_dispi_set_bank_farcall     0 92BB A   _dispi_set_bpp              0 9204 A   
_dispi_set_enable           0 927F A   _dispi_set_xres             0 91CF A   
_dispi_set_yres             0 91E6 A   _display_info               0 3625 A   
_display_splash_screen      0 3624 A   _display_string             0 3643 A   
_fail                       0 9E76 A   _find_vga_entry             0 7C2E A   
_get_SS                     0 7DA6 A E _get_font_access            0 665B A   
_inb                        0 7D70 A E _int10_debugmsg             0 366A A   
_int10_func                 0 369B A   _inw                        0 7D7B A E 
_line_to_vpti               0 028B A   _memcpyb                    0 7CBA A   
_memcpyw                    0 7CEA A   _memsetb                    0 7C70 A   
_memsetw                    0 7C95 A   _mode_info_find_mode        0 9451 A   
_mode_info_list             0 7F02 A   _no_vbebios_info_string     0 904C A   
_outb                       0 7D86 A E _outw                       0 7D96 A E 
_palette0                   0 0A1F A   _palette1                   0 0ADF A   
_palette2                   0 0B9F A   _palette3                   0 0C5F A   
_printf                     0 7DC5 A E _read_byte                  0 7D1A A   
_read_word                  0 7D2D A   _release_font_access        0 667E A   
_set_scan_lines             0 66B2 A   _static_functionality       0 0F5F A   
_unimplemented              0 7DA9 A E _unknown                    0 7DB7 A E 
_vbe_biosfn_read_video_sta+ 0 9AAB A E _vbe_biosfn_restore_video_+ 0 9B45 A E 
_vbe_biosfn_return_control+ 0 9510 A E _vbe_biosfn_return_mode_in+ 0 97AE A E 
_vbe_biosfn_save_restore_s+ 0 9C72 A E _vbe_biosfn_save_video_sta+ 0 9AB3 A E 
_vbe_biosfn_set_get_palett+ 0 9E60 A E _vbe_biosfn_set_mode        0 9905 A E 
_vbe_has_vbe_display        0 94B2 A   _vbebios_copyright          0 8F7A A   
_vbebios_info_string        0 9026 A   _vbebios_product_name       0 8FD8 A   
_vbebios_product_revision   0 8FF1 A   _vbebios_vendor_name        0 8FC0 A   
_vga_compat_setup           0 937A A   _vga_modes                  0 020B A   
_vgafont14                  0 176F A   _vgafont14alt               0 356F A   
_vgafont16                  0 256F A   _vgafont16alt               0 3570 A   
_vgafont8                   0 0F6F A   _vgamem_copy_cga            0 4801 A   
_vgamem_copy_pl4            0 46B4 A   _vgamem_fill_cga            0 4913 A   
_vgamem_fill_pl4            0 4776 A   _video_param_table          0 029F A   
_video_save_pointer_table   0 3608 A   _write_byte                 0 7D40 A   
_write_gfx_char_cga         0 5367 A   _write_gfx_char_lin         0 556A A   
_write_gfx_char_pl4         0 51F4 A   _write_word                 0 7D58 A   
biosfn_enable_cursor_emula+ 0 6D65 A   biosfn_enable_default_pale+ 0 6D01 A   
biosfn_enable_grayscale_su+ 0 6D41 A   biosfn_enable_video_addres+ 0 6D23 A   
biosfn_get_all_palette_reg  0 63F9 A   biosfn_get_ega_info         0 6C4D A   
biosfn_get_single_palette_+ 0 63C7 A   biosfn_get_video_mode       0 62C1 A   
biosfn_group_0B             0 5A30 A   biosfn_group_10             0 62E8 A   
biosfn_group_1A             0 6E70 A   biosfn_read_all_dac_reg     0 64D9 A   
biosfn_read_display_code    0 6E7C A   biosfn_read_overscan_borde+ 0 63EB A   
biosfn_read_pel_mask        0 650C A   biosfn_read_single_dac_reg  0 64BE A   
biosfn_read_video_dac_stat+ 0 6517 A   biosfn_select_vert_res      0 6C78 A   
biosfn_select_video_dac_co+ 0 647B A   biosfn_set_all_dac_reg      0 6453 A   
biosfn_set_all_palette_reg  0 6374 A   biosfn_set_border_color     0 5A3E A   
biosfn_set_display_code     0 6E91 A   biosfn_set_overscan_border+ 0 636C A   
biosfn_set_palette          0 5A7D A   biosfn_set_pel_mask         0 6501 A   
biosfn_set_single_dac_reg   0 643A A   biosfn_set_single_palette_+ 0 6352 A   
biosfn_set_text_block_spec+ 0 69BF A   biosfn_toggle_intensity     0 63A1 A   
bit8_clear                  0 93C2 A   bit9_clear                  0 93C9 A   
bpp4_mode                   0 9163 A   dispi_get_bank              0 92AD A   
dispi_get_bpp               0 9222 A   dispi_get_enable            0 928F A   
dispi_get_id                0 91B1 A   dispi_get_virt_height       0 936C A   
dispi_get_virt_width        0 935E A   dispi_get_x_offset          0 9302 A   
dispi_get_y_offset          0 9320 A   dispi_set_bank_farcall_err+ 0 92ED A   
dispi_set_bank_farcall_get  0 92DF A   dispi_set_id                0 91BF A   
dispi_set_virt_width        0 934B A   dispi_set_x_offset          0 92F2 A   
dispi_set_y_offset          0 9310 A   get_bpp_noinc               0 9239 A   
get_dac_16_page             0 6547 A   get_dac_palette_format      0 9E4C A   
get_display_start           0 9E19 A   get_display_window          0 9DA1 A   
get_logical_scan_line_leng+ 0 9DD9 A   get_palette_loop            0 6401 A   
idiv_u                      0 66AD A   illegal_window              0 90F6 A   
init_bios_area              0 35D0 A   init_vga_card               0 3571 A   
int10_end                   0 0209 A   int10_group_10_unknown      0 634E A   
int10_normal                0 01FB A   int10_test_0B               0 0158 A   
int10_test_1001             0 62EE A   int10_test_1002             0 62F4 A   
int10_test_1003             0 62FA A   int10_test_1007             0 6301 A   
int10_test_1008             0 6308 A   int10_test_1009             0 630F A   
int10_test_1010             0 6316 A   int10_test_1012             0 631D A   
int10_test_1013             0 6324 A   int10_test_1015             0 632B A   
int10_test_1017             0 6332 A   int10_test_1018             0 6339 A   
int10_test_1019             0 6340 A   int10_test_101A             0 6347 A   
int10_test_101B             0 01B1 A   int10_test_1103             0 0163 A   
int10_test_12               0 016E A   int10_test_1A               0 014D A   
int10_test_4F               0 01C0 A   int10_test_BL30             0 017E A   
int10_test_BL31             0 0189 A   int10_test_BL32             0 0193 A   
int10_test_BL33             0 019D A   int10_test_BL34             0 01A7 A   
int10_test_vbe_05           0 01CE A   int10_test_vbe_06           0 01D7 A   
int10_test_vbe_07           0 01E0 A   int10_test_vbe_08           0 01E9 A   
int10_test_vbe_0A           0 01F2 A   memcpyb_end                 0 7CE2 A   
memcpyw_end                 0 7D12 A   memsetb_end                 0 7C8F A   
memsetw_end                 0 7CB4 A   mode_ega_color              0 6C6D A   
msg_alt_dcc                 0 6EB5 A   msg_vbe_init                0 9070 A   
msg_vert_res                0 6CDA A   msg_vga_init                0 358D A   
no_4bpp_1                   0 9DD1 A   no_4bpp_2                   0 9DEE A   
no_actl_reg1                0 636B A   no_actl_reg2                0 63EA A   
no_vbe_flag                 0 9505 A   no_vbe_interface            0 94E9 A   
no_vbe_mode                 0 9A9D A   read_dac_loop               0 64EA A   
set_actl_normal             0 64B7 A   set_cga_palette_loop        0 5A8A A   
set_dac_16_page             0 64B1 A   set_dac_loop                0 6464 A   
set_dac_mode                0 9E49 A   set_dac_page                0 649E A   
set_dac_palette_format      0 9E34 A   set_display_start           0 9E0B A   
set_display_window          0 9D91 A   set_intensity_loop          0 5A5C A   
set_logical_scan_line_byte+ 0 9DC0 A   set_logical_scan_line_pixe+ 0 9DD6 A   
set_low_border              0 5A56 A   set_normal_dac              0 9E46 A   
set_palette_loop            0 6383 A   set_retcode                 0 6CD3 A   
set_vert_res                0 6CC9 A   set_width_svga              0 933C A   
set_xy_regs                 0 916F A   vbe_03_ok                   0 9AA6 A   
vbe_05_failed               0 9DAA A   vbe_08_ok                   0 9E58 A   
vbe_08_unsupported          0 9E5C A   vbe_biosfn_display_window_+ 0 9D81 A   
vbe_biosfn_return_current_+ 0 9A86 A   vbe_biosfn_return_protecte+ 0 9E61 A   
vbe_biosfn_set_get_dac_pal+ 0 9E29 A   vbe_biosfn_set_get_display+ 0 9DFB A   
vbe_biosfn_set_get_logical+ 0 9DAE A   vbe_display_info            0 94F3 A   
vbe_init                    0 94C5 A   vert_res_200                0 6CBF A   
vert_res_350                0 6CB5 A   vert_res_400                0 6CA9 A   
vesa_pm_end                 0 91B1 A   vesa_pm_io_ports_table      0 90B8 A   
vesa_pm_set_display_start   0 90FB A   vesa_pm_set_display_start1  0 910A A   
vesa_pm_set_display_window+ 0 90CF A   vesa_pm_set_window          0 90C4 A   
vesa_pm_start               0 90B0 A   vesa_pm_unimplemented       0 91AC A   
vga_compat_end              0 944F A   vga_set_virt_width          0 932E A   
vgabios_copyright           0 0052 A   vgabios_date                0 0044 A   
vgabios_end                 0 9E8C A   vgabios_entry_point         0 0003 A   
vgabios_init_func           0 0109 A   vgabios_int10_handler       0 0133 A   
vgabios_license             0 007E A   vgabios_name                0 0022 A   
vgabios_start               0 0000 A   vgabios_version             0 0038 A   
vgabios_website             0 00B3 A   

00000 errors
00000 warnings
