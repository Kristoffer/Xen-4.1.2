00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios-cirrus_.c"
00003                                           ! 1 # 5
00004                                           ! 5 typedef unsigned char Bit8u;
00005                                           !BCC_EOS
00006                                           ! 6 typedef unsigned short Bit16u;
00007                                           !BCC_EOS
00008                                           ! 7 typedef unsigned long Bit32u;
00009                                           !BCC_EOS
00010                                           ! 8 typedef unsigned short Boolean;
00011                                           !BCC_EOS
00012                                           ! 9 static Bit8u read_byte();
00013                                           !BCC_EOS
00014                                           ! 10 static Bit16u read_word();
00015                                           !BCC_EOS
00016                                           ! 11 static void write_byte();
00017                                           !BCC_EOS
00018                                           ! 12 static void write_word();
00019                                           !BCC_EOS
00020                                           ! 13 static Bit8u inb();
00021                                           !BCC_EOS
00022                                           ! 14 static Bit16u inw();
00023                                           !BCC_EOS
00024                                           ! 15 static void outb();
00025                                           !BCC_EOS
00026                                           ! 16 static void outw();
00027                                           !BCC_EOS
00028                                           ! 17 static Bit16u get_SS();
00029                                           !BCC_EOS
00030                                           ! 18 static void printf();
00031                                           !BCC_EOS
00032                                           ! 19 static void unimplemented();
00033                                           !BCC_EOS
00034                                           ! 20 static void unknown();
00035                                           !BCC_EOS
00036                                           ! 21 static Bit8u find_vga_entry();
00037                                           !BCC_EOS
00038                                           ! 22 static void memsetb();
00039                                           !BCC_EOS
00040                                           ! 23 static void memsetw();
00041                                           !BCC_EOS
00042                                           ! 24 static void memcpyb();
00043                                           !BCC_EOS
00044                                           ! 25 static void memcpyw();
00045                                           !BCC_EOS
00046                                           ! 26 static void biosfn_set_video_mode();
00047                                           !BCC_EOS
00048                                           ! 27 static void biosfn_set_cursor_shape();
00049                                           !BCC_EOS
00050                                           ! 28 static void biosfn_set_cursor_pos();
00051                                           !BCC_EOS
00052                                           ! 29 static void biosfn_get_cursor_pos();
00053                                           !BCC_EOS
00054                                           ! 30 static void biosfn_set_active_page();
00055                                           !BCC_EOS
00056                                           ! 31 static void biosfn_scroll();
00057                                           !BCC_EOS
00058                                           ! 32 static void biosfn_read_char_attr();
00059                                           !BCC_EOS
00060                                           ! 33 static void biosfn_write_char_attr();
00061                                           !BCC_EOS
00062                                           ! 34 static void biosfn_write_char_only();
00063                                           !BCC_EOS
00064                                           ! 35 static void biosfn_write_pixel();
00065                                           !BCC_EOS
00066                                           ! 36 static void biosfn_read_pixel();
00067                                           !BCC_EOS
00068                                           ! 37 static void biosfn_write_teletype();
00069                                           !BCC_EOS
00070                                           ! 38 static void biosfn_perform_gray_scale_summing();
00071                                           !BCC_EOS
00072                                           ! 39 static void biosfn_load_text_user_pat();
00073                                           !BCC_EOS
00074                                           ! 40 static void biosfn_load_text_8_14_pat();
00075                                           !BCC_EOS
00076                                           ! 41 static void biosfn_load_text_8_8_pat();
00077                                           !BCC_EOS
00078                                           ! 42 static void biosfn_load_text_8_16_pat();
00079                                           !BCC_EOS
00080                                           ! 43 static void biosfn_load_gfx_8_8_chars();
00081                                           !BCC_EOS
00082                                           ! 44 static void biosfn_load_gfx_user_chars();
00083                                           !BCC_EOS
00084                                           ! 45 static void biosfn_load_gfx_8_14_chars();
00085                                           !BCC_EOS
00086                                           ! 46 static void biosfn_load_gfx_8_8_dd_chars();
00087                                           !BCC_EOS
00088                                           ! 47 static void biosfn_load_gfx_8_16_chars();
00089                                           !BCC_EOS
00090                                           ! 48 static void biosfn_get_font_info();
00091                                           !BCC_EOS
00092                                           ! 49 static void biosfn_alternate_prtsc();
00093                                           !BCC_EOS
00094                                           ! 50 static void biosfn_switch_video_interface();
00095                                           !BCC_EOS
00096                                           ! 51 static void biosfn_enable_video_refresh_control();
00097                                           !BCC_EOS
00098                                           ! 52 static void biosfn_write_string();
00099                                           !BCC_EOS
00100                                           ! 53 static void biosfn_read_state_info();
00101                                           !BCC_EOS
00102                                           ! 54 static void biosfn_read_video_state_size();
00103                                           !BCC_EOS
00104                                           ! 55 static Bit16u biosfn_save_video_state();
00105                                           !BCC_EOS
00106                                           ! 56 static Bit16u biosfn_restore_video_state();
00107                                           !BCC_EOS
00108                                           ! 57 extern Bit8u video_save_pointer_table[];
00109                                           !BCC_EOS
00110                                           ! 58 #asm
00111                                           !BCC_ASM
00112                                           MACRO SET_INT_VECTOR
00113                                             push ds
00114                                             xor ax, ax
00115                                             mov ds, ax
00116                                             mov ax, ?3
00117                                             mov ?1*4, ax
00118                                             mov ax, ?2
00119                                             mov ?1*4+2, ax
00120                                             pop ds
00121                                           MEND
00122                                           ! 69 endasm
00123                                           !BCC_ENDASM
00124                                           ! 70 #asm
00125                                           !BCC_ASM
00126                                           
00127 0000                                      .rom
00128 0000                                      .org 0
00129                                           use16 386
00130                       00000000            vgabios_start:
00131 0000                        55            .byte 0x55, 0xaa
00132 0002                        40            .byte 0x40
00133                       00000003            vgabios_entry_point:
00134 0003           E9         0121              jmp vgabios_init_func
00135 0018                                      .org 0x18
00136 0018                      010F            .word vgabios_pci_data
00137 001E                                      .org 0x1e
00138 001E                        49            .ascii "IBM"
00139 0021                        00            .byte 0x00
00140                       00000022            vgabios_name:
00141 0022                        50            .ascii "Plex86/Bochs VGABios"
00142 0036                        20            .ascii " (PCI)"
00143 003C                        20            .ascii " "
00144 003D                        00            .byte 0x00
00145                       0000003E            vgabios_version:
00146 003E                        63            .ascii "current-cvs"
00147 0049                        20            .ascii " "
00148                       0000004A            vgabios_date:
00149 004A                        31            .ascii "10 Feb 2012"
00150 0055                        0A            .byte 0x0a,0x0d
00151 0057                        00            .byte 0x00
00152                       00000058            vgabios_copyright:
00153 0058                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00154 0081                        0A            .byte 0x0a,0x0d
00155 0083                        00            .byte 0x00
00156                       00000084            vgabios_license:
00157 0084                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00158 00B4                        0A            .byte 0x0a,0x0d
00159 00B6                        0A            .byte 0x0a,0x0d
00160 00B8                        00            .byte 0x00
00161                       000000B9            vgabios_website:
00162 00B9                        50            .ascii "Please visit :"
00163 00C7                        0A            .byte 0x0a,0x0d
00164                                           ;;.ascii " . http://www.plex86.org"
00165                                           ;;.byte 0x0a,0x0d
00166 00C9                        20            .ascii " . http://bochs.sourceforge.net"
00167 00E8                        0A            .byte 0x0a,0x0d
00168 00EA                        20            .ascii " . http://www.nongnu.org/vgabios"
00169 010A                        0A            .byte 0x0a,0x0d
00170 010C                        0A            .byte 0x0a,0x0d
00171 010E                        00            .byte 0x00
00172                       0000010F            vgabios_pci_data:
00173 010F                        50            .ascii "PCIR"
00174 0113                      1013            .word 0x1013
00175 0115                      00B8            .word 0x00b8
00176 0117                      0000            .word 0
00177 0119                      0018            .word 0x18
00178 011B                        00            .byte 0
00179 011C                        00            .byte 0x0
00180 011D                      0300            .word 0x300
00181 011F                      0040            .word 0x40
00182 0121                      0001            .word 1
00183 0123                        00            .byte 0
00184 0124                        80            .byte 0x80
00185 0125                      0000            .word 0
00186                                           ;; ============================================================================================
00187                                           ;;
00188                                           ;; Init Entry point
00189                                           ;;
00190                                           ;; ============================================================================================
00191                       00000127            vgabios_init_func:
00192                                           ;; init vga card
00193 0127           E8         3416              call init_vga_card
00194                                           ;; init basic bios vars
00195 012A           E8         3472              call init_bios_area
00196                                           ;; set int10 vect
00197                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   012D           1E                           push ds
 +a   012E           31C0                         xor ax, ax
 +a   0130           8ED8                         mov ds, ax
 +a   0132           B8                   0151    mov ax,  #vgabios_int10_handler
 +a   0135           A3         0040              mov 0x10*4, ax
 +a   0138           B8                   C000    mov ax,  #0xC000
 +a   013B           A3         0042              mov 0x10*4+2, ax
 +a   013E           1F                           pop ds
00198 013F           E8         81D0              call cirrus_init
00199                                           ;; display splash screen
00200 0142           E8         34AE              call _display_splash_screen
00201                                           ;; init video mode and clear the screen
00202 0145           B8                   0003    mov ax,#0x0003
00203 0148           CD                     10    int #0x10
00204                                           ;; show info
00205 014A           E8         34A7              call _display_info
00206                                           ;; show cirrus info
00207 014D           E8         81F9              call cirrus_display_info
00208 0150           CB                           retf
00209                                           ! 154 endasm
00210                                           !BCC_ENDASM
00211                                           ! 155 #asm
00212                                           !BCC_ASM
00213                       00000151            vgabios_int10_handler:
00214 0151           9C                           pushf
00215 0152           80FC                   0F    cmp ah, #0x0f
00216 0155           75           05              jne int10_test_1A
00217 0157           E8         5FB0              call biosfn_get_video_mode
00218 015A           EB           7C              jmp int10_end
00219                       0000015C            int10_test_1A:
00220 015C           80FC                   1A    cmp ah, #0x1a
00221 015F           75           05              jne int10_test_0B
00222 0161           E8         6AD3              call biosfn_group_1A
00223 0164           EB           72              jmp int10_end
00224                       00000166            int10_test_0B:
00225 0166           80FC                   0B    cmp ah, #0x0b
00226 0169           75           05              jne int10_test_1103
00227 016B           E8         571C              call biosfn_group_0B
00228 016E           EB           68              jmp int10_end
00229                       00000170            int10_test_1103:
00230 0170           3D                   1103    cmp ax, #0x1103
00231 0173           75           05              jne int10_test_12
00232 0175           E8         668D              call biosfn_set_text_block_specifier
00233 0178           EB           5E              jmp int10_end
00234                       0000017A            int10_test_12:
00235 017A           80FC                   12    cmp ah, #0x12
00236 017D           75           3C              jne int10_test_101B
00237 017F           80FB                   10    cmp bl, #0x10
00238 0182           75           05              jne int10_test_BL30
00239 0184           E8         68D8              call biosfn_get_ega_info
00240 0187           EB           4F              jmp int10_end
00241                       00000189            int10_test_BL30:
00242 0189           80FB                   30    cmp bl, #0x30
00243 018C           75           05              jne int10_test_BL31
00244 018E           E8         68F2              call biosfn_select_vert_res
00245 0191           EB           45              jmp int10_end
00246                       00000193            int10_test_BL31:
00247 0193           80FB                   31    cmp bl, #0x31
00248 0196           75           05              jne int10_test_BL32
00249 0198           E8         693B              call biosfn_enable_default_palette_loading
00250 019B           EB           3B              jmp int10_end
00251                       0000019D            int10_test_BL32:
00252 019D           80FB                   32    cmp bl, #0x32
00253 01A0           75           05              jne int10_test_BL33
00254 01A2           E8         6953              call biosfn_enable_video_addressing
00255 01A5           EB           31              jmp int10_end
00256                       000001A7            int10_test_BL33:
00257 01A7           80FB                   33    cmp bl, #0x33
00258 01AA           75           05              jne int10_test_BL34
00259 01AC           E8         6967              call biosfn_enable_grayscale_summing
00260 01AF           EB           27              jmp int10_end
00261                       000001B1            int10_test_BL34:
00262 01B1           80FB                   34    cmp bl, #0x34
00263 01B4           75           14              jne int10_normal
00264 01B6           E8         6981              call biosfn_enable_cursor_emulation
00265 01B9           EB           1D              jmp int10_end
00266                       000001BB            int10_test_101B:
00267 01BB           3D                   101B    cmp ax, #0x101b
00268 01BE           74           0A              je int10_normal
00269 01C0           80FC                   10    cmp ah, #0x10
00270 01C3           75           05              jne int10_normal
00271 01C5           E8         5F69              call biosfn_group_10
00272 01C8           EB           0E              jmp int10_end
00273                       000001CA            int10_normal:
00274 01CA           06                           push es
00275 01CB           1E                           push ds
00276 01CC           60                           pusha
00277                                           ;; We have to set ds to access the right data segment
00278 01CD           BB                   C000    mov bx, #0xc000
00279 01D0           8EDB                         mov ds, bx
00280 01D2           E8         3464              call _int10_func
00281 01D5           61                           popa
00282 01D6           1F                           pop ds
00283 01D7           07                           pop es
00284                       000001D8            int10_end:
00285 01D8           9D                           popf
00286 01D9           CF                           iret
00287                                           ! 230 endasm
00288                                           !BCC_ENDASM
00289                                           ! 231 typedef struct
00290                                           ! 232 {Bit8u svgamode;
00291                                           !BCC_EOS
00292                                           ! 233  Bit8u class;
00293                                           !BCC_EOS
00294                                           ! 234  Bit8u memmodel;
00295                                           !BCC_EOS
00296                                           ! 235  Bit8u pixbits;
00297                                           !BCC_EOS
00298                                           ! 236  Bit16u sstart;
00299                                           !BCC_EOS
00300                                           ! 237  Bit8u pelmask;
00301                                           !BCC_EOS
00302                                           ! 238  Bit8u dacmodel;
00303                                           !BCC_EOS
00304                                           ! 239 } VGAMODES;
00305                                           !BCC_EOS
00306                                           ! 240 static VGAMODES vga_modes[15 +1]=
00307                                           ! 241 {
00308                                           
00309                       000001DA            _vga_modes:
00310                                           ! 242  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00311 01DA                        00            .byte	0
00312 01DB                        00            .byte	0
00313 01DC                        00            .byte	0
00314 01DD                        04            .byte	4
00315 01DE                      B800            .word	$B800
00316 01E0                        FF            .byte	$FF
00317 01E1                        02            .byte	2
00318                                           ! 243  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00319 01E2                        01            .byte	1
00320 01E3                        00            .byte	0
00321 01E4                        00            .byte	0
00322 01E5                        04            .byte	4
00323 01E6                      B800            .word	$B800
00324 01E8                        FF            .byte	$FF
00325 01E9                        02            .byte	2
00326                                           ! 244  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00327 01EA                        02            .byte	2
00328 01EB                        00            .byte	0
00329 01EC                        00            .byte	0
00330 01ED                        04            .byte	4
00331 01EE                      B800            .word	$B800
00332 01F0                        FF            .byte	$FF
00333 01F1                        02            .byte	2
00334                                           ! 245  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00335 01F2                        03            .byte	3
00336 01F3                        00            .byte	0
00337 01F4                        00            .byte	0
00338 01F5                        04            .byte	4
00339 01F6                      B800            .word	$B800
00340 01F8                        FF            .byte	$FF
00341 01F9                        02            .byte	2
00342                                           ! 246  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00343 01FA                        04            .byte	4
00344 01FB                        01            .byte	1
00345 01FC                        02            .byte	2
00346 01FD                        02            .byte	2
00347 01FE                      B800            .word	$B800
00348 0200                        FF            .byte	$FF
00349 0201                        01            .byte	1
00350                                           ! 247  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00351 0202                        05            .byte	5
00352 0203                        01            .byte	1
00353 0204                        02            .byte	2
00354 0205                        02            .byte	2
00355 0206                      B800            .word	$B800
00356 0208                        FF            .byte	$FF
00357 0209                        01            .byte	1
00358                                           ! 248  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00359 020A                        06            .byte	6
00360 020B                        01            .byte	1
00361 020C                        02            .byte	2
00362 020D                        01            .byte	1
00363 020E                      B800            .word	$B800
00364 0210                        FF            .byte	$FF
00365 0211                        01            .byte	1
00366                                           ! 249  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00367 0212                        07            .byte	7
00368 0213                        00            .byte	0
00369 0214                        01            .byte	1
00370 0215                        04            .byte	4
00371 0216                      B000            .word	$B000
00372 0218                        FF            .byte	$FF
00373 0219                        00            .byte	0
00374                                           ! 250  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00375 021A                        0D            .byte	$D
00376 021B                        01            .byte	1
00377 021C                        04            .byte	4
00378 021D                        04            .byte	4
00379 021E                      A000            .word	$A000
00380 0220                        FF            .byte	$FF
00381 0221                        01            .byte	1
00382                                           ! 251  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00383 0222                        0E            .byte	$E
00384 0223                        01            .byte	1
00385 0224                        04            .byte	4
00386 0225                        04            .byte	4
00387 0226                      A000            .word	$A000
00388 0228                        FF            .byte	$FF
00389 0229                        01            .byte	1
00390                                           ! 252  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00391 022A                        0F            .byte	$F
00392 022B                        01            .byte	1
00393 022C                        03            .byte	3
00394 022D                        01            .byte	1
00395 022E                      A000            .word	$A000
00396 0230                        FF            .byte	$FF
00397 0231                        00            .byte	0
00398                                           ! 253  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00399 0232                        10            .byte	$10
00400 0233                        01            .byte	1
00401 0234                        04            .byte	4
00402 0235                        04            .byte	4
00403 0236                      A000            .word	$A000
00404 0238                        FF            .byte	$FF
00405 0239                        02            .byte	2
00406                                           ! 254  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00407 023A                        11            .byte	$11
00408 023B                        01            .byte	1
00409 023C                        03            .byte	3
00410 023D                        01            .byte	1
00411 023E                      A000            .word	$A000
00412 0240                        FF            .byte	$FF
00413 0241                        02            .byte	2
00414                                           ! 255  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00415 0242                        12            .byte	$12
00416 0243                        01            .byte	1
00417 0244                        04            .byte	4
00418 0245                        04            .byte	4
00419 0246                      A000            .word	$A000
00420 0248                        FF            .byte	$FF
00421 0249                        02            .byte	2
00422                                           ! 256  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00423 024A                        13            .byte	$13
00424 024B                        01            .byte	1
00425 024C                        05            .byte	5
00426 024D                        08            .byte	8
00427 024E                      A000            .word	$A000
00428 0250                        FF            .byte	$FF
00429 0251                        03            .byte	3
00430                                           ! 257  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00431 0252                        6A            .byte	$6A
00432 0253                        01            .byte	1
00433 0254                        04            .byte	4
00434 0255                        04            .byte	4
00435 0256                      A000            .word	$A000
00436 0258                        FF            .byte	$FF
00437 0259                        02            .byte	2
00438                                           ! 258 };
00439                                           !BCC_EOS
00440                                           ! 259 static Bit8u line_to_vpti[15 +1]={
00441                       0000025A            _line_to_vpti:
00442                                           ! 260     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00443 025A                        17            .byte	$17
00444 025B                        17            .byte	$17
00445 025C                        18            .byte	$18
00446 025D                        18            .byte	$18
00447 025E                        04            .byte	4
00448 025F                        05            .byte	5
00449 0260                        06            .byte	6
00450 0261                        07            .byte	7
00451                                           ! 261     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00452 0262                        0D            .byte	$D
00453 0263                        0E            .byte	$E
00454 0264                        11            .byte	$11
00455 0265                        12            .byte	$12
00456 0266                        1A            .byte	$1A
00457 0267                        1B            .byte	$1B
00458 0268                        1C            .byte	$1C
00459 0269                        1D            .byte	$1D
00460                                           ! 262 };
00461                                           !BCC_EOS
00462                                           ! 263 static Bit8u dac_regs[3 +1]=
00463                                           ! 264 {0x3f,0x3f,0x3f,0xff};
00464                       0000026A            _dac_regs:
00465 026A                        3F            .byte	$3F
00466 026B                        3F            .byte	$3F
00467 026C                        3F            .byte	$3F
00468 026D                        FF            .byte	$FF
00469                                           !BCC_EOS
00470                                           ! 265 typedef struct {
00471                                           ! 266     Bit8u twidth;
00472                                           !BCC_EOS
00473                                           ! 267     Bit8u t
00474                                           ! 267 heightm1;
00475                                           !BCC_EOS
00476                                           ! 268     Bit8u cheight;
00477                                           !BCC_EOS
00478                                           ! 269     Bit8u slength_l;
00479                                           !BCC_EOS
00480                                           ! 270     Bit8u slength_h;
00481                                           !BCC_EOS
00482                                           ! 271     Bit8u sequ_regs[4];
00483                                           !BCC_EOS
00484                                           ! 272     Bit8u miscreg;
00485                                           !BCC_EOS
00486                                           ! 273     Bit8u crtc_regs[25];
00487                                           !BCC_EOS
00488                                           ! 274     Bit8u actl_regs[20];
00489                                           !BCC_EOS
00490                                           ! 275     Bit8u grdc_regs[9];
00491                                           !BCC_EOS
00492                                           ! 276 } VideoParamTableEntry;
00493                                           !BCC_EOS
00494                                           ! 277 static VideoParamTableEntry video_param_table[30] = {
00495                       0000026E            _video_param_table:
00496                                           ! 278 {
00497                                           ! 279  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00498 026E                        00            .byte	0
00499 026F                        00            .byte	0
00500 0270                        00            .byte	0
00501 0271                        00            .byte	0
00502 0272                        00            .byte	0
00503 0273                        00            .byte	0
00504 0274                        00            .byte	0
00505 0275                        00            .byte	0
00506                                           ! 280  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00507 0276                        00            .byte	0
00508 0277                        00            .byte	0
00509 0278                        00            .byte	0
00510 0279                        00            .byte	0
00511 027A                        00            .byte	0
00512 027B                        00            .byte	0
00513 027C                        00            .byte	0
00514 027D                        00            .byte	0
00515                                           ! 281  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00516 027E                        00            .byte	0
00517 027F                        00            .byte	0
00518 0280                        00            .byte	0
00519 0281                        00            .byte	0
00520 0282                        00            .byte	0
00521 0283                        00            .byte	0
00522 0284                        00            .byte	0
00523 0285                        00            .byte	0
00524                                           ! 282  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00525 0286                        00            .byte	0
00526 0287                        00            .byte	0
00527 0288                        00            .byte	0
00528 0289                        00            .byte	0
00529 028A                        00            .byte	0
00530 028B                        00            .byte	0
00531 028C                        00            .byte	0
00532 028D                        00            .byte	0
00533                                           ! 283  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00534 028E                        00            .byte	0
00535 028F                        00            .byte	0
00536 0290                        00            .byte	0
00537 0291                        00            .byte	0
00538 0292                        00            .byte	0
00539 0293                        00            .byte	0
00540 0294                        00            .byte	0
00541 0295                        00            .byte	0
00542                                           ! 284  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00543 0296                        00            .byte	0
00544 0297                        00            .byte	0
00545 0298                        00            .byte	0
00546 0299                        00            .byte	0
00547 029A                        00            .byte	0
00548 029B                        00            .byte	0
00549 029C                        00            .byte	0
00550 029D                        00            .byte	0
00551                                           ! 285  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00552 029E                        00            .byte	0
00553 029F                        00            .byte	0
00554 02A0                        00            .byte	0
00555 02A1                        00            .byte	0
00556 02A2                        00            .byte	0
00557 02A3                        00            .byte	0
00558 02A4                        00            .byte	0
00559 02A5                        00            .byte	0
00560                                           ! 286  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00561 02A6                        00            .byte	0
00562 02A7                        00            .byte	0
00563 02A8                        00            .byte	0
00564 02A9                        00            .byte	0
00565 02AA                        00            .byte	0
00566 02AB                        00            .byte	0
00567 02AC                        00            .byte	0
00568 02AD                        00            .byte	0
00569                                           ! 287 },
00570                                           ! 288 {
00571                                           ! 289  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00572 02AE                        00            .byte	0
00573 02AF                        00            .byte	0
00574 02B0                        00            .byte	0
00575 02B1                        00            .byte	0
00576 02B2                        00            .byte	0
00577 02B3                        00            .byte	0
00578 02B4                        00            .byte	0
00579 02B5                        00            .byte	0
00580                                           ! 290  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00581 02B6                        00            .byte	0
00582 02B7                        00            .byte	0
00583 02B8                        00            .byte	0
00584 02B9                        00            .byte	0
00585 02BA                        00            .byte	0
00586 02BB                        00            .byte	0
00587 02BC                        00            .byte	0
00588 02BD                        00            .byte	0
00589                                           ! 291  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00590 02BE                        00            .byte	0
00591 02BF                        00            .byte	0
00592 02C0                        00            .byte	0
00593 02C1                        00            .byte	0
00594 02C2                        00            .byte	0
00595 02C3                        00            .byte	0
00596 02C4                        00            .byte	0
00597 02C5                        00            .byte	0
00598                                           ! 292  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00599 02C6                        00            .byte	0
00600 02C7                        00            .byte	0
00601 02C8                        00            .byte	0
00602 02C9                        00            .byte	0
00603 02CA                        00            .byte	0
00604 02CB                        00            .byte	0
00605 02CC                        00            .byte	0
00606 02CD                        00            .byte	0
00607                                           ! 293  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00608 02CE                        00            .byte	0
00609 02CF                        00            .byte	0
00610 02D0                        00            .byte	0
00611 02D1                        00            .byte	0
00612 02D2                        00            .byte	0
00613 02D3                        00            .byte	0
00614 02D4                        00            .byte	0
00615 02D5                        00            .byte	0
00616                                           ! 294  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00617 02D6                        00            .byte	0
00618 02D7                        00            .byte	0
00619 02D8                        00            .byte	0
00620 02D9                        00            .byte	0
00621 02DA                        00            .byte	0
00622 02DB                        00            .byte	0
00623 02DC                        00            .byte	0
00624 02DD                        00            .byte	0
00625                                           ! 295  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00626 02DE                        00            .byte	0
00627 02DF                        00            .byte	0
00628 02E0                        00            .byte	0
00629 02E1                        00            .byte	0
00630 02E2                        00            .byte	0
00631 02E3                        00            .byte	0
00632 02E4                        00            .byte	0
00633 02E5                        00            .byte	0
00634                                           ! 296  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00635 02E6                        00            .byte	0
00636 02E7                        00            .byte	0
00637 02E8                        00            .byte	0
00638 02E9                        00            .byte	0
00639 02EA                        00            .byte	0
00640 02EB                        00            .byte	0
00641 02EC                        00            .byte	0
00642 02ED                        00            .byte	0
00643                                           ! 297 },
00644                                           ! 298 {
00645                                           ! 299  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00646 02EE                        00            .byte	0
00647 02EF                        00            .byte	0
00648 02F0                        00            .byte	0
00649 02F1                        00            .byte	0
00650 02F2                        00            .byte	0
00651 02F3                        00            .byte	0
00652 02F4                        00            .byte	0
00653 02F5                        00            .byte	0
00654                                           ! 300  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00655 02F6                        00            .byte	0
00656 02F7                        00            .byte	0
00657 02F8                        00            .byte	0
00658 02F9                        00            .byte	0
00659 02FA                        00            .byte	0
00660 02FB                        00            .byte	0
00661 02FC                        00            .byte	0
00662 02FD                        00            .byte	0
00663                                           ! 301  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00664 02FE                        00            .byte	0
00665 02FF                        00            .byte	0
00666 0300                        00            .byte	0
00667 0301                        00            .byte	0
00668 0302                        00            .byte	0
00669 0303                        00            .byte	0
00670 0304                        00            .byte	0
00671 0305                        00            .byte	0
00672                                           ! 302  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00673 0306                        00            .byte	0
00674 0307                        00            .byte	0
00675 0308                        00            .byte	0
00676 0309                        00            .byte	0
00677 030A                        00            .byte	0
00678 030B                        00            .byte	0
00679 030C                        00            .byte	0
00680 030D                        00            .byte	0
00681                                           ! 303  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00682 030E                        00            .byte	0
00683 030F                        00            .byte	0
00684 0310                        00            .byte	0
00685 0311                        00            .byte	0
00686 0312                        00            .byte	0
00687 0313                        00            .byte	0
00688 0314                        00            .byte	0
00689 0315                        00            .byte	0
00690                                           ! 304  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00691 0316                        00            .byte	0
00692 0317                        00            .byte	0
00693 0318                        00            .byte	0
00694 0319                        00            .byte	0
00695 031A                        00            .byte	0
00696 031B                        00            .byte	0
00697 031C                        00            .byte	0
00698 031D                        00            .byte	0
00699                                           ! 305  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00700 031E                        00            .byte	0
00701 031F                        00            .byte	0
00702 0320                        00            .byte	0
00703 0321                        00            .byte	0
00704 0322                        00            .byte	0
00705 0323                        00            .byte	0
00706 0324                        00            .byte	0
00707 0325                        00            .byte	0
00708                                           ! 306  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00709 0326                        00            .byte	0
00710 0327                        00            .byte	0
00711 0328                        00            .byte	0
00712 0329                        00            .byte	0
00713 032A                        00            .byte	0
00714 032B                        00            .byte	0
00715 032C                        00            .byte	0
00716 032D                        00            .byte	0
00717                                           ! 307 },
00718                                           ! 308 {
00719                                           ! 309  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00720 032E                        00            .byte	0
00721 032F                        00            .byte	0
00722 0330                        00            .byte	0
00723 0331                        00            .byte	0
00724 0332                        00            .byte	0
00725 0333                        00            .byte	0
00726 0334                        00            .byte	0
00727 0335                        00            .byte	0
00728                                           ! 310  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00729 0336                        00            .byte	0
00730 0337                        00            .byte	0
00731 0338                        00            .byte	0
00732 0339                        00            .byte	0
00733 033A                        00            .byte	0
00734 033B                        00            .byte	0
00735 033C                        00            .byte	0
00736 033D                        00            .byte	0
00737                                           ! 311  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00738 033E                        00            .byte	0
00739 033F                        00            .byte	0
00740 0340                        00            .byte	0
00741 0341                        00            .byte	0
00742 0342                        00            .byte	0
00743 0343                        00            .byte	0
00744 0344                        00            .byte	0
00745 0345                        00            .byte	0
00746                                           ! 312  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00747 0346                        00            .byte	0
00748 0347                        00            .byte	0
00749 0348                        00            .byte	0
00750 0349                        00            .byte	0
00751 034A                        00            .byte	0
00752 034B                        00            .byte	0
00753 034C                        00            .byte	0
00754 034D                        00            .byte	0
00755                                           ! 313  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00756 034E                        00            .byte	0
00757 034F                        00            .byte	0
00758 0350                        00            .byte	0
00759 0351                        00            .byte	0
00760 0352                        00            .byte	0
00761 0353                        00            .byte	0
00762 0354                        00            .byte	0
00763 0355                        00            .byte	0
00764                                           ! 314  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00765 0356                        00            .byte	0
00766 0357                        00            .byte	0
00767 0358                        00            .byte	0
00768 0359                        00            .byte	0
00769 035A                        00            .byte	0
00770 035B                        00            .byte	0
00771 035C                        00            .byte	0
00772 035D                        00            .byte	0
00773                                           ! 315  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00774 035E                        00            .byte	0
00775 035F                        00            .byte	0
00776 0360                        00            .byte	0
00777 0361                        00            .byte	0
00778 0362                        00            .byte	0
00779 0363                        00            .byte	0
00780 0364                        00            .byte	0
00781 0365                        00            .byte	0
00782                                           ! 316  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00783 0366                        00            .byte	0
00784 0367                        00            .byte	0
00785 0368                        00            .byte	0
00786 0369                        00            .byte	0
00787 036A                        00            .byte	0
00788 036B                        00            .byte	0
00789 036C                        00            .byte	0
00790 036D                        00            .byte	0
00791                                           ! 317 },
00792                                           ! 318 {
00793                                           ! 319  40, 24, 8, 0x00, 0x08,
00794 036E                        28            .byte	$28
00795 036F                        18            .byte	$18
00796 0370                        08            .byte	8
00797 0371                        00            .byte	0
00798 0372                        08            .byte	8
00799                                           ! 320  0x09, 0x03, 0x00, 0x02,
00800 0373                        09            .byte	9
00801 0374                        03            .byte	3
00802 0375                        00            .byte	0
00803 0376                        02            .byte	2
00804                                           ! 321  0x63,
00805 0377                        63            .byte	$63
00806                                           ! 322  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00807 0378                        2D            .byte	$2D
00808 0379                        27            .byte	$27
00809 037A                        28            .byte	$28
00810 037B                        90            .byte	$90
00811 037C                        2B            .byte	$2B
00812 037D                        80            .byte	$80
00813 037E                        BF            .byte	$BF
00814 037F                        1F            .byte	$1F
00815                                           ! 323  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00816 0380                        00            .byte	0
00817 0381                        C1            .byte	$C1
00818 0382                        00            .byte	0
00819 0383                        00            .byte	0
00820 0384                        00            .byte	0
00821 0385                        00            .byte	0
00822 0386                        00            .byte	0
00823 0387                        00            .byte	0
00824                                           ! 324  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0
00825 0388                        9C            .byte	$9C
00826 0389                        8E            .byte	$8E
00827 038A                        8F            .byte	$8F
00828 038B                        14            .byte	$14
00829 038C                        00            .byte	0
00830 038D                        96            .byte	$96
00831                                           ! 324 xb9, 0xa2,
00832 038E                        B9            .byte	$B9
00833 038F                        A2            .byte	$A2
00834                                           ! 325  0xff,
00835 0390                        FF            .byte	$FF
00836                                           ! 326  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00837 0391                        00            .byte	0
00838 0392                        13            .byte	$13
00839 0393                        15            .byte	$15
00840 0394                        17            .byte	$17
00841 0395                        02            .byte	2
00842 0396                        04            .byte	4
00843 0397                        06            .byte	6
00844 0398                        07            .byte	7
00845                                           ! 327  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00846 0399                        10            .byte	$10
00847 039A                        11            .byte	$11
00848 039B                        12            .byte	$12
00849 039C                        13            .byte	$13
00850 039D                        14            .byte	$14
00851 039E                        15            .byte	$15
00852 039F                        16            .byte	$16
00853 03A0                        17            .byte	$17
00854                                           ! 328  0x01, 0x00, 0x03, 0x00,
00855 03A1                        01            .byte	1
00856 03A2                        00            .byte	0
00857 03A3                        03            .byte	3
00858 03A4                        00            .byte	0
00859                                           ! 329  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00860 03A5                        00            .byte	0
00861 03A6                        00            .byte	0
00862 03A7                        00            .byte	0
00863 03A8                        00            .byte	0
00864 03A9                        00            .byte	0
00865 03AA                        30            .byte	$30
00866 03AB                        0F            .byte	$F
00867 03AC                        0F            .byte	$F
00868 03AD                        FF            .byte	$FF
00869                                           ! 330 },
00870                                           ! 331 {
00871                                           ! 332  40, 24, 8, 0x00, 0x08,
00872 03AE                        28            .byte	$28
00873 03AF                        18            .byte	$18
00874 03B0                        08            .byte	8
00875 03B1                        00            .byte	0
00876 03B2                        08            .byte	8
00877                                           ! 333  0x09, 0x03, 0x00, 0x02,
00878 03B3                        09            .byte	9
00879 03B4                        03            .byte	3
00880 03B5                        00            .byte	0
00881 03B6                        02            .byte	2
00882                                           ! 334  0x63,
00883 03B7                        63            .byte	$63
00884                                           ! 335  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00885 03B8                        2D            .byte	$2D
00886 03B9                        27            .byte	$27
00887 03BA                        28            .byte	$28
00888 03BB                        90            .byte	$90
00889 03BC                        2B            .byte	$2B
00890 03BD                        80            .byte	$80
00891 03BE                        BF            .byte	$BF
00892 03BF                        1F            .byte	$1F
00893                                           ! 336  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00894 03C0                        00            .byte	0
00895 03C1                        C1            .byte	$C1
00896 03C2                        00            .byte	0
00897 03C3                        00            .byte	0
00898 03C4                        00            .byte	0
00899 03C5                        00            .byte	0
00900 03C6                        00            .byte	0
00901 03C7                        00            .byte	0
00902                                           ! 337  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00903 03C8                        9C            .byte	$9C
00904 03C9                        8E            .byte	$8E
00905 03CA                        8F            .byte	$8F
00906 03CB                        14            .byte	$14
00907 03CC                        00            .byte	0
00908 03CD                        96            .byte	$96
00909 03CE                        B9            .byte	$B9
00910 03CF                        A2            .byte	$A2
00911                                           ! 338  0xff,
00912 03D0                        FF            .byte	$FF
00913                                           ! 339  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00914 03D1                        00            .byte	0
00915 03D2                        13            .byte	$13
00916 03D3                        15            .byte	$15
00917 03D4                        17            .byte	$17
00918 03D5                        02            .byte	2
00919 03D6                        04            .byte	4
00920 03D7                        06            .byte	6
00921 03D8                        07            .byte	7
00922                                           ! 340  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00923 03D9                        10            .byte	$10
00924 03DA                        11            .byte	$11
00925 03DB                        12            .byte	$12
00926 03DC                        13            .byte	$13
00927 03DD                        14            .byte	$14
00928 03DE                        15            .byte	$15
00929 03DF                        16            .byte	$16
00930 03E0                        17            .byte	$17
00931                                           ! 341  0x01, 0x00, 0x03, 0x00,
00932 03E1                        01            .byte	1
00933 03E2                        00            .byte	0
00934 03E3                        03            .byte	3
00935 03E4                        00            .byte	0
00936                                           ! 342  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00937 03E5                        00            .byte	0
00938 03E6                        00            .byte	0
00939 03E7                        00            .byte	0
00940 03E8                        00            .byte	0
00941 03E9                        00            .byte	0
00942 03EA                        30            .byte	$30
00943 03EB                        0F            .byte	$F
00944 03EC                        0F            .byte	$F
00945 03ED                        FF            .byte	$FF
00946                                           ! 343 },
00947                                           ! 344 {
00948                                           ! 345  80, 24, 8, 0x00, 0x10,
00949 03EE                        50            .byte	$50
00950 03EF                        18            .byte	$18
00951 03F0                        08            .byte	8
00952 03F1                        00            .byte	0
00953 03F2                        10            .byte	$10
00954                                           ! 346  0x01, 0x01, 0x00, 0x06,
00955 03F3                        01            .byte	1
00956 03F4                        01            .byte	1
00957 03F5                        00            .byte	0
00958 03F6                        06            .byte	6
00959                                           ! 347  0x63,
00960 03F7                        63            .byte	$63
00961                                           ! 348  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
00962 03F8                        5F            .byte	$5F
00963 03F9                        4F            .byte	$4F
00964 03FA                        50            .byte	$50
00965 03FB                        82            .byte	$82
00966 03FC                        54            .byte	$54
00967 03FD                        80            .byte	$80
00968 03FE                        BF            .byte	$BF
00969 03FF                        1F            .byte	$1F
00970                                           ! 349  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00971 0400                        00            .byte	0
00972 0401                        C1            .byte	$C1
00973 0402                        00            .byte	0
00974 0403                        00            .byte	0
00975 0404                        00            .byte	0
00976 0405                        00            .byte	0
00977 0406                        00            .byte	0
00978 0407                        00            .byte	0
00979                                           ! 350  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
00980 0408                        9C            .byte	$9C
00981 0409                        8E            .byte	$8E
00982 040A                        8F            .byte	$8F
00983 040B                        28            .byte	$28
00984 040C                        00            .byte	0
00985 040D                        96            .byte	$96
00986 040E                        B9            .byte	$B9
00987 040F                        C2            .byte	$C2
00988                                           ! 351  0xff,
00989 0410                        FF            .byte	$FF
00990                                           ! 352  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
00991 0411                        00            .byte	0
00992 0412                        17            .byte	$17
00993 0413                        17            .byte	$17
00994 0414                        17            .byte	$17
00995 0415                        17            .byte	$17
00996 0416                        17            .byte	$17
00997 0417                        17            .byte	$17
00998 0418                        17            .byte	$17
00999                                           ! 353  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01000 0419                        17            .byte	$17
01001 041A                        17            .byte	$17
01002 041B                        17            .byte	$17
01003 041C                        17            .byte	$17
01004 041D                        17            .byte	$17
01005 041E                        17            .byte	$17
01006 041F                        17            .byte	$17
01007 0420                        17            .byte	$17
01008                                           ! 354  0x01, 0x00, 0x01, 0x00,
01009 0421                        01            .byte	1
01010 0422                        00            .byte	0
01011 0423                        01            .byte	1
01012 0424                        00            .byte	0
01013                                           ! 355  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01014 0425                        00            .byte	0
01015 0426                        00            .byte	0
01016 0427                        00            .byte	0
01017 0428                        00            .byte	0
01018 0429                        00            .byte	0
01019 042A                        00            .byte	0
01020 042B                        0D            .byte	$D
01021 042C                        0F            .byte	$F
01022 042D                        FF            .byte	$FF
01023                                           ! 356 },
01024                                           ! 357 {
01025                                           ! 358  80, 24, 16, 0x00, 0x10,
01026 042E                        50            .byte	$50
01027 042F                        18            .byte	$18
01028 0430                        10            .byte	$10
01029 0431                        00            .byte	0
01030 0432                        10            .byte	$10
01031                                           ! 359  0x00, 0x03, 0x00, 0x02,
01032 0433                        00            .byte	0
01033 0434                        03            .byte	3
01034 0435                        00            .byte	0
01035 0436                        02            .byte	2
01036                                           ! 360  0x66,
01037 0437                        66            .byte	$66
01038                                           ! 361  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01039 0438                        5F            .byte	$5F
01040 0439                        4F            .byte	$4F
01041 043A                        50            .byte	$50
01042 043B                        82            .byte	$82
01043 043C                        55            .byte	$55
01044 043D                        81            .byte	$81
01045 043E                        BF            .byte	$BF
01046 043F                        1F            .byte	$1F
01047                                           ! 362  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01048 0440                        00            .byte	0
01049 0441                        4F            .byte	$4F
01050 0442                        0D            .byte	$D
01051 0443                        0E            .byte	$E
01052 0444                        00            .byte	0
01053 0445                        00            .byte	0
01054 0446                        00            .byte	0
01055 0447                        00            .byte	0
01056                                           ! 363  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01057 0448                        9C            .byte	$9C
01058 0449                        8E            .byte	$8E
01059 044A                        8F            .byte	$8F
01060 044B                        28            .byte	$28
01061 044C                        0F            .byte	$F
01062 044D                        96            .byte	$96
01063 044E                        B9            .byte	$B9
01064 044F                        A3            .byte	$A3
01065                                           ! 364  0xff,
01066 0450                        FF            .byte	$FF
01067                                           ! 365  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01068 0451                        00            .byte	0
01069 0452                        08            .byte	8
01070 0453                        08            .byte	8
01071 0454                        08            .byte	8
01072 0455                        08            .byte	8
01073 0456                        08            .byte	8
01074 0457                        08            .byte	8
01075 0458                        08            .byte	8
01076                                           ! 366  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01077 0459                        10            .byte	$10
01078 045A                        18            .byte	$18
01079 045B                        18            .byte	$18
01080 045C                        18            .byte	$18
01081 045D                        18            .byte	$18
01082 045E                        18            .byte	$18
01083 045F                        18            .byte	$18
01084 0460                        18            .byte	$18
01085                                           ! 367  0x0e, 0x00, 0x0f, 0x08,
01086 0461                        0E            .byte	$E
01087 0462                        00            .byte	0
01088 0463                        0F            .byte	$F
01089 0464                        08            .byte	8
01090                                           ! 368  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01091 0465                        00            .byte	0
01092 0466                        00            .byte	0
01093 0467                        00            .byte	0
01094 0468                        00            .byte	0
01095 0469                        00            .byte	0
01096 046A                        10            .byte	$10
01097 046B                        0A            .byte	$A
01098 046C                        0F            .byte	$F
01099 046D                        FF            .byte	$FF
01100                                           ! 369 },
01101                                           ! 370 {
01102                                           ! 371  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01103 046E                        00            .byte	0
01104 046F                        00            .byte	0
01105 0470                        00            .byte	0
01106 0471                        00            .byte	0
01107 0472                        00            .byte	0
01108 0473                        00            .byte	0
01109 0474                        00            .byte	0
01110 0475                        00            .byte	0
01111                                           ! 372  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01112 0476                        00            .byte	0
01113 0477                        00            .byte	0
01114 0478                        00            .byte	0
01115 0479                        00            .byte	0
01116 047A                        00            .byte	0
01117 047B                        00            .byte	0
01118 047C                        00            .byte	0
01119 047D                        00            .byte	0
01120                                           ! 373  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01121 047E                        00            .byte	0
01122 047F                        00            .byte	0
01123 0480                        00            .byte	0
01124 0481                        00            .byte	0
01125 0482                        00            .byte	0
01126 0483                        00            .byte	0
01127 0484                        00            .byte	0
01128 0485                        00            .byte	0
01129                                           ! 374  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01130 0486                        00            .byte	0
01131 0487                        00            .byte	0
01132 0488                        00            .byte	0
01133 0489                        00            .byte	0
01134 048A                        00            .byte	0
01135 048B                        00            .byte	0
01136 048C                        00            .byte	0
01137 048D                        00            .byte	0
01138                                           ! 375  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01139 048E                        00            .byte	0
01140 048F                        00            .byte	0
01141 0490                        00            .byte	0
01142 0491                        00            .byte	0
01143 0492                        00            .byte	0
01144 0493                        00            .byte	0
01145 0494                        00            .byte	0
01146 0495                        00            .byte	0
01147                                           ! 376  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01148 0496                        00            .byte	0
01149 0497                        00            .byte	0
01150 0498                        00            .byte	0
01151 0499                        00            .byte	0
01152 049A                        00            .byte	0
01153 049B                        00            .byte	0
01154 049C                        00            .byte	0
01155 049D                        00            .byte	0
01156                                           ! 377  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01157 049E                        00            .byte	0
01158 049F                        00            .byte	0
01159 04A0                        00            .byte	0
01160 04A1                        00            .byte	0
01161 04A2                        00            .byte	0
01162 04A3                        00            .byte	0
01163 04A4                        00            .byte	0
01164 04A5                        00            .byte	0
01165                                           ! 378  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01166 04A6                        00            .byte	0
01167 04A7                        00            .byte	0
01168 04A8                        00            .byte	0
01169 04A9                        00            .byte	0
01170 04AA                        00            .byte	0
01171 04AB                        00            .byte	0
01172 04AC                        00            .byte	0
01173 04AD                        00            .byte	0
01174                                           ! 379 },
01175                                           ! 380 {
01176                                           ! 381  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01177 04AE                        00            .byte	0
01178 04AF                        00            .byte	0
01179 04B0                        00            .byte	0
01180 04B1                        00            .byte	0
01181 04B2                        00            .byte	0
01182 04B3                        00            .byte	0
01183 04B4                        00            .byte	0
01184 04B5                        00            .byte	0
01185                                           ! 382  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01186 04B6                        00            .byte	0
01187 04B7                        00            .byte	0
01188 04B8                        00            .byte	0
01189 04B9                        00            .byte	0
01190 04BA                        00            .byte	0
01191 04BB                        00            .byte	0
01192 04BC                        00            .byte	0
01193 04BD                        00            .byte	0
01194                                           ! 383  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01195 04BE                        00            .byte	0
01196 04BF                        00            .byte	0
01197 04C0                        00            .byte	0
01198 04C1                        00            .byte	0
01199 04C2                        00            .byte	0
01200 04C3                        00            .byte	0
01201 04C4                        00            .byte	0
01202 04C5                        00            .byte	0
01203                                           ! 384  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01204 04C6                        00            .byte	0
01205 04C7                        00            .byte	0
01206 04C8                        00            .byte	0
01207 04C9                        00            .byte	0
01208 04CA                        00            .byte	0
01209 04CB                        00            .byte	0
01210 04CC                        00            .byte	0
01211 04CD                        00            .byte	0
01212                                           ! 385  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01213 04CE                        00            .byte	0
01214 04CF                        00            .byte	0
01215 04D0                        00            .byte	0
01216 04D1                        00            .byte	0
01217 04D2                        00            .byte	0
01218 04D3                        00            .byte	0
01219 04D4                        00            .byte	0
01220 04D5                        00            .byte	0
01221                                           ! 386  0x00, 0x00, 0x00, 0x00, 
01222 04D6                        00            .byte	0
01223 04D7                        00            .byte	0
01224 04D8                        00            .byte	0
01225 04D9                        00            .byte	0
01226                                           ! 386 0x00, 0x00, 0x00, 0x00,
01227 04DA                        00            .byte	0
01228 04DB                        00            .byte	0
01229 04DC                        00            .byte	0
01230 04DD                        00            .byte	0
01231                                           ! 387  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01232 04DE                        00            .byte	0
01233 04DF                        00            .byte	0
01234 04E0                        00            .byte	0
01235 04E1                        00            .byte	0
01236 04E2                        00            .byte	0
01237 04E3                        00            .byte	0
01238 04E4                        00            .byte	0
01239 04E5                        00            .byte	0
01240                                           ! 388  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01241 04E6                        00            .byte	0
01242 04E7                        00            .byte	0
01243 04E8                        00            .byte	0
01244 04E9                        00            .byte	0
01245 04EA                        00            .byte	0
01246 04EB                        00            .byte	0
01247 04EC                        00            .byte	0
01248 04ED                        00            .byte	0
01249                                           ! 389 },
01250                                           ! 390 {
01251                                           ! 391  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01252 04EE                        00            .byte	0
01253 04EF                        00            .byte	0
01254 04F0                        00            .byte	0
01255 04F1                        00            .byte	0
01256 04F2                        00            .byte	0
01257 04F3                        00            .byte	0
01258 04F4                        00            .byte	0
01259 04F5                        00            .byte	0
01260                                           ! 392  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01261 04F6                        00            .byte	0
01262 04F7                        00            .byte	0
01263 04F8                        00            .byte	0
01264 04F9                        00            .byte	0
01265 04FA                        00            .byte	0
01266 04FB                        00            .byte	0
01267 04FC                        00            .byte	0
01268 04FD                        00            .byte	0
01269                                           ! 393  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01270 04FE                        00            .byte	0
01271 04FF                        00            .byte	0
01272 0500                        00            .byte	0
01273 0501                        00            .byte	0
01274 0502                        00            .byte	0
01275 0503                        00            .byte	0
01276 0504                        00            .byte	0
01277 0505                        00            .byte	0
01278                                           ! 394  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01279 0506                        00            .byte	0
01280 0507                        00            .byte	0
01281 0508                        00            .byte	0
01282 0509                        00            .byte	0
01283 050A                        00            .byte	0
01284 050B                        00            .byte	0
01285 050C                        00            .byte	0
01286 050D                        00            .byte	0
01287                                           ! 395  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01288 050E                        00            .byte	0
01289 050F                        00            .byte	0
01290 0510                        00            .byte	0
01291 0511                        00            .byte	0
01292 0512                        00            .byte	0
01293 0513                        00            .byte	0
01294 0514                        00            .byte	0
01295 0515                        00            .byte	0
01296                                           ! 396  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01297 0516                        00            .byte	0
01298 0517                        00            .byte	0
01299 0518                        00            .byte	0
01300 0519                        00            .byte	0
01301 051A                        00            .byte	0
01302 051B                        00            .byte	0
01303 051C                        00            .byte	0
01304 051D                        00            .byte	0
01305                                           ! 397  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01306 051E                        00            .byte	0
01307 051F                        00            .byte	0
01308 0520                        00            .byte	0
01309 0521                        00            .byte	0
01310 0522                        00            .byte	0
01311 0523                        00            .byte	0
01312 0524                        00            .byte	0
01313 0525                        00            .byte	0
01314                                           ! 398  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01315 0526                        00            .byte	0
01316 0527                        00            .byte	0
01317 0528                        00            .byte	0
01318 0529                        00            .byte	0
01319 052A                        00            .byte	0
01320 052B                        00            .byte	0
01321 052C                        00            .byte	0
01322 052D                        00            .byte	0
01323                                           ! 399 },
01324                                           ! 400 {
01325                                           ! 401  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01326 052E                        00            .byte	0
01327 052F                        00            .byte	0
01328 0530                        00            .byte	0
01329 0531                        00            .byte	0
01330 0532                        00            .byte	0
01331 0533                        00            .byte	0
01332 0534                        00            .byte	0
01333 0535                        00            .byte	0
01334                                           ! 402  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01335 0536                        00            .byte	0
01336 0537                        00            .byte	0
01337 0538                        00            .byte	0
01338 0539                        00            .byte	0
01339 053A                        00            .byte	0
01340 053B                        00            .byte	0
01341 053C                        00            .byte	0
01342 053D                        00            .byte	0
01343                                           ! 403  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01344 053E                        00            .byte	0
01345 053F                        00            .byte	0
01346 0540                        00            .byte	0
01347 0541                        00            .byte	0
01348 0542                        00            .byte	0
01349 0543                        00            .byte	0
01350 0544                        00            .byte	0
01351 0545                        00            .byte	0
01352                                           ! 404  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01353 0546                        00            .byte	0
01354 0547                        00            .byte	0
01355 0548                        00            .byte	0
01356 0549                        00            .byte	0
01357 054A                        00            .byte	0
01358 054B                        00            .byte	0
01359 054C                        00            .byte	0
01360 054D                        00            .byte	0
01361                                           ! 405  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01362 054E                        00            .byte	0
01363 054F                        00            .byte	0
01364 0550                        00            .byte	0
01365 0551                        00            .byte	0
01366 0552                        00            .byte	0
01367 0553                        00            .byte	0
01368 0554                        00            .byte	0
01369 0555                        00            .byte	0
01370                                           ! 406  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01371 0556                        00            .byte	0
01372 0557                        00            .byte	0
01373 0558                        00            .byte	0
01374 0559                        00            .byte	0
01375 055A                        00            .byte	0
01376 055B                        00            .byte	0
01377 055C                        00            .byte	0
01378 055D                        00            .byte	0
01379                                           ! 407  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01380 055E                        00            .byte	0
01381 055F                        00            .byte	0
01382 0560                        00            .byte	0
01383 0561                        00            .byte	0
01384 0562                        00            .byte	0
01385 0563                        00            .byte	0
01386 0564                        00            .byte	0
01387 0565                        00            .byte	0
01388                                           ! 408  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01389 0566                        00            .byte	0
01390 0567                        00            .byte	0
01391 0568                        00            .byte	0
01392 0569                        00            .byte	0
01393 056A                        00            .byte	0
01394 056B                        00            .byte	0
01395 056C                        00            .byte	0
01396 056D                        00            .byte	0
01397                                           ! 409 },
01398                                           ! 410 {
01399                                           ! 411  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01400 056E                        00            .byte	0
01401 056F                        00            .byte	0
01402 0570                        00            .byte	0
01403 0571                        00            .byte	0
01404 0572                        00            .byte	0
01405 0573                        00            .byte	0
01406 0574                        00            .byte	0
01407 0575                        00            .byte	0
01408                                           ! 412  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01409 0576                        00            .byte	0
01410 0577                        00            .byte	0
01411 0578                        00            .byte	0
01412 0579                        00            .byte	0
01413 057A                        00            .byte	0
01414 057B                        00            .byte	0
01415 057C                        00            .byte	0
01416 057D                        00            .byte	0
01417                                           ! 413  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01418 057E                        00            .byte	0
01419 057F                        00            .byte	0
01420 0580                        00            .byte	0
01421 0581                        00            .byte	0
01422 0582                        00            .byte	0
01423 0583                        00            .byte	0
01424 0584                        00            .byte	0
01425 0585                        00            .byte	0
01426                                           ! 414  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01427 0586                        00            .byte	0
01428 0587                        00            .byte	0
01429 0588                        00            .byte	0
01430 0589                        00            .byte	0
01431 058A                        00            .byte	0
01432 058B                        00            .byte	0
01433 058C                        00            .byte	0
01434 058D                        00            .byte	0
01435                                           ! 415  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01436 058E                        00            .byte	0
01437 058F                        00            .byte	0
01438 0590                        00            .byte	0
01439 0591                        00            .byte	0
01440 0592                        00            .byte	0
01441 0593                        00            .byte	0
01442 0594                        00            .byte	0
01443 0595                        00            .byte	0
01444                                           ! 416  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01445 0596                        00            .byte	0
01446 0597                        00            .byte	0
01447 0598                        00            .byte	0
01448 0599                        00            .byte	0
01449 059A                        00            .byte	0
01450 059B                        00            .byte	0
01451 059C                        00            .byte	0
01452 059D                        00            .byte	0
01453                                           ! 417  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01454 059E                        00            .byte	0
01455 059F                        00            .byte	0
01456 05A0                        00            .byte	0
01457 05A1                        00            .byte	0
01458 05A2                        00            .byte	0
01459 05A3                        00            .byte	0
01460 05A4                        00            .byte	0
01461 05A5                        00            .byte	0
01462                                           ! 418  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01463 05A6                        00            .byte	0
01464 05A7                        00            .byte	0
01465 05A8                        00            .byte	0
01466 05A9                        00            .byte	0
01467 05AA                        00            .byte	0
01468 05AB                        00            .byte	0
01469 05AC                        00            .byte	0
01470 05AD                        00            .byte	0
01471                                           ! 419 },
01472                                           ! 420 {
01473                                           ! 421  40, 24, 8, 0x00, 0x20,
01474 05AE                        28            .byte	$28
01475 05AF                        18            .byte	$18
01476 05B0                        08            .byte	8
01477 05B1                        00            .byte	0
01478 05B2                        20            .byte	$20
01479                                           ! 422  0x09, 0x0f, 0x00, 0x06,
01480 05B3                        09            .byte	9
01481 05B4                        0F            .byte	$F
01482 05B5                        00            .byte	0
01483 05B6                        06            .byte	6
01484                                           ! 423  0x63,
01485 05B7                        63            .byte	$63
01486                                           ! 424  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01487 05B8                        2D            .byte	$2D
01488 05B9                        27            .byte	$27
01489 05BA                        28            .byte	$28
01490 05BB                        90            .byte	$90
01491 05BC                        2B            .byte	$2B
01492 05BD                        80            .byte	$80
01493 05BE                        BF            .byte	$BF
01494 05BF                        1F            .byte	$1F
01495                                           ! 425  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01496 05C0                        00            .byte	0
01497 05C1                        C0            .byte	$C0
01498 05C2                        00            .byte	0
01499 05C3                        00            .byte	0
01500 05C4                        00            .byte	0
01501 05C5                        00            .byte	0
01502 05C6                        00            .byte	0
01503 05C7                        00            .byte	0
01504                                           ! 426  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01505 05C8                        9C            .byte	$9C
01506 05C9                        8E            .byte	$8E
01507 05CA                        8F            .byte	$8F
01508 05CB                        14            .byte	$14
01509 05CC                        00            .byte	0
01510 05CD                        96            .byte	$96
01511 05CE                        B9            .byte	$B9
01512 05CF                        E3            .byte	$E3
01513                                           ! 427  0xff,
01514 05D0                        FF            .byte	$FF
01515                                           ! 428  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01516 05D1                        00            .byte	0
01517 05D2                        01            .byte	1
01518 05D3                        02            .byte	2
01519 05D4                        03            .byte	3
01520 05D5                        04            .byte	4
01521 05D6                        05            .byte	5
01522 05D7                        06            .byte	6
01523 05D8                        07            .byte	7
01524                                           ! 429  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01525 05D9                        10            .byte	$10
01526 05DA                        11            .byte	$11
01527 05DB                        12            .byte	$12
01528 05DC                        13            .byte	$13
01529 05DD                        14            .byte	$14
01530 05DE                        15            .byte	$15
01531 05DF                        16            .byte	$16
01532 05E0                        17            .byte	$17
01533                                           ! 430  0x01, 0x00, 0x0f, 0x00,
01534 05E1                        01            .byte	1
01535 05E2                        00            .byte	0
01536 05E3                        0F            .byte	$F
01537 05E4                        00            .byte	0
01538                                           ! 431  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01539 05E5                        00            .byte	0
01540 05E6                        00            .byte	0
01541 05E7                        00            .byte	0
01542 05E8                        00            .byte	0
01543 05E9                        00            .byte	0
01544 05EA                        00            .byte	0
01545 05EB                        05            .byte	5
01546 05EC                        0F            .byte	$F
01547 05ED                        FF            .byte	$FF
01548                                           ! 432 },
01549                                           ! 433 {
01550                                           ! 434  80, 24, 8, 0x00, 0x40,
01551 05EE                        50            .byte	$50
01552 05EF                        18            .byte	$18
01553 05F0                        08            .byte	8
01554 05F1                        00            .byte	0
01555 05F2                        40            .byte	$40
01556                                           ! 435  0x01, 0x0f, 0x00, 0x06,
01557 05F3                        01            .byte	1
01558 05F4                        0F            .byte	$F
01559 05F5                        00            .byte	0
01560 05F6                        06            .byte	6
01561                                           ! 436  0x63,
01562 05F7                        63            .byte	$63
01563                                           ! 437  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01564 05F8                        5F            .byte	$5F
01565 05F9                        4F            .byte	$4F
01566 05FA                        50            .byte	$50
01567 05FB                        82            .byte	$82
01568 05FC                        54            .byte	$54
01569 05FD                        80            .byte	$80
01570 05FE                        BF            .byte	$BF
01571 05FF                        1F            .byte	$1F
01572                                           ! 438  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01573 0600                        00            .byte	0
01574 0601                        C0            .byte	$C0
01575 0602                        00            .byte	0
01576 0603                        00            .byte	0
01577 0604                        00            .byte	0
01578 0605                        00            .byte	0
01579 0606                        00            .byte	0
01580 0607                        00            .byte	0
01581                                           ! 439  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01582 0608                        9C            .byte	$9C
01583 0609                        8E            .byte	$8E
01584 060A                        8F            .byte	$8F
01585 060B                        28            .byte	$28
01586 060C                        00            .byte	0
01587 060D                        96            .byte	$96
01588 060E                        B9            .byte	$B9
01589 060F                        E3            .byte	$E3
01590                                           ! 440  0xff,
01591 0610                        FF            .byte	$FF
01592                                           ! 441  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01593 0611                        00            .byte	0
01594 0612                        01            .byte	1
01595 0613                        02            .byte	2
01596 0614                        03            .byte	3
01597 0615                        04            .byte	4
01598 0616                        05            .byte	5
01599 0617                        06            .byte	6
01600 0618                        07            .byte	7
01601                                           ! 442  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01602 0619                        10            .byte	$10
01603 061A                        11            .byte	$11
01604 061B                        12            .byte	$12
01605 061C                        13            .byte	$13
01606 061D                        14            .byte	$14
01607 061E                        15            .byte	$15
01608 061F                        16            .byte	$16
01609 0620                        17            .byte	$17
01610                                           ! 443  0x01, 0x00, 0x0f, 0x00,
01611 0621                        01            .byte	1
01612 0622                        00            .byte	0
01613 0623                        0F            .byte	$F
01614 0624                        00            .byte	0
01615                                           ! 444  0x0
01616                                           ! 444 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01617 0625                        00            .byte	0
01618 0626                        00            .byte	0
01619 0627                        00            .byte	0
01620 0628                        00            .byte	0
01621 0629                        00            .byte	0
01622 062A                        00            .byte	0
01623 062B                        05            .byte	5
01624 062C                        0F            .byte	$F
01625 062D                        FF            .byte	$FF
01626                                           ! 445 },
01627                                           ! 446 {
01628                                           ! 447  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01629 062E                        00            .byte	0
01630 062F                        00            .byte	0
01631 0630                        00            .byte	0
01632 0631                        00            .byte	0
01633 0632                        00            .byte	0
01634 0633                        00            .byte	0
01635 0634                        00            .byte	0
01636 0635                        00            .byte	0
01637                                           ! 448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01638 0636                        00            .byte	0
01639 0637                        00            .byte	0
01640 0638                        00            .byte	0
01641 0639                        00            .byte	0
01642 063A                        00            .byte	0
01643 063B                        00            .byte	0
01644 063C                        00            .byte	0
01645 063D                        00            .byte	0
01646                                           ! 449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01647 063E                        00            .byte	0
01648 063F                        00            .byte	0
01649 0640                        00            .byte	0
01650 0641                        00            .byte	0
01651 0642                        00            .byte	0
01652 0643                        00            .byte	0
01653 0644                        00            .byte	0
01654 0645                        00            .byte	0
01655                                           ! 450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01656 0646                        00            .byte	0
01657 0647                        00            .byte	0
01658 0648                        00            .byte	0
01659 0649                        00            .byte	0
01660 064A                        00            .byte	0
01661 064B                        00            .byte	0
01662 064C                        00            .byte	0
01663 064D                        00            .byte	0
01664                                           ! 451  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01665 064E                        00            .byte	0
01666 064F                        00            .byte	0
01667 0650                        00            .byte	0
01668 0651                        00            .byte	0
01669 0652                        00            .byte	0
01670 0653                        00            .byte	0
01671 0654                        00            .byte	0
01672 0655                        00            .byte	0
01673                                           ! 452  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01674 0656                        00            .byte	0
01675 0657                        00            .byte	0
01676 0658                        00            .byte	0
01677 0659                        00            .byte	0
01678 065A                        00            .byte	0
01679 065B                        00            .byte	0
01680 065C                        00            .byte	0
01681 065D                        00            .byte	0
01682                                           ! 453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01683 065E                        00            .byte	0
01684 065F                        00            .byte	0
01685 0660                        00            .byte	0
01686 0661                        00            .byte	0
01687 0662                        00            .byte	0
01688 0663                        00            .byte	0
01689 0664                        00            .byte	0
01690 0665                        00            .byte	0
01691                                           ! 454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01692 0666                        00            .byte	0
01693 0667                        00            .byte	0
01694 0668                        00            .byte	0
01695 0669                        00            .byte	0
01696 066A                        00            .byte	0
01697 066B                        00            .byte	0
01698 066C                        00            .byte	0
01699 066D                        00            .byte	0
01700                                           ! 455 },
01701                                           ! 456 {
01702                                           ! 457  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01703 066E                        00            .byte	0
01704 066F                        00            .byte	0
01705 0670                        00            .byte	0
01706 0671                        00            .byte	0
01707 0672                        00            .byte	0
01708 0673                        00            .byte	0
01709 0674                        00            .byte	0
01710 0675                        00            .byte	0
01711                                           ! 458  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01712 0676                        00            .byte	0
01713 0677                        00            .byte	0
01714 0678                        00            .byte	0
01715 0679                        00            .byte	0
01716 067A                        00            .byte	0
01717 067B                        00            .byte	0
01718 067C                        00            .byte	0
01719 067D                        00            .byte	0
01720                                           ! 459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01721 067E                        00            .byte	0
01722 067F                        00            .byte	0
01723 0680                        00            .byte	0
01724 0681                        00            .byte	0
01725 0682                        00            .byte	0
01726 0683                        00            .byte	0
01727 0684                        00            .byte	0
01728 0685                        00            .byte	0
01729                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01730 0686                        00            .byte	0
01731 0687                        00            .byte	0
01732 0688                        00            .byte	0
01733 0689                        00            .byte	0
01734 068A                        00            .byte	0
01735 068B                        00            .byte	0
01736 068C                        00            .byte	0
01737 068D                        00            .byte	0
01738                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01739 068E                        00            .byte	0
01740 068F                        00            .byte	0
01741 0690                        00            .byte	0
01742 0691                        00            .byte	0
01743 0692                        00            .byte	0
01744 0693                        00            .byte	0
01745 0694                        00            .byte	0
01746 0695                        00            .byte	0
01747                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01748 0696                        00            .byte	0
01749 0697                        00            .byte	0
01750 0698                        00            .byte	0
01751 0699                        00            .byte	0
01752 069A                        00            .byte	0
01753 069B                        00            .byte	0
01754 069C                        00            .byte	0
01755 069D                        00            .byte	0
01756                                           ! 463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01757 069E                        00            .byte	0
01758 069F                        00            .byte	0
01759 06A0                        00            .byte	0
01760 06A1                        00            .byte	0
01761 06A2                        00            .byte	0
01762 06A3                        00            .byte	0
01763 06A4                        00            .byte	0
01764 06A5                        00            .byte	0
01765                                           ! 464  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01766 06A6                        00            .byte	0
01767 06A7                        00            .byte	0
01768 06A8                        00            .byte	0
01769 06A9                        00            .byte	0
01770 06AA                        00            .byte	0
01771 06AB                        00            .byte	0
01772 06AC                        00            .byte	0
01773 06AD                        00            .byte	0
01774                                           ! 465 },
01775                                           ! 466 {
01776                                           ! 467  80, 24, 14, 0x00, 0x80,
01777 06AE                        50            .byte	$50
01778 06AF                        18            .byte	$18
01779 06B0                        0E            .byte	$E
01780 06B1                        00            .byte	0
01781 06B2                        80            .byte	$80
01782                                           ! 468  0x01, 0x0f, 0x00, 0x06,
01783 06B3                        01            .byte	1
01784 06B4                        0F            .byte	$F
01785 06B5                        00            .byte	0
01786 06B6                        06            .byte	6
01787                                           ! 469  0xa3,
01788 06B7                        A3            .byte	$A3
01789                                           ! 470  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01790 06B8                        5F            .byte	$5F
01791 06B9                        4F            .byte	$4F
01792 06BA                        50            .byte	$50
01793 06BB                        82            .byte	$82
01794 06BC                        54            .byte	$54
01795 06BD                        80            .byte	$80
01796 06BE                        BF            .byte	$BF
01797 06BF                        1F            .byte	$1F
01798                                           ! 471  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01799 06C0                        00            .byte	0
01800 06C1                        40            .byte	$40
01801 06C2                        00            .byte	0
01802 06C3                        00            .byte	0
01803 06C4                        00            .byte	0
01804 06C5                        00            .byte	0
01805 06C6                        00            .byte	0
01806 06C7                        00            .byte	0
01807                                           ! 472  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01808 06C8                        83            .byte	$83
01809 06C9                        85            .byte	$85
01810 06CA                        5D            .byte	$5D
01811 06CB                        28            .byte	$28
01812 06CC                        0F            .byte	$F
01813 06CD                        63            .byte	$63
01814 06CE                        BA            .byte	$BA
01815 06CF                        E3            .byte	$E3
01816                                           ! 473  0xff,
01817 06D0                        FF            .byte	$FF
01818                                           ! 474  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
01819 06D1                        00            .byte	0
01820 06D2                        08            .byte	8
01821 06D3                        00            .byte	0
01822 06D4                        00            .byte	0
01823 06D5                        18            .byte	$18
01824 06D6                        18            .byte	$18
01825 06D7                        00            .byte	0
01826 06D8                        00            .byte	0
01827                                           ! 475  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
01828 06D9                        00            .byte	0
01829 06DA                        08            .byte	8
01830 06DB                        00            .byte	0
01831 06DC                        00            .byte	0
01832 06DD                        00            .byte	0
01833 06DE                        18            .byte	$18
01834 06DF                        00            .byte	0
01835 06E0                        00            .byte	0
01836                                           ! 476  0x01, 0x00, 0x01, 0x00,
01837 06E1                        01            .byte	1
01838 06E2                        00            .byte	0
01839 06E3                        01            .byte	1
01840 06E4                        00            .byte	0
01841                                           ! 477  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01842 06E5                        00            .byte	0
01843 06E6                        00            .byte	0
01844 06E7                        00            .byte	0
01845 06E8                        00            .byte	0
01846 06E9                        00            .byte	0
01847 06EA                        00            .byte	0
01848 06EB                        05            .byte	5
01849 06EC                        0F            .byte	$F
01850 06ED                        FF            .byte	$FF
01851                                           ! 478 },
01852                                           ! 479 {
01853                                           ! 480  80, 24, 14, 0x00, 0x80,
01854 06EE                        50            .byte	$50
01855 06EF                        18            .byte	$18
01856 06F0                        0E            .byte	$E
01857 06F1                        00            .byte	0
01858 06F2                        80            .byte	$80
01859                                           ! 481  0x01, 0x0f, 0x00, 0x06,
01860 06F3                        01            .byte	1
01861 06F4                        0F            .byte	$F
01862 06F5                        00            .byte	0
01863 06F6                        06            .byte	6
01864                                           ! 482  0xa3,
01865 06F7                        A3            .byte	$A3
01866                                           ! 483  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01867 06F8                        5F            .byte	$5F
01868 06F9                        4F            .byte	$4F
01869 06FA                        50            .byte	$50
01870 06FB                        82            .byte	$82
01871 06FC                        54            .byte	$54
01872 06FD                        80            .byte	$80
01873 06FE                        BF            .byte	$BF
01874 06FF                        1F            .byte	$1F
01875                                           ! 484  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01876 0700                        00            .byte	0
01877 0701                        40            .byte	$40
01878 0702                        00            .byte	0
01879 0703                        00            .byte	0
01880 0704                        00            .byte	0
01881 0705                        00            .byte	0
01882 0706                        00            .byte	0
01883 0707                        00            .byte	0
01884                                           ! 485  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01885 0708                        83            .byte	$83
01886 0709                        85            .byte	$85
01887 070A                        5D            .byte	$5D
01888 070B                        28            .byte	$28
01889 070C                        0F            .byte	$F
01890 070D                        63            .byte	$63
01891 070E                        BA            .byte	$BA
01892 070F                        E3            .byte	$E3
01893                                           ! 486  0xff,
01894 0710                        FF            .byte	$FF
01895                                           ! 487  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
01896 0711                        00            .byte	0
01897 0712                        01            .byte	1
01898 0713                        02            .byte	2
01899 0714                        03            .byte	3
01900 0715                        04            .byte	4
01901 0716                        05            .byte	5
01902 0717                        14            .byte	$14
01903 0718                        07            .byte	7
01904                                           ! 488  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
01905 0719                        38            .byte	$38
01906 071A                        39            .byte	$39
01907 071B                        3A            .byte	$3A
01908 071C                        3B            .byte	$3B
01909 071D                        3C            .byte	$3C
01910 071E                        3D            .byte	$3D
01911 071F                        3E            .byte	$3E
01912 0720                        3F            .byte	$3F
01913                                           ! 489  0x01, 0x00, 0x0f, 0x00,
01914 0721                        01            .byte	1
01915 0722                        00            .byte	0
01916 0723                        0F            .byte	$F
01917 0724                        00            .byte	0
01918                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01919 0725                        00            .byte	0
01920 0726                        00            .byte	0
01921 0727                        00            .byte	0
01922 0728                        00            .byte	0
01923 0729                        00            .byte	0
01924 072A                        00            .byte	0
01925 072B                        05            .byte	5
01926 072C                        0F            .byte	$F
01927 072D                        FF            .byte	$FF
01928                                           ! 491 },
01929                                           ! 492 {
01930                                           ! 493  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01931 072E                        00            .byte	0
01932 072F                        00            .byte	0
01933 0730                        00            .byte	0
01934 0731                        00            .byte	0
01935 0732                        00            .byte	0
01936 0733                        00            .byte	0
01937 0734                        00            .byte	0
01938 0735                        00            .byte	0
01939                                           ! 494  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01940 0736                        00            .byte	0
01941 0737                        00            .byte	0
01942 0738                        00            .byte	0
01943 0739                        00            .byte	0
01944 073A                        00            .byte	0
01945 073B                        00            .byte	0
01946 073C                        00            .byte	0
01947 073D                        00            .byte	0
01948                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01949 073E                        00            .byte	0
01950 073F                        00            .byte	0
01951 0740                        00            .byte	0
01952 0741                        00            .byte	0
01953 0742                        00            .byte	0
01954 0743                        00            .byte	0
01955 0744                        00            .byte	0
01956 0745                        00            .byte	0
01957                                           ! 496  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01958 0746                        00            .byte	0
01959 0747                        00            .byte	0
01960 0748                        00            .byte	0
01961 0749                        00            .byte	0
01962 074A                        00            .byte	0
01963 074B                        00            .byte	0
01964 074C                        00            .byte	0
01965 074D                        00            .byte	0
01966                                           ! 497  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01967 074E                        00            .byte	0
01968 074F                        00            .byte	0
01969 0750                        00            .byte	0
01970 0751                        00            .byte	0
01971 0752                        00            .byte	0
01972 0753                        00            .byte	0
01973 0754                        00            .byte	0
01974 0755                        00            .byte	0
01975                                           ! 498  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01976 0756                        00            .byte	0
01977 0757                        00            .byte	0
01978 0758                        00            .byte	0
01979 0759                        00            .byte	0
01980 075A                        00            .byte	0
01981 075B                        00            .byte	0
01982 075C                        00            .byte	0
01983 075D                        00            .byte	0
01984                                           ! 499  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01985 075E                        00            .byte	0
01986 075F                        00            .byte	0
01987 0760                        00            .byte	0
01988 0761                        00            .byte	0
01989 0762                        00            .byte	0
01990 0763                        00            .byte	0
01991 0764                        00            .byte	0
01992 0765                        00            .byte	0
01993                                           ! 500  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01994 0766                        00            .byte	0
01995 0767                        00            .byte	0
01996 0768                        00            .byte	0
01997 0769                        00            .byte	0
01998 076A                        00            .byte	0
01999 076B                        00            .byte	0
02000 076C                        00            .byte	0
02001 076D                        00            .byte	0
02002                                           ! 501 },
02003                                           ! 502 {
02004                                           ! 503  0x00, 0x00, 
02005 076E                        00            .byte	0
02006 076F                        00            .byte	0
02007                                           ! 503 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02008 0770                        00            .byte	0
02009 0771                        00            .byte	0
02010 0772                        00            .byte	0
02011 0773                        00            .byte	0
02012 0774                        00            .byte	0
02013 0775                        00            .byte	0
02014                                           ! 504  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02015 0776                        00            .byte	0
02016 0777                        00            .byte	0
02017 0778                        00            .byte	0
02018 0779                        00            .byte	0
02019 077A                        00            .byte	0
02020 077B                        00            .byte	0
02021 077C                        00            .byte	0
02022 077D                        00            .byte	0
02023                                           ! 505  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02024 077E                        00            .byte	0
02025 077F                        00            .byte	0
02026 0780                        00            .byte	0
02027 0781                        00            .byte	0
02028 0782                        00            .byte	0
02029 0783                        00            .byte	0
02030 0784                        00            .byte	0
02031 0785                        00            .byte	0
02032                                           ! 506  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02033 0786                        00            .byte	0
02034 0787                        00            .byte	0
02035 0788                        00            .byte	0
02036 0789                        00            .byte	0
02037 078A                        00            .byte	0
02038 078B                        00            .byte	0
02039 078C                        00            .byte	0
02040 078D                        00            .byte	0
02041                                           ! 507  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02042 078E                        00            .byte	0
02043 078F                        00            .byte	0
02044 0790                        00            .byte	0
02045 0791                        00            .byte	0
02046 0792                        00            .byte	0
02047 0793                        00            .byte	0
02048 0794                        00            .byte	0
02049 0795                        00            .byte	0
02050                                           ! 508  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02051 0796                        00            .byte	0
02052 0797                        00            .byte	0
02053 0798                        00            .byte	0
02054 0799                        00            .byte	0
02055 079A                        00            .byte	0
02056 079B                        00            .byte	0
02057 079C                        00            .byte	0
02058 079D                        00            .byte	0
02059                                           ! 509  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02060 079E                        00            .byte	0
02061 079F                        00            .byte	0
02062 07A0                        00            .byte	0
02063 07A1                        00            .byte	0
02064 07A2                        00            .byte	0
02065 07A3                        00            .byte	0
02066 07A4                        00            .byte	0
02067 07A5                        00            .byte	0
02068                                           ! 510  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02069 07A6                        00            .byte	0
02070 07A7                        00            .byte	0
02071 07A8                        00            .byte	0
02072 07A9                        00            .byte	0
02073 07AA                        00            .byte	0
02074 07AB                        00            .byte	0
02075 07AC                        00            .byte	0
02076 07AD                        00            .byte	0
02077                                           ! 511 },
02078                                           ! 512 {
02079                                           ! 513  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02080 07AE                        00            .byte	0
02081 07AF                        00            .byte	0
02082 07B0                        00            .byte	0
02083 07B1                        00            .byte	0
02084 07B2                        00            .byte	0
02085 07B3                        00            .byte	0
02086 07B4                        00            .byte	0
02087 07B5                        00            .byte	0
02088                                           ! 514  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02089 07B6                        00            .byte	0
02090 07B7                        00            .byte	0
02091 07B8                        00            .byte	0
02092 07B9                        00            .byte	0
02093 07BA                        00            .byte	0
02094 07BB                        00            .byte	0
02095 07BC                        00            .byte	0
02096 07BD                        00            .byte	0
02097                                           ! 515  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02098 07BE                        00            .byte	0
02099 07BF                        00            .byte	0
02100 07C0                        00            .byte	0
02101 07C1                        00            .byte	0
02102 07C2                        00            .byte	0
02103 07C3                        00            .byte	0
02104 07C4                        00            .byte	0
02105 07C5                        00            .byte	0
02106                                           ! 516  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02107 07C6                        00            .byte	0
02108 07C7                        00            .byte	0
02109 07C8                        00            .byte	0
02110 07C9                        00            .byte	0
02111 07CA                        00            .byte	0
02112 07CB                        00            .byte	0
02113 07CC                        00            .byte	0
02114 07CD                        00            .byte	0
02115                                           ! 517  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02116 07CE                        00            .byte	0
02117 07CF                        00            .byte	0
02118 07D0                        00            .byte	0
02119 07D1                        00            .byte	0
02120 07D2                        00            .byte	0
02121 07D3                        00            .byte	0
02122 07D4                        00            .byte	0
02123 07D5                        00            .byte	0
02124                                           ! 518  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02125 07D6                        00            .byte	0
02126 07D7                        00            .byte	0
02127 07D8                        00            .byte	0
02128 07D9                        00            .byte	0
02129 07DA                        00            .byte	0
02130 07DB                        00            .byte	0
02131 07DC                        00            .byte	0
02132 07DD                        00            .byte	0
02133                                           ! 519  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02134 07DE                        00            .byte	0
02135 07DF                        00            .byte	0
02136 07E0                        00            .byte	0
02137 07E1                        00            .byte	0
02138 07E2                        00            .byte	0
02139 07E3                        00            .byte	0
02140 07E4                        00            .byte	0
02141 07E5                        00            .byte	0
02142                                           ! 520  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02143 07E6                        00            .byte	0
02144 07E7                        00            .byte	0
02145 07E8                        00            .byte	0
02146 07E9                        00            .byte	0
02147 07EA                        00            .byte	0
02148 07EB                        00            .byte	0
02149 07EC                        00            .byte	0
02150 07ED                        00            .byte	0
02151                                           ! 521 },
02152                                           ! 522 {
02153                                           ! 523  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02154 07EE                        00            .byte	0
02155 07EF                        00            .byte	0
02156 07F0                        00            .byte	0
02157 07F1                        00            .byte	0
02158 07F2                        00            .byte	0
02159 07F3                        00            .byte	0
02160 07F4                        00            .byte	0
02161 07F5                        00            .byte	0
02162                                           ! 524  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02163 07F6                        00            .byte	0
02164 07F7                        00            .byte	0
02165 07F8                        00            .byte	0
02166 07F9                        00            .byte	0
02167 07FA                        00            .byte	0
02168 07FB                        00            .byte	0
02169 07FC                        00            .byte	0
02170 07FD                        00            .byte	0
02171                                           ! 525  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02172 07FE                        00            .byte	0
02173 07FF                        00            .byte	0
02174 0800                        00            .byte	0
02175 0801                        00            .byte	0
02176 0802                        00            .byte	0
02177 0803                        00            .byte	0
02178 0804                        00            .byte	0
02179 0805                        00            .byte	0
02180                                           ! 526  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02181 0806                        00            .byte	0
02182 0807                        00            .byte	0
02183 0808                        00            .byte	0
02184 0809                        00            .byte	0
02185 080A                        00            .byte	0
02186 080B                        00            .byte	0
02187 080C                        00            .byte	0
02188 080D                        00            .byte	0
02189                                           ! 527  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02190 080E                        00            .byte	0
02191 080F                        00            .byte	0
02192 0810                        00            .byte	0
02193 0811                        00            .byte	0
02194 0812                        00            .byte	0
02195 0813                        00            .byte	0
02196 0814                        00            .byte	0
02197 0815                        00            .byte	0
02198                                           ! 528  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02199 0816                        00            .byte	0
02200 0817                        00            .byte	0
02201 0818                        00            .byte	0
02202 0819                        00            .byte	0
02203 081A                        00            .byte	0
02204 081B                        00            .byte	0
02205 081C                        00            .byte	0
02206 081D                        00            .byte	0
02207                                           ! 529  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02208 081E                        00            .byte	0
02209 081F                        00            .byte	0
02210 0820                        00            .byte	0
02211 0821                        00            .byte	0
02212 0822                        00            .byte	0
02213 0823                        00            .byte	0
02214 0824                        00            .byte	0
02215 0825                        00            .byte	0
02216                                           ! 530  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02217 0826                        00            .byte	0
02218 0827                        00            .byte	0
02219 0828                        00            .byte	0
02220 0829                        00            .byte	0
02221 082A                        00            .byte	0
02222 082B                        00            .byte	0
02223 082C                        00            .byte	0
02224 082D                        00            .byte	0
02225                                           ! 531 },
02226                                           ! 532 {
02227                                           ! 533  40, 24, 16, 0x00, 0x08,
02228 082E                        28            .byte	$28
02229 082F                        18            .byte	$18
02230 0830                        10            .byte	$10
02231 0831                        00            .byte	0
02232 0832                        08            .byte	8
02233                                           ! 534  0x08, 0x03, 0x00, 0x02,
02234 0833                        08            .byte	8
02235 0834                        03            .byte	3
02236 0835                        00            .byte	0
02237 0836                        02            .byte	2
02238                                           ! 535  0x67,
02239 0837                        67            .byte	$67
02240                                           ! 536  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02241 0838                        2D            .byte	$2D
02242 0839                        27            .byte	$27
02243 083A                        28            .byte	$28
02244 083B                        90            .byte	$90
02245 083C                        2B            .byte	$2B
02246 083D                        A0            .byte	$A0
02247 083E                        BF            .byte	$BF
02248 083F                        1F            .byte	$1F
02249                                           ! 537  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02250 0840                        00            .byte	0
02251 0841                        4F            .byte	$4F
02252 0842                        0D            .byte	$D
02253 0843                        0E            .byte	$E
02254 0844                        00            .byte	0
02255 0845                        00            .byte	0
02256 0846                        00            .byte	0
02257 0847                        00            .byte	0
02258                                           ! 538  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02259 0848                        9C            .byte	$9C
02260 0849                        8E            .byte	$8E
02261 084A                        8F            .byte	$8F
02262 084B                        14            .byte	$14
02263 084C                        1F            .byte	$1F
02264 084D                        96            .byte	$96
02265 084E                        B9            .byte	$B9
02266 084F                        A3            .byte	$A3
02267                                           ! 539  0xff,
02268 0850                        FF            .byte	$FF
02269                                           ! 540  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02270 0851                        00            .byte	0
02271 0852                        01            .byte	1
02272 0853                        02            .byte	2
02273 0854                        03            .byte	3
02274 0855                        04            .byte	4
02275 0856                        05            .byte	5
02276 0857                        14            .byte	$14
02277 0858                        07            .byte	7
02278                                           ! 541  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02279 0859                        38            .byte	$38
02280 085A                        39            .byte	$39
02281 085B                        3A            .byte	$3A
02282 085C                        3B            .byte	$3B
02283 085D                        3C            .byte	$3C
02284 085E                        3D            .byte	$3D
02285 085F                        3E            .byte	$3E
02286 0860                        3F            .byte	$3F
02287                                           ! 542  0x0c, 0x00, 0x0f, 0x08,
02288 0861                        0C            .byte	$C
02289 0862                        00            .byte	0
02290 0863                        0F            .byte	$F
02291 0864                        08            .byte	8
02292                                           ! 543  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02293 0865                        00            .byte	0
02294 0866                        00            .byte	0
02295 0867                        00            .byte	0
02296 0868                        00            .byte	0
02297 0869                        00            .byte	0
02298 086A                        10            .byte	$10
02299 086B                        0E            .byte	$E
02300 086C                        0F            .byte	$F
02301 086D                        FF            .byte	$FF
02302                                           ! 544 },
02303                                           ! 545 {
02304                                           ! 546  80, 24, 16, 0x00, 0x10,
02305 086E                        50            .byte	$50
02306 086F                        18            .byte	$18
02307 0870                        10            .byte	$10
02308 0871                        00            .byte	0
02309 0872                        10            .byte	$10
02310                                           ! 547  0x00, 0x03, 0x00, 0x02,
02311 0873                        00            .byte	0
02312 0874                        03            .byte	3
02313 0875                        00            .byte	0
02314 0876                        02            .byte	2
02315                                           ! 548  0x67,
02316 0877                        67            .byte	$67
02317                                           ! 549  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02318 0878                        5F            .byte	$5F
02319 0879                        4F            .byte	$4F
02320 087A                        50            .byte	$50
02321 087B                        82            .byte	$82
02322 087C                        55            .byte	$55
02323 087D                        81            .byte	$81
02324 087E                        BF            .byte	$BF
02325 087F                        1F            .byte	$1F
02326                                           ! 550  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02327 0880                        00            .byte	0
02328 0881                        4F            .byte	$4F
02329 0882                        0D            .byte	$D
02330 0883                        0E            .byte	$E
02331 0884                        00            .byte	0
02332 0885                        00            .byte	0
02333 0886                        00            .byte	0
02334 0887                        00            .byte	0
02335                                           ! 551  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02336 0888                        9C            .byte	$9C
02337 0889                        8E            .byte	$8E
02338 088A                        8F            .byte	$8F
02339 088B                        28            .byte	$28
02340 088C                        1F            .byte	$1F
02341 088D                        96            .byte	$96
02342 088E                        B9            .byte	$B9
02343 088F                        A3            .byte	$A3
02344                                           ! 552  0xff,
02345 0890                        FF            .byte	$FF
02346                                           ! 553  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02347 0891                        00            .byte	0
02348 0892                        01            .byte	1
02349 0893                        02            .byte	2
02350 0894                        03            .byte	3
02351 0895                        04            .byte	4
02352 0896                        05            .byte	5
02353 0897                        14            .byte	$14
02354 0898                        07            .byte	7
02355                                           ! 554  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02356 0899                        38            .byte	$38
02357 089A                        39            .byte	$39
02358 089B                        3A            .byte	$3A
02359 089C                        3B            .byte	$3B
02360 089D                        3C            .byte	$3C
02361 089E                        3D            .byte	$3D
02362 089F                        3E            .byte	$3E
02363 08A0                        3F            .byte	$3F
02364                                           ! 555  0x0c, 0x00, 0x0f, 0x08,
02365 08A1                        0C            .byte	$C
02366 08A2                        00            .byte	0
02367 08A3                        0F            .byte	$F
02368 08A4                        08            .byte	8
02369                                           ! 556  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02370 08A5                        00            .byte	0
02371 08A6                        00            .byte	0
02372 08A7                        00            .byte	0
02373 08A8                        00            .byte	0
02374 08A9                        00            .byte	0
02375 08AA                        10            .byte	$10
02376 08AB                        0E            .byte	$E
02377 08AC                        0F            .byte	$F
02378 08AD                        FF            .byte	$FF
02379                                           ! 557 },
02380                                           ! 558 {
02381                                           ! 559  80, 24, 16, 0x00, 0x10,
02382 08AE                        50            .byte	$50
02383 08AF                        18            .byte	$18
02384 08B0                        10            .byte	$10
02385 08B1                        00            .byte	0
02386 08B2                        10            .byte	$10
02387                                           ! 560  0x00, 0x03, 0x00, 0x02,
02388 08B3                        00            .byte	0
02389 08B4                        03            .byte	3
02390 08B5                        00            .byte	0
02391 08B6                        02            .byte	2
02392                                           ! 561  0x66,
02393 08B7                        66            .byte	$66
02394                                           ! 562  0x5f, 0x4f, 0x50, 0x82, 
02395 08B8                        5F            .byte	$5F
02396 08B9                        4F            .byte	$4F
02397 08BA                        50            .byte	$50
02398 08BB                        82            .byte	$82
02399                                           ! 562 0x55, 0x81, 0xbf, 0x1f,
02400 08BC                        55            .byte	$55
02401 08BD                        81            .byte	$81
02402 08BE                        BF            .byte	$BF
02403 08BF                        1F            .byte	$1F
02404                                           ! 563  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02405 08C0                        00            .byte	0
02406 08C1                        4F            .byte	$4F
02407 08C2                        0D            .byte	$D
02408 08C3                        0E            .byte	$E
02409 08C4                        00            .byte	0
02410 08C5                        00            .byte	0
02411 08C6                        00            .byte	0
02412 08C7                        00            .byte	0
02413                                           ! 564  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02414 08C8                        9C            .byte	$9C
02415 08C9                        8E            .byte	$8E
02416 08CA                        8F            .byte	$8F
02417 08CB                        28            .byte	$28
02418 08CC                        0F            .byte	$F
02419 08CD                        96            .byte	$96
02420 08CE                        B9            .byte	$B9
02421 08CF                        A3            .byte	$A3
02422                                           ! 565  0xff,
02423 08D0                        FF            .byte	$FF
02424                                           ! 566  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02425 08D1                        00            .byte	0
02426 08D2                        08            .byte	8
02427 08D3                        08            .byte	8
02428 08D4                        08            .byte	8
02429 08D5                        08            .byte	8
02430 08D6                        08            .byte	8
02431 08D7                        08            .byte	8
02432 08D8                        08            .byte	8
02433                                           ! 567  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02434 08D9                        10            .byte	$10
02435 08DA                        18            .byte	$18
02436 08DB                        18            .byte	$18
02437 08DC                        18            .byte	$18
02438 08DD                        18            .byte	$18
02439 08DE                        18            .byte	$18
02440 08DF                        18            .byte	$18
02441 08E0                        18            .byte	$18
02442                                           ! 568  0x0e, 0x00, 0x0f, 0x08,
02443 08E1                        0E            .byte	$E
02444 08E2                        00            .byte	0
02445 08E3                        0F            .byte	$F
02446 08E4                        08            .byte	8
02447                                           ! 569  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02448 08E5                        00            .byte	0
02449 08E6                        00            .byte	0
02450 08E7                        00            .byte	0
02451 08E8                        00            .byte	0
02452 08E9                        00            .byte	0
02453 08EA                        10            .byte	$10
02454 08EB                        0A            .byte	$A
02455 08EC                        0F            .byte	$F
02456 08ED                        FF            .byte	$FF
02457                                           ! 570 },
02458                                           ! 571 {
02459                                           ! 572  80, 29, 16, 0x00, 0x00,
02460 08EE                        50            .byte	$50
02461 08EF                        1D            .byte	$1D
02462 08F0                        10            .byte	$10
02463 08F1                        00            .byte	0
02464 08F2                        00            .byte	0
02465                                           ! 573  0x01, 0x0f, 0x00, 0x06,
02466 08F3                        01            .byte	1
02467 08F4                        0F            .byte	$F
02468 08F5                        00            .byte	0
02469 08F6                        06            .byte	6
02470                                           ! 574  0xe3,
02471 08F7                        E3            .byte	$E3
02472                                           ! 575  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02473 08F8                        5F            .byte	$5F
02474 08F9                        4F            .byte	$4F
02475 08FA                        50            .byte	$50
02476 08FB                        82            .byte	$82
02477 08FC                        54            .byte	$54
02478 08FD                        80            .byte	$80
02479 08FE                        0B            .byte	$B
02480 08FF                        3E            .byte	$3E
02481                                           ! 576  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02482 0900                        00            .byte	0
02483 0901                        40            .byte	$40
02484 0902                        00            .byte	0
02485 0903                        00            .byte	0
02486 0904                        00            .byte	0
02487 0905                        00            .byte	0
02488 0906                        00            .byte	0
02489 0907                        00            .byte	0
02490                                           ! 577  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02491 0908                        EA            .byte	$EA
02492 0909                        8C            .byte	$8C
02493 090A                        DF            .byte	$DF
02494 090B                        28            .byte	$28
02495 090C                        00            .byte	0
02496 090D                        E7            .byte	$E7
02497 090E                        04            .byte	4
02498 090F                        E3            .byte	$E3
02499                                           ! 578  0xff,
02500 0910                        FF            .byte	$FF
02501                                           ! 579  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02502 0911                        00            .byte	0
02503 0912                        3F            .byte	$3F
02504 0913                        00            .byte	0
02505 0914                        3F            .byte	$3F
02506 0915                        00            .byte	0
02507 0916                        3F            .byte	$3F
02508 0917                        00            .byte	0
02509 0918                        3F            .byte	$3F
02510                                           ! 580  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02511 0919                        00            .byte	0
02512 091A                        3F            .byte	$3F
02513 091B                        00            .byte	0
02514 091C                        3F            .byte	$3F
02515 091D                        00            .byte	0
02516 091E                        3F            .byte	$3F
02517 091F                        00            .byte	0
02518 0920                        3F            .byte	$3F
02519                                           ! 581  0x01, 0x00, 0x0f, 0x00,
02520 0921                        01            .byte	1
02521 0922                        00            .byte	0
02522 0923                        0F            .byte	$F
02523 0924                        00            .byte	0
02524                                           ! 582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02525 0925                        00            .byte	0
02526 0926                        00            .byte	0
02527 0927                        00            .byte	0
02528 0928                        00            .byte	0
02529 0929                        00            .byte	0
02530 092A                        00            .byte	0
02531 092B                        05            .byte	5
02532 092C                        0F            .byte	$F
02533 092D                        FF            .byte	$FF
02534                                           ! 583 },
02535                                           ! 584 {
02536                                           ! 585  80, 29, 16, 0x00, 0x00,
02537 092E                        50            .byte	$50
02538 092F                        1D            .byte	$1D
02539 0930                        10            .byte	$10
02540 0931                        00            .byte	0
02541 0932                        00            .byte	0
02542                                           ! 586  0x01, 0x0f, 0x00, 0x06,
02543 0933                        01            .byte	1
02544 0934                        0F            .byte	$F
02545 0935                        00            .byte	0
02546 0936                        06            .byte	6
02547                                           ! 587  0xe3,
02548 0937                        E3            .byte	$E3
02549                                           ! 588  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02550 0938                        5F            .byte	$5F
02551 0939                        4F            .byte	$4F
02552 093A                        50            .byte	$50
02553 093B                        82            .byte	$82
02554 093C                        54            .byte	$54
02555 093D                        80            .byte	$80
02556 093E                        0B            .byte	$B
02557 093F                        3E            .byte	$3E
02558                                           ! 589  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02559 0940                        00            .byte	0
02560 0941                        40            .byte	$40
02561 0942                        00            .byte	0
02562 0943                        00            .byte	0
02563 0944                        00            .byte	0
02564 0945                        00            .byte	0
02565 0946                        00            .byte	0
02566 0947                        00            .byte	0
02567                                           ! 590  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02568 0948                        EA            .byte	$EA
02569 0949                        8C            .byte	$8C
02570 094A                        DF            .byte	$DF
02571 094B                        28            .byte	$28
02572 094C                        00            .byte	0
02573 094D                        E7            .byte	$E7
02574 094E                        04            .byte	4
02575 094F                        E3            .byte	$E3
02576                                           ! 591  0xff,
02577 0950                        FF            .byte	$FF
02578                                           ! 592  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02579 0951                        00            .byte	0
02580 0952                        01            .byte	1
02581 0953                        02            .byte	2
02582 0954                        03            .byte	3
02583 0955                        04            .byte	4
02584 0956                        05            .byte	5
02585 0957                        14            .byte	$14
02586 0958                        07            .byte	7
02587                                           ! 593  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02588 0959                        38            .byte	$38
02589 095A                        39            .byte	$39
02590 095B                        3A            .byte	$3A
02591 095C                        3B            .byte	$3B
02592 095D                        3C            .byte	$3C
02593 095E                        3D            .byte	$3D
02594 095F                        3E            .byte	$3E
02595 0960                        3F            .byte	$3F
02596                                           ! 594  0x01, 0x00, 0x0f, 0x00,
02597 0961                        01            .byte	1
02598 0962                        00            .byte	0
02599 0963                        0F            .byte	$F
02600 0964                        00            .byte	0
02601                                           ! 595  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02602 0965                        00            .byte	0
02603 0966                        00            .byte	0
02604 0967                        00            .byte	0
02605 0968                        00            .byte	0
02606 0969                        00            .byte	0
02607 096A                        00            .byte	0
02608 096B                        05            .byte	5
02609 096C                        0F            .byte	$F
02610 096D                        FF            .byte	$FF
02611                                           ! 596 },
02612                                           ! 597 {
02613                                           ! 598  40, 24, 8, 0x00, 0x00,
02614 096E                        28            .byte	$28
02615 096F                        18            .byte	$18
02616 0970                        08            .byte	8
02617 0971                        00            .byte	0
02618 0972                        00            .byte	0
02619                                           ! 599  0x01, 0x0f, 0x00, 0x0e,
02620 0973                        01            .byte	1
02621 0974                        0F            .byte	$F
02622 0975                        00            .byte	0
02623 0976                        0E            .byte	$E
02624                                           ! 600  0x63,
02625 0977                        63            .byte	$63
02626                                           ! 601  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02627 0978                        5F            .byte	$5F
02628 0979                        4F            .byte	$4F
02629 097A                        50            .byte	$50
02630 097B                        82            .byte	$82
02631 097C                        54            .byte	$54
02632 097D                        80            .byte	$80
02633 097E                        BF            .byte	$BF
02634 097F                        1F            .byte	$1F
02635                                           ! 602  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02636 0980                        00            .byte	0
02637 0981                        41            .byte	$41
02638 0982                        00            .byte	0
02639 0983                        00            .byte	0
02640 0984                        00            .byte	0
02641 0985                        00            .byte	0
02642 0986                        00            .byte	0
02643 0987                        00            .byte	0
02644                                           ! 603  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02645 0988                        9C            .byte	$9C
02646 0989                        8E            .byte	$8E
02647 098A                        8F            .byte	$8F
02648 098B                        28            .byte	$28
02649 098C                        40            .byte	$40
02650 098D                        96            .byte	$96
02651 098E                        B9            .byte	$B9
02652 098F                        A3            .byte	$A3
02653                                           ! 604  0xff,
02654 0990                        FF            .byte	$FF
02655                                           ! 605  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02656 0991                        00            .byte	0
02657 0992                        01            .byte	1
02658 0993                        02            .byte	2
02659 0994                        03            .byte	3
02660 0995                        04            .byte	4
02661 0996                        05            .byte	5
02662 0997                        06            .byte	6
02663 0998                        07            .byte	7
02664                                           ! 606  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02665 0999                        08            .byte	8
02666 099A                        09            .byte	9
02667 099B                        0A            .byte	$A
02668 099C                        0B            .byte	$B
02669 099D                        0C            .byte	$C
02670 099E                        0D            .byte	$D
02671 099F                        0E            .byte	$E
02672 09A0                        0F            .byte	$F
02673                                           ! 607  0x41, 0x00, 0x0f, 0x00,
02674 09A1                        41            .byte	$41
02675 09A2                        00            .byte	0
02676 09A3                        0F            .byte	$F
02677 09A4                        00            .byte	0
02678                                           ! 608  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02679 09A5                        00            .byte	0
02680 09A6                        00            .byte	0
02681 09A7                        00            .byte	0
02682 09A8                        00            .byte	0
02683 09A9                        00            .byte	0
02684 09AA                        40            .byte	$40
02685 09AB                        05            .byte	5
02686 09AC                        0F            .byte	$F
02687 09AD                        FF            .byte	$FF
02688                                           ! 609 },
02689                                           ! 610 {
02690                                           ! 611  100, 36, 16, 0x00, 0x00,
02691 09AE                        64            .byte	$64
02692 09AF                        24            .byte	$24
02693 09B0                        10            .byte	$10
02694 09B1                        00            .byte	0
02695 09B2                        00            .byte	0
02696                                           ! 612  0x01, 0x0f, 0x00, 0x06,
02697 09B3                        01            .byte	1
02698 09B4                        0F            .byte	$F
02699 09B5                        00            .byte	0
02700 09B6                        06            .byte	6
02701                                           ! 613  0xe3,
02702 09B7                        E3            .byte	$E3
02703                                           ! 614  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02704 09B8                        7F            .byte	$7F
02705 09B9                        63            .byte	$63
02706 09BA                        63            .byte	$63
02707 09BB                        83            .byte	$83
02708 09BC                        6B            .byte	$6B
02709 09BD                        1B            .byte	$1B
02710 09BE                        72            .byte	$72
02711 09BF                        F0            .byte	$F0
02712                                           ! 615  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02713 09C0                        00            .byte	0
02714 09C1                        60            .byte	$60
02715 09C2                        00            .byte	0
02716 09C3                        00            .byte	0
02717 09C4                        00            .byte	0
02718 09C5                        00            .byte	0
02719 09C6                        00            .byte	0
02720 09C7                        00            .byte	0
02721                                           ! 616  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02722 09C8                        59            .byte	$59
02723 09C9                        8D            .byte	$8D
02724 09CA                        57            .byte	$57
02725 09CB                        32            .byte	$32
02726 09CC                        00            .byte	0
02727 09CD                        57            .byte	$57
02728 09CE                        73            .byte	$73
02729 09CF                        E3            .byte	$E3
02730                                           ! 617  0xff,
02731 09D0                        FF            .byte	$FF
02732                                           ! 618  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02733 09D1                        00            .byte	0
02734 09D2                        01            .byte	1
02735 09D3                        02            .byte	2
02736 09D4                        03            .byte	3
02737 09D5                        04            .byte	4
02738 09D6                        05            .byte	5
02739 09D7                        14            .byte	$14
02740 09D8                        07            .byte	7
02741                                           ! 619  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02742 09D9                        38            .byte	$38
02743 09DA                        39            .byte	$39
02744 09DB                        3A            .byte	$3A
02745 09DC                        3B            .byte	$3B
02746 09DD                        3C            .byte	$3C
02747 09DE                        3D            .byte	$3D
02748 09DF                        3E            .byte	$3E
02749 09E0                        3F            .byte	$3F
02750                                           ! 620  0x01, 0x00, 0x0f, 0x00,
02751 09E1                        01            .byte	1
02752 09E2                        00            .byte	0
02753 09E3                        0F            .byte	$F
02754 09E4                        00            .byte	0
02755                                           ! 621  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02756 09E5                        00            .byte	0
02757 09E6                        00            .byte	0
02758 09E7                        00            .byte	0
02759 09E8                        00            .byte	0
02760 09E9                        00            .byte	0
02761 09EA                        00            .byte	0
02762 09EB                        05            .byte	5
02763 09EC                        0F            .byte	$F
02764 09ED                        FF            .byte	$FF
02765                                           ! 622 },
02766                                           ! 623 };
02767                                           !BCC_EOS
02768                                           ! 624 static Bit8u palette0[63+1][3]=
02769                                           ! 625 {
02770                       000009EE            _palette0:
02771                                           ! 626   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0
02772 09EE                        00            .byte	0
02773 09EF                        00            .byte	0
02774 09F0                        00            .byte	0
02775 09F1                        00            .byte	0
02776 09F2                        00            .byte	0
02777 09F3                        00            .byte	0
02778 09F4                        00            .byte	0
02779 09F5                        00            .byte	0
02780 09F6                        00            .byte	0
02781 09F7                        00            .byte	0
02782 09F8                        00            .byte	0
02783 09F9                        00            .byte	0
02784 09FA                        00            .byte	0
02785 09FB                        00            .byte	0
02786 09FC                        00            .byte	0
02787 09FD                        00            .byte	0
02788 09FE                        00            .byte	0
02789 09FF                        00            .byte	0
02790 0A00                        00            .byte	0
02791 0A01                        00            .byte	0
02792 0A02                        00            .byte	0
02793 0A03                        00            .byte	0
02794 0A04                        00            .byte	0
02795                                           ! 626 x00,
02796 0A05                        00            .byte	0
02797                                           ! 627   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02798 0A06                        2A            .byte	$2A
02799 0A07                        2A            .byte	$2A
02800 0A08                        2A            .byte	$2A
02801 0A09                        2A            .byte	$2A
02802 0A0A                        2A            .byte	$2A
02803 0A0B                        2A            .byte	$2A
02804 0A0C                        2A            .byte	$2A
02805 0A0D                        2A            .byte	$2A
02806 0A0E                        2A            .byte	$2A
02807 0A0F                        2A            .byte	$2A
02808 0A10                        2A            .byte	$2A
02809 0A11                        2A            .byte	$2A
02810 0A12                        2A            .byte	$2A
02811 0A13                        2A            .byte	$2A
02812 0A14                        2A            .byte	$2A
02813 0A15                        2A            .byte	$2A
02814 0A16                        2A            .byte	$2A
02815 0A17                        2A            .byte	$2A
02816 0A18                        2A            .byte	$2A
02817 0A19                        2A            .byte	$2A
02818 0A1A                        2A            .byte	$2A
02819 0A1B                        2A            .byte	$2A
02820 0A1C                        2A            .byte	$2A
02821 0A1D                        2A            .byte	$2A
02822                                           ! 628   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02823 0A1E                        2A            .byte	$2A
02824 0A1F                        2A            .byte	$2A
02825 0A20                        2A            .byte	$2A
02826 0A21                        2A            .byte	$2A
02827 0A22                        2A            .byte	$2A
02828 0A23                        2A            .byte	$2A
02829 0A24                        2A            .byte	$2A
02830 0A25                        2A            .byte	$2A
02831 0A26                        2A            .byte	$2A
02832 0A27                        2A            .byte	$2A
02833 0A28                        2A            .byte	$2A
02834 0A29                        2A            .byte	$2A
02835 0A2A                        2A            .byte	$2A
02836 0A2B                        2A            .byte	$2A
02837 0A2C                        2A            .byte	$2A
02838 0A2D                        2A            .byte	$2A
02839 0A2E                        2A            .byte	$2A
02840 0A2F                        2A            .byte	$2A
02841 0A30                        2A            .byte	$2A
02842 0A31                        2A            .byte	$2A
02843 0A32                        2A            .byte	$2A
02844 0A33                        2A            .byte	$2A
02845 0A34                        2A            .byte	$2A
02846 0A35                        2A            .byte	$2A
02847                                           ! 629   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
02848 0A36                        3F            .byte	$3F
02849 0A37                        3F            .byte	$3F
02850 0A38                        3F            .byte	$3F
02851 0A39                        3F            .byte	$3F
02852 0A3A                        3F            .byte	$3F
02853 0A3B                        3F            .byte	$3F
02854 0A3C                        3F            .byte	$3F
02855 0A3D                        3F            .byte	$3F
02856 0A3E                        3F            .byte	$3F
02857 0A3F                        3F            .byte	$3F
02858 0A40                        3F            .byte	$3F
02859 0A41                        3F            .byte	$3F
02860 0A42                        3F            .byte	$3F
02861 0A43                        3F            .byte	$3F
02862 0A44                        3F            .byte	$3F
02863 0A45                        3F            .byte	$3F
02864 0A46                        3F            .byte	$3F
02865 0A47                        3F            .byte	$3F
02866 0A48                        3F            .byte	$3F
02867 0A49                        3F            .byte	$3F
02868 0A4A                        3F            .byte	$3F
02869 0A4B                        3F            .byte	$3F
02870 0A4C                        3F            .byte	$3F
02871 0A4D                        3F            .byte	$3F
02872                                           ! 630   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02873 0A4E                        00            .byte	0
02874 0A4F                        00            .byte	0
02875 0A50                        00            .byte	0
02876 0A51                        00            .byte	0
02877 0A52                        00            .byte	0
02878 0A53                        00            .byte	0
02879 0A54                        00            .byte	0
02880 0A55                        00            .byte	0
02881 0A56                        00            .byte	0
02882 0A57                        00            .byte	0
02883 0A58                        00            .byte	0
02884 0A59                        00            .byte	0
02885 0A5A                        00            .byte	0
02886 0A5B                        00            .byte	0
02887 0A5C                        00            .byte	0
02888 0A5D                        00            .byte	0
02889 0A5E                        00            .byte	0
02890 0A5F                        00            .byte	0
02891 0A60                        00            .byte	0
02892 0A61                        00            .byte	0
02893 0A62                        00            .byte	0
02894 0A63                        00            .byte	0
02895 0A64                        00            .byte	0
02896 0A65                        00            .byte	0
02897                                           ! 631   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02898 0A66                        2A            .byte	$2A
02899 0A67                        2A            .byte	$2A
02900 0A68                        2A            .byte	$2A
02901 0A69                        2A            .byte	$2A
02902 0A6A                        2A            .byte	$2A
02903 0A6B                        2A            .byte	$2A
02904 0A6C                        2A            .byte	$2A
02905 0A6D                        2A            .byte	$2A
02906 0A6E                        2A            .byte	$2A
02907 0A6F                        2A            .byte	$2A
02908 0A70                        2A            .byte	$2A
02909 0A71                        2A            .byte	$2A
02910 0A72                        2A            .byte	$2A
02911 0A73                        2A            .byte	$2A
02912 0A74                        2A            .byte	$2A
02913 0A75                        2A            .byte	$2A
02914 0A76                        2A            .byte	$2A
02915 0A77                        2A            .byte	$2A
02916 0A78                        2A            .byte	$2A
02917 0A79                        2A            .byte	$2A
02918 0A7A                        2A            .byte	$2A
02919 0A7B                        2A            .byte	$2A
02920 0A7C                        2A            .byte	$2A
02921 0A7D                        2A            .byte	$2A
02922                                           ! 632   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02923 0A7E                        2A            .byte	$2A
02924 0A7F                        2A            .byte	$2A
02925 0A80                        2A            .byte	$2A
02926 0A81                        2A            .byte	$2A
02927 0A82                        2A            .byte	$2A
02928 0A83                        2A            .byte	$2A
02929 0A84                        2A            .byte	$2A
02930 0A85                        2A            .byte	$2A
02931 0A86                        2A            .byte	$2A
02932 0A87                        2A            .byte	$2A
02933 0A88                        2A            .byte	$2A
02934 0A89                        2A            .byte	$2A
02935 0A8A                        2A            .byte	$2A
02936 0A8B                        2A            .byte	$2A
02937 0A8C                        2A            .byte	$2A
02938 0A8D                        2A            .byte	$2A
02939 0A8E                        2A            .byte	$2A
02940 0A8F                        2A            .byte	$2A
02941 0A90                        2A            .byte	$2A
02942 0A91                        2A            .byte	$2A
02943 0A92                        2A            .byte	$2A
02944 0A93                        2A            .byte	$2A
02945 0A94                        2A            .byte	$2A
02946 0A95                        2A            .byte	$2A
02947                                           ! 633   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
02948 0A96                        3F            .byte	$3F
02949 0A97                        3F            .byte	$3F
02950 0A98                        3F            .byte	$3F
02951 0A99                        3F            .byte	$3F
02952 0A9A                        3F            .byte	$3F
02953 0A9B                        3F            .byte	$3F
02954 0A9C                        3F            .byte	$3F
02955 0A9D                        3F            .byte	$3F
02956 0A9E                        3F            .byte	$3F
02957 0A9F                        3F            .byte	$3F
02958 0AA0                        3F            .byte	$3F
02959 0AA1                        3F            .byte	$3F
02960 0AA2                        3F            .byte	$3F
02961 0AA3                        3F            .byte	$3F
02962 0AA4                        3F            .byte	$3F
02963 0AA5                        3F            .byte	$3F
02964 0AA6                        3F            .byte	$3F
02965 0AA7                        3F            .byte	$3F
02966 0AA8                        3F            .byte	$3F
02967 0AA9                        3F            .byte	$3F
02968 0AAA                        3F            .byte	$3F
02969 0AAB                        3F            .byte	$3F
02970 0AAC                        3F            .byte	$3F
02971                                           ! 634 };
02972 0AAD                        3F            .byte	$3F
02973                                           !BCC_EOS
02974                                           ! 635 static Bit8u palette1[63+1][3]=
02975                                           ! 636 {
02976                       00000AAE            _palette1:
02977                                           ! 637   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
02978 0AAE                        00            .byte	0
02979 0AAF                        00            .byte	0
02980 0AB0                        00            .byte	0
02981 0AB1                        00            .byte	0
02982 0AB2                        00            .byte	0
02983 0AB3                        2A            .byte	$2A
02984 0AB4                        00            .byte	0
02985 0AB5                        2A            .byte	$2A
02986 0AB6                        00            .byte	0
02987 0AB7                        00            .byte	0
02988 0AB8                        2A            .byte	$2A
02989 0AB9                        2A            .byte	$2A
02990 0ABA                        2A            .byte	$2A
02991 0ABB                        00            .byte	0
02992 0ABC                        00            .byte	0
02993 0ABD                        2A            .byte	$2A
02994 0ABE                        00            .byte	0
02995 0ABF                        2A            .byte	$2A
02996 0AC0                        2A            .byte	$2A
02997 0AC1                        15            .byte	$15
02998 0AC2                        00            .byte	0
02999 0AC3                        2A            .byte	$2A
03000 0AC4                        2A            .byte	$2A
03001 0AC5                        2A            .byte	$2A
03002                                           ! 638   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03003 0AC6                        00            .byte	0
03004 0AC7                        00            .byte	0
03005 0AC8                        00            .byte	0
03006 0AC9                        00            .byte	0
03007 0ACA                        00            .byte	0
03008 0ACB                        2A            .byte	$2A
03009 0ACC                        00            .byte	0
03010 0ACD                        2A            .byte	$2A
03011 0ACE                        00            .byte	0
03012 0ACF                        00            .byte	0
03013 0AD0                        2A            .byte	$2A
03014 0AD1                        2A            .byte	$2A
03015 0AD2                        2A            .byte	$2A
03016 0AD3                        00            .byte	0
03017 0AD4                        00            .byte	0
03018 0AD5                        2A            .byte	$2A
03019 0AD6                        00            .byte	0
03020 0AD7                        2A            .byte	$2A
03021 0AD8                        2A            .byte	$2A
03022 0AD9                        15            .byte	$15
03023 0ADA                        00            .byte	0
03024 0ADB                        2A            .byte	$2A
03025 0ADC                        2A            .byte	$2A
03026 0ADD                        2A            .byte	$2A
03027                                           ! 639   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03028 0ADE                        15            .byte	$15
03029 0ADF                        15            .byte	$15
03030 0AE0                        15            .byte	$15
03031 0AE1                        15            .byte	$15
03032 0AE2                        15            .byte	$15
03033 0AE3                        3F            .byte	$3F
03034 0AE4                        15            .byte	$15
03035 0AE5                        3F            .byte	$3F
03036 0AE6                        15            .byte	$15
03037 0AE7                        15            .byte	$15
03038 0AE8                        3F            .byte	$3F
03039 0AE9                        3F            .byte	$3F
03040 0AEA                        3F            .byte	$3F
03041 0AEB                        15            .byte	$15
03042 0AEC                        15            .byte	$15
03043 0AED                        3F            .byte	$3F
03044 0AEE                        15            .byte	$15
03045 0AEF                        3F            .byte	$3F
03046 0AF0                        3F            .byte	$3F
03047 0AF1                        3F            .byte	$3F
03048 0AF2                        15            .byte	$15
03049 0AF3                        3F            .byte	$3F
03050 0AF4                        3F            .byte	$3F
03051 0AF5                        3F            .byte	$3F
03052                                           ! 640   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03053 0AF6                        15            .byte	$15
03054 0AF7                        15            .byte	$15
03055 0AF8                        15            .byte	$15
03056 0AF9                        15            .byte	$15
03057 0AFA                        15            .byte	$15
03058 0AFB                        3F            .byte	$3F
03059 0AFC                        15            .byte	$15
03060 0AFD                        3F            .byte	$3F
03061 0AFE                        15            .byte	$15
03062 0AFF                        15            .byte	$15
03063 0B00                        3F            .byte	$3F
03064 0B01                        3F            .byte	$3F
03065 0B02                        3F            .byte	$3F
03066 0B03                        15            .byte	$15
03067 0B04                        15            .byte	$15
03068 0B05                        3F            .byte	$3F
03069 0B06                        15            .byte	$15
03070 0B07                        3F            .byte	$3F
03071 0B08                        3F            .byte	$3F
03072 0B09                        3F            .byte	$3F
03073 0B0A                        15            .byte	$15
03074 0B0B                        3F            .byte	$3F
03075 0B0C                        3F            .byte	$3F
03076 0B0D                        3F            .byte	$3F
03077                                           ! 641   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03078 0B0E                        00            .byte	0
03079 0B0F                        00            .byte	0
03080 0B10                        00            .byte	0
03081 0B11                        00            .byte	0
03082 0B12                        00            .byte	0
03083 0B13                        2A            .byte	$2A
03084 0B14                        00            .byte	0
03085 0B15                        2A            .byte	$2A
03086 0B16                        00            .byte	0
03087 0B17                        00            .byte	0
03088 0B18                        2A            .byte	$2A
03089 0B19                        2A            .byte	$2A
03090 0B1A                        2A            .byte	$2A
03091 0B1B                        00            .byte	0
03092 0B1C                        00            .byte	0
03093 0B1D                        2A            .byte	$2A
03094 0B1E                        00            .byte	0
03095 0B1F                        2A            .byte	$2A
03096 0B20                        2A            .byte	$2A
03097 0B21                        15            .byte	$15
03098 0B22                        00            .byte	0
03099 0B23                        2A            .byte	$2A
03100 0B24                        2A            .byte	$2A
03101 0B25                        2A            .byte	$2A
03102                                           ! 642   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03103 0B26                        00            .byte	0
03104 0B27                        00            .byte	0
03105 0B28                        00            .byte	0
03106 0B29                        00            .byte	0
03107 0B2A                        00            .byte	0
03108 0B2B                        2A            .byte	$2A
03109 0B2C                        00            .byte	0
03110 0B2D                        2A            .byte	$2A
03111 0B2E                        00            .byte	0
03112 0B2F                        00            .byte	0
03113 0B30                        2A            .byte	$2A
03114 0B31                        2A            .byte	$2A
03115 0B32                        2A            .byte	$2A
03116 0B33                        00            .byte	0
03117 0B34                        00            .byte	0
03118 0B35                        2A            .byte	$2A
03119 0B36                        00            .byte	0
03120 0B37                        2A            .byte	$2A
03121 0B38                        2A            .byte	$2A
03122 0B39                        15            .byte	$15
03123 0B3A                        00            .byte	0
03124 0B3B                        2A            .byte	$2A
03125 0B3C                        2A            .byte	$2A
03126 0B3D                        2A            .byte	$2A
03127                                           ! 643   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03128 0B3E                        15            .byte	$15
03129 0B3F                        15            .byte	$15
03130 0B40                        15            .byte	$15
03131 0B41                        15            .byte	$15
03132 0B42                        15            .byte	$15
03133 0B43                        3F            .byte	$3F
03134 0B44                        15            .byte	$15
03135 0B45                        3F            .byte	$3F
03136 0B46                        15            .byte	$15
03137 0B47                        15            .byte	$15
03138 0B48                        3F            .byte	$3F
03139 0B49                        3F            .byte	$3F
03140 0B4A                        3F            .byte	$3F
03141 0B4B                        15            .byte	$15
03142 0B4C                        15            .byte	$15
03143 0B4D                        3F            .byte	$3F
03144 0B4E                        15            .byte	$15
03145 0B4F                        3F            .byte	$3F
03146 0B50                        3F            .byte	$3F
03147 0B51                        3F            .byte	$3F
03148 0B52                        15            .byte	$15
03149 0B53                        3F            .byte	$3F
03150 0B54                        3F            .byte	$3F
03151 0B55                        3F            .byte	$3F
03152                                           ! 644   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03153 0B56                        15            .byte	$15
03154 0B57                        15            .byte	$15
03155 0B58                        15            .byte	$15
03156 0B59                        15            .byte	$15
03157 0B5A                        15            .byte	$15
03158 0B5B                        3F            .byte	$3F
03159 0B5C                        15            .byte	$15
03160 0B5D                        3F            .byte	$3F
03161 0B5E                        15            .byte	$15
03162 0B5F                        15            .byte	$15
03163 0B60                        3F            .byte	$3F
03164 0B61                        3F            .byte	$3F
03165 0B62                        3F            .byte	$3F
03166 0B63                        15            .byte	$15
03167 0B64                        15            .byte	$15
03168 0B65                        3F            .byte	$3F
03169 0B66                        15            .byte	$15
03170 0B67                        3F            .byte	$3F
03171 0B68                        3F            .byte	$3F
03172 0B69                        3F            .byte	$3F
03173 0B6A                        15            .byte	$15
03174 0B6B                        3F            .byte	$3F
03175 0B6C                        3F            .byte	$3F
03176                                           ! 645 };
03177 0B6D                        3F            .byte	$3F
03178                                           !BCC_EOS
03179                                           ! 646 static Bit8u palette2[63+1][3]=
03180                                           ! 647 {
03181                       00000B6E            _palette2:
03182                                           ! 648   0x00,0x00,0x00, 0x0
03183 0B6E                        00            .byte	0
03184 0B6F                        00            .byte	0
03185 0B70                        00            .byte	0
03186                                           ! 648 0,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03187 0B71                        00            .byte	0
03188 0B72                        00            .byte	0
03189 0B73                        2A            .byte	$2A
03190 0B74                        00            .byte	0
03191 0B75                        2A            .byte	$2A
03192 0B76                        00            .byte	0
03193 0B77                        00            .byte	0
03194 0B78                        2A            .byte	$2A
03195 0B79                        2A            .byte	$2A
03196 0B7A                        2A            .byte	$2A
03197 0B7B                        00            .byte	0
03198 0B7C                        00            .byte	0
03199 0B7D                        2A            .byte	$2A
03200 0B7E                        00            .byte	0
03201 0B7F                        2A            .byte	$2A
03202 0B80                        2A            .byte	$2A
03203 0B81                        2A            .byte	$2A
03204 0B82                        00            .byte	0
03205 0B83                        2A            .byte	$2A
03206 0B84                        2A            .byte	$2A
03207 0B85                        2A            .byte	$2A
03208                                           ! 649   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03209 0B86                        00            .byte	0
03210 0B87                        00            .byte	0
03211 0B88                        15            .byte	$15
03212 0B89                        00            .byte	0
03213 0B8A                        00            .byte	0
03214 0B8B                        3F            .byte	$3F
03215 0B8C                        00            .byte	0
03216 0B8D                        2A            .byte	$2A
03217 0B8E                        15            .byte	$15
03218 0B8F                        00            .byte	0
03219 0B90                        2A            .byte	$2A
03220 0B91                        3F            .byte	$3F
03221 0B92                        2A            .byte	$2A
03222 0B93                        00            .byte	0
03223 0B94                        15            .byte	$15
03224 0B95                        2A            .byte	$2A
03225 0B96                        00            .byte	0
03226 0B97                        3F            .byte	$3F
03227 0B98                        2A            .byte	$2A
03228 0B99                        2A            .byte	$2A
03229 0B9A                        15            .byte	$15
03230 0B9B                        2A            .byte	$2A
03231 0B9C                        2A            .byte	$2A
03232 0B9D                        3F            .byte	$3F
03233                                           ! 650   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03234 0B9E                        00            .byte	0
03235 0B9F                        15            .byte	$15
03236 0BA0                        00            .byte	0
03237 0BA1                        00            .byte	0
03238 0BA2                        15            .byte	$15
03239 0BA3                        2A            .byte	$2A
03240 0BA4                        00            .byte	0
03241 0BA5                        3F            .byte	$3F
03242 0BA6                        00            .byte	0
03243 0BA7                        00            .byte	0
03244 0BA8                        3F            .byte	$3F
03245 0BA9                        2A            .byte	$2A
03246 0BAA                        2A            .byte	$2A
03247 0BAB                        15            .byte	$15
03248 0BAC                        00            .byte	0
03249 0BAD                        2A            .byte	$2A
03250 0BAE                        15            .byte	$15
03251 0BAF                        2A            .byte	$2A
03252 0BB0                        2A            .byte	$2A
03253 0BB1                        3F            .byte	$3F
03254 0BB2                        00            .byte	0
03255 0BB3                        2A            .byte	$2A
03256 0BB4                        3F            .byte	$3F
03257 0BB5                        2A            .byte	$2A
03258                                           ! 651   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03259 0BB6                        00            .byte	0
03260 0BB7                        15            .byte	$15
03261 0BB8                        15            .byte	$15
03262 0BB9                        00            .byte	0
03263 0BBA                        15            .byte	$15
03264 0BBB                        3F            .byte	$3F
03265 0BBC                        00            .byte	0
03266 0BBD                        3F            .byte	$3F
03267 0BBE                        15            .byte	$15
03268 0BBF                        00            .byte	0
03269 0BC0                        3F            .byte	$3F
03270 0BC1                        3F            .byte	$3F
03271 0BC2                        2A            .byte	$2A
03272 0BC3                        15            .byte	$15
03273 0BC4                        15            .byte	$15
03274 0BC5                        2A            .byte	$2A
03275 0BC6                        15            .byte	$15
03276 0BC7                        3F            .byte	$3F
03277 0BC8                        2A            .byte	$2A
03278 0BC9                        3F            .byte	$3F
03279 0BCA                        15            .byte	$15
03280 0BCB                        2A            .byte	$2A
03281 0BCC                        3F            .byte	$3F
03282 0BCD                        3F            .byte	$3F
03283                                           ! 652   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03284 0BCE                        15            .byte	$15
03285 0BCF                        00            .byte	0
03286 0BD0                        00            .byte	0
03287 0BD1                        15            .byte	$15
03288 0BD2                        00            .byte	0
03289 0BD3                        2A            .byte	$2A
03290 0BD4                        15            .byte	$15
03291 0BD5                        2A            .byte	$2A
03292 0BD6                        00            .byte	0
03293 0BD7                        15            .byte	$15
03294 0BD8                        2A            .byte	$2A
03295 0BD9                        2A            .byte	$2A
03296 0BDA                        3F            .byte	$3F
03297 0BDB                        00            .byte	0
03298 0BDC                        00            .byte	0
03299 0BDD                        3F            .byte	$3F
03300 0BDE                        00            .byte	0
03301 0BDF                        2A            .byte	$2A
03302 0BE0                        3F            .byte	$3F
03303 0BE1                        2A            .byte	$2A
03304 0BE2                        00            .byte	0
03305 0BE3                        3F            .byte	$3F
03306 0BE4                        2A            .byte	$2A
03307 0BE5                        2A            .byte	$2A
03308                                           ! 653   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03309 0BE6                        15            .byte	$15
03310 0BE7                        00            .byte	0
03311 0BE8                        15            .byte	$15
03312 0BE9                        15            .byte	$15
03313 0BEA                        00            .byte	0
03314 0BEB                        3F            .byte	$3F
03315 0BEC                        15            .byte	$15
03316 0BED                        2A            .byte	$2A
03317 0BEE                        15            .byte	$15
03318 0BEF                        15            .byte	$15
03319 0BF0                        2A            .byte	$2A
03320 0BF1                        3F            .byte	$3F
03321 0BF2                        3F            .byte	$3F
03322 0BF3                        00            .byte	0
03323 0BF4                        15            .byte	$15
03324 0BF5                        3F            .byte	$3F
03325 0BF6                        00            .byte	0
03326 0BF7                        3F            .byte	$3F
03327 0BF8                        3F            .byte	$3F
03328 0BF9                        2A            .byte	$2A
03329 0BFA                        15            .byte	$15
03330 0BFB                        3F            .byte	$3F
03331 0BFC                        2A            .byte	$2A
03332 0BFD                        3F            .byte	$3F
03333                                           ! 654   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03334 0BFE                        15            .byte	$15
03335 0BFF                        15            .byte	$15
03336 0C00                        00            .byte	0
03337 0C01                        15            .byte	$15
03338 0C02                        15            .byte	$15
03339 0C03                        2A            .byte	$2A
03340 0C04                        15            .byte	$15
03341 0C05                        3F            .byte	$3F
03342 0C06                        00            .byte	0
03343 0C07                        15            .byte	$15
03344 0C08                        3F            .byte	$3F
03345 0C09                        2A            .byte	$2A
03346 0C0A                        3F            .byte	$3F
03347 0C0B                        15            .byte	$15
03348 0C0C                        00            .byte	0
03349 0C0D                        3F            .byte	$3F
03350 0C0E                        15            .byte	$15
03351 0C0F                        2A            .byte	$2A
03352 0C10                        3F            .byte	$3F
03353 0C11                        3F            .byte	$3F
03354 0C12                        00            .byte	0
03355 0C13                        3F            .byte	$3F
03356 0C14                        3F            .byte	$3F
03357 0C15                        2A            .byte	$2A
03358                                           ! 655   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03359 0C16                        15            .byte	$15
03360 0C17                        15            .byte	$15
03361 0C18                        15            .byte	$15
03362 0C19                        15            .byte	$15
03363 0C1A                        15            .byte	$15
03364 0C1B                        3F            .byte	$3F
03365 0C1C                        15            .byte	$15
03366 0C1D                        3F            .byte	$3F
03367 0C1E                        15            .byte	$15
03368 0C1F                        15            .byte	$15
03369 0C20                        3F            .byte	$3F
03370 0C21                        3F            .byte	$3F
03371 0C22                        3F            .byte	$3F
03372 0C23                        15            .byte	$15
03373 0C24                        15            .byte	$15
03374 0C25                        3F            .byte	$3F
03375 0C26                        15            .byte	$15
03376 0C27                        3F            .byte	$3F
03377 0C28                        3F            .byte	$3F
03378 0C29                        3F            .byte	$3F
03379 0C2A                        15            .byte	$15
03380 0C2B                        3F            .byte	$3F
03381 0C2C                        3F            .byte	$3F
03382                                           ! 656 };
03383 0C2D                        3F            .byte	$3F
03384                                           !BCC_EOS
03385                                           ! 657 static Bit8u palette3[256][3]=
03386                                           ! 658 {
03387                       00000C2E            _palette3:
03388                                           ! 659   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03389 0C2E                        00            .byte	0
03390 0C2F                        00            .byte	0
03391 0C30                        00            .byte	0
03392 0C31                        00            .byte	0
03393 0C32                        00            .byte	0
03394 0C33                        2A            .byte	$2A
03395 0C34                        00            .byte	0
03396 0C35                        2A            .byte	$2A
03397 0C36                        00            .byte	0
03398 0C37                        00            .byte	0
03399 0C38                        2A            .byte	$2A
03400 0C39                        2A            .byte	$2A
03401 0C3A                        2A            .byte	$2A
03402 0C3B                        00            .byte	0
03403 0C3C                        00            .byte	0
03404 0C3D                        2A            .byte	$2A
03405 0C3E                        00            .byte	0
03406 0C3F                        2A            .byte	$2A
03407 0C40                        2A            .byte	$2A
03408 0C41                        15            .byte	$15
03409 0C42                        00            .byte	0
03410 0C43                        2A            .byte	$2A
03411 0C44                        2A            .byte	$2A
03412 0C45                        2A            .byte	$2A
03413                                           ! 660   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03414 0C46                        15            .byte	$15
03415 0C47                        15            .byte	$15
03416 0C48                        15            .byte	$15
03417 0C49                        15            .byte	$15
03418 0C4A                        15            .byte	$15
03419 0C4B                        3F            .byte	$3F
03420 0C4C                        15            .byte	$15
03421 0C4D                        3F            .byte	$3F
03422 0C4E                        15            .byte	$15
03423 0C4F                        15            .byte	$15
03424 0C50                        3F            .byte	$3F
03425 0C51                        3F            .byte	$3F
03426 0C52                        3F            .byte	$3F
03427 0C53                        15            .byte	$15
03428 0C54                        15            .byte	$15
03429 0C55                        3F            .byte	$3F
03430 0C56                        15            .byte	$15
03431 0C57                        3F            .byte	$3F
03432 0C58                        3F            .byte	$3F
03433 0C59                        3F            .byte	$3F
03434 0C5A                        15            .byte	$15
03435 0C5B                        3F            .byte	$3F
03436 0C5C                        3F            .byte	$3F
03437 0C5D                        3F            .byte	$3F
03438                                           ! 661   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03439 0C5E                        00            .byte	0
03440 0C5F                        00            .byte	0
03441 0C60                        00            .byte	0
03442 0C61                        05            .byte	5
03443 0C62                        05            .byte	5
03444 0C63                        05            .byte	5
03445 0C64                        08            .byte	8
03446 0C65                        08            .byte	8
03447 0C66                        08            .byte	8
03448 0C67                        0B            .byte	$B
03449 0C68                        0B            .byte	$B
03450 0C69                        0B            .byte	$B
03451 0C6A                        0E            .byte	$E
03452 0C6B                        0E            .byte	$E
03453 0C6C                        0E            .byte	$E
03454 0C6D                        11            .byte	$11
03455 0C6E                        11            .byte	$11
03456 0C6F                        11            .byte	$11
03457 0C70                        14            .byte	$14
03458 0C71                        14            .byte	$14
03459 0C72                        14            .byte	$14
03460 0C73                        18            .byte	$18
03461 0C74                        18            .byte	$18
03462 0C75                        18            .byte	$18
03463                                           ! 662   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03464 0C76                        1C            .byte	$1C
03465 0C77                        1C            .byte	$1C
03466 0C78                        1C            .byte	$1C
03467 0C79                        20            .byte	$20
03468 0C7A                        20            .byte	$20
03469 0C7B                        20            .byte	$20
03470 0C7C                        24            .byte	$24
03471 0C7D                        24            .byte	$24
03472 0C7E                        24            .byte	$24
03473 0C7F                        28            .byte	$28
03474 0C80                        28            .byte	$28
03475 0C81                        28            .byte	$28
03476 0C82                        2D            .byte	$2D
03477 0C83                        2D            .byte	$2D
03478 0C84                        2D            .byte	$2D
03479 0C85                        32            .byte	$32
03480 0C86                        32            .byte	$32
03481 0C87                        32            .byte	$32
03482 0C88                        38            .byte	$38
03483 0C89                        38            .byte	$38
03484 0C8A                        38            .byte	$38
03485 0C8B                        3F            .byte	$3F
03486 0C8C                        3F            .byte	$3F
03487 0C8D                        3F            .byte	$3F
03488                                           ! 663   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03489 0C8E                        00            .byte	0
03490 0C8F                        00            .byte	0
03491 0C90                        3F            .byte	$3F
03492 0C91                        10            .byte	$10
03493 0C92                        00            .byte	0
03494 0C93                        3F            .byte	$3F
03495 0C94                        1F            .byte	$1F
03496 0C95                        00            .byte	0
03497 0C96                        3F            .byte	$3F
03498 0C97                        2F            .byte	$2F
03499 0C98                        00            .byte	0
03500 0C99                        3F            .byte	$3F
03501 0C9A                        3F            .byte	$3F
03502 0C9B                        00            .byte	0
03503 0C9C                        3F            .byte	$3F
03504 0C9D                        3F            .byte	$3F
03505 0C9E                        00            .byte	0
03506 0C9F                        2F            .byte	$2F
03507 0CA0                        3F            .byte	$3F
03508 0CA1                        00            .byte	0
03509 0CA2                        1F            .byte	$1F
03510 0CA3                        3F            .byte	$3F
03511 0CA4                        00            .byte	0
03512 0CA5                        10            .byte	$10
03513                                           ! 664   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03514 0CA6                        3F            .byte	$3F
03515 0CA7                        00            .byte	0
03516 0CA8                        00            .byte	0
03517 0CA9                        3F            .byte	$3F
03518 0CAA                        10            .byte	$10
03519 0CAB                        00            .byte	0
03520 0CAC                        3F            .byte	$3F
03521 0CAD                        1F            .byte	$1F
03522 0CAE                        00            .byte	0
03523 0CAF                        3F            .byte	$3F
03524 0CB0                        2F            .byte	$2F
03525 0CB1                        00            .byte	0
03526 0CB2                        3F            .byte	$3F
03527 0CB3                        3F            .byte	$3F
03528 0CB4                        00            .byte	0
03529 0CB5                        2F            .byte	$2F
03530 0CB6                        3F            .byte	$3F
03531 0CB7                        00            .byte	0
03532 0CB8                        1F            .byte	$1F
03533 0CB9                        3F            .byte	$3F
03534 0CBA                        00            .byte	0
03535 0CBB                        10            .byte	$10
03536 0CBC                        3F            .byte	$3F
03537 0CBD                        00            .byte	0
03538                                           ! 665   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03539 0CBE                        00            .byte	0
03540 0CBF                        3F            .byte	$3F
03541 0CC0                        00            .byte	0
03542 0CC1                        00            .byte	0
03543 0CC2                        3F            .byte	$3F
03544 0CC3                        10            .byte	$10
03545 0CC4                        00            .byte	0
03546 0CC5                        3F            .byte	$3F
03547 0CC6                        1F            .byte	$1F
03548 0CC7                        00            .byte	0
03549 0CC8                        3F            .byte	$3F
03550 0CC9                        2F            .byte	$2F
03551 0CCA                        00            .byte	0
03552 0CCB                        3F            .byte	$3F
03553 0CCC                        3F            .byte	$3F
03554 0CCD                        00            .byte	0
03555 0CCE                        2F            .byte	$2F
03556 0CCF                        3F            .byte	$3F
03557 0CD0                        00            .byte	0
03558 0CD1                        1F            .byte	$1F
03559 0CD2                        3F            .byte	$3F
03560 0CD3                        00            .byte	0
03561 0CD4                        10            .byte	$10
03562 0CD5                        3F            .byte	$3F
03563                                           ! 666   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x
03564 0CD6                        1F            .byte	$1F
03565 0CD7                        1F            .byte	$1F
03566 0CD8                        3F            .byte	$3F
03567 0CD9                        27            .byte	$27
03568 0CDA                        1F            .byte	$1F
03569 0CDB                        3F            .byte	$3F
03570 0CDC                        2F            .byte	$2F
03571 0CDD                        1F            .byte	$1F
03572 0CDE                        3F            .byte	$3F
03573 0CDF                        37            .byte	$37
03574 0CE0                        1F            .byte	$1F
03575 0CE1                        3F            .byte	$3F
03576 0CE2                        3F            .byte	$3F
03577 0CE3                        1F            .byte	$1F
03578 0CE4                        3F            .byte	$3F
03579                                           ! 666 3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03580 0CE5                        3F            .byte	$3F
03581 0CE6                        1F            .byte	$1F
03582 0CE7                        37            .byte	$37
03583 0CE8                        3F            .byte	$3F
03584 0CE9                        1F            .byte	$1F
03585 0CEA                        2F            .byte	$2F
03586 0CEB                        3F            .byte	$3F
03587 0CEC                        1F            .byte	$1F
03588 0CED                        27            .byte	$27
03589                                           ! 667   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03590 0CEE                        3F            .byte	$3F
03591 0CEF                        1F            .byte	$1F
03592 0CF0                        1F            .byte	$1F
03593 0CF1                        3F            .byte	$3F
03594 0CF2                        27            .byte	$27
03595 0CF3                        1F            .byte	$1F
03596 0CF4                        3F            .byte	$3F
03597 0CF5                        2F            .byte	$2F
03598 0CF6                        1F            .byte	$1F
03599 0CF7                        3F            .byte	$3F
03600 0CF8                        37            .byte	$37
03601 0CF9                        1F            .byte	$1F
03602 0CFA                        3F            .byte	$3F
03603 0CFB                        3F            .byte	$3F
03604 0CFC                        1F            .byte	$1F
03605 0CFD                        37            .byte	$37
03606 0CFE                        3F            .byte	$3F
03607 0CFF                        1F            .byte	$1F
03608 0D00                        2F            .byte	$2F
03609 0D01                        3F            .byte	$3F
03610 0D02                        1F            .byte	$1F
03611 0D03                        27            .byte	$27
03612 0D04                        3F            .byte	$3F
03613 0D05                        1F            .byte	$1F
03614                                           ! 668   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03615 0D06                        1F            .byte	$1F
03616 0D07                        3F            .byte	$3F
03617 0D08                        1F            .byte	$1F
03618 0D09                        1F            .byte	$1F
03619 0D0A                        3F            .byte	$3F
03620 0D0B                        27            .byte	$27
03621 0D0C                        1F            .byte	$1F
03622 0D0D                        3F            .byte	$3F
03623 0D0E                        2F            .byte	$2F
03624 0D0F                        1F            .byte	$1F
03625 0D10                        3F            .byte	$3F
03626 0D11                        37            .byte	$37
03627 0D12                        1F            .byte	$1F
03628 0D13                        3F            .byte	$3F
03629 0D14                        3F            .byte	$3F
03630 0D15                        1F            .byte	$1F
03631 0D16                        37            .byte	$37
03632 0D17                        3F            .byte	$3F
03633 0D18                        1F            .byte	$1F
03634 0D19                        2F            .byte	$2F
03635 0D1A                        3F            .byte	$3F
03636 0D1B                        1F            .byte	$1F
03637 0D1C                        27            .byte	$27
03638 0D1D                        3F            .byte	$3F
03639                                           ! 669   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03640 0D1E                        2D            .byte	$2D
03641 0D1F                        2D            .byte	$2D
03642 0D20                        3F            .byte	$3F
03643 0D21                        31            .byte	$31
03644 0D22                        2D            .byte	$2D
03645 0D23                        3F            .byte	$3F
03646 0D24                        36            .byte	$36
03647 0D25                        2D            .byte	$2D
03648 0D26                        3F            .byte	$3F
03649 0D27                        3A            .byte	$3A
03650 0D28                        2D            .byte	$2D
03651 0D29                        3F            .byte	$3F
03652 0D2A                        3F            .byte	$3F
03653 0D2B                        2D            .byte	$2D
03654 0D2C                        3F            .byte	$3F
03655 0D2D                        3F            .byte	$3F
03656 0D2E                        2D            .byte	$2D
03657 0D2F                        3A            .byte	$3A
03658 0D30                        3F            .byte	$3F
03659 0D31                        2D            .byte	$2D
03660 0D32                        36            .byte	$36
03661 0D33                        3F            .byte	$3F
03662 0D34                        2D            .byte	$2D
03663 0D35                        31            .byte	$31
03664                                           ! 670   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03665 0D36                        3F            .byte	$3F
03666 0D37                        2D            .byte	$2D
03667 0D38                        2D            .byte	$2D
03668 0D39                        3F            .byte	$3F
03669 0D3A                        31            .byte	$31
03670 0D3B                        2D            .byte	$2D
03671 0D3C                        3F            .byte	$3F
03672 0D3D                        36            .byte	$36
03673 0D3E                        2D            .byte	$2D
03674 0D3F                        3F            .byte	$3F
03675 0D40                        3A            .byte	$3A
03676 0D41                        2D            .byte	$2D
03677 0D42                        3F            .byte	$3F
03678 0D43                        3F            .byte	$3F
03679 0D44                        2D            .byte	$2D
03680 0D45                        3A            .byte	$3A
03681 0D46                        3F            .byte	$3F
03682 0D47                        2D            .byte	$2D
03683 0D48                        36            .byte	$36
03684 0D49                        3F            .byte	$3F
03685 0D4A                        2D            .byte	$2D
03686 0D4B                        31            .byte	$31
03687 0D4C                        3F            .byte	$3F
03688 0D4D                        2D            .byte	$2D
03689                                           ! 671   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03690 0D4E                        2D            .byte	$2D
03691 0D4F                        3F            .byte	$3F
03692 0D50                        2D            .byte	$2D
03693 0D51                        2D            .byte	$2D
03694 0D52                        3F            .byte	$3F
03695 0D53                        31            .byte	$31
03696 0D54                        2D            .byte	$2D
03697 0D55                        3F            .byte	$3F
03698 0D56                        36            .byte	$36
03699 0D57                        2D            .byte	$2D
03700 0D58                        3F            .byte	$3F
03701 0D59                        3A            .byte	$3A
03702 0D5A                        2D            .byte	$2D
03703 0D5B                        3F            .byte	$3F
03704 0D5C                        3F            .byte	$3F
03705 0D5D                        2D            .byte	$2D
03706 0D5E                        3A            .byte	$3A
03707 0D5F                        3F            .byte	$3F
03708 0D60                        2D            .byte	$2D
03709 0D61                        36            .byte	$36
03710 0D62                        3F            .byte	$3F
03711 0D63                        2D            .byte	$2D
03712 0D64                        31            .byte	$31
03713 0D65                        3F            .byte	$3F
03714                                           ! 672   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03715 0D66                        00            .byte	0
03716 0D67                        00            .byte	0
03717 0D68                        1C            .byte	$1C
03718 0D69                        07            .byte	7
03719 0D6A                        00            .byte	0
03720 0D6B                        1C            .byte	$1C
03721 0D6C                        0E            .byte	$E
03722 0D6D                        00            .byte	0
03723 0D6E                        1C            .byte	$1C
03724 0D6F                        15            .byte	$15
03725 0D70                        00            .byte	0
03726 0D71                        1C            .byte	$1C
03727 0D72                        1C            .byte	$1C
03728 0D73                        00            .byte	0
03729 0D74                        1C            .byte	$1C
03730 0D75                        1C            .byte	$1C
03731 0D76                        00            .byte	0
03732 0D77                        15            .byte	$15
03733 0D78                        1C            .byte	$1C
03734 0D79                        00            .byte	0
03735 0D7A                        0E            .byte	$E
03736 0D7B                        1C            .byte	$1C
03737 0D7C                        00            .byte	0
03738 0D7D                        07            .byte	7
03739                                           ! 673   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
03740 0D7E                        1C            .byte	$1C
03741 0D7F                        00            .byte	0
03742 0D80                        00            .byte	0
03743 0D81                        1C            .byte	$1C
03744 0D82                        07            .byte	7
03745 0D83                        00            .byte	0
03746 0D84                        1C            .byte	$1C
03747 0D85                        0E            .byte	$E
03748 0D86                        00            .byte	0
03749 0D87                        1C            .byte	$1C
03750 0D88                        15            .byte	$15
03751 0D89                        00            .byte	0
03752 0D8A                        1C            .byte	$1C
03753 0D8B                        1C            .byte	$1C
03754 0D8C                        00            .byte	0
03755 0D8D                        15            .byte	$15
03756 0D8E                        1C            .byte	$1C
03757 0D8F                        00            .byte	0
03758 0D90                        0E            .byte	$E
03759 0D91                        1C            .byte	$1C
03760 0D92                        00            .byte	0
03761 0D93                        07            .byte	7
03762 0D94                        1C            .byte	$1C
03763 0D95                        00            .byte	0
03764                                           ! 674   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
03765 0D96                        00            .byte	0
03766 0D97                        1C            .byte	$1C
03767 0D98                        00            .byte	0
03768 0D99                        00            .byte	0
03769 0D9A                        1C            .byte	$1C
03770 0D9B                        07            .byte	7
03771 0D9C                        00            .byte	0
03772 0D9D                        1C            .byte	$1C
03773 0D9E                        0E            .byte	$E
03774 0D9F                        00            .byte	0
03775 0DA0                        1C            .byte	$1C
03776 0DA1                        15            .byte	$15
03777 0DA2                        00            .byte	0
03778 0DA3                        1C            .byte	$1C
03779 0DA4                        1C            .byte	$1C
03780 0DA5                        00            .byte	0
03781 0DA6                        15            .byte	$15
03782 0DA7                        1C            .byte	$1C
03783 0DA8                        00            .byte	0
03784 0DA9                        0E            .byte	$E
03785 0DAA                        1C            .byte	$1C
03786 0DAB                        00            .byte	0
03787 0DAC                        07            .byte	7
03788 0DAD                        1C            .byte	$1C
03789                                           ! 675   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
03790 0DAE                        0E            .byte	$E
03791 0DAF                        0E            .byte	$E
03792 0DB0                        1C            .byte	$1C
03793 0DB1                        11            .byte	$11
03794 0DB2                        0E            .byte	$E
03795 0DB3                        1C            .byte	$1C
03796 0DB4                        15            .byte	$15
03797 0DB5                        0E            .byte	$E
03798 0DB6                        1C            .byte	$1C
03799 0DB7                        18            .byte	$18
03800 0DB8                        0E            .byte	$E
03801 0DB9                        1C            .byte	$1C
03802 0DBA                        1C            .byte	$1C
03803 0DBB                        0E            .byte	$E
03804 0DBC                        1C            .byte	$1C
03805 0DBD                        1C            .byte	$1C
03806 0DBE                        0E            .byte	$E
03807 0DBF                        18            .byte	$18
03808 0DC0                        1C            .byte	$1C
03809 0DC1                        0E            .byte	$E
03810 0DC2                        15            .byte	$15
03811 0DC3                        1C            .byte	$1C
03812 0DC4                        0E            .byte	$E
03813 0DC5                        11            .byte	$11
03814                                           ! 676   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
03815 0DC6                        1C            .byte	$1C
03816 0DC7                        0E            .byte	$E
03817 0DC8                        0E            .byte	$E
03818 0DC9                        1C            .byte	$1C
03819 0DCA                        11            .byte	$11
03820 0DCB                        0E            .byte	$E
03821 0DCC                        1C            .byte	$1C
03822 0DCD                        15            .byte	$15
03823 0DCE                        0E            .byte	$E
03824 0DCF                        1C            .byte	$1C
03825 0DD0                        18            .byte	$18
03826 0DD1                        0E            .byte	$E
03827 0DD2                        1C            .byte	$1C
03828 0DD3                        1C            .byte	$1C
03829 0DD4                        0E            .byte	$E
03830 0DD5                        18            .byte	$18
03831 0DD6                        1C            .byte	$1C
03832 0DD7                        0E            .byte	$E
03833 0DD8                        15            .byte	$15
03834 0DD9                        1C            .byte	$1C
03835 0DDA                        0E            .byte	$E
03836 0DDB                        11            .byte	$11
03837 0DDC                        1C            .byte	$1C
03838 0DDD                        0E            .byte	$E
03839                                           ! 677   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
03840 0DDE                        0E            .byte	$E
03841 0DDF                        1C            .byte	$1C
03842 0DE0                        0E            .byte	$E
03843 0DE1                        0E            .byte	$E
03844 0DE2                        1C            .byte	$1C
03845 0DE3                        11            .byte	$11
03846 0DE4                        0E            .byte	$E
03847 0DE5                        1C            .byte	$1C
03848 0DE6                        15            .byte	$15
03849 0DE7                        0E            .byte	$E
03850 0DE8                        1C            .byte	$1C
03851 0DE9                        18            .byte	$18
03852 0DEA                        0E            .byte	$E
03853 0DEB                        1C            .byte	$1C
03854 0DEC                        1C            .byte	$1C
03855 0DED                        0E            .byte	$E
03856 0DEE                        18            .byte	$18
03857 0DEF                        1C            .byte	$1C
03858 0DF0                        0E            .byte	$E
03859 0DF1                        15            .byte	$15
03860 0DF2                        1C            .byte	$1C
03861 0DF3                        0E            .byte	$E
03862 0DF4                        11            .byte	$11
03863 0DF5                        1C            .byte	$1C
03864                                           ! 678   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
03865 0DF6                        14            .byte	$14
03866 0DF7                        14            .byte	$14
03867 0DF8                        1C            .byte	$1C
03868 0DF9                        16            .byte	$16
03869 0DFA                        14            .byte	$14
03870 0DFB                        1C            .byte	$1C
03871 0DFC                        18            .byte	$18
03872 0DFD                        14            .byte	$14
03873 0DFE                        1C            .byte	$1C
03874 0DFF                        1A            .byte	$1A
03875 0E00                        14            .byte	$14
03876 0E01                        1C            .byte	$1C
03877 0E02                        1C            .byte	$1C
03878 0E03                        14            .byte	$14
03879 0E04                        1C            .byte	$1C
03880 0E05                        1C            .byte	$1C
03881 0E06                        14            .byte	$14
03882 0E07                        1A            .byte	$1A
03883 0E08                        1C            .byte	$1C
03884 0E09                        14            .byte	$14
03885 0E0A                        18            .byte	$18
03886 0E0B                        1C            .byte	$1C
03887 0E0C                        14            .byte	$14
03888 0E0D                        16            .byte	$16
03889                                           ! 679   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
03890 0E0E                        1C            .byte	$1C
03891 0E0F                        14            .byte	$14
03892 0E10                        14            .byte	$14
03893 0E11                        1C            .byte	$1C
03894 0E12                        16            .byte	$16
03895 0E13                        14            .byte	$14
03896 0E14                        1C            .byte	$1C
03897 0E15                        18            .byte	$18
03898 0E16                        14            .byte	$14
03899 0E17                        1C            .byte	$1C
03900 0E18                        1A            .byte	$1A
03901 0E19                        14            .byte	$14
03902 0E1A                        1C            .byte	$1C
03903 0E1B                        1C            .byte	$1C
03904 0E1C                        14            .byte	$14
03905 0E1D                        1A            .byte	$1A
03906 0E1E                        1C            .byte	$1C
03907 0E1F                        14            .byte	$14
03908 0E20                        18            .byte	$18
03909 0E21                        1C            .byte	$1C
03910 0E22                        14            .byte	$14
03911 0E23                        16            .byte	$16
03912 0E24                        1C            .byte	$1C
03913 0E25                        14            .byte	$14
03914                                           ! 680   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
03915 0E26                        14            .byte	$14
03916 0E27                        1C            .byte	$1C
03917 0E28                        14            .byte	$14
03918 0E29                        14            .byte	$14
03919 0E2A                        1C            .byte	$1C
03920 0E2B                        16            .byte	$16
03921 0E2C                        14            .byte	$14
03922 0E2D                        1C            .byte	$1C
03923 0E2E                        18            .byte	$18
03924 0E2F                        14            .byte	$14
03925 0E30                        1C            .byte	$1C
03926 0E31                        1A            .byte	$1A
03927 0E32                        14            .byte	$14
03928 0E33                        1C            .byte	$1C
03929 0E34                        1C            .byte	$1C
03930 0E35                        14            .byte	$14
03931 0E36                        1A            .byte	$1A
03932 0E37                        1C            .byte	$1C
03933 0E38                        14            .byte	$14
03934 0E39                        18            .byte	$18
03935 0E3A                        1C            .byte	$1C
03936 0E3B                        14            .byte	$14
03937 0E3C                        16            .byte	$16
03938 0E3D                        1C            .byte	$1C
03939                                           ! 681   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
03940 0E3E                        00            .byte	0
03941 0E3F                        00            .byte	0
03942 0E40                        10            .byte	$10
03943 0E41                        04            .byte	4
03944 0E42                        00            .byte	0
03945 0E43                        10            .byte	$10
03946 0E44                        08            .byte	8
03947 0E45                        00            .byte	0
03948 0E46                        10            .byte	$10
03949 0E47                        0C            .byte	$C
03950 0E48                        00            .byte	0
03951 0E49                        10            .byte	$10
03952 0E4A                        10            .byte	$10
03953 0E4B                        00            .byte	0
03954 0E4C                        10            .byte	$10
03955 0E4D                        10            .byte	$10
03956 0E4E                        00            .byte	0
03957 0E4F                        0C            .byte	$C
03958 0E50                        10            .byte	$10
03959 0E51                        00            .byte	0
03960 0E52                        08            .byte	8
03961 0E53                        10            .byte	$10
03962 0E54                        00            .byte	0
03963 0E55                        04            .byte	4
03964                                           ! 682   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x
03965 0E56                        10            .byte	$10
03966 0E57                        00            .byte	0
03967 0E58                        00            .byte	0
03968 0E59                        10            .byte	$10
03969 0E5A                        04            .byte	4
03970 0E5B                        00            .byte	0
03971 0E5C                        10            .byte	$10
03972 0E5D                        08            .byte	8
03973 0E5E                        00            .byte	0
03974                                           ! 682 10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
03975 0E5F                        10            .byte	$10
03976 0E60                        0C            .byte	$C
03977 0E61                        00            .byte	0
03978 0E62                        10            .byte	$10
03979 0E63                        10            .byte	$10
03980 0E64                        00            .byte	0
03981 0E65                        0C            .byte	$C
03982 0E66                        10            .byte	$10
03983 0E67                        00            .byte	0
03984 0E68                        08            .byte	8
03985 0E69                        10            .byte	$10
03986 0E6A                        00            .byte	0
03987 0E6B                        04            .byte	4
03988 0E6C                        10            .byte	$10
03989 0E6D                        00            .byte	0
03990                                           ! 683   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
03991 0E6E                        00            .byte	0
03992 0E6F                        10            .byte	$10
03993 0E70                        00            .byte	0
03994 0E71                        00            .byte	0
03995 0E72                        10            .byte	$10
03996 0E73                        04            .byte	4
03997 0E74                        00            .byte	0
03998 0E75                        10            .byte	$10
03999 0E76                        08            .byte	8
04000 0E77                        00            .byte	0
04001 0E78                        10            .byte	$10
04002 0E79                        0C            .byte	$C
04003 0E7A                        00            .byte	0
04004 0E7B                        10            .byte	$10
04005 0E7C                        10            .byte	$10
04006 0E7D                        00            .byte	0
04007 0E7E                        0C            .byte	$C
04008 0E7F                        10            .byte	$10
04009 0E80                        00            .byte	0
04010 0E81                        08            .byte	8
04011 0E82                        10            .byte	$10
04012 0E83                        00            .byte	0
04013 0E84                        04            .byte	4
04014 0E85                        10            .byte	$10
04015                                           ! 684   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04016 0E86                        08            .byte	8
04017 0E87                        08            .byte	8
04018 0E88                        10            .byte	$10
04019 0E89                        0A            .byte	$A
04020 0E8A                        08            .byte	8
04021 0E8B                        10            .byte	$10
04022 0E8C                        0C            .byte	$C
04023 0E8D                        08            .byte	8
04024 0E8E                        10            .byte	$10
04025 0E8F                        0E            .byte	$E
04026 0E90                        08            .byte	8
04027 0E91                        10            .byte	$10
04028 0E92                        10            .byte	$10
04029 0E93                        08            .byte	8
04030 0E94                        10            .byte	$10
04031 0E95                        10            .byte	$10
04032 0E96                        08            .byte	8
04033 0E97                        0E            .byte	$E
04034 0E98                        10            .byte	$10
04035 0E99                        08            .byte	8
04036 0E9A                        0C            .byte	$C
04037 0E9B                        10            .byte	$10
04038 0E9C                        08            .byte	8
04039 0E9D                        0A            .byte	$A
04040                                           ! 685   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04041 0E9E                        10            .byte	$10
04042 0E9F                        08            .byte	8
04043 0EA0                        08            .byte	8
04044 0EA1                        10            .byte	$10
04045 0EA2                        0A            .byte	$A
04046 0EA3                        08            .byte	8
04047 0EA4                        10            .byte	$10
04048 0EA5                        0C            .byte	$C
04049 0EA6                        08            .byte	8
04050 0EA7                        10            .byte	$10
04051 0EA8                        0E            .byte	$E
04052 0EA9                        08            .byte	8
04053 0EAA                        10            .byte	$10
04054 0EAB                        10            .byte	$10
04055 0EAC                        08            .byte	8
04056 0EAD                        0E            .byte	$E
04057 0EAE                        10            .byte	$10
04058 0EAF                        08            .byte	8
04059 0EB0                        0C            .byte	$C
04060 0EB1                        10            .byte	$10
04061 0EB2                        08            .byte	8
04062 0EB3                        0A            .byte	$A
04063 0EB4                        10            .byte	$10
04064 0EB5                        08            .byte	8
04065                                           ! 686   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04066 0EB6                        08            .byte	8
04067 0EB7                        10            .byte	$10
04068 0EB8                        08            .byte	8
04069 0EB9                        08            .byte	8
04070 0EBA                        10            .byte	$10
04071 0EBB                        0A            .byte	$A
04072 0EBC                        08            .byte	8
04073 0EBD                        10            .byte	$10
04074 0EBE                        0C            .byte	$C
04075 0EBF                        08            .byte	8
04076 0EC0                        10            .byte	$10
04077 0EC1                        0E            .byte	$E
04078 0EC2                        08            .byte	8
04079 0EC3                        10            .byte	$10
04080 0EC4                        10            .byte	$10
04081 0EC5                        08            .byte	8
04082 0EC6                        0E            .byte	$E
04083 0EC7                        10            .byte	$10
04084 0EC8                        08            .byte	8
04085 0EC9                        0C            .byte	$C
04086 0ECA                        10            .byte	$10
04087 0ECB                        08            .byte	8
04088 0ECC                        0A            .byte	$A
04089 0ECD                        10            .byte	$10
04090                                           ! 687   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04091 0ECE                        0B            .byte	$B
04092 0ECF                        0B            .byte	$B
04093 0ED0                        10            .byte	$10
04094 0ED1                        0C            .byte	$C
04095 0ED2                        0B            .byte	$B
04096 0ED3                        10            .byte	$10
04097 0ED4                        0D            .byte	$D
04098 0ED5                        0B            .byte	$B
04099 0ED6                        10            .byte	$10
04100 0ED7                        0F            .byte	$F
04101 0ED8                        0B            .byte	$B
04102 0ED9                        10            .byte	$10
04103 0EDA                        10            .byte	$10
04104 0EDB                        0B            .byte	$B
04105 0EDC                        10            .byte	$10
04106 0EDD                        10            .byte	$10
04107 0EDE                        0B            .byte	$B
04108 0EDF                        0F            .byte	$F
04109 0EE0                        10            .byte	$10
04110 0EE1                        0B            .byte	$B
04111 0EE2                        0D            .byte	$D
04112 0EE3                        10            .byte	$10
04113 0EE4                        0B            .byte	$B
04114 0EE5                        0C            .byte	$C
04115                                           ! 688   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04116 0EE6                        10            .byte	$10
04117 0EE7                        0B            .byte	$B
04118 0EE8                        0B            .byte	$B
04119 0EE9                        10            .byte	$10
04120 0EEA                        0C            .byte	$C
04121 0EEB                        0B            .byte	$B
04122 0EEC                        10            .byte	$10
04123 0EED                        0D            .byte	$D
04124 0EEE                        0B            .byte	$B
04125 0EEF                        10            .byte	$10
04126 0EF0                        0F            .byte	$F
04127 0EF1                        0B            .byte	$B
04128 0EF2                        10            .byte	$10
04129 0EF3                        10            .byte	$10
04130 0EF4                        0B            .byte	$B
04131 0EF5                        0F            .byte	$F
04132 0EF6                        10            .byte	$10
04133 0EF7                        0B            .byte	$B
04134 0EF8                        0D            .byte	$D
04135 0EF9                        10            .byte	$10
04136 0EFA                        0B            .byte	$B
04137 0EFB                        0C            .byte	$C
04138 0EFC                        10            .byte	$10
04139 0EFD                        0B            .byte	$B
04140                                           ! 689   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04141 0EFE                        0B            .byte	$B
04142 0EFF                        10            .byte	$10
04143 0F00                        0B            .byte	$B
04144 0F01                        0B            .byte	$B
04145 0F02                        10            .byte	$10
04146 0F03                        0C            .byte	$C
04147 0F04                        0B            .byte	$B
04148 0F05                        10            .byte	$10
04149 0F06                        0D            .byte	$D
04150 0F07                        0B            .byte	$B
04151 0F08                        10            .byte	$10
04152 0F09                        0F            .byte	$F
04153 0F0A                        0B            .byte	$B
04154 0F0B                        10            .byte	$10
04155 0F0C                        10            .byte	$10
04156 0F0D                        0B            .byte	$B
04157 0F0E                        0F            .byte	$F
04158 0F0F                        10            .byte	$10
04159 0F10                        0B            .byte	$B
04160 0F11                        0D            .byte	$D
04161 0F12                        10            .byte	$10
04162 0F13                        0B            .byte	$B
04163 0F14                        0C            .byte	$C
04164 0F15                        10            .byte	$10
04165                                           ! 690   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04166 0F16                        00            .byte	0
04167 0F17                        00            .byte	0
04168 0F18                        00            .byte	0
04169 0F19                        00            .byte	0
04170 0F1A                        00            .byte	0
04171 0F1B                        00            .byte	0
04172 0F1C                        00            .byte	0
04173 0F1D                        00            .byte	0
04174 0F1E                        00            .byte	0
04175 0F1F                        00            .byte	0
04176 0F20                        00            .byte	0
04177 0F21                        00            .byte	0
04178 0F22                        00            .byte	0
04179 0F23                        00            .byte	0
04180 0F24                        00            .byte	0
04181 0F25                        00            .byte	0
04182 0F26                        00            .byte	0
04183 0F27                        00            .byte	0
04184 0F28                        00            .byte	0
04185 0F29                        00            .byte	0
04186 0F2A                        00            .byte	0
04187 0F2B                        00            .byte	0
04188 0F2C                        00            .byte	0
04189                                           ! 691 };
04190 0F2D                        00            .byte	0
04191                                           !BCC_EOS
04192                                           ! 692 static Bit8u static_functionality[0x10]=
04193                                           ! 693 {
04194                       00000F2E            _static_functionality:
04195                                           ! 694          0xff,
04196 0F2E                        FF            .byte	$FF
04197                                           ! 695          0xe0,
04198 0F2F                        E0            .byte	$E0
04199                                           ! 696          0x0f,
04200 0F30                        0F            .byte	$F
04201                                           ! 697          0x00, 0x00, 0x00, 0x00,
04202 0F31                        00            .byte	0
04203 0F32                        00            .byte	0
04204 0F33                        00            .byte	0
04205 0F34                        00            .byte	0
04206                                           ! 698          0x07,
04207 0F35                        07            .byte	7
04208                                           ! 699          0x02,
04209 0F36                        02            .byte	2
04210                                           ! 700          0x08,
04211 0F37                        08            .byte	8
04212                                           ! 701          0xe7,
04213 0F38                        E7            .byte	$E7
04214                                           ! 702          0x0c,
04215 0F39                        0C            .byte	$C
04216                                           ! 703          0x00,
04217 0F3A                        00            .byte	0
04218                                           ! 704          0x00,
04219 0F3B                        00            .byte	0
04220                                           ! 705          0x00,
04221 0F3C                        00            .byte	0
04222                                           ! 706          0x00
04223                                           ! 707 };
04224 0F3D                        00            .byte	0
04225                                           !BCC_EOS
04226                                           ! 708 static Bit8u vgafont8[256*8]=
04227                                           ! 709 {
04228                       00000F3E            _vgafont8:
04229                                           ! 710  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04230 0F3E                        00            .byte	0
04231 0F3F                        00            .byte	0
04232 0F40                        00            .byte	0
04233 0F41                        00            .byte	0
04234 0F42                        00            .byte	0
04235 0F43                        00            .byte	0
04236 0F44                        00            .byte	0
04237 0F45                        00            .byte	0
04238                                           ! 711  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04239 0F46                        7E            .byte	$7E
04240 0F47                        81            .byte	$81
04241 0F48                        A5            .byte	$A5
04242 0F49                        81            .byte	$81
04243 0F4A                        BD            .byte	$BD
04244 0F4B                        99            .byte	$99
04245 0F4C                        81            .byte	$81
04246 0F4D                        7E            .byte	$7E
04247                                           ! 712  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04248 0F4E                        7E            .byte	$7E
04249 0F4F                        FF            .byte	$FF
04250 0F50                        DB            .byte	$DB
04251 0F51                        FF            .byte	$FF
04252 0F52                        C3            .byte	$C3
04253 0F53                        E7            .byte	$E7
04254 0F54                        FF            .byte	$FF
04255 0F55                        7E            .byte	$7E
04256                                           ! 713  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04257 0F56                        6C            .byte	$6C
04258 0F57                        FE            .byte	$FE
04259 0F58                        FE            .byte	$FE
04260 0F59                        FE            .byte	$FE
04261 0F5A                        7C            .byte	$7C
04262 0F5B                        38            .byte	$38
04263 0F5C                        10            .byte	$10
04264 0F5D                        00            .byte	0
04265                                           ! 714  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04266 0F5E                        10            .byte	$10
04267 0F5F                        38            .byte	$38
04268 0F60                        7C            .byte	$7C
04269 0F61                        FE            .byte	$FE
04270 0F62                        7C            .byte	$7C
04271 0F63                        38            .byte	$38
04272 0F64                        10            .byte	$10
04273 0F65                        00            .byte	0
04274                                           ! 715  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04275 0F66                        38            .byte	$38
04276 0F67                        7C            .byte	$7C
04277 0F68                        38            .byte	$38
04278 0F69                        FE            .byte	$FE
04279 0F6A                        FE            .byte	$FE
04280 0F6B                        7C            .byte	$7C
04281 0F6C                        38            .byte	$38
04282 0F6D                        7C            .byte	$7C
04283                                           ! 716  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04284 0F6E                        10            .byte	$10
04285 0F6F                        10            .byte	$10
04286 0F70                        38            .byte	$38
04287 0F71                        7C            .byte	$7C
04288 0F72                        FE            .byte	$FE
04289 0F73                        7C            .byte	$7C
04290 0F74                        38            .byte	$38
04291 0F75                        7C            .byte	$7C
04292                                           ! 717  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04293 0F76                        00            .byte	0
04294 0F77                        00            .byte	0
04295 0F78                        18            .byte	$18
04296 0F79                        3C            .byte	$3C
04297 0F7A                        3C            .byte	$3C
04298 0F7B                        18            .byte	$18
04299 0F7C                        00            .byte	0
04300 0F7D                        00            .byte	0
04301                                           ! 718  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04302 0F7E                        FF            .byte	$FF
04303 0F7F                        FF            .byte	$FF
04304 0F80                        E7            .byte	$E7
04305 0F81                        C3            .byte	$C3
04306 0F82                        C3            .byte	$C3
04307 0F83                        E7            .byte	$E7
04308 0F84                        FF            .byte	$FF
04309 0F85                        FF            .byte	$FF
04310                                           ! 719  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04311 0F86                        00            .byte	0
04312 0F87                        3C            .byte	$3C
04313 0F88                        66            .byte	$66
04314 0F89                        42            .byte	$42
04315 0F8A                        42            .byte	$42
04316 0F8B                        66            .byte	$66
04317 0F8C                        3C            .byte	$3C
04318 0F8D                        00            .byte	0
04319                                           ! 720  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04320 0F8E                        FF            .byte	$FF
04321 0F8F                        C3            .byte	$C3
04322 0F90                        99            .byte	$99
04323 0F91                        BD            .byte	$BD
04324 0F92                        BD            .byte	$BD
04325 0F93                        99            .byte	$99
04326 0F94                        C3            .byte	$C3
04327 0F95                        FF            .byte	$FF
04328                                           ! 721  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04329 0F96                        0F            .byte	$F
04330 0F97                        07            .byte	7
04331 0F98                        0F            .byte	$F
04332 0F99                        7D            .byte	$7D
04333 0F9A                        CC            .byte	$CC
04334 0F9B                        CC            .byte	$CC
04335 0F9C                        CC            .byte	$CC
04336 0F9D                        78            .byte	$78
04337                                           ! 722  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04338 0F9E                        3C            .byte	$3C
04339 0F9F                        66            .byte	$66
04340 0FA0                        66            .byte	$66
04341 0FA1                        66            .byte	$66
04342 0FA2                        3C            .byte	$3C
04343 0FA3                        18            .byte	$18
04344 0FA4                        7E            .byte	$7E
04345 0FA5                        18            .byte	$18
04346                                           ! 723  
04347                                           ! 723 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04348 0FA6                        3F            .byte	$3F
04349 0FA7                        33            .byte	$33
04350 0FA8                        3F            .byte	$3F
04351 0FA9                        30            .byte	$30
04352 0FAA                        30            .byte	$30
04353 0FAB                        70            .byte	$70
04354 0FAC                        F0            .byte	$F0
04355 0FAD                        E0            .byte	$E0
04356                                           ! 724  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04357 0FAE                        7F            .byte	$7F
04358 0FAF                        63            .byte	$63
04359 0FB0                        7F            .byte	$7F
04360 0FB1                        63            .byte	$63
04361 0FB2                        63            .byte	$63
04362 0FB3                        67            .byte	$67
04363 0FB4                        E6            .byte	$E6
04364 0FB5                        C0            .byte	$C0
04365                                           ! 725  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04366 0FB6                        99            .byte	$99
04367 0FB7                        5A            .byte	$5A
04368 0FB8                        3C            .byte	$3C
04369 0FB9                        E7            .byte	$E7
04370 0FBA                        E7            .byte	$E7
04371 0FBB                        3C            .byte	$3C
04372 0FBC                        5A            .byte	$5A
04373 0FBD                        99            .byte	$99
04374                                           ! 726  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04375 0FBE                        80            .byte	$80
04376 0FBF                        E0            .byte	$E0
04377 0FC0                        F8            .byte	$F8
04378 0FC1                        FE            .byte	$FE
04379 0FC2                        F8            .byte	$F8
04380 0FC3                        E0            .byte	$E0
04381 0FC4                        80            .byte	$80
04382 0FC5                        00            .byte	0
04383                                           ! 727  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04384 0FC6                        02            .byte	2
04385 0FC7                        0E            .byte	$E
04386 0FC8                        3E            .byte	$3E
04387 0FC9                        FE            .byte	$FE
04388 0FCA                        3E            .byte	$3E
04389 0FCB                        0E            .byte	$E
04390 0FCC                        02            .byte	2
04391 0FCD                        00            .byte	0
04392                                           ! 728  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04393 0FCE                        18            .byte	$18
04394 0FCF                        3C            .byte	$3C
04395 0FD0                        7E            .byte	$7E
04396 0FD1                        18            .byte	$18
04397 0FD2                        18            .byte	$18
04398 0FD3                        7E            .byte	$7E
04399 0FD4                        3C            .byte	$3C
04400 0FD5                        18            .byte	$18
04401                                           ! 729  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04402 0FD6                        66            .byte	$66
04403 0FD7                        66            .byte	$66
04404 0FD8                        66            .byte	$66
04405 0FD9                        66            .byte	$66
04406 0FDA                        66            .byte	$66
04407 0FDB                        00            .byte	0
04408 0FDC                        66            .byte	$66
04409 0FDD                        00            .byte	0
04410                                           ! 730  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04411 0FDE                        7F            .byte	$7F
04412 0FDF                        DB            .byte	$DB
04413 0FE0                        DB            .byte	$DB
04414 0FE1                        7B            .byte	$7B
04415 0FE2                        1B            .byte	$1B
04416 0FE3                        1B            .byte	$1B
04417 0FE4                        1B            .byte	$1B
04418 0FE5                        00            .byte	0
04419                                           ! 731  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04420 0FE6                        3E            .byte	$3E
04421 0FE7                        63            .byte	$63
04422 0FE8                        38            .byte	$38
04423 0FE9                        6C            .byte	$6C
04424 0FEA                        6C            .byte	$6C
04425 0FEB                        38            .byte	$38
04426 0FEC                        CC            .byte	$CC
04427 0FED                        78            .byte	$78
04428                                           ! 732  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04429 0FEE                        00            .byte	0
04430 0FEF                        00            .byte	0
04431 0FF0                        00            .byte	0
04432 0FF1                        00            .byte	0
04433 0FF2                        7E            .byte	$7E
04434 0FF3                        7E            .byte	$7E
04435 0FF4                        7E            .byte	$7E
04436 0FF5                        00            .byte	0
04437                                           ! 733  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04438 0FF6                        18            .byte	$18
04439 0FF7                        3C            .byte	$3C
04440 0FF8                        7E            .byte	$7E
04441 0FF9                        18            .byte	$18
04442 0FFA                        7E            .byte	$7E
04443 0FFB                        3C            .byte	$3C
04444 0FFC                        18            .byte	$18
04445 0FFD                        FF            .byte	$FF
04446                                           ! 734  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04447 0FFE                        18            .byte	$18
04448 0FFF                        3C            .byte	$3C
04449 1000                        7E            .byte	$7E
04450 1001                        18            .byte	$18
04451 1002                        18            .byte	$18
04452 1003                        18            .byte	$18
04453 1004                        18            .byte	$18
04454 1005                        00            .byte	0
04455                                           ! 735  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04456 1006                        18            .byte	$18
04457 1007                        18            .byte	$18
04458 1008                        18            .byte	$18
04459 1009                        18            .byte	$18
04460 100A                        7E            .byte	$7E
04461 100B                        3C            .byte	$3C
04462 100C                        18            .byte	$18
04463 100D                        00            .byte	0
04464                                           ! 736  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04465 100E                        00            .byte	0
04466 100F                        18            .byte	$18
04467 1010                        0C            .byte	$C
04468 1011                        FE            .byte	$FE
04469 1012                        0C            .byte	$C
04470 1013                        18            .byte	$18
04471 1014                        00            .byte	0
04472 1015                        00            .byte	0
04473                                           ! 737  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04474 1016                        00            .byte	0
04475 1017                        30            .byte	$30
04476 1018                        60            .byte	$60
04477 1019                        FE            .byte	$FE
04478 101A                        60            .byte	$60
04479 101B                        30            .byte	$30
04480 101C                        00            .byte	0
04481 101D                        00            .byte	0
04482                                           ! 738  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04483 101E                        00            .byte	0
04484 101F                        00            .byte	0
04485 1020                        C0            .byte	$C0
04486 1021                        C0            .byte	$C0
04487 1022                        C0            .byte	$C0
04488 1023                        FE            .byte	$FE
04489 1024                        00            .byte	0
04490 1025                        00            .byte	0
04491                                           ! 739  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04492 1026                        00            .byte	0
04493 1027                        24            .byte	$24
04494 1028                        66            .byte	$66
04495 1029                        FF            .byte	$FF
04496 102A                        66            .byte	$66
04497 102B                        24            .byte	$24
04498 102C                        00            .byte	0
04499 102D                        00            .byte	0
04500                                           ! 740  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04501 102E                        00            .byte	0
04502 102F                        18            .byte	$18
04503 1030                        3C            .byte	$3C
04504 1031                        7E            .byte	$7E
04505 1032                        FF            .byte	$FF
04506 1033                        FF            .byte	$FF
04507 1034                        00            .byte	0
04508 1035                        00            .byte	0
04509                                           ! 741  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04510 1036                        00            .byte	0
04511 1037                        FF            .byte	$FF
04512 1038                        FF            .byte	$FF
04513 1039                        7E            .byte	$7E
04514 103A                        3C            .byte	$3C
04515 103B                        18            .byte	$18
04516 103C                        00            .byte	0
04517 103D                        00            .byte	0
04518                                           ! 742  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04519 103E                        00            .byte	0
04520 103F                        00            .byte	0
04521 1040                        00            .byte	0
04522 1041                        00            .byte	0
04523 1042                        00            .byte	0
04524 1043                        00            .byte	0
04525 1044                        00            .byte	0
04526 1045                        00            .byte	0
04527                                           ! 743  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04528 1046                        30            .byte	$30
04529 1047                        78            .byte	$78
04530 1048                        78            .byte	$78
04531 1049                        30            .byte	$30
04532 104A                        30            .byte	$30
04533 104B                        00            .byte	0
04534 104C                        30            .byte	$30
04535 104D                        00            .byte	0
04536                                           ! 744  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04537 104E                        6C            .byte	$6C
04538 104F                        6C            .byte	$6C
04539 1050                        6C            .byte	$6C
04540 1051                        00            .byte	0
04541 1052                        00            .byte	0
04542 1053                        00            .byte	0
04543 1054                        00            .byte	0
04544 1055                        00            .byte	0
04545                                           ! 745  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04546 1056                        6C            .byte	$6C
04547 1057                        6C            .byte	$6C
04548 1058                        FE            .byte	$FE
04549 1059                        6C            .byte	$6C
04550 105A                        FE            .byte	$FE
04551 105B                        6C            .byte	$6C
04552 105C                        6C            .byte	$6C
04553 105D                        00            .byte	0
04554                                           ! 746  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04555 105E                        30            .byte	$30
04556 105F                        7C            .byte	$7C
04557 1060                        C0            .byte	$C0
04558 1061                        78            .byte	$78
04559 1062                        0C            .byte	$C
04560 1063                        F8            .byte	$F8
04561 1064                        30            .byte	$30
04562 1065                        00            .byte	0
04563                                           ! 747  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04564 1066                        00            .byte	0
04565 1067                        C6            .byte	$C6
04566 1068                        CC            .byte	$CC
04567 1069                        18            .byte	$18
04568 106A                        30            .byte	$30
04569 106B                        66            .byte	$66
04570 106C                        C6            .byte	$C6
04571 106D                        00            .byte	0
04572                                           ! 748  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04573 106E                        38            .byte	$38
04574 106F                        6C            .byte	$6C
04575 1070                        38            .byte	$38
04576 1071                        76            .byte	$76
04577 1072                        DC            .byte	$DC
04578 1073                        CC            .byte	$CC
04579 1074                        76            .byte	$76
04580 1075                        00            .byte	0
04581                                           ! 749  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04582 1076                        60            .byte	$60
04583 1077                        60            .byte	$60
04584 1078                        C0            .byte	$C0
04585 1079                        00            .byte	0
04586 107A                        00            .byte	0
04587 107B                        00            .byte	0
04588 107C                        00            .byte	0
04589 107D                        00            .byte	0
04590                                           ! 750  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04591 107E                        18            .byte	$18
04592 107F                        30            .byte	$30
04593 1080                        60            .byte	$60
04594 1081                        60            .byte	$60
04595 1082                        60            .byte	$60
04596 1083                        30            .byte	$30
04597 1084                        18            .byte	$18
04598 1085                        00            .byte	0
04599                                           ! 751  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04600 1086                        60            .byte	$60
04601 1087                        30            .byte	$30
04602 1088                        18            .byte	$18
04603 1089                        18            .byte	$18
04604 108A                        18            .byte	$18
04605 108B                        30            .byte	$30
04606 108C                        60            .byte	$60
04607 108D                        00            .byte	0
04608                                           ! 752  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04609 108E                        00            .byte	0
04610 108F                        66            .byte	$66
04611 1090                        3C            .byte	$3C
04612 1091                        FF            .byte	$FF
04613 1092                        3C            .byte	$3C
04614 1093                        66            .byte	$66
04615 1094                        00            .byte	0
04616 1095                        00            .byte	0
04617                                           ! 753  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04618 1096                        00            .byte	0
04619 1097                        30            .byte	$30
04620 1098                        30            .byte	$30
04621 1099                        FC            .byte	$FC
04622 109A                        30            .byte	$30
04623 109B                        30            .byte	$30
04624 109C                        00            .byte	0
04625 109D                        00            .byte	0
04626                                           ! 754  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04627 109E                        00            .byte	0
04628 109F                        00            .byte	0
04629 10A0                        00            .byte	0
04630 10A1                        00            .byte	0
04631 10A2                        00            .byte	0
04632 10A3                        30            .byte	$30
04633 10A4                        30            .byte	$30
04634 10A5                        60            .byte	$60
04635                                           ! 755  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04636 10A6                        00            .byte	0
04637 10A7                        00            .byte	0
04638 10A8                        00            .byte	0
04639 10A9                        FC            .byte	$FC
04640 10AA                        00            .byte	0
04641 10AB                        00            .byte	0
04642 10AC                        00            .byte	0
04643 10AD                        00            .byte	0
04644                                           ! 756  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04645 10AE                        00            .byte	0
04646 10AF                        00            .byte	0
04647 10B0                        00            .byte	0
04648 10B1                        00            .byte	0
04649 10B2                        00            .byte	0
04650 10B3                        30            .byte	$30
04651 10B4                        30            .byte	$30
04652 10B5                        00            .byte	0
04653                                           ! 757  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04654 10B6                        06            .byte	6
04655 10B7                        0C            .byte	$C
04656 10B8                        18            .byte	$18
04657 10B9                        30            .byte	$30
04658 10BA                        60            .byte	$60
04659 10BB                        C0            .byte	$C0
04660 10BC                        80            .byte	$80
04661 10BD                        00            .byte	0
04662                                           ! 758  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04663 10BE                        7C            .byte	$7C
04664 10BF                        C6            .byte	$C6
04665 10C0                        CE            .byte	$CE
04666 10C1                        DE            .byte	$DE
04667 10C2                        F6            .byte	$F6
04668 10C3                        E6            .byte	$E6
04669 10C4                        7C            .byte	$7C
04670 10C5                        00            .byte	0
04671                                           ! 759  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04672 10C6                        30            .byte	$30
04673 10C7                        70            .byte	$70
04674 10C8                        30            .byte	$30
04675 10C9                        30            .byte	$30
04676 10CA                        30            .byte	$30
04677 10CB                        30            .byte	$30
04678 10CC                        FC            .byte	$FC
04679 10CD                        00            .byte	0
04680                                           ! 760  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04681 10CE                        78            .byte	$78
04682 10CF                        CC            .byte	$CC
04683 10D0                        0C            .byte	$C
04684 10D1                        38            .byte	$38
04685 10D2                        60            .byte	$60
04686 10D3                        CC            .byte	$CC
04687 10D4                        FC            .byte	$FC
04688 10D5                        00            .byte	0
04689                                           ! 761  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04690 10D6                        78            .byte	$78
04691 10D7                        CC            .byte	$CC
04692 10D8                        0C            .byte	$C
04693 10D9                        38            .byte	$38
04694 10DA                        0C            .byte	$C
04695 10DB                        CC            .byte	$CC
04696 10DC                        78            .byte	$78
04697 10DD                        00            .byte	0
04698                                           ! 762  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04699 10DE                        1C            .byte	$1C
04700 10DF                        3C            .byte	$3C
04701 10E0                        6C            .byte	$6C
04702 10E1                        CC            .byte	$CC
04703 10E2                        FE            .byte	$FE
04704 10E3                        0C            .byte	$C
04705 10E4                        1E            .byte	$1E
04706 10E5                        00            .byte	0
04707                                           ! 763  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04708 10E6                        FC            .byte	$FC
04709 10E7                        C0            .byte	$C0
04710 10E8                        F8            .byte	$F8
04711 10E9                        0C            .byte	$C
04712 10EA                        0C            .byte	$C
04713 10EB                        CC            .byte	$CC
04714 10EC                        78            .byte	$78
04715 10ED                        00            .byte	0
04716                                           ! 764  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x7
04717 10EE                        38            .byte	$38
04718 10EF                        60            .byte	$60
04719 10F0                        C0            .byte	$C0
04720 10F1                        F8            .byte	$F8
04721 10F2                        CC            .byte	$CC
04722 10F3                        CC            .byte	$CC
04723                                           ! 764 8, 0x00,
04724 10F4                        78            .byte	$78
04725 10F5                        00            .byte	0
04726                                           ! 765  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
04727 10F6                        FC            .byte	$FC
04728 10F7                        CC            .byte	$CC
04729 10F8                        0C            .byte	$C
04730 10F9                        18            .byte	$18
04731 10FA                        30            .byte	$30
04732 10FB                        30            .byte	$30
04733 10FC                        30            .byte	$30
04734 10FD                        00            .byte	0
04735                                           ! 766  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
04736 10FE                        78            .byte	$78
04737 10FF                        CC            .byte	$CC
04738 1100                        CC            .byte	$CC
04739 1101                        78            .byte	$78
04740 1102                        CC            .byte	$CC
04741 1103                        CC            .byte	$CC
04742 1104                        78            .byte	$78
04743 1105                        00            .byte	0
04744                                           ! 767  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
04745 1106                        78            .byte	$78
04746 1107                        CC            .byte	$CC
04747 1108                        CC            .byte	$CC
04748 1109                        7C            .byte	$7C
04749 110A                        0C            .byte	$C
04750 110B                        18            .byte	$18
04751 110C                        70            .byte	$70
04752 110D                        00            .byte	0
04753                                           ! 768  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
04754 110E                        00            .byte	0
04755 110F                        30            .byte	$30
04756 1110                        30            .byte	$30
04757 1111                        00            .byte	0
04758 1112                        00            .byte	0
04759 1113                        30            .byte	$30
04760 1114                        30            .byte	$30
04761 1115                        00            .byte	0
04762                                           ! 769  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
04763 1116                        00            .byte	0
04764 1117                        30            .byte	$30
04765 1118                        30            .byte	$30
04766 1119                        00            .byte	0
04767 111A                        00            .byte	0
04768 111B                        30            .byte	$30
04769 111C                        30            .byte	$30
04770 111D                        60            .byte	$60
04771                                           ! 770  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
04772 111E                        18            .byte	$18
04773 111F                        30            .byte	$30
04774 1120                        60            .byte	$60
04775 1121                        C0            .byte	$C0
04776 1122                        60            .byte	$60
04777 1123                        30            .byte	$30
04778 1124                        18            .byte	$18
04779 1125                        00            .byte	0
04780                                           ! 771  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
04781 1126                        00            .byte	0
04782 1127                        00            .byte	0
04783 1128                        FC            .byte	$FC
04784 1129                        00            .byte	0
04785 112A                        00            .byte	0
04786 112B                        FC            .byte	$FC
04787 112C                        00            .byte	0
04788 112D                        00            .byte	0
04789                                           ! 772  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
04790 112E                        60            .byte	$60
04791 112F                        30            .byte	$30
04792 1130                        18            .byte	$18
04793 1131                        0C            .byte	$C
04794 1132                        18            .byte	$18
04795 1133                        30            .byte	$30
04796 1134                        60            .byte	$60
04797 1135                        00            .byte	0
04798                                           ! 773  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
04799 1136                        78            .byte	$78
04800 1137                        CC            .byte	$CC
04801 1138                        0C            .byte	$C
04802 1139                        18            .byte	$18
04803 113A                        30            .byte	$30
04804 113B                        00            .byte	0
04805 113C                        30            .byte	$30
04806 113D                        00            .byte	0
04807                                           ! 774  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
04808 113E                        7C            .byte	$7C
04809 113F                        C6            .byte	$C6
04810 1140                        DE            .byte	$DE
04811 1141                        DE            .byte	$DE
04812 1142                        DE            .byte	$DE
04813 1143                        C0            .byte	$C0
04814 1144                        78            .byte	$78
04815 1145                        00            .byte	0
04816                                           ! 775  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
04817 1146                        30            .byte	$30
04818 1147                        78            .byte	$78
04819 1148                        CC            .byte	$CC
04820 1149                        CC            .byte	$CC
04821 114A                        FC            .byte	$FC
04822 114B                        CC            .byte	$CC
04823 114C                        CC            .byte	$CC
04824 114D                        00            .byte	0
04825                                           ! 776  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
04826 114E                        FC            .byte	$FC
04827 114F                        66            .byte	$66
04828 1150                        66            .byte	$66
04829 1151                        7C            .byte	$7C
04830 1152                        66            .byte	$66
04831 1153                        66            .byte	$66
04832 1154                        FC            .byte	$FC
04833 1155                        00            .byte	0
04834                                           ! 777  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
04835 1156                        3C            .byte	$3C
04836 1157                        66            .byte	$66
04837 1158                        C0            .byte	$C0
04838 1159                        C0            .byte	$C0
04839 115A                        C0            .byte	$C0
04840 115B                        66            .byte	$66
04841 115C                        3C            .byte	$3C
04842 115D                        00            .byte	0
04843                                           ! 778  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
04844 115E                        F8            .byte	$F8
04845 115F                        6C            .byte	$6C
04846 1160                        66            .byte	$66
04847 1161                        66            .byte	$66
04848 1162                        66            .byte	$66
04849 1163                        6C            .byte	$6C
04850 1164                        F8            .byte	$F8
04851 1165                        00            .byte	0
04852                                           ! 779  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
04853 1166                        FE            .byte	$FE
04854 1167                        62            .byte	$62
04855 1168                        68            .byte	$68
04856 1169                        78            .byte	$78
04857 116A                        68            .byte	$68
04858 116B                        62            .byte	$62
04859 116C                        FE            .byte	$FE
04860 116D                        00            .byte	0
04861                                           ! 780  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
04862 116E                        FE            .byte	$FE
04863 116F                        62            .byte	$62
04864 1170                        68            .byte	$68
04865 1171                        78            .byte	$78
04866 1172                        68            .byte	$68
04867 1173                        60            .byte	$60
04868 1174                        F0            .byte	$F0
04869 1175                        00            .byte	0
04870                                           ! 781  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
04871 1176                        3C            .byte	$3C
04872 1177                        66            .byte	$66
04873 1178                        C0            .byte	$C0
04874 1179                        C0            .byte	$C0
04875 117A                        CE            .byte	$CE
04876 117B                        66            .byte	$66
04877 117C                        3E            .byte	$3E
04878 117D                        00            .byte	0
04879                                           ! 782  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
04880 117E                        CC            .byte	$CC
04881 117F                        CC            .byte	$CC
04882 1180                        CC            .byte	$CC
04883 1181                        FC            .byte	$FC
04884 1182                        CC            .byte	$CC
04885 1183                        CC            .byte	$CC
04886 1184                        CC            .byte	$CC
04887 1185                        00            .byte	0
04888                                           ! 783  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04889 1186                        78            .byte	$78
04890 1187                        30            .byte	$30
04891 1188                        30            .byte	$30
04892 1189                        30            .byte	$30
04893 118A                        30            .byte	$30
04894 118B                        30            .byte	$30
04895 118C                        78            .byte	$78
04896 118D                        00            .byte	0
04897                                           ! 784  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
04898 118E                        1E            .byte	$1E
04899 118F                        0C            .byte	$C
04900 1190                        0C            .byte	$C
04901 1191                        0C            .byte	$C
04902 1192                        CC            .byte	$CC
04903 1193                        CC            .byte	$CC
04904 1194                        78            .byte	$78
04905 1195                        00            .byte	0
04906                                           ! 785  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
04907 1196                        E6            .byte	$E6
04908 1197                        66            .byte	$66
04909 1198                        6C            .byte	$6C
04910 1199                        78            .byte	$78
04911 119A                        6C            .byte	$6C
04912 119B                        66            .byte	$66
04913 119C                        E6            .byte	$E6
04914 119D                        00            .byte	0
04915                                           ! 786  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
04916 119E                        F0            .byte	$F0
04917 119F                        60            .byte	$60
04918 11A0                        60            .byte	$60
04919 11A1                        60            .byte	$60
04920 11A2                        62            .byte	$62
04921 11A3                        66            .byte	$66
04922 11A4                        FE            .byte	$FE
04923 11A5                        00            .byte	0
04924                                           ! 787  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
04925 11A6                        C6            .byte	$C6
04926 11A7                        EE            .byte	$EE
04927 11A8                        FE            .byte	$FE
04928 11A9                        FE            .byte	$FE
04929 11AA                        D6            .byte	$D6
04930 11AB                        C6            .byte	$C6
04931 11AC                        C6            .byte	$C6
04932 11AD                        00            .byte	0
04933                                           ! 788  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
04934 11AE                        C6            .byte	$C6
04935 11AF                        E6            .byte	$E6
04936 11B0                        F6            .byte	$F6
04937 11B1                        DE            .byte	$DE
04938 11B2                        CE            .byte	$CE
04939 11B3                        C6            .byte	$C6
04940 11B4                        C6            .byte	$C6
04941 11B5                        00            .byte	0
04942                                           ! 789  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
04943 11B6                        38            .byte	$38
04944 11B7                        6C            .byte	$6C
04945 11B8                        C6            .byte	$C6
04946 11B9                        C6            .byte	$C6
04947 11BA                        C6            .byte	$C6
04948 11BB                        6C            .byte	$6C
04949 11BC                        38            .byte	$38
04950 11BD                        00            .byte	0
04951                                           ! 790  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
04952 11BE                        FC            .byte	$FC
04953 11BF                        66            .byte	$66
04954 11C0                        66            .byte	$66
04955 11C1                        7C            .byte	$7C
04956 11C2                        60            .byte	$60
04957 11C3                        60            .byte	$60
04958 11C4                        F0            .byte	$F0
04959 11C5                        00            .byte	0
04960                                           ! 791  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
04961 11C6                        78            .byte	$78
04962 11C7                        CC            .byte	$CC
04963 11C8                        CC            .byte	$CC
04964 11C9                        CC            .byte	$CC
04965 11CA                        DC            .byte	$DC
04966 11CB                        78            .byte	$78
04967 11CC                        1C            .byte	$1C
04968 11CD                        00            .byte	0
04969                                           ! 792  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
04970 11CE                        FC            .byte	$FC
04971 11CF                        66            .byte	$66
04972 11D0                        66            .byte	$66
04973 11D1                        7C            .byte	$7C
04974 11D2                        6C            .byte	$6C
04975 11D3                        66            .byte	$66
04976 11D4                        E6            .byte	$E6
04977 11D5                        00            .byte	0
04978                                           ! 793  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
04979 11D6                        78            .byte	$78
04980 11D7                        CC            .byte	$CC
04981 11D8                        E0            .byte	$E0
04982 11D9                        70            .byte	$70
04983 11DA                        1C            .byte	$1C
04984 11DB                        CC            .byte	$CC
04985 11DC                        78            .byte	$78
04986 11DD                        00            .byte	0
04987                                           ! 794  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04988 11DE                        FC            .byte	$FC
04989 11DF                        B4            .byte	$B4
04990 11E0                        30            .byte	$30
04991 11E1                        30            .byte	$30
04992 11E2                        30            .byte	$30
04993 11E3                        30            .byte	$30
04994 11E4                        78            .byte	$78
04995 11E5                        00            .byte	0
04996                                           ! 795  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
04997 11E6                        CC            .byte	$CC
04998 11E7                        CC            .byte	$CC
04999 11E8                        CC            .byte	$CC
05000 11E9                        CC            .byte	$CC
05001 11EA                        CC            .byte	$CC
05002 11EB                        CC            .byte	$CC
05003 11EC                        FC            .byte	$FC
05004 11ED                        00            .byte	0
05005                                           ! 796  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05006 11EE                        CC            .byte	$CC
05007 11EF                        CC            .byte	$CC
05008 11F0                        CC            .byte	$CC
05009 11F1                        CC            .byte	$CC
05010 11F2                        CC            .byte	$CC
05011 11F3                        78            .byte	$78
05012 11F4                        30            .byte	$30
05013 11F5                        00            .byte	0
05014                                           ! 797  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05015 11F6                        C6            .byte	$C6
05016 11F7                        C6            .byte	$C6
05017 11F8                        C6            .byte	$C6
05018 11F9                        D6            .byte	$D6
05019 11FA                        FE            .byte	$FE
05020 11FB                        EE            .byte	$EE
05021 11FC                        C6            .byte	$C6
05022 11FD                        00            .byte	0
05023                                           ! 798  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05024 11FE                        C6            .byte	$C6
05025 11FF                        C6            .byte	$C6
05026 1200                        6C            .byte	$6C
05027 1201                        38            .byte	$38
05028 1202                        38            .byte	$38
05029 1203                        6C            .byte	$6C
05030 1204                        C6            .byte	$C6
05031 1205                        00            .byte	0
05032                                           ! 799  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05033 1206                        CC            .byte	$CC
05034 1207                        CC            .byte	$CC
05035 1208                        CC            .byte	$CC
05036 1209                        78            .byte	$78
05037 120A                        30            .byte	$30
05038 120B                        30            .byte	$30
05039 120C                        78            .byte	$78
05040 120D                        00            .byte	0
05041                                           ! 800  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05042 120E                        FE            .byte	$FE
05043 120F                        C6            .byte	$C6
05044 1210                        8C            .byte	$8C
05045 1211                        18            .byte	$18
05046 1212                        32            .byte	$32
05047 1213                        66            .byte	$66
05048 1214                        FE            .byte	$FE
05049 1215                        00            .byte	0
05050                                           ! 801  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05051 1216                        78            .byte	$78
05052 1217                        60            .byte	$60
05053 1218                        60            .byte	$60
05054 1219                        60            .byte	$60
05055 121A                        60            .byte	$60
05056 121B                        60            .byte	$60
05057 121C                        78            .byte	$78
05058 121D                        00            .byte	0
05059                                           ! 802  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05060 121E                        C0            .byte	$C0
05061 121F                        60            .byte	$60
05062 1220                        30            .byte	$30
05063 1221                        18            .byte	$18
05064 1222                        0C            .byte	$C
05065 1223                        06            .byte	6
05066 1224                        02            .byte	2
05067 1225                        00            .byte	0
05068                                           ! 803  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05069 1226                        78            .byte	$78
05070 1227                        18            .byte	$18
05071 1228                        18            .byte	$18
05072 1229                        18            .byte	$18
05073 122A                        18            .byte	$18
05074 122B                        18            .byte	$18
05075 122C                        78            .byte	$78
05076 122D                        00            .byte	0
05077                                           ! 804  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05078 122E                        10            .byte	$10
05079 122F                        38            .byte	$38
05080 1230                        6C            .byte	$6C
05081 1231                        C6            .byte	$C6
05082 1232                        00            .byte	0
05083 1233                        00            .byte	0
05084 1234                        00            .byte	0
05085 1235                        00            .byte	0
05086                                           ! 805  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05087 1236                        00            .byte	0
05088 1237                        00            .byte	0
05089 1238                        00            .byte	0
05090 1239                        00            .byte	0
05091 123A                        00            .byte	0
05092 123B                        00            .byte	0
05093 123C                        00            .byte	0
05094 123D                        FF            .byte	$FF
05095                                           ! 806  0x30, 0x30, 0x18, 0x00, 0x00,
05096 123E                        30            .byte	$30
05097 123F                        30            .byte	$30
05098 1240                        18            .byte	$18
05099 1241                        00            .byte	0
05100                                           ! 806  0x00, 0x00, 0x00,
05101 1242                        00            .byte	0
05102 1243                        00            .byte	0
05103 1244                        00            .byte	0
05104 1245                        00            .byte	0
05105                                           ! 807  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05106 1246                        00            .byte	0
05107 1247                        00            .byte	0
05108 1248                        78            .byte	$78
05109 1249                        0C            .byte	$C
05110 124A                        7C            .byte	$7C
05111 124B                        CC            .byte	$CC
05112 124C                        76            .byte	$76
05113 124D                        00            .byte	0
05114                                           ! 808  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05115 124E                        E0            .byte	$E0
05116 124F                        60            .byte	$60
05117 1250                        60            .byte	$60
05118 1251                        7C            .byte	$7C
05119 1252                        66            .byte	$66
05120 1253                        66            .byte	$66
05121 1254                        DC            .byte	$DC
05122 1255                        00            .byte	0
05123                                           ! 809  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05124 1256                        00            .byte	0
05125 1257                        00            .byte	0
05126 1258                        78            .byte	$78
05127 1259                        CC            .byte	$CC
05128 125A                        C0            .byte	$C0
05129 125B                        CC            .byte	$CC
05130 125C                        78            .byte	$78
05131 125D                        00            .byte	0
05132                                           ! 810  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05133 125E                        1C            .byte	$1C
05134 125F                        0C            .byte	$C
05135 1260                        0C            .byte	$C
05136 1261                        7C            .byte	$7C
05137 1262                        CC            .byte	$CC
05138 1263                        CC            .byte	$CC
05139 1264                        76            .byte	$76
05140 1265                        00            .byte	0
05141                                           ! 811  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05142 1266                        00            .byte	0
05143 1267                        00            .byte	0
05144 1268                        78            .byte	$78
05145 1269                        CC            .byte	$CC
05146 126A                        FC            .byte	$FC
05147 126B                        C0            .byte	$C0
05148 126C                        78            .byte	$78
05149 126D                        00            .byte	0
05150                                           ! 812  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05151 126E                        38            .byte	$38
05152 126F                        6C            .byte	$6C
05153 1270                        60            .byte	$60
05154 1271                        F0            .byte	$F0
05155 1272                        60            .byte	$60
05156 1273                        60            .byte	$60
05157 1274                        F0            .byte	$F0
05158 1275                        00            .byte	0
05159                                           ! 813  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05160 1276                        00            .byte	0
05161 1277                        00            .byte	0
05162 1278                        76            .byte	$76
05163 1279                        CC            .byte	$CC
05164 127A                        CC            .byte	$CC
05165 127B                        7C            .byte	$7C
05166 127C                        0C            .byte	$C
05167 127D                        F8            .byte	$F8
05168                                           ! 814  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05169 127E                        E0            .byte	$E0
05170 127F                        60            .byte	$60
05171 1280                        6C            .byte	$6C
05172 1281                        76            .byte	$76
05173 1282                        66            .byte	$66
05174 1283                        66            .byte	$66
05175 1284                        E6            .byte	$E6
05176 1285                        00            .byte	0
05177                                           ! 815  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05178 1286                        30            .byte	$30
05179 1287                        00            .byte	0
05180 1288                        70            .byte	$70
05181 1289                        30            .byte	$30
05182 128A                        30            .byte	$30
05183 128B                        30            .byte	$30
05184 128C                        78            .byte	$78
05185 128D                        00            .byte	0
05186                                           ! 816  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05187 128E                        0C            .byte	$C
05188 128F                        00            .byte	0
05189 1290                        0C            .byte	$C
05190 1291                        0C            .byte	$C
05191 1292                        0C            .byte	$C
05192 1293                        CC            .byte	$CC
05193 1294                        CC            .byte	$CC
05194 1295                        78            .byte	$78
05195                                           ! 817  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05196 1296                        E0            .byte	$E0
05197 1297                        60            .byte	$60
05198 1298                        66            .byte	$66
05199 1299                        6C            .byte	$6C
05200 129A                        78            .byte	$78
05201 129B                        6C            .byte	$6C
05202 129C                        E6            .byte	$E6
05203 129D                        00            .byte	0
05204                                           ! 818  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05205 129E                        70            .byte	$70
05206 129F                        30            .byte	$30
05207 12A0                        30            .byte	$30
05208 12A1                        30            .byte	$30
05209 12A2                        30            .byte	$30
05210 12A3                        30            .byte	$30
05211 12A4                        78            .byte	$78
05212 12A5                        00            .byte	0
05213                                           ! 819  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05214 12A6                        00            .byte	0
05215 12A7                        00            .byte	0
05216 12A8                        CC            .byte	$CC
05217 12A9                        FE            .byte	$FE
05218 12AA                        FE            .byte	$FE
05219 12AB                        D6            .byte	$D6
05220 12AC                        C6            .byte	$C6
05221 12AD                        00            .byte	0
05222                                           ! 820  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05223 12AE                        00            .byte	0
05224 12AF                        00            .byte	0
05225 12B0                        F8            .byte	$F8
05226 12B1                        CC            .byte	$CC
05227 12B2                        CC            .byte	$CC
05228 12B3                        CC            .byte	$CC
05229 12B4                        CC            .byte	$CC
05230 12B5                        00            .byte	0
05231                                           ! 821  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05232 12B6                        00            .byte	0
05233 12B7                        00            .byte	0
05234 12B8                        78            .byte	$78
05235 12B9                        CC            .byte	$CC
05236 12BA                        CC            .byte	$CC
05237 12BB                        CC            .byte	$CC
05238 12BC                        78            .byte	$78
05239 12BD                        00            .byte	0
05240                                           ! 822  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05241 12BE                        00            .byte	0
05242 12BF                        00            .byte	0
05243 12C0                        DC            .byte	$DC
05244 12C1                        66            .byte	$66
05245 12C2                        66            .byte	$66
05246 12C3                        7C            .byte	$7C
05247 12C4                        60            .byte	$60
05248 12C5                        F0            .byte	$F0
05249                                           ! 823  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05250 12C6                        00            .byte	0
05251 12C7                        00            .byte	0
05252 12C8                        76            .byte	$76
05253 12C9                        CC            .byte	$CC
05254 12CA                        CC            .byte	$CC
05255 12CB                        7C            .byte	$7C
05256 12CC                        0C            .byte	$C
05257 12CD                        1E            .byte	$1E
05258                                           ! 824  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05259 12CE                        00            .byte	0
05260 12CF                        00            .byte	0
05261 12D0                        DC            .byte	$DC
05262 12D1                        76            .byte	$76
05263 12D2                        66            .byte	$66
05264 12D3                        60            .byte	$60
05265 12D4                        F0            .byte	$F0
05266 12D5                        00            .byte	0
05267                                           ! 825  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05268 12D6                        00            .byte	0
05269 12D7                        00            .byte	0
05270 12D8                        7C            .byte	$7C
05271 12D9                        C0            .byte	$C0
05272 12DA                        78            .byte	$78
05273 12DB                        0C            .byte	$C
05274 12DC                        F8            .byte	$F8
05275 12DD                        00            .byte	0
05276                                           ! 826  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05277 12DE                        10            .byte	$10
05278 12DF                        30            .byte	$30
05279 12E0                        7C            .byte	$7C
05280 12E1                        30            .byte	$30
05281 12E2                        30            .byte	$30
05282 12E3                        34            .byte	$34
05283 12E4                        18            .byte	$18
05284 12E5                        00            .byte	0
05285                                           ! 827  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05286 12E6                        00            .byte	0
05287 12E7                        00            .byte	0
05288 12E8                        CC            .byte	$CC
05289 12E9                        CC            .byte	$CC
05290 12EA                        CC            .byte	$CC
05291 12EB                        CC            .byte	$CC
05292 12EC                        76            .byte	$76
05293 12ED                        00            .byte	0
05294                                           ! 828  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05295 12EE                        00            .byte	0
05296 12EF                        00            .byte	0
05297 12F0                        CC            .byte	$CC
05298 12F1                        CC            .byte	$CC
05299 12F2                        CC            .byte	$CC
05300 12F3                        78            .byte	$78
05301 12F4                        30            .byte	$30
05302 12F5                        00            .byte	0
05303                                           ! 829  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05304 12F6                        00            .byte	0
05305 12F7                        00            .byte	0
05306 12F8                        C6            .byte	$C6
05307 12F9                        D6            .byte	$D6
05308 12FA                        FE            .byte	$FE
05309 12FB                        FE            .byte	$FE
05310 12FC                        6C            .byte	$6C
05311 12FD                        00            .byte	0
05312                                           ! 830  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05313 12FE                        00            .byte	0
05314 12FF                        00            .byte	0
05315 1300                        C6            .byte	$C6
05316 1301                        6C            .byte	$6C
05317 1302                        38            .byte	$38
05318 1303                        6C            .byte	$6C
05319 1304                        C6            .byte	$C6
05320 1305                        00            .byte	0
05321                                           ! 831  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05322 1306                        00            .byte	0
05323 1307                        00            .byte	0
05324 1308                        CC            .byte	$CC
05325 1309                        CC            .byte	$CC
05326 130A                        CC            .byte	$CC
05327 130B                        7C            .byte	$7C
05328 130C                        0C            .byte	$C
05329 130D                        F8            .byte	$F8
05330                                           ! 832  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05331 130E                        00            .byte	0
05332 130F                        00            .byte	0
05333 1310                        FC            .byte	$FC
05334 1311                        98            .byte	$98
05335 1312                        30            .byte	$30
05336 1313                        64            .byte	$64
05337 1314                        FC            .byte	$FC
05338 1315                        00            .byte	0
05339                                           ! 833  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05340 1316                        1C            .byte	$1C
05341 1317                        30            .byte	$30
05342 1318                        30            .byte	$30
05343 1319                        E0            .byte	$E0
05344 131A                        30            .byte	$30
05345 131B                        30            .byte	$30
05346 131C                        1C            .byte	$1C
05347 131D                        00            .byte	0
05348                                           ! 834  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05349 131E                        18            .byte	$18
05350 131F                        18            .byte	$18
05351 1320                        18            .byte	$18
05352 1321                        00            .byte	0
05353 1322                        18            .byte	$18
05354 1323                        18            .byte	$18
05355 1324                        18            .byte	$18
05356 1325                        00            .byte	0
05357                                           ! 835  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05358 1326                        E0            .byte	$E0
05359 1327                        30            .byte	$30
05360 1328                        30            .byte	$30
05361 1329                        1C            .byte	$1C
05362 132A                        30            .byte	$30
05363 132B                        30            .byte	$30
05364 132C                        E0            .byte	$E0
05365 132D                        00            .byte	0
05366                                           ! 836  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05367 132E                        76            .byte	$76
05368 132F                        DC            .byte	$DC
05369 1330                        00            .byte	0
05370 1331                        00            .byte	0
05371 1332                        00            .byte	0
05372 1333                        00            .byte	0
05373 1334                        00            .byte	0
05374 1335                        00            .byte	0
05375                                           ! 837  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05376 1336                        00            .byte	0
05377 1337                        10            .byte	$10
05378 1338                        38            .byte	$38
05379 1339                        6C            .byte	$6C
05380 133A                        C6            .byte	$C6
05381 133B                        C6            .byte	$C6
05382 133C                        FE            .byte	$FE
05383 133D                        00            .byte	0
05384                                           ! 838  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05385 133E                        78            .byte	$78
05386 133F                        CC            .byte	$CC
05387 1340                        C0            .byte	$C0
05388 1341                        CC            .byte	$CC
05389 1342                        78            .byte	$78
05390 1343                        18            .byte	$18
05391 1344                        0C            .byte	$C
05392 1345                        78            .byte	$78
05393                                           ! 839  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05394 1346                        00            .byte	0
05395 1347                        CC            .byte	$CC
05396 1348                        00            .byte	0
05397 1349                        CC            .byte	$CC
05398 134A                        CC            .byte	$CC
05399 134B                        CC            .byte	$CC
05400 134C                        7E            .byte	$7E
05401 134D                        00            .byte	0
05402                                           ! 840  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05403 134E                        1C            .byte	$1C
05404 134F                        00            .byte	0
05405 1350                        78            .byte	$78
05406 1351                        CC            .byte	$CC
05407 1352                        FC            .byte	$FC
05408 1353                        C0            .byte	$C0
05409 1354                        78            .byte	$78
05410 1355                        00            .byte	0
05411                                           ! 841  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05412 1356                        7E            .byte	$7E
05413 1357                        C3            .byte	$C3
05414 1358                        3C            .byte	$3C
05415 1359                        06            .byte	6
05416 135A                        3E            .byte	$3E
05417 135B                        66            .byte	$66
05418 135C                        3F            .byte	$3F
05419 135D                        00            .byte	0
05420                                           ! 842  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05421 135E                        CC            .byte	$CC
05422 135F                        00            .byte	0
05423 1360                        78            .byte	$78
05424 1361                        0C            .byte	$C
05425 1362                        7C            .byte	$7C
05426 1363                        CC            .byte	$CC
05427 1364                        7E            .byte	$7E
05428 1365                        00            .byte	0
05429                                           ! 843  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05430 1366                        E0            .byte	$E0
05431 1367                        00            .byte	0
05432 1368                        78            .byte	$78
05433 1369                        0C            .byte	$C
05434 136A                        7C            .byte	$7C
05435 136B                        CC            .byte	$CC
05436 136C                        7E            .byte	$7E
05437 136D                        00            .byte	0
05438                                           ! 844  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05439 136E                        30            .byte	$30
05440 136F                        30            .byte	$30
05441 1370                        78            .byte	$78
05442 1371                        0C            .byte	$C
05443 1372                        7C            .byte	$7C
05444 1373                        CC            .byte	$CC
05445 1374                        7E            .byte	$7E
05446 1375                        00            .byte	0
05447                                           ! 845  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05448 1376                        00            .byte	0
05449 1377                        00            .byte	0
05450 1378                        78            .byte	$78
05451 1379                        C0            .byte	$C0
05452 137A                        C0            .byte	$C0
05453 137B                        78            .byte	$78
05454 137C                        0C            .byte	$C
05455 137D                        38            .byte	$38
05456                                           ! 846  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05457 137E                        7E            .byte	$7E
05458 137F                        C3            .byte	$C3
05459 1380                        3C            .byte	$3C
05460 1381                        66            .byte	$66
05461 1382                        7E            .byte	$7E
05462 1383                        60            .byte	$60
05463 1384                        3C            .byte	$3C
05464 1385                        00            .byte	0
05465                                           ! 847  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05466 1386                        CC            .byte	$CC
05467 1387                        00            .byte	0
05468 1388                        78            .byte	$78
05469 1389                        CC            .byte	$CC
05470 138A                        FC            .byte	$FC
05471 138B                        C0            .byte	$C0
05472 138C                        78            .byte	$78
05473 138D                        00            .byte	0
05474                                           ! 848  0xe0, 0x00, 0x78, 0
05475 138E                        E0            .byte	$E0
05476 138F                        00            .byte	0
05477 1390                        78            .byte	$78
05478                                           ! 848 xcc, 0xfc, 0xc0, 0x78, 0x00,
05479 1391                        CC            .byte	$CC
05480 1392                        FC            .byte	$FC
05481 1393                        C0            .byte	$C0
05482 1394                        78            .byte	$78
05483 1395                        00            .byte	0
05484                                           ! 849  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05485 1396                        CC            .byte	$CC
05486 1397                        00            .byte	0
05487 1398                        70            .byte	$70
05488 1399                        30            .byte	$30
05489 139A                        30            .byte	$30
05490 139B                        30            .byte	$30
05491 139C                        78            .byte	$78
05492 139D                        00            .byte	0
05493                                           ! 850  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05494 139E                        7C            .byte	$7C
05495 139F                        C6            .byte	$C6
05496 13A0                        38            .byte	$38
05497 13A1                        18            .byte	$18
05498 13A2                        18            .byte	$18
05499 13A3                        18            .byte	$18
05500 13A4                        3C            .byte	$3C
05501 13A5                        00            .byte	0
05502                                           ! 851  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05503 13A6                        E0            .byte	$E0
05504 13A7                        00            .byte	0
05505 13A8                        70            .byte	$70
05506 13A9                        30            .byte	$30
05507 13AA                        30            .byte	$30
05508 13AB                        30            .byte	$30
05509 13AC                        78            .byte	$78
05510 13AD                        00            .byte	0
05511                                           ! 852  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05512 13AE                        C6            .byte	$C6
05513 13AF                        38            .byte	$38
05514 13B0                        6C            .byte	$6C
05515 13B1                        C6            .byte	$C6
05516 13B2                        FE            .byte	$FE
05517 13B3                        C6            .byte	$C6
05518 13B4                        C6            .byte	$C6
05519 13B5                        00            .byte	0
05520                                           ! 853  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05521 13B6                        30            .byte	$30
05522 13B7                        30            .byte	$30
05523 13B8                        00            .byte	0
05524 13B9                        78            .byte	$78
05525 13BA                        CC            .byte	$CC
05526 13BB                        FC            .byte	$FC
05527 13BC                        CC            .byte	$CC
05528 13BD                        00            .byte	0
05529                                           ! 854  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05530 13BE                        1C            .byte	$1C
05531 13BF                        00            .byte	0
05532 13C0                        FC            .byte	$FC
05533 13C1                        60            .byte	$60
05534 13C2                        78            .byte	$78
05535 13C3                        60            .byte	$60
05536 13C4                        FC            .byte	$FC
05537 13C5                        00            .byte	0
05538                                           ! 855  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05539 13C6                        00            .byte	0
05540 13C7                        00            .byte	0
05541 13C8                        7F            .byte	$7F
05542 13C9                        0C            .byte	$C
05543 13CA                        7F            .byte	$7F
05544 13CB                        CC            .byte	$CC
05545 13CC                        7F            .byte	$7F
05546 13CD                        00            .byte	0
05547                                           ! 856  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05548 13CE                        3E            .byte	$3E
05549 13CF                        6C            .byte	$6C
05550 13D0                        CC            .byte	$CC
05551 13D1                        FE            .byte	$FE
05552 13D2                        CC            .byte	$CC
05553 13D3                        CC            .byte	$CC
05554 13D4                        CE            .byte	$CE
05555 13D5                        00            .byte	0
05556                                           ! 857  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05557 13D6                        78            .byte	$78
05558 13D7                        CC            .byte	$CC
05559 13D8                        00            .byte	0
05560 13D9                        78            .byte	$78
05561 13DA                        CC            .byte	$CC
05562 13DB                        CC            .byte	$CC
05563 13DC                        78            .byte	$78
05564 13DD                        00            .byte	0
05565                                           ! 858  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05566 13DE                        00            .byte	0
05567 13DF                        CC            .byte	$CC
05568 13E0                        00            .byte	0
05569 13E1                        78            .byte	$78
05570 13E2                        CC            .byte	$CC
05571 13E3                        CC            .byte	$CC
05572 13E4                        78            .byte	$78
05573 13E5                        00            .byte	0
05574                                           ! 859  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05575 13E6                        00            .byte	0
05576 13E7                        E0            .byte	$E0
05577 13E8                        00            .byte	0
05578 13E9                        78            .byte	$78
05579 13EA                        CC            .byte	$CC
05580 13EB                        CC            .byte	$CC
05581 13EC                        78            .byte	$78
05582 13ED                        00            .byte	0
05583                                           ! 860  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05584 13EE                        78            .byte	$78
05585 13EF                        CC            .byte	$CC
05586 13F0                        00            .byte	0
05587 13F1                        CC            .byte	$CC
05588 13F2                        CC            .byte	$CC
05589 13F3                        CC            .byte	$CC
05590 13F4                        7E            .byte	$7E
05591 13F5                        00            .byte	0
05592                                           ! 861  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05593 13F6                        00            .byte	0
05594 13F7                        E0            .byte	$E0
05595 13F8                        00            .byte	0
05596 13F9                        CC            .byte	$CC
05597 13FA                        CC            .byte	$CC
05598 13FB                        CC            .byte	$CC
05599 13FC                        7E            .byte	$7E
05600 13FD                        00            .byte	0
05601                                           ! 862  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05602 13FE                        00            .byte	0
05603 13FF                        CC            .byte	$CC
05604 1400                        00            .byte	0
05605 1401                        CC            .byte	$CC
05606 1402                        CC            .byte	$CC
05607 1403                        7C            .byte	$7C
05608 1404                        0C            .byte	$C
05609 1405                        F8            .byte	$F8
05610                                           ! 863  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05611 1406                        C3            .byte	$C3
05612 1407                        18            .byte	$18
05613 1408                        3C            .byte	$3C
05614 1409                        66            .byte	$66
05615 140A                        66            .byte	$66
05616 140B                        3C            .byte	$3C
05617 140C                        18            .byte	$18
05618 140D                        00            .byte	0
05619                                           ! 864  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05620 140E                        CC            .byte	$CC
05621 140F                        00            .byte	0
05622 1410                        CC            .byte	$CC
05623 1411                        CC            .byte	$CC
05624 1412                        CC            .byte	$CC
05625 1413                        CC            .byte	$CC
05626 1414                        78            .byte	$78
05627 1415                        00            .byte	0
05628                                           ! 865  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05629 1416                        18            .byte	$18
05630 1417                        18            .byte	$18
05631 1418                        7E            .byte	$7E
05632 1419                        C0            .byte	$C0
05633 141A                        C0            .byte	$C0
05634 141B                        7E            .byte	$7E
05635 141C                        18            .byte	$18
05636 141D                        18            .byte	$18
05637                                           ! 866  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05638 141E                        38            .byte	$38
05639 141F                        6C            .byte	$6C
05640 1420                        64            .byte	$64
05641 1421                        F0            .byte	$F0
05642 1422                        60            .byte	$60
05643 1423                        E6            .byte	$E6
05644 1424                        FC            .byte	$FC
05645 1425                        00            .byte	0
05646                                           ! 867  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05647 1426                        CC            .byte	$CC
05648 1427                        CC            .byte	$CC
05649 1428                        78            .byte	$78
05650 1429                        FC            .byte	$FC
05651 142A                        30            .byte	$30
05652 142B                        FC            .byte	$FC
05653 142C                        30            .byte	$30
05654 142D                        30            .byte	$30
05655                                           ! 868  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05656 142E                        F8            .byte	$F8
05657 142F                        CC            .byte	$CC
05658 1430                        CC            .byte	$CC
05659 1431                        FA            .byte	$FA
05660 1432                        C6            .byte	$C6
05661 1433                        CF            .byte	$CF
05662 1434                        C6            .byte	$C6
05663 1435                        C7            .byte	$C7
05664                                           ! 869  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05665 1436                        0E            .byte	$E
05666 1437                        1B            .byte	$1B
05667 1438                        18            .byte	$18
05668 1439                        3C            .byte	$3C
05669 143A                        18            .byte	$18
05670 143B                        18            .byte	$18
05671 143C                        D8            .byte	$D8
05672 143D                        70            .byte	$70
05673                                           ! 870  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05674 143E                        1C            .byte	$1C
05675 143F                        00            .byte	0
05676 1440                        78            .byte	$78
05677 1441                        0C            .byte	$C
05678 1442                        7C            .byte	$7C
05679 1443                        CC            .byte	$CC
05680 1444                        7E            .byte	$7E
05681 1445                        00            .byte	0
05682                                           ! 871  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05683 1446                        38            .byte	$38
05684 1447                        00            .byte	0
05685 1448                        70            .byte	$70
05686 1449                        30            .byte	$30
05687 144A                        30            .byte	$30
05688 144B                        30            .byte	$30
05689 144C                        78            .byte	$78
05690 144D                        00            .byte	0
05691                                           ! 872  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05692 144E                        00            .byte	0
05693 144F                        1C            .byte	$1C
05694 1450                        00            .byte	0
05695 1451                        78            .byte	$78
05696 1452                        CC            .byte	$CC
05697 1453                        CC            .byte	$CC
05698 1454                        78            .byte	$78
05699 1455                        00            .byte	0
05700                                           ! 873  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05701 1456                        00            .byte	0
05702 1457                        1C            .byte	$1C
05703 1458                        00            .byte	0
05704 1459                        CC            .byte	$CC
05705 145A                        CC            .byte	$CC
05706 145B                        CC            .byte	$CC
05707 145C                        7E            .byte	$7E
05708 145D                        00            .byte	0
05709                                           ! 874  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05710 145E                        00            .byte	0
05711 145F                        F8            .byte	$F8
05712 1460                        00            .byte	0
05713 1461                        F8            .byte	$F8
05714 1462                        CC            .byte	$CC
05715 1463                        CC            .byte	$CC
05716 1464                        CC            .byte	$CC
05717 1465                        00            .byte	0
05718                                           ! 875  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05719 1466                        FC            .byte	$FC
05720 1467                        00            .byte	0
05721 1468                        CC            .byte	$CC
05722 1469                        EC            .byte	$EC
05723 146A                        FC            .byte	$FC
05724 146B                        DC            .byte	$DC
05725 146C                        CC            .byte	$CC
05726 146D                        00            .byte	0
05727                                           ! 876  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
05728 146E                        3C            .byte	$3C
05729 146F                        6C            .byte	$6C
05730 1470                        6C            .byte	$6C
05731 1471                        3E            .byte	$3E
05732 1472                        00            .byte	0
05733 1473                        7E            .byte	$7E
05734 1474                        00            .byte	0
05735 1475                        00            .byte	0
05736                                           ! 877  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
05737 1476                        38            .byte	$38
05738 1477                        6C            .byte	$6C
05739 1478                        6C            .byte	$6C
05740 1479                        38            .byte	$38
05741 147A                        00            .byte	0
05742 147B                        7C            .byte	$7C
05743 147C                        00            .byte	0
05744 147D                        00            .byte	0
05745                                           ! 878  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
05746 147E                        30            .byte	$30
05747 147F                        00            .byte	0
05748 1480                        30            .byte	$30
05749 1481                        60            .byte	$60
05750 1482                        C0            .byte	$C0
05751 1483                        CC            .byte	$CC
05752 1484                        78            .byte	$78
05753 1485                        00            .byte	0
05754                                           ! 879  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
05755 1486                        00            .byte	0
05756 1487                        00            .byte	0
05757 1488                        00            .byte	0
05758 1489                        FC            .byte	$FC
05759 148A                        C0            .byte	$C0
05760 148B                        C0            .byte	$C0
05761 148C                        00            .byte	0
05762 148D                        00            .byte	0
05763                                           ! 880  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
05764 148E                        00            .byte	0
05765 148F                        00            .byte	0
05766 1490                        00            .byte	0
05767 1491                        FC            .byte	$FC
05768 1492                        0C            .byte	$C
05769 1493                        0C            .byte	$C
05770 1494                        00            .byte	0
05771 1495                        00            .byte	0
05772                                           ! 881  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
05773 1496                        C3            .byte	$C3
05774 1497                        C6            .byte	$C6
05775 1498                        CC            .byte	$CC
05776 1499                        DE            .byte	$DE
05777 149A                        33            .byte	$33
05778 149B                        66            .byte	$66
05779 149C                        CC            .byte	$CC
05780 149D                        0F            .byte	$F
05781                                           ! 882  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
05782 149E                        C3            .byte	$C3
05783 149F                        C6            .byte	$C6
05784 14A0                        CC            .byte	$CC
05785 14A1                        DB            .byte	$DB
05786 14A2                        37            .byte	$37
05787 14A3                        6F            .byte	$6F
05788 14A4                        CF            .byte	$CF
05789 14A5                        03            .byte	3
05790                                           ! 883  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
05791 14A6                        18            .byte	$18
05792 14A7                        18            .byte	$18
05793 14A8                        00            .byte	0
05794 14A9                        18            .byte	$18
05795 14AA                        18            .byte	$18
05796 14AB                        18            .byte	$18
05797 14AC                        18            .byte	$18
05798 14AD                        00            .byte	0
05799                                           ! 884  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
05800 14AE                        00            .byte	0
05801 14AF                        33            .byte	$33
05802 14B0                        66            .byte	$66
05803 14B1                        CC            .byte	$CC
05804 14B2                        66            .byte	$66
05805 14B3                        33            .byte	$33
05806 14B4                        00            .byte	0
05807 14B5                        00            .byte	0
05808                                           ! 885  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
05809 14B6                        00            .byte	0
05810 14B7                        CC            .byte	$CC
05811 14B8                        66            .byte	$66
05812 14B9                        33            .byte	$33
05813 14BA                        66            .byte	$66
05814 14BB                        CC            .byte	$CC
05815 14BC                        00            .byte	0
05816 14BD                        00            .byte	0
05817                                           ! 886  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
05818 14BE                        22            .byte	$22
05819 14BF                        88            .byte	$88
05820 14C0                        22            .byte	$22
05821 14C1                        88            .byte	$88
05822 14C2                        22            .byte	$22
05823 14C3                        88            .byte	$88
05824 14C4                        22            .byte	$22
05825 14C5                        88            .byte	$88
05826                                           ! 887  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
05827 14C6                        55            .byte	$55
05828 14C7                        AA            .byte	$AA
05829 14C8                        55            .byte	$55
05830 14C9                        AA            .byte	$AA
05831 14CA                        55            .byte	$55
05832 14CB                        AA            .byte	$AA
05833 14CC                        55            .byte	$55
05834 14CD                        AA            .byte	$AA
05835                                           ! 888  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
05836 14CE                        DB            .byte	$DB
05837 14CF                        77            .byte	$77
05838 14D0                        DB            .byte	$DB
05839 14D1                        EE            .byte	$EE
05840 14D2                        DB            .byte	$DB
05841 14D3                        77            .byte	$77
05842 14D4                        DB            .byte	$DB
05843 14D5                        EE            .byte	$EE
05844                                           ! 889  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
05845 14D6                        18            .byte	$18
05846 14D7                        18            .byte	$18
05847 14D8                        18            .byte	$18
05848 14D9                        18            .byte	$18
05849 14DA                        18            .byte	$18
05850 14DB                        18            .byte	$18
05851 14DC                        18            .byte	$18
05852 14DD                        18            .byte	$18
05853                                           ! 890  0x18, 0x1
05854 14DE                        18            .byte	$18
05855                                           ! 890 8, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
05856 14DF                        18            .byte	$18
05857 14E0                        18            .byte	$18
05858 14E1                        18            .byte	$18
05859 14E2                        F8            .byte	$F8
05860 14E3                        18            .byte	$18
05861 14E4                        18            .byte	$18
05862 14E5                        18            .byte	$18
05863                                           ! 891  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05864 14E6                        18            .byte	$18
05865 14E7                        18            .byte	$18
05866 14E8                        F8            .byte	$F8
05867 14E9                        18            .byte	$18
05868 14EA                        F8            .byte	$F8
05869 14EB                        18            .byte	$18
05870 14EC                        18            .byte	$18
05871 14ED                        18            .byte	$18
05872                                           ! 892  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
05873 14EE                        36            .byte	$36
05874 14EF                        36            .byte	$36
05875 14F0                        36            .byte	$36
05876 14F1                        36            .byte	$36
05877 14F2                        F6            .byte	$F6
05878 14F3                        36            .byte	$36
05879 14F4                        36            .byte	$36
05880 14F5                        36            .byte	$36
05881                                           ! 893  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
05882 14F6                        00            .byte	0
05883 14F7                        00            .byte	0
05884 14F8                        00            .byte	0
05885 14F9                        00            .byte	0
05886 14FA                        FE            .byte	$FE
05887 14FB                        36            .byte	$36
05888 14FC                        36            .byte	$36
05889 14FD                        36            .byte	$36
05890                                           ! 894  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05891 14FE                        00            .byte	0
05892 14FF                        00            .byte	0
05893 1500                        F8            .byte	$F8
05894 1501                        18            .byte	$18
05895 1502                        F8            .byte	$F8
05896 1503                        18            .byte	$18
05897 1504                        18            .byte	$18
05898 1505                        18            .byte	$18
05899                                           ! 895  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
05900 1506                        36            .byte	$36
05901 1507                        36            .byte	$36
05902 1508                        F6            .byte	$F6
05903 1509                        06            .byte	6
05904 150A                        F6            .byte	$F6
05905 150B                        36            .byte	$36
05906 150C                        36            .byte	$36
05907 150D                        36            .byte	$36
05908                                           ! 896  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
05909 150E                        36            .byte	$36
05910 150F                        36            .byte	$36
05911 1510                        36            .byte	$36
05912 1511                        36            .byte	$36
05913 1512                        36            .byte	$36
05914 1513                        36            .byte	$36
05915 1514                        36            .byte	$36
05916 1515                        36            .byte	$36
05917                                           ! 897  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
05918 1516                        00            .byte	0
05919 1517                        00            .byte	0
05920 1518                        FE            .byte	$FE
05921 1519                        06            .byte	6
05922 151A                        F6            .byte	$F6
05923 151B                        36            .byte	$36
05924 151C                        36            .byte	$36
05925 151D                        36            .byte	$36
05926                                           ! 898  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
05927 151E                        36            .byte	$36
05928 151F                        36            .byte	$36
05929 1520                        F6            .byte	$F6
05930 1521                        06            .byte	6
05931 1522                        FE            .byte	$FE
05932 1523                        00            .byte	0
05933 1524                        00            .byte	0
05934 1525                        00            .byte	0
05935                                           ! 899  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
05936 1526                        36            .byte	$36
05937 1527                        36            .byte	$36
05938 1528                        36            .byte	$36
05939 1529                        36            .byte	$36
05940 152A                        FE            .byte	$FE
05941 152B                        00            .byte	0
05942 152C                        00            .byte	0
05943 152D                        00            .byte	0
05944                                           ! 900  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
05945 152E                        18            .byte	$18
05946 152F                        18            .byte	$18
05947 1530                        F8            .byte	$F8
05948 1531                        18            .byte	$18
05949 1532                        F8            .byte	$F8
05950 1533                        00            .byte	0
05951 1534                        00            .byte	0
05952 1535                        00            .byte	0
05953                                           ! 901  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
05954 1536                        00            .byte	0
05955 1537                        00            .byte	0
05956 1538                        00            .byte	0
05957 1539                        00            .byte	0
05958 153A                        F8            .byte	$F8
05959 153B                        18            .byte	$18
05960 153C                        18            .byte	$18
05961 153D                        18            .byte	$18
05962                                           ! 902  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
05963 153E                        18            .byte	$18
05964 153F                        18            .byte	$18
05965 1540                        18            .byte	$18
05966 1541                        18            .byte	$18
05967 1542                        1F            .byte	$1F
05968 1543                        00            .byte	0
05969 1544                        00            .byte	0
05970 1545                        00            .byte	0
05971                                           ! 903  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
05972 1546                        18            .byte	$18
05973 1547                        18            .byte	$18
05974 1548                        18            .byte	$18
05975 1549                        18            .byte	$18
05976 154A                        FF            .byte	$FF
05977 154B                        00            .byte	0
05978 154C                        00            .byte	0
05979 154D                        00            .byte	0
05980                                           ! 904  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
05981 154E                        00            .byte	0
05982 154F                        00            .byte	0
05983 1550                        00            .byte	0
05984 1551                        00            .byte	0
05985 1552                        FF            .byte	$FF
05986 1553                        18            .byte	$18
05987 1554                        18            .byte	$18
05988 1555                        18            .byte	$18
05989                                           ! 905  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
05990 1556                        18            .byte	$18
05991 1557                        18            .byte	$18
05992 1558                        18            .byte	$18
05993 1559                        18            .byte	$18
05994 155A                        1F            .byte	$1F
05995 155B                        18            .byte	$18
05996 155C                        18            .byte	$18
05997 155D                        18            .byte	$18
05998                                           ! 906  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
05999 155E                        00            .byte	0
06000 155F                        00            .byte	0
06001 1560                        00            .byte	0
06002 1561                        00            .byte	0
06003 1562                        FF            .byte	$FF
06004 1563                        00            .byte	0
06005 1564                        00            .byte	0
06006 1565                        00            .byte	0
06007                                           ! 907  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06008 1566                        18            .byte	$18
06009 1567                        18            .byte	$18
06010 1568                        18            .byte	$18
06011 1569                        18            .byte	$18
06012 156A                        FF            .byte	$FF
06013 156B                        18            .byte	$18
06014 156C                        18            .byte	$18
06015 156D                        18            .byte	$18
06016                                           ! 908  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06017 156E                        18            .byte	$18
06018 156F                        18            .byte	$18
06019 1570                        1F            .byte	$1F
06020 1571                        18            .byte	$18
06021 1572                        1F            .byte	$1F
06022 1573                        18            .byte	$18
06023 1574                        18            .byte	$18
06024 1575                        18            .byte	$18
06025                                           ! 909  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06026 1576                        36            .byte	$36
06027 1577                        36            .byte	$36
06028 1578                        36            .byte	$36
06029 1579                        36            .byte	$36
06030 157A                        37            .byte	$37
06031 157B                        36            .byte	$36
06032 157C                        36            .byte	$36
06033 157D                        36            .byte	$36
06034                                           ! 910  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06035 157E                        36            .byte	$36
06036 157F                        36            .byte	$36
06037 1580                        37            .byte	$37
06038 1581                        30            .byte	$30
06039 1582                        3F            .byte	$3F
06040 1583                        00            .byte	0
06041 1584                        00            .byte	0
06042 1585                        00            .byte	0
06043                                           ! 911  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06044 1586                        00            .byte	0
06045 1587                        00            .byte	0
06046 1588                        3F            .byte	$3F
06047 1589                        30            .byte	$30
06048 158A                        37            .byte	$37
06049 158B                        36            .byte	$36
06050 158C                        36            .byte	$36
06051 158D                        36            .byte	$36
06052                                           ! 912  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06053 158E                        36            .byte	$36
06054 158F                        36            .byte	$36
06055 1590                        F7            .byte	$F7
06056 1591                        00            .byte	0
06057 1592                        FF            .byte	$FF
06058 1593                        00            .byte	0
06059 1594                        00            .byte	0
06060 1595                        00            .byte	0
06061                                           ! 913  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06062 1596                        00            .byte	0
06063 1597                        00            .byte	0
06064 1598                        FF            .byte	$FF
06065 1599                        00            .byte	0
06066 159A                        F7            .byte	$F7
06067 159B                        36            .byte	$36
06068 159C                        36            .byte	$36
06069 159D                        36            .byte	$36
06070                                           ! 914  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06071 159E                        36            .byte	$36
06072 159F                        36            .byte	$36
06073 15A0                        37            .byte	$37
06074 15A1                        30            .byte	$30
06075 15A2                        37            .byte	$37
06076 15A3                        36            .byte	$36
06077 15A4                        36            .byte	$36
06078 15A5                        36            .byte	$36
06079                                           ! 915  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06080 15A6                        00            .byte	0
06081 15A7                        00            .byte	0
06082 15A8                        FF            .byte	$FF
06083 15A9                        00            .byte	0
06084 15AA                        FF            .byte	$FF
06085 15AB                        00            .byte	0
06086 15AC                        00            .byte	0
06087 15AD                        00            .byte	0
06088                                           ! 916  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06089 15AE                        36            .byte	$36
06090 15AF                        36            .byte	$36
06091 15B0                        F7            .byte	$F7
06092 15B1                        00            .byte	0
06093 15B2                        F7            .byte	$F7
06094 15B3                        36            .byte	$36
06095 15B4                        36            .byte	$36
06096 15B5                        36            .byte	$36
06097                                           ! 917  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06098 15B6                        18            .byte	$18
06099 15B7                        18            .byte	$18
06100 15B8                        FF            .byte	$FF
06101 15B9                        00            .byte	0
06102 15BA                        FF            .byte	$FF
06103 15BB                        00            .byte	0
06104 15BC                        00            .byte	0
06105 15BD                        00            .byte	0
06106                                           ! 918  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06107 15BE                        36            .byte	$36
06108 15BF                        36            .byte	$36
06109 15C0                        36            .byte	$36
06110 15C1                        36            .byte	$36
06111 15C2                        FF            .byte	$FF
06112 15C3                        00            .byte	0
06113 15C4                        00            .byte	0
06114 15C5                        00            .byte	0
06115                                           ! 919  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06116 15C6                        00            .byte	0
06117 15C7                        00            .byte	0
06118 15C8                        FF            .byte	$FF
06119 15C9                        00            .byte	0
06120 15CA                        FF            .byte	$FF
06121 15CB                        18            .byte	$18
06122 15CC                        18            .byte	$18
06123 15CD                        18            .byte	$18
06124                                           ! 920  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06125 15CE                        00            .byte	0
06126 15CF                        00            .byte	0
06127 15D0                        00            .byte	0
06128 15D1                        00            .byte	0
06129 15D2                        FF            .byte	$FF
06130 15D3                        36            .byte	$36
06131 15D4                        36            .byte	$36
06132 15D5                        36            .byte	$36
06133                                           ! 921  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06134 15D6                        36            .byte	$36
06135 15D7                        36            .byte	$36
06136 15D8                        36            .byte	$36
06137 15D9                        36            .byte	$36
06138 15DA                        3F            .byte	$3F
06139 15DB                        00            .byte	0
06140 15DC                        00            .byte	0
06141 15DD                        00            .byte	0
06142                                           ! 922  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06143 15DE                        18            .byte	$18
06144 15DF                        18            .byte	$18
06145 15E0                        1F            .byte	$1F
06146 15E1                        18            .byte	$18
06147 15E2                        1F            .byte	$1F
06148 15E3                        00            .byte	0
06149 15E4                        00            .byte	0
06150 15E5                        00            .byte	0
06151                                           ! 923  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06152 15E6                        00            .byte	0
06153 15E7                        00            .byte	0
06154 15E8                        1F            .byte	$1F
06155 15E9                        18            .byte	$18
06156 15EA                        1F            .byte	$1F
06157 15EB                        18            .byte	$18
06158 15EC                        18            .byte	$18
06159 15ED                        18            .byte	$18
06160                                           ! 924  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06161 15EE                        00            .byte	0
06162 15EF                        00            .byte	0
06163 15F0                        00            .byte	0
06164 15F1                        00            .byte	0
06165 15F2                        3F            .byte	$3F
06166 15F3                        36            .byte	$36
06167 15F4                        36            .byte	$36
06168 15F5                        36            .byte	$36
06169                                           ! 925  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06170 15F6                        36            .byte	$36
06171 15F7                        36            .byte	$36
06172 15F8                        36            .byte	$36
06173 15F9                        36            .byte	$36
06174 15FA                        FF            .byte	$FF
06175 15FB                        36            .byte	$36
06176 15FC                        36            .byte	$36
06177 15FD                        36            .byte	$36
06178                                           ! 926  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06179 15FE                        18            .byte	$18
06180 15FF                        18            .byte	$18
06181 1600                        FF            .byte	$FF
06182 1601                        18            .byte	$18
06183 1602                        FF            .byte	$FF
06184 1603                        18            .byte	$18
06185 1604                        18            .byte	$18
06186 1605                        18            .byte	$18
06187                                           ! 927  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06188 1606                        18            .byte	$18
06189 1607                        18            .byte	$18
06190 1608                        18            .byte	$18
06191 1609                        18            .byte	$18
06192 160A                        F8            .byte	$F8
06193 160B                        00            .byte	0
06194 160C                        00            .byte	0
06195 160D                        00            .byte	0
06196                                           ! 928  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06197 160E                        00            .byte	0
06198 160F                        00            .byte	0
06199 1610                        00            .byte	0
06200 1611                        00            .byte	0
06201 1612                        1F            .byte	$1F
06202 1613                        18            .byte	$18
06203 1614                        18            .byte	$18
06204 1615                        18            .byte	$18
06205                                           ! 929  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06206 1616                        FF            .byte	$FF
06207 1617                        FF            .byte	$FF
06208 1618                        FF            .byte	$FF
06209 1619                        FF            .byte	$FF
06210 161A                        FF            .byte	$FF
06211 161B                        FF            .byte	$FF
06212 161C                        FF            .byte	$FF
06213 161D                        FF            .byte	$FF
06214                                           ! 930  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06215 161E                        00            .byte	0
06216 161F                        00            .byte	0
06217 1620                        00            .byte	0
06218 1621                        00            .byte	0
06219 1622                        FF            .byte	$FF
06220 1623                        FF            .byte	$FF
06221 1624                        FF            .byte	$FF
06222 1625                        FF            .byte	$FF
06223                                           ! 931  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06224 1626                        F0            .byte	$F0
06225 1627                        F0            .byte	$F0
06226 1628                        F0            .byte	$F0
06227 1629                        F0            .byte	$F0
06228 162A                        F0            .byte	$F0
06229 162B                        F0            .byte	$F0
06230 162C                        F0            .byte	$F0
06231 162D                        F0            .byte	$F0
06232                                           ! 932 
06233                                           ! 932  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06234 162E                        0F            .byte	$F
06235 162F                        0F            .byte	$F
06236 1630                        0F            .byte	$F
06237 1631                        0F            .byte	$F
06238 1632                        0F            .byte	$F
06239 1633                        0F            .byte	$F
06240 1634                        0F            .byte	$F
06241 1635                        0F            .byte	$F
06242                                           ! 933  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06243 1636                        FF            .byte	$FF
06244 1637                        FF            .byte	$FF
06245 1638                        FF            .byte	$FF
06246 1639                        FF            .byte	$FF
06247 163A                        00            .byte	0
06248 163B                        00            .byte	0
06249 163C                        00            .byte	0
06250 163D                        00            .byte	0
06251                                           ! 934  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06252 163E                        00            .byte	0
06253 163F                        00            .byte	0
06254 1640                        76            .byte	$76
06255 1641                        DC            .byte	$DC
06256 1642                        C8            .byte	$C8
06257 1643                        DC            .byte	$DC
06258 1644                        76            .byte	$76
06259 1645                        00            .byte	0
06260                                           ! 935  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06261 1646                        00            .byte	0
06262 1647                        78            .byte	$78
06263 1648                        CC            .byte	$CC
06264 1649                        F8            .byte	$F8
06265 164A                        CC            .byte	$CC
06266 164B                        F8            .byte	$F8
06267 164C                        C0            .byte	$C0
06268 164D                        C0            .byte	$C0
06269                                           ! 936  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06270 164E                        00            .byte	0
06271 164F                        FC            .byte	$FC
06272 1650                        CC            .byte	$CC
06273 1651                        C0            .byte	$C0
06274 1652                        C0            .byte	$C0
06275 1653                        C0            .byte	$C0
06276 1654                        C0            .byte	$C0
06277 1655                        00            .byte	0
06278                                           ! 937  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06279 1656                        00            .byte	0
06280 1657                        FE            .byte	$FE
06281 1658                        6C            .byte	$6C
06282 1659                        6C            .byte	$6C
06283 165A                        6C            .byte	$6C
06284 165B                        6C            .byte	$6C
06285 165C                        6C            .byte	$6C
06286 165D                        00            .byte	0
06287                                           ! 938  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06288 165E                        FC            .byte	$FC
06289 165F                        CC            .byte	$CC
06290 1660                        60            .byte	$60
06291 1661                        30            .byte	$30
06292 1662                        60            .byte	$60
06293 1663                        CC            .byte	$CC
06294 1664                        FC            .byte	$FC
06295 1665                        00            .byte	0
06296                                           ! 939  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06297 1666                        00            .byte	0
06298 1667                        00            .byte	0
06299 1668                        7E            .byte	$7E
06300 1669                        D8            .byte	$D8
06301 166A                        D8            .byte	$D8
06302 166B                        D8            .byte	$D8
06303 166C                        70            .byte	$70
06304 166D                        00            .byte	0
06305                                           ! 940  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06306 166E                        00            .byte	0
06307 166F                        66            .byte	$66
06308 1670                        66            .byte	$66
06309 1671                        66            .byte	$66
06310 1672                        66            .byte	$66
06311 1673                        7C            .byte	$7C
06312 1674                        60            .byte	$60
06313 1675                        C0            .byte	$C0
06314                                           ! 941  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06315 1676                        00            .byte	0
06316 1677                        76            .byte	$76
06317 1678                        DC            .byte	$DC
06318 1679                        18            .byte	$18
06319 167A                        18            .byte	$18
06320 167B                        18            .byte	$18
06321 167C                        18            .byte	$18
06322 167D                        00            .byte	0
06323                                           ! 942  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06324 167E                        FC            .byte	$FC
06325 167F                        30            .byte	$30
06326 1680                        78            .byte	$78
06327 1681                        CC            .byte	$CC
06328 1682                        CC            .byte	$CC
06329 1683                        78            .byte	$78
06330 1684                        30            .byte	$30
06331 1685                        FC            .byte	$FC
06332                                           ! 943  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06333 1686                        38            .byte	$38
06334 1687                        6C            .byte	$6C
06335 1688                        C6            .byte	$C6
06336 1689                        FE            .byte	$FE
06337 168A                        C6            .byte	$C6
06338 168B                        6C            .byte	$6C
06339 168C                        38            .byte	$38
06340 168D                        00            .byte	0
06341                                           ! 944  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06342 168E                        38            .byte	$38
06343 168F                        6C            .byte	$6C
06344 1690                        C6            .byte	$C6
06345 1691                        C6            .byte	$C6
06346 1692                        6C            .byte	$6C
06347 1693                        6C            .byte	$6C
06348 1694                        EE            .byte	$EE
06349 1695                        00            .byte	0
06350                                           ! 945  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06351 1696                        1C            .byte	$1C
06352 1697                        30            .byte	$30
06353 1698                        18            .byte	$18
06354 1699                        7C            .byte	$7C
06355 169A                        CC            .byte	$CC
06356 169B                        CC            .byte	$CC
06357 169C                        78            .byte	$78
06358 169D                        00            .byte	0
06359                                           ! 946  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06360 169E                        00            .byte	0
06361 169F                        00            .byte	0
06362 16A0                        7E            .byte	$7E
06363 16A1                        DB            .byte	$DB
06364 16A2                        DB            .byte	$DB
06365 16A3                        7E            .byte	$7E
06366 16A4                        00            .byte	0
06367 16A5                        00            .byte	0
06368                                           ! 947  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06369 16A6                        06            .byte	6
06370 16A7                        0C            .byte	$C
06371 16A8                        7E            .byte	$7E
06372 16A9                        DB            .byte	$DB
06373 16AA                        DB            .byte	$DB
06374 16AB                        7E            .byte	$7E
06375 16AC                        60            .byte	$60
06376 16AD                        C0            .byte	$C0
06377                                           ! 948  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06378 16AE                        38            .byte	$38
06379 16AF                        60            .byte	$60
06380 16B0                        C0            .byte	$C0
06381 16B1                        F8            .byte	$F8
06382 16B2                        C0            .byte	$C0
06383 16B3                        60            .byte	$60
06384 16B4                        38            .byte	$38
06385 16B5                        00            .byte	0
06386                                           ! 949  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06387 16B6                        78            .byte	$78
06388 16B7                        CC            .byte	$CC
06389 16B8                        CC            .byte	$CC
06390 16B9                        CC            .byte	$CC
06391 16BA                        CC            .byte	$CC
06392 16BB                        CC            .byte	$CC
06393 16BC                        CC            .byte	$CC
06394 16BD                        00            .byte	0
06395                                           ! 950  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06396 16BE                        00            .byte	0
06397 16BF                        FC            .byte	$FC
06398 16C0                        00            .byte	0
06399 16C1                        FC            .byte	$FC
06400 16C2                        00            .byte	0
06401 16C3                        FC            .byte	$FC
06402 16C4                        00            .byte	0
06403 16C5                        00            .byte	0
06404                                           ! 951  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06405 16C6                        30            .byte	$30
06406 16C7                        30            .byte	$30
06407 16C8                        FC            .byte	$FC
06408 16C9                        30            .byte	$30
06409 16CA                        30            .byte	$30
06410 16CB                        00            .byte	0
06411 16CC                        FC            .byte	$FC
06412 16CD                        00            .byte	0
06413                                           ! 952  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06414 16CE                        60            .byte	$60
06415 16CF                        30            .byte	$30
06416 16D0                        18            .byte	$18
06417 16D1                        30            .byte	$30
06418 16D2                        60            .byte	$60
06419 16D3                        00            .byte	0
06420 16D4                        FC            .byte	$FC
06421 16D5                        00            .byte	0
06422                                           ! 953  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06423 16D6                        18            .byte	$18
06424 16D7                        30            .byte	$30
06425 16D8                        60            .byte	$60
06426 16D9                        30            .byte	$30
06427 16DA                        18            .byte	$18
06428 16DB                        00            .byte	0
06429 16DC                        FC            .byte	$FC
06430 16DD                        00            .byte	0
06431                                           ! 954  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06432 16DE                        0E            .byte	$E
06433 16DF                        1B            .byte	$1B
06434 16E0                        1B            .byte	$1B
06435 16E1                        18            .byte	$18
06436 16E2                        18            .byte	$18
06437 16E3                        18            .byte	$18
06438 16E4                        18            .byte	$18
06439 16E5                        18            .byte	$18
06440                                           ! 955  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06441 16E6                        18            .byte	$18
06442 16E7                        18            .byte	$18
06443 16E8                        18            .byte	$18
06444 16E9                        18            .byte	$18
06445 16EA                        18            .byte	$18
06446 16EB                        D8            .byte	$D8
06447 16EC                        D8            .byte	$D8
06448 16ED                        70            .byte	$70
06449                                           ! 956  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06450 16EE                        30            .byte	$30
06451 16EF                        30            .byte	$30
06452 16F0                        00            .byte	0
06453 16F1                        FC            .byte	$FC
06454 16F2                        00            .byte	0
06455 16F3                        30            .byte	$30
06456 16F4                        30            .byte	$30
06457 16F5                        00            .byte	0
06458                                           ! 957  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06459 16F6                        00            .byte	0
06460 16F7                        76            .byte	$76
06461 16F8                        DC            .byte	$DC
06462 16F9                        00            .byte	0
06463 16FA                        76            .byte	$76
06464 16FB                        DC            .byte	$DC
06465 16FC                        00            .byte	0
06466 16FD                        00            .byte	0
06467                                           ! 958  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06468 16FE                        38            .byte	$38
06469 16FF                        6C            .byte	$6C
06470 1700                        6C            .byte	$6C
06471 1701                        38            .byte	$38
06472 1702                        00            .byte	0
06473 1703                        00            .byte	0
06474 1704                        00            .byte	0
06475 1705                        00            .byte	0
06476                                           ! 959  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06477 1706                        00            .byte	0
06478 1707                        00            .byte	0
06479 1708                        00            .byte	0
06480 1709                        18            .byte	$18
06481 170A                        18            .byte	$18
06482 170B                        00            .byte	0
06483 170C                        00            .byte	0
06484 170D                        00            .byte	0
06485                                           ! 960  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06486 170E                        00            .byte	0
06487 170F                        00            .byte	0
06488 1710                        00            .byte	0
06489 1711                        00            .byte	0
06490 1712                        18            .byte	$18
06491 1713                        00            .byte	0
06492 1714                        00            .byte	0
06493 1715                        00            .byte	0
06494                                           ! 961  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06495 1716                        0F            .byte	$F
06496 1717                        0C            .byte	$C
06497 1718                        0C            .byte	$C
06498 1719                        0C            .byte	$C
06499 171A                        EC            .byte	$EC
06500 171B                        6C            .byte	$6C
06501 171C                        3C            .byte	$3C
06502 171D                        1C            .byte	$1C
06503                                           ! 962  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06504 171E                        78            .byte	$78
06505 171F                        6C            .byte	$6C
06506 1720                        6C            .byte	$6C
06507 1721                        6C            .byte	$6C
06508 1722                        6C            .byte	$6C
06509 1723                        00            .byte	0
06510 1724                        00            .byte	0
06511 1725                        00            .byte	0
06512                                           ! 963  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06513 1726                        70            .byte	$70
06514 1727                        18            .byte	$18
06515 1728                        30            .byte	$30
06516 1729                        60            .byte	$60
06517 172A                        78            .byte	$78
06518 172B                        00            .byte	0
06519 172C                        00            .byte	0
06520 172D                        00            .byte	0
06521                                           ! 964  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06522 172E                        00            .byte	0
06523 172F                        00            .byte	0
06524 1730                        3C            .byte	$3C
06525 1731                        3C            .byte	$3C
06526 1732                        3C            .byte	$3C
06527 1733                        3C            .byte	$3C
06528 1734                        00            .byte	0
06529 1735                        00            .byte	0
06530                                           ! 965  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06531 1736                        00            .byte	0
06532 1737                        00            .byte	0
06533 1738                        00            .byte	0
06534 1739                        00            .byte	0
06535 173A                        00            .byte	0
06536 173B                        00            .byte	0
06537 173C                        00            .byte	0
06538                                           ! 966 };
06539 173D                        00            .byte	0
06540                                           !BCC_EOS
06541                                           ! 967 static Bit8u vgafont14[256*14]=
06542                                           ! 968 {
06543                       0000173E            _vgafont14:
06544                                           ! 969  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06545 173E                        00            .byte	0
06546 173F                        00            .byte	0
06547 1740                        00            .byte	0
06548 1741                        00            .byte	0
06549 1742                        00            .byte	0
06550 1743                        00            .byte	0
06551 1744                        00            .byte	0
06552 1745                        00            .byte	0
06553 1746                        00            .byte	0
06554 1747                        00            .byte	0
06555 1748                        00            .byte	0
06556 1749                        00            .byte	0
06557 174A                        00            .byte	0
06558 174B                        00            .byte	0
06559                                           ! 970  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06560 174C                        00            .byte	0
06561 174D                        00            .byte	0
06562 174E                        7E            .byte	$7E
06563 174F                        81            .byte	$81
06564 1750                        A5            .byte	$A5
06565 1751                        81            .byte	$81
06566 1752                        81            .byte	$81
06567 1753                        BD            .byte	$BD
06568 1754                        99            .byte	$99
06569 1755                        81            .byte	$81
06570 1756                        7E            .byte	$7E
06571 1757                        00            .byte	0
06572 1758                        00            .byte	0
06573 1759                        00            .byte	0
06574                                           ! 971  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06575 175A                        00            .byte	0
06576 175B                        00            .byte	0
06577 175C                        7E            .byte	$7E
06578 175D                        FF            .byte	$FF
06579 175E                        DB            .byte	$DB
06580 175F                        FF            .byte	$FF
06581 1760                        FF            .byte	$FF
06582 1761                        C3            .byte	$C3
06583 1762                        E7            .byte	$E7
06584 1763                        FF            .byte	$FF
06585 1764                        7E            .byte	$7E
06586 1765                        00            .byte	0
06587 1766                        00            .byte	0
06588 1767                        00            .byte	0
06589                                           ! 972  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06590 1768                        00            .byte	0
06591 1769                        00            .byte	0
06592 176A                        00            .byte	0
06593 176B                        6C            .byte	$6C
06594 176C                        FE            .byte	$FE
06595 176D                        FE            .byte	$FE
06596 176E                        FE            .byte	$FE
06597 176F                        FE            .byte	$FE
06598 1770                        7C            .byte	$7C
06599 1771                        38            .byte	$38
06600 1772                        10            .byte	$10
06601 1773                        00            .byte	0
06602 1774                        00            .byte	0
06603 1775                        00            .byte	0
06604                                           ! 973  0x00,
06605                                           ! 973  0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06606 1776                        00            .byte	0
06607 1777                        00            .byte	0
06608 1778                        00            .byte	0
06609 1779                        10            .byte	$10
06610 177A                        38            .byte	$38
06611 177B                        7C            .byte	$7C
06612 177C                        FE            .byte	$FE
06613 177D                        7C            .byte	$7C
06614 177E                        38            .byte	$38
06615 177F                        10            .byte	$10
06616 1780                        00            .byte	0
06617 1781                        00            .byte	0
06618 1782                        00            .byte	0
06619 1783                        00            .byte	0
06620                                           ! 974  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06621 1784                        00            .byte	0
06622 1785                        00            .byte	0
06623 1786                        18            .byte	$18
06624 1787                        3C            .byte	$3C
06625 1788                        3C            .byte	$3C
06626 1789                        E7            .byte	$E7
06627 178A                        E7            .byte	$E7
06628 178B                        E7            .byte	$E7
06629 178C                        18            .byte	$18
06630 178D                        18            .byte	$18
06631 178E                        3C            .byte	$3C
06632 178F                        00            .byte	0
06633 1790                        00            .byte	0
06634 1791                        00            .byte	0
06635                                           ! 975  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06636 1792                        00            .byte	0
06637 1793                        00            .byte	0
06638 1794                        18            .byte	$18
06639 1795                        3C            .byte	$3C
06640 1796                        7E            .byte	$7E
06641 1797                        FF            .byte	$FF
06642 1798                        FF            .byte	$FF
06643 1799                        7E            .byte	$7E
06644 179A                        18            .byte	$18
06645 179B                        18            .byte	$18
06646 179C                        3C            .byte	$3C
06647 179D                        00            .byte	0
06648 179E                        00            .byte	0
06649 179F                        00            .byte	0
06650                                           ! 976  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06651 17A0                        00            .byte	0
06652 17A1                        00            .byte	0
06653 17A2                        00            .byte	0
06654 17A3                        00            .byte	0
06655 17A4                        00            .byte	0
06656 17A5                        18            .byte	$18
06657 17A6                        3C            .byte	$3C
06658 17A7                        3C            .byte	$3C
06659 17A8                        18            .byte	$18
06660 17A9                        00            .byte	0
06661 17AA                        00            .byte	0
06662 17AB                        00            .byte	0
06663 17AC                        00            .byte	0
06664 17AD                        00            .byte	0
06665                                           ! 977  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06666 17AE                        FF            .byte	$FF
06667 17AF                        FF            .byte	$FF
06668 17B0                        FF            .byte	$FF
06669 17B1                        FF            .byte	$FF
06670 17B2                        FF            .byte	$FF
06671 17B3                        E7            .byte	$E7
06672 17B4                        C3            .byte	$C3
06673 17B5                        C3            .byte	$C3
06674 17B6                        E7            .byte	$E7
06675 17B7                        FF            .byte	$FF
06676 17B8                        FF            .byte	$FF
06677 17B9                        FF            .byte	$FF
06678 17BA                        FF            .byte	$FF
06679 17BB                        FF            .byte	$FF
06680                                           ! 978  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06681 17BC                        00            .byte	0
06682 17BD                        00            .byte	0
06683 17BE                        00            .byte	0
06684 17BF                        00            .byte	0
06685 17C0                        3C            .byte	$3C
06686 17C1                        66            .byte	$66
06687 17C2                        42            .byte	$42
06688 17C3                        42            .byte	$42
06689 17C4                        66            .byte	$66
06690 17C5                        3C            .byte	$3C
06691 17C6                        00            .byte	0
06692 17C7                        00            .byte	0
06693 17C8                        00            .byte	0
06694 17C9                        00            .byte	0
06695                                           ! 979  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06696 17CA                        FF            .byte	$FF
06697 17CB                        FF            .byte	$FF
06698 17CC                        FF            .byte	$FF
06699 17CD                        FF            .byte	$FF
06700 17CE                        C3            .byte	$C3
06701 17CF                        99            .byte	$99
06702 17D0                        BD            .byte	$BD
06703 17D1                        BD            .byte	$BD
06704 17D2                        99            .byte	$99
06705 17D3                        C3            .byte	$C3
06706 17D4                        FF            .byte	$FF
06707 17D5                        FF            .byte	$FF
06708 17D6                        FF            .byte	$FF
06709 17D7                        FF            .byte	$FF
06710                                           ! 980  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06711 17D8                        00            .byte	0
06712 17D9                        00            .byte	0
06713 17DA                        1E            .byte	$1E
06714 17DB                        0E            .byte	$E
06715 17DC                        1A            .byte	$1A
06716 17DD                        32            .byte	$32
06717 17DE                        78            .byte	$78
06718 17DF                        CC            .byte	$CC
06719 17E0                        CC            .byte	$CC
06720 17E1                        CC            .byte	$CC
06721 17E2                        78            .byte	$78
06722 17E3                        00            .byte	0
06723 17E4                        00            .byte	0
06724 17E5                        00            .byte	0
06725                                           ! 981  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
06726 17E6                        00            .byte	0
06727 17E7                        00            .byte	0
06728 17E8                        3C            .byte	$3C
06729 17E9                        66            .byte	$66
06730 17EA                        66            .byte	$66
06731 17EB                        66            .byte	$66
06732 17EC                        3C            .byte	$3C
06733 17ED                        18            .byte	$18
06734 17EE                        7E            .byte	$7E
06735 17EF                        18            .byte	$18
06736 17F0                        18            .byte	$18
06737 17F1                        00            .byte	0
06738 17F2                        00            .byte	0
06739 17F3                        00            .byte	0
06740                                           ! 982  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
06741 17F4                        00            .byte	0
06742 17F5                        00            .byte	0
06743 17F6                        3F            .byte	$3F
06744 17F7                        33            .byte	$33
06745 17F8                        3F            .byte	$3F
06746 17F9                        30            .byte	$30
06747 17FA                        30            .byte	$30
06748 17FB                        30            .byte	$30
06749 17FC                        70            .byte	$70
06750 17FD                        F0            .byte	$F0
06751 17FE                        E0            .byte	$E0
06752 17FF                        00            .byte	0
06753 1800                        00            .byte	0
06754 1801                        00            .byte	0
06755                                           ! 983  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
06756 1802                        00            .byte	0
06757 1803                        00            .byte	0
06758 1804                        7F            .byte	$7F
06759 1805                        63            .byte	$63
06760 1806                        7F            .byte	$7F
06761 1807                        63            .byte	$63
06762 1808                        63            .byte	$63
06763 1809                        63            .byte	$63
06764 180A                        67            .byte	$67
06765 180B                        E7            .byte	$E7
06766 180C                        E6            .byte	$E6
06767 180D                        C0            .byte	$C0
06768 180E                        00            .byte	0
06769 180F                        00            .byte	0
06770                                           ! 984  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
06771 1810                        00            .byte	0
06772 1811                        00            .byte	0
06773 1812                        18            .byte	$18
06774 1813                        18            .byte	$18
06775 1814                        DB            .byte	$DB
06776 1815                        3C            .byte	$3C
06777 1816                        E7            .byte	$E7
06778 1817                        3C            .byte	$3C
06779 1818                        DB            .byte	$DB
06780 1819                        18            .byte	$18
06781 181A                        18            .byte	$18
06782 181B                        00            .byte	0
06783 181C                        00            .byte	0
06784 181D                        00            .byte	0
06785                                           ! 985  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
06786 181E                        00            .byte	0
06787 181F                        00            .byte	0
06788 1820                        80            .byte	$80
06789 1821                        C0            .byte	$C0
06790 1822                        E0            .byte	$E0
06791 1823                        F8            .byte	$F8
06792 1824                        FE            .byte	$FE
06793 1825                        F8            .byte	$F8
06794 1826                        E0            .byte	$E0
06795 1827                        C0            .byte	$C0
06796 1828                        80            .byte	$80
06797 1829                        00            .byte	0
06798 182A                        00            .byte	0
06799 182B                        00            .byte	0
06800                                           ! 986  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
06801 182C                        00            .byte	0
06802 182D                        00            .byte	0
06803 182E                        02            .byte	2
06804 182F                        06            .byte	6
06805 1830                        0E            .byte	$E
06806 1831                        3E            .byte	$3E
06807 1832                        FE            .byte	$FE
06808 1833                        3E            .byte	$3E
06809 1834                        0E            .byte	$E
06810 1835                        06            .byte	6
06811 1836                        02            .byte	2
06812 1837                        00            .byte	0
06813 1838                        00            .byte	0
06814 1839                        00            .byte	0
06815                                           ! 987  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06816 183A                        00            .byte	0
06817 183B                        00            .byte	0
06818 183C                        18            .byte	$18
06819 183D                        3C            .byte	$3C
06820 183E                        7E            .byte	$7E
06821 183F                        18            .byte	$18
06822 1840                        18            .byte	$18
06823 1841                        18            .byte	$18
06824 1842                        7E            .byte	$7E
06825 1843                        3C            .byte	$3C
06826 1844                        18            .byte	$18
06827 1845                        00            .byte	0
06828 1846                        00            .byte	0
06829 1847                        00            .byte	0
06830                                           ! 988  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
06831 1848                        00            .byte	0
06832 1849                        00            .byte	0
06833 184A                        66            .byte	$66
06834 184B                        66            .byte	$66
06835 184C                        66            .byte	$66
06836 184D                        66            .byte	$66
06837 184E                        66            .byte	$66
06838 184F                        66            .byte	$66
06839 1850                        00            .byte	0
06840 1851                        66            .byte	$66
06841 1852                        66            .byte	$66
06842 1853                        00            .byte	0
06843 1854                        00            .byte	0
06844 1855                        00            .byte	0
06845                                           ! 989  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
06846 1856                        00            .byte	0
06847 1857                        00            .byte	0
06848 1858                        7F            .byte	$7F
06849 1859                        DB            .byte	$DB
06850 185A                        DB            .byte	$DB
06851 185B                        DB            .byte	$DB
06852 185C                        7B            .byte	$7B
06853 185D                        1B            .byte	$1B
06854 185E                        1B            .byte	$1B
06855 185F                        1B            .byte	$1B
06856 1860                        1B            .byte	$1B
06857 1861                        00            .byte	0
06858 1862                        00            .byte	0
06859 1863                        00            .byte	0
06860                                           ! 990  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
06861 1864                        00            .byte	0
06862 1865                        7C            .byte	$7C
06863 1866                        C6            .byte	$C6
06864 1867                        60            .byte	$60
06865 1868                        38            .byte	$38
06866 1869                        6C            .byte	$6C
06867 186A                        C6            .byte	$C6
06868 186B                        C6            .byte	$C6
06869 186C                        6C            .byte	$6C
06870 186D                        38            .byte	$38
06871 186E                        0C            .byte	$C
06872 186F                        C6            .byte	$C6
06873 1870                        7C            .byte	$7C
06874 1871                        00            .byte	0
06875                                           ! 991  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
06876 1872                        00            .byte	0
06877 1873                        00            .byte	0
06878 1874                        00            .byte	0
06879 1875                        00            .byte	0
06880 1876                        00            .byte	0
06881 1877                        00            .byte	0
06882 1878                        00            .byte	0
06883 1879                        00            .byte	0
06884 187A                        FE            .byte	$FE
06885 187B                        FE            .byte	$FE
06886 187C                        FE            .byte	$FE
06887 187D                        00            .byte	0
06888 187E                        00            .byte	0
06889 187F                        00            .byte	0
06890                                           ! 992  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
06891 1880                        00            .byte	0
06892 1881                        00            .byte	0
06893 1882                        18            .byte	$18
06894 1883                        3C            .byte	$3C
06895 1884                        7E            .byte	$7E
06896 1885                        18            .byte	$18
06897 1886                        18            .byte	$18
06898 1887                        18            .byte	$18
06899 1888                        7E            .byte	$7E
06900 1889                        3C            .byte	$3C
06901 188A                        18            .byte	$18
06902 188B                        7E            .byte	$7E
06903 188C                        00            .byte	0
06904 188D                        00            .byte	0
06905                                           ! 993  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
06906 188E                        00            .byte	0
06907 188F                        00            .byte	0
06908 1890                        18            .byte	$18
06909 1891                        3C            .byte	$3C
06910 1892                        7E            .byte	$7E
06911 1893                        18            .byte	$18
06912 1894                        18            .byte	$18
06913 1895                        18            .byte	$18
06914 1896                        18            .byte	$18
06915 1897                        18            .byte	$18
06916 1898                        18            .byte	$18
06917 1899                        00            .byte	0
06918 189A                        00            .byte	0
06919 189B                        00            .byte	0
06920                                           ! 994  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06921 189C                        00            .byte	0
06922 189D                        00            .byte	0
06923 189E                        18            .byte	$18
06924 189F                        18            .byte	$18
06925 18A0                        18            .byte	$18
06926 18A1                        18            .byte	$18
06927 18A2                        18            .byte	$18
06928 18A3                        18            .byte	$18
06929 18A4                        7E            .byte	$7E
06930 18A5                        3C            .byte	$3C
06931 18A6                        18            .byte	$18
06932 18A7                        00            .byte	0
06933 18A8                        00            .byte	0
06934 18A9                        00            .byte	0
06935                                           ! 995  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06936 18AA                        00            .byte	0
06937 18AB                        00            .byte	0
06938 18AC                        00            .byte	0
06939 18AD                        00            .byte	0
06940 18AE                        18            .byte	$18
06941 18AF                        0C            .byte	$C
06942 18B0                        FE            .byte	$FE
06943 18B1                        0C            .byte	$C
06944 18B2                        18            .byte	$18
06945 18B3                        00            .byte	0
06946 18B4                        00            .byte	0
06947 18B5                        00            .byte	0
06948 18B6                        00            .byte	0
06949 18B7                        00            .byte	0
06950                                           ! 996  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
06951 18B8                        00            .byte	0
06952 18B9                        00            .byte	0
06953 18BA                        00            .byte	0
06954 18BB                        00            .byte	0
06955 18BC                        30            .byte	$30
06956 18BD                        60            .byte	$60
06957 18BE                        FE            .byte	$FE
06958 18BF                        60            .byte	$60
06959 18C0                        30            .byte	$30
06960 18C1                        00            .byte	0
06961 18C2                        00            .byte	0
06962 18C3                        00            .byte	0
06963 18C4                        00            .byte	0
06964 18C5                        00            .byte	0
06965                                           ! 997  0x00, 0x00, 0
06966 18C6                        00            .byte	0
06967 18C7                        00            .byte	0
06968                                           ! 997 x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
06969 18C8                        00            .byte	0
06970 18C9                        00            .byte	0
06971 18CA                        00            .byte	0
06972 18CB                        C0            .byte	$C0
06973 18CC                        C0            .byte	$C0
06974 18CD                        C0            .byte	$C0
06975 18CE                        FE            .byte	$FE
06976 18CF                        00            .byte	0
06977 18D0                        00            .byte	0
06978 18D1                        00            .byte	0
06979 18D2                        00            .byte	0
06980 18D3                        00            .byte	0
06981                                           ! 998  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
06982 18D4                        00            .byte	0
06983 18D5                        00            .byte	0
06984 18D6                        00            .byte	0
06985 18D7                        00            .byte	0
06986 18D8                        28            .byte	$28
06987 18D9                        6C            .byte	$6C
06988 18DA                        FE            .byte	$FE
06989 18DB                        6C            .byte	$6C
06990 18DC                        28            .byte	$28
06991 18DD                        00            .byte	0
06992 18DE                        00            .byte	0
06993 18DF                        00            .byte	0
06994 18E0                        00            .byte	0
06995 18E1                        00            .byte	0
06996                                           ! 999  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
06997 18E2                        00            .byte	0
06998 18E3                        00            .byte	0
06999 18E4                        00            .byte	0
07000 18E5                        10            .byte	$10
07001 18E6                        38            .byte	$38
07002 18E7                        38            .byte	$38
07003 18E8                        7C            .byte	$7C
07004 18E9                        7C            .byte	$7C
07005 18EA                        FE            .byte	$FE
07006 18EB                        FE            .byte	$FE
07007 18EC                        00            .byte	0
07008 18ED                        00            .byte	0
07009 18EE                        00            .byte	0
07010 18EF                        00            .byte	0
07011                                           ! 1000  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07012 18F0                        00            .byte	0
07013 18F1                        00            .byte	0
07014 18F2                        00            .byte	0
07015 18F3                        FE            .byte	$FE
07016 18F4                        FE            .byte	$FE
07017 18F5                        7C            .byte	$7C
07018 18F6                        7C            .byte	$7C
07019 18F7                        38            .byte	$38
07020 18F8                        38            .byte	$38
07021 18F9                        10            .byte	$10
07022 18FA                        00            .byte	0
07023 18FB                        00            .byte	0
07024 18FC                        00            .byte	0
07025 18FD                        00            .byte	0
07026                                           ! 1001  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07027 18FE                        00            .byte	0
07028 18FF                        00            .byte	0
07029 1900                        00            .byte	0
07030 1901                        00            .byte	0
07031 1902                        00            .byte	0
07032 1903                        00            .byte	0
07033 1904                        00            .byte	0
07034 1905                        00            .byte	0
07035 1906                        00            .byte	0
07036 1907                        00            .byte	0
07037 1908                        00            .byte	0
07038 1909                        00            .byte	0
07039 190A                        00            .byte	0
07040 190B                        00            .byte	0
07041                                           ! 1002  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07042 190C                        00            .byte	0
07043 190D                        00            .byte	0
07044 190E                        18            .byte	$18
07045 190F                        3C            .byte	$3C
07046 1910                        3C            .byte	$3C
07047 1911                        3C            .byte	$3C
07048 1912                        18            .byte	$18
07049 1913                        18            .byte	$18
07050 1914                        00            .byte	0
07051 1915                        18            .byte	$18
07052 1916                        18            .byte	$18
07053 1917                        00            .byte	0
07054 1918                        00            .byte	0
07055 1919                        00            .byte	0
07056                                           ! 1003  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07057 191A                        00            .byte	0
07058 191B                        66            .byte	$66
07059 191C                        66            .byte	$66
07060 191D                        66            .byte	$66
07061 191E                        24            .byte	$24
07062 191F                        00            .byte	0
07063 1920                        00            .byte	0
07064 1921                        00            .byte	0
07065 1922                        00            .byte	0
07066 1923                        00            .byte	0
07067 1924                        00            .byte	0
07068 1925                        00            .byte	0
07069 1926                        00            .byte	0
07070 1927                        00            .byte	0
07071                                           ! 1004  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07072 1928                        00            .byte	0
07073 1929                        00            .byte	0
07074 192A                        6C            .byte	$6C
07075 192B                        6C            .byte	$6C
07076 192C                        FE            .byte	$FE
07077 192D                        6C            .byte	$6C
07078 192E                        6C            .byte	$6C
07079 192F                        6C            .byte	$6C
07080 1930                        FE            .byte	$FE
07081 1931                        6C            .byte	$6C
07082 1932                        6C            .byte	$6C
07083 1933                        00            .byte	0
07084 1934                        00            .byte	0
07085 1935                        00            .byte	0
07086                                           ! 1005  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07087 1936                        18            .byte	$18
07088 1937                        18            .byte	$18
07089 1938                        7C            .byte	$7C
07090 1939                        C6            .byte	$C6
07091 193A                        C2            .byte	$C2
07092 193B                        C0            .byte	$C0
07093 193C                        7C            .byte	$7C
07094 193D                        06            .byte	6
07095 193E                        86            .byte	$86
07096 193F                        C6            .byte	$C6
07097 1940                        7C            .byte	$7C
07098 1941                        18            .byte	$18
07099 1942                        18            .byte	$18
07100 1943                        00            .byte	0
07101                                           ! 1006  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07102 1944                        00            .byte	0
07103 1945                        00            .byte	0
07104 1946                        00            .byte	0
07105 1947                        00            .byte	0
07106 1948                        C2            .byte	$C2
07107 1949                        C6            .byte	$C6
07108 194A                        0C            .byte	$C
07109 194B                        18            .byte	$18
07110 194C                        30            .byte	$30
07111 194D                        66            .byte	$66
07112 194E                        C6            .byte	$C6
07113 194F                        00            .byte	0
07114 1950                        00            .byte	0
07115 1951                        00            .byte	0
07116                                           ! 1007  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07117 1952                        00            .byte	0
07118 1953                        00            .byte	0
07119 1954                        38            .byte	$38
07120 1955                        6C            .byte	$6C
07121 1956                        6C            .byte	$6C
07122 1957                        38            .byte	$38
07123 1958                        76            .byte	$76
07124 1959                        DC            .byte	$DC
07125 195A                        CC            .byte	$CC
07126 195B                        CC            .byte	$CC
07127 195C                        76            .byte	$76
07128 195D                        00            .byte	0
07129 195E                        00            .byte	0
07130 195F                        00            .byte	0
07131                                           ! 1008  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07132 1960                        00            .byte	0
07133 1961                        30            .byte	$30
07134 1962                        30            .byte	$30
07135 1963                        30            .byte	$30
07136 1964                        60            .byte	$60
07137 1965                        00            .byte	0
07138 1966                        00            .byte	0
07139 1967                        00            .byte	0
07140 1968                        00            .byte	0
07141 1969                        00            .byte	0
07142 196A                        00            .byte	0
07143 196B                        00            .byte	0
07144 196C                        00            .byte	0
07145 196D                        00            .byte	0
07146                                           ! 1009  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07147 196E                        00            .byte	0
07148 196F                        00            .byte	0
07149 1970                        0C            .byte	$C
07150 1971                        18            .byte	$18
07151 1972                        30            .byte	$30
07152 1973                        30            .byte	$30
07153 1974                        30            .byte	$30
07154 1975                        30            .byte	$30
07155 1976                        30            .byte	$30
07156 1977                        18            .byte	$18
07157 1978                        0C            .byte	$C
07158 1979                        00            .byte	0
07159 197A                        00            .byte	0
07160 197B                        00            .byte	0
07161                                           ! 1010  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07162 197C                        00            .byte	0
07163 197D                        00            .byte	0
07164 197E                        30            .byte	$30
07165 197F                        18            .byte	$18
07166 1980                        0C            .byte	$C
07167 1981                        0C            .byte	$C
07168 1982                        0C            .byte	$C
07169 1983                        0C            .byte	$C
07170 1984                        0C            .byte	$C
07171 1985                        18            .byte	$18
07172 1986                        30            .byte	$30
07173 1987                        00            .byte	0
07174 1988                        00            .byte	0
07175 1989                        00            .byte	0
07176                                           ! 1011  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07177 198A                        00            .byte	0
07178 198B                        00            .byte	0
07179 198C                        00            .byte	0
07180 198D                        00            .byte	0
07181 198E                        66            .byte	$66
07182 198F                        3C            .byte	$3C
07183 1990                        FF            .byte	$FF
07184 1991                        3C            .byte	$3C
07185 1992                        66            .byte	$66
07186 1993                        00            .byte	0
07187 1994                        00            .byte	0
07188 1995                        00            .byte	0
07189 1996                        00            .byte	0
07190 1997                        00            .byte	0
07191                                           ! 1012  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07192 1998                        00            .byte	0
07193 1999                        00            .byte	0
07194 199A                        00            .byte	0
07195 199B                        00            .byte	0
07196 199C                        18            .byte	$18
07197 199D                        18            .byte	$18
07198 199E                        7E            .byte	$7E
07199 199F                        18            .byte	$18
07200 19A0                        18            .byte	$18
07201 19A1                        00            .byte	0
07202 19A2                        00            .byte	0
07203 19A3                        00            .byte	0
07204 19A4                        00            .byte	0
07205 19A5                        00            .byte	0
07206                                           ! 1013  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07207 19A6                        00            .byte	0
07208 19A7                        00            .byte	0
07209 19A8                        00            .byte	0
07210 19A9                        00            .byte	0
07211 19AA                        00            .byte	0
07212 19AB                        00            .byte	0
07213 19AC                        00            .byte	0
07214 19AD                        00            .byte	0
07215 19AE                        18            .byte	$18
07216 19AF                        18            .byte	$18
07217 19B0                        18            .byte	$18
07218 19B1                        30            .byte	$30
07219 19B2                        00            .byte	0
07220 19B3                        00            .byte	0
07221                                           ! 1014  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07222 19B4                        00            .byte	0
07223 19B5                        00            .byte	0
07224 19B6                        00            .byte	0
07225 19B7                        00            .byte	0
07226 19B8                        00            .byte	0
07227 19B9                        00            .byte	0
07228 19BA                        FE            .byte	$FE
07229 19BB                        00            .byte	0
07230 19BC                        00            .byte	0
07231 19BD                        00            .byte	0
07232 19BE                        00            .byte	0
07233 19BF                        00            .byte	0
07234 19C0                        00            .byte	0
07235 19C1                        00            .byte	0
07236                                           ! 1015  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07237 19C2                        00            .byte	0
07238 19C3                        00            .byte	0
07239 19C4                        00            .byte	0
07240 19C5                        00            .byte	0
07241 19C6                        00            .byte	0
07242 19C7                        00            .byte	0
07243 19C8                        00            .byte	0
07244 19C9                        00            .byte	0
07245 19CA                        00            .byte	0
07246 19CB                        18            .byte	$18
07247 19CC                        18            .byte	$18
07248 19CD                        00            .byte	0
07249 19CE                        00            .byte	0
07250 19CF                        00            .byte	0
07251                                           ! 1016  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07252 19D0                        00            .byte	0
07253 19D1                        00            .byte	0
07254 19D2                        02            .byte	2
07255 19D3                        06            .byte	6
07256 19D4                        0C            .byte	$C
07257 19D5                        18            .byte	$18
07258 19D6                        30            .byte	$30
07259 19D7                        60            .byte	$60
07260 19D8                        C0            .byte	$C0
07261 19D9                        80            .byte	$80
07262 19DA                        00            .byte	0
07263 19DB                        00            .byte	0
07264 19DC                        00            .byte	0
07265 19DD                        00            .byte	0
07266                                           ! 1017  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07267 19DE                        00            .byte	0
07268 19DF                        00            .byte	0
07269 19E0                        7C            .byte	$7C
07270 19E1                        C6            .byte	$C6
07271 19E2                        CE            .byte	$CE
07272 19E3                        DE            .byte	$DE
07273 19E4                        F6            .byte	$F6
07274 19E5                        E6            .byte	$E6
07275 19E6                        C6            .byte	$C6
07276 19E7                        C6            .byte	$C6
07277 19E8                        7C            .byte	$7C
07278 19E9                        00            .byte	0
07279 19EA                        00            .byte	0
07280 19EB                        00            .byte	0
07281                                           ! 1018  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07282 19EC                        00            .byte	0
07283 19ED                        00            .byte	0
07284 19EE                        18            .byte	$18
07285 19EF                        38            .byte	$38
07286 19F0                        78            .byte	$78
07287 19F1                        18            .byte	$18
07288 19F2                        18            .byte	$18
07289 19F3                        18            .byte	$18
07290 19F4                        18            .byte	$18
07291 19F5                        18            .byte	$18
07292 19F6                        7E            .byte	$7E
07293 19F7                        00            .byte	0
07294 19F8                        00            .byte	0
07295 19F9                        00            .byte	0
07296                                           ! 1019  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07297 19FA                        00            .byte	0
07298 19FB                        00            .byte	0
07299 19FC                        7C            .byte	$7C
07300 19FD                        C6            .byte	$C6
07301 19FE                        06            .byte	6
07302 19FF                        0C            .byte	$C
07303 1A00                        18            .byte	$18
07304 1A01                        30            .byte	$30
07305 1A02                        60            .byte	$60
07306 1A03                        C6            .byte	$C6
07307 1A04                        FE            .byte	$FE
07308 1A05                        00            .byte	0
07309 1A06                        00            .byte	0
07310 1A07                        00            .byte	0
07311                                           ! 1020  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07312 1A08                        00            .byte	0
07313 1A09                        00            .byte	0
07314 1A0A                        7C            .byte	$7C
07315 1A0B                        C6            .byte	$C6
07316 1A0C                        06            .byte	6
07317 1A0D                        06            .byte	6
07318 1A0E                        3C            .byte	$3C
07319 1A0F                        06            .byte	6
07320 1A10                        06            .byte	6
07321 1A11                        C6            .byte	$C6
07322 1A12                        7C            .byte	$7C
07323 1A13                        00            .byte	0
07324 1A14                        00            .byte	0
07325 1A15                        00            .byte	0
07326                                           ! 1021  0x00, 0x00, 0x0c, 0x1
07327 1A16                        00            .byte	0
07328 1A17                        00            .byte	0
07329 1A18                        0C            .byte	$C
07330                                           ! 1021 c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07331 1A19                        1C            .byte	$1C
07332 1A1A                        3C            .byte	$3C
07333 1A1B                        6C            .byte	$6C
07334 1A1C                        CC            .byte	$CC
07335 1A1D                        FE            .byte	$FE
07336 1A1E                        0C            .byte	$C
07337 1A1F                        0C            .byte	$C
07338 1A20                        1E            .byte	$1E
07339 1A21                        00            .byte	0
07340 1A22                        00            .byte	0
07341 1A23                        00            .byte	0
07342                                           ! 1022  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07343 1A24                        00            .byte	0
07344 1A25                        00            .byte	0
07345 1A26                        FE            .byte	$FE
07346 1A27                        C0            .byte	$C0
07347 1A28                        C0            .byte	$C0
07348 1A29                        C0            .byte	$C0
07349 1A2A                        FC            .byte	$FC
07350 1A2B                        06            .byte	6
07351 1A2C                        06            .byte	6
07352 1A2D                        C6            .byte	$C6
07353 1A2E                        7C            .byte	$7C
07354 1A2F                        00            .byte	0
07355 1A30                        00            .byte	0
07356 1A31                        00            .byte	0
07357                                           ! 1023  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07358 1A32                        00            .byte	0
07359 1A33                        00            .byte	0
07360 1A34                        38            .byte	$38
07361 1A35                        60            .byte	$60
07362 1A36                        C0            .byte	$C0
07363 1A37                        C0            .byte	$C0
07364 1A38                        FC            .byte	$FC
07365 1A39                        C6            .byte	$C6
07366 1A3A                        C6            .byte	$C6
07367 1A3B                        C6            .byte	$C6
07368 1A3C                        7C            .byte	$7C
07369 1A3D                        00            .byte	0
07370 1A3E                        00            .byte	0
07371 1A3F                        00            .byte	0
07372                                           ! 1024  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07373 1A40                        00            .byte	0
07374 1A41                        00            .byte	0
07375 1A42                        FE            .byte	$FE
07376 1A43                        C6            .byte	$C6
07377 1A44                        06            .byte	6
07378 1A45                        0C            .byte	$C
07379 1A46                        18            .byte	$18
07380 1A47                        30            .byte	$30
07381 1A48                        30            .byte	$30
07382 1A49                        30            .byte	$30
07383 1A4A                        30            .byte	$30
07384 1A4B                        00            .byte	0
07385 1A4C                        00            .byte	0
07386 1A4D                        00            .byte	0
07387                                           ! 1025  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07388 1A4E                        00            .byte	0
07389 1A4F                        00            .byte	0
07390 1A50                        7C            .byte	$7C
07391 1A51                        C6            .byte	$C6
07392 1A52                        C6            .byte	$C6
07393 1A53                        C6            .byte	$C6
07394 1A54                        7C            .byte	$7C
07395 1A55                        C6            .byte	$C6
07396 1A56                        C6            .byte	$C6
07397 1A57                        C6            .byte	$C6
07398 1A58                        7C            .byte	$7C
07399 1A59                        00            .byte	0
07400 1A5A                        00            .byte	0
07401 1A5B                        00            .byte	0
07402                                           ! 1026  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07403 1A5C                        00            .byte	0
07404 1A5D                        00            .byte	0
07405 1A5E                        7C            .byte	$7C
07406 1A5F                        C6            .byte	$C6
07407 1A60                        C6            .byte	$C6
07408 1A61                        C6            .byte	$C6
07409 1A62                        7E            .byte	$7E
07410 1A63                        06            .byte	6
07411 1A64                        06            .byte	6
07412 1A65                        0C            .byte	$C
07413 1A66                        78            .byte	$78
07414 1A67                        00            .byte	0
07415 1A68                        00            .byte	0
07416 1A69                        00            .byte	0
07417                                           ! 1027  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07418 1A6A                        00            .byte	0
07419 1A6B                        00            .byte	0
07420 1A6C                        00            .byte	0
07421 1A6D                        18            .byte	$18
07422 1A6E                        18            .byte	$18
07423 1A6F                        00            .byte	0
07424 1A70                        00            .byte	0
07425 1A71                        00            .byte	0
07426 1A72                        18            .byte	$18
07427 1A73                        18            .byte	$18
07428 1A74                        00            .byte	0
07429 1A75                        00            .byte	0
07430 1A76                        00            .byte	0
07431 1A77                        00            .byte	0
07432                                           ! 1028  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07433 1A78                        00            .byte	0
07434 1A79                        00            .byte	0
07435 1A7A                        00            .byte	0
07436 1A7B                        18            .byte	$18
07437 1A7C                        18            .byte	$18
07438 1A7D                        00            .byte	0
07439 1A7E                        00            .byte	0
07440 1A7F                        00            .byte	0
07441 1A80                        18            .byte	$18
07442 1A81                        18            .byte	$18
07443 1A82                        30            .byte	$30
07444 1A83                        00            .byte	0
07445 1A84                        00            .byte	0
07446 1A85                        00            .byte	0
07447                                           ! 1029  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07448 1A86                        00            .byte	0
07449 1A87                        00            .byte	0
07450 1A88                        06            .byte	6
07451 1A89                        0C            .byte	$C
07452 1A8A                        18            .byte	$18
07453 1A8B                        30            .byte	$30
07454 1A8C                        60            .byte	$60
07455 1A8D                        30            .byte	$30
07456 1A8E                        18            .byte	$18
07457 1A8F                        0C            .byte	$C
07458 1A90                        06            .byte	6
07459 1A91                        00            .byte	0
07460 1A92                        00            .byte	0
07461 1A93                        00            .byte	0
07462                                           ! 1030  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07463 1A94                        00            .byte	0
07464 1A95                        00            .byte	0
07465 1A96                        00            .byte	0
07466 1A97                        00            .byte	0
07467 1A98                        00            .byte	0
07468 1A99                        7E            .byte	$7E
07469 1A9A                        00            .byte	0
07470 1A9B                        00            .byte	0
07471 1A9C                        7E            .byte	$7E
07472 1A9D                        00            .byte	0
07473 1A9E                        00            .byte	0
07474 1A9F                        00            .byte	0
07475 1AA0                        00            .byte	0
07476 1AA1                        00            .byte	0
07477                                           ! 1031  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07478 1AA2                        00            .byte	0
07479 1AA3                        00            .byte	0
07480 1AA4                        60            .byte	$60
07481 1AA5                        30            .byte	$30
07482 1AA6                        18            .byte	$18
07483 1AA7                        0C            .byte	$C
07484 1AA8                        06            .byte	6
07485 1AA9                        0C            .byte	$C
07486 1AAA                        18            .byte	$18
07487 1AAB                        30            .byte	$30
07488 1AAC                        60            .byte	$60
07489 1AAD                        00            .byte	0
07490 1AAE                        00            .byte	0
07491 1AAF                        00            .byte	0
07492                                           ! 1032  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07493 1AB0                        00            .byte	0
07494 1AB1                        00            .byte	0
07495 1AB2                        7C            .byte	$7C
07496 1AB3                        C6            .byte	$C6
07497 1AB4                        C6            .byte	$C6
07498 1AB5                        0C            .byte	$C
07499 1AB6                        18            .byte	$18
07500 1AB7                        18            .byte	$18
07501 1AB8                        00            .byte	0
07502 1AB9                        18            .byte	$18
07503 1ABA                        18            .byte	$18
07504 1ABB                        00            .byte	0
07505 1ABC                        00            .byte	0
07506 1ABD                        00            .byte	0
07507                                           ! 1033  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07508 1ABE                        00            .byte	0
07509 1ABF                        00            .byte	0
07510 1AC0                        7C            .byte	$7C
07511 1AC1                        C6            .byte	$C6
07512 1AC2                        C6            .byte	$C6
07513 1AC3                        DE            .byte	$DE
07514 1AC4                        DE            .byte	$DE
07515 1AC5                        DE            .byte	$DE
07516 1AC6                        DC            .byte	$DC
07517 1AC7                        C0            .byte	$C0
07518 1AC8                        7C            .byte	$7C
07519 1AC9                        00            .byte	0
07520 1ACA                        00            .byte	0
07521 1ACB                        00            .byte	0
07522                                           ! 1034  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07523 1ACC                        00            .byte	0
07524 1ACD                        00            .byte	0
07525 1ACE                        10            .byte	$10
07526 1ACF                        38            .byte	$38
07527 1AD0                        6C            .byte	$6C
07528 1AD1                        C6            .byte	$C6
07529 1AD2                        C6            .byte	$C6
07530 1AD3                        FE            .byte	$FE
07531 1AD4                        C6            .byte	$C6
07532 1AD5                        C6            .byte	$C6
07533 1AD6                        C6            .byte	$C6
07534 1AD7                        00            .byte	0
07535 1AD8                        00            .byte	0
07536 1AD9                        00            .byte	0
07537                                           ! 1035  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07538 1ADA                        00            .byte	0
07539 1ADB                        00            .byte	0
07540 1ADC                        FC            .byte	$FC
07541 1ADD                        66            .byte	$66
07542 1ADE                        66            .byte	$66
07543 1ADF                        66            .byte	$66
07544 1AE0                        7C            .byte	$7C
07545 1AE1                        66            .byte	$66
07546 1AE2                        66            .byte	$66
07547 1AE3                        66            .byte	$66
07548 1AE4                        FC            .byte	$FC
07549 1AE5                        00            .byte	0
07550 1AE6                        00            .byte	0
07551 1AE7                        00            .byte	0
07552                                           ! 1036  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07553 1AE8                        00            .byte	0
07554 1AE9                        00            .byte	0
07555 1AEA                        3C            .byte	$3C
07556 1AEB                        66            .byte	$66
07557 1AEC                        C2            .byte	$C2
07558 1AED                        C0            .byte	$C0
07559 1AEE                        C0            .byte	$C0
07560 1AEF                        C0            .byte	$C0
07561 1AF0                        C2            .byte	$C2
07562 1AF1                        66            .byte	$66
07563 1AF2                        3C            .byte	$3C
07564 1AF3                        00            .byte	0
07565 1AF4                        00            .byte	0
07566 1AF5                        00            .byte	0
07567                                           ! 1037  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07568 1AF6                        00            .byte	0
07569 1AF7                        00            .byte	0
07570 1AF8                        F8            .byte	$F8
07571 1AF9                        6C            .byte	$6C
07572 1AFA                        66            .byte	$66
07573 1AFB                        66            .byte	$66
07574 1AFC                        66            .byte	$66
07575 1AFD                        66            .byte	$66
07576 1AFE                        66            .byte	$66
07577 1AFF                        6C            .byte	$6C
07578 1B00                        F8            .byte	$F8
07579 1B01                        00            .byte	0
07580 1B02                        00            .byte	0
07581 1B03                        00            .byte	0
07582                                           ! 1038  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07583 1B04                        00            .byte	0
07584 1B05                        00            .byte	0
07585 1B06                        FE            .byte	$FE
07586 1B07                        66            .byte	$66
07587 1B08                        62            .byte	$62
07588 1B09                        68            .byte	$68
07589 1B0A                        78            .byte	$78
07590 1B0B                        68            .byte	$68
07591 1B0C                        62            .byte	$62
07592 1B0D                        66            .byte	$66
07593 1B0E                        FE            .byte	$FE
07594 1B0F                        00            .byte	0
07595 1B10                        00            .byte	0
07596 1B11                        00            .byte	0
07597                                           ! 1039  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07598 1B12                        00            .byte	0
07599 1B13                        00            .byte	0
07600 1B14                        FE            .byte	$FE
07601 1B15                        66            .byte	$66
07602 1B16                        62            .byte	$62
07603 1B17                        68            .byte	$68
07604 1B18                        78            .byte	$78
07605 1B19                        68            .byte	$68
07606 1B1A                        60            .byte	$60
07607 1B1B                        60            .byte	$60
07608 1B1C                        F0            .byte	$F0
07609 1B1D                        00            .byte	0
07610 1B1E                        00            .byte	0
07611 1B1F                        00            .byte	0
07612                                           ! 1040  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07613 1B20                        00            .byte	0
07614 1B21                        00            .byte	0
07615 1B22                        3C            .byte	$3C
07616 1B23                        66            .byte	$66
07617 1B24                        C2            .byte	$C2
07618 1B25                        C0            .byte	$C0
07619 1B26                        C0            .byte	$C0
07620 1B27                        DE            .byte	$DE
07621 1B28                        C6            .byte	$C6
07622 1B29                        66            .byte	$66
07623 1B2A                        3A            .byte	$3A
07624 1B2B                        00            .byte	0
07625 1B2C                        00            .byte	0
07626 1B2D                        00            .byte	0
07627                                           ! 1041  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07628 1B2E                        00            .byte	0
07629 1B2F                        00            .byte	0
07630 1B30                        C6            .byte	$C6
07631 1B31                        C6            .byte	$C6
07632 1B32                        C6            .byte	$C6
07633 1B33                        C6            .byte	$C6
07634 1B34                        FE            .byte	$FE
07635 1B35                        C6            .byte	$C6
07636 1B36                        C6            .byte	$C6
07637 1B37                        C6            .byte	$C6
07638 1B38                        C6            .byte	$C6
07639 1B39                        00            .byte	0
07640 1B3A                        00            .byte	0
07641 1B3B                        00            .byte	0
07642                                           ! 1042  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07643 1B3C                        00            .byte	0
07644 1B3D                        00            .byte	0
07645 1B3E                        3C            .byte	$3C
07646 1B3F                        18            .byte	$18
07647 1B40                        18            .byte	$18
07648 1B41                        18            .byte	$18
07649 1B42                        18            .byte	$18
07650 1B43                        18            .byte	$18
07651 1B44                        18            .byte	$18
07652 1B45                        18            .byte	$18
07653 1B46                        3C            .byte	$3C
07654 1B47                        00            .byte	0
07655 1B48                        00            .byte	0
07656 1B49                        00            .byte	0
07657                                           ! 1043  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07658 1B4A                        00            .byte	0
07659 1B4B                        00            .byte	0
07660 1B4C                        1E            .byte	$1E
07661 1B4D                        0C            .byte	$C
07662 1B4E                        0C            .byte	$C
07663 1B4F                        0C            .byte	$C
07664 1B50                        0C            .byte	$C
07665 1B51                        0C            .byte	$C
07666 1B52                        CC            .byte	$CC
07667 1B53                        CC            .byte	$CC
07668 1B54                        78            .byte	$78
07669 1B55                        00            .byte	0
07670 1B56                        00            .byte	0
07671 1B57                        00            .byte	0
07672                                           ! 1044  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07673 1B58                        00            .byte	0
07674 1B59                        00            .byte	0
07675 1B5A                        E6            .byte	$E6
07676 1B5B                        66            .byte	$66
07677 1B5C                        6C            .byte	$6C
07678 1B5D                        6C            .byte	$6C
07679 1B5E                        78            .byte	$78
07680 1B5F                        6C            .byte	$6C
07681 1B60                        6C            .byte	$6C
07682 1B61                        66            .byte	$66
07683 1B62                        E6            .byte	$E6
07684 1B63                        00            .byte	0
07685 1B64                        00            .byte	0
07686 1B65                        00            .byte	0
07687                                           ! 1045  0x00, 0x00, 0xf0, 0x60, 0x60,
07688 1B66                        00            .byte	0
07689 1B67                        00            .byte	0
07690 1B68                        F0            .byte	$F0
07691 1B69                        60            .byte	$60
07692                                           ! 1045  0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07693 1B6A                        60            .byte	$60
07694 1B6B                        60            .byte	$60
07695 1B6C                        60            .byte	$60
07696 1B6D                        60            .byte	$60
07697 1B6E                        62            .byte	$62
07698 1B6F                        66            .byte	$66
07699 1B70                        FE            .byte	$FE
07700 1B71                        00            .byte	0
07701 1B72                        00            .byte	0
07702 1B73                        00            .byte	0
07703                                           ! 1046  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07704 1B74                        00            .byte	0
07705 1B75                        00            .byte	0
07706 1B76                        C6            .byte	$C6
07707 1B77                        EE            .byte	$EE
07708 1B78                        FE            .byte	$FE
07709 1B79                        FE            .byte	$FE
07710 1B7A                        D6            .byte	$D6
07711 1B7B                        C6            .byte	$C6
07712 1B7C                        C6            .byte	$C6
07713 1B7D                        C6            .byte	$C6
07714 1B7E                        C6            .byte	$C6
07715 1B7F                        00            .byte	0
07716 1B80                        00            .byte	0
07717 1B81                        00            .byte	0
07718                                           ! 1047  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07719 1B82                        00            .byte	0
07720 1B83                        00            .byte	0
07721 1B84                        C6            .byte	$C6
07722 1B85                        E6            .byte	$E6
07723 1B86                        F6            .byte	$F6
07724 1B87                        FE            .byte	$FE
07725 1B88                        DE            .byte	$DE
07726 1B89                        CE            .byte	$CE
07727 1B8A                        C6            .byte	$C6
07728 1B8B                        C6            .byte	$C6
07729 1B8C                        C6            .byte	$C6
07730 1B8D                        00            .byte	0
07731 1B8E                        00            .byte	0
07732 1B8F                        00            .byte	0
07733                                           ! 1048  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
07734 1B90                        00            .byte	0
07735 1B91                        00            .byte	0
07736 1B92                        38            .byte	$38
07737 1B93                        6C            .byte	$6C
07738 1B94                        C6            .byte	$C6
07739 1B95                        C6            .byte	$C6
07740 1B96                        C6            .byte	$C6
07741 1B97                        C6            .byte	$C6
07742 1B98                        C6            .byte	$C6
07743 1B99                        6C            .byte	$6C
07744 1B9A                        38            .byte	$38
07745 1B9B                        00            .byte	0
07746 1B9C                        00            .byte	0
07747 1B9D                        00            .byte	0
07748                                           ! 1049  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07749 1B9E                        00            .byte	0
07750 1B9F                        00            .byte	0
07751 1BA0                        FC            .byte	$FC
07752 1BA1                        66            .byte	$66
07753 1BA2                        66            .byte	$66
07754 1BA3                        66            .byte	$66
07755 1BA4                        7C            .byte	$7C
07756 1BA5                        60            .byte	$60
07757 1BA6                        60            .byte	$60
07758 1BA7                        60            .byte	$60
07759 1BA8                        F0            .byte	$F0
07760 1BA9                        00            .byte	0
07761 1BAA                        00            .byte	0
07762 1BAB                        00            .byte	0
07763                                           ! 1050  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
07764 1BAC                        00            .byte	0
07765 1BAD                        00            .byte	0
07766 1BAE                        7C            .byte	$7C
07767 1BAF                        C6            .byte	$C6
07768 1BB0                        C6            .byte	$C6
07769 1BB1                        C6            .byte	$C6
07770 1BB2                        C6            .byte	$C6
07771 1BB3                        D6            .byte	$D6
07772 1BB4                        DE            .byte	$DE
07773 1BB5                        7C            .byte	$7C
07774 1BB6                        0C            .byte	$C
07775 1BB7                        0E            .byte	$E
07776 1BB8                        00            .byte	0
07777 1BB9                        00            .byte	0
07778                                           ! 1051  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
07779 1BBA                        00            .byte	0
07780 1BBB                        00            .byte	0
07781 1BBC                        FC            .byte	$FC
07782 1BBD                        66            .byte	$66
07783 1BBE                        66            .byte	$66
07784 1BBF                        66            .byte	$66
07785 1BC0                        7C            .byte	$7C
07786 1BC1                        6C            .byte	$6C
07787 1BC2                        66            .byte	$66
07788 1BC3                        66            .byte	$66
07789 1BC4                        E6            .byte	$E6
07790 1BC5                        00            .byte	0
07791 1BC6                        00            .byte	0
07792 1BC7                        00            .byte	0
07793                                           ! 1052  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07794 1BC8                        00            .byte	0
07795 1BC9                        00            .byte	0
07796 1BCA                        7C            .byte	$7C
07797 1BCB                        C6            .byte	$C6
07798 1BCC                        C6            .byte	$C6
07799 1BCD                        60            .byte	$60
07800 1BCE                        38            .byte	$38
07801 1BCF                        0C            .byte	$C
07802 1BD0                        C6            .byte	$C6
07803 1BD1                        C6            .byte	$C6
07804 1BD2                        7C            .byte	$7C
07805 1BD3                        00            .byte	0
07806 1BD4                        00            .byte	0
07807 1BD5                        00            .byte	0
07808                                           ! 1053  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07809 1BD6                        00            .byte	0
07810 1BD7                        00            .byte	0
07811 1BD8                        7E            .byte	$7E
07812 1BD9                        7E            .byte	$7E
07813 1BDA                        5A            .byte	$5A
07814 1BDB                        18            .byte	$18
07815 1BDC                        18            .byte	$18
07816 1BDD                        18            .byte	$18
07817 1BDE                        18            .byte	$18
07818 1BDF                        18            .byte	$18
07819 1BE0                        3C            .byte	$3C
07820 1BE1                        00            .byte	0
07821 1BE2                        00            .byte	0
07822 1BE3                        00            .byte	0
07823                                           ! 1054  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07824 1BE4                        00            .byte	0
07825 1BE5                        00            .byte	0
07826 1BE6                        C6            .byte	$C6
07827 1BE7                        C6            .byte	$C6
07828 1BE8                        C6            .byte	$C6
07829 1BE9                        C6            .byte	$C6
07830 1BEA                        C6            .byte	$C6
07831 1BEB                        C6            .byte	$C6
07832 1BEC                        C6            .byte	$C6
07833 1BED                        C6            .byte	$C6
07834 1BEE                        7C            .byte	$7C
07835 1BEF                        00            .byte	0
07836 1BF0                        00            .byte	0
07837 1BF1                        00            .byte	0
07838                                           ! 1055  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
07839 1BF2                        00            .byte	0
07840 1BF3                        00            .byte	0
07841 1BF4                        C6            .byte	$C6
07842 1BF5                        C6            .byte	$C6
07843 1BF6                        C6            .byte	$C6
07844 1BF7                        C6            .byte	$C6
07845 1BF8                        C6            .byte	$C6
07846 1BF9                        C6            .byte	$C6
07847 1BFA                        6C            .byte	$6C
07848 1BFB                        38            .byte	$38
07849 1BFC                        10            .byte	$10
07850 1BFD                        00            .byte	0
07851 1BFE                        00            .byte	0
07852 1BFF                        00            .byte	0
07853                                           ! 1056  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
07854 1C00                        00            .byte	0
07855 1C01                        00            .byte	0
07856 1C02                        C6            .byte	$C6
07857 1C03                        C6            .byte	$C6
07858 1C04                        C6            .byte	$C6
07859 1C05                        C6            .byte	$C6
07860 1C06                        D6            .byte	$D6
07861 1C07                        D6            .byte	$D6
07862 1C08                        FE            .byte	$FE
07863 1C09                        7C            .byte	$7C
07864 1C0A                        6C            .byte	$6C
07865 1C0B                        00            .byte	0
07866 1C0C                        00            .byte	0
07867 1C0D                        00            .byte	0
07868                                           ! 1057  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07869 1C0E                        00            .byte	0
07870 1C0F                        00            .byte	0
07871 1C10                        C6            .byte	$C6
07872 1C11                        C6            .byte	$C6
07873 1C12                        6C            .byte	$6C
07874 1C13                        38            .byte	$38
07875 1C14                        38            .byte	$38
07876 1C15                        38            .byte	$38
07877 1C16                        6C            .byte	$6C
07878 1C17                        C6            .byte	$C6
07879 1C18                        C6            .byte	$C6
07880 1C19                        00            .byte	0
07881 1C1A                        00            .byte	0
07882 1C1B                        00            .byte	0
07883                                           ! 1058  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07884 1C1C                        00            .byte	0
07885 1C1D                        00            .byte	0
07886 1C1E                        66            .byte	$66
07887 1C1F                        66            .byte	$66
07888 1C20                        66            .byte	$66
07889 1C21                        66            .byte	$66
07890 1C22                        3C            .byte	$3C
07891 1C23                        18            .byte	$18
07892 1C24                        18            .byte	$18
07893 1C25                        18            .byte	$18
07894 1C26                        3C            .byte	$3C
07895 1C27                        00            .byte	0
07896 1C28                        00            .byte	0
07897 1C29                        00            .byte	0
07898                                           ! 1059  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07899 1C2A                        00            .byte	0
07900 1C2B                        00            .byte	0
07901 1C2C                        FE            .byte	$FE
07902 1C2D                        C6            .byte	$C6
07903 1C2E                        8C            .byte	$8C
07904 1C2F                        18            .byte	$18
07905 1C30                        30            .byte	$30
07906 1C31                        60            .byte	$60
07907 1C32                        C2            .byte	$C2
07908 1C33                        C6            .byte	$C6
07909 1C34                        FE            .byte	$FE
07910 1C35                        00            .byte	0
07911 1C36                        00            .byte	0
07912 1C37                        00            .byte	0
07913                                           ! 1060  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
07914 1C38                        00            .byte	0
07915 1C39                        00            .byte	0
07916 1C3A                        3C            .byte	$3C
07917 1C3B                        30            .byte	$30
07918 1C3C                        30            .byte	$30
07919 1C3D                        30            .byte	$30
07920 1C3E                        30            .byte	$30
07921 1C3F                        30            .byte	$30
07922 1C40                        30            .byte	$30
07923 1C41                        30            .byte	$30
07924 1C42                        3C            .byte	$3C
07925 1C43                        00            .byte	0
07926 1C44                        00            .byte	0
07927 1C45                        00            .byte	0
07928                                           ! 1061  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07929 1C46                        00            .byte	0
07930 1C47                        00            .byte	0
07931 1C48                        80            .byte	$80
07932 1C49                        C0            .byte	$C0
07933 1C4A                        E0            .byte	$E0
07934 1C4B                        70            .byte	$70
07935 1C4C                        38            .byte	$38
07936 1C4D                        1C            .byte	$1C
07937 1C4E                        0E            .byte	$E
07938 1C4F                        06            .byte	6
07939 1C50                        02            .byte	2
07940 1C51                        00            .byte	0
07941 1C52                        00            .byte	0
07942 1C53                        00            .byte	0
07943                                           ! 1062  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
07944 1C54                        00            .byte	0
07945 1C55                        00            .byte	0
07946 1C56                        3C            .byte	$3C
07947 1C57                        0C            .byte	$C
07948 1C58                        0C            .byte	$C
07949 1C59                        0C            .byte	$C
07950 1C5A                        0C            .byte	$C
07951 1C5B                        0C            .byte	$C
07952 1C5C                        0C            .byte	$C
07953 1C5D                        0C            .byte	$C
07954 1C5E                        3C            .byte	$3C
07955 1C5F                        00            .byte	0
07956 1C60                        00            .byte	0
07957 1C61                        00            .byte	0
07958                                           ! 1063  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07959 1C62                        10            .byte	$10
07960 1C63                        38            .byte	$38
07961 1C64                        6C            .byte	$6C
07962 1C65                        C6            .byte	$C6
07963 1C66                        00            .byte	0
07964 1C67                        00            .byte	0
07965 1C68                        00            .byte	0
07966 1C69                        00            .byte	0
07967 1C6A                        00            .byte	0
07968 1C6B                        00            .byte	0
07969 1C6C                        00            .byte	0
07970 1C6D                        00            .byte	0
07971 1C6E                        00            .byte	0
07972 1C6F                        00            .byte	0
07973                                           ! 1064  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
07974 1C70                        00            .byte	0
07975 1C71                        00            .byte	0
07976 1C72                        00            .byte	0
07977 1C73                        00            .byte	0
07978 1C74                        00            .byte	0
07979 1C75                        00            .byte	0
07980 1C76                        00            .byte	0
07981 1C77                        00            .byte	0
07982 1C78                        00            .byte	0
07983 1C79                        00            .byte	0
07984 1C7A                        00            .byte	0
07985 1C7B                        00            .byte	0
07986 1C7C                        FF            .byte	$FF
07987 1C7D                        00            .byte	0
07988                                           ! 1065  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07989 1C7E                        30            .byte	$30
07990 1C7F                        30            .byte	$30
07991 1C80                        18            .byte	$18
07992 1C81                        00            .byte	0
07993 1C82                        00            .byte	0
07994 1C83                        00            .byte	0
07995 1C84                        00            .byte	0
07996 1C85                        00            .byte	0
07997 1C86                        00            .byte	0
07998 1C87                        00            .byte	0
07999 1C88                        00            .byte	0
08000 1C89                        00            .byte	0
08001 1C8A                        00            .byte	0
08002 1C8B                        00            .byte	0
08003                                           ! 1066  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08004 1C8C                        00            .byte	0
08005 1C8D                        00            .byte	0
08006 1C8E                        00            .byte	0
08007 1C8F                        00            .byte	0
08008 1C90                        00            .byte	0
08009 1C91                        78            .byte	$78
08010 1C92                        0C            .byte	$C
08011 1C93                        7C            .byte	$7C
08012 1C94                        CC            .byte	$CC
08013 1C95                        CC            .byte	$CC
08014 1C96                        76            .byte	$76
08015 1C97                        00            .byte	0
08016 1C98                        00            .byte	0
08017 1C99                        00            .byte	0
08018                                           ! 1067  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08019 1C9A                        00            .byte	0
08020 1C9B                        00            .byte	0
08021 1C9C                        E0            .byte	$E0
08022 1C9D                        60            .byte	$60
08023 1C9E                        60            .byte	$60
08024 1C9F                        78            .byte	$78
08025 1CA0                        6C            .byte	$6C
08026 1CA1                        66            .byte	$66
08027 1CA2                        66            .byte	$66
08028 1CA3                        66            .byte	$66
08029 1CA4                        7C            .byte	$7C
08030 1CA5                        00            .byte	0
08031 1CA6                        00            .byte	0
08032 1CA7                        00            .byte	0
08033                                           ! 1068  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08034 1CA8                        00            .byte	0
08035 1CA9                        00            .byte	0
08036 1CAA                        00            .byte	0
08037 1CAB                        00            .byte	0
08038 1CAC                        00            .byte	0
08039 1CAD                        7C            .byte	$7C
08040 1CAE                        C6            .byte	$C6
08041 1CAF                        C0            .byte	$C0
08042 1CB0                        C0            .byte	$C0
08043 1CB1                        C6            .byte	$C6
08044 1CB2                        7C            .byte	$7C
08045 1CB3                        00            .byte	0
08046 1CB4                        00            .byte	0
08047 1CB5                        00            .byte	0
08048                                           ! 1069  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0
08049 1CB6                        00            .byte	0
08050 1CB7                        00            .byte	0
08051 1CB8                        1C            .byte	$1C
08052 1CB9                        0C            .byte	$C
08053 1CBA                        0C            .byte	$C
08054 1CBB                        3C            .byte	$3C
08055                                           ! 1069 x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08056 1CBC                        6C            .byte	$6C
08057 1CBD                        CC            .byte	$CC
08058 1CBE                        CC            .byte	$CC
08059 1CBF                        CC            .byte	$CC
08060 1CC0                        76            .byte	$76
08061 1CC1                        00            .byte	0
08062 1CC2                        00            .byte	0
08063 1CC3                        00            .byte	0
08064                                           ! 1070  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08065 1CC4                        00            .byte	0
08066 1CC5                        00            .byte	0
08067 1CC6                        00            .byte	0
08068 1CC7                        00            .byte	0
08069 1CC8                        00            .byte	0
08070 1CC9                        7C            .byte	$7C
08071 1CCA                        C6            .byte	$C6
08072 1CCB                        FE            .byte	$FE
08073 1CCC                        C0            .byte	$C0
08074 1CCD                        C6            .byte	$C6
08075 1CCE                        7C            .byte	$7C
08076 1CCF                        00            .byte	0
08077 1CD0                        00            .byte	0
08078 1CD1                        00            .byte	0
08079                                           ! 1071  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08080 1CD2                        00            .byte	0
08081 1CD3                        00            .byte	0
08082 1CD4                        38            .byte	$38
08083 1CD5                        6C            .byte	$6C
08084 1CD6                        64            .byte	$64
08085 1CD7                        60            .byte	$60
08086 1CD8                        F0            .byte	$F0
08087 1CD9                        60            .byte	$60
08088 1CDA                        60            .byte	$60
08089 1CDB                        60            .byte	$60
08090 1CDC                        F0            .byte	$F0
08091 1CDD                        00            .byte	0
08092 1CDE                        00            .byte	0
08093 1CDF                        00            .byte	0
08094                                           ! 1072  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08095 1CE0                        00            .byte	0
08096 1CE1                        00            .byte	0
08097 1CE2                        00            .byte	0
08098 1CE3                        00            .byte	0
08099 1CE4                        00            .byte	0
08100 1CE5                        76            .byte	$76
08101 1CE6                        CC            .byte	$CC
08102 1CE7                        CC            .byte	$CC
08103 1CE8                        CC            .byte	$CC
08104 1CE9                        7C            .byte	$7C
08105 1CEA                        0C            .byte	$C
08106 1CEB                        CC            .byte	$CC
08107 1CEC                        78            .byte	$78
08108 1CED                        00            .byte	0
08109                                           ! 1073  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08110 1CEE                        00            .byte	0
08111 1CEF                        00            .byte	0
08112 1CF0                        E0            .byte	$E0
08113 1CF1                        60            .byte	$60
08114 1CF2                        60            .byte	$60
08115 1CF3                        6C            .byte	$6C
08116 1CF4                        76            .byte	$76
08117 1CF5                        66            .byte	$66
08118 1CF6                        66            .byte	$66
08119 1CF7                        66            .byte	$66
08120 1CF8                        E6            .byte	$E6
08121 1CF9                        00            .byte	0
08122 1CFA                        00            .byte	0
08123 1CFB                        00            .byte	0
08124                                           ! 1074  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08125 1CFC                        00            .byte	0
08126 1CFD                        00            .byte	0
08127 1CFE                        18            .byte	$18
08128 1CFF                        18            .byte	$18
08129 1D00                        00            .byte	0
08130 1D01                        38            .byte	$38
08131 1D02                        18            .byte	$18
08132 1D03                        18            .byte	$18
08133 1D04                        18            .byte	$18
08134 1D05                        18            .byte	$18
08135 1D06                        3C            .byte	$3C
08136 1D07                        00            .byte	0
08137 1D08                        00            .byte	0
08138 1D09                        00            .byte	0
08139                                           ! 1075  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08140 1D0A                        00            .byte	0
08141 1D0B                        00            .byte	0
08142 1D0C                        06            .byte	6
08143 1D0D                        06            .byte	6
08144 1D0E                        00            .byte	0
08145 1D0F                        0E            .byte	$E
08146 1D10                        06            .byte	6
08147 1D11                        06            .byte	6
08148 1D12                        06            .byte	6
08149 1D13                        06            .byte	6
08150 1D14                        66            .byte	$66
08151 1D15                        66            .byte	$66
08152 1D16                        3C            .byte	$3C
08153 1D17                        00            .byte	0
08154                                           ! 1076  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08155 1D18                        00            .byte	0
08156 1D19                        00            .byte	0
08157 1D1A                        E0            .byte	$E0
08158 1D1B                        60            .byte	$60
08159 1D1C                        60            .byte	$60
08160 1D1D                        66            .byte	$66
08161 1D1E                        6C            .byte	$6C
08162 1D1F                        78            .byte	$78
08163 1D20                        6C            .byte	$6C
08164 1D21                        66            .byte	$66
08165 1D22                        E6            .byte	$E6
08166 1D23                        00            .byte	0
08167 1D24                        00            .byte	0
08168 1D25                        00            .byte	0
08169                                           ! 1077  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08170 1D26                        00            .byte	0
08171 1D27                        00            .byte	0
08172 1D28                        38            .byte	$38
08173 1D29                        18            .byte	$18
08174 1D2A                        18            .byte	$18
08175 1D2B                        18            .byte	$18
08176 1D2C                        18            .byte	$18
08177 1D2D                        18            .byte	$18
08178 1D2E                        18            .byte	$18
08179 1D2F                        18            .byte	$18
08180 1D30                        3C            .byte	$3C
08181 1D31                        00            .byte	0
08182 1D32                        00            .byte	0
08183 1D33                        00            .byte	0
08184                                           ! 1078  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08185 1D34                        00            .byte	0
08186 1D35                        00            .byte	0
08187 1D36                        00            .byte	0
08188 1D37                        00            .byte	0
08189 1D38                        00            .byte	0
08190 1D39                        EC            .byte	$EC
08191 1D3A                        FE            .byte	$FE
08192 1D3B                        D6            .byte	$D6
08193 1D3C                        D6            .byte	$D6
08194 1D3D                        D6            .byte	$D6
08195 1D3E                        C6            .byte	$C6
08196 1D3F                        00            .byte	0
08197 1D40                        00            .byte	0
08198 1D41                        00            .byte	0
08199                                           ! 1079  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08200 1D42                        00            .byte	0
08201 1D43                        00            .byte	0
08202 1D44                        00            .byte	0
08203 1D45                        00            .byte	0
08204 1D46                        00            .byte	0
08205 1D47                        DC            .byte	$DC
08206 1D48                        66            .byte	$66
08207 1D49                        66            .byte	$66
08208 1D4A                        66            .byte	$66
08209 1D4B                        66            .byte	$66
08210 1D4C                        66            .byte	$66
08211 1D4D                        00            .byte	0
08212 1D4E                        00            .byte	0
08213 1D4F                        00            .byte	0
08214                                           ! 1080  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08215 1D50                        00            .byte	0
08216 1D51                        00            .byte	0
08217 1D52                        00            .byte	0
08218 1D53                        00            .byte	0
08219 1D54                        00            .byte	0
08220 1D55                        7C            .byte	$7C
08221 1D56                        C6            .byte	$C6
08222 1D57                        C6            .byte	$C6
08223 1D58                        C6            .byte	$C6
08224 1D59                        C6            .byte	$C6
08225 1D5A                        7C            .byte	$7C
08226 1D5B                        00            .byte	0
08227 1D5C                        00            .byte	0
08228 1D5D                        00            .byte	0
08229                                           ! 1081  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08230 1D5E                        00            .byte	0
08231 1D5F                        00            .byte	0
08232 1D60                        00            .byte	0
08233 1D61                        00            .byte	0
08234 1D62                        00            .byte	0
08235 1D63                        DC            .byte	$DC
08236 1D64                        66            .byte	$66
08237 1D65                        66            .byte	$66
08238 1D66                        66            .byte	$66
08239 1D67                        7C            .byte	$7C
08240 1D68                        60            .byte	$60
08241 1D69                        60            .byte	$60
08242 1D6A                        F0            .byte	$F0
08243 1D6B                        00            .byte	0
08244                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08245 1D6C                        00            .byte	0
08246 1D6D                        00            .byte	0
08247 1D6E                        00            .byte	0
08248 1D6F                        00            .byte	0
08249 1D70                        00            .byte	0
08250 1D71                        76            .byte	$76
08251 1D72                        CC            .byte	$CC
08252 1D73                        CC            .byte	$CC
08253 1D74                        CC            .byte	$CC
08254 1D75                        7C            .byte	$7C
08255 1D76                        0C            .byte	$C
08256 1D77                        0C            .byte	$C
08257 1D78                        1E            .byte	$1E
08258 1D79                        00            .byte	0
08259                                           ! 1083  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08260 1D7A                        00            .byte	0
08261 1D7B                        00            .byte	0
08262 1D7C                        00            .byte	0
08263 1D7D                        00            .byte	0
08264 1D7E                        00            .byte	0
08265 1D7F                        DC            .byte	$DC
08266 1D80                        76            .byte	$76
08267 1D81                        66            .byte	$66
08268 1D82                        60            .byte	$60
08269 1D83                        60            .byte	$60
08270 1D84                        F0            .byte	$F0
08271 1D85                        00            .byte	0
08272 1D86                        00            .byte	0
08273 1D87                        00            .byte	0
08274                                           ! 1084  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08275 1D88                        00            .byte	0
08276 1D89                        00            .byte	0
08277 1D8A                        00            .byte	0
08278 1D8B                        00            .byte	0
08279 1D8C                        00            .byte	0
08280 1D8D                        7C            .byte	$7C
08281 1D8E                        C6            .byte	$C6
08282 1D8F                        70            .byte	$70
08283 1D90                        1C            .byte	$1C
08284 1D91                        C6            .byte	$C6
08285 1D92                        7C            .byte	$7C
08286 1D93                        00            .byte	0
08287 1D94                        00            .byte	0
08288 1D95                        00            .byte	0
08289                                           ! 1085  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08290 1D96                        00            .byte	0
08291 1D97                        00            .byte	0
08292 1D98                        10            .byte	$10
08293 1D99                        30            .byte	$30
08294 1D9A                        30            .byte	$30
08295 1D9B                        FC            .byte	$FC
08296 1D9C                        30            .byte	$30
08297 1D9D                        30            .byte	$30
08298 1D9E                        30            .byte	$30
08299 1D9F                        36            .byte	$36
08300 1DA0                        1C            .byte	$1C
08301 1DA1                        00            .byte	0
08302 1DA2                        00            .byte	0
08303 1DA3                        00            .byte	0
08304                                           ! 1086  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08305 1DA4                        00            .byte	0
08306 1DA5                        00            .byte	0
08307 1DA6                        00            .byte	0
08308 1DA7                        00            .byte	0
08309 1DA8                        00            .byte	0
08310 1DA9                        CC            .byte	$CC
08311 1DAA                        CC            .byte	$CC
08312 1DAB                        CC            .byte	$CC
08313 1DAC                        CC            .byte	$CC
08314 1DAD                        CC            .byte	$CC
08315 1DAE                        76            .byte	$76
08316 1DAF                        00            .byte	0
08317 1DB0                        00            .byte	0
08318 1DB1                        00            .byte	0
08319                                           ! 1087  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08320 1DB2                        00            .byte	0
08321 1DB3                        00            .byte	0
08322 1DB4                        00            .byte	0
08323 1DB5                        00            .byte	0
08324 1DB6                        00            .byte	0
08325 1DB7                        66            .byte	$66
08326 1DB8                        66            .byte	$66
08327 1DB9                        66            .byte	$66
08328 1DBA                        66            .byte	$66
08329 1DBB                        3C            .byte	$3C
08330 1DBC                        18            .byte	$18
08331 1DBD                        00            .byte	0
08332 1DBE                        00            .byte	0
08333 1DBF                        00            .byte	0
08334                                           ! 1088  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08335 1DC0                        00            .byte	0
08336 1DC1                        00            .byte	0
08337 1DC2                        00            .byte	0
08338 1DC3                        00            .byte	0
08339 1DC4                        00            .byte	0
08340 1DC5                        C6            .byte	$C6
08341 1DC6                        C6            .byte	$C6
08342 1DC7                        D6            .byte	$D6
08343 1DC8                        D6            .byte	$D6
08344 1DC9                        FE            .byte	$FE
08345 1DCA                        6C            .byte	$6C
08346 1DCB                        00            .byte	0
08347 1DCC                        00            .byte	0
08348 1DCD                        00            .byte	0
08349                                           ! 1089  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08350 1DCE                        00            .byte	0
08351 1DCF                        00            .byte	0
08352 1DD0                        00            .byte	0
08353 1DD1                        00            .byte	0
08354 1DD2                        00            .byte	0
08355 1DD3                        C6            .byte	$C6
08356 1DD4                        6C            .byte	$6C
08357 1DD5                        38            .byte	$38
08358 1DD6                        38            .byte	$38
08359 1DD7                        6C            .byte	$6C
08360 1DD8                        C6            .byte	$C6
08361 1DD9                        00            .byte	0
08362 1DDA                        00            .byte	0
08363 1DDB                        00            .byte	0
08364                                           ! 1090  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08365 1DDC                        00            .byte	0
08366 1DDD                        00            .byte	0
08367 1DDE                        00            .byte	0
08368 1DDF                        00            .byte	0
08369 1DE0                        00            .byte	0
08370 1DE1                        C6            .byte	$C6
08371 1DE2                        C6            .byte	$C6
08372 1DE3                        C6            .byte	$C6
08373 1DE4                        C6            .byte	$C6
08374 1DE5                        7E            .byte	$7E
08375 1DE6                        06            .byte	6
08376 1DE7                        0C            .byte	$C
08377 1DE8                        F8            .byte	$F8
08378 1DE9                        00            .byte	0
08379                                           ! 1091  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08380 1DEA                        00            .byte	0
08381 1DEB                        00            .byte	0
08382 1DEC                        00            .byte	0
08383 1DED                        00            .byte	0
08384 1DEE                        00            .byte	0
08385 1DEF                        FE            .byte	$FE
08386 1DF0                        CC            .byte	$CC
08387 1DF1                        18            .byte	$18
08388 1DF2                        30            .byte	$30
08389 1DF3                        66            .byte	$66
08390 1DF4                        FE            .byte	$FE
08391 1DF5                        00            .byte	0
08392 1DF6                        00            .byte	0
08393 1DF7                        00            .byte	0
08394                                           ! 1092  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08395 1DF8                        00            .byte	0
08396 1DF9                        00            .byte	0
08397 1DFA                        0E            .byte	$E
08398 1DFB                        18            .byte	$18
08399 1DFC                        18            .byte	$18
08400 1DFD                        18            .byte	$18
08401 1DFE                        70            .byte	$70
08402 1DFF                        18            .byte	$18
08403 1E00                        18            .byte	$18
08404 1E01                        18            .byte	$18
08405 1E02                        0E            .byte	$E
08406 1E03                        00            .byte	0
08407 1E04                        00            .byte	0
08408 1E05                        00            .byte	0
08409                                           ! 1093  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x1
08410 1E06                        00            .byte	0
08411 1E07                        00            .byte	0
08412 1E08                        18            .byte	$18
08413 1E09                        18            .byte	$18
08414 1E0A                        18            .byte	$18
08415 1E0B                        18            .byte	$18
08416 1E0C                        00            .byte	0
08417                                           ! 1093 8, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08418 1E0D                        18            .byte	$18
08419 1E0E                        18            .byte	$18
08420 1E0F                        18            .byte	$18
08421 1E10                        18            .byte	$18
08422 1E11                        00            .byte	0
08423 1E12                        00            .byte	0
08424 1E13                        00            .byte	0
08425                                           ! 1094  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08426 1E14                        00            .byte	0
08427 1E15                        00            .byte	0
08428 1E16                        70            .byte	$70
08429 1E17                        18            .byte	$18
08430 1E18                        18            .byte	$18
08431 1E19                        18            .byte	$18
08432 1E1A                        0E            .byte	$E
08433 1E1B                        18            .byte	$18
08434 1E1C                        18            .byte	$18
08435 1E1D                        18            .byte	$18
08436 1E1E                        70            .byte	$70
08437 1E1F                        00            .byte	0
08438 1E20                        00            .byte	0
08439 1E21                        00            .byte	0
08440                                           ! 1095  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08441 1E22                        00            .byte	0
08442 1E23                        00            .byte	0
08443 1E24                        76            .byte	$76
08444 1E25                        DC            .byte	$DC
08445 1E26                        00            .byte	0
08446 1E27                        00            .byte	0
08447 1E28                        00            .byte	0
08448 1E29                        00            .byte	0
08449 1E2A                        00            .byte	0
08450 1E2B                        00            .byte	0
08451 1E2C                        00            .byte	0
08452 1E2D                        00            .byte	0
08453 1E2E                        00            .byte	0
08454 1E2F                        00            .byte	0
08455                                           ! 1096  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08456 1E30                        00            .byte	0
08457 1E31                        00            .byte	0
08458 1E32                        00            .byte	0
08459 1E33                        00            .byte	0
08460 1E34                        10            .byte	$10
08461 1E35                        38            .byte	$38
08462 1E36                        6C            .byte	$6C
08463 1E37                        C6            .byte	$C6
08464 1E38                        C6            .byte	$C6
08465 1E39                        FE            .byte	$FE
08466 1E3A                        00            .byte	0
08467 1E3B                        00            .byte	0
08468 1E3C                        00            .byte	0
08469 1E3D                        00            .byte	0
08470                                           ! 1097  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08471 1E3E                        00            .byte	0
08472 1E3F                        00            .byte	0
08473 1E40                        3C            .byte	$3C
08474 1E41                        66            .byte	$66
08475 1E42                        C2            .byte	$C2
08476 1E43                        C0            .byte	$C0
08477 1E44                        C0            .byte	$C0
08478 1E45                        C2            .byte	$C2
08479 1E46                        66            .byte	$66
08480 1E47                        3C            .byte	$3C
08481 1E48                        0C            .byte	$C
08482 1E49                        06            .byte	6
08483 1E4A                        7C            .byte	$7C
08484 1E4B                        00            .byte	0
08485                                           ! 1098  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08486 1E4C                        00            .byte	0
08487 1E4D                        00            .byte	0
08488 1E4E                        CC            .byte	$CC
08489 1E4F                        CC            .byte	$CC
08490 1E50                        00            .byte	0
08491 1E51                        CC            .byte	$CC
08492 1E52                        CC            .byte	$CC
08493 1E53                        CC            .byte	$CC
08494 1E54                        CC            .byte	$CC
08495 1E55                        CC            .byte	$CC
08496 1E56                        76            .byte	$76
08497 1E57                        00            .byte	0
08498 1E58                        00            .byte	0
08499 1E59                        00            .byte	0
08500                                           ! 1099  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08501 1E5A                        00            .byte	0
08502 1E5B                        0C            .byte	$C
08503 1E5C                        18            .byte	$18
08504 1E5D                        30            .byte	$30
08505 1E5E                        00            .byte	0
08506 1E5F                        7C            .byte	$7C
08507 1E60                        C6            .byte	$C6
08508 1E61                        FE            .byte	$FE
08509 1E62                        C0            .byte	$C0
08510 1E63                        C6            .byte	$C6
08511 1E64                        7C            .byte	$7C
08512 1E65                        00            .byte	0
08513 1E66                        00            .byte	0
08514 1E67                        00            .byte	0
08515                                           ! 1100  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08516 1E68                        00            .byte	0
08517 1E69                        10            .byte	$10
08518 1E6A                        38            .byte	$38
08519 1E6B                        6C            .byte	$6C
08520 1E6C                        00            .byte	0
08521 1E6D                        78            .byte	$78
08522 1E6E                        0C            .byte	$C
08523 1E6F                        7C            .byte	$7C
08524 1E70                        CC            .byte	$CC
08525 1E71                        CC            .byte	$CC
08526 1E72                        76            .byte	$76
08527 1E73                        00            .byte	0
08528 1E74                        00            .byte	0
08529 1E75                        00            .byte	0
08530                                           ! 1101  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08531 1E76                        00            .byte	0
08532 1E77                        00            .byte	0
08533 1E78                        CC            .byte	$CC
08534 1E79                        CC            .byte	$CC
08535 1E7A                        00            .byte	0
08536 1E7B                        78            .byte	$78
08537 1E7C                        0C            .byte	$C
08538 1E7D                        7C            .byte	$7C
08539 1E7E                        CC            .byte	$CC
08540 1E7F                        CC            .byte	$CC
08541 1E80                        76            .byte	$76
08542 1E81                        00            .byte	0
08543 1E82                        00            .byte	0
08544 1E83                        00            .byte	0
08545                                           ! 1102  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08546 1E84                        00            .byte	0
08547 1E85                        60            .byte	$60
08548 1E86                        30            .byte	$30
08549 1E87                        18            .byte	$18
08550 1E88                        00            .byte	0
08551 1E89                        78            .byte	$78
08552 1E8A                        0C            .byte	$C
08553 1E8B                        7C            .byte	$7C
08554 1E8C                        CC            .byte	$CC
08555 1E8D                        CC            .byte	$CC
08556 1E8E                        76            .byte	$76
08557 1E8F                        00            .byte	0
08558 1E90                        00            .byte	0
08559 1E91                        00            .byte	0
08560                                           ! 1103  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08561 1E92                        00            .byte	0
08562 1E93                        38            .byte	$38
08563 1E94                        6C            .byte	$6C
08564 1E95                        38            .byte	$38
08565 1E96                        00            .byte	0
08566 1E97                        78            .byte	$78
08567 1E98                        0C            .byte	$C
08568 1E99                        7C            .byte	$7C
08569 1E9A                        CC            .byte	$CC
08570 1E9B                        CC            .byte	$CC
08571 1E9C                        76            .byte	$76
08572 1E9D                        00            .byte	0
08573 1E9E                        00            .byte	0
08574 1E9F                        00            .byte	0
08575                                           ! 1104  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08576 1EA0                        00            .byte	0
08577 1EA1                        00            .byte	0
08578 1EA2                        00            .byte	0
08579 1EA3                        00            .byte	0
08580 1EA4                        3C            .byte	$3C
08581 1EA5                        66            .byte	$66
08582 1EA6                        60            .byte	$60
08583 1EA7                        66            .byte	$66
08584 1EA8                        3C            .byte	$3C
08585 1EA9                        0C            .byte	$C
08586 1EAA                        06            .byte	6
08587 1EAB                        3C            .byte	$3C
08588 1EAC                        00            .byte	0
08589 1EAD                        00            .byte	0
08590                                           ! 1105  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08591 1EAE                        00            .byte	0
08592 1EAF                        10            .byte	$10
08593 1EB0                        38            .byte	$38
08594 1EB1                        6C            .byte	$6C
08595 1EB2                        00            .byte	0
08596 1EB3                        7C            .byte	$7C
08597 1EB4                        C6            .byte	$C6
08598 1EB5                        FE            .byte	$FE
08599 1EB6                        C0            .byte	$C0
08600 1EB7                        C6            .byte	$C6
08601 1EB8                        7C            .byte	$7C
08602 1EB9                        00            .byte	0
08603 1EBA                        00            .byte	0
08604 1EBB                        00            .byte	0
08605                                           ! 1106  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08606 1EBC                        00            .byte	0
08607 1EBD                        00            .byte	0
08608 1EBE                        CC            .byte	$CC
08609 1EBF                        CC            .byte	$CC
08610 1EC0                        00            .byte	0
08611 1EC1                        7C            .byte	$7C
08612 1EC2                        C6            .byte	$C6
08613 1EC3                        FE            .byte	$FE
08614 1EC4                        C0            .byte	$C0
08615 1EC5                        C6            .byte	$C6
08616 1EC6                        7C            .byte	$7C
08617 1EC7                        00            .byte	0
08618 1EC8                        00            .byte	0
08619 1EC9                        00            .byte	0
08620                                           ! 1107  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08621 1ECA                        00            .byte	0
08622 1ECB                        60            .byte	$60
08623 1ECC                        30            .byte	$30
08624 1ECD                        18            .byte	$18
08625 1ECE                        00            .byte	0
08626 1ECF                        7C            .byte	$7C
08627 1ED0                        C6            .byte	$C6
08628 1ED1                        FE            .byte	$FE
08629 1ED2                        C0            .byte	$C0
08630 1ED3                        C6            .byte	$C6
08631 1ED4                        7C            .byte	$7C
08632 1ED5                        00            .byte	0
08633 1ED6                        00            .byte	0
08634 1ED7                        00            .byte	0
08635                                           ! 1108  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08636 1ED8                        00            .byte	0
08637 1ED9                        00            .byte	0
08638 1EDA                        66            .byte	$66
08639 1EDB                        66            .byte	$66
08640 1EDC                        00            .byte	0
08641 1EDD                        38            .byte	$38
08642 1EDE                        18            .byte	$18
08643 1EDF                        18            .byte	$18
08644 1EE0                        18            .byte	$18
08645 1EE1                        18            .byte	$18
08646 1EE2                        3C            .byte	$3C
08647 1EE3                        00            .byte	0
08648 1EE4                        00            .byte	0
08649 1EE5                        00            .byte	0
08650                                           ! 1109  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08651 1EE6                        00            .byte	0
08652 1EE7                        18            .byte	$18
08653 1EE8                        3C            .byte	$3C
08654 1EE9                        66            .byte	$66
08655 1EEA                        00            .byte	0
08656 1EEB                        38            .byte	$38
08657 1EEC                        18            .byte	$18
08658 1EED                        18            .byte	$18
08659 1EEE                        18            .byte	$18
08660 1EEF                        18            .byte	$18
08661 1EF0                        3C            .byte	$3C
08662 1EF1                        00            .byte	0
08663 1EF2                        00            .byte	0
08664 1EF3                        00            .byte	0
08665                                           ! 1110  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08666 1EF4                        00            .byte	0
08667 1EF5                        60            .byte	$60
08668 1EF6                        30            .byte	$30
08669 1EF7                        18            .byte	$18
08670 1EF8                        00            .byte	0
08671 1EF9                        38            .byte	$38
08672 1EFA                        18            .byte	$18
08673 1EFB                        18            .byte	$18
08674 1EFC                        18            .byte	$18
08675 1EFD                        18            .byte	$18
08676 1EFE                        3C            .byte	$3C
08677 1EFF                        00            .byte	0
08678 1F00                        00            .byte	0
08679 1F01                        00            .byte	0
08680                                           ! 1111  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08681 1F02                        00            .byte	0
08682 1F03                        C6            .byte	$C6
08683 1F04                        C6            .byte	$C6
08684 1F05                        10            .byte	$10
08685 1F06                        38            .byte	$38
08686 1F07                        6C            .byte	$6C
08687 1F08                        C6            .byte	$C6
08688 1F09                        C6            .byte	$C6
08689 1F0A                        FE            .byte	$FE
08690 1F0B                        C6            .byte	$C6
08691 1F0C                        C6            .byte	$C6
08692 1F0D                        00            .byte	0
08693 1F0E                        00            .byte	0
08694 1F0F                        00            .byte	0
08695                                           ! 1112  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08696 1F10                        38            .byte	$38
08697 1F11                        6C            .byte	$6C
08698 1F12                        38            .byte	$38
08699 1F13                        00            .byte	0
08700 1F14                        38            .byte	$38
08701 1F15                        6C            .byte	$6C
08702 1F16                        C6            .byte	$C6
08703 1F17                        C6            .byte	$C6
08704 1F18                        FE            .byte	$FE
08705 1F19                        C6            .byte	$C6
08706 1F1A                        C6            .byte	$C6
08707 1F1B                        00            .byte	0
08708 1F1C                        00            .byte	0
08709 1F1D                        00            .byte	0
08710                                           ! 1113  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08711 1F1E                        18            .byte	$18
08712 1F1F                        30            .byte	$30
08713 1F20                        60            .byte	$60
08714 1F21                        00            .byte	0
08715 1F22                        FE            .byte	$FE
08716 1F23                        66            .byte	$66
08717 1F24                        60            .byte	$60
08718 1F25                        7C            .byte	$7C
08719 1F26                        60            .byte	$60
08720 1F27                        66            .byte	$66
08721 1F28                        FE            .byte	$FE
08722 1F29                        00            .byte	0
08723 1F2A                        00            .byte	0
08724 1F2B                        00            .byte	0
08725                                           ! 1114  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
08726 1F2C                        00            .byte	0
08727 1F2D                        00            .byte	0
08728 1F2E                        00            .byte	0
08729 1F2F                        00            .byte	0
08730 1F30                        CC            .byte	$CC
08731 1F31                        76            .byte	$76
08732 1F32                        36            .byte	$36
08733 1F33                        7E            .byte	$7E
08734 1F34                        D8            .byte	$D8
08735 1F35                        D8            .byte	$D8
08736 1F36                        6E            .byte	$6E
08737 1F37                        00            .byte	0
08738 1F38                        00            .byte	0
08739 1F39                        00            .byte	0
08740                                           ! 1115  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
08741 1F3A                        00            .byte	0
08742 1F3B                        00            .byte	0
08743 1F3C                        3E            .byte	$3E
08744 1F3D                        6C            .byte	$6C
08745 1F3E                        CC            .byte	$CC
08746 1F3F                        CC            .byte	$CC
08747 1F40                        FE            .byte	$FE
08748 1F41                        CC            .byte	$CC
08749 1F42                        CC            .byte	$CC
08750 1F43                        CC            .byte	$CC
08751 1F44                        CE            .byte	$CE
08752 1F45                        00            .byte	0
08753 1F46                        00            .byte	0
08754 1F47                        00            .byte	0
08755                                           ! 1116  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08756 1F48                        00            .byte	0
08757 1F49                        10            .byte	$10
08758 1F4A                        38            .byte	$38
08759 1F4B                        6C            .byte	$6C
08760 1F4C                        00            .byte	0
08761 1F4D                        7C            .byte	$7C
08762 1F4E                        C6            .byte	$C6
08763 1F4F                        C6            .byte	$C6
08764 1F50                        C6            .byte	$C6
08765 1F51                        C6            .byte	$C6
08766 1F52                        7C            .byte	$7C
08767 1F53                        00            .byte	0
08768 1F54                        00            .byte	0
08769 1F55                        00            .byte	0
08770                                           ! 1117  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6,
08771 1F56                        00            .byte	0
08772 1F57                        00            .byte	0
08773 1F58                        C6            .byte	$C6
08774 1F59                        C6            .byte	$C6
08775 1F5A                        00            .byte	0
08776 1F5B                        7C            .byte	$7C
08777 1F5C                        C6            .byte	$C6
08778 1F5D                        C6            .byte	$C6
08779                                           ! 1117  0xc6, 0x7c, 0x00, 0x00, 0x00,
08780 1F5E                        C6            .byte	$C6
08781 1F5F                        C6            .byte	$C6
08782 1F60                        7C            .byte	$7C
08783 1F61                        00            .byte	0
08784 1F62                        00            .byte	0
08785 1F63                        00            .byte	0
08786                                           ! 1118  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08787 1F64                        00            .byte	0
08788 1F65                        60            .byte	$60
08789 1F66                        30            .byte	$30
08790 1F67                        18            .byte	$18
08791 1F68                        00            .byte	0
08792 1F69                        7C            .byte	$7C
08793 1F6A                        C6            .byte	$C6
08794 1F6B                        C6            .byte	$C6
08795 1F6C                        C6            .byte	$C6
08796 1F6D                        C6            .byte	$C6
08797 1F6E                        7C            .byte	$7C
08798 1F6F                        00            .byte	0
08799 1F70                        00            .byte	0
08800 1F71                        00            .byte	0
08801                                           ! 1119  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08802 1F72                        00            .byte	0
08803 1F73                        30            .byte	$30
08804 1F74                        78            .byte	$78
08805 1F75                        CC            .byte	$CC
08806 1F76                        00            .byte	0
08807 1F77                        CC            .byte	$CC
08808 1F78                        CC            .byte	$CC
08809 1F79                        CC            .byte	$CC
08810 1F7A                        CC            .byte	$CC
08811 1F7B                        CC            .byte	$CC
08812 1F7C                        76            .byte	$76
08813 1F7D                        00            .byte	0
08814 1F7E                        00            .byte	0
08815 1F7F                        00            .byte	0
08816                                           ! 1120  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08817 1F80                        00            .byte	0
08818 1F81                        60            .byte	$60
08819 1F82                        30            .byte	$30
08820 1F83                        18            .byte	$18
08821 1F84                        00            .byte	0
08822 1F85                        CC            .byte	$CC
08823 1F86                        CC            .byte	$CC
08824 1F87                        CC            .byte	$CC
08825 1F88                        CC            .byte	$CC
08826 1F89                        CC            .byte	$CC
08827 1F8A                        76            .byte	$76
08828 1F8B                        00            .byte	0
08829 1F8C                        00            .byte	0
08830 1F8D                        00            .byte	0
08831                                           ! 1121  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
08832 1F8E                        00            .byte	0
08833 1F8F                        00            .byte	0
08834 1F90                        C6            .byte	$C6
08835 1F91                        C6            .byte	$C6
08836 1F92                        00            .byte	0
08837 1F93                        C6            .byte	$C6
08838 1F94                        C6            .byte	$C6
08839 1F95                        C6            .byte	$C6
08840 1F96                        C6            .byte	$C6
08841 1F97                        7E            .byte	$7E
08842 1F98                        06            .byte	6
08843 1F99                        0C            .byte	$C
08844 1F9A                        78            .byte	$78
08845 1F9B                        00            .byte	0
08846                                           ! 1122  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08847 1F9C                        00            .byte	0
08848 1F9D                        C6            .byte	$C6
08849 1F9E                        C6            .byte	$C6
08850 1F9F                        38            .byte	$38
08851 1FA0                        6C            .byte	$6C
08852 1FA1                        C6            .byte	$C6
08853 1FA2                        C6            .byte	$C6
08854 1FA3                        C6            .byte	$C6
08855 1FA4                        C6            .byte	$C6
08856 1FA5                        6C            .byte	$6C
08857 1FA6                        38            .byte	$38
08858 1FA7                        00            .byte	0
08859 1FA8                        00            .byte	0
08860 1FA9                        00            .byte	0
08861                                           ! 1123  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08862 1FAA                        00            .byte	0
08863 1FAB                        C6            .byte	$C6
08864 1FAC                        C6            .byte	$C6
08865 1FAD                        00            .byte	0
08866 1FAE                        C6            .byte	$C6
08867 1FAF                        C6            .byte	$C6
08868 1FB0                        C6            .byte	$C6
08869 1FB1                        C6            .byte	$C6
08870 1FB2                        C6            .byte	$C6
08871 1FB3                        C6            .byte	$C6
08872 1FB4                        7C            .byte	$7C
08873 1FB5                        00            .byte	0
08874 1FB6                        00            .byte	0
08875 1FB7                        00            .byte	0
08876                                           ! 1124  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
08877 1FB8                        00            .byte	0
08878 1FB9                        18            .byte	$18
08879 1FBA                        18            .byte	$18
08880 1FBB                        3C            .byte	$3C
08881 1FBC                        66            .byte	$66
08882 1FBD                        60            .byte	$60
08883 1FBE                        60            .byte	$60
08884 1FBF                        66            .byte	$66
08885 1FC0                        3C            .byte	$3C
08886 1FC1                        18            .byte	$18
08887 1FC2                        18            .byte	$18
08888 1FC3                        00            .byte	0
08889 1FC4                        00            .byte	0
08890 1FC5                        00            .byte	0
08891                                           ! 1125  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
08892 1FC6                        00            .byte	0
08893 1FC7                        38            .byte	$38
08894 1FC8                        6C            .byte	$6C
08895 1FC9                        64            .byte	$64
08896 1FCA                        60            .byte	$60
08897 1FCB                        F0            .byte	$F0
08898 1FCC                        60            .byte	$60
08899 1FCD                        60            .byte	$60
08900 1FCE                        60            .byte	$60
08901 1FCF                        E6            .byte	$E6
08902 1FD0                        FC            .byte	$FC
08903 1FD1                        00            .byte	0
08904 1FD2                        00            .byte	0
08905 1FD3                        00            .byte	0
08906                                           ! 1126  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
08907 1FD4                        00            .byte	0
08908 1FD5                        00            .byte	0
08909 1FD6                        66            .byte	$66
08910 1FD7                        66            .byte	$66
08911 1FD8                        3C            .byte	$3C
08912 1FD9                        18            .byte	$18
08913 1FDA                        7E            .byte	$7E
08914 1FDB                        18            .byte	$18
08915 1FDC                        7E            .byte	$7E
08916 1FDD                        18            .byte	$18
08917 1FDE                        18            .byte	$18
08918 1FDF                        00            .byte	0
08919 1FE0                        00            .byte	0
08920 1FE1                        00            .byte	0
08921                                           ! 1127  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
08922 1FE2                        00            .byte	0
08923 1FE3                        F8            .byte	$F8
08924 1FE4                        CC            .byte	$CC
08925 1FE5                        CC            .byte	$CC
08926 1FE6                        F8            .byte	$F8
08927 1FE7                        C4            .byte	$C4
08928 1FE8                        CC            .byte	$CC
08929 1FE9                        DE            .byte	$DE
08930 1FEA                        CC            .byte	$CC
08931 1FEB                        CC            .byte	$CC
08932 1FEC                        C6            .byte	$C6
08933 1FED                        00            .byte	0
08934 1FEE                        00            .byte	0
08935 1FEF                        00            .byte	0
08936                                           ! 1128  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
08937 1FF0                        00            .byte	0
08938 1FF1                        0E            .byte	$E
08939 1FF2                        1B            .byte	$1B
08940 1FF3                        18            .byte	$18
08941 1FF4                        18            .byte	$18
08942 1FF5                        18            .byte	$18
08943 1FF6                        7E            .byte	$7E
08944 1FF7                        18            .byte	$18
08945 1FF8                        18            .byte	$18
08946 1FF9                        18            .byte	$18
08947 1FFA                        18            .byte	$18
08948 1FFB                        D8            .byte	$D8
08949 1FFC                        70            .byte	$70
08950 1FFD                        00            .byte	0
08951                                           ! 1129  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08952 1FFE                        00            .byte	0
08953 1FFF                        18            .byte	$18
08954 2000                        30            .byte	$30
08955 2001                        60            .byte	$60
08956 2002                        00            .byte	0
08957 2003                        78            .byte	$78
08958 2004                        0C            .byte	$C
08959 2005                        7C            .byte	$7C
08960 2006                        CC            .byte	$CC
08961 2007                        CC            .byte	$CC
08962 2008                        76            .byte	$76
08963 2009                        00            .byte	0
08964 200A                        00            .byte	0
08965 200B                        00            .byte	0
08966                                           ! 1130  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08967 200C                        00            .byte	0
08968 200D                        0C            .byte	$C
08969 200E                        18            .byte	$18
08970 200F                        30            .byte	$30
08971 2010                        00            .byte	0
08972 2011                        38            .byte	$38
08973 2012                        18            .byte	$18
08974 2013                        18            .byte	$18
08975 2014                        18            .byte	$18
08976 2015                        18            .byte	$18
08977 2016                        3C            .byte	$3C
08978 2017                        00            .byte	0
08979 2018                        00            .byte	0
08980 2019                        00            .byte	0
08981                                           ! 1131  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08982 201A                        00            .byte	0
08983 201B                        18            .byte	$18
08984 201C                        30            .byte	$30
08985 201D                        60            .byte	$60
08986 201E                        00            .byte	0
08987 201F                        7C            .byte	$7C
08988 2020                        C6            .byte	$C6
08989 2021                        C6            .byte	$C6
08990 2022                        C6            .byte	$C6
08991 2023                        C6            .byte	$C6
08992 2024                        7C            .byte	$7C
08993 2025                        00            .byte	0
08994 2026                        00            .byte	0
08995 2027                        00            .byte	0
08996                                           ! 1132  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08997 2028                        00            .byte	0
08998 2029                        18            .byte	$18
08999 202A                        30            .byte	$30
09000 202B                        60            .byte	$60
09001 202C                        00            .byte	0
09002 202D                        CC            .byte	$CC
09003 202E                        CC            .byte	$CC
09004 202F                        CC            .byte	$CC
09005 2030                        CC            .byte	$CC
09006 2031                        CC            .byte	$CC
09007 2032                        76            .byte	$76
09008 2033                        00            .byte	0
09009 2034                        00            .byte	0
09010 2035                        00            .byte	0
09011                                           ! 1133  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09012 2036                        00            .byte	0
09013 2037                        00            .byte	0
09014 2038                        76            .byte	$76
09015 2039                        DC            .byte	$DC
09016 203A                        00            .byte	0
09017 203B                        DC            .byte	$DC
09018 203C                        66            .byte	$66
09019 203D                        66            .byte	$66
09020 203E                        66            .byte	$66
09021 203F                        66            .byte	$66
09022 2040                        66            .byte	$66
09023 2041                        00            .byte	0
09024 2042                        00            .byte	0
09025 2043                        00            .byte	0
09026                                           ! 1134  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09027 2044                        76            .byte	$76
09028 2045                        DC            .byte	$DC
09029 2046                        00            .byte	0
09030 2047                        C6            .byte	$C6
09031 2048                        E6            .byte	$E6
09032 2049                        F6            .byte	$F6
09033 204A                        FE            .byte	$FE
09034 204B                        DE            .byte	$DE
09035 204C                        CE            .byte	$CE
09036 204D                        C6            .byte	$C6
09037 204E                        C6            .byte	$C6
09038 204F                        00            .byte	0
09039 2050                        00            .byte	0
09040 2051                        00            .byte	0
09041                                           ! 1135  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09042 2052                        00            .byte	0
09043 2053                        3C            .byte	$3C
09044 2054                        6C            .byte	$6C
09045 2055                        6C            .byte	$6C
09046 2056                        3E            .byte	$3E
09047 2057                        00            .byte	0
09048 2058                        7E            .byte	$7E
09049 2059                        00            .byte	0
09050 205A                        00            .byte	0
09051 205B                        00            .byte	0
09052 205C                        00            .byte	0
09053 205D                        00            .byte	0
09054 205E                        00            .byte	0
09055 205F                        00            .byte	0
09056                                           ! 1136  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09057 2060                        00            .byte	0
09058 2061                        38            .byte	$38
09059 2062                        6C            .byte	$6C
09060 2063                        6C            .byte	$6C
09061 2064                        38            .byte	$38
09062 2065                        00            .byte	0
09063 2066                        7C            .byte	$7C
09064 2067                        00            .byte	0
09065 2068                        00            .byte	0
09066 2069                        00            .byte	0
09067 206A                        00            .byte	0
09068 206B                        00            .byte	0
09069 206C                        00            .byte	0
09070 206D                        00            .byte	0
09071                                           ! 1137  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09072 206E                        00            .byte	0
09073 206F                        00            .byte	0
09074 2070                        30            .byte	$30
09075 2071                        30            .byte	$30
09076 2072                        00            .byte	0
09077 2073                        30            .byte	$30
09078 2074                        30            .byte	$30
09079 2075                        60            .byte	$60
09080 2076                        C6            .byte	$C6
09081 2077                        C6            .byte	$C6
09082 2078                        7C            .byte	$7C
09083 2079                        00            .byte	0
09084 207A                        00            .byte	0
09085 207B                        00            .byte	0
09086                                           ! 1138  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09087 207C                        00            .byte	0
09088 207D                        00            .byte	0
09089 207E                        00            .byte	0
09090 207F                        00            .byte	0
09091 2080                        00            .byte	0
09092 2081                        00            .byte	0
09093 2082                        FE            .byte	$FE
09094 2083                        C0            .byte	$C0
09095 2084                        C0            .byte	$C0
09096 2085                        C0            .byte	$C0
09097 2086                        00            .byte	0
09098 2087                        00            .byte	0
09099 2088                        00            .byte	0
09100 2089                        00            .byte	0
09101                                           ! 1139  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09102 208A                        00            .byte	0
09103 208B                        00            .byte	0
09104 208C                        00            .byte	0
09105 208D                        00            .byte	0
09106 208E                        00            .byte	0
09107 208F                        00            .byte	0
09108 2090                        FE            .byte	$FE
09109 2091                        06            .byte	6
09110 2092                        06            .byte	6
09111 2093                        06            .byte	6
09112 2094                        00            .byte	0
09113 2095                        00            .byte	0
09114 2096                        00            .byte	0
09115 2097                        00            .byte	0
09116                                           ! 1140  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09117 2098                        00            .byte	0
09118 2099                        C0            .byte	$C0
09119 209A                        C0            .byte	$C0
09120 209B                        C6            .byte	$C6
09121 209C                        CC            .byte	$CC
09122 209D                        D8            .byte	$D8
09123 209E                        30            .byte	$30
09124 209F                        60            .byte	$60
09125 20A0                        DC            .byte	$DC
09126 20A1                        86            .byte	$86
09127 20A2                        0C            .byte	$C
09128 20A3                        18            .byte	$18
09129 20A4                        3E            .byte	$3E
09130 20A5                        00            .byte	0
09131                                           ! 1141  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0
09132 20A6                        00            .byte	0
09133 20A7                        C0            .byte	$C0
09134 20A8                        C0            .byte	$C0
09135 20A9                        C6            .byte	$C6
09136 20AA                        CC            .byte	$CC
09137 20AB                        D8            .byte	$D8
09138 20AC                        30            .byte	$30
09139 20AD                        66            .byte	$66
09140 20AE                        CE            .byte	$CE
09141 20AF                        9E            .byte	$9E
09142                                           ! 1141 x3e, 0x06, 0x06, 0x00,
09143 20B0                        3E            .byte	$3E
09144 20B1                        06            .byte	6
09145 20B2                        06            .byte	6
09146 20B3                        00            .byte	0
09147                                           ! 1142  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09148 20B4                        00            .byte	0
09149 20B5                        00            .byte	0
09150 20B6                        18            .byte	$18
09151 20B7                        18            .byte	$18
09152 20B8                        00            .byte	0
09153 20B9                        18            .byte	$18
09154 20BA                        18            .byte	$18
09155 20BB                        3C            .byte	$3C
09156 20BC                        3C            .byte	$3C
09157 20BD                        3C            .byte	$3C
09158 20BE                        18            .byte	$18
09159 20BF                        00            .byte	0
09160 20C0                        00            .byte	0
09161 20C1                        00            .byte	0
09162                                           ! 1143  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09163 20C2                        00            .byte	0
09164 20C3                        00            .byte	0
09165 20C4                        00            .byte	0
09166 20C5                        00            .byte	0
09167 20C6                        36            .byte	$36
09168 20C7                        6C            .byte	$6C
09169 20C8                        D8            .byte	$D8
09170 20C9                        6C            .byte	$6C
09171 20CA                        36            .byte	$36
09172 20CB                        00            .byte	0
09173 20CC                        00            .byte	0
09174 20CD                        00            .byte	0
09175 20CE                        00            .byte	0
09176 20CF                        00            .byte	0
09177                                           ! 1144  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09178 20D0                        00            .byte	0
09179 20D1                        00            .byte	0
09180 20D2                        00            .byte	0
09181 20D3                        00            .byte	0
09182 20D4                        D8            .byte	$D8
09183 20D5                        6C            .byte	$6C
09184 20D6                        36            .byte	$36
09185 20D7                        6C            .byte	$6C
09186 20D8                        D8            .byte	$D8
09187 20D9                        00            .byte	0
09188 20DA                        00            .byte	0
09189 20DB                        00            .byte	0
09190 20DC                        00            .byte	0
09191 20DD                        00            .byte	0
09192                                           ! 1145  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09193 20DE                        11            .byte	$11
09194 20DF                        44            .byte	$44
09195 20E0                        11            .byte	$11
09196 20E1                        44            .byte	$44
09197 20E2                        11            .byte	$11
09198 20E3                        44            .byte	$44
09199 20E4                        11            .byte	$11
09200 20E5                        44            .byte	$44
09201 20E6                        11            .byte	$11
09202 20E7                        44            .byte	$44
09203 20E8                        11            .byte	$11
09204 20E9                        44            .byte	$44
09205 20EA                        11            .byte	$11
09206 20EB                        44            .byte	$44
09207                                           ! 1146  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09208 20EC                        55            .byte	$55
09209 20ED                        AA            .byte	$AA
09210 20EE                        55            .byte	$55
09211 20EF                        AA            .byte	$AA
09212 20F0                        55            .byte	$55
09213 20F1                        AA            .byte	$AA
09214 20F2                        55            .byte	$55
09215 20F3                        AA            .byte	$AA
09216 20F4                        55            .byte	$55
09217 20F5                        AA            .byte	$AA
09218 20F6                        55            .byte	$55
09219 20F7                        AA            .byte	$AA
09220 20F8                        55            .byte	$55
09221 20F9                        AA            .byte	$AA
09222                                           ! 1147  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09223 20FA                        DD            .byte	$DD
09224 20FB                        77            .byte	$77
09225 20FC                        DD            .byte	$DD
09226 20FD                        77            .byte	$77
09227 20FE                        DD            .byte	$DD
09228 20FF                        77            .byte	$77
09229 2100                        DD            .byte	$DD
09230 2101                        77            .byte	$77
09231 2102                        DD            .byte	$DD
09232 2103                        77            .byte	$77
09233 2104                        DD            .byte	$DD
09234 2105                        77            .byte	$77
09235 2106                        DD            .byte	$DD
09236 2107                        77            .byte	$77
09237                                           ! 1148  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09238 2108                        18            .byte	$18
09239 2109                        18            .byte	$18
09240 210A                        18            .byte	$18
09241 210B                        18            .byte	$18
09242 210C                        18            .byte	$18
09243 210D                        18            .byte	$18
09244 210E                        18            .byte	$18
09245 210F                        18            .byte	$18
09246 2110                        18            .byte	$18
09247 2111                        18            .byte	$18
09248 2112                        18            .byte	$18
09249 2113                        18            .byte	$18
09250 2114                        18            .byte	$18
09251 2115                        18            .byte	$18
09252                                           ! 1149  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09253 2116                        18            .byte	$18
09254 2117                        18            .byte	$18
09255 2118                        18            .byte	$18
09256 2119                        18            .byte	$18
09257 211A                        18            .byte	$18
09258 211B                        18            .byte	$18
09259 211C                        18            .byte	$18
09260 211D                        F8            .byte	$F8
09261 211E                        18            .byte	$18
09262 211F                        18            .byte	$18
09263 2120                        18            .byte	$18
09264 2121                        18            .byte	$18
09265 2122                        18            .byte	$18
09266 2123                        18            .byte	$18
09267                                           ! 1150  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09268 2124                        18            .byte	$18
09269 2125                        18            .byte	$18
09270 2126                        18            .byte	$18
09271 2127                        18            .byte	$18
09272 2128                        18            .byte	$18
09273 2129                        F8            .byte	$F8
09274 212A                        18            .byte	$18
09275 212B                        F8            .byte	$F8
09276 212C                        18            .byte	$18
09277 212D                        18            .byte	$18
09278 212E                        18            .byte	$18
09279 212F                        18            .byte	$18
09280 2130                        18            .byte	$18
09281 2131                        18            .byte	$18
09282                                           ! 1151  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09283 2132                        36            .byte	$36
09284 2133                        36            .byte	$36
09285 2134                        36            .byte	$36
09286 2135                        36            .byte	$36
09287 2136                        36            .byte	$36
09288 2137                        36            .byte	$36
09289 2138                        36            .byte	$36
09290 2139                        F6            .byte	$F6
09291 213A                        36            .byte	$36
09292 213B                        36            .byte	$36
09293 213C                        36            .byte	$36
09294 213D                        36            .byte	$36
09295 213E                        36            .byte	$36
09296 213F                        36            .byte	$36
09297                                           ! 1152  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09298 2140                        00            .byte	0
09299 2141                        00            .byte	0
09300 2142                        00            .byte	0
09301 2143                        00            .byte	0
09302 2144                        00            .byte	0
09303 2145                        00            .byte	0
09304 2146                        00            .byte	0
09305 2147                        FE            .byte	$FE
09306 2148                        36            .byte	$36
09307 2149                        36            .byte	$36
09308 214A                        36            .byte	$36
09309 214B                        36            .byte	$36
09310 214C                        36            .byte	$36
09311 214D                        36            .byte	$36
09312                                           ! 1153  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09313 214E                        00            .byte	0
09314 214F                        00            .byte	0
09315 2150                        00            .byte	0
09316 2151                        00            .byte	0
09317 2152                        00            .byte	0
09318 2153                        F8            .byte	$F8
09319 2154                        18            .byte	$18
09320 2155                        F8            .byte	$F8
09321 2156                        18            .byte	$18
09322 2157                        18            .byte	$18
09323 2158                        18            .byte	$18
09324 2159                        18            .byte	$18
09325 215A                        18            .byte	$18
09326 215B                        18            .byte	$18
09327                                           ! 1154  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09328 215C                        36            .byte	$36
09329 215D                        36            .byte	$36
09330 215E                        36            .byte	$36
09331 215F                        36            .byte	$36
09332 2160                        36            .byte	$36
09333 2161                        F6            .byte	$F6
09334 2162                        06            .byte	6
09335 2163                        F6            .byte	$F6
09336 2164                        36            .byte	$36
09337 2165                        36            .byte	$36
09338 2166                        36            .byte	$36
09339 2167                        36            .byte	$36
09340 2168                        36            .byte	$36
09341 2169                        36            .byte	$36
09342                                           ! 1155  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09343 216A                        36            .byte	$36
09344 216B                        36            .byte	$36
09345 216C                        36            .byte	$36
09346 216D                        36            .byte	$36
09347 216E                        36            .byte	$36
09348 216F                        36            .byte	$36
09349 2170                        36            .byte	$36
09350 2171                        36            .byte	$36
09351 2172                        36            .byte	$36
09352 2173                        36            .byte	$36
09353 2174                        36            .byte	$36
09354 2175                        36            .byte	$36
09355 2176                        36            .byte	$36
09356 2177                        36            .byte	$36
09357                                           ! 1156  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09358 2178                        00            .byte	0
09359 2179                        00            .byte	0
09360 217A                        00            .byte	0
09361 217B                        00            .byte	0
09362 217C                        00            .byte	0
09363 217D                        FE            .byte	$FE
09364 217E                        06            .byte	6
09365 217F                        F6            .byte	$F6
09366 2180                        36            .byte	$36
09367 2181                        36            .byte	$36
09368 2182                        36            .byte	$36
09369 2183                        36            .byte	$36
09370 2184                        36            .byte	$36
09371 2185                        36            .byte	$36
09372                                           ! 1157  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09373 2186                        36            .byte	$36
09374 2187                        36            .byte	$36
09375 2188                        36            .byte	$36
09376 2189                        36            .byte	$36
09377 218A                        36            .byte	$36
09378 218B                        F6            .byte	$F6
09379 218C                        06            .byte	6
09380 218D                        FE            .byte	$FE
09381 218E                        00            .byte	0
09382 218F                        00            .byte	0
09383 2190                        00            .byte	0
09384 2191                        00            .byte	0
09385 2192                        00            .byte	0
09386 2193                        00            .byte	0
09387                                           ! 1158  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09388 2194                        36            .byte	$36
09389 2195                        36            .byte	$36
09390 2196                        36            .byte	$36
09391 2197                        36            .byte	$36
09392 2198                        36            .byte	$36
09393 2199                        36            .byte	$36
09394 219A                        36            .byte	$36
09395 219B                        FE            .byte	$FE
09396 219C                        00            .byte	0
09397 219D                        00            .byte	0
09398 219E                        00            .byte	0
09399 219F                        00            .byte	0
09400 21A0                        00            .byte	0
09401 21A1                        00            .byte	0
09402                                           ! 1159  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09403 21A2                        18            .byte	$18
09404 21A3                        18            .byte	$18
09405 21A4                        18            .byte	$18
09406 21A5                        18            .byte	$18
09407 21A6                        18            .byte	$18
09408 21A7                        F8            .byte	$F8
09409 21A8                        18            .byte	$18
09410 21A9                        F8            .byte	$F8
09411 21AA                        00            .byte	0
09412 21AB                        00            .byte	0
09413 21AC                        00            .byte	0
09414 21AD                        00            .byte	0
09415 21AE                        00            .byte	0
09416 21AF                        00            .byte	0
09417                                           ! 1160  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09418 21B0                        00            .byte	0
09419 21B1                        00            .byte	0
09420 21B2                        00            .byte	0
09421 21B3                        00            .byte	0
09422 21B4                        00            .byte	0
09423 21B5                        00            .byte	0
09424 21B6                        00            .byte	0
09425 21B7                        F8            .byte	$F8
09426 21B8                        18            .byte	$18
09427 21B9                        18            .byte	$18
09428 21BA                        18            .byte	$18
09429 21BB                        18            .byte	$18
09430 21BC                        18            .byte	$18
09431 21BD                        18            .byte	$18
09432                                           ! 1161  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09433 21BE                        18            .byte	$18
09434 21BF                        18            .byte	$18
09435 21C0                        18            .byte	$18
09436 21C1                        18            .byte	$18
09437 21C2                        18            .byte	$18
09438 21C3                        18            .byte	$18
09439 21C4                        18            .byte	$18
09440 21C5                        1F            .byte	$1F
09441 21C6                        00            .byte	0
09442 21C7                        00            .byte	0
09443 21C8                        00            .byte	0
09444 21C9                        00            .byte	0
09445 21CA                        00            .byte	0
09446 21CB                        00            .byte	0
09447                                           ! 1162  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09448 21CC                        18            .byte	$18
09449 21CD                        18            .byte	$18
09450 21CE                        18            .byte	$18
09451 21CF                        18            .byte	$18
09452 21D0                        18            .byte	$18
09453 21D1                        18            .byte	$18
09454 21D2                        18            .byte	$18
09455 21D3                        FF            .byte	$FF
09456 21D4                        00            .byte	0
09457 21D5                        00            .byte	0
09458 21D6                        00            .byte	0
09459 21D7                        00            .byte	0
09460 21D8                        00            .byte	0
09461 21D9                        00            .byte	0
09462                                           ! 1163  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09463 21DA                        00            .byte	0
09464 21DB                        00            .byte	0
09465 21DC                        00            .byte	0
09466 21DD                        00            .byte	0
09467 21DE                        00            .byte	0
09468 21DF                        00            .byte	0
09469 21E0                        00            .byte	0
09470 21E1                        FF            .byte	$FF
09471 21E2                        18            .byte	$18
09472 21E3                        18            .byte	$18
09473 21E4                        18            .byte	$18
09474 21E5                        18            .byte	$18
09475 21E6                        18            .byte	$18
09476 21E7                        18            .byte	$18
09477                                           ! 1164  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09478 21E8                        18            .byte	$18
09479 21E9                        18            .byte	$18
09480 21EA                        18            .byte	$18
09481 21EB                        18            .byte	$18
09482 21EC                        18            .byte	$18
09483 21ED                        18            .byte	$18
09484 21EE                        18            .byte	$18
09485 21EF                        1F            .byte	$1F
09486 21F0                        18            .byte	$18
09487 21F1                        18            .byte	$18
09488 21F2                        18            .byte	$18
09489 21F3                        18            .byte	$18
09490 21F4                        18            .byte	$18
09491 21F5                        18            .byte	$18
09492                                           ! 1165  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x0
09493 21F6                        00            .byte	0
09494 21F7                        00            .byte	0
09495 21F8                        00            .byte	0
09496 21F9                        00            .byte	0
09497 21FA                        00            .byte	0
09498 21FB                        00            .byte	0
09499 21FC                        00            .byte	0
09500 21FD                        FF            .byte	$FF
09501 21FE                        00            .byte	0
09502 21FF                        00            .byte	0
09503 2200                        00            .byte	0
09504                                           ! 1165 0, 0x00, 0x00,
09505 2201                        00            .byte	0
09506 2202                        00            .byte	0
09507 2203                        00            .byte	0
09508                                           ! 1166  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09509 2204                        18            .byte	$18
09510 2205                        18            .byte	$18
09511 2206                        18            .byte	$18
09512 2207                        18            .byte	$18
09513 2208                        18            .byte	$18
09514 2209                        18            .byte	$18
09515 220A                        18            .byte	$18
09516 220B                        FF            .byte	$FF
09517 220C                        18            .byte	$18
09518 220D                        18            .byte	$18
09519 220E                        18            .byte	$18
09520 220F                        18            .byte	$18
09521 2210                        18            .byte	$18
09522 2211                        18            .byte	$18
09523                                           ! 1167  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09524 2212                        18            .byte	$18
09525 2213                        18            .byte	$18
09526 2214                        18            .byte	$18
09527 2215                        18            .byte	$18
09528 2216                        18            .byte	$18
09529 2217                        1F            .byte	$1F
09530 2218                        18            .byte	$18
09531 2219                        1F            .byte	$1F
09532 221A                        18            .byte	$18
09533 221B                        18            .byte	$18
09534 221C                        18            .byte	$18
09535 221D                        18            .byte	$18
09536 221E                        18            .byte	$18
09537 221F                        18            .byte	$18
09538                                           ! 1168  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09539 2220                        36            .byte	$36
09540 2221                        36            .byte	$36
09541 2222                        36            .byte	$36
09542 2223                        36            .byte	$36
09543 2224                        36            .byte	$36
09544 2225                        36            .byte	$36
09545 2226                        36            .byte	$36
09546 2227                        37            .byte	$37
09547 2228                        36            .byte	$36
09548 2229                        36            .byte	$36
09549 222A                        36            .byte	$36
09550 222B                        36            .byte	$36
09551 222C                        36            .byte	$36
09552 222D                        36            .byte	$36
09553                                           ! 1169  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09554 222E                        36            .byte	$36
09555 222F                        36            .byte	$36
09556 2230                        36            .byte	$36
09557 2231                        36            .byte	$36
09558 2232                        36            .byte	$36
09559 2233                        37            .byte	$37
09560 2234                        30            .byte	$30
09561 2235                        3F            .byte	$3F
09562 2236                        00            .byte	0
09563 2237                        00            .byte	0
09564 2238                        00            .byte	0
09565 2239                        00            .byte	0
09566 223A                        00            .byte	0
09567 223B                        00            .byte	0
09568                                           ! 1170  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09569 223C                        00            .byte	0
09570 223D                        00            .byte	0
09571 223E                        00            .byte	0
09572 223F                        00            .byte	0
09573 2240                        00            .byte	0
09574 2241                        3F            .byte	$3F
09575 2242                        30            .byte	$30
09576 2243                        37            .byte	$37
09577 2244                        36            .byte	$36
09578 2245                        36            .byte	$36
09579 2246                        36            .byte	$36
09580 2247                        36            .byte	$36
09581 2248                        36            .byte	$36
09582 2249                        36            .byte	$36
09583                                           ! 1171  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09584 224A                        36            .byte	$36
09585 224B                        36            .byte	$36
09586 224C                        36            .byte	$36
09587 224D                        36            .byte	$36
09588 224E                        36            .byte	$36
09589 224F                        F7            .byte	$F7
09590 2250                        00            .byte	0
09591 2251                        FF            .byte	$FF
09592 2252                        00            .byte	0
09593 2253                        00            .byte	0
09594 2254                        00            .byte	0
09595 2255                        00            .byte	0
09596 2256                        00            .byte	0
09597 2257                        00            .byte	0
09598                                           ! 1172  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09599 2258                        00            .byte	0
09600 2259                        00            .byte	0
09601 225A                        00            .byte	0
09602 225B                        00            .byte	0
09603 225C                        00            .byte	0
09604 225D                        FF            .byte	$FF
09605 225E                        00            .byte	0
09606 225F                        F7            .byte	$F7
09607 2260                        36            .byte	$36
09608 2261                        36            .byte	$36
09609 2262                        36            .byte	$36
09610 2263                        36            .byte	$36
09611 2264                        36            .byte	$36
09612 2265                        36            .byte	$36
09613                                           ! 1173  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09614 2266                        36            .byte	$36
09615 2267                        36            .byte	$36
09616 2268                        36            .byte	$36
09617 2269                        36            .byte	$36
09618 226A                        36            .byte	$36
09619 226B                        37            .byte	$37
09620 226C                        30            .byte	$30
09621 226D                        37            .byte	$37
09622 226E                        36            .byte	$36
09623 226F                        36            .byte	$36
09624 2270                        36            .byte	$36
09625 2271                        36            .byte	$36
09626 2272                        36            .byte	$36
09627 2273                        36            .byte	$36
09628                                           ! 1174  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09629 2274                        00            .byte	0
09630 2275                        00            .byte	0
09631 2276                        00            .byte	0
09632 2277                        00            .byte	0
09633 2278                        00            .byte	0
09634 2279                        FF            .byte	$FF
09635 227A                        00            .byte	0
09636 227B                        FF            .byte	$FF
09637 227C                        00            .byte	0
09638 227D                        00            .byte	0
09639 227E                        00            .byte	0
09640 227F                        00            .byte	0
09641 2280                        00            .byte	0
09642 2281                        00            .byte	0
09643                                           ! 1175  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09644 2282                        36            .byte	$36
09645 2283                        36            .byte	$36
09646 2284                        36            .byte	$36
09647 2285                        36            .byte	$36
09648 2286                        36            .byte	$36
09649 2287                        F7            .byte	$F7
09650 2288                        00            .byte	0
09651 2289                        F7            .byte	$F7
09652 228A                        36            .byte	$36
09653 228B                        36            .byte	$36
09654 228C                        36            .byte	$36
09655 228D                        36            .byte	$36
09656 228E                        36            .byte	$36
09657 228F                        36            .byte	$36
09658                                           ! 1176  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09659 2290                        18            .byte	$18
09660 2291                        18            .byte	$18
09661 2292                        18            .byte	$18
09662 2293                        18            .byte	$18
09663 2294                        18            .byte	$18
09664 2295                        FF            .byte	$FF
09665 2296                        00            .byte	0
09666 2297                        FF            .byte	$FF
09667 2298                        00            .byte	0
09668 2299                        00            .byte	0
09669 229A                        00            .byte	0
09670 229B                        00            .byte	0
09671 229C                        00            .byte	0
09672 229D                        00            .byte	0
09673                                           ! 1177  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09674 229E                        36            .byte	$36
09675 229F                        36            .byte	$36
09676 22A0                        36            .byte	$36
09677 22A1                        36            .byte	$36
09678 22A2                        36            .byte	$36
09679 22A3                        36            .byte	$36
09680 22A4                        36            .byte	$36
09681 22A5                        FF            .byte	$FF
09682 22A6                        00            .byte	0
09683 22A7                        00            .byte	0
09684 22A8                        00            .byte	0
09685 22A9                        00            .byte	0
09686 22AA                        00            .byte	0
09687 22AB                        00            .byte	0
09688                                           ! 1178  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09689 22AC                        00            .byte	0
09690 22AD                        00            .byte	0
09691 22AE                        00            .byte	0
09692 22AF                        00            .byte	0
09693 22B0                        00            .byte	0
09694 22B1                        FF            .byte	$FF
09695 22B2                        00            .byte	0
09696 22B3                        FF            .byte	$FF
09697 22B4                        18            .byte	$18
09698 22B5                        18            .byte	$18
09699 22B6                        18            .byte	$18
09700 22B7                        18            .byte	$18
09701 22B8                        18            .byte	$18
09702 22B9                        18            .byte	$18
09703                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09704 22BA                        00            .byte	0
09705 22BB                        00            .byte	0
09706 22BC                        00            .byte	0
09707 22BD                        00            .byte	0
09708 22BE                        00            .byte	0
09709 22BF                        00            .byte	0
09710 22C0                        00            .byte	0
09711 22C1                        FF            .byte	$FF
09712 22C2                        36            .byte	$36
09713 22C3                        36            .byte	$36
09714 22C4                        36            .byte	$36
09715 22C5                        36            .byte	$36
09716 22C6                        36            .byte	$36
09717 22C7                        36            .byte	$36
09718                                           ! 1180  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09719 22C8                        36            .byte	$36
09720 22C9                        36            .byte	$36
09721 22CA                        36            .byte	$36
09722 22CB                        36            .byte	$36
09723 22CC                        36            .byte	$36
09724 22CD                        36            .byte	$36
09725 22CE                        36            .byte	$36
09726 22CF                        3F            .byte	$3F
09727 22D0                        00            .byte	0
09728 22D1                        00            .byte	0
09729 22D2                        00            .byte	0
09730 22D3                        00            .byte	0
09731 22D4                        00            .byte	0
09732 22D5                        00            .byte	0
09733                                           ! 1181  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09734 22D6                        18            .byte	$18
09735 22D7                        18            .byte	$18
09736 22D8                        18            .byte	$18
09737 22D9                        18            .byte	$18
09738 22DA                        18            .byte	$18
09739 22DB                        1F            .byte	$1F
09740 22DC                        18            .byte	$18
09741 22DD                        1F            .byte	$1F
09742 22DE                        00            .byte	0
09743 22DF                        00            .byte	0
09744 22E0                        00            .byte	0
09745 22E1                        00            .byte	0
09746 22E2                        00            .byte	0
09747 22E3                        00            .byte	0
09748                                           ! 1182  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09749 22E4                        00            .byte	0
09750 22E5                        00            .byte	0
09751 22E6                        00            .byte	0
09752 22E7                        00            .byte	0
09753 22E8                        00            .byte	0
09754 22E9                        1F            .byte	$1F
09755 22EA                        18            .byte	$18
09756 22EB                        1F            .byte	$1F
09757 22EC                        18            .byte	$18
09758 22ED                        18            .byte	$18
09759 22EE                        18            .byte	$18
09760 22EF                        18            .byte	$18
09761 22F0                        18            .byte	$18
09762 22F1                        18            .byte	$18
09763                                           ! 1183  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09764 22F2                        00            .byte	0
09765 22F3                        00            .byte	0
09766 22F4                        00            .byte	0
09767 22F5                        00            .byte	0
09768 22F6                        00            .byte	0
09769 22F7                        00            .byte	0
09770 22F8                        00            .byte	0
09771 22F9                        3F            .byte	$3F
09772 22FA                        36            .byte	$36
09773 22FB                        36            .byte	$36
09774 22FC                        36            .byte	$36
09775 22FD                        36            .byte	$36
09776 22FE                        36            .byte	$36
09777 22FF                        36            .byte	$36
09778                                           ! 1184  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09779 2300                        36            .byte	$36
09780 2301                        36            .byte	$36
09781 2302                        36            .byte	$36
09782 2303                        36            .byte	$36
09783 2304                        36            .byte	$36
09784 2305                        36            .byte	$36
09785 2306                        36            .byte	$36
09786 2307                        FF            .byte	$FF
09787 2308                        36            .byte	$36
09788 2309                        36            .byte	$36
09789 230A                        36            .byte	$36
09790 230B                        36            .byte	$36
09791 230C                        36            .byte	$36
09792 230D                        36            .byte	$36
09793                                           ! 1185  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09794 230E                        18            .byte	$18
09795 230F                        18            .byte	$18
09796 2310                        18            .byte	$18
09797 2311                        18            .byte	$18
09798 2312                        18            .byte	$18
09799 2313                        FF            .byte	$FF
09800 2314                        18            .byte	$18
09801 2315                        FF            .byte	$FF
09802 2316                        18            .byte	$18
09803 2317                        18            .byte	$18
09804 2318                        18            .byte	$18
09805 2319                        18            .byte	$18
09806 231A                        18            .byte	$18
09807 231B                        18            .byte	$18
09808                                           ! 1186  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09809 231C                        18            .byte	$18
09810 231D                        18            .byte	$18
09811 231E                        18            .byte	$18
09812 231F                        18            .byte	$18
09813 2320                        18            .byte	$18
09814 2321                        18            .byte	$18
09815 2322                        18            .byte	$18
09816 2323                        F8            .byte	$F8
09817 2324                        00            .byte	0
09818 2325                        00            .byte	0
09819 2326                        00            .byte	0
09820 2327                        00            .byte	0
09821 2328                        00            .byte	0
09822 2329                        00            .byte	0
09823                                           ! 1187  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09824 232A                        00            .byte	0
09825 232B                        00            .byte	0
09826 232C                        00            .byte	0
09827 232D                        00            .byte	0
09828 232E                        00            .byte	0
09829 232F                        00            .byte	0
09830 2330                        00            .byte	0
09831 2331                        1F            .byte	$1F
09832 2332                        18            .byte	$18
09833 2333                        18            .byte	$18
09834 2334                        18            .byte	$18
09835 2335                        18            .byte	$18
09836 2336                        18            .byte	$18
09837 2337                        18            .byte	$18
09838                                           ! 1188  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09839 2338                        FF            .byte	$FF
09840 2339                        FF            .byte	$FF
09841 233A                        FF            .byte	$FF
09842 233B                        FF            .byte	$FF
09843 233C                        FF            .byte	$FF
09844 233D                        FF            .byte	$FF
09845 233E                        FF            .byte	$FF
09846 233F                        FF            .byte	$FF
09847 2340                        FF            .byte	$FF
09848 2341                        FF            .byte	$FF
09849 2342                        FF            .byte	$FF
09850 2343                        FF            .byte	$FF
09851 2344                        FF            .byte	$FF
09852 2345                        FF            .byte	$FF
09853                                           ! 1189  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09854 2346                        00            .byte	0
09855 2347                        00            .byte	0
09856 2348                        00            .byte	0
09857 2349                        00            .byte	0
09858 234A                        00            .byte	0
09859 234B                        00            .byte	0
09860 234C                        00            .byte	0
09861 234D                        FF            .byte	$FF
09862 234E                        FF            .byte	$FF
09863 234F                        FF            .byte	$FF
09864 2350                        FF            .byte	$FF
09865 2351                        FF            .byte	$FF
09866                                           ! 1189  0xff,
09867 2352                        FF            .byte	$FF
09868 2353                        FF            .byte	$FF
09869                                           ! 1190  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
09870 2354                        F0            .byte	$F0
09871 2355                        F0            .byte	$F0
09872 2356                        F0            .byte	$F0
09873 2357                        F0            .byte	$F0
09874 2358                        F0            .byte	$F0
09875 2359                        F0            .byte	$F0
09876 235A                        F0            .byte	$F0
09877 235B                        F0            .byte	$F0
09878 235C                        F0            .byte	$F0
09879 235D                        F0            .byte	$F0
09880 235E                        F0            .byte	$F0
09881 235F                        F0            .byte	$F0
09882 2360                        F0            .byte	$F0
09883 2361                        F0            .byte	$F0
09884                                           ! 1191  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
09885 2362                        0F            .byte	$F
09886 2363                        0F            .byte	$F
09887 2364                        0F            .byte	$F
09888 2365                        0F            .byte	$F
09889 2366                        0F            .byte	$F
09890 2367                        0F            .byte	$F
09891 2368                        0F            .byte	$F
09892 2369                        0F            .byte	$F
09893 236A                        0F            .byte	$F
09894 236B                        0F            .byte	$F
09895 236C                        0F            .byte	$F
09896 236D                        0F            .byte	$F
09897 236E                        0F            .byte	$F
09898 236F                        0F            .byte	$F
09899                                           ! 1192  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09900 2370                        FF            .byte	$FF
09901 2371                        FF            .byte	$FF
09902 2372                        FF            .byte	$FF
09903 2373                        FF            .byte	$FF
09904 2374                        FF            .byte	$FF
09905 2375                        FF            .byte	$FF
09906 2376                        FF            .byte	$FF
09907 2377                        00            .byte	0
09908 2378                        00            .byte	0
09909 2379                        00            .byte	0
09910 237A                        00            .byte	0
09911 237B                        00            .byte	0
09912 237C                        00            .byte	0
09913 237D                        00            .byte	0
09914                                           ! 1193  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
09915 237E                        00            .byte	0
09916 237F                        00            .byte	0
09917 2380                        00            .byte	0
09918 2381                        00            .byte	0
09919 2382                        00            .byte	0
09920 2383                        76            .byte	$76
09921 2384                        DC            .byte	$DC
09922 2385                        D8            .byte	$D8
09923 2386                        D8            .byte	$D8
09924 2387                        DC            .byte	$DC
09925 2388                        76            .byte	$76
09926 2389                        00            .byte	0
09927 238A                        00            .byte	0
09928 238B                        00            .byte	0
09929                                           ! 1194  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
09930 238C                        00            .byte	0
09931 238D                        00            .byte	0
09932 238E                        00            .byte	0
09933 238F                        00            .byte	0
09934 2390                        7C            .byte	$7C
09935 2391                        C6            .byte	$C6
09936 2392                        FC            .byte	$FC
09937 2393                        C6            .byte	$C6
09938 2394                        C6            .byte	$C6
09939 2395                        FC            .byte	$FC
09940 2396                        C0            .byte	$C0
09941 2397                        C0            .byte	$C0
09942 2398                        40            .byte	$40
09943 2399                        00            .byte	0
09944                                           ! 1195  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
09945 239A                        00            .byte	0
09946 239B                        00            .byte	0
09947 239C                        FE            .byte	$FE
09948 239D                        C6            .byte	$C6
09949 239E                        C6            .byte	$C6
09950 239F                        C0            .byte	$C0
09951 23A0                        C0            .byte	$C0
09952 23A1                        C0            .byte	$C0
09953 23A2                        C0            .byte	$C0
09954 23A3                        C0            .byte	$C0
09955 23A4                        C0            .byte	$C0
09956 23A5                        00            .byte	0
09957 23A6                        00            .byte	0
09958 23A7                        00            .byte	0
09959                                           ! 1196  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
09960 23A8                        00            .byte	0
09961 23A9                        00            .byte	0
09962 23AA                        00            .byte	0
09963 23AB                        00            .byte	0
09964 23AC                        FE            .byte	$FE
09965 23AD                        6C            .byte	$6C
09966 23AE                        6C            .byte	$6C
09967 23AF                        6C            .byte	$6C
09968 23B0                        6C            .byte	$6C
09969 23B1                        6C            .byte	$6C
09970 23B2                        6C            .byte	$6C
09971 23B3                        00            .byte	0
09972 23B4                        00            .byte	0
09973 23B5                        00            .byte	0
09974                                           ! 1197  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
09975 23B6                        00            .byte	0
09976 23B7                        00            .byte	0
09977 23B8                        FE            .byte	$FE
09978 23B9                        C6            .byte	$C6
09979 23BA                        60            .byte	$60
09980 23BB                        30            .byte	$30
09981 23BC                        18            .byte	$18
09982 23BD                        30            .byte	$30
09983 23BE                        60            .byte	$60
09984 23BF                        C6            .byte	$C6
09985 23C0                        FE            .byte	$FE
09986 23C1                        00            .byte	0
09987 23C2                        00            .byte	0
09988 23C3                        00            .byte	0
09989                                           ! 1198  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
09990 23C4                        00            .byte	0
09991 23C5                        00            .byte	0
09992 23C6                        00            .byte	0
09993 23C7                        00            .byte	0
09994 23C8                        00            .byte	0
09995 23C9                        7E            .byte	$7E
09996 23CA                        D8            .byte	$D8
09997 23CB                        D8            .byte	$D8
09998 23CC                        D8            .byte	$D8
09999 23CD                        D8            .byte	$D8
10000 23CE                        70            .byte	$70
10001 23CF                        00            .byte	0
10002 23D0                        00            .byte	0
10003 23D1                        00            .byte	0
10004                                           ! 1199  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10005 23D2                        00            .byte	0
10006 23D3                        00            .byte	0
10007 23D4                        00            .byte	0
10008 23D5                        00            .byte	0
10009 23D6                        66            .byte	$66
10010 23D7                        66            .byte	$66
10011 23D8                        66            .byte	$66
10012 23D9                        66            .byte	$66
10013 23DA                        7C            .byte	$7C
10014 23DB                        60            .byte	$60
10015 23DC                        60            .byte	$60
10016 23DD                        C0            .byte	$C0
10017 23DE                        00            .byte	0
10018 23DF                        00            .byte	0
10019                                           ! 1200  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10020 23E0                        00            .byte	0
10021 23E1                        00            .byte	0
10022 23E2                        00            .byte	0
10023 23E3                        00            .byte	0
10024 23E4                        76            .byte	$76
10025 23E5                        DC            .byte	$DC
10026 23E6                        18            .byte	$18
10027 23E7                        18            .byte	$18
10028 23E8                        18            .byte	$18
10029 23E9                        18            .byte	$18
10030 23EA                        18            .byte	$18
10031 23EB                        00            .byte	0
10032 23EC                        00            .byte	0
10033 23ED                        00            .byte	0
10034                                           ! 1201  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10035 23EE                        00            .byte	0
10036 23EF                        00            .byte	0
10037 23F0                        7E            .byte	$7E
10038 23F1                        18            .byte	$18
10039 23F2                        3C            .byte	$3C
10040 23F3                        66            .byte	$66
10041 23F4                        66            .byte	$66
10042 23F5                        66            .byte	$66
10043 23F6                        3C            .byte	$3C
10044 23F7                        18            .byte	$18
10045 23F8                        7E            .byte	$7E
10046 23F9                        00            .byte	0
10047 23FA                        00            .byte	0
10048 23FB                        00            .byte	0
10049                                           ! 1202  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10050 23FC                        00            .byte	0
10051 23FD                        00            .byte	0
10052 23FE                        38            .byte	$38
10053 23FF                        6C            .byte	$6C
10054 2400                        C6            .byte	$C6
10055 2401                        C6            .byte	$C6
10056 2402                        FE            .byte	$FE
10057 2403                        C6            .byte	$C6
10058 2404                        C6            .byte	$C6
10059 2405                        6C            .byte	$6C
10060 2406                        38            .byte	$38
10061 2407                        00            .byte	0
10062 2408                        00            .byte	0
10063 2409                        00            .byte	0
10064                                           ! 1203  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10065 240A                        00            .byte	0
10066 240B                        00            .byte	0
10067 240C                        38            .byte	$38
10068 240D                        6C            .byte	$6C
10069 240E                        C6            .byte	$C6
10070 240F                        C6            .byte	$C6
10071 2410                        C6            .byte	$C6
10072 2411                        6C            .byte	$6C
10073 2412                        6C            .byte	$6C
10074 2413                        6C            .byte	$6C
10075 2414                        EE            .byte	$EE
10076 2415                        00            .byte	0
10077 2416                        00            .byte	0
10078 2417                        00            .byte	0
10079                                           ! 1204  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10080 2418                        00            .byte	0
10081 2419                        00            .byte	0
10082 241A                        1E            .byte	$1E
10083 241B                        30            .byte	$30
10084 241C                        18            .byte	$18
10085 241D                        0C            .byte	$C
10086 241E                        3E            .byte	$3E
10087 241F                        66            .byte	$66
10088 2420                        66            .byte	$66
10089 2421                        66            .byte	$66
10090 2422                        3C            .byte	$3C
10091 2423                        00            .byte	0
10092 2424                        00            .byte	0
10093 2425                        00            .byte	0
10094                                           ! 1205  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10095 2426                        00            .byte	0
10096 2427                        00            .byte	0
10097 2428                        00            .byte	0
10098 2429                        00            .byte	0
10099 242A                        00            .byte	0
10100 242B                        7E            .byte	$7E
10101 242C                        DB            .byte	$DB
10102 242D                        DB            .byte	$DB
10103 242E                        7E            .byte	$7E
10104 242F                        00            .byte	0
10105 2430                        00            .byte	0
10106 2431                        00            .byte	0
10107 2432                        00            .byte	0
10108 2433                        00            .byte	0
10109                                           ! 1206  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10110 2434                        00            .byte	0
10111 2435                        00            .byte	0
10112 2436                        03            .byte	3
10113 2437                        06            .byte	6
10114 2438                        7E            .byte	$7E
10115 2439                        DB            .byte	$DB
10116 243A                        DB            .byte	$DB
10117 243B                        F3            .byte	$F3
10118 243C                        7E            .byte	$7E
10119 243D                        60            .byte	$60
10120 243E                        C0            .byte	$C0
10121 243F                        00            .byte	0
10122 2440                        00            .byte	0
10123 2441                        00            .byte	0
10124                                           ! 1207  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10125 2442                        00            .byte	0
10126 2443                        00            .byte	0
10127 2444                        1C            .byte	$1C
10128 2445                        30            .byte	$30
10129 2446                        60            .byte	$60
10130 2447                        60            .byte	$60
10131 2448                        7C            .byte	$7C
10132 2449                        60            .byte	$60
10133 244A                        60            .byte	$60
10134 244B                        30            .byte	$30
10135 244C                        1C            .byte	$1C
10136 244D                        00            .byte	0
10137 244E                        00            .byte	0
10138 244F                        00            .byte	0
10139                                           ! 1208  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10140 2450                        00            .byte	0
10141 2451                        00            .byte	0
10142 2452                        00            .byte	0
10143 2453                        7C            .byte	$7C
10144 2454                        C6            .byte	$C6
10145 2455                        C6            .byte	$C6
10146 2456                        C6            .byte	$C6
10147 2457                        C6            .byte	$C6
10148 2458                        C6            .byte	$C6
10149 2459                        C6            .byte	$C6
10150 245A                        C6            .byte	$C6
10151 245B                        00            .byte	0
10152 245C                        00            .byte	0
10153 245D                        00            .byte	0
10154                                           ! 1209  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10155 245E                        00            .byte	0
10156 245F                        00            .byte	0
10157 2460                        00            .byte	0
10158 2461                        FE            .byte	$FE
10159 2462                        00            .byte	0
10160 2463                        00            .byte	0
10161 2464                        FE            .byte	$FE
10162 2465                        00            .byte	0
10163 2466                        00            .byte	0
10164 2467                        FE            .byte	$FE
10165 2468                        00            .byte	0
10166 2469                        00            .byte	0
10167 246A                        00            .byte	0
10168 246B                        00            .byte	0
10169                                           ! 1210  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10170 246C                        00            .byte	0
10171 246D                        00            .byte	0
10172 246E                        00            .byte	0
10173 246F                        18            .byte	$18
10174 2470                        18            .byte	$18
10175 2471                        7E            .byte	$7E
10176 2472                        18            .byte	$18
10177 2473                        18            .byte	$18
10178 2474                        00            .byte	0
10179 2475                        00            .byte	0
10180 2476                        FF            .byte	$FF
10181 2477                        00            .byte	0
10182 2478                        00            .byte	0
10183 2479                        00            .byte	0
10184                                           ! 1211  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10185 247A                        00            .byte	0
10186 247B                        00            .byte	0
10187 247C                        30            .byte	$30
10188 247D                        18            .byte	$18
10189 247E                        0C            .byte	$C
10190 247F                        06            .byte	6
10191 2480                        0C            .byte	$C
10192 2481                        18            .byte	$18
10193 2482                        30            .byte	$30
10194 2483                        00            .byte	0
10195 2484                        7E            .byte	$7E
10196 2485                        00            .byte	0
10197 2486                        00            .byte	0
10198 2487                        00            .byte	0
10199                                           ! 1212  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10200 2488                        00            .byte	0
10201 2489                        00            .byte	0
10202 248A                        0C            .byte	$C
10203 248B                        18            .byte	$18
10204 248C                        30            .byte	$30
10205 248D                        60            .byte	$60
10206 248E                        30            .byte	$30
10207 248F                        18            .byte	$18
10208 2490                        0C            .byte	$C
10209 2491                        00            .byte	0
10210 2492                        7E            .byte	$7E
10211 2493                        00            .byte	0
10212 2494                        00            .byte	0
10213 2495                        00            .byte	0
10214                                           ! 1213  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10215 2496                        00            .byte	0
10216 2497                        00            .byte	0
10217 2498                        0E            .byte	$E
10218 2499                        1B            .byte	$1B
10219 249A                        1B            .byte	$1B
10220 249B                        18            .byte	$18
10221 249C                        18            .byte	$18
10222 249D                        18            .byte	$18
10223 249E                        18            .byte	$18
10224 249F                        18            .byte	$18
10225 24A0                        18            .byte	$18
10226 24A1                        18            .byte	$18
10227 24A2                        18            .byte	$18
10228 24A3                        18            .byte	$18
10229                                           ! 1214  
10230                                           ! 1214 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10231 24A4                        18            .byte	$18
10232 24A5                        18            .byte	$18
10233 24A6                        18            .byte	$18
10234 24A7                        18            .byte	$18
10235 24A8                        18            .byte	$18
10236 24A9                        18            .byte	$18
10237 24AA                        18            .byte	$18
10238 24AB                        18            .byte	$18
10239 24AC                        D8            .byte	$D8
10240 24AD                        D8            .byte	$D8
10241 24AE                        70            .byte	$70
10242 24AF                        00            .byte	0
10243 24B0                        00            .byte	0
10244 24B1                        00            .byte	0
10245                                           ! 1215  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10246 24B2                        00            .byte	0
10247 24B3                        00            .byte	0
10248 24B4                        00            .byte	0
10249 24B5                        18            .byte	$18
10250 24B6                        18            .byte	$18
10251 24B7                        00            .byte	0
10252 24B8                        7E            .byte	$7E
10253 24B9                        00            .byte	0
10254 24BA                        18            .byte	$18
10255 24BB                        18            .byte	$18
10256 24BC                        00            .byte	0
10257 24BD                        00            .byte	0
10258 24BE                        00            .byte	0
10259 24BF                        00            .byte	0
10260                                           ! 1216  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10261 24C0                        00            .byte	0
10262 24C1                        00            .byte	0
10263 24C2                        00            .byte	0
10264 24C3                        00            .byte	0
10265 24C4                        76            .byte	$76
10266 24C5                        DC            .byte	$DC
10267 24C6                        00            .byte	0
10268 24C7                        76            .byte	$76
10269 24C8                        DC            .byte	$DC
10270 24C9                        00            .byte	0
10271 24CA                        00            .byte	0
10272 24CB                        00            .byte	0
10273 24CC                        00            .byte	0
10274 24CD                        00            .byte	0
10275                                           ! 1217  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10276 24CE                        00            .byte	0
10277 24CF                        38            .byte	$38
10278 24D0                        6C            .byte	$6C
10279 24D1                        6C            .byte	$6C
10280 24D2                        38            .byte	$38
10281 24D3                        00            .byte	0
10282 24D4                        00            .byte	0
10283 24D5                        00            .byte	0
10284 24D6                        00            .byte	0
10285 24D7                        00            .byte	0
10286 24D8                        00            .byte	0
10287 24D9                        00            .byte	0
10288 24DA                        00            .byte	0
10289 24DB                        00            .byte	0
10290                                           ! 1218  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10291 24DC                        00            .byte	0
10292 24DD                        00            .byte	0
10293 24DE                        00            .byte	0
10294 24DF                        00            .byte	0
10295 24E0                        00            .byte	0
10296 24E1                        00            .byte	0
10297 24E2                        18            .byte	$18
10298 24E3                        18            .byte	$18
10299 24E4                        00            .byte	0
10300 24E5                        00            .byte	0
10301 24E6                        00            .byte	0
10302 24E7                        00            .byte	0
10303 24E8                        00            .byte	0
10304 24E9                        00            .byte	0
10305                                           ! 1219  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10306 24EA                        00            .byte	0
10307 24EB                        00            .byte	0
10308 24EC                        00            .byte	0
10309 24ED                        00            .byte	0
10310 24EE                        00            .byte	0
10311 24EF                        00            .byte	0
10312 24F0                        00            .byte	0
10313 24F1                        18            .byte	$18
10314 24F2                        00            .byte	0
10315 24F3                        00            .byte	0
10316 24F4                        00            .byte	0
10317 24F5                        00            .byte	0
10318 24F6                        00            .byte	0
10319 24F7                        00            .byte	0
10320                                           ! 1220  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10321 24F8                        00            .byte	0
10322 24F9                        0F            .byte	$F
10323 24FA                        0C            .byte	$C
10324 24FB                        0C            .byte	$C
10325 24FC                        0C            .byte	$C
10326 24FD                        0C            .byte	$C
10327 24FE                        0C            .byte	$C
10328 24FF                        EC            .byte	$EC
10329 2500                        6C            .byte	$6C
10330 2501                        3C            .byte	$3C
10331 2502                        1C            .byte	$1C
10332 2503                        00            .byte	0
10333 2504                        00            .byte	0
10334 2505                        00            .byte	0
10335                                           ! 1221  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10336 2506                        00            .byte	0
10337 2507                        D8            .byte	$D8
10338 2508                        6C            .byte	$6C
10339 2509                        6C            .byte	$6C
10340 250A                        6C            .byte	$6C
10341 250B                        6C            .byte	$6C
10342 250C                        6C            .byte	$6C
10343 250D                        00            .byte	0
10344 250E                        00            .byte	0
10345 250F                        00            .byte	0
10346 2510                        00            .byte	0
10347 2511                        00            .byte	0
10348 2512                        00            .byte	0
10349 2513                        00            .byte	0
10350                                           ! 1222  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10351 2514                        00            .byte	0
10352 2515                        70            .byte	$70
10353 2516                        D8            .byte	$D8
10354 2517                        30            .byte	$30
10355 2518                        60            .byte	$60
10356 2519                        C8            .byte	$C8
10357 251A                        F8            .byte	$F8
10358 251B                        00            .byte	0
10359 251C                        00            .byte	0
10360 251D                        00            .byte	0
10361 251E                        00            .byte	0
10362 251F                        00            .byte	0
10363 2520                        00            .byte	0
10364 2521                        00            .byte	0
10365                                           ! 1223  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10366 2522                        00            .byte	0
10367 2523                        00            .byte	0
10368 2524                        00            .byte	0
10369 2525                        00            .byte	0
10370 2526                        7C            .byte	$7C
10371 2527                        7C            .byte	$7C
10372 2528                        7C            .byte	$7C
10373 2529                        7C            .byte	$7C
10374 252A                        7C            .byte	$7C
10375 252B                        7C            .byte	$7C
10376 252C                        00            .byte	0
10377 252D                        00            .byte	0
10378 252E                        00            .byte	0
10379 252F                        00            .byte	0
10380                                           ! 1224  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10381 2530                        00            .byte	0
10382 2531                        00            .byte	0
10383 2532                        00            .byte	0
10384 2533                        00            .byte	0
10385 2534                        00            .byte	0
10386 2535                        00            .byte	0
10387 2536                        00            .byte	0
10388 2537                        00            .byte	0
10389 2538                        00            .byte	0
10390 2539                        00            .byte	0
10391 253A                        00            .byte	0
10392 253B                        00            .byte	0
10393 253C                        00            .byte	0
10394                                           ! 1225 };
10395 253D                        00            .byte	0
10396                                           !BCC_EOS
10397                                           ! 1226 static Bit8u vgafont16[256*16]=
10398                                           ! 1227 {
10399                       0000253E            _vgafont16:
10400                                           ! 1228  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10401 253E                        00            .byte	0
10402 253F                        00            .byte	0
10403 2540                        00            .byte	0
10404 2541                        00            .byte	0
10405 2542                        00            .byte	0
10406 2543                        00            .byte	0
10407 2544                        00            .byte	0
10408 2545                        00            .byte	0
10409 2546                        00            .byte	0
10410 2547                        00            .byte	0
10411 2548                        00            .byte	0
10412 2549                        00            .byte	0
10413 254A                        00            .byte	0
10414 254B                        00            .byte	0
10415 254C                        00            .byte	0
10416 254D                        00            .byte	0
10417                                           ! 1229  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10418 254E                        00            .byte	0
10419 254F                        00            .byte	0
10420 2550                        7E            .byte	$7E
10421 2551                        81            .byte	$81
10422 2552                        A5            .byte	$A5
10423 2553                        81            .byte	$81
10424 2554                        81            .byte	$81
10425 2555                        BD            .byte	$BD
10426 2556                        99            .byte	$99
10427 2557                        81            .byte	$81
10428 2558                        81            .byte	$81
10429 2559                        7E            .byte	$7E
10430 255A                        00            .byte	0
10431 255B                        00            .byte	0
10432 255C                        00            .byte	0
10433 255D                        00            .byte	0
10434                                           ! 1230  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10435 255E                        00            .byte	0
10436 255F                        00            .byte	0
10437 2560                        7E            .byte	$7E
10438 2561                        FF            .byte	$FF
10439 2562                        DB            .byte	$DB
10440 2563                        FF            .byte	$FF
10441 2564                        FF            .byte	$FF
10442 2565                        C3            .byte	$C3
10443 2566                        E7            .byte	$E7
10444 2567                        FF            .byte	$FF
10445 2568                        FF            .byte	$FF
10446 2569                        7E            .byte	$7E
10447 256A                        00            .byte	0
10448 256B                        00            .byte	0
10449 256C                        00            .byte	0
10450 256D                        00            .byte	0
10451                                           ! 1231  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10452 256E                        00            .byte	0
10453 256F                        00            .byte	0
10454 2570                        00            .byte	0
10455 2571                        00            .byte	0
10456 2572                        6C            .byte	$6C
10457 2573                        FE            .byte	$FE
10458 2574                        FE            .byte	$FE
10459 2575                        FE            .byte	$FE
10460 2576                        FE            .byte	$FE
10461 2577                        7C            .byte	$7C
10462 2578                        38            .byte	$38
10463 2579                        10            .byte	$10
10464 257A                        00            .byte	0
10465 257B                        00            .byte	0
10466 257C                        00            .byte	0
10467 257D                        00            .byte	0
10468                                           ! 1232  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10469 257E                        00            .byte	0
10470 257F                        00            .byte	0
10471 2580                        00            .byte	0
10472 2581                        00            .byte	0
10473 2582                        10            .byte	$10
10474 2583                        38            .byte	$38
10475 2584                        7C            .byte	$7C
10476 2585                        FE            .byte	$FE
10477 2586                        7C            .byte	$7C
10478 2587                        38            .byte	$38
10479 2588                        10            .byte	$10
10480 2589                        00            .byte	0
10481 258A                        00            .byte	0
10482 258B                        00            .byte	0
10483 258C                        00            .byte	0
10484 258D                        00            .byte	0
10485                                           ! 1233  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10486 258E                        00            .byte	0
10487 258F                        00            .byte	0
10488 2590                        00            .byte	0
10489 2591                        18            .byte	$18
10490 2592                        3C            .byte	$3C
10491 2593                        3C            .byte	$3C
10492 2594                        E7            .byte	$E7
10493 2595                        E7            .byte	$E7
10494 2596                        E7            .byte	$E7
10495 2597                        18            .byte	$18
10496 2598                        18            .byte	$18
10497 2599                        3C            .byte	$3C
10498 259A                        00            .byte	0
10499 259B                        00            .byte	0
10500 259C                        00            .byte	0
10501 259D                        00            .byte	0
10502                                           ! 1234  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10503 259E                        00            .byte	0
10504 259F                        00            .byte	0
10505 25A0                        00            .byte	0
10506 25A1                        18            .byte	$18
10507 25A2                        3C            .byte	$3C
10508 25A3                        7E            .byte	$7E
10509 25A4                        FF            .byte	$FF
10510 25A5                        FF            .byte	$FF
10511 25A6                        7E            .byte	$7E
10512 25A7                        18            .byte	$18
10513 25A8                        18            .byte	$18
10514 25A9                        3C            .byte	$3C
10515 25AA                        00            .byte	0
10516 25AB                        00            .byte	0
10517 25AC                        00            .byte	0
10518 25AD                        00            .byte	0
10519                                           ! 1235  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10520 25AE                        00            .byte	0
10521 25AF                        00            .byte	0
10522 25B0                        00            .byte	0
10523 25B1                        00            .byte	0
10524 25B2                        00            .byte	0
10525 25B3                        00            .byte	0
10526 25B4                        18            .byte	$18
10527 25B5                        3C            .byte	$3C
10528 25B6                        3C            .byte	$3C
10529 25B7                        18            .byte	$18
10530 25B8                        00            .byte	0
10531 25B9                        00            .byte	0
10532 25BA                        00            .byte	0
10533 25BB                        00            .byte	0
10534 25BC                        00            .byte	0
10535 25BD                        00            .byte	0
10536                                           ! 1236  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10537 25BE                        FF            .byte	$FF
10538 25BF                        FF            .byte	$FF
10539 25C0                        FF            .byte	$FF
10540 25C1                        FF            .byte	$FF
10541 25C2                        FF            .byte	$FF
10542 25C3                        FF            .byte	$FF
10543 25C4                        E7            .byte	$E7
10544 25C5                        C3            .byte	$C3
10545 25C6                        C3            .byte	$C3
10546 25C7                        E7            .byte	$E7
10547 25C8                        FF            .byte	$FF
10548 25C9                        FF            .byte	$FF
10549 25CA                        FF            .byte	$FF
10550 25CB                        FF            .byte	$FF
10551 25CC                        FF            .byte	$FF
10552 25CD                        FF            .byte	$FF
10553                                           ! 1237  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10554 25CE                        00            .byte	0
10555 25CF                        00            .byte	0
10556 25D0                        00            .byte	0
10557 25D1                        00            .byte	0
10558 25D2                        00            .byte	0
10559 25D3                        3C            .byte	$3C
10560 25D4                        66            .byte	$66
10561 25D5                        42            .byte	$42
10562 25D6                        42            .byte	$42
10563 25D7                        66            .byte	$66
10564 25D8                        3C            .byte	$3C
10565 25D9                        00            .byte	0
10566 25DA                        00            .byte	0
10567 25DB                        00            .byte	0
10568 25DC                        00            .byte	0
10569 25DD                        00            .byte	0
10570                                           ! 1238  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10571 25DE                        FF            .byte	$FF
10572 25DF                        FF            .byte	$FF
10573 25E0                        FF            .byte	$FF
10574 25E1                        FF            .byte	$FF
10575 25E2                        FF            .byte	$FF
10576 25E3                        C3            .byte	$C3
10577 25E4                        99            .byte	$99
10578 25E5                        BD            .byte	$BD
10579 25E6                        BD            .byte	$BD
10580 25E7                        99            .byte	$99
10581 25E8                        C3            .byte	$C3
10582 25E9                        FF            .byte	$FF
10583 25EA                        FF            .byte	$FF
10584 25EB                        FF            .byte	$FF
10585 25EC                        FF            .byte	$FF
10586 25ED                        FF            .byte	$FF
10587                                           ! 1239  0x00, 0x00
10588 25EE                        00            .byte	0
10589                                           ! 1239 , 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10590 25EF                        00            .byte	0
10591 25F0                        1E            .byte	$1E
10592 25F1                        0E            .byte	$E
10593 25F2                        1A            .byte	$1A
10594 25F3                        32            .byte	$32
10595 25F4                        78            .byte	$78
10596 25F5                        CC            .byte	$CC
10597 25F6                        CC            .byte	$CC
10598 25F7                        CC            .byte	$CC
10599 25F8                        CC            .byte	$CC
10600 25F9                        78            .byte	$78
10601 25FA                        00            .byte	0
10602 25FB                        00            .byte	0
10603 25FC                        00            .byte	0
10604 25FD                        00            .byte	0
10605                                           ! 1240  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10606 25FE                        00            .byte	0
10607 25FF                        00            .byte	0
10608 2600                        3C            .byte	$3C
10609 2601                        66            .byte	$66
10610 2602                        66            .byte	$66
10611 2603                        66            .byte	$66
10612 2604                        66            .byte	$66
10613 2605                        3C            .byte	$3C
10614 2606                        18            .byte	$18
10615 2607                        7E            .byte	$7E
10616 2608                        18            .byte	$18
10617 2609                        18            .byte	$18
10618 260A                        00            .byte	0
10619 260B                        00            .byte	0
10620 260C                        00            .byte	0
10621 260D                        00            .byte	0
10622                                           ! 1241  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10623 260E                        00            .byte	0
10624 260F                        00            .byte	0
10625 2610                        3F            .byte	$3F
10626 2611                        33            .byte	$33
10627 2612                        3F            .byte	$3F
10628 2613                        30            .byte	$30
10629 2614                        30            .byte	$30
10630 2615                        30            .byte	$30
10631 2616                        30            .byte	$30
10632 2617                        70            .byte	$70
10633 2618                        F0            .byte	$F0
10634 2619                        E0            .byte	$E0
10635 261A                        00            .byte	0
10636 261B                        00            .byte	0
10637 261C                        00            .byte	0
10638 261D                        00            .byte	0
10639                                           ! 1242  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10640 261E                        00            .byte	0
10641 261F                        00            .byte	0
10642 2620                        7F            .byte	$7F
10643 2621                        63            .byte	$63
10644 2622                        7F            .byte	$7F
10645 2623                        63            .byte	$63
10646 2624                        63            .byte	$63
10647 2625                        63            .byte	$63
10648 2626                        63            .byte	$63
10649 2627                        67            .byte	$67
10650 2628                        E7            .byte	$E7
10651 2629                        E6            .byte	$E6
10652 262A                        C0            .byte	$C0
10653 262B                        00            .byte	0
10654 262C                        00            .byte	0
10655 262D                        00            .byte	0
10656                                           ! 1243  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10657 262E                        00            .byte	0
10658 262F                        00            .byte	0
10659 2630                        00            .byte	0
10660 2631                        18            .byte	$18
10661 2632                        18            .byte	$18
10662 2633                        DB            .byte	$DB
10663 2634                        3C            .byte	$3C
10664 2635                        E7            .byte	$E7
10665 2636                        3C            .byte	$3C
10666 2637                        DB            .byte	$DB
10667 2638                        18            .byte	$18
10668 2639                        18            .byte	$18
10669 263A                        00            .byte	0
10670 263B                        00            .byte	0
10671 263C                        00            .byte	0
10672 263D                        00            .byte	0
10673                                           ! 1244  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10674 263E                        00            .byte	0
10675 263F                        80            .byte	$80
10676 2640                        C0            .byte	$C0
10677 2641                        E0            .byte	$E0
10678 2642                        F0            .byte	$F0
10679 2643                        F8            .byte	$F8
10680 2644                        FE            .byte	$FE
10681 2645                        F8            .byte	$F8
10682 2646                        F0            .byte	$F0
10683 2647                        E0            .byte	$E0
10684 2648                        C0            .byte	$C0
10685 2649                        80            .byte	$80
10686 264A                        00            .byte	0
10687 264B                        00            .byte	0
10688 264C                        00            .byte	0
10689 264D                        00            .byte	0
10690                                           ! 1245  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10691 264E                        00            .byte	0
10692 264F                        02            .byte	2
10693 2650                        06            .byte	6
10694 2651                        0E            .byte	$E
10695 2652                        1E            .byte	$1E
10696 2653                        3E            .byte	$3E
10697 2654                        FE            .byte	$FE
10698 2655                        3E            .byte	$3E
10699 2656                        1E            .byte	$1E
10700 2657                        0E            .byte	$E
10701 2658                        06            .byte	6
10702 2659                        02            .byte	2
10703 265A                        00            .byte	0
10704 265B                        00            .byte	0
10705 265C                        00            .byte	0
10706 265D                        00            .byte	0
10707                                           ! 1246  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10708 265E                        00            .byte	0
10709 265F                        00            .byte	0
10710 2660                        18            .byte	$18
10711 2661                        3C            .byte	$3C
10712 2662                        7E            .byte	$7E
10713 2663                        18            .byte	$18
10714 2664                        18            .byte	$18
10715 2665                        18            .byte	$18
10716 2666                        7E            .byte	$7E
10717 2667                        3C            .byte	$3C
10718 2668                        18            .byte	$18
10719 2669                        00            .byte	0
10720 266A                        00            .byte	0
10721 266B                        00            .byte	0
10722 266C                        00            .byte	0
10723 266D                        00            .byte	0
10724                                           ! 1247  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10725 266E                        00            .byte	0
10726 266F                        00            .byte	0
10727 2670                        66            .byte	$66
10728 2671                        66            .byte	$66
10729 2672                        66            .byte	$66
10730 2673                        66            .byte	$66
10731 2674                        66            .byte	$66
10732 2675                        66            .byte	$66
10733 2676                        66            .byte	$66
10734 2677                        00            .byte	0
10735 2678                        66            .byte	$66
10736 2679                        66            .byte	$66
10737 267A                        00            .byte	0
10738 267B                        00            .byte	0
10739 267C                        00            .byte	0
10740 267D                        00            .byte	0
10741                                           ! 1248  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
10742 267E                        00            .byte	0
10743 267F                        00            .byte	0
10744 2680                        7F            .byte	$7F
10745 2681                        DB            .byte	$DB
10746 2682                        DB            .byte	$DB
10747 2683                        DB            .byte	$DB
10748 2684                        7B            .byte	$7B
10749 2685                        1B            .byte	$1B
10750 2686                        1B            .byte	$1B
10751 2687                        1B            .byte	$1B
10752 2688                        1B            .byte	$1B
10753 2689                        1B            .byte	$1B
10754 268A                        00            .byte	0
10755 268B                        00            .byte	0
10756 268C                        00            .byte	0
10757 268D                        00            .byte	0
10758                                           ! 1249  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
10759 268E                        00            .byte	0
10760 268F                        7C            .byte	$7C
10761 2690                        C6            .byte	$C6
10762 2691                        60            .byte	$60
10763 2692                        38            .byte	$38
10764 2693                        6C            .byte	$6C
10765 2694                        C6            .byte	$C6
10766 2695                        C6            .byte	$C6
10767 2696                        6C            .byte	$6C
10768 2697                        38            .byte	$38
10769 2698                        0C            .byte	$C
10770 2699                        C6            .byte	$C6
10771 269A                        7C            .byte	$7C
10772 269B                        00            .byte	0
10773 269C                        00            .byte	0
10774 269D                        00            .byte	0
10775                                           ! 1250  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
10776 269E                        00            .byte	0
10777 269F                        00            .byte	0
10778 26A0                        00            .byte	0
10779 26A1                        00            .byte	0
10780 26A2                        00            .byte	0
10781 26A3                        00            .byte	0
10782 26A4                        00            .byte	0
10783 26A5                        00            .byte	0
10784 26A6                        FE            .byte	$FE
10785 26A7                        FE            .byte	$FE
10786 26A8                        FE            .byte	$FE
10787 26A9                        FE            .byte	$FE
10788 26AA                        00            .byte	0
10789 26AB                        00            .byte	0
10790 26AC                        00            .byte	0
10791 26AD                        00            .byte	0
10792                                           ! 1251  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
10793 26AE                        00            .byte	0
10794 26AF                        00            .byte	0
10795 26B0                        18            .byte	$18
10796 26B1                        3C            .byte	$3C
10797 26B2                        7E            .byte	$7E
10798 26B3                        18            .byte	$18
10799 26B4                        18            .byte	$18
10800 26B5                        18            .byte	$18
10801 26B6                        7E            .byte	$7E
10802 26B7                        3C            .byte	$3C
10803 26B8                        18            .byte	$18
10804 26B9                        7E            .byte	$7E
10805 26BA                        00            .byte	0
10806 26BB                        00            .byte	0
10807 26BC                        00            .byte	0
10808 26BD                        00            .byte	0
10809                                           ! 1252  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10810 26BE                        00            .byte	0
10811 26BF                        00            .byte	0
10812 26C0                        18            .byte	$18
10813 26C1                        3C            .byte	$3C
10814 26C2                        7E            .byte	$7E
10815 26C3                        18            .byte	$18
10816 26C4                        18            .byte	$18
10817 26C5                        18            .byte	$18
10818 26C6                        18            .byte	$18
10819 26C7                        18            .byte	$18
10820 26C8                        18            .byte	$18
10821 26C9                        18            .byte	$18
10822 26CA                        00            .byte	0
10823 26CB                        00            .byte	0
10824 26CC                        00            .byte	0
10825 26CD                        00            .byte	0
10826                                           ! 1253  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
10827 26CE                        00            .byte	0
10828 26CF                        00            .byte	0
10829 26D0                        18            .byte	$18
10830 26D1                        18            .byte	$18
10831 26D2                        18            .byte	$18
10832 26D3                        18            .byte	$18
10833 26D4                        18            .byte	$18
10834 26D5                        18            .byte	$18
10835 26D6                        18            .byte	$18
10836 26D7                        7E            .byte	$7E
10837 26D8                        3C            .byte	$3C
10838 26D9                        18            .byte	$18
10839 26DA                        00            .byte	0
10840 26DB                        00            .byte	0
10841 26DC                        00            .byte	0
10842 26DD                        00            .byte	0
10843                                           ! 1254  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10844 26DE                        00            .byte	0
10845 26DF                        00            .byte	0
10846 26E0                        00            .byte	0
10847 26E1                        00            .byte	0
10848 26E2                        00            .byte	0
10849 26E3                        18            .byte	$18
10850 26E4                        0C            .byte	$C
10851 26E5                        FE            .byte	$FE
10852 26E6                        0C            .byte	$C
10853 26E7                        18            .byte	$18
10854 26E8                        00            .byte	0
10855 26E9                        00            .byte	0
10856 26EA                        00            .byte	0
10857 26EB                        00            .byte	0
10858 26EC                        00            .byte	0
10859 26ED                        00            .byte	0
10860                                           ! 1255  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10861 26EE                        00            .byte	0
10862 26EF                        00            .byte	0
10863 26F0                        00            .byte	0
10864 26F1                        00            .byte	0
10865 26F2                        00            .byte	0
10866 26F3                        30            .byte	$30
10867 26F4                        60            .byte	$60
10868 26F5                        FE            .byte	$FE
10869 26F6                        60            .byte	$60
10870 26F7                        30            .byte	$30
10871 26F8                        00            .byte	0
10872 26F9                        00            .byte	0
10873 26FA                        00            .byte	0
10874 26FB                        00            .byte	0
10875 26FC                        00            .byte	0
10876 26FD                        00            .byte	0
10877                                           ! 1256  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10878 26FE                        00            .byte	0
10879 26FF                        00            .byte	0
10880 2700                        00            .byte	0
10881 2701                        00            .byte	0
10882 2702                        00            .byte	0
10883 2703                        00            .byte	0
10884 2704                        C0            .byte	$C0
10885 2705                        C0            .byte	$C0
10886 2706                        C0            .byte	$C0
10887 2707                        FE            .byte	$FE
10888 2708                        00            .byte	0
10889 2709                        00            .byte	0
10890 270A                        00            .byte	0
10891 270B                        00            .byte	0
10892 270C                        00            .byte	0
10893 270D                        00            .byte	0
10894                                           ! 1257  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10895 270E                        00            .byte	0
10896 270F                        00            .byte	0
10897 2710                        00            .byte	0
10898 2711                        00            .byte	0
10899 2712                        00            .byte	0
10900 2713                        24            .byte	$24
10901 2714                        66            .byte	$66
10902 2715                        FF            .byte	$FF
10903 2716                        66            .byte	$66
10904 2717                        24            .byte	$24
10905 2718                        00            .byte	0
10906 2719                        00            .byte	0
10907 271A                        00            .byte	0
10908 271B                        00            .byte	0
10909 271C                        00            .byte	0
10910 271D                        00            .byte	0
10911                                           ! 1258  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
10912 271E                        00            .byte	0
10913 271F                        00            .byte	0
10914 2720                        00            .byte	0
10915 2721                        00            .byte	0
10916 2722                        10            .byte	$10
10917 2723                        38            .byte	$38
10918 2724                        38            .byte	$38
10919 2725                        7C            .byte	$7C
10920 2726                        7C            .byte	$7C
10921 2727                        FE            .byte	$FE
10922 2728                        FE            .byte	$FE
10923 2729                        00            .byte	0
10924 272A                        00            .byte	0
10925 272B                        00            .byte	0
10926 272C                        00            .byte	0
10927 272D                        00            .byte	0
10928                                           ! 1259  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10929 272E                        00            .byte	0
10930 272F                        00            .byte	0
10931 2730                        00            .byte	0
10932 2731                        00            .byte	0
10933 2732                        FE            .byte	$FE
10934 2733                        FE            .byte	$FE
10935 2734                        7C            .byte	$7C
10936 2735                        7C            .byte	$7C
10937 2736                        38            .byte	$38
10938 2737                        38            .byte	$38
10939 2738                        10            .byte	$10
10940 2739                        00            .byte	0
10941 273A                        00            .byte	0
10942 273B                        00            .byte	0
10943 273C                        00            .byte	0
10944 273D                        00            .byte	0
10945                                           ! 1260  0x00, 0x00, 0x00, 0x0
10946 273E                        00            .byte	0
10947 273F                        00            .byte	0
10948 2740                        00            .byte	0
10949                                           ! 1260 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10950 2741                        00            .byte	0
10951 2742                        00            .byte	0
10952 2743                        00            .byte	0
10953 2744                        00            .byte	0
10954 2745                        00            .byte	0
10955 2746                        00            .byte	0
10956 2747                        00            .byte	0
10957 2748                        00            .byte	0
10958 2749                        00            .byte	0
10959 274A                        00            .byte	0
10960 274B                        00            .byte	0
10961 274C                        00            .byte	0
10962 274D                        00            .byte	0
10963                                           ! 1261  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10964 274E                        00            .byte	0
10965 274F                        00            .byte	0
10966 2750                        18            .byte	$18
10967 2751                        3C            .byte	$3C
10968 2752                        3C            .byte	$3C
10969 2753                        3C            .byte	$3C
10970 2754                        18            .byte	$18
10971 2755                        18            .byte	$18
10972 2756                        18            .byte	$18
10973 2757                        00            .byte	0
10974 2758                        18            .byte	$18
10975 2759                        18            .byte	$18
10976 275A                        00            .byte	0
10977 275B                        00            .byte	0
10978 275C                        00            .byte	0
10979 275D                        00            .byte	0
10980                                           ! 1262  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10981 275E                        00            .byte	0
10982 275F                        66            .byte	$66
10983 2760                        66            .byte	$66
10984 2761                        66            .byte	$66
10985 2762                        24            .byte	$24
10986 2763                        00            .byte	0
10987 2764                        00            .byte	0
10988 2765                        00            .byte	0
10989 2766                        00            .byte	0
10990 2767                        00            .byte	0
10991 2768                        00            .byte	0
10992 2769                        00            .byte	0
10993 276A                        00            .byte	0
10994 276B                        00            .byte	0
10995 276C                        00            .byte	0
10996 276D                        00            .byte	0
10997                                           ! 1263  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
10998 276E                        00            .byte	0
10999 276F                        00            .byte	0
11000 2770                        00            .byte	0
11001 2771                        6C            .byte	$6C
11002 2772                        6C            .byte	$6C
11003 2773                        FE            .byte	$FE
11004 2774                        6C            .byte	$6C
11005 2775                        6C            .byte	$6C
11006 2776                        6C            .byte	$6C
11007 2777                        FE            .byte	$FE
11008 2778                        6C            .byte	$6C
11009 2779                        6C            .byte	$6C
11010 277A                        00            .byte	0
11011 277B                        00            .byte	0
11012 277C                        00            .byte	0
11013 277D                        00            .byte	0
11014                                           ! 1264  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11015 277E                        18            .byte	$18
11016 277F                        18            .byte	$18
11017 2780                        7C            .byte	$7C
11018 2781                        C6            .byte	$C6
11019 2782                        C2            .byte	$C2
11020 2783                        C0            .byte	$C0
11021 2784                        7C            .byte	$7C
11022 2785                        06            .byte	6
11023 2786                        06            .byte	6
11024 2787                        86            .byte	$86
11025 2788                        C6            .byte	$C6
11026 2789                        7C            .byte	$7C
11027 278A                        18            .byte	$18
11028 278B                        18            .byte	$18
11029 278C                        00            .byte	0
11030 278D                        00            .byte	0
11031                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11032 278E                        00            .byte	0
11033 278F                        00            .byte	0
11034 2790                        00            .byte	0
11035 2791                        00            .byte	0
11036 2792                        C2            .byte	$C2
11037 2793                        C6            .byte	$C6
11038 2794                        0C            .byte	$C
11039 2795                        18            .byte	$18
11040 2796                        30            .byte	$30
11041 2797                        60            .byte	$60
11042 2798                        C6            .byte	$C6
11043 2799                        86            .byte	$86
11044 279A                        00            .byte	0
11045 279B                        00            .byte	0
11046 279C                        00            .byte	0
11047 279D                        00            .byte	0
11048                                           ! 1266  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11049 279E                        00            .byte	0
11050 279F                        00            .byte	0
11051 27A0                        38            .byte	$38
11052 27A1                        6C            .byte	$6C
11053 27A2                        6C            .byte	$6C
11054 27A3                        38            .byte	$38
11055 27A4                        76            .byte	$76
11056 27A5                        DC            .byte	$DC
11057 27A6                        CC            .byte	$CC
11058 27A7                        CC            .byte	$CC
11059 27A8                        CC            .byte	$CC
11060 27A9                        76            .byte	$76
11061 27AA                        00            .byte	0
11062 27AB                        00            .byte	0
11063 27AC                        00            .byte	0
11064 27AD                        00            .byte	0
11065                                           ! 1267  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11066 27AE                        00            .byte	0
11067 27AF                        30            .byte	$30
11068 27B0                        30            .byte	$30
11069 27B1                        30            .byte	$30
11070 27B2                        60            .byte	$60
11071 27B3                        00            .byte	0
11072 27B4                        00            .byte	0
11073 27B5                        00            .byte	0
11074 27B6                        00            .byte	0
11075 27B7                        00            .byte	0
11076 27B8                        00            .byte	0
11077 27B9                        00            .byte	0
11078 27BA                        00            .byte	0
11079 27BB                        00            .byte	0
11080 27BC                        00            .byte	0
11081 27BD                        00            .byte	0
11082                                           ! 1268  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11083 27BE                        00            .byte	0
11084 27BF                        00            .byte	0
11085 27C0                        0C            .byte	$C
11086 27C1                        18            .byte	$18
11087 27C2                        30            .byte	$30
11088 27C3                        30            .byte	$30
11089 27C4                        30            .byte	$30
11090 27C5                        30            .byte	$30
11091 27C6                        30            .byte	$30
11092 27C7                        30            .byte	$30
11093 27C8                        18            .byte	$18
11094 27C9                        0C            .byte	$C
11095 27CA                        00            .byte	0
11096 27CB                        00            .byte	0
11097 27CC                        00            .byte	0
11098 27CD                        00            .byte	0
11099                                           ! 1269  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11100 27CE                        00            .byte	0
11101 27CF                        00            .byte	0
11102 27D0                        30            .byte	$30
11103 27D1                        18            .byte	$18
11104 27D2                        0C            .byte	$C
11105 27D3                        0C            .byte	$C
11106 27D4                        0C            .byte	$C
11107 27D5                        0C            .byte	$C
11108 27D6                        0C            .byte	$C
11109 27D7                        0C            .byte	$C
11110 27D8                        18            .byte	$18
11111 27D9                        30            .byte	$30
11112 27DA                        00            .byte	0
11113 27DB                        00            .byte	0
11114 27DC                        00            .byte	0
11115 27DD                        00            .byte	0
11116                                           ! 1270  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11117 27DE                        00            .byte	0
11118 27DF                        00            .byte	0
11119 27E0                        00            .byte	0
11120 27E1                        00            .byte	0
11121 27E2                        00            .byte	0
11122 27E3                        66            .byte	$66
11123 27E4                        3C            .byte	$3C
11124 27E5                        FF            .byte	$FF
11125 27E6                        3C            .byte	$3C
11126 27E7                        66            .byte	$66
11127 27E8                        00            .byte	0
11128 27E9                        00            .byte	0
11129 27EA                        00            .byte	0
11130 27EB                        00            .byte	0
11131 27EC                        00            .byte	0
11132 27ED                        00            .byte	0
11133                                           ! 1271  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11134 27EE                        00            .byte	0
11135 27EF                        00            .byte	0
11136 27F0                        00            .byte	0
11137 27F1                        00            .byte	0
11138 27F2                        00            .byte	0
11139 27F3                        18            .byte	$18
11140 27F4                        18            .byte	$18
11141 27F5                        7E            .byte	$7E
11142 27F6                        18            .byte	$18
11143 27F7                        18            .byte	$18
11144 27F8                        00            .byte	0
11145 27F9                        00            .byte	0
11146 27FA                        00            .byte	0
11147 27FB                        00            .byte	0
11148 27FC                        00            .byte	0
11149 27FD                        00            .byte	0
11150                                           ! 1272  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11151 27FE                        00            .byte	0
11152 27FF                        00            .byte	0
11153 2800                        00            .byte	0
11154 2801                        00            .byte	0
11155 2802                        00            .byte	0
11156 2803                        00            .byte	0
11157 2804                        00            .byte	0
11158 2805                        00            .byte	0
11159 2806                        00            .byte	0
11160 2807                        18            .byte	$18
11161 2808                        18            .byte	$18
11162 2809                        18            .byte	$18
11163 280A                        30            .byte	$30
11164 280B                        00            .byte	0
11165 280C                        00            .byte	0
11166 280D                        00            .byte	0
11167                                           ! 1273  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11168 280E                        00            .byte	0
11169 280F                        00            .byte	0
11170 2810                        00            .byte	0
11171 2811                        00            .byte	0
11172 2812                        00            .byte	0
11173 2813                        00            .byte	0
11174 2814                        00            .byte	0
11175 2815                        FE            .byte	$FE
11176 2816                        00            .byte	0
11177 2817                        00            .byte	0
11178 2818                        00            .byte	0
11179 2819                        00            .byte	0
11180 281A                        00            .byte	0
11181 281B                        00            .byte	0
11182 281C                        00            .byte	0
11183 281D                        00            .byte	0
11184                                           ! 1274  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11185 281E                        00            .byte	0
11186 281F                        00            .byte	0
11187 2820                        00            .byte	0
11188 2821                        00            .byte	0
11189 2822                        00            .byte	0
11190 2823                        00            .byte	0
11191 2824                        00            .byte	0
11192 2825                        00            .byte	0
11193 2826                        00            .byte	0
11194 2827                        00            .byte	0
11195 2828                        18            .byte	$18
11196 2829                        18            .byte	$18
11197 282A                        00            .byte	0
11198 282B                        00            .byte	0
11199 282C                        00            .byte	0
11200 282D                        00            .byte	0
11201                                           ! 1275  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11202 282E                        00            .byte	0
11203 282F                        00            .byte	0
11204 2830                        00            .byte	0
11205 2831                        00            .byte	0
11206 2832                        02            .byte	2
11207 2833                        06            .byte	6
11208 2834                        0C            .byte	$C
11209 2835                        18            .byte	$18
11210 2836                        30            .byte	$30
11211 2837                        60            .byte	$60
11212 2838                        C0            .byte	$C0
11213 2839                        80            .byte	$80
11214 283A                        00            .byte	0
11215 283B                        00            .byte	0
11216 283C                        00            .byte	0
11217 283D                        00            .byte	0
11218                                           ! 1276  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11219 283E                        00            .byte	0
11220 283F                        00            .byte	0
11221 2840                        3C            .byte	$3C
11222 2841                        66            .byte	$66
11223 2842                        C3            .byte	$C3
11224 2843                        C3            .byte	$C3
11225 2844                        DB            .byte	$DB
11226 2845                        DB            .byte	$DB
11227 2846                        C3            .byte	$C3
11228 2847                        C3            .byte	$C3
11229 2848                        66            .byte	$66
11230 2849                        3C            .byte	$3C
11231 284A                        00            .byte	0
11232 284B                        00            .byte	0
11233 284C                        00            .byte	0
11234 284D                        00            .byte	0
11235                                           ! 1277  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11236 284E                        00            .byte	0
11237 284F                        00            .byte	0
11238 2850                        18            .byte	$18
11239 2851                        38            .byte	$38
11240 2852                        78            .byte	$78
11241 2853                        18            .byte	$18
11242 2854                        18            .byte	$18
11243 2855                        18            .byte	$18
11244 2856                        18            .byte	$18
11245 2857                        18            .byte	$18
11246 2858                        18            .byte	$18
11247 2859                        7E            .byte	$7E
11248 285A                        00            .byte	0
11249 285B                        00            .byte	0
11250 285C                        00            .byte	0
11251 285D                        00            .byte	0
11252                                           ! 1278  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11253 285E                        00            .byte	0
11254 285F                        00            .byte	0
11255 2860                        7C            .byte	$7C
11256 2861                        C6            .byte	$C6
11257 2862                        06            .byte	6
11258 2863                        0C            .byte	$C
11259 2864                        18            .byte	$18
11260 2865                        30            .byte	$30
11261 2866                        60            .byte	$60
11262 2867                        C0            .byte	$C0
11263 2868                        C6            .byte	$C6
11264 2869                        FE            .byte	$FE
11265 286A                        00            .byte	0
11266 286B                        00            .byte	0
11267 286C                        00            .byte	0
11268 286D                        00            .byte	0
11269                                           ! 1279  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11270 286E                        00            .byte	0
11271 286F                        00            .byte	0
11272 2870                        7C            .byte	$7C
11273 2871                        C6            .byte	$C6
11274 2872                        06            .byte	6
11275 2873                        06            .byte	6
11276 2874                        3C            .byte	$3C
11277 2875                        06            .byte	6
11278 2876                        06            .byte	6
11279 2877                        06            .byte	6
11280 2878                        C6            .byte	$C6
11281 2879                        7C            .byte	$7C
11282 287A                        00            .byte	0
11283 287B                        00            .byte	0
11284 287C                        00            .byte	0
11285 287D                        00            .byte	0
11286                                           ! 1280  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11287 287E                        00            .byte	0
11288 287F                        00            .byte	0
11289 2880                        0C            .byte	$C
11290 2881                        1C            .byte	$1C
11291 2882                        3C            .byte	$3C
11292 2883                        6C            .byte	$6C
11293 2884                        CC            .byte	$CC
11294 2885                        FE            .byte	$FE
11295 2886                        0C            .byte	$C
11296 2887                        0C            .byte	$C
11297 2888                        0C            .byte	$C
11298 2889                        1E            .byte	$1E
11299 288A                        00            .byte	0
11300 288B                        00            .byte	0
11301 288C                        00            .byte	0
11302 288D                        00            .byte	0
11303                                           ! 1281  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0x
11304 288E                        00            .byte	0
11305 288F                        00            .byte	0
11306 2890                        FE            .byte	$FE
11307 2891                        C0            .byte	$C0
11308 2892                        C0            .byte	$C0
11309                                           ! 1281 c0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11310 2893                        C0            .byte	$C0
11311 2894                        FC            .byte	$FC
11312 2895                        06            .byte	6
11313 2896                        06            .byte	6
11314 2897                        06            .byte	6
11315 2898                        C6            .byte	$C6
11316 2899                        7C            .byte	$7C
11317 289A                        00            .byte	0
11318 289B                        00            .byte	0
11319 289C                        00            .byte	0
11320 289D                        00            .byte	0
11321                                           ! 1282  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11322 289E                        00            .byte	0
11323 289F                        00            .byte	0
11324 28A0                        38            .byte	$38
11325 28A1                        60            .byte	$60
11326 28A2                        C0            .byte	$C0
11327 28A3                        C0            .byte	$C0
11328 28A4                        FC            .byte	$FC
11329 28A5                        C6            .byte	$C6
11330 28A6                        C6            .byte	$C6
11331 28A7                        C6            .byte	$C6
11332 28A8                        C6            .byte	$C6
11333 28A9                        7C            .byte	$7C
11334 28AA                        00            .byte	0
11335 28AB                        00            .byte	0
11336 28AC                        00            .byte	0
11337 28AD                        00            .byte	0
11338                                           ! 1283  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11339 28AE                        00            .byte	0
11340 28AF                        00            .byte	0
11341 28B0                        FE            .byte	$FE
11342 28B1                        C6            .byte	$C6
11343 28B2                        06            .byte	6
11344 28B3                        06            .byte	6
11345 28B4                        0C            .byte	$C
11346 28B5                        18            .byte	$18
11347 28B6                        30            .byte	$30
11348 28B7                        30            .byte	$30
11349 28B8                        30            .byte	$30
11350 28B9                        30            .byte	$30
11351 28BA                        00            .byte	0
11352 28BB                        00            .byte	0
11353 28BC                        00            .byte	0
11354 28BD                        00            .byte	0
11355                                           ! 1284  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11356 28BE                        00            .byte	0
11357 28BF                        00            .byte	0
11358 28C0                        7C            .byte	$7C
11359 28C1                        C6            .byte	$C6
11360 28C2                        C6            .byte	$C6
11361 28C3                        C6            .byte	$C6
11362 28C4                        7C            .byte	$7C
11363 28C5                        C6            .byte	$C6
11364 28C6                        C6            .byte	$C6
11365 28C7                        C6            .byte	$C6
11366 28C8                        C6            .byte	$C6
11367 28C9                        7C            .byte	$7C
11368 28CA                        00            .byte	0
11369 28CB                        00            .byte	0
11370 28CC                        00            .byte	0
11371 28CD                        00            .byte	0
11372                                           ! 1285  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11373 28CE                        00            .byte	0
11374 28CF                        00            .byte	0
11375 28D0                        7C            .byte	$7C
11376 28D1                        C6            .byte	$C6
11377 28D2                        C6            .byte	$C6
11378 28D3                        C6            .byte	$C6
11379 28D4                        7E            .byte	$7E
11380 28D5                        06            .byte	6
11381 28D6                        06            .byte	6
11382 28D7                        06            .byte	6
11383 28D8                        0C            .byte	$C
11384 28D9                        78            .byte	$78
11385 28DA                        00            .byte	0
11386 28DB                        00            .byte	0
11387 28DC                        00            .byte	0
11388 28DD                        00            .byte	0
11389                                           ! 1286  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11390 28DE                        00            .byte	0
11391 28DF                        00            .byte	0
11392 28E0                        00            .byte	0
11393 28E1                        00            .byte	0
11394 28E2                        18            .byte	$18
11395 28E3                        18            .byte	$18
11396 28E4                        00            .byte	0
11397 28E5                        00            .byte	0
11398 28E6                        00            .byte	0
11399 28E7                        18            .byte	$18
11400 28E8                        18            .byte	$18
11401 28E9                        00            .byte	0
11402 28EA                        00            .byte	0
11403 28EB                        00            .byte	0
11404 28EC                        00            .byte	0
11405 28ED                        00            .byte	0
11406                                           ! 1287  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11407 28EE                        00            .byte	0
11408 28EF                        00            .byte	0
11409 28F0                        00            .byte	0
11410 28F1                        00            .byte	0
11411 28F2                        18            .byte	$18
11412 28F3                        18            .byte	$18
11413 28F4                        00            .byte	0
11414 28F5                        00            .byte	0
11415 28F6                        00            .byte	0
11416 28F7                        18            .byte	$18
11417 28F8                        18            .byte	$18
11418 28F9                        30            .byte	$30
11419 28FA                        00            .byte	0
11420 28FB                        00            .byte	0
11421 28FC                        00            .byte	0
11422 28FD                        00            .byte	0
11423                                           ! 1288  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11424 28FE                        00            .byte	0
11425 28FF                        00            .byte	0
11426 2900                        00            .byte	0
11427 2901                        06            .byte	6
11428 2902                        0C            .byte	$C
11429 2903                        18            .byte	$18
11430 2904                        30            .byte	$30
11431 2905                        60            .byte	$60
11432 2906                        30            .byte	$30
11433 2907                        18            .byte	$18
11434 2908                        0C            .byte	$C
11435 2909                        06            .byte	6
11436 290A                        00            .byte	0
11437 290B                        00            .byte	0
11438 290C                        00            .byte	0
11439 290D                        00            .byte	0
11440                                           ! 1289  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11441 290E                        00            .byte	0
11442 290F                        00            .byte	0
11443 2910                        00            .byte	0
11444 2911                        00            .byte	0
11445 2912                        00            .byte	0
11446 2913                        7E            .byte	$7E
11447 2914                        00            .byte	0
11448 2915                        00            .byte	0
11449 2916                        7E            .byte	$7E
11450 2917                        00            .byte	0
11451 2918                        00            .byte	0
11452 2919                        00            .byte	0
11453 291A                        00            .byte	0
11454 291B                        00            .byte	0
11455 291C                        00            .byte	0
11456 291D                        00            .byte	0
11457                                           ! 1290  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11458 291E                        00            .byte	0
11459 291F                        00            .byte	0
11460 2920                        00            .byte	0
11461 2921                        60            .byte	$60
11462 2922                        30            .byte	$30
11463 2923                        18            .byte	$18
11464 2924                        0C            .byte	$C
11465 2925                        06            .byte	6
11466 2926                        0C            .byte	$C
11467 2927                        18            .byte	$18
11468 2928                        30            .byte	$30
11469 2929                        60            .byte	$60
11470 292A                        00            .byte	0
11471 292B                        00            .byte	0
11472 292C                        00            .byte	0
11473 292D                        00            .byte	0
11474                                           ! 1291  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11475 292E                        00            .byte	0
11476 292F                        00            .byte	0
11477 2930                        7C            .byte	$7C
11478 2931                        C6            .byte	$C6
11479 2932                        C6            .byte	$C6
11480 2933                        0C            .byte	$C
11481 2934                        18            .byte	$18
11482 2935                        18            .byte	$18
11483 2936                        18            .byte	$18
11484 2937                        00            .byte	0
11485 2938                        18            .byte	$18
11486 2939                        18            .byte	$18
11487 293A                        00            .byte	0
11488 293B                        00            .byte	0
11489 293C                        00            .byte	0
11490 293D                        00            .byte	0
11491                                           ! 1292  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11492 293E                        00            .byte	0
11493 293F                        00            .byte	0
11494 2940                        00            .byte	0
11495 2941                        7C            .byte	$7C
11496 2942                        C6            .byte	$C6
11497 2943                        C6            .byte	$C6
11498 2944                        DE            .byte	$DE
11499 2945                        DE            .byte	$DE
11500 2946                        DE            .byte	$DE
11501 2947                        DC            .byte	$DC
11502 2948                        C0            .byte	$C0
11503 2949                        7C            .byte	$7C
11504 294A                        00            .byte	0
11505 294B                        00            .byte	0
11506 294C                        00            .byte	0
11507 294D                        00            .byte	0
11508                                           ! 1293  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11509 294E                        00            .byte	0
11510 294F                        00            .byte	0
11511 2950                        10            .byte	$10
11512 2951                        38            .byte	$38
11513 2952                        6C            .byte	$6C
11514 2953                        C6            .byte	$C6
11515 2954                        C6            .byte	$C6
11516 2955                        FE            .byte	$FE
11517 2956                        C6            .byte	$C6
11518 2957                        C6            .byte	$C6
11519 2958                        C6            .byte	$C6
11520 2959                        C6            .byte	$C6
11521 295A                        00            .byte	0
11522 295B                        00            .byte	0
11523 295C                        00            .byte	0
11524 295D                        00            .byte	0
11525                                           ! 1294  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11526 295E                        00            .byte	0
11527 295F                        00            .byte	0
11528 2960                        FC            .byte	$FC
11529 2961                        66            .byte	$66
11530 2962                        66            .byte	$66
11531 2963                        66            .byte	$66
11532 2964                        7C            .byte	$7C
11533 2965                        66            .byte	$66
11534 2966                        66            .byte	$66
11535 2967                        66            .byte	$66
11536 2968                        66            .byte	$66
11537 2969                        FC            .byte	$FC
11538 296A                        00            .byte	0
11539 296B                        00            .byte	0
11540 296C                        00            .byte	0
11541 296D                        00            .byte	0
11542                                           ! 1295  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11543 296E                        00            .byte	0
11544 296F                        00            .byte	0
11545 2970                        3C            .byte	$3C
11546 2971                        66            .byte	$66
11547 2972                        C2            .byte	$C2
11548 2973                        C0            .byte	$C0
11549 2974                        C0            .byte	$C0
11550 2975                        C0            .byte	$C0
11551 2976                        C0            .byte	$C0
11552 2977                        C2            .byte	$C2
11553 2978                        66            .byte	$66
11554 2979                        3C            .byte	$3C
11555 297A                        00            .byte	0
11556 297B                        00            .byte	0
11557 297C                        00            .byte	0
11558 297D                        00            .byte	0
11559                                           ! 1296  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11560 297E                        00            .byte	0
11561 297F                        00            .byte	0
11562 2980                        F8            .byte	$F8
11563 2981                        6C            .byte	$6C
11564 2982                        66            .byte	$66
11565 2983                        66            .byte	$66
11566 2984                        66            .byte	$66
11567 2985                        66            .byte	$66
11568 2986                        66            .byte	$66
11569 2987                        66            .byte	$66
11570 2988                        6C            .byte	$6C
11571 2989                        F8            .byte	$F8
11572 298A                        00            .byte	0
11573 298B                        00            .byte	0
11574 298C                        00            .byte	0
11575 298D                        00            .byte	0
11576                                           ! 1297  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11577 298E                        00            .byte	0
11578 298F                        00            .byte	0
11579 2990                        FE            .byte	$FE
11580 2991                        66            .byte	$66
11581 2992                        62            .byte	$62
11582 2993                        68            .byte	$68
11583 2994                        78            .byte	$78
11584 2995                        68            .byte	$68
11585 2996                        60            .byte	$60
11586 2997                        62            .byte	$62
11587 2998                        66            .byte	$66
11588 2999                        FE            .byte	$FE
11589 299A                        00            .byte	0
11590 299B                        00            .byte	0
11591 299C                        00            .byte	0
11592 299D                        00            .byte	0
11593                                           ! 1298  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11594 299E                        00            .byte	0
11595 299F                        00            .byte	0
11596 29A0                        FE            .byte	$FE
11597 29A1                        66            .byte	$66
11598 29A2                        62            .byte	$62
11599 29A3                        68            .byte	$68
11600 29A4                        78            .byte	$78
11601 29A5                        68            .byte	$68
11602 29A6                        60            .byte	$60
11603 29A7                        60            .byte	$60
11604 29A8                        60            .byte	$60
11605 29A9                        F0            .byte	$F0
11606 29AA                        00            .byte	0
11607 29AB                        00            .byte	0
11608 29AC                        00            .byte	0
11609 29AD                        00            .byte	0
11610                                           ! 1299  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11611 29AE                        00            .byte	0
11612 29AF                        00            .byte	0
11613 29B0                        3C            .byte	$3C
11614 29B1                        66            .byte	$66
11615 29B2                        C2            .byte	$C2
11616 29B3                        C0            .byte	$C0
11617 29B4                        C0            .byte	$C0
11618 29B5                        DE            .byte	$DE
11619 29B6                        C6            .byte	$C6
11620 29B7                        C6            .byte	$C6
11621 29B8                        66            .byte	$66
11622 29B9                        3A            .byte	$3A
11623 29BA                        00            .byte	0
11624 29BB                        00            .byte	0
11625 29BC                        00            .byte	0
11626 29BD                        00            .byte	0
11627                                           ! 1300  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11628 29BE                        00            .byte	0
11629 29BF                        00            .byte	0
11630 29C0                        C6            .byte	$C6
11631 29C1                        C6            .byte	$C6
11632 29C2                        C6            .byte	$C6
11633 29C3                        C6            .byte	$C6
11634 29C4                        FE            .byte	$FE
11635 29C5                        C6            .byte	$C6
11636 29C6                        C6            .byte	$C6
11637 29C7                        C6            .byte	$C6
11638 29C8                        C6            .byte	$C6
11639 29C9                        C6            .byte	$C6
11640 29CA                        00            .byte	0
11641 29CB                        00            .byte	0
11642 29CC                        00            .byte	0
11643 29CD                        00            .byte	0
11644                                           ! 1301  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11645 29CE                        00            .byte	0
11646 29CF                        00            .byte	0
11647 29D0                        3C            .byte	$3C
11648 29D1                        18            .byte	$18
11649 29D2                        18            .byte	$18
11650 29D3                        18            .byte	$18
11651 29D4                        18            .byte	$18
11652 29D5                        18            .byte	$18
11653 29D6                        18            .byte	$18
11654 29D7                        18            .byte	$18
11655 29D8                        18            .byte	$18
11656 29D9                        3C            .byte	$3C
11657 29DA                        00            .byte	0
11658 29DB                        00            .byte	0
11659 29DC                        00            .byte	0
11660 29DD                        00            .byte	0
11661                                           ! 1302  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0
11662 29DE                        00            .byte	0
11663 29DF                        00            .byte	0
11664 29E0                        1E            .byte	$1E
11665 29E1                        0C            .byte	$C
11666 29E2                        0C            .byte	$C
11667 29E3                        0C            .byte	$C
11668 29E4                        0C            .byte	$C
11669                                           ! 1302 x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11670 29E5                        0C            .byte	$C
11671 29E6                        CC            .byte	$CC
11672 29E7                        CC            .byte	$CC
11673 29E8                        CC            .byte	$CC
11674 29E9                        78            .byte	$78
11675 29EA                        00            .byte	0
11676 29EB                        00            .byte	0
11677 29EC                        00            .byte	0
11678 29ED                        00            .byte	0
11679                                           ! 1303  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11680 29EE                        00            .byte	0
11681 29EF                        00            .byte	0
11682 29F0                        E6            .byte	$E6
11683 29F1                        66            .byte	$66
11684 29F2                        66            .byte	$66
11685 29F3                        6C            .byte	$6C
11686 29F4                        78            .byte	$78
11687 29F5                        78            .byte	$78
11688 29F6                        6C            .byte	$6C
11689 29F7                        66            .byte	$66
11690 29F8                        66            .byte	$66
11691 29F9                        E6            .byte	$E6
11692 29FA                        00            .byte	0
11693 29FB                        00            .byte	0
11694 29FC                        00            .byte	0
11695 29FD                        00            .byte	0
11696                                           ! 1304  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11697 29FE                        00            .byte	0
11698 29FF                        00            .byte	0
11699 2A00                        F0            .byte	$F0
11700 2A01                        60            .byte	$60
11701 2A02                        60            .byte	$60
11702 2A03                        60            .byte	$60
11703 2A04                        60            .byte	$60
11704 2A05                        60            .byte	$60
11705 2A06                        60            .byte	$60
11706 2A07                        62            .byte	$62
11707 2A08                        66            .byte	$66
11708 2A09                        FE            .byte	$FE
11709 2A0A                        00            .byte	0
11710 2A0B                        00            .byte	0
11711 2A0C                        00            .byte	0
11712 2A0D                        00            .byte	0
11713                                           ! 1305  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11714 2A0E                        00            .byte	0
11715 2A0F                        00            .byte	0
11716 2A10                        C3            .byte	$C3
11717 2A11                        E7            .byte	$E7
11718 2A12                        FF            .byte	$FF
11719 2A13                        FF            .byte	$FF
11720 2A14                        DB            .byte	$DB
11721 2A15                        C3            .byte	$C3
11722 2A16                        C3            .byte	$C3
11723 2A17                        C3            .byte	$C3
11724 2A18                        C3            .byte	$C3
11725 2A19                        C3            .byte	$C3
11726 2A1A                        00            .byte	0
11727 2A1B                        00            .byte	0
11728 2A1C                        00            .byte	0
11729 2A1D                        00            .byte	0
11730                                           ! 1306  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11731 2A1E                        00            .byte	0
11732 2A1F                        00            .byte	0
11733 2A20                        C6            .byte	$C6
11734 2A21                        E6            .byte	$E6
11735 2A22                        F6            .byte	$F6
11736 2A23                        FE            .byte	$FE
11737 2A24                        DE            .byte	$DE
11738 2A25                        CE            .byte	$CE
11739 2A26                        C6            .byte	$C6
11740 2A27                        C6            .byte	$C6
11741 2A28                        C6            .byte	$C6
11742 2A29                        C6            .byte	$C6
11743 2A2A                        00            .byte	0
11744 2A2B                        00            .byte	0
11745 2A2C                        00            .byte	0
11746 2A2D                        00            .byte	0
11747                                           ! 1307  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11748 2A2E                        00            .byte	0
11749 2A2F                        00            .byte	0
11750 2A30                        7C            .byte	$7C
11751 2A31                        C6            .byte	$C6
11752 2A32                        C6            .byte	$C6
11753 2A33                        C6            .byte	$C6
11754 2A34                        C6            .byte	$C6
11755 2A35                        C6            .byte	$C6
11756 2A36                        C6            .byte	$C6
11757 2A37                        C6            .byte	$C6
11758 2A38                        C6            .byte	$C6
11759 2A39                        7C            .byte	$7C
11760 2A3A                        00            .byte	0
11761 2A3B                        00            .byte	0
11762 2A3C                        00            .byte	0
11763 2A3D                        00            .byte	0
11764                                           ! 1308  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11765 2A3E                        00            .byte	0
11766 2A3F                        00            .byte	0
11767 2A40                        FC            .byte	$FC
11768 2A41                        66            .byte	$66
11769 2A42                        66            .byte	$66
11770 2A43                        66            .byte	$66
11771 2A44                        7C            .byte	$7C
11772 2A45                        60            .byte	$60
11773 2A46                        60            .byte	$60
11774 2A47                        60            .byte	$60
11775 2A48                        60            .byte	$60
11776 2A49                        F0            .byte	$F0
11777 2A4A                        00            .byte	0
11778 2A4B                        00            .byte	0
11779 2A4C                        00            .byte	0
11780 2A4D                        00            .byte	0
11781                                           ! 1309  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
11782 2A4E                        00            .byte	0
11783 2A4F                        00            .byte	0
11784 2A50                        7C            .byte	$7C
11785 2A51                        C6            .byte	$C6
11786 2A52                        C6            .byte	$C6
11787 2A53                        C6            .byte	$C6
11788 2A54                        C6            .byte	$C6
11789 2A55                        C6            .byte	$C6
11790 2A56                        C6            .byte	$C6
11791 2A57                        D6            .byte	$D6
11792 2A58                        DE            .byte	$DE
11793 2A59                        7C            .byte	$7C
11794 2A5A                        0C            .byte	$C
11795 2A5B                        0E            .byte	$E
11796 2A5C                        00            .byte	0
11797 2A5D                        00            .byte	0
11798                                           ! 1310  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11799 2A5E                        00            .byte	0
11800 2A5F                        00            .byte	0
11801 2A60                        FC            .byte	$FC
11802 2A61                        66            .byte	$66
11803 2A62                        66            .byte	$66
11804 2A63                        66            .byte	$66
11805 2A64                        7C            .byte	$7C
11806 2A65                        6C            .byte	$6C
11807 2A66                        66            .byte	$66
11808 2A67                        66            .byte	$66
11809 2A68                        66            .byte	$66
11810 2A69                        E6            .byte	$E6
11811 2A6A                        00            .byte	0
11812 2A6B                        00            .byte	0
11813 2A6C                        00            .byte	0
11814 2A6D                        00            .byte	0
11815                                           ! 1311  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11816 2A6E                        00            .byte	0
11817 2A6F                        00            .byte	0
11818 2A70                        7C            .byte	$7C
11819 2A71                        C6            .byte	$C6
11820 2A72                        C6            .byte	$C6
11821 2A73                        60            .byte	$60
11822 2A74                        38            .byte	$38
11823 2A75                        0C            .byte	$C
11824 2A76                        06            .byte	6
11825 2A77                        C6            .byte	$C6
11826 2A78                        C6            .byte	$C6
11827 2A79                        7C            .byte	$7C
11828 2A7A                        00            .byte	0
11829 2A7B                        00            .byte	0
11830 2A7C                        00            .byte	0
11831 2A7D                        00            .byte	0
11832                                           ! 1312  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11833 2A7E                        00            .byte	0
11834 2A7F                        00            .byte	0
11835 2A80                        FF            .byte	$FF
11836 2A81                        DB            .byte	$DB
11837 2A82                        99            .byte	$99
11838 2A83                        18            .byte	$18
11839 2A84                        18            .byte	$18
11840 2A85                        18            .byte	$18
11841 2A86                        18            .byte	$18
11842 2A87                        18            .byte	$18
11843 2A88                        18            .byte	$18
11844 2A89                        3C            .byte	$3C
11845 2A8A                        00            .byte	0
11846 2A8B                        00            .byte	0
11847 2A8C                        00            .byte	0
11848 2A8D                        00            .byte	0
11849                                           ! 1313  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11850 2A8E                        00            .byte	0
11851 2A8F                        00            .byte	0
11852 2A90                        C6            .byte	$C6
11853 2A91                        C6            .byte	$C6
11854 2A92                        C6            .byte	$C6
11855 2A93                        C6            .byte	$C6
11856 2A94                        C6            .byte	$C6
11857 2A95                        C6            .byte	$C6
11858 2A96                        C6            .byte	$C6
11859 2A97                        C6            .byte	$C6
11860 2A98                        C6            .byte	$C6
11861 2A99                        7C            .byte	$7C
11862 2A9A                        00            .byte	0
11863 2A9B                        00            .byte	0
11864 2A9C                        00            .byte	0
11865 2A9D                        00            .byte	0
11866                                           ! 1314  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11867 2A9E                        00            .byte	0
11868 2A9F                        00            .byte	0
11869 2AA0                        C3            .byte	$C3
11870 2AA1                        C3            .byte	$C3
11871 2AA2                        C3            .byte	$C3
11872 2AA3                        C3            .byte	$C3
11873 2AA4                        C3            .byte	$C3
11874 2AA5                        C3            .byte	$C3
11875 2AA6                        C3            .byte	$C3
11876 2AA7                        66            .byte	$66
11877 2AA8                        3C            .byte	$3C
11878 2AA9                        18            .byte	$18
11879 2AAA                        00            .byte	0
11880 2AAB                        00            .byte	0
11881 2AAC                        00            .byte	0
11882 2AAD                        00            .byte	0
11883                                           ! 1315  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11884 2AAE                        00            .byte	0
11885 2AAF                        00            .byte	0
11886 2AB0                        C3            .byte	$C3
11887 2AB1                        C3            .byte	$C3
11888 2AB2                        C3            .byte	$C3
11889 2AB3                        C3            .byte	$C3
11890 2AB4                        C3            .byte	$C3
11891 2AB5                        DB            .byte	$DB
11892 2AB6                        DB            .byte	$DB
11893 2AB7                        FF            .byte	$FF
11894 2AB8                        66            .byte	$66
11895 2AB9                        66            .byte	$66
11896 2ABA                        00            .byte	0
11897 2ABB                        00            .byte	0
11898 2ABC                        00            .byte	0
11899 2ABD                        00            .byte	0
11900                                           ! 1316  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11901 2ABE                        00            .byte	0
11902 2ABF                        00            .byte	0
11903 2AC0                        C3            .byte	$C3
11904 2AC1                        C3            .byte	$C3
11905 2AC2                        66            .byte	$66
11906 2AC3                        3C            .byte	$3C
11907 2AC4                        18            .byte	$18
11908 2AC5                        18            .byte	$18
11909 2AC6                        3C            .byte	$3C
11910 2AC7                        66            .byte	$66
11911 2AC8                        C3            .byte	$C3
11912 2AC9                        C3            .byte	$C3
11913 2ACA                        00            .byte	0
11914 2ACB                        00            .byte	0
11915 2ACC                        00            .byte	0
11916 2ACD                        00            .byte	0
11917                                           ! 1317  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11918 2ACE                        00            .byte	0
11919 2ACF                        00            .byte	0
11920 2AD0                        C3            .byte	$C3
11921 2AD1                        C3            .byte	$C3
11922 2AD2                        C3            .byte	$C3
11923 2AD3                        66            .byte	$66
11924 2AD4                        3C            .byte	$3C
11925 2AD5                        18            .byte	$18
11926 2AD6                        18            .byte	$18
11927 2AD7                        18            .byte	$18
11928 2AD8                        18            .byte	$18
11929 2AD9                        3C            .byte	$3C
11930 2ADA                        00            .byte	0
11931 2ADB                        00            .byte	0
11932 2ADC                        00            .byte	0
11933 2ADD                        00            .byte	0
11934                                           ! 1318  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
11935 2ADE                        00            .byte	0
11936 2ADF                        00            .byte	0
11937 2AE0                        FF            .byte	$FF
11938 2AE1                        C3            .byte	$C3
11939 2AE2                        86            .byte	$86
11940 2AE3                        0C            .byte	$C
11941 2AE4                        18            .byte	$18
11942 2AE5                        30            .byte	$30
11943 2AE6                        60            .byte	$60
11944 2AE7                        C1            .byte	$C1
11945 2AE8                        C3            .byte	$C3
11946 2AE9                        FF            .byte	$FF
11947 2AEA                        00            .byte	0
11948 2AEB                        00            .byte	0
11949 2AEC                        00            .byte	0
11950 2AED                        00            .byte	0
11951                                           ! 1319  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
11952 2AEE                        00            .byte	0
11953 2AEF                        00            .byte	0
11954 2AF0                        3C            .byte	$3C
11955 2AF1                        30            .byte	$30
11956 2AF2                        30            .byte	$30
11957 2AF3                        30            .byte	$30
11958 2AF4                        30            .byte	$30
11959 2AF5                        30            .byte	$30
11960 2AF6                        30            .byte	$30
11961 2AF7                        30            .byte	$30
11962 2AF8                        30            .byte	$30
11963 2AF9                        3C            .byte	$3C
11964 2AFA                        00            .byte	0
11965 2AFB                        00            .byte	0
11966 2AFC                        00            .byte	0
11967 2AFD                        00            .byte	0
11968                                           ! 1320  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
11969 2AFE                        00            .byte	0
11970 2AFF                        00            .byte	0
11971 2B00                        00            .byte	0
11972 2B01                        80            .byte	$80
11973 2B02                        C0            .byte	$C0
11974 2B03                        E0            .byte	$E0
11975 2B04                        70            .byte	$70
11976 2B05                        38            .byte	$38
11977 2B06                        1C            .byte	$1C
11978 2B07                        0E            .byte	$E
11979 2B08                        06            .byte	6
11980 2B09                        02            .byte	2
11981 2B0A                        00            .byte	0
11982 2B0B                        00            .byte	0
11983 2B0C                        00            .byte	0
11984 2B0D                        00            .byte	0
11985                                           ! 1321  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
11986 2B0E                        00            .byte	0
11987 2B0F                        00            .byte	0
11988 2B10                        3C            .byte	$3C
11989 2B11                        0C            .byte	$C
11990 2B12                        0C            .byte	$C
11991 2B13                        0C            .byte	$C
11992 2B14                        0C            .byte	$C
11993 2B15                        0C            .byte	$C
11994 2B16                        0C            .byte	$C
11995 2B17                        0C            .byte	$C
11996 2B18                        0C            .byte	$C
11997 2B19                        3C            .byte	$3C
11998 2B1A                        00            .byte	0
11999 2B1B                        00            .byte	0
12000 2B1C                        00            .byte	0
12001 2B1D                        00            .byte	0
12002                                           ! 1322  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12003 2B1E                        10            .byte	$10
12004 2B1F                        38            .byte	$38
12005 2B20                        6C            .byte	$6C
12006 2B21                        C6            .byte	$C6
12007 2B22                        00            .byte	0
12008 2B23                        00            .byte	0
12009 2B24                        00            .byte	0
12010 2B25                        00            .byte	0
12011 2B26                        00            .byte	0
12012 2B27                        00            .byte	0
12013 2B28                        00            .byte	0
12014 2B29                        00            .byte	0
12015 2B2A                        00            .byte	0
12016 2B2B                        00            .byte	0
12017 2B2C                        00            .byte	0
12018 2B2D                        00            .byte	0
12019                                           ! 1323  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
12020 2B2E                        00            .byte	0
12021 2B2F                        00            .byte	0
12022 2B30                        00            .byte	0
12023 2B31                        00            .byte	0
12024 2B32                        00            .byte	0
12025 2B33                        00            .byte	0
12026 2B34                        00            .byte	0
12027 2B35                        00            .byte	0
12028 2B36                        00            .byte	0
12029                                           ! 1323 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12030 2B37                        00            .byte	0
12031 2B38                        00            .byte	0
12032 2B39                        00            .byte	0
12033 2B3A                        00            .byte	0
12034 2B3B                        FF            .byte	$FF
12035 2B3C                        00            .byte	0
12036 2B3D                        00            .byte	0
12037                                           ! 1324  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12038 2B3E                        30            .byte	$30
12039 2B3F                        30            .byte	$30
12040 2B40                        18            .byte	$18
12041 2B41                        00            .byte	0
12042 2B42                        00            .byte	0
12043 2B43                        00            .byte	0
12044 2B44                        00            .byte	0
12045 2B45                        00            .byte	0
12046 2B46                        00            .byte	0
12047 2B47                        00            .byte	0
12048 2B48                        00            .byte	0
12049 2B49                        00            .byte	0
12050 2B4A                        00            .byte	0
12051 2B4B                        00            .byte	0
12052 2B4C                        00            .byte	0
12053 2B4D                        00            .byte	0
12054                                           ! 1325  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12055 2B4E                        00            .byte	0
12056 2B4F                        00            .byte	0
12057 2B50                        00            .byte	0
12058 2B51                        00            .byte	0
12059 2B52                        00            .byte	0
12060 2B53                        78            .byte	$78
12061 2B54                        0C            .byte	$C
12062 2B55                        7C            .byte	$7C
12063 2B56                        CC            .byte	$CC
12064 2B57                        CC            .byte	$CC
12065 2B58                        CC            .byte	$CC
12066 2B59                        76            .byte	$76
12067 2B5A                        00            .byte	0
12068 2B5B                        00            .byte	0
12069 2B5C                        00            .byte	0
12070 2B5D                        00            .byte	0
12071                                           ! 1326  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12072 2B5E                        00            .byte	0
12073 2B5F                        00            .byte	0
12074 2B60                        E0            .byte	$E0
12075 2B61                        60            .byte	$60
12076 2B62                        60            .byte	$60
12077 2B63                        78            .byte	$78
12078 2B64                        6C            .byte	$6C
12079 2B65                        66            .byte	$66
12080 2B66                        66            .byte	$66
12081 2B67                        66            .byte	$66
12082 2B68                        66            .byte	$66
12083 2B69                        7C            .byte	$7C
12084 2B6A                        00            .byte	0
12085 2B6B                        00            .byte	0
12086 2B6C                        00            .byte	0
12087 2B6D                        00            .byte	0
12088                                           ! 1327  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12089 2B6E                        00            .byte	0
12090 2B6F                        00            .byte	0
12091 2B70                        00            .byte	0
12092 2B71                        00            .byte	0
12093 2B72                        00            .byte	0
12094 2B73                        7C            .byte	$7C
12095 2B74                        C6            .byte	$C6
12096 2B75                        C0            .byte	$C0
12097 2B76                        C0            .byte	$C0
12098 2B77                        C0            .byte	$C0
12099 2B78                        C6            .byte	$C6
12100 2B79                        7C            .byte	$7C
12101 2B7A                        00            .byte	0
12102 2B7B                        00            .byte	0
12103 2B7C                        00            .byte	0
12104 2B7D                        00            .byte	0
12105                                           ! 1328  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12106 2B7E                        00            .byte	0
12107 2B7F                        00            .byte	0
12108 2B80                        1C            .byte	$1C
12109 2B81                        0C            .byte	$C
12110 2B82                        0C            .byte	$C
12111 2B83                        3C            .byte	$3C
12112 2B84                        6C            .byte	$6C
12113 2B85                        CC            .byte	$CC
12114 2B86                        CC            .byte	$CC
12115 2B87                        CC            .byte	$CC
12116 2B88                        CC            .byte	$CC
12117 2B89                        76            .byte	$76
12118 2B8A                        00            .byte	0
12119 2B8B                        00            .byte	0
12120 2B8C                        00            .byte	0
12121 2B8D                        00            .byte	0
12122                                           ! 1329  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12123 2B8E                        00            .byte	0
12124 2B8F                        00            .byte	0
12125 2B90                        00            .byte	0
12126 2B91                        00            .byte	0
12127 2B92                        00            .byte	0
12128 2B93                        7C            .byte	$7C
12129 2B94                        C6            .byte	$C6
12130 2B95                        FE            .byte	$FE
12131 2B96                        C0            .byte	$C0
12132 2B97                        C0            .byte	$C0
12133 2B98                        C6            .byte	$C6
12134 2B99                        7C            .byte	$7C
12135 2B9A                        00            .byte	0
12136 2B9B                        00            .byte	0
12137 2B9C                        00            .byte	0
12138 2B9D                        00            .byte	0
12139                                           ! 1330  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12140 2B9E                        00            .byte	0
12141 2B9F                        00            .byte	0
12142 2BA0                        38            .byte	$38
12143 2BA1                        6C            .byte	$6C
12144 2BA2                        64            .byte	$64
12145 2BA3                        60            .byte	$60
12146 2BA4                        F0            .byte	$F0
12147 2BA5                        60            .byte	$60
12148 2BA6                        60            .byte	$60
12149 2BA7                        60            .byte	$60
12150 2BA8                        60            .byte	$60
12151 2BA9                        F0            .byte	$F0
12152 2BAA                        00            .byte	0
12153 2BAB                        00            .byte	0
12154 2BAC                        00            .byte	0
12155 2BAD                        00            .byte	0
12156                                           ! 1331  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12157 2BAE                        00            .byte	0
12158 2BAF                        00            .byte	0
12159 2BB0                        00            .byte	0
12160 2BB1                        00            .byte	0
12161 2BB2                        00            .byte	0
12162 2BB3                        76            .byte	$76
12163 2BB4                        CC            .byte	$CC
12164 2BB5                        CC            .byte	$CC
12165 2BB6                        CC            .byte	$CC
12166 2BB7                        CC            .byte	$CC
12167 2BB8                        CC            .byte	$CC
12168 2BB9                        7C            .byte	$7C
12169 2BBA                        0C            .byte	$C
12170 2BBB                        CC            .byte	$CC
12171 2BBC                        78            .byte	$78
12172 2BBD                        00            .byte	0
12173                                           ! 1332  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12174 2BBE                        00            .byte	0
12175 2BBF                        00            .byte	0
12176 2BC0                        E0            .byte	$E0
12177 2BC1                        60            .byte	$60
12178 2BC2                        60            .byte	$60
12179 2BC3                        6C            .byte	$6C
12180 2BC4                        76            .byte	$76
12181 2BC5                        66            .byte	$66
12182 2BC6                        66            .byte	$66
12183 2BC7                        66            .byte	$66
12184 2BC8                        66            .byte	$66
12185 2BC9                        E6            .byte	$E6
12186 2BCA                        00            .byte	0
12187 2BCB                        00            .byte	0
12188 2BCC                        00            .byte	0
12189 2BCD                        00            .byte	0
12190                                           ! 1333  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12191 2BCE                        00            .byte	0
12192 2BCF                        00            .byte	0
12193 2BD0                        18            .byte	$18
12194 2BD1                        18            .byte	$18
12195 2BD2                        00            .byte	0
12196 2BD3                        38            .byte	$38
12197 2BD4                        18            .byte	$18
12198 2BD5                        18            .byte	$18
12199 2BD6                        18            .byte	$18
12200 2BD7                        18            .byte	$18
12201 2BD8                        18            .byte	$18
12202 2BD9                        3C            .byte	$3C
12203 2BDA                        00            .byte	0
12204 2BDB                        00            .byte	0
12205 2BDC                        00            .byte	0
12206 2BDD                        00            .byte	0
12207                                           ! 1334  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12208 2BDE                        00            .byte	0
12209 2BDF                        00            .byte	0
12210 2BE0                        06            .byte	6
12211 2BE1                        06            .byte	6
12212 2BE2                        00            .byte	0
12213 2BE3                        0E            .byte	$E
12214 2BE4                        06            .byte	6
12215 2BE5                        06            .byte	6
12216 2BE6                        06            .byte	6
12217 2BE7                        06            .byte	6
12218 2BE8                        06            .byte	6
12219 2BE9                        06            .byte	6
12220 2BEA                        66            .byte	$66
12221 2BEB                        66            .byte	$66
12222 2BEC                        3C            .byte	$3C
12223 2BED                        00            .byte	0
12224                                           ! 1335  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12225 2BEE                        00            .byte	0
12226 2BEF                        00            .byte	0
12227 2BF0                        E0            .byte	$E0
12228 2BF1                        60            .byte	$60
12229 2BF2                        60            .byte	$60
12230 2BF3                        66            .byte	$66
12231 2BF4                        6C            .byte	$6C
12232 2BF5                        78            .byte	$78
12233 2BF6                        78            .byte	$78
12234 2BF7                        6C            .byte	$6C
12235 2BF8                        66            .byte	$66
12236 2BF9                        E6            .byte	$E6
12237 2BFA                        00            .byte	0
12238 2BFB                        00            .byte	0
12239 2BFC                        00            .byte	0
12240 2BFD                        00            .byte	0
12241                                           ! 1336  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12242 2BFE                        00            .byte	0
12243 2BFF                        00            .byte	0
12244 2C00                        38            .byte	$38
12245 2C01                        18            .byte	$18
12246 2C02                        18            .byte	$18
12247 2C03                        18            .byte	$18
12248 2C04                        18            .byte	$18
12249 2C05                        18            .byte	$18
12250 2C06                        18            .byte	$18
12251 2C07                        18            .byte	$18
12252 2C08                        18            .byte	$18
12253 2C09                        3C            .byte	$3C
12254 2C0A                        00            .byte	0
12255 2C0B                        00            .byte	0
12256 2C0C                        00            .byte	0
12257 2C0D                        00            .byte	0
12258                                           ! 1337  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12259 2C0E                        00            .byte	0
12260 2C0F                        00            .byte	0
12261 2C10                        00            .byte	0
12262 2C11                        00            .byte	0
12263 2C12                        00            .byte	0
12264 2C13                        E6            .byte	$E6
12265 2C14                        FF            .byte	$FF
12266 2C15                        DB            .byte	$DB
12267 2C16                        DB            .byte	$DB
12268 2C17                        DB            .byte	$DB
12269 2C18                        DB            .byte	$DB
12270 2C19                        DB            .byte	$DB
12271 2C1A                        00            .byte	0
12272 2C1B                        00            .byte	0
12273 2C1C                        00            .byte	0
12274 2C1D                        00            .byte	0
12275                                           ! 1338  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12276 2C1E                        00            .byte	0
12277 2C1F                        00            .byte	0
12278 2C20                        00            .byte	0
12279 2C21                        00            .byte	0
12280 2C22                        00            .byte	0
12281 2C23                        DC            .byte	$DC
12282 2C24                        66            .byte	$66
12283 2C25                        66            .byte	$66
12284 2C26                        66            .byte	$66
12285 2C27                        66            .byte	$66
12286 2C28                        66            .byte	$66
12287 2C29                        66            .byte	$66
12288 2C2A                        00            .byte	0
12289 2C2B                        00            .byte	0
12290 2C2C                        00            .byte	0
12291 2C2D                        00            .byte	0
12292                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12293 2C2E                        00            .byte	0
12294 2C2F                        00            .byte	0
12295 2C30                        00            .byte	0
12296 2C31                        00            .byte	0
12297 2C32                        00            .byte	0
12298 2C33                        7C            .byte	$7C
12299 2C34                        C6            .byte	$C6
12300 2C35                        C6            .byte	$C6
12301 2C36                        C6            .byte	$C6
12302 2C37                        C6            .byte	$C6
12303 2C38                        C6            .byte	$C6
12304 2C39                        7C            .byte	$7C
12305 2C3A                        00            .byte	0
12306 2C3B                        00            .byte	0
12307 2C3C                        00            .byte	0
12308 2C3D                        00            .byte	0
12309                                           ! 1340  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12310 2C3E                        00            .byte	0
12311 2C3F                        00            .byte	0
12312 2C40                        00            .byte	0
12313 2C41                        00            .byte	0
12314 2C42                        00            .byte	0
12315 2C43                        DC            .byte	$DC
12316 2C44                        66            .byte	$66
12317 2C45                        66            .byte	$66
12318 2C46                        66            .byte	$66
12319 2C47                        66            .byte	$66
12320 2C48                        66            .byte	$66
12321 2C49                        7C            .byte	$7C
12322 2C4A                        60            .byte	$60
12323 2C4B                        60            .byte	$60
12324 2C4C                        F0            .byte	$F0
12325 2C4D                        00            .byte	0
12326                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12327 2C4E                        00            .byte	0
12328 2C4F                        00            .byte	0
12329 2C50                        00            .byte	0
12330 2C51                        00            .byte	0
12331 2C52                        00            .byte	0
12332 2C53                        76            .byte	$76
12333 2C54                        CC            .byte	$CC
12334 2C55                        CC            .byte	$CC
12335 2C56                        CC            .byte	$CC
12336 2C57                        CC            .byte	$CC
12337 2C58                        CC            .byte	$CC
12338 2C59                        7C            .byte	$7C
12339 2C5A                        0C            .byte	$C
12340 2C5B                        0C            .byte	$C
12341 2C5C                        1E            .byte	$1E
12342 2C5D                        00            .byte	0
12343                                           ! 1342  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12344 2C5E                        00            .byte	0
12345 2C5F                        00            .byte	0
12346 2C60                        00            .byte	0
12347 2C61                        00            .byte	0
12348 2C62                        00            .byte	0
12349 2C63                        DC            .byte	$DC
12350 2C64                        76            .byte	$76
12351 2C65                        66            .byte	$66
12352 2C66                        60            .byte	$60
12353 2C67                        60            .byte	$60
12354 2C68                        60            .byte	$60
12355 2C69                        F0            .byte	$F0
12356 2C6A                        00            .byte	0
12357 2C6B                        00            .byte	0
12358 2C6C                        00            .byte	0
12359 2C6D                        00            .byte	0
12360                                           ! 1343  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12361 2C6E                        00            .byte	0
12362 2C6F                        00            .byte	0
12363 2C70                        00            .byte	0
12364 2C71                        00            .byte	0
12365 2C72                        00            .byte	0
12366 2C73                        7C            .byte	$7C
12367 2C74                        C6            .byte	$C6
12368 2C75                        60            .byte	$60
12369 2C76                        38            .byte	$38
12370 2C77                        0C            .byte	$C
12371 2C78                        C6            .byte	$C6
12372 2C79                        7C            .byte	$7C
12373 2C7A                        00            .byte	0
12374 2C7B                        00            .byte	0
12375 2C7C                        00            .byte	0
12376 2C7D                        00            .byte	0
12377                                           ! 1344  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36,
12378 2C7E                        00            .byte	0
12379 2C7F                        00            .byte	0
12380 2C80                        10            .byte	$10
12381 2C81                        30            .byte	$30
12382 2C82                        30            .byte	$30
12383 2C83                        FC            .byte	$FC
12384 2C84                        30            .byte	$30
12385 2C85                        30            .byte	$30
12386 2C86                        30            .byte	$30
12387 2C87                        30            .byte	$30
12388                                           ! 1344  0x1c, 0x00, 0x00, 0x00, 0x00,
12389 2C88                        36            .byte	$36
12390 2C89                        1C            .byte	$1C
12391 2C8A                        00            .byte	0
12392 2C8B                        00            .byte	0
12393 2C8C                        00            .byte	0
12394 2C8D                        00            .byte	0
12395                                           ! 1345  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12396 2C8E                        00            .byte	0
12397 2C8F                        00            .byte	0
12398 2C90                        00            .byte	0
12399 2C91                        00            .byte	0
12400 2C92                        00            .byte	0
12401 2C93                        CC            .byte	$CC
12402 2C94                        CC            .byte	$CC
12403 2C95                        CC            .byte	$CC
12404 2C96                        CC            .byte	$CC
12405 2C97                        CC            .byte	$CC
12406 2C98                        CC            .byte	$CC
12407 2C99                        76            .byte	$76
12408 2C9A                        00            .byte	0
12409 2C9B                        00            .byte	0
12410 2C9C                        00            .byte	0
12411 2C9D                        00            .byte	0
12412                                           ! 1346  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12413 2C9E                        00            .byte	0
12414 2C9F                        00            .byte	0
12415 2CA0                        00            .byte	0
12416 2CA1                        00            .byte	0
12417 2CA2                        00            .byte	0
12418 2CA3                        C3            .byte	$C3
12419 2CA4                        C3            .byte	$C3
12420 2CA5                        C3            .byte	$C3
12421 2CA6                        C3            .byte	$C3
12422 2CA7                        66            .byte	$66
12423 2CA8                        3C            .byte	$3C
12424 2CA9                        18            .byte	$18
12425 2CAA                        00            .byte	0
12426 2CAB                        00            .byte	0
12427 2CAC                        00            .byte	0
12428 2CAD                        00            .byte	0
12429                                           ! 1347  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12430 2CAE                        00            .byte	0
12431 2CAF                        00            .byte	0
12432 2CB0                        00            .byte	0
12433 2CB1                        00            .byte	0
12434 2CB2                        00            .byte	0
12435 2CB3                        C3            .byte	$C3
12436 2CB4                        C3            .byte	$C3
12437 2CB5                        C3            .byte	$C3
12438 2CB6                        DB            .byte	$DB
12439 2CB7                        DB            .byte	$DB
12440 2CB8                        FF            .byte	$FF
12441 2CB9                        66            .byte	$66
12442 2CBA                        00            .byte	0
12443 2CBB                        00            .byte	0
12444 2CBC                        00            .byte	0
12445 2CBD                        00            .byte	0
12446                                           ! 1348  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12447 2CBE                        00            .byte	0
12448 2CBF                        00            .byte	0
12449 2CC0                        00            .byte	0
12450 2CC1                        00            .byte	0
12451 2CC2                        00            .byte	0
12452 2CC3                        C3            .byte	$C3
12453 2CC4                        66            .byte	$66
12454 2CC5                        3C            .byte	$3C
12455 2CC6                        18            .byte	$18
12456 2CC7                        3C            .byte	$3C
12457 2CC8                        66            .byte	$66
12458 2CC9                        C3            .byte	$C3
12459 2CCA                        00            .byte	0
12460 2CCB                        00            .byte	0
12461 2CCC                        00            .byte	0
12462 2CCD                        00            .byte	0
12463                                           ! 1349  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12464 2CCE                        00            .byte	0
12465 2CCF                        00            .byte	0
12466 2CD0                        00            .byte	0
12467 2CD1                        00            .byte	0
12468 2CD2                        00            .byte	0
12469 2CD3                        C6            .byte	$C6
12470 2CD4                        C6            .byte	$C6
12471 2CD5                        C6            .byte	$C6
12472 2CD6                        C6            .byte	$C6
12473 2CD7                        C6            .byte	$C6
12474 2CD8                        C6            .byte	$C6
12475 2CD9                        7E            .byte	$7E
12476 2CDA                        06            .byte	6
12477 2CDB                        0C            .byte	$C
12478 2CDC                        F8            .byte	$F8
12479 2CDD                        00            .byte	0
12480                                           ! 1350  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12481 2CDE                        00            .byte	0
12482 2CDF                        00            .byte	0
12483 2CE0                        00            .byte	0
12484 2CE1                        00            .byte	0
12485 2CE2                        00            .byte	0
12486 2CE3                        FE            .byte	$FE
12487 2CE4                        CC            .byte	$CC
12488 2CE5                        18            .byte	$18
12489 2CE6                        30            .byte	$30
12490 2CE7                        60            .byte	$60
12491 2CE8                        C6            .byte	$C6
12492 2CE9                        FE            .byte	$FE
12493 2CEA                        00            .byte	0
12494 2CEB                        00            .byte	0
12495 2CEC                        00            .byte	0
12496 2CED                        00            .byte	0
12497                                           ! 1351  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12498 2CEE                        00            .byte	0
12499 2CEF                        00            .byte	0
12500 2CF0                        0E            .byte	$E
12501 2CF1                        18            .byte	$18
12502 2CF2                        18            .byte	$18
12503 2CF3                        18            .byte	$18
12504 2CF4                        70            .byte	$70
12505 2CF5                        18            .byte	$18
12506 2CF6                        18            .byte	$18
12507 2CF7                        18            .byte	$18
12508 2CF8                        18            .byte	$18
12509 2CF9                        0E            .byte	$E
12510 2CFA                        00            .byte	0
12511 2CFB                        00            .byte	0
12512 2CFC                        00            .byte	0
12513 2CFD                        00            .byte	0
12514                                           ! 1352  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12515 2CFE                        00            .byte	0
12516 2CFF                        00            .byte	0
12517 2D00                        18            .byte	$18
12518 2D01                        18            .byte	$18
12519 2D02                        18            .byte	$18
12520 2D03                        18            .byte	$18
12521 2D04                        00            .byte	0
12522 2D05                        18            .byte	$18
12523 2D06                        18            .byte	$18
12524 2D07                        18            .byte	$18
12525 2D08                        18            .byte	$18
12526 2D09                        18            .byte	$18
12527 2D0A                        00            .byte	0
12528 2D0B                        00            .byte	0
12529 2D0C                        00            .byte	0
12530 2D0D                        00            .byte	0
12531                                           ! 1353  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12532 2D0E                        00            .byte	0
12533 2D0F                        00            .byte	0
12534 2D10                        70            .byte	$70
12535 2D11                        18            .byte	$18
12536 2D12                        18            .byte	$18
12537 2D13                        18            .byte	$18
12538 2D14                        0E            .byte	$E
12539 2D15                        18            .byte	$18
12540 2D16                        18            .byte	$18
12541 2D17                        18            .byte	$18
12542 2D18                        18            .byte	$18
12543 2D19                        70            .byte	$70
12544 2D1A                        00            .byte	0
12545 2D1B                        00            .byte	0
12546 2D1C                        00            .byte	0
12547 2D1D                        00            .byte	0
12548                                           ! 1354  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12549 2D1E                        00            .byte	0
12550 2D1F                        00            .byte	0
12551 2D20                        76            .byte	$76
12552 2D21                        DC            .byte	$DC
12553 2D22                        00            .byte	0
12554 2D23                        00            .byte	0
12555 2D24                        00            .byte	0
12556 2D25                        00            .byte	0
12557 2D26                        00            .byte	0
12558 2D27                        00            .byte	0
12559 2D28                        00            .byte	0
12560 2D29                        00            .byte	0
12561 2D2A                        00            .byte	0
12562 2D2B                        00            .byte	0
12563 2D2C                        00            .byte	0
12564 2D2D                        00            .byte	0
12565                                           ! 1355  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12566 2D2E                        00            .byte	0
12567 2D2F                        00            .byte	0
12568 2D30                        00            .byte	0
12569 2D31                        00            .byte	0
12570 2D32                        10            .byte	$10
12571 2D33                        38            .byte	$38
12572 2D34                        6C            .byte	$6C
12573 2D35                        C6            .byte	$C6
12574 2D36                        C6            .byte	$C6
12575 2D37                        C6            .byte	$C6
12576 2D38                        FE            .byte	$FE
12577 2D39                        00            .byte	0
12578 2D3A                        00            .byte	0
12579 2D3B                        00            .byte	0
12580 2D3C                        00            .byte	0
12581 2D3D                        00            .byte	0
12582                                           ! 1356  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12583 2D3E                        00            .byte	0
12584 2D3F                        00            .byte	0
12585 2D40                        3C            .byte	$3C
12586 2D41                        66            .byte	$66
12587 2D42                        C2            .byte	$C2
12588 2D43                        C0            .byte	$C0
12589 2D44                        C0            .byte	$C0
12590 2D45                        C0            .byte	$C0
12591 2D46                        C2            .byte	$C2
12592 2D47                        66            .byte	$66
12593 2D48                        3C            .byte	$3C
12594 2D49                        0C            .byte	$C
12595 2D4A                        06            .byte	6
12596 2D4B                        7C            .byte	$7C
12597 2D4C                        00            .byte	0
12598 2D4D                        00            .byte	0
12599                                           ! 1357  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12600 2D4E                        00            .byte	0
12601 2D4F                        00            .byte	0
12602 2D50                        CC            .byte	$CC
12603 2D51                        00            .byte	0
12604 2D52                        00            .byte	0
12605 2D53                        CC            .byte	$CC
12606 2D54                        CC            .byte	$CC
12607 2D55                        CC            .byte	$CC
12608 2D56                        CC            .byte	$CC
12609 2D57                        CC            .byte	$CC
12610 2D58                        CC            .byte	$CC
12611 2D59                        76            .byte	$76
12612 2D5A                        00            .byte	0
12613 2D5B                        00            .byte	0
12614 2D5C                        00            .byte	0
12615 2D5D                        00            .byte	0
12616                                           ! 1358  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12617 2D5E                        00            .byte	0
12618 2D5F                        0C            .byte	$C
12619 2D60                        18            .byte	$18
12620 2D61                        30            .byte	$30
12621 2D62                        00            .byte	0
12622 2D63                        7C            .byte	$7C
12623 2D64                        C6            .byte	$C6
12624 2D65                        FE            .byte	$FE
12625 2D66                        C0            .byte	$C0
12626 2D67                        C0            .byte	$C0
12627 2D68                        C6            .byte	$C6
12628 2D69                        7C            .byte	$7C
12629 2D6A                        00            .byte	0
12630 2D6B                        00            .byte	0
12631 2D6C                        00            .byte	0
12632 2D6D                        00            .byte	0
12633                                           ! 1359  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12634 2D6E                        00            .byte	0
12635 2D6F                        10            .byte	$10
12636 2D70                        38            .byte	$38
12637 2D71                        6C            .byte	$6C
12638 2D72                        00            .byte	0
12639 2D73                        78            .byte	$78
12640 2D74                        0C            .byte	$C
12641 2D75                        7C            .byte	$7C
12642 2D76                        CC            .byte	$CC
12643 2D77                        CC            .byte	$CC
12644 2D78                        CC            .byte	$CC
12645 2D79                        76            .byte	$76
12646 2D7A                        00            .byte	0
12647 2D7B                        00            .byte	0
12648 2D7C                        00            .byte	0
12649 2D7D                        00            .byte	0
12650                                           ! 1360  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12651 2D7E                        00            .byte	0
12652 2D7F                        00            .byte	0
12653 2D80                        CC            .byte	$CC
12654 2D81                        00            .byte	0
12655 2D82                        00            .byte	0
12656 2D83                        78            .byte	$78
12657 2D84                        0C            .byte	$C
12658 2D85                        7C            .byte	$7C
12659 2D86                        CC            .byte	$CC
12660 2D87                        CC            .byte	$CC
12661 2D88                        CC            .byte	$CC
12662 2D89                        76            .byte	$76
12663 2D8A                        00            .byte	0
12664 2D8B                        00            .byte	0
12665 2D8C                        00            .byte	0
12666 2D8D                        00            .byte	0
12667                                           ! 1361  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12668 2D8E                        00            .byte	0
12669 2D8F                        60            .byte	$60
12670 2D90                        30            .byte	$30
12671 2D91                        18            .byte	$18
12672 2D92                        00            .byte	0
12673 2D93                        78            .byte	$78
12674 2D94                        0C            .byte	$C
12675 2D95                        7C            .byte	$7C
12676 2D96                        CC            .byte	$CC
12677 2D97                        CC            .byte	$CC
12678 2D98                        CC            .byte	$CC
12679 2D99                        76            .byte	$76
12680 2D9A                        00            .byte	0
12681 2D9B                        00            .byte	0
12682 2D9C                        00            .byte	0
12683 2D9D                        00            .byte	0
12684                                           ! 1362  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12685 2D9E                        00            .byte	0
12686 2D9F                        38            .byte	$38
12687 2DA0                        6C            .byte	$6C
12688 2DA1                        38            .byte	$38
12689 2DA2                        00            .byte	0
12690 2DA3                        78            .byte	$78
12691 2DA4                        0C            .byte	$C
12692 2DA5                        7C            .byte	$7C
12693 2DA6                        CC            .byte	$CC
12694 2DA7                        CC            .byte	$CC
12695 2DA8                        CC            .byte	$CC
12696 2DA9                        76            .byte	$76
12697 2DAA                        00            .byte	0
12698 2DAB                        00            .byte	0
12699 2DAC                        00            .byte	0
12700 2DAD                        00            .byte	0
12701                                           ! 1363  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12702 2DAE                        00            .byte	0
12703 2DAF                        00            .byte	0
12704 2DB0                        00            .byte	0
12705 2DB1                        00            .byte	0
12706 2DB2                        3C            .byte	$3C
12707 2DB3                        66            .byte	$66
12708 2DB4                        60            .byte	$60
12709 2DB5                        60            .byte	$60
12710 2DB6                        66            .byte	$66
12711 2DB7                        3C            .byte	$3C
12712 2DB8                        0C            .byte	$C
12713 2DB9                        06            .byte	6
12714 2DBA                        3C            .byte	$3C
12715 2DBB                        00            .byte	0
12716 2DBC                        00            .byte	0
12717 2DBD                        00            .byte	0
12718                                           ! 1364  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12719 2DBE                        00            .byte	0
12720 2DBF                        10            .byte	$10
12721 2DC0                        38            .byte	$38
12722 2DC1                        6C            .byte	$6C
12723 2DC2                        00            .byte	0
12724 2DC3                        7C            .byte	$7C
12725 2DC4                        C6            .byte	$C6
12726 2DC5                        FE            .byte	$FE
12727 2DC6                        C0            .byte	$C0
12728 2DC7                        C0            .byte	$C0
12729 2DC8                        C6            .byte	$C6
12730 2DC9                        7C            .byte	$7C
12731 2DCA                        00            .byte	0
12732 2DCB                        00            .byte	0
12733 2DCC                        00            .byte	0
12734 2DCD                        00            .byte	0
12735                                           ! 1365  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00
12736 2DCE                        00            .byte	0
12737 2DCF                        00            .byte	0
12738 2DD0                        C6            .byte	$C6
12739 2DD1                        00            .byte	0
12740 2DD2                        00            .byte	0
12741 2DD3                        7C            .byte	$7C
12742 2DD4                        C6            .byte	$C6
12743 2DD5                        FE            .byte	$FE
12744 2DD6                        C0            .byte	$C0
12745 2DD7                        C0            .byte	$C0
12746 2DD8                        C6            .byte	$C6
12747 2DD9                        7C            .byte	$7C
12748                                           ! 1365 , 0x00, 0x00, 0x00,
12749 2DDA                        00            .byte	0
12750 2DDB                        00            .byte	0
12751 2DDC                        00            .byte	0
12752 2DDD                        00            .byte	0
12753                                           ! 1366  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12754 2DDE                        00            .byte	0
12755 2DDF                        60            .byte	$60
12756 2DE0                        30            .byte	$30
12757 2DE1                        18            .byte	$18
12758 2DE2                        00            .byte	0
12759 2DE3                        7C            .byte	$7C
12760 2DE4                        C6            .byte	$C6
12761 2DE5                        FE            .byte	$FE
12762 2DE6                        C0            .byte	$C0
12763 2DE7                        C0            .byte	$C0
12764 2DE8                        C6            .byte	$C6
12765 2DE9                        7C            .byte	$7C
12766 2DEA                        00            .byte	0
12767 2DEB                        00            .byte	0
12768 2DEC                        00            .byte	0
12769 2DED                        00            .byte	0
12770                                           ! 1367  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12771 2DEE                        00            .byte	0
12772 2DEF                        00            .byte	0
12773 2DF0                        66            .byte	$66
12774 2DF1                        00            .byte	0
12775 2DF2                        00            .byte	0
12776 2DF3                        38            .byte	$38
12777 2DF4                        18            .byte	$18
12778 2DF5                        18            .byte	$18
12779 2DF6                        18            .byte	$18
12780 2DF7                        18            .byte	$18
12781 2DF8                        18            .byte	$18
12782 2DF9                        3C            .byte	$3C
12783 2DFA                        00            .byte	0
12784 2DFB                        00            .byte	0
12785 2DFC                        00            .byte	0
12786 2DFD                        00            .byte	0
12787                                           ! 1368  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12788 2DFE                        00            .byte	0
12789 2DFF                        18            .byte	$18
12790 2E00                        3C            .byte	$3C
12791 2E01                        66            .byte	$66
12792 2E02                        00            .byte	0
12793 2E03                        38            .byte	$38
12794 2E04                        18            .byte	$18
12795 2E05                        18            .byte	$18
12796 2E06                        18            .byte	$18
12797 2E07                        18            .byte	$18
12798 2E08                        18            .byte	$18
12799 2E09                        3C            .byte	$3C
12800 2E0A                        00            .byte	0
12801 2E0B                        00            .byte	0
12802 2E0C                        00            .byte	0
12803 2E0D                        00            .byte	0
12804                                           ! 1369  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12805 2E0E                        00            .byte	0
12806 2E0F                        60            .byte	$60
12807 2E10                        30            .byte	$30
12808 2E11                        18            .byte	$18
12809 2E12                        00            .byte	0
12810 2E13                        38            .byte	$38
12811 2E14                        18            .byte	$18
12812 2E15                        18            .byte	$18
12813 2E16                        18            .byte	$18
12814 2E17                        18            .byte	$18
12815 2E18                        18            .byte	$18
12816 2E19                        3C            .byte	$3C
12817 2E1A                        00            .byte	0
12818 2E1B                        00            .byte	0
12819 2E1C                        00            .byte	0
12820 2E1D                        00            .byte	0
12821                                           ! 1370  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12822 2E1E                        00            .byte	0
12823 2E1F                        C6            .byte	$C6
12824 2E20                        00            .byte	0
12825 2E21                        10            .byte	$10
12826 2E22                        38            .byte	$38
12827 2E23                        6C            .byte	$6C
12828 2E24                        C6            .byte	$C6
12829 2E25                        C6            .byte	$C6
12830 2E26                        FE            .byte	$FE
12831 2E27                        C6            .byte	$C6
12832 2E28                        C6            .byte	$C6
12833 2E29                        C6            .byte	$C6
12834 2E2A                        00            .byte	0
12835 2E2B                        00            .byte	0
12836 2E2C                        00            .byte	0
12837 2E2D                        00            .byte	0
12838                                           ! 1371  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12839 2E2E                        38            .byte	$38
12840 2E2F                        6C            .byte	$6C
12841 2E30                        38            .byte	$38
12842 2E31                        00            .byte	0
12843 2E32                        38            .byte	$38
12844 2E33                        6C            .byte	$6C
12845 2E34                        C6            .byte	$C6
12846 2E35                        C6            .byte	$C6
12847 2E36                        FE            .byte	$FE
12848 2E37                        C6            .byte	$C6
12849 2E38                        C6            .byte	$C6
12850 2E39                        C6            .byte	$C6
12851 2E3A                        00            .byte	0
12852 2E3B                        00            .byte	0
12853 2E3C                        00            .byte	0
12854 2E3D                        00            .byte	0
12855                                           ! 1372  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
12856 2E3E                        18            .byte	$18
12857 2E3F                        30            .byte	$30
12858 2E40                        60            .byte	$60
12859 2E41                        00            .byte	0
12860 2E42                        FE            .byte	$FE
12861 2E43                        66            .byte	$66
12862 2E44                        60            .byte	$60
12863 2E45                        7C            .byte	$7C
12864 2E46                        60            .byte	$60
12865 2E47                        60            .byte	$60
12866 2E48                        66            .byte	$66
12867 2E49                        FE            .byte	$FE
12868 2E4A                        00            .byte	0
12869 2E4B                        00            .byte	0
12870 2E4C                        00            .byte	0
12871 2E4D                        00            .byte	0
12872                                           ! 1373  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
12873 2E4E                        00            .byte	0
12874 2E4F                        00            .byte	0
12875 2E50                        00            .byte	0
12876 2E51                        00            .byte	0
12877 2E52                        00            .byte	0
12878 2E53                        6E            .byte	$6E
12879 2E54                        3B            .byte	$3B
12880 2E55                        1B            .byte	$1B
12881 2E56                        7E            .byte	$7E
12882 2E57                        D8            .byte	$D8
12883 2E58                        DC            .byte	$DC
12884 2E59                        77            .byte	$77
12885 2E5A                        00            .byte	0
12886 2E5B                        00            .byte	0
12887 2E5C                        00            .byte	0
12888 2E5D                        00            .byte	0
12889                                           ! 1374  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
12890 2E5E                        00            .byte	0
12891 2E5F                        00            .byte	0
12892 2E60                        3E            .byte	$3E
12893 2E61                        6C            .byte	$6C
12894 2E62                        CC            .byte	$CC
12895 2E63                        CC            .byte	$CC
12896 2E64                        FE            .byte	$FE
12897 2E65                        CC            .byte	$CC
12898 2E66                        CC            .byte	$CC
12899 2E67                        CC            .byte	$CC
12900 2E68                        CC            .byte	$CC
12901 2E69                        CE            .byte	$CE
12902 2E6A                        00            .byte	0
12903 2E6B                        00            .byte	0
12904 2E6C                        00            .byte	0
12905 2E6D                        00            .byte	0
12906                                           ! 1375  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12907 2E6E                        00            .byte	0
12908 2E6F                        10            .byte	$10
12909 2E70                        38            .byte	$38
12910 2E71                        6C            .byte	$6C
12911 2E72                        00            .byte	0
12912 2E73                        7C            .byte	$7C
12913 2E74                        C6            .byte	$C6
12914 2E75                        C6            .byte	$C6
12915 2E76                        C6            .byte	$C6
12916 2E77                        C6            .byte	$C6
12917 2E78                        C6            .byte	$C6
12918 2E79                        7C            .byte	$7C
12919 2E7A                        00            .byte	0
12920 2E7B                        00            .byte	0
12921 2E7C                        00            .byte	0
12922 2E7D                        00            .byte	0
12923                                           ! 1376  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12924 2E7E                        00            .byte	0
12925 2E7F                        00            .byte	0
12926 2E80                        C6            .byte	$C6
12927 2E81                        00            .byte	0
12928 2E82                        00            .byte	0
12929 2E83                        7C            .byte	$7C
12930 2E84                        C6            .byte	$C6
12931 2E85                        C6            .byte	$C6
12932 2E86                        C6            .byte	$C6
12933 2E87                        C6            .byte	$C6
12934 2E88                        C6            .byte	$C6
12935 2E89                        7C            .byte	$7C
12936 2E8A                        00            .byte	0
12937 2E8B                        00            .byte	0
12938 2E8C                        00            .byte	0
12939 2E8D                        00            .byte	0
12940                                           ! 1377  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12941 2E8E                        00            .byte	0
12942 2E8F                        60            .byte	$60
12943 2E90                        30            .byte	$30
12944 2E91                        18            .byte	$18
12945 2E92                        00            .byte	0
12946 2E93                        7C            .byte	$7C
12947 2E94                        C6            .byte	$C6
12948 2E95                        C6            .byte	$C6
12949 2E96                        C6            .byte	$C6
12950 2E97                        C6            .byte	$C6
12951 2E98                        C6            .byte	$C6
12952 2E99                        7C            .byte	$7C
12953 2E9A                        00            .byte	0
12954 2E9B                        00            .byte	0
12955 2E9C                        00            .byte	0
12956 2E9D                        00            .byte	0
12957                                           ! 1378  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12958 2E9E                        00            .byte	0
12959 2E9F                        30            .byte	$30
12960 2EA0                        78            .byte	$78
12961 2EA1                        CC            .byte	$CC
12962 2EA2                        00            .byte	0
12963 2EA3                        CC            .byte	$CC
12964 2EA4                        CC            .byte	$CC
12965 2EA5                        CC            .byte	$CC
12966 2EA6                        CC            .byte	$CC
12967 2EA7                        CC            .byte	$CC
12968 2EA8                        CC            .byte	$CC
12969 2EA9                        76            .byte	$76
12970 2EAA                        00            .byte	0
12971 2EAB                        00            .byte	0
12972 2EAC                        00            .byte	0
12973 2EAD                        00            .byte	0
12974                                           ! 1379  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12975 2EAE                        00            .byte	0
12976 2EAF                        60            .byte	$60
12977 2EB0                        30            .byte	$30
12978 2EB1                        18            .byte	$18
12979 2EB2                        00            .byte	0
12980 2EB3                        CC            .byte	$CC
12981 2EB4                        CC            .byte	$CC
12982 2EB5                        CC            .byte	$CC
12983 2EB6                        CC            .byte	$CC
12984 2EB7                        CC            .byte	$CC
12985 2EB8                        CC            .byte	$CC
12986 2EB9                        76            .byte	$76
12987 2EBA                        00            .byte	0
12988 2EBB                        00            .byte	0
12989 2EBC                        00            .byte	0
12990 2EBD                        00            .byte	0
12991                                           ! 1380  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
12992 2EBE                        00            .byte	0
12993 2EBF                        00            .byte	0
12994 2EC0                        C6            .byte	$C6
12995 2EC1                        00            .byte	0
12996 2EC2                        00            .byte	0
12997 2EC3                        C6            .byte	$C6
12998 2EC4                        C6            .byte	$C6
12999 2EC5                        C6            .byte	$C6
13000 2EC6                        C6            .byte	$C6
13001 2EC7                        C6            .byte	$C6
13002 2EC8                        C6            .byte	$C6
13003 2EC9                        7E            .byte	$7E
13004 2ECA                        06            .byte	6
13005 2ECB                        0C            .byte	$C
13006 2ECC                        78            .byte	$78
13007 2ECD                        00            .byte	0
13008                                           ! 1381  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13009 2ECE                        00            .byte	0
13010 2ECF                        C6            .byte	$C6
13011 2ED0                        00            .byte	0
13012 2ED1                        7C            .byte	$7C
13013 2ED2                        C6            .byte	$C6
13014 2ED3                        C6            .byte	$C6
13015 2ED4                        C6            .byte	$C6
13016 2ED5                        C6            .byte	$C6
13017 2ED6                        C6            .byte	$C6
13018 2ED7                        C6            .byte	$C6
13019 2ED8                        C6            .byte	$C6
13020 2ED9                        7C            .byte	$7C
13021 2EDA                        00            .byte	0
13022 2EDB                        00            .byte	0
13023 2EDC                        00            .byte	0
13024 2EDD                        00            .byte	0
13025                                           ! 1382  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13026 2EDE                        00            .byte	0
13027 2EDF                        C6            .byte	$C6
13028 2EE0                        00            .byte	0
13029 2EE1                        C6            .byte	$C6
13030 2EE2                        C6            .byte	$C6
13031 2EE3                        C6            .byte	$C6
13032 2EE4                        C6            .byte	$C6
13033 2EE5                        C6            .byte	$C6
13034 2EE6                        C6            .byte	$C6
13035 2EE7                        C6            .byte	$C6
13036 2EE8                        C6            .byte	$C6
13037 2EE9                        7C            .byte	$7C
13038 2EEA                        00            .byte	0
13039 2EEB                        00            .byte	0
13040 2EEC                        00            .byte	0
13041 2EED                        00            .byte	0
13042                                           ! 1383  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13043 2EEE                        00            .byte	0
13044 2EEF                        18            .byte	$18
13045 2EF0                        18            .byte	$18
13046 2EF1                        7E            .byte	$7E
13047 2EF2                        C3            .byte	$C3
13048 2EF3                        C0            .byte	$C0
13049 2EF4                        C0            .byte	$C0
13050 2EF5                        C0            .byte	$C0
13051 2EF6                        C3            .byte	$C3
13052 2EF7                        7E            .byte	$7E
13053 2EF8                        18            .byte	$18
13054 2EF9                        18            .byte	$18
13055 2EFA                        00            .byte	0
13056 2EFB                        00            .byte	0
13057 2EFC                        00            .byte	0
13058 2EFD                        00            .byte	0
13059                                           ! 1384  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13060 2EFE                        00            .byte	0
13061 2EFF                        38            .byte	$38
13062 2F00                        6C            .byte	$6C
13063 2F01                        64            .byte	$64
13064 2F02                        60            .byte	$60
13065 2F03                        F0            .byte	$F0
13066 2F04                        60            .byte	$60
13067 2F05                        60            .byte	$60
13068 2F06                        60            .byte	$60
13069 2F07                        60            .byte	$60
13070 2F08                        E6            .byte	$E6
13071 2F09                        FC            .byte	$FC
13072 2F0A                        00            .byte	0
13073 2F0B                        00            .byte	0
13074 2F0C                        00            .byte	0
13075 2F0D                        00            .byte	0
13076                                           ! 1385  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13077 2F0E                        00            .byte	0
13078 2F0F                        00            .byte	0
13079 2F10                        C3            .byte	$C3
13080 2F11                        66            .byte	$66
13081 2F12                        3C            .byte	$3C
13082 2F13                        18            .byte	$18
13083 2F14                        FF            .byte	$FF
13084 2F15                        18            .byte	$18
13085 2F16                        FF            .byte	$FF
13086 2F17                        18            .byte	$18
13087 2F18                        18            .byte	$18
13088 2F19                        18            .byte	$18
13089 2F1A                        00            .byte	0
13090 2F1B                        00            .byte	0
13091 2F1C                        00            .byte	0
13092 2F1D                        00            .byte	0
13093                                           ! 1386  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x0
13094 2F1E                        00            .byte	0
13095 2F1F                        FC            .byte	$FC
13096 2F20                        66            .byte	$66
13097 2F21                        66            .byte	$66
13098 2F22                        7C            .byte	$7C
13099 2F23                        62            .byte	$62
13100 2F24                        66            .byte	$66
13101 2F25                        6F            .byte	$6F
13102 2F26                        66            .byte	$66
13103 2F27                        66            .byte	$66
13104 2F28                        66            .byte	$66
13105 2F29                        F3            .byte	$F3
13106 2F2A                        00            .byte	0
13107 2F2B                        00            .byte	0
13108                                           ! 1386 0, 0x00,
13109 2F2C                        00            .byte	0
13110 2F2D                        00            .byte	0
13111                                           ! 1387  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13112 2F2E                        00            .byte	0
13113 2F2F                        0E            .byte	$E
13114 2F30                        1B            .byte	$1B
13115 2F31                        18            .byte	$18
13116 2F32                        18            .byte	$18
13117 2F33                        18            .byte	$18
13118 2F34                        7E            .byte	$7E
13119 2F35                        18            .byte	$18
13120 2F36                        18            .byte	$18
13121 2F37                        18            .byte	$18
13122 2F38                        18            .byte	$18
13123 2F39                        18            .byte	$18
13124 2F3A                        D8            .byte	$D8
13125 2F3B                        70            .byte	$70
13126 2F3C                        00            .byte	0
13127 2F3D                        00            .byte	0
13128                                           ! 1388  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13129 2F3E                        00            .byte	0
13130 2F3F                        18            .byte	$18
13131 2F40                        30            .byte	$30
13132 2F41                        60            .byte	$60
13133 2F42                        00            .byte	0
13134 2F43                        78            .byte	$78
13135 2F44                        0C            .byte	$C
13136 2F45                        7C            .byte	$7C
13137 2F46                        CC            .byte	$CC
13138 2F47                        CC            .byte	$CC
13139 2F48                        CC            .byte	$CC
13140 2F49                        76            .byte	$76
13141 2F4A                        00            .byte	0
13142 2F4B                        00            .byte	0
13143 2F4C                        00            .byte	0
13144 2F4D                        00            .byte	0
13145                                           ! 1389  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13146 2F4E                        00            .byte	0
13147 2F4F                        0C            .byte	$C
13148 2F50                        18            .byte	$18
13149 2F51                        30            .byte	$30
13150 2F52                        00            .byte	0
13151 2F53                        38            .byte	$38
13152 2F54                        18            .byte	$18
13153 2F55                        18            .byte	$18
13154 2F56                        18            .byte	$18
13155 2F57                        18            .byte	$18
13156 2F58                        18            .byte	$18
13157 2F59                        3C            .byte	$3C
13158 2F5A                        00            .byte	0
13159 2F5B                        00            .byte	0
13160 2F5C                        00            .byte	0
13161 2F5D                        00            .byte	0
13162                                           ! 1390  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13163 2F5E                        00            .byte	0
13164 2F5F                        18            .byte	$18
13165 2F60                        30            .byte	$30
13166 2F61                        60            .byte	$60
13167 2F62                        00            .byte	0
13168 2F63                        7C            .byte	$7C
13169 2F64                        C6            .byte	$C6
13170 2F65                        C6            .byte	$C6
13171 2F66                        C6            .byte	$C6
13172 2F67                        C6            .byte	$C6
13173 2F68                        C6            .byte	$C6
13174 2F69                        7C            .byte	$7C
13175 2F6A                        00            .byte	0
13176 2F6B                        00            .byte	0
13177 2F6C                        00            .byte	0
13178 2F6D                        00            .byte	0
13179                                           ! 1391  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13180 2F6E                        00            .byte	0
13181 2F6F                        18            .byte	$18
13182 2F70                        30            .byte	$30
13183 2F71                        60            .byte	$60
13184 2F72                        00            .byte	0
13185 2F73                        CC            .byte	$CC
13186 2F74                        CC            .byte	$CC
13187 2F75                        CC            .byte	$CC
13188 2F76                        CC            .byte	$CC
13189 2F77                        CC            .byte	$CC
13190 2F78                        CC            .byte	$CC
13191 2F79                        76            .byte	$76
13192 2F7A                        00            .byte	0
13193 2F7B                        00            .byte	0
13194 2F7C                        00            .byte	0
13195 2F7D                        00            .byte	0
13196                                           ! 1392  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13197 2F7E                        00            .byte	0
13198 2F7F                        00            .byte	0
13199 2F80                        76            .byte	$76
13200 2F81                        DC            .byte	$DC
13201 2F82                        00            .byte	0
13202 2F83                        DC            .byte	$DC
13203 2F84                        66            .byte	$66
13204 2F85                        66            .byte	$66
13205 2F86                        66            .byte	$66
13206 2F87                        66            .byte	$66
13207 2F88                        66            .byte	$66
13208 2F89                        66            .byte	$66
13209 2F8A                        00            .byte	0
13210 2F8B                        00            .byte	0
13211 2F8C                        00            .byte	0
13212 2F8D                        00            .byte	0
13213                                           ! 1393  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13214 2F8E                        76            .byte	$76
13215 2F8F                        DC            .byte	$DC
13216 2F90                        00            .byte	0
13217 2F91                        C6            .byte	$C6
13218 2F92                        E6            .byte	$E6
13219 2F93                        F6            .byte	$F6
13220 2F94                        FE            .byte	$FE
13221 2F95                        DE            .byte	$DE
13222 2F96                        CE            .byte	$CE
13223 2F97                        C6            .byte	$C6
13224 2F98                        C6            .byte	$C6
13225 2F99                        C6            .byte	$C6
13226 2F9A                        00            .byte	0
13227 2F9B                        00            .byte	0
13228 2F9C                        00            .byte	0
13229 2F9D                        00            .byte	0
13230                                           ! 1394  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13231 2F9E                        00            .byte	0
13232 2F9F                        3C            .byte	$3C
13233 2FA0                        6C            .byte	$6C
13234 2FA1                        6C            .byte	$6C
13235 2FA2                        3E            .byte	$3E
13236 2FA3                        00            .byte	0
13237 2FA4                        7E            .byte	$7E
13238 2FA5                        00            .byte	0
13239 2FA6                        00            .byte	0
13240 2FA7                        00            .byte	0
13241 2FA8                        00            .byte	0
13242 2FA9                        00            .byte	0
13243 2FAA                        00            .byte	0
13244 2FAB                        00            .byte	0
13245 2FAC                        00            .byte	0
13246 2FAD                        00            .byte	0
13247                                           ! 1395  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13248 2FAE                        00            .byte	0
13249 2FAF                        38            .byte	$38
13250 2FB0                        6C            .byte	$6C
13251 2FB1                        6C            .byte	$6C
13252 2FB2                        38            .byte	$38
13253 2FB3                        00            .byte	0
13254 2FB4                        7C            .byte	$7C
13255 2FB5                        00            .byte	0
13256 2FB6                        00            .byte	0
13257 2FB7                        00            .byte	0
13258 2FB8                        00            .byte	0
13259 2FB9                        00            .byte	0
13260 2FBA                        00            .byte	0
13261 2FBB                        00            .byte	0
13262 2FBC                        00            .byte	0
13263 2FBD                        00            .byte	0
13264                                           ! 1396  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13265 2FBE                        00            .byte	0
13266 2FBF                        00            .byte	0
13267 2FC0                        30            .byte	$30
13268 2FC1                        30            .byte	$30
13269 2FC2                        00            .byte	0
13270 2FC3                        30            .byte	$30
13271 2FC4                        30            .byte	$30
13272 2FC5                        60            .byte	$60
13273 2FC6                        C0            .byte	$C0
13274 2FC7                        C6            .byte	$C6
13275 2FC8                        C6            .byte	$C6
13276 2FC9                        7C            .byte	$7C
13277 2FCA                        00            .byte	0
13278 2FCB                        00            .byte	0
13279 2FCC                        00            .byte	0
13280 2FCD                        00            .byte	0
13281                                           ! 1397  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13282 2FCE                        00            .byte	0
13283 2FCF                        00            .byte	0
13284 2FD0                        00            .byte	0
13285 2FD1                        00            .byte	0
13286 2FD2                        00            .byte	0
13287 2FD3                        00            .byte	0
13288 2FD4                        FE            .byte	$FE
13289 2FD5                        C0            .byte	$C0
13290 2FD6                        C0            .byte	$C0
13291 2FD7                        C0            .byte	$C0
13292 2FD8                        C0            .byte	$C0
13293 2FD9                        00            .byte	0
13294 2FDA                        00            .byte	0
13295 2FDB                        00            .byte	0
13296 2FDC                        00            .byte	0
13297 2FDD                        00            .byte	0
13298                                           ! 1398  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13299 2FDE                        00            .byte	0
13300 2FDF                        00            .byte	0
13301 2FE0                        00            .byte	0
13302 2FE1                        00            .byte	0
13303 2FE2                        00            .byte	0
13304 2FE3                        00            .byte	0
13305 2FE4                        FE            .byte	$FE
13306 2FE5                        06            .byte	6
13307 2FE6                        06            .byte	6
13308 2FE7                        06            .byte	6
13309 2FE8                        06            .byte	6
13310 2FE9                        00            .byte	0
13311 2FEA                        00            .byte	0
13312 2FEB                        00            .byte	0
13313 2FEC                        00            .byte	0
13314 2FED                        00            .byte	0
13315                                           ! 1399  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13316 2FEE                        00            .byte	0
13317 2FEF                        C0            .byte	$C0
13318 2FF0                        C0            .byte	$C0
13319 2FF1                        C2            .byte	$C2
13320 2FF2                        C6            .byte	$C6
13321 2FF3                        CC            .byte	$CC
13322 2FF4                        18            .byte	$18
13323 2FF5                        30            .byte	$30
13324 2FF6                        60            .byte	$60
13325 2FF7                        CE            .byte	$CE
13326 2FF8                        9B            .byte	$9B
13327 2FF9                        06            .byte	6
13328 2FFA                        0C            .byte	$C
13329 2FFB                        1F            .byte	$1F
13330 2FFC                        00            .byte	0
13331 2FFD                        00            .byte	0
13332                                           ! 1400  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13333 2FFE                        00            .byte	0
13334 2FFF                        C0            .byte	$C0
13335 3000                        C0            .byte	$C0
13336 3001                        C2            .byte	$C2
13337 3002                        C6            .byte	$C6
13338 3003                        CC            .byte	$CC
13339 3004                        18            .byte	$18
13340 3005                        30            .byte	$30
13341 3006                        66            .byte	$66
13342 3007                        CE            .byte	$CE
13343 3008                        96            .byte	$96
13344 3009                        3E            .byte	$3E
13345 300A                        06            .byte	6
13346 300B                        06            .byte	6
13347 300C                        00            .byte	0
13348 300D                        00            .byte	0
13349                                           ! 1401  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13350 300E                        00            .byte	0
13351 300F                        00            .byte	0
13352 3010                        18            .byte	$18
13353 3011                        18            .byte	$18
13354 3012                        00            .byte	0
13355 3013                        18            .byte	$18
13356 3014                        18            .byte	$18
13357 3015                        18            .byte	$18
13358 3016                        3C            .byte	$3C
13359 3017                        3C            .byte	$3C
13360 3018                        3C            .byte	$3C
13361 3019                        18            .byte	$18
13362 301A                        00            .byte	0
13363 301B                        00            .byte	0
13364 301C                        00            .byte	0
13365 301D                        00            .byte	0
13366                                           ! 1402  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13367 301E                        00            .byte	0
13368 301F                        00            .byte	0
13369 3020                        00            .byte	0
13370 3021                        00            .byte	0
13371 3022                        00            .byte	0
13372 3023                        36            .byte	$36
13373 3024                        6C            .byte	$6C
13374 3025                        D8            .byte	$D8
13375 3026                        6C            .byte	$6C
13376 3027                        36            .byte	$36
13377 3028                        00            .byte	0
13378 3029                        00            .byte	0
13379 302A                        00            .byte	0
13380 302B                        00            .byte	0
13381 302C                        00            .byte	0
13382 302D                        00            .byte	0
13383                                           ! 1403  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13384 302E                        00            .byte	0
13385 302F                        00            .byte	0
13386 3030                        00            .byte	0
13387 3031                        00            .byte	0
13388 3032                        00            .byte	0
13389 3033                        D8            .byte	$D8
13390 3034                        6C            .byte	$6C
13391 3035                        36            .byte	$36
13392 3036                        6C            .byte	$6C
13393 3037                        D8            .byte	$D8
13394 3038                        00            .byte	0
13395 3039                        00            .byte	0
13396 303A                        00            .byte	0
13397 303B                        00            .byte	0
13398 303C                        00            .byte	0
13399 303D                        00            .byte	0
13400                                           ! 1404  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13401 303E                        11            .byte	$11
13402 303F                        44            .byte	$44
13403 3040                        11            .byte	$11
13404 3041                        44            .byte	$44
13405 3042                        11            .byte	$11
13406 3043                        44            .byte	$44
13407 3044                        11            .byte	$11
13408 3045                        44            .byte	$44
13409 3046                        11            .byte	$11
13410 3047                        44            .byte	$44
13411 3048                        11            .byte	$11
13412 3049                        44            .byte	$44
13413 304A                        11            .byte	$11
13414 304B                        44            .byte	$44
13415 304C                        11            .byte	$11
13416 304D                        44            .byte	$44
13417                                           ! 1405  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13418 304E                        55            .byte	$55
13419 304F                        AA            .byte	$AA
13420 3050                        55            .byte	$55
13421 3051                        AA            .byte	$AA
13422 3052                        55            .byte	$55
13423 3053                        AA            .byte	$AA
13424 3054                        55            .byte	$55
13425 3055                        AA            .byte	$AA
13426 3056                        55            .byte	$55
13427 3057                        AA            .byte	$AA
13428 3058                        55            .byte	$55
13429 3059                        AA            .byte	$AA
13430 305A                        55            .byte	$55
13431 305B                        AA            .byte	$AA
13432 305C                        55            .byte	$55
13433 305D                        AA            .byte	$AA
13434                                           ! 1406  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13435 305E                        DD            .byte	$DD
13436 305F                        77            .byte	$77
13437 3060                        DD            .byte	$DD
13438 3061                        77            .byte	$77
13439 3062                        DD            .byte	$DD
13440 3063                        77            .byte	$77
13441 3064                        DD            .byte	$DD
13442 3065                        77            .byte	$77
13443 3066                        DD            .byte	$DD
13444 3067                        77            .byte	$77
13445 3068                        DD            .byte	$DD
13446 3069                        77            .byte	$77
13447 306A                        DD            .byte	$DD
13448 306B                        77            .byte	$77
13449 306C                        DD            .byte	$DD
13450 306D                        77            .byte	$77
13451                                           ! 1407  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13452 306E                        18            .byte	$18
13453 306F                        18            .byte	$18
13454 3070                        18            .byte	$18
13455 3071                        18            .byte	$18
13456 3072                        18            .byte	$18
13457 3073                        18            .byte	$18
13458 3074                        18            .byte	$18
13459 3075                        18            .byte	$18
13460 3076                        18            .byte	$18
13461 3077                        18            .byte	$18
13462 3078                        18            .byte	$18
13463 3079                        18            .byte	$18
13464 307A                        18            .byte	$18
13465 307B                        18            .byte	$18
13466 307C                        18            .byte	$18
13467 307D                        18            .byte	$18
13468                                           ! 1408  0
13469                                           ! 1408 x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13470 307E                        18            .byte	$18
13471 307F                        18            .byte	$18
13472 3080                        18            .byte	$18
13473 3081                        18            .byte	$18
13474 3082                        18            .byte	$18
13475 3083                        18            .byte	$18
13476 3084                        18            .byte	$18
13477 3085                        F8            .byte	$F8
13478 3086                        18            .byte	$18
13479 3087                        18            .byte	$18
13480 3088                        18            .byte	$18
13481 3089                        18            .byte	$18
13482 308A                        18            .byte	$18
13483 308B                        18            .byte	$18
13484 308C                        18            .byte	$18
13485 308D                        18            .byte	$18
13486                                           ! 1409  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13487 308E                        18            .byte	$18
13488 308F                        18            .byte	$18
13489 3090                        18            .byte	$18
13490 3091                        18            .byte	$18
13491 3092                        18            .byte	$18
13492 3093                        F8            .byte	$F8
13493 3094                        18            .byte	$18
13494 3095                        F8            .byte	$F8
13495 3096                        18            .byte	$18
13496 3097                        18            .byte	$18
13497 3098                        18            .byte	$18
13498 3099                        18            .byte	$18
13499 309A                        18            .byte	$18
13500 309B                        18            .byte	$18
13501 309C                        18            .byte	$18
13502 309D                        18            .byte	$18
13503                                           ! 1410  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13504 309E                        36            .byte	$36
13505 309F                        36            .byte	$36
13506 30A0                        36            .byte	$36
13507 30A1                        36            .byte	$36
13508 30A2                        36            .byte	$36
13509 30A3                        36            .byte	$36
13510 30A4                        36            .byte	$36
13511 30A5                        F6            .byte	$F6
13512 30A6                        36            .byte	$36
13513 30A7                        36            .byte	$36
13514 30A8                        36            .byte	$36
13515 30A9                        36            .byte	$36
13516 30AA                        36            .byte	$36
13517 30AB                        36            .byte	$36
13518 30AC                        36            .byte	$36
13519 30AD                        36            .byte	$36
13520                                           ! 1411  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13521 30AE                        00            .byte	0
13522 30AF                        00            .byte	0
13523 30B0                        00            .byte	0
13524 30B1                        00            .byte	0
13525 30B2                        00            .byte	0
13526 30B3                        00            .byte	0
13527 30B4                        00            .byte	0
13528 30B5                        FE            .byte	$FE
13529 30B6                        36            .byte	$36
13530 30B7                        36            .byte	$36
13531 30B8                        36            .byte	$36
13532 30B9                        36            .byte	$36
13533 30BA                        36            .byte	$36
13534 30BB                        36            .byte	$36
13535 30BC                        36            .byte	$36
13536 30BD                        36            .byte	$36
13537                                           ! 1412  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13538 30BE                        00            .byte	0
13539 30BF                        00            .byte	0
13540 30C0                        00            .byte	0
13541 30C1                        00            .byte	0
13542 30C2                        00            .byte	0
13543 30C3                        F8            .byte	$F8
13544 30C4                        18            .byte	$18
13545 30C5                        F8            .byte	$F8
13546 30C6                        18            .byte	$18
13547 30C7                        18            .byte	$18
13548 30C8                        18            .byte	$18
13549 30C9                        18            .byte	$18
13550 30CA                        18            .byte	$18
13551 30CB                        18            .byte	$18
13552 30CC                        18            .byte	$18
13553 30CD                        18            .byte	$18
13554                                           ! 1413  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13555 30CE                        36            .byte	$36
13556 30CF                        36            .byte	$36
13557 30D0                        36            .byte	$36
13558 30D1                        36            .byte	$36
13559 30D2                        36            .byte	$36
13560 30D3                        F6            .byte	$F6
13561 30D4                        06            .byte	6
13562 30D5                        F6            .byte	$F6
13563 30D6                        36            .byte	$36
13564 30D7                        36            .byte	$36
13565 30D8                        36            .byte	$36
13566 30D9                        36            .byte	$36
13567 30DA                        36            .byte	$36
13568 30DB                        36            .byte	$36
13569 30DC                        36            .byte	$36
13570 30DD                        36            .byte	$36
13571                                           ! 1414  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13572 30DE                        36            .byte	$36
13573 30DF                        36            .byte	$36
13574 30E0                        36            .byte	$36
13575 30E1                        36            .byte	$36
13576 30E2                        36            .byte	$36
13577 30E3                        36            .byte	$36
13578 30E4                        36            .byte	$36
13579 30E5                        36            .byte	$36
13580 30E6                        36            .byte	$36
13581 30E7                        36            .byte	$36
13582 30E8                        36            .byte	$36
13583 30E9                        36            .byte	$36
13584 30EA                        36            .byte	$36
13585 30EB                        36            .byte	$36
13586 30EC                        36            .byte	$36
13587 30ED                        36            .byte	$36
13588                                           ! 1415  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13589 30EE                        00            .byte	0
13590 30EF                        00            .byte	0
13591 30F0                        00            .byte	0
13592 30F1                        00            .byte	0
13593 30F2                        00            .byte	0
13594 30F3                        FE            .byte	$FE
13595 30F4                        06            .byte	6
13596 30F5                        F6            .byte	$F6
13597 30F6                        36            .byte	$36
13598 30F7                        36            .byte	$36
13599 30F8                        36            .byte	$36
13600 30F9                        36            .byte	$36
13601 30FA                        36            .byte	$36
13602 30FB                        36            .byte	$36
13603 30FC                        36            .byte	$36
13604 30FD                        36            .byte	$36
13605                                           ! 1416  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13606 30FE                        36            .byte	$36
13607 30FF                        36            .byte	$36
13608 3100                        36            .byte	$36
13609 3101                        36            .byte	$36
13610 3102                        36            .byte	$36
13611 3103                        F6            .byte	$F6
13612 3104                        06            .byte	6
13613 3105                        FE            .byte	$FE
13614 3106                        00            .byte	0
13615 3107                        00            .byte	0
13616 3108                        00            .byte	0
13617 3109                        00            .byte	0
13618 310A                        00            .byte	0
13619 310B                        00            .byte	0
13620 310C                        00            .byte	0
13621 310D                        00            .byte	0
13622                                           ! 1417  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13623 310E                        36            .byte	$36
13624 310F                        36            .byte	$36
13625 3110                        36            .byte	$36
13626 3111                        36            .byte	$36
13627 3112                        36            .byte	$36
13628 3113                        36            .byte	$36
13629 3114                        36            .byte	$36
13630 3115                        FE            .byte	$FE
13631 3116                        00            .byte	0
13632 3117                        00            .byte	0
13633 3118                        00            .byte	0
13634 3119                        00            .byte	0
13635 311A                        00            .byte	0
13636 311B                        00            .byte	0
13637 311C                        00            .byte	0
13638 311D                        00            .byte	0
13639                                           ! 1418  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13640 311E                        18            .byte	$18
13641 311F                        18            .byte	$18
13642 3120                        18            .byte	$18
13643 3121                        18            .byte	$18
13644 3122                        18            .byte	$18
13645 3123                        F8            .byte	$F8
13646 3124                        18            .byte	$18
13647 3125                        F8            .byte	$F8
13648 3126                        00            .byte	0
13649 3127                        00            .byte	0
13650 3128                        00            .byte	0
13651 3129                        00            .byte	0
13652 312A                        00            .byte	0
13653 312B                        00            .byte	0
13654 312C                        00            .byte	0
13655 312D                        00            .byte	0
13656                                           ! 1419  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13657 312E                        00            .byte	0
13658 312F                        00            .byte	0
13659 3130                        00            .byte	0
13660 3131                        00            .byte	0
13661 3132                        00            .byte	0
13662 3133                        00            .byte	0
13663 3134                        00            .byte	0
13664 3135                        F8            .byte	$F8
13665 3136                        18            .byte	$18
13666 3137                        18            .byte	$18
13667 3138                        18            .byte	$18
13668 3139                        18            .byte	$18
13669 313A                        18            .byte	$18
13670 313B                        18            .byte	$18
13671 313C                        18            .byte	$18
13672 313D                        18            .byte	$18
13673                                           ! 1420  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13674 313E                        18            .byte	$18
13675 313F                        18            .byte	$18
13676 3140                        18            .byte	$18
13677 3141                        18            .byte	$18
13678 3142                        18            .byte	$18
13679 3143                        18            .byte	$18
13680 3144                        18            .byte	$18
13681 3145                        1F            .byte	$1F
13682 3146                        00            .byte	0
13683 3147                        00            .byte	0
13684 3148                        00            .byte	0
13685 3149                        00            .byte	0
13686 314A                        00            .byte	0
13687 314B                        00            .byte	0
13688 314C                        00            .byte	0
13689 314D                        00            .byte	0
13690                                           ! 1421  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13691 314E                        18            .byte	$18
13692 314F                        18            .byte	$18
13693 3150                        18            .byte	$18
13694 3151                        18            .byte	$18
13695 3152                        18            .byte	$18
13696 3153                        18            .byte	$18
13697 3154                        18            .byte	$18
13698 3155                        FF            .byte	$FF
13699 3156                        00            .byte	0
13700 3157                        00            .byte	0
13701 3158                        00            .byte	0
13702 3159                        00            .byte	0
13703 315A                        00            .byte	0
13704 315B                        00            .byte	0
13705 315C                        00            .byte	0
13706 315D                        00            .byte	0
13707                                           ! 1422  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13708 315E                        00            .byte	0
13709 315F                        00            .byte	0
13710 3160                        00            .byte	0
13711 3161                        00            .byte	0
13712 3162                        00            .byte	0
13713 3163                        00            .byte	0
13714 3164                        00            .byte	0
13715 3165                        FF            .byte	$FF
13716 3166                        18            .byte	$18
13717 3167                        18            .byte	$18
13718 3168                        18            .byte	$18
13719 3169                        18            .byte	$18
13720 316A                        18            .byte	$18
13721 316B                        18            .byte	$18
13722 316C                        18            .byte	$18
13723 316D                        18            .byte	$18
13724                                           ! 1423  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13725 316E                        18            .byte	$18
13726 316F                        18            .byte	$18
13727 3170                        18            .byte	$18
13728 3171                        18            .byte	$18
13729 3172                        18            .byte	$18
13730 3173                        18            .byte	$18
13731 3174                        18            .byte	$18
13732 3175                        1F            .byte	$1F
13733 3176                        18            .byte	$18
13734 3177                        18            .byte	$18
13735 3178                        18            .byte	$18
13736 3179                        18            .byte	$18
13737 317A                        18            .byte	$18
13738 317B                        18            .byte	$18
13739 317C                        18            .byte	$18
13740 317D                        18            .byte	$18
13741                                           ! 1424  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13742 317E                        00            .byte	0
13743 317F                        00            .byte	0
13744 3180                        00            .byte	0
13745 3181                        00            .byte	0
13746 3182                        00            .byte	0
13747 3183                        00            .byte	0
13748 3184                        00            .byte	0
13749 3185                        FF            .byte	$FF
13750 3186                        00            .byte	0
13751 3187                        00            .byte	0
13752 3188                        00            .byte	0
13753 3189                        00            .byte	0
13754 318A                        00            .byte	0
13755 318B                        00            .byte	0
13756 318C                        00            .byte	0
13757 318D                        00            .byte	0
13758                                           ! 1425  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13759 318E                        18            .byte	$18
13760 318F                        18            .byte	$18
13761 3190                        18            .byte	$18
13762 3191                        18            .byte	$18
13763 3192                        18            .byte	$18
13764 3193                        18            .byte	$18
13765 3194                        18            .byte	$18
13766 3195                        FF            .byte	$FF
13767 3196                        18            .byte	$18
13768 3197                        18            .byte	$18
13769 3198                        18            .byte	$18
13770 3199                        18            .byte	$18
13771 319A                        18            .byte	$18
13772 319B                        18            .byte	$18
13773 319C                        18            .byte	$18
13774 319D                        18            .byte	$18
13775                                           ! 1426  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13776 319E                        18            .byte	$18
13777 319F                        18            .byte	$18
13778 31A0                        18            .byte	$18
13779 31A1                        18            .byte	$18
13780 31A2                        18            .byte	$18
13781 31A3                        1F            .byte	$1F
13782 31A4                        18            .byte	$18
13783 31A5                        1F            .byte	$1F
13784 31A6                        18            .byte	$18
13785 31A7                        18            .byte	$18
13786 31A8                        18            .byte	$18
13787 31A9                        18            .byte	$18
13788 31AA                        18            .byte	$18
13789 31AB                        18            .byte	$18
13790 31AC                        18            .byte	$18
13791 31AD                        18            .byte	$18
13792                                           ! 1427  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13793 31AE                        36            .byte	$36
13794 31AF                        36            .byte	$36
13795 31B0                        36            .byte	$36
13796 31B1                        36            .byte	$36
13797 31B2                        36            .byte	$36
13798 31B3                        36            .byte	$36
13799 31B4                        36            .byte	$36
13800 31B5                        37            .byte	$37
13801 31B6                        36            .byte	$36
13802 31B7                        36            .byte	$36
13803 31B8                        36            .byte	$36
13804 31B9                        36            .byte	$36
13805 31BA                        36            .byte	$36
13806 31BB                        36            .byte	$36
13807 31BC                        36            .byte	$36
13808 31BD                        36            .byte	$36
13809                                           ! 1428  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13810 31BE                        36            .byte	$36
13811 31BF                        36            .byte	$36
13812 31C0                        36            .byte	$36
13813 31C1                        36            .byte	$36
13814 31C2                        36            .byte	$36
13815 31C3                        37            .byte	$37
13816 31C4                        30            .byte	$30
13817 31C5                        3F            .byte	$3F
13818 31C6                        00            .byte	0
13819 31C7                        00            .byte	0
13820 31C8                        00            .byte	0
13821 31C9                        00            .byte	0
13822 31CA                        00            .byte	0
13823 31CB                        00            .byte	0
13824 31CC                        00            .byte	0
13825 31CD                        00            .byte	0
13826                                           ! 1429  0x00, 0x00, 
13827 31CE                        00            .byte	0
13828 31CF                        00            .byte	0
13829                                           ! 1429 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13830 31D0                        00            .byte	0
13831 31D1                        00            .byte	0
13832 31D2                        00            .byte	0
13833 31D3                        3F            .byte	$3F
13834 31D4                        30            .byte	$30
13835 31D5                        37            .byte	$37
13836 31D6                        36            .byte	$36
13837 31D7                        36            .byte	$36
13838 31D8                        36            .byte	$36
13839 31D9                        36            .byte	$36
13840 31DA                        36            .byte	$36
13841 31DB                        36            .byte	$36
13842 31DC                        36            .byte	$36
13843 31DD                        36            .byte	$36
13844                                           ! 1430  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13845 31DE                        36            .byte	$36
13846 31DF                        36            .byte	$36
13847 31E0                        36            .byte	$36
13848 31E1                        36            .byte	$36
13849 31E2                        36            .byte	$36
13850 31E3                        F7            .byte	$F7
13851 31E4                        00            .byte	0
13852 31E5                        FF            .byte	$FF
13853 31E6                        00            .byte	0
13854 31E7                        00            .byte	0
13855 31E8                        00            .byte	0
13856 31E9                        00            .byte	0
13857 31EA                        00            .byte	0
13858 31EB                        00            .byte	0
13859 31EC                        00            .byte	0
13860 31ED                        00            .byte	0
13861                                           ! 1431  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13862 31EE                        00            .byte	0
13863 31EF                        00            .byte	0
13864 31F0                        00            .byte	0
13865 31F1                        00            .byte	0
13866 31F2                        00            .byte	0
13867 31F3                        FF            .byte	$FF
13868 31F4                        00            .byte	0
13869 31F5                        F7            .byte	$F7
13870 31F6                        36            .byte	$36
13871 31F7                        36            .byte	$36
13872 31F8                        36            .byte	$36
13873 31F9                        36            .byte	$36
13874 31FA                        36            .byte	$36
13875 31FB                        36            .byte	$36
13876 31FC                        36            .byte	$36
13877 31FD                        36            .byte	$36
13878                                           ! 1432  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13879 31FE                        36            .byte	$36
13880 31FF                        36            .byte	$36
13881 3200                        36            .byte	$36
13882 3201                        36            .byte	$36
13883 3202                        36            .byte	$36
13884 3203                        37            .byte	$37
13885 3204                        30            .byte	$30
13886 3205                        37            .byte	$37
13887 3206                        36            .byte	$36
13888 3207                        36            .byte	$36
13889 3208                        36            .byte	$36
13890 3209                        36            .byte	$36
13891 320A                        36            .byte	$36
13892 320B                        36            .byte	$36
13893 320C                        36            .byte	$36
13894 320D                        36            .byte	$36
13895                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13896 320E                        00            .byte	0
13897 320F                        00            .byte	0
13898 3210                        00            .byte	0
13899 3211                        00            .byte	0
13900 3212                        00            .byte	0
13901 3213                        FF            .byte	$FF
13902 3214                        00            .byte	0
13903 3215                        FF            .byte	$FF
13904 3216                        00            .byte	0
13905 3217                        00            .byte	0
13906 3218                        00            .byte	0
13907 3219                        00            .byte	0
13908 321A                        00            .byte	0
13909 321B                        00            .byte	0
13910 321C                        00            .byte	0
13911 321D                        00            .byte	0
13912                                           ! 1434  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13913 321E                        36            .byte	$36
13914 321F                        36            .byte	$36
13915 3220                        36            .byte	$36
13916 3221                        36            .byte	$36
13917 3222                        36            .byte	$36
13918 3223                        F7            .byte	$F7
13919 3224                        00            .byte	0
13920 3225                        F7            .byte	$F7
13921 3226                        36            .byte	$36
13922 3227                        36            .byte	$36
13923 3228                        36            .byte	$36
13924 3229                        36            .byte	$36
13925 322A                        36            .byte	$36
13926 322B                        36            .byte	$36
13927 322C                        36            .byte	$36
13928 322D                        36            .byte	$36
13929                                           ! 1435  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13930 322E                        18            .byte	$18
13931 322F                        18            .byte	$18
13932 3230                        18            .byte	$18
13933 3231                        18            .byte	$18
13934 3232                        18            .byte	$18
13935 3233                        FF            .byte	$FF
13936 3234                        00            .byte	0
13937 3235                        FF            .byte	$FF
13938 3236                        00            .byte	0
13939 3237                        00            .byte	0
13940 3238                        00            .byte	0
13941 3239                        00            .byte	0
13942 323A                        00            .byte	0
13943 323B                        00            .byte	0
13944 323C                        00            .byte	0
13945 323D                        00            .byte	0
13946                                           ! 1436  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13947 323E                        36            .byte	$36
13948 323F                        36            .byte	$36
13949 3240                        36            .byte	$36
13950 3241                        36            .byte	$36
13951 3242                        36            .byte	$36
13952 3243                        36            .byte	$36
13953 3244                        36            .byte	$36
13954 3245                        FF            .byte	$FF
13955 3246                        00            .byte	0
13956 3247                        00            .byte	0
13957 3248                        00            .byte	0
13958 3249                        00            .byte	0
13959 324A                        00            .byte	0
13960 324B                        00            .byte	0
13961 324C                        00            .byte	0
13962 324D                        00            .byte	0
13963                                           ! 1437  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13964 324E                        00            .byte	0
13965 324F                        00            .byte	0
13966 3250                        00            .byte	0
13967 3251                        00            .byte	0
13968 3252                        00            .byte	0
13969 3253                        FF            .byte	$FF
13970 3254                        00            .byte	0
13971 3255                        FF            .byte	$FF
13972 3256                        18            .byte	$18
13973 3257                        18            .byte	$18
13974 3258                        18            .byte	$18
13975 3259                        18            .byte	$18
13976 325A                        18            .byte	$18
13977 325B                        18            .byte	$18
13978 325C                        18            .byte	$18
13979 325D                        18            .byte	$18
13980                                           ! 1438  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13981 325E                        00            .byte	0
13982 325F                        00            .byte	0
13983 3260                        00            .byte	0
13984 3261                        00            .byte	0
13985 3262                        00            .byte	0
13986 3263                        00            .byte	0
13987 3264                        00            .byte	0
13988 3265                        FF            .byte	$FF
13989 3266                        36            .byte	$36
13990 3267                        36            .byte	$36
13991 3268                        36            .byte	$36
13992 3269                        36            .byte	$36
13993 326A                        36            .byte	$36
13994 326B                        36            .byte	$36
13995 326C                        36            .byte	$36
13996 326D                        36            .byte	$36
13997                                           ! 1439  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13998 326E                        36            .byte	$36
13999 326F                        36            .byte	$36
14000 3270                        36            .byte	$36
14001 3271                        36            .byte	$36
14002 3272                        36            .byte	$36
14003 3273                        36            .byte	$36
14004 3274                        36            .byte	$36
14005 3275                        3F            .byte	$3F
14006 3276                        00            .byte	0
14007 3277                        00            .byte	0
14008 3278                        00            .byte	0
14009 3279                        00            .byte	0
14010 327A                        00            .byte	0
14011 327B                        00            .byte	0
14012 327C                        00            .byte	0
14013 327D                        00            .byte	0
14014                                           ! 1440  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14015 327E                        18            .byte	$18
14016 327F                        18            .byte	$18
14017 3280                        18            .byte	$18
14018 3281                        18            .byte	$18
14019 3282                        18            .byte	$18
14020 3283                        1F            .byte	$1F
14021 3284                        18            .byte	$18
14022 3285                        1F            .byte	$1F
14023 3286                        00            .byte	0
14024 3287                        00            .byte	0
14025 3288                        00            .byte	0
14026 3289                        00            .byte	0
14027 328A                        00            .byte	0
14028 328B                        00            .byte	0
14029 328C                        00            .byte	0
14030 328D                        00            .byte	0
14031                                           ! 1441  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14032 328E                        00            .byte	0
14033 328F                        00            .byte	0
14034 3290                        00            .byte	0
14035 3291                        00            .byte	0
14036 3292                        00            .byte	0
14037 3293                        1F            .byte	$1F
14038 3294                        18            .byte	$18
14039 3295                        1F            .byte	$1F
14040 3296                        18            .byte	$18
14041 3297                        18            .byte	$18
14042 3298                        18            .byte	$18
14043 3299                        18            .byte	$18
14044 329A                        18            .byte	$18
14045 329B                        18            .byte	$18
14046 329C                        18            .byte	$18
14047 329D                        18            .byte	$18
14048                                           ! 1442  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14049 329E                        00            .byte	0
14050 329F                        00            .byte	0
14051 32A0                        00            .byte	0
14052 32A1                        00            .byte	0
14053 32A2                        00            .byte	0
14054 32A3                        00            .byte	0
14055 32A4                        00            .byte	0
14056 32A5                        3F            .byte	$3F
14057 32A6                        36            .byte	$36
14058 32A7                        36            .byte	$36
14059 32A8                        36            .byte	$36
14060 32A9                        36            .byte	$36
14061 32AA                        36            .byte	$36
14062 32AB                        36            .byte	$36
14063 32AC                        36            .byte	$36
14064 32AD                        36            .byte	$36
14065                                           ! 1443  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14066 32AE                        36            .byte	$36
14067 32AF                        36            .byte	$36
14068 32B0                        36            .byte	$36
14069 32B1                        36            .byte	$36
14070 32B2                        36            .byte	$36
14071 32B3                        36            .byte	$36
14072 32B4                        36            .byte	$36
14073 32B5                        FF            .byte	$FF
14074 32B6                        36            .byte	$36
14075 32B7                        36            .byte	$36
14076 32B8                        36            .byte	$36
14077 32B9                        36            .byte	$36
14078 32BA                        36            .byte	$36
14079 32BB                        36            .byte	$36
14080 32BC                        36            .byte	$36
14081 32BD                        36            .byte	$36
14082                                           ! 1444  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14083 32BE                        18            .byte	$18
14084 32BF                        18            .byte	$18
14085 32C0                        18            .byte	$18
14086 32C1                        18            .byte	$18
14087 32C2                        18            .byte	$18
14088 32C3                        FF            .byte	$FF
14089 32C4                        18            .byte	$18
14090 32C5                        FF            .byte	$FF
14091 32C6                        18            .byte	$18
14092 32C7                        18            .byte	$18
14093 32C8                        18            .byte	$18
14094 32C9                        18            .byte	$18
14095 32CA                        18            .byte	$18
14096 32CB                        18            .byte	$18
14097 32CC                        18            .byte	$18
14098 32CD                        18            .byte	$18
14099                                           ! 1445  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14100 32CE                        18            .byte	$18
14101 32CF                        18            .byte	$18
14102 32D0                        18            .byte	$18
14103 32D1                        18            .byte	$18
14104 32D2                        18            .byte	$18
14105 32D3                        18            .byte	$18
14106 32D4                        18            .byte	$18
14107 32D5                        F8            .byte	$F8
14108 32D6                        00            .byte	0
14109 32D7                        00            .byte	0
14110 32D8                        00            .byte	0
14111 32D9                        00            .byte	0
14112 32DA                        00            .byte	0
14113 32DB                        00            .byte	0
14114 32DC                        00            .byte	0
14115 32DD                        00            .byte	0
14116                                           ! 1446  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14117 32DE                        00            .byte	0
14118 32DF                        00            .byte	0
14119 32E0                        00            .byte	0
14120 32E1                        00            .byte	0
14121 32E2                        00            .byte	0
14122 32E3                        00            .byte	0
14123 32E4                        00            .byte	0
14124 32E5                        1F            .byte	$1F
14125 32E6                        18            .byte	$18
14126 32E7                        18            .byte	$18
14127 32E8                        18            .byte	$18
14128 32E9                        18            .byte	$18
14129 32EA                        18            .byte	$18
14130 32EB                        18            .byte	$18
14131 32EC                        18            .byte	$18
14132 32ED                        18            .byte	$18
14133                                           ! 1447  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14134 32EE                        FF            .byte	$FF
14135 32EF                        FF            .byte	$FF
14136 32F0                        FF            .byte	$FF
14137 32F1                        FF            .byte	$FF
14138 32F2                        FF            .byte	$FF
14139 32F3                        FF            .byte	$FF
14140 32F4                        FF            .byte	$FF
14141 32F5                        FF            .byte	$FF
14142 32F6                        FF            .byte	$FF
14143 32F7                        FF            .byte	$FF
14144 32F8                        FF            .byte	$FF
14145 32F9                        FF            .byte	$FF
14146 32FA                        FF            .byte	$FF
14147 32FB                        FF            .byte	$FF
14148 32FC                        FF            .byte	$FF
14149 32FD                        FF            .byte	$FF
14150                                           ! 1448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14151 32FE                        00            .byte	0
14152 32FF                        00            .byte	0
14153 3300                        00            .byte	0
14154 3301                        00            .byte	0
14155 3302                        00            .byte	0
14156 3303                        00            .byte	0
14157 3304                        00            .byte	0
14158 3305                        FF            .byte	$FF
14159 3306                        FF            .byte	$FF
14160 3307                        FF            .byte	$FF
14161 3308                        FF            .byte	$FF
14162 3309                        FF            .byte	$FF
14163 330A                        FF            .byte	$FF
14164 330B                        FF            .byte	$FF
14165 330C                        FF            .byte	$FF
14166 330D                        FF            .byte	$FF
14167                                           ! 1449  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14168 330E                        F0            .byte	$F0
14169 330F                        F0            .byte	$F0
14170 3310                        F0            .byte	$F0
14171 3311                        F0            .byte	$F0
14172 3312                        F0            .byte	$F0
14173 3313                        F0            .byte	$F0
14174 3314                        F0            .byte	$F0
14175 3315                        F0            .byte	$F0
14176 3316                        F0            .byte	$F0
14177 3317                        F0            .byte	$F0
14178 3318                        F0            .byte	$F0
14179 3319                        F0            .byte	$F0
14180 331A                        F0            .byte	$F0
14181 331B                        F0            .byte	$F0
14182 331C                        F0            .byte	$F0
14183 331D                        F0            .byte	$F0
14184                                           ! 1450  0x0f, 0x0f, 0x0f, 0x0f,
14185 331E                        0F            .byte	$F
14186 331F                        0F            .byte	$F
14187 3320                        0F            .byte	$F
14188                                           ! 1450  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14189 3321                        0F            .byte	$F
14190 3322                        0F            .byte	$F
14191 3323                        0F            .byte	$F
14192 3324                        0F            .byte	$F
14193 3325                        0F            .byte	$F
14194 3326                        0F            .byte	$F
14195 3327                        0F            .byte	$F
14196 3328                        0F            .byte	$F
14197 3329                        0F            .byte	$F
14198 332A                        0F            .byte	$F
14199 332B                        0F            .byte	$F
14200 332C                        0F            .byte	$F
14201 332D                        0F            .byte	$F
14202                                           ! 1451  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14203 332E                        FF            .byte	$FF
14204 332F                        FF            .byte	$FF
14205 3330                        FF            .byte	$FF
14206 3331                        FF            .byte	$FF
14207 3332                        FF            .byte	$FF
14208 3333                        FF            .byte	$FF
14209 3334                        FF            .byte	$FF
14210 3335                        00            .byte	0
14211 3336                        00            .byte	0
14212 3337                        00            .byte	0
14213 3338                        00            .byte	0
14214 3339                        00            .byte	0
14215 333A                        00            .byte	0
14216 333B                        00            .byte	0
14217 333C                        00            .byte	0
14218 333D                        00            .byte	0
14219                                           ! 1452  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14220 333E                        00            .byte	0
14221 333F                        00            .byte	0
14222 3340                        00            .byte	0
14223 3341                        00            .byte	0
14224 3342                        00            .byte	0
14225 3343                        76            .byte	$76
14226 3344                        DC            .byte	$DC
14227 3345                        D8            .byte	$D8
14228 3346                        D8            .byte	$D8
14229 3347                        D8            .byte	$D8
14230 3348                        DC            .byte	$DC
14231 3349                        76            .byte	$76
14232 334A                        00            .byte	0
14233 334B                        00            .byte	0
14234 334C                        00            .byte	0
14235 334D                        00            .byte	0
14236                                           ! 1453  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14237 334E                        00            .byte	0
14238 334F                        00            .byte	0
14239 3350                        78            .byte	$78
14240 3351                        CC            .byte	$CC
14241 3352                        CC            .byte	$CC
14242 3353                        CC            .byte	$CC
14243 3354                        D8            .byte	$D8
14244 3355                        CC            .byte	$CC
14245 3356                        C6            .byte	$C6
14246 3357                        C6            .byte	$C6
14247 3358                        C6            .byte	$C6
14248 3359                        CC            .byte	$CC
14249 335A                        00            .byte	0
14250 335B                        00            .byte	0
14251 335C                        00            .byte	0
14252 335D                        00            .byte	0
14253                                           ! 1454  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14254 335E                        00            .byte	0
14255 335F                        00            .byte	0
14256 3360                        FE            .byte	$FE
14257 3361                        C6            .byte	$C6
14258 3362                        C6            .byte	$C6
14259 3363                        C0            .byte	$C0
14260 3364                        C0            .byte	$C0
14261 3365                        C0            .byte	$C0
14262 3366                        C0            .byte	$C0
14263 3367                        C0            .byte	$C0
14264 3368                        C0            .byte	$C0
14265 3369                        C0            .byte	$C0
14266 336A                        00            .byte	0
14267 336B                        00            .byte	0
14268 336C                        00            .byte	0
14269 336D                        00            .byte	0
14270                                           ! 1455  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14271 336E                        00            .byte	0
14272 336F                        00            .byte	0
14273 3370                        00            .byte	0
14274 3371                        00            .byte	0
14275 3372                        FE            .byte	$FE
14276 3373                        6C            .byte	$6C
14277 3374                        6C            .byte	$6C
14278 3375                        6C            .byte	$6C
14279 3376                        6C            .byte	$6C
14280 3377                        6C            .byte	$6C
14281 3378                        6C            .byte	$6C
14282 3379                        6C            .byte	$6C
14283 337A                        00            .byte	0
14284 337B                        00            .byte	0
14285 337C                        00            .byte	0
14286 337D                        00            .byte	0
14287                                           ! 1456  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14288 337E                        00            .byte	0
14289 337F                        00            .byte	0
14290 3380                        00            .byte	0
14291 3381                        FE            .byte	$FE
14292 3382                        C6            .byte	$C6
14293 3383                        60            .byte	$60
14294 3384                        30            .byte	$30
14295 3385                        18            .byte	$18
14296 3386                        30            .byte	$30
14297 3387                        60            .byte	$60
14298 3388                        C6            .byte	$C6
14299 3389                        FE            .byte	$FE
14300 338A                        00            .byte	0
14301 338B                        00            .byte	0
14302 338C                        00            .byte	0
14303 338D                        00            .byte	0
14304                                           ! 1457  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14305 338E                        00            .byte	0
14306 338F                        00            .byte	0
14307 3390                        00            .byte	0
14308 3391                        00            .byte	0
14309 3392                        00            .byte	0
14310 3393                        7E            .byte	$7E
14311 3394                        D8            .byte	$D8
14312 3395                        D8            .byte	$D8
14313 3396                        D8            .byte	$D8
14314 3397                        D8            .byte	$D8
14315 3398                        D8            .byte	$D8
14316 3399                        70            .byte	$70
14317 339A                        00            .byte	0
14318 339B                        00            .byte	0
14319 339C                        00            .byte	0
14320 339D                        00            .byte	0
14321                                           ! 1458  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14322 339E                        00            .byte	0
14323 339F                        00            .byte	0
14324 33A0                        00            .byte	0
14325 33A1                        00            .byte	0
14326 33A2                        66            .byte	$66
14327 33A3                        66            .byte	$66
14328 33A4                        66            .byte	$66
14329 33A5                        66            .byte	$66
14330 33A6                        66            .byte	$66
14331 33A7                        7C            .byte	$7C
14332 33A8                        60            .byte	$60
14333 33A9                        60            .byte	$60
14334 33AA                        C0            .byte	$C0
14335 33AB                        00            .byte	0
14336 33AC                        00            .byte	0
14337 33AD                        00            .byte	0
14338                                           ! 1459  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14339 33AE                        00            .byte	0
14340 33AF                        00            .byte	0
14341 33B0                        00            .byte	0
14342 33B1                        00            .byte	0
14343 33B2                        76            .byte	$76
14344 33B3                        DC            .byte	$DC
14345 33B4                        18            .byte	$18
14346 33B5                        18            .byte	$18
14347 33B6                        18            .byte	$18
14348 33B7                        18            .byte	$18
14349 33B8                        18            .byte	$18
14350 33B9                        18            .byte	$18
14351 33BA                        00            .byte	0
14352 33BB                        00            .byte	0
14353 33BC                        00            .byte	0
14354 33BD                        00            .byte	0
14355                                           ! 1460  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14356 33BE                        00            .byte	0
14357 33BF                        00            .byte	0
14358 33C0                        00            .byte	0
14359 33C1                        7E            .byte	$7E
14360 33C2                        18            .byte	$18
14361 33C3                        3C            .byte	$3C
14362 33C4                        66            .byte	$66
14363 33C5                        66            .byte	$66
14364 33C6                        66            .byte	$66
14365 33C7                        3C            .byte	$3C
14366 33C8                        18            .byte	$18
14367 33C9                        7E            .byte	$7E
14368 33CA                        00            .byte	0
14369 33CB                        00            .byte	0
14370 33CC                        00            .byte	0
14371 33CD                        00            .byte	0
14372                                           ! 1461  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14373 33CE                        00            .byte	0
14374 33CF                        00            .byte	0
14375 33D0                        00            .byte	0
14376 33D1                        38            .byte	$38
14377 33D2                        6C            .byte	$6C
14378 33D3                        C6            .byte	$C6
14379 33D4                        C6            .byte	$C6
14380 33D5                        FE            .byte	$FE
14381 33D6                        C6            .byte	$C6
14382 33D7                        C6            .byte	$C6
14383 33D8                        6C            .byte	$6C
14384 33D9                        38            .byte	$38
14385 33DA                        00            .byte	0
14386 33DB                        00            .byte	0
14387 33DC                        00            .byte	0
14388 33DD                        00            .byte	0
14389                                           ! 1462  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14390 33DE                        00            .byte	0
14391 33DF                        00            .byte	0
14392 33E0                        38            .byte	$38
14393 33E1                        6C            .byte	$6C
14394 33E2                        C6            .byte	$C6
14395 33E3                        C6            .byte	$C6
14396 33E4                        C6            .byte	$C6
14397 33E5                        6C            .byte	$6C
14398 33E6                        6C            .byte	$6C
14399 33E7                        6C            .byte	$6C
14400 33E8                        6C            .byte	$6C
14401 33E9                        EE            .byte	$EE
14402 33EA                        00            .byte	0
14403 33EB                        00            .byte	0
14404 33EC                        00            .byte	0
14405 33ED                        00            .byte	0
14406                                           ! 1463  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14407 33EE                        00            .byte	0
14408 33EF                        00            .byte	0
14409 33F0                        1E            .byte	$1E
14410 33F1                        30            .byte	$30
14411 33F2                        18            .byte	$18
14412 33F3                        0C            .byte	$C
14413 33F4                        3E            .byte	$3E
14414 33F5                        66            .byte	$66
14415 33F6                        66            .byte	$66
14416 33F7                        66            .byte	$66
14417 33F8                        66            .byte	$66
14418 33F9                        3C            .byte	$3C
14419 33FA                        00            .byte	0
14420 33FB                        00            .byte	0
14421 33FC                        00            .byte	0
14422 33FD                        00            .byte	0
14423                                           ! 1464  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14424 33FE                        00            .byte	0
14425 33FF                        00            .byte	0
14426 3400                        00            .byte	0
14427 3401                        00            .byte	0
14428 3402                        00            .byte	0
14429 3403                        7E            .byte	$7E
14430 3404                        DB            .byte	$DB
14431 3405                        DB            .byte	$DB
14432 3406                        DB            .byte	$DB
14433 3407                        7E            .byte	$7E
14434 3408                        00            .byte	0
14435 3409                        00            .byte	0
14436 340A                        00            .byte	0
14437 340B                        00            .byte	0
14438 340C                        00            .byte	0
14439 340D                        00            .byte	0
14440                                           ! 1465  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14441 340E                        00            .byte	0
14442 340F                        00            .byte	0
14443 3410                        00            .byte	0
14444 3411                        03            .byte	3
14445 3412                        06            .byte	6
14446 3413                        7E            .byte	$7E
14447 3414                        DB            .byte	$DB
14448 3415                        DB            .byte	$DB
14449 3416                        F3            .byte	$F3
14450 3417                        7E            .byte	$7E
14451 3418                        60            .byte	$60
14452 3419                        C0            .byte	$C0
14453 341A                        00            .byte	0
14454 341B                        00            .byte	0
14455 341C                        00            .byte	0
14456 341D                        00            .byte	0
14457                                           ! 1466  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14458 341E                        00            .byte	0
14459 341F                        00            .byte	0
14460 3420                        1C            .byte	$1C
14461 3421                        30            .byte	$30
14462 3422                        60            .byte	$60
14463 3423                        60            .byte	$60
14464 3424                        7C            .byte	$7C
14465 3425                        60            .byte	$60
14466 3426                        60            .byte	$60
14467 3427                        60            .byte	$60
14468 3428                        30            .byte	$30
14469 3429                        1C            .byte	$1C
14470 342A                        00            .byte	0
14471 342B                        00            .byte	0
14472 342C                        00            .byte	0
14473 342D                        00            .byte	0
14474                                           ! 1467  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14475 342E                        00            .byte	0
14476 342F                        00            .byte	0
14477 3430                        00            .byte	0
14478 3431                        7C            .byte	$7C
14479 3432                        C6            .byte	$C6
14480 3433                        C6            .byte	$C6
14481 3434                        C6            .byte	$C6
14482 3435                        C6            .byte	$C6
14483 3436                        C6            .byte	$C6
14484 3437                        C6            .byte	$C6
14485 3438                        C6            .byte	$C6
14486 3439                        C6            .byte	$C6
14487 343A                        00            .byte	0
14488 343B                        00            .byte	0
14489 343C                        00            .byte	0
14490 343D                        00            .byte	0
14491                                           ! 1468  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14492 343E                        00            .byte	0
14493 343F                        00            .byte	0
14494 3440                        00            .byte	0
14495 3441                        00            .byte	0
14496 3442                        FE            .byte	$FE
14497 3443                        00            .byte	0
14498 3444                        00            .byte	0
14499 3445                        FE            .byte	$FE
14500 3446                        00            .byte	0
14501 3447                        00            .byte	0
14502 3448                        FE            .byte	$FE
14503 3449                        00            .byte	0
14504 344A                        00            .byte	0
14505 344B                        00            .byte	0
14506 344C                        00            .byte	0
14507 344D                        00            .byte	0
14508                                           ! 1469  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14509 344E                        00            .byte	0
14510 344F                        00            .byte	0
14511 3450                        00            .byte	0
14512 3451                        00            .byte	0
14513 3452                        18            .byte	$18
14514 3453                        18            .byte	$18
14515 3454                        7E            .byte	$7E
14516 3455                        18            .byte	$18
14517 3456                        18            .byte	$18
14518 3457                        00            .byte	0
14519 3458                        00            .byte	0
14520 3459                        FF            .byte	$FF
14521 345A                        00            .byte	0
14522 345B                        00            .byte	0
14523 345C                        00            .byte	0
14524 345D                        00            .byte	0
14525                                           ! 1470  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14526 345E                        00            .byte	0
14527 345F                        00            .byte	0
14528 3460                        00            .byte	0
14529 3461                        30            .byte	$30
14530 3462                        18            .byte	$18
14531 3463                        0C            .byte	$C
14532 3464                        06            .byte	6
14533 3465                        0C            .byte	$C
14534 3466                        18            .byte	$18
14535 3467                        30            .byte	$30
14536 3468                        00            .byte	0
14537 3469                        7E            .byte	$7E
14538 346A                        00            .byte	0
14539 346B                        00            .byte	0
14540 346C                        00            .byte	0
14541 346D                        00            .byte	0
14542                                           ! 1471  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30
14543 346E                        00            .byte	0
14544 346F                        00            .byte	0
14545 3470                        00            .byte	0
14546 3471                        0C            .byte	$C
14547 3472                        18            .byte	$18
14548                                           ! 1471 , 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14549 3473                        30            .byte	$30
14550 3474                        60            .byte	$60
14551 3475                        30            .byte	$30
14552 3476                        18            .byte	$18
14553 3477                        0C            .byte	$C
14554 3478                        00            .byte	0
14555 3479                        7E            .byte	$7E
14556 347A                        00            .byte	0
14557 347B                        00            .byte	0
14558 347C                        00            .byte	0
14559 347D                        00            .byte	0
14560                                           ! 1472  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14561 347E                        00            .byte	0
14562 347F                        00            .byte	0
14563 3480                        0E            .byte	$E
14564 3481                        1B            .byte	$1B
14565 3482                        1B            .byte	$1B
14566 3483                        18            .byte	$18
14567 3484                        18            .byte	$18
14568 3485                        18            .byte	$18
14569 3486                        18            .byte	$18
14570 3487                        18            .byte	$18
14571 3488                        18            .byte	$18
14572 3489                        18            .byte	$18
14573 348A                        18            .byte	$18
14574 348B                        18            .byte	$18
14575 348C                        18            .byte	$18
14576 348D                        18            .byte	$18
14577                                           ! 1473  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14578 348E                        18            .byte	$18
14579 348F                        18            .byte	$18
14580 3490                        18            .byte	$18
14581 3491                        18            .byte	$18
14582 3492                        18            .byte	$18
14583 3493                        18            .byte	$18
14584 3494                        18            .byte	$18
14585 3495                        18            .byte	$18
14586 3496                        D8            .byte	$D8
14587 3497                        D8            .byte	$D8
14588 3498                        D8            .byte	$D8
14589 3499                        70            .byte	$70
14590 349A                        00            .byte	0
14591 349B                        00            .byte	0
14592 349C                        00            .byte	0
14593 349D                        00            .byte	0
14594                                           ! 1474  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14595 349E                        00            .byte	0
14596 349F                        00            .byte	0
14597 34A0                        00            .byte	0
14598 34A1                        00            .byte	0
14599 34A2                        18            .byte	$18
14600 34A3                        18            .byte	$18
14601 34A4                        00            .byte	0
14602 34A5                        7E            .byte	$7E
14603 34A6                        00            .byte	0
14604 34A7                        18            .byte	$18
14605 34A8                        18            .byte	$18
14606 34A9                        00            .byte	0
14607 34AA                        00            .byte	0
14608 34AB                        00            .byte	0
14609 34AC                        00            .byte	0
14610 34AD                        00            .byte	0
14611                                           ! 1475  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14612 34AE                        00            .byte	0
14613 34AF                        00            .byte	0
14614 34B0                        00            .byte	0
14615 34B1                        00            .byte	0
14616 34B2                        00            .byte	0
14617 34B3                        76            .byte	$76
14618 34B4                        DC            .byte	$DC
14619 34B5                        00            .byte	0
14620 34B6                        76            .byte	$76
14621 34B7                        DC            .byte	$DC
14622 34B8                        00            .byte	0
14623 34B9                        00            .byte	0
14624 34BA                        00            .byte	0
14625 34BB                        00            .byte	0
14626 34BC                        00            .byte	0
14627 34BD                        00            .byte	0
14628                                           ! 1476  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14629 34BE                        00            .byte	0
14630 34BF                        38            .byte	$38
14631 34C0                        6C            .byte	$6C
14632 34C1                        6C            .byte	$6C
14633 34C2                        38            .byte	$38
14634 34C3                        00            .byte	0
14635 34C4                        00            .byte	0
14636 34C5                        00            .byte	0
14637 34C6                        00            .byte	0
14638 34C7                        00            .byte	0
14639 34C8                        00            .byte	0
14640 34C9                        00            .byte	0
14641 34CA                        00            .byte	0
14642 34CB                        00            .byte	0
14643 34CC                        00            .byte	0
14644 34CD                        00            .byte	0
14645                                           ! 1477  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14646 34CE                        00            .byte	0
14647 34CF                        00            .byte	0
14648 34D0                        00            .byte	0
14649 34D1                        00            .byte	0
14650 34D2                        00            .byte	0
14651 34D3                        00            .byte	0
14652 34D4                        00            .byte	0
14653 34D5                        18            .byte	$18
14654 34D6                        18            .byte	$18
14655 34D7                        00            .byte	0
14656 34D8                        00            .byte	0
14657 34D9                        00            .byte	0
14658 34DA                        00            .byte	0
14659 34DB                        00            .byte	0
14660 34DC                        00            .byte	0
14661 34DD                        00            .byte	0
14662                                           ! 1478  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14663 34DE                        00            .byte	0
14664 34DF                        00            .byte	0
14665 34E0                        00            .byte	0
14666 34E1                        00            .byte	0
14667 34E2                        00            .byte	0
14668 34E3                        00            .byte	0
14669 34E4                        00            .byte	0
14670 34E5                        00            .byte	0
14671 34E6                        18            .byte	$18
14672 34E7                        00            .byte	0
14673 34E8                        00            .byte	0
14674 34E9                        00            .byte	0
14675 34EA                        00            .byte	0
14676 34EB                        00            .byte	0
14677 34EC                        00            .byte	0
14678 34ED                        00            .byte	0
14679                                           ! 1479  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14680 34EE                        00            .byte	0
14681 34EF                        0F            .byte	$F
14682 34F0                        0C            .byte	$C
14683 34F1                        0C            .byte	$C
14684 34F2                        0C            .byte	$C
14685 34F3                        0C            .byte	$C
14686 34F4                        0C            .byte	$C
14687 34F5                        EC            .byte	$EC
14688 34F6                        6C            .byte	$6C
14689 34F7                        6C            .byte	$6C
14690 34F8                        3C            .byte	$3C
14691 34F9                        1C            .byte	$1C
14692 34FA                        00            .byte	0
14693 34FB                        00            .byte	0
14694 34FC                        00            .byte	0
14695 34FD                        00            .byte	0
14696                                           ! 1480  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14697 34FE                        00            .byte	0
14698 34FF                        D8            .byte	$D8
14699 3500                        6C            .byte	$6C
14700 3501                        6C            .byte	$6C
14701 3502                        6C            .byte	$6C
14702 3503                        6C            .byte	$6C
14703 3504                        6C            .byte	$6C
14704 3505                        00            .byte	0
14705 3506                        00            .byte	0
14706 3507                        00            .byte	0
14707 3508                        00            .byte	0
14708 3509                        00            .byte	0
14709 350A                        00            .byte	0
14710 350B                        00            .byte	0
14711 350C                        00            .byte	0
14712 350D                        00            .byte	0
14713                                           ! 1481  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14714 350E                        00            .byte	0
14715 350F                        70            .byte	$70
14716 3510                        D8            .byte	$D8
14717 3511                        30            .byte	$30
14718 3512                        60            .byte	$60
14719 3513                        C8            .byte	$C8
14720 3514                        F8            .byte	$F8
14721 3515                        00            .byte	0
14722 3516                        00            .byte	0
14723 3517                        00            .byte	0
14724 3518                        00            .byte	0
14725 3519                        00            .byte	0
14726 351A                        00            .byte	0
14727 351B                        00            .byte	0
14728 351C                        00            .byte	0
14729 351D                        00            .byte	0
14730                                           ! 1482  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
14731 351E                        00            .byte	0
14732 351F                        00            .byte	0
14733 3520                        00            .byte	0
14734 3521                        00            .byte	0
14735 3522                        7C            .byte	$7C
14736 3523                        7C            .byte	$7C
14737 3524                        7C            .byte	$7C
14738 3525                        7C            .byte	$7C
14739 3526                        7C            .byte	$7C
14740 3527                        7C            .byte	$7C
14741 3528                        7C            .byte	$7C
14742 3529                        00            .byte	0
14743 352A                        00            .byte	0
14744 352B                        00            .byte	0
14745 352C                        00            .byte	0
14746 352D                        00            .byte	0
14747                                           ! 1483  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
14748 352E                        00            .byte	0
14749 352F                        00            .byte	0
14750 3530                        00            .byte	0
14751 3531                        00            .byte	0
14752 3532                        00            .byte	0
14753 3533                        00            .byte	0
14754 3534                        00            .byte	0
14755 3535                        00            .byte	0
14756 3536                        00            .byte	0
14757 3537                        00            .byte	0
14758 3538                        00            .byte	0
14759 3539                        00            .byte	0
14760 353A                        00            .byte	0
14761 353B                        00            .byte	0
14762 353C                        00            .byte	0
14763                                           ! 1484 };
14764 353D                        00            .byte	0
14765                                           !BCC_EOS
14766                                           ! 1485 static Bit8u vgafont14alt[1]={0x00};
14767                       0000353E            _vgafont14alt:
14768 353E                        00            .byte	0
14769                                           !BCC_EOS
14770                                           ! 1486 static Bit8u vgafont16alt[1]={0x00};
14771                       0000353F            _vgafont16alt:
14772 353F                        00            .byte	0
14773                                           !BCC_EOS
14774                                           ! 1487 #asm
14775                                           !BCC_ASM
14776                       00003540            init_vga_card:
14777                                           ;; switch to color mode and enable CPU access 480 lines
14778 3540           BA                   03C2    mov dx, #0x3C2
14779 3543           B0                     C3    mov al, #0xC3
14780 3545           EE                           outb dx,al
14781                                           ;; more than 64k 3C4/04
14782 3546           BA                   03C4    mov dx, #0x3C4
14783 3549           B0                     04    mov al, #0x04
14784 354B           EE                           outb dx,al
14785 354C           BA                   03C5    mov dx, #0x3C5
14786 354F           B0                     02    mov al, #0x02
14787 3551           EE                           outb dx,al
14788 3552           BB                   355C    mov bx, #msg_vga_init
14789 3555           53                           push bx
14790 3556           E8         45D7              call _printf
14791 3559           44                           inc sp
14792 355A           44                           inc sp
14793 355B           C3                           ret
14794                       0000355C            msg_vga_init:
14795 355C                        56            .ascii "VGABios $Id: vgabios.c,v 1.67 2008/01/27 09:44:12 vruppert Exp $"
14796 359C                        0D            .byte 0x0d,0x0a,0x00
14797                                           ! 1509 endasm
14798                                           !BCC_ENDASM
14799                                           ! 1510 #asm
14800                                           !BCC_ASM
14801                       0000359F            init_bios_area:
14802 359F           1E                           push ds
14803 35A0           B8                   0040    mov ax, # 0x40
14804 35A3           8ED8                         mov ds, ax
14805                                           ;; init detected hardware BIOS Area
14806 35A5           BB                   0010    mov bx, # 0x10
14807 35A8           8B07                         mov ax, [bx]
14808 35AA           25                   FFCF    and ax, #0xffcf
14809                                           ;; set 80x25 color (not clear from RBIL but usual)
14810 35AD           0D                   0020    or ax, #0x0020
14811 35B0           8907                         mov [bx], ax
14812                                           ;; Just for the first int10 find its children
14813                                           ;; the default char height
14814 35B2           BB                   0085    mov bx, # 0x85
14815 35B5           B0                     10    mov al, #0x10
14816 35B7           8807                         mov [bx], al
14817                                           ;; Clear the screen
14818 35B9           BB                   0087    mov bx, # 0x87
14819 35BC           B0                     60    mov al, #0x60
14820 35BE           8807                         mov [bx], al
14821                                           ;; Set the basic screen we have
14822 35C0           BB                   0088    mov bx, # 0x88
14823 35C3           B0                     F9    mov al, #0xf9
14824 35C5           8807                         mov [bx], al
14825                                           ;; Set the basic modeset options
14826 35C7           BB                   0089    mov bx, # 0x89
14827 35CA           B0                     51    mov al, #0x51
14828 35CC           8807                         mov [bx], al
14829                                           ;; Set the default MSR
14830 35CE           BB                   0065    mov bx, # 0x65
14831 35D1           B0                     09    mov al, #0x09
14832 35D3           8807                         mov [bx], al
14833 35D5           1F                           pop ds
14834 35D6           C3                           ret
14835                       000035D7            _video_save_pointer_table:
14836 35D7                      026E              .word _video_param_table
14837 35D9                      C000              .word 0xc000
14838 35DB                      0000              .word 0
14839 35DD                      0000              .word 0
14840 35DF                      0000              .word 0
14841 35E1                      0000              .word 0
14842 35E3                      0000              .word 0
14843 35E5                      0000              .word 0
14844 35E7                      0000              .word 0
14845 35E9                      0000              .word 0
14846 35EB                      0000              .word 0
14847 35ED                      0000              .word 0
14848 35EF                      0000              .word 0
14849 35F1                      0000              .word 0
14850                                           ! 1560 endasm
14851                                           !BCC_ENDASM
14852                                           ! 1561 static void display_splash_screen()
14853                                           ! 1562 {
14854                                           
14855                       000035F3            _display_splash_screen:
14856                                           ! 1563 }
14857 35F3           C3                         ret
14858                                           ! 1564 static void display_info()
14859                                           ! 1565 {
14860                       000035F4            _display_info:
14861                                           ! 1566 #asm
14862                                           !BCC_ASM
14863 35F4           B8                   C000   mov ax,#0xc000
14864 35F7           8ED8                        mov ds,ax
14865 35F9           BE                   0022   mov si,#vgabios_name
14866 35FC           E8         0013             call _display_string
14867 35FF           BE                   003E   mov si,#vgabios_version
14868 3602           E8         000D             call _display_string
14869                                            ;;mov si,#vgabios_copyright
14870                                            ;;call _display_string
14871                                            ;;mov si,#crlf
14872                                            ;;call _display_string
14873 3605           BE                   0084   mov si,#vgabios_license
14874 3608           E8         0007             call _display_string
14875 360B           BE                   00B9   mov si,#vgabios_website
14876 360E           E8         0001             call _display_string
14877                                           ! 1581 endasm
14878                                           !BCC_ENDASM
14879                                           ! 1582 }
14880 3611           C3                         ret
14881                                           ! 1583 static void display_string()
14882                                           ! 1584 {
14883                       00003612            _display_string:
14884                                           ! 1585 #asm
14885                                           !BCC_ASM
14886 3612           8CD8                        mov ax,ds
14887 3614           8EC0                        mov es,ax
14888 3616           89F7                        mov di,si
14889 3618           31C9                        xor cx,cx
14890 361A           F7D1                        not cx
14891 361C           30C0                        xor al,al
14892 361E           FC                          cld
14893 361F           F2                          repne
14894 3620           AE                           scasb
14895 3621           F7D1                        not cx
14896 3623           49                          dec cx
14897 3624           51                          push cx
14898 3625           B8                   0300   mov ax,#0x0300
14899 3628           BB                   0000   mov bx,#0x0000
14900 362B           CD                     10   int #0x10
14901 362D           59                          pop cx
14902 362E           B8                   1301   mov ax,#0x1301
14903 3631           BB                   000B   mov bx,#0x000b
14904 3634           89F5                        mov bp,si
14905 3636           CD                     10   int #0x10
14906                                           ! 1606 endasm
14907                                           !BCC_ENDASM
14908                                           ! 1607 }
14909 3638           C3                         ret
14910                                           ! 1608 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
14911                                           ! 1609   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
14912                       00003639            _int10_func:
14913                                           !BCC_EOS
14914                                           ! 1610 {
14915                                           ! 1611  switch(( AX >> 8 ))
14916 3639           55                         push	bp
14917 363A           89E5                       mov	bp,sp
14918                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
14919 363C           8B46         12            mov	ax,$12[bp]
14920 363F           88E0                       mov	al,ah
14921 3641           30E4                       xor	ah,ah
14922                                           ! 1612   {
14923 3643           E9         0425            br 	.3
14924                                           ! 1613    case 0x00:
14925                                           ! 1614      biosfn_set_video_mode(( AX & 0x00ff ));
14926                       00003646            .4:
14927                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14928 3646           8A46         12            mov	al,$12[bp]
14929                                           ! Debug: list unsigned char = al+0 (used reg = )
14930 3649           30E4                       xor	ah,ah
14931 364B           50                         push	ax
14932                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
14933 364C           E8         046B            call	_biosfn_set_video_mode
14934 364F           44                         inc	sp
14935 3650           44                         inc	sp
14936                                           !BCC_EOS
14937                                           ! 1615      switch(( AX & 0x00ff )&0x7F)
14938                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14939 3651           8A46         12            mov	al,$12[bp]
14940                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
14941 3654           24                     7F  and	al,*$7F
14942                                           ! 1616       {case 6:
14943 3656           EB           24            jmp .7
14944                                           ! 1617         AX = ((AX & 0xff00) | (0x3F));
14945                       00003658            .8:
14946                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14947 3658           8B46         12            mov	ax,$12[bp]
14948 365B           30C0                       xor	al,al
14949                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
14950 365D           0C                     3F  or	al,*$3F
14951                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14952 365F           8946         12            mov	$12[bp],ax
14953                                           !BCC_EOS
14954                                           ! 1618         break;
14955 3662           EB           3D            jmp .5
14956                                           !BCC_EOS
14957                                           ! 1619        case 0:
14958                                           ! 1620        case 1:
14959                       00003664            .9:
14960                                           ! 1621        case 2:
14961                       00003664            .A:
14962                                           ! 1622        case 3:
14963                       00003664            .B:
14964                                           ! 1623        case 4:
14965                       00003664            .C:
14966                                           ! 1624        case 5:
14967                       00003664            .D:
14968                                           ! 1625        case 7:
14969                       00003664            .E:
14970                                           ! 1626         AX = ((AX & 0xff00) | (0x30));
14971                       00003664            .F:
14972                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14973 3664           8B46         12            mov	ax,$12[bp]
14974 3667           30C0                       xor	al,al
14975                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
14976 3669           0C                     30  or	al,*$30
14977                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14978 366B           8946         12            mov	$12[bp],ax
14979                                           !BCC_EOS
14980                                           ! 1627         break;
14981 366E           EB           31            jmp .5
14982                                           !BCC_EOS
14983                                           ! 1628       default:
14984                                           ! 1629         AX = ((AX & 0xff00) | (0x20));
14985                       00003670            .10:
14986                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14987 3670           8B46         12            mov	ax,$12[bp]
14988 3673           30C0                       xor	al,al
14989                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
14990 3675           0C                     20  or	al,*$20
14991                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14992 3677           8946         12            mov	$12[bp],ax
14993                                           !BCC_EOS
14994                                           ! 1630       }
14995                                           ! 1631      break;
14996 367A           EB           25            jmp .5
14997                       0000367C            .7:
14998 367C           2C                     00  sub	al,*0
14999 367E           72           F0            jb 	.10
15000 3680           3C                     07  cmp	al,*7
15001 3682           77           1B            ja  	.11
15002 3684           30E4                       xor	ah,ah
15003 3686           D1E0                       shl	ax,*1
15004 3688           89C3                       mov	bx,ax
15005 368A           2E                         seg	cs
15006 368B           FFA7       368F            br	.12[bx]
15007                       0000368F            .12:
15008 368F                      3664            .word	.9
15009 3691                      3664            .word	.A
15010 3693                      3664            .word	.B
15011 3695                      3664            .word	.C
15012 3697                      3664            .word	.D
15013 3699                      3664            .word	.E
15014 369B                      3658            .word	.8
15015 369D                      3664            .word	.F
15016                       0000369F            .11:
15017 369F           EB           CF            jmp	.10
15018                       000036A1            .5:
15019 36A1           E9         0414            br 	.1
15020                                           !BCC_EOS
15021                                           ! 1632    case 0x01:
15022                                           ! 1633      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15023                       000036A4            .13:
15024                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15025 36A4           8A46         10            mov	al,$10[bp]
15026                                           ! Debug: list unsigned char = al+0 (used reg = )
15027 36A7           30E4                       xor	ah,ah
15028 36A9           50                         push	ax
15029                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15030 36AA           8B46         10            mov	ax,$10[bp]
15031 36AD           88E0                       mov	al,ah
15032 36AF           30E4                       xor	ah,ah
15033                                           ! Debug: list unsigned int = ax+0 (used reg = )
15034 36B1           50                         push	ax
15035                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15036 36B2           E8         0A8D            call	_biosfn_set_cursor_shape
15037 36B5           83C4                   04  add	sp,*4
15038                                           !BCC_EOS
15039                                           ! 1634      break;
15040 36B8           E9         03FD            br 	.1
15041                                           !BCC_EOS
15042                                           ! 1635    case 0x02:
15043                                           ! 1636      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15044                       000036BB            .14:
15045                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15046 36BB           FF76         0E            push	$E[bp]
15047                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15048 36BE           8B46         0C            mov	ax,$C[bp]
15049 36C1           88E0                       mov	al,ah
15050 36C3           30E4                       xor	ah,ah
15051                                           ! Debug: list unsigned int = ax+0 (used reg = )
15052 36C5           50                         push	ax
15053                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15054 36C6           E8         0B94            call	_biosfn_set_cursor_pos
15055 36C9           83C4                   04  add	sp,*4
15056                                           !BCC_EOS
15057                                           ! 1637      break;
15058 36CC           E9         03E9            br 	.1
15059                                           !BCC_EOS
15060                                           ! 1638    case 0x03:
15061                                           ! 1639      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15062                       000036CF            .15:
15063                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15064 36CF           8D5E         0E            lea	bx,$E[bp]
15065 36D2           53                         push	bx
15066                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15067 36D3           8D5E         10            lea	bx,$10[bp]
15068 36D6           53                         push	bx
15069                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15070 36D7           8B46         0C            mov	ax,$C[bp]
15071 36DA           88E0                       mov	al,ah
15072 36DC           30E4                       xor	ah,ah
15073                                           ! Debug: list unsigned int = ax+0 (used reg = )
15074 36DE           50                         push	ax
15075                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15076 36DF           E8         0C7B            call	_biosfn_get_cursor_pos
15077 36E2           83C4                   06  add	sp,*6
15078                                           !BCC_EOS
15079                                           ! 1640      break;
15080 36E5           E9         03D0            br 	.1
15081                                           !BCC_EOS
15082                                           ! 1641    case 0x04:
15083                                           ! 1642      AX=0x00;
15084                       000036E8            .16:
15085                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15086 36E8           31C0                       xor	ax,ax
15087 36EA           8946         12            mov	$12[bp],ax
15088                                           !BCC_EOS
15089                                           ! 1643      BX=0x00;
15090                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15091 36ED           31C0                       xor	ax,ax
15092 36EF           8946         0C            mov	$C[bp],ax
15093                                           !BCC_EOS
15094                                           ! 1644      CX=0x00;
15095                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15096 36F2           31C0                       xor	ax,ax
15097 36F4           8946         10            mov	$10[bp],ax
15098                                           !BCC_EOS
15099                                           ! 1645      DX=0x00;
15100                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15101 36F7           31C0                       xor	ax,ax
15102 36F9           8946         0E            mov	$E[bp],ax
15103                                           !BCC_EOS
15104                                           ! 1646      br
15105                                           ! 1646 eak;
15106 36FC           E9         03B9            br 	.1
15107                                           !BCC_EOS
15108                                           ! 1647    case 0x05:
15109                                           ! 1648      biosfn_set_active_page(( AX & 0x00ff ));
15110                       000036FF            .17:
15111                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15112 36FF           8A46         12            mov	al,$12[bp]
15113                                           ! Debug: list unsigned char = al+0 (used reg = )
15114 3702           30E4                       xor	ah,ah
15115 3704           50                         push	ax
15116                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15117 3705           E8         0CCA            call	_biosfn_set_active_page
15118 3708           44                         inc	sp
15119 3709           44                         inc	sp
15120                                           !BCC_EOS
15121                                           ! 1649      break;
15122 370A           E9         03AB            br 	.1
15123                                           !BCC_EOS
15124                                           ! 1650    case 0x06:
15125                                           ! 1651      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15126                       0000370D            .18:
15127                                           ! Debug: list int = const 1 (used reg = )
15128 370D           B8                   0001  mov	ax,*1
15129 3710           50                         push	ax
15130                                           ! Debug: list int = const $FF (used reg = )
15131 3711           B8                   00FF  mov	ax,#$FF
15132 3714           50                         push	ax
15133                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15134 3715           8A46         0E            mov	al,$E[bp]
15135                                           ! Debug: list unsigned char = al+0 (used reg = )
15136 3718           30E4                       xor	ah,ah
15137 371A           50                         push	ax
15138                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15139 371B           8B46         0E            mov	ax,$E[bp]
15140 371E           88E0                       mov	al,ah
15141 3720           30E4                       xor	ah,ah
15142                                           ! Debug: list unsigned int = ax+0 (used reg = )
15143 3722           50                         push	ax
15144                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15145 3723           8A46         10            mov	al,$10[bp]
15146                                           ! Debug: list unsigned char = al+0 (used reg = )
15147 3726           30E4                       xor	ah,ah
15148 3728           50                         push	ax
15149                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15150 3729           8B46         10            mov	ax,$10[bp]
15151 372C           88E0                       mov	al,ah
15152 372E           30E4                       xor	ah,ah
15153                                           ! Debug: list unsigned int = ax+0 (used reg = )
15154 3730           50                         push	ax
15155                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15156 3731           8B46         0C            mov	ax,$C[bp]
15157 3734           88E0                       mov	al,ah
15158 3736           30E4                       xor	ah,ah
15159                                           ! Debug: list unsigned int = ax+0 (used reg = )
15160 3738           50                         push	ax
15161                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15162 3739           8A46         12            mov	al,$12[bp]
15163                                           ! Debug: list unsigned char = al+0 (used reg = )
15164 373C           30E4                       xor	ah,ah
15165 373E           50                         push	ax
15166                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15167 373F           E8         1113            call	_biosfn_scroll
15168 3742           83C4                   10  add	sp,*$10
15169                                           !BCC_EOS
15170                                           ! 1652      break;
15171 3745           E9         0370            br 	.1
15172                                           !BCC_EOS
15173                                           ! 1653    case 0x07:
15174                                           ! 1654      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15175                       00003748            .19:
15176                                           ! Debug: list int = const 0 (used reg = )
15177 3748           31C0                       xor	ax,ax
15178 374A           50                         push	ax
15179                                           ! Debug: list int = const $FF (used reg = )
15180 374B           B8                   00FF  mov	ax,#$FF
15181 374E           50                         push	ax
15182                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15183 374F           8A46         0E            mov	al,$E[bp]
15184                                           ! Debug: list unsigned char = al+0 (used reg = )
15185 3752           30E4                       xor	ah,ah
15186 3754           50                         push	ax
15187                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15188 3755           8B46         0E            mov	ax,$E[bp]
15189 3758           88E0                       mov	al,ah
15190 375A           30E4                       xor	ah,ah
15191                                           ! Debug: list unsigned int = ax+0 (used reg = )
15192 375C           50                         push	ax
15193                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15194 375D           8A46         10            mov	al,$10[bp]
15195                                           ! Debug: list unsigned char = al+0 (used reg = )
15196 3760           30E4                       xor	ah,ah
15197 3762           50                         push	ax
15198                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15199 3763           8B46         10            mov	ax,$10[bp]
15200 3766           88E0                       mov	al,ah
15201 3768           30E4                       xor	ah,ah
15202                                           ! Debug: list unsigned int = ax+0 (used reg = )
15203 376A           50                         push	ax
15204                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15205 376B           8B46         0C            mov	ax,$C[bp]
15206 376E           88E0                       mov	al,ah
15207 3770           30E4                       xor	ah,ah
15208                                           ! Debug: list unsigned int = ax+0 (used reg = )
15209 3772           50                         push	ax
15210                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15211 3773           8A46         12            mov	al,$12[bp]
15212                                           ! Debug: list unsigned char = al+0 (used reg = )
15213 3776           30E4                       xor	ah,ah
15214 3778           50                         push	ax
15215                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15216 3779           E8         10D9            call	_biosfn_scroll
15217 377C           83C4                   10  add	sp,*$10
15218                                           !BCC_EOS
15219                                           ! 1655      break;
15220 377F           E9         0336            br 	.1
15221                                           !BCC_EOS
15222                                           ! 1656    case 0x08:
15223                                           ! 1657      biosfn_read_char_attr(( BX >> 8 ),&AX);
15224                       00003782            .1A:
15225                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15226 3782           8D5E         12            lea	bx,$12[bp]
15227 3785           53                         push	bx
15228                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15229 3786           8B46         0C            mov	ax,$C[bp]
15230 3789           88E0                       mov	al,ah
15231 378B           30E4                       xor	ah,ah
15232                                           ! Debug: list unsigned int = ax+0 (used reg = )
15233 378D           50                         push	ax
15234                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15235 378E           E8         17CA            call	_biosfn_read_char_attr
15236 3791           83C4                   04  add	sp,*4
15237                                           !BCC_EOS
15238                                           ! 1658      break;
15239 3794           E9         0321            br 	.1
15240                                           !BCC_EOS
15241                                           ! 1659    case 0x09:
15242                                           ! 1660      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15243                       00003797            .1B:
15244                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15245 3797           FF76         10            push	$10[bp]
15246                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15247 379A           8A46         0C            mov	al,$C[bp]
15248                                           ! Debug: list unsigned char = al+0 (used reg = )
15249 379D           30E4                       xor	ah,ah
15250 379F           50                         push	ax
15251                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15252 37A0           8B46         0C            mov	ax,$C[bp]
15253 37A3           88E0                       mov	al,ah
15254 37A5           30E4                       xor	ah,ah
15255                                           ! Debug: list unsigned int = ax+0 (used reg = )
15256 37A7           50                         push	ax
15257                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15258 37A8           8A46         12            mov	al,$12[bp]
15259                                           ! Debug: list unsigned char = al+0 (used reg = )
15260 37AB           30E4                       xor	ah,ah
15261 37AD           50                         push	ax
15262                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15263 37AE           E8         1CF1            call	_biosfn_write_char_attr
15264 37B1           83C4                   08  add	sp,*8
15265                                           !BCC_EOS
15266                                           ! 1661      break;
15267 37B4           E9         0301            br 	.1
15268                                           !BCC_EOS
15269                                           ! 1662    case 0x0A:
15270                                           ! 1663      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15271                       000037B7            .1C:
15272                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15273 37B7           FF76         10            push	$10[bp]
15274                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15275 37BA           8A46         0C            mov	al,$C[bp]
15276                                           ! Debug: list unsigned char = al+0 (used reg = )
15277 37BD           30E4                       xor	ah,ah
15278 37BF           50                         push	ax
15279                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15280 37C0           8B46         0C            mov	ax,$C[bp]
15281 37C3           88E0                       mov	al,ah
15282 37C5           30E4                       xor	ah,ah
15283                                           ! Debug: list unsigned int = ax+0 (used reg = )
15284 37C7           50                         push	ax
15285                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15286 37C8           8A46         12            mov	al,$12[bp]
15287                                           ! Debug: list unsigned char = al+0 (used reg = )
15288 37CB           30E4                       xor	ah,ah
15289 37CD           50                         push	ax
15290                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15291 37CE           E8         1EC3            call	_biosfn_write_char_only
15292 37D1           83C4                   08  add	sp,*8
15293                                           !BCC_EOS
15294                                           ! 1664      break;
15295 37D4           E9         02E1            br 	.1
15296                                           !BCC_EOS
15297                                           ! 1665    case 0x0C:
15298                                           ! 1666      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15299                       000037D7            .1D:
15300                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15301 37D7           FF76         0E            push	$E[bp]
15302                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15303 37DA           FF76         10            push	$10[bp]
15304                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15305 37DD           8A46         12            mov	al,$12[bp]
15306                                           ! Debug: list unsigned char = al+0 (used reg = )
15307 37E0           30E4                       xor	ah,ah
15308 37E2           50                         push	ax
15309                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15310 37E3           8B46         0C            mov	ax,$C[bp]
15311 37E6           88E0                       mov	al,ah
15312 37E8           30E4                       xor	ah,ah
15313                                           ! Debug: list unsigned int = ax+0 (used reg = )
15314 37EA           50                         push	ax
15315                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15316 37EB           E8         2114            call	_biosfn_write_pixel
15317 37EE           83C4                   08  add	sp,*8
15318                                           !BCC_EOS
15319                                           ! 1667      break;
15320 37F1           E9         02C4            br 	.1
15321                                           !BCC_EOS
15322                                           ! 1668    case 0x0D:
15323                                           ! 1669      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15324                       000037F4            .1E:
15325                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15326 37F4           8D5E         12            lea	bx,$12[bp]
15327 37F7           53                         push	bx
15328                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15329 37F8           FF76         0E            push	$E[bp]
15330                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15331 37FB           FF76         10            push	$10[bp]
15332                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15333 37FE           8B46         0C            mov	ax,$C[bp]
15334 3801           88E0                       mov	al,ah
15335 3803           30E4                       xor	ah,ah
15336                                           ! Debug: list unsigned int = ax+0 (used reg = )
15337 3805           50                         push	ax
15338                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15339 3806           E8         2395            call	_biosfn_read_pixel
15340 3809           83C4                   08  add	sp,*8
15341                                           !BCC_EOS
15342                                           ! 1670      break;
15343 380C           E9         02A9            br 	.1
15344                                           !BCC_EOS
15345                                           ! 1671    case 0x0E:
15346                                           ! 1672      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15347                       0000380F            .1F:
15348                                           ! Debug: list int = const 2 (used reg = )
15349 380F           B8                   0002  mov	ax,*2
15350 3812           50                         push	ax
15351                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15352 3813           8A46         0C            mov	al,$C[bp]
15353                                           ! Debug: list unsigned char = al+0 (used reg = )
15354 3816           30E4                       xor	ah,ah
15355 3818           50                         push	ax
15356                                           ! Debug: list int = const $FF (used reg = )
15357 3819           B8                   00FF  mov	ax,#$FF
15358 381C           50                         push	ax
15359                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15360 381D           8A46         12            mov	al,$12[bp]
15361                                           ! Debug: list unsigned char = al+0 (used reg = )
15362 3820           30E4                       xor	ah,ah
15363 3822           50                         push	ax
15364                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15365 3823           E8         257E            call	_biosfn_write_teletype
15366 3826           83C4                   08  add	sp,*8
15367                                           !BCC_EOS
15368                                           ! 1673      break;
15369 3829           E9         028C            br 	.1
15370                                           !BCC_EOS
15371                                           ! 1674    case 0x10:
15372                                           ! 1675      biosfn_perform_gray_scale_summing(BX,CX);
15373                       0000382C            .20:
15374                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15375 382C           FF76         10            push	$10[bp]
15376                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15377 382F           FF76         0C            push	$C[bp]
15378                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15379 3832           E8         2B65            call	_biosfn_perform_gray_scale_summing
15380 3835           83C4                   04  add	sp,*4
15381                                           !BCC_EOS
15382                                           ! 1676      break;
15383 3838           E9         027D            br 	.1
15384                                           !BCC_EOS
15385                                           ! 1677    case 0x11:
15386                                           ! 1678      switch(( AX & 0x00ff ))
15387                       0000383B            .21:
15388                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15389 383B           8A46         12            mov	al,$12[bp]
15390                                           ! 1679       {
15391 383E           E9         00E1            br 	.24
15392                                           ! 1680        case 0x00:
15393                                           ! 1681        case 0x10:
15394                       00003841            .25:
15395                                           ! 1682         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15396                       00003841            .26:
15397                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15398 3841           8B46         0C            mov	ax,$C[bp]
15399 3844           88E0                       mov	al,ah
15400 3846           30E4                       xor	ah,ah
15401                                           ! Debug: list unsigned int = ax+0 (used reg = )
15402 3848           50                         push	ax
15403                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15404 3849           8A46         0C            mov	al,$C[bp]
15405                                           ! Debug: list unsigned char = al+0 (used reg = )
15406 384C           30E4                       xor	ah,ah
15407 384E           50                         push	ax
15408                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15409 384F           FF76         0E            push	$E[bp]
15410                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15411 3852           FF76         10            push	$10[bp]
15412                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15413 3855           FF76         08            push	8[bp]
15414                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15415 3858           FF76         16            push	$16[bp]
15416                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15417 385B           8A46         12            mov	al,$12[bp]
15418                                           ! Debug: list unsigned char = al+0 (used reg = )
15419 385E           30E4                       xor	ah,ah
15420 3860           50                         push	ax
15421                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15422 3861           E8         2DDD            call	_biosfn_load_text_user_pat
15423 3864           83C4                   0E  add	sp,*$E
15424                                           !BCC_EOS
15425                                           ! 1683         break;
15426 3867           E9         010C            br 	.22
15427                                           !BCC_EOS
15428                                           ! 1684        case 0x01:
15429                                           ! 1685        case 0x11:
15430                       0000386A            .27:
15431                                           ! 1686         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15432                       0000386A            .28:
15433                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15434 386A           8A46         0C            mov	al,$C[bp]
15435                                           ! Debug: list unsigned char = al+0 (used reg = )
15436 386D           30E4                       xor	ah,ah
15437 386F           50                         push	ax
15438                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15439 3870           8A46         12            mov	al,$12[bp]
15440                                           ! Debug: list unsigned char = al+0 (used reg = )
15441 3873           30E4                       xor	ah,ah
15442 3875           50                         push	ax
15443                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15444 3876           E8         2E64            call	_biosfn_load_text_8_14_pat
15445 3879           83C4                   04  add	sp,*4
15446                                           !BCC_EOS
15447                                           ! 1687         break;
15448 387C           E9         00F7            br 	.22
15449                                           !BCC_EOS
15450                                           ! 1688        case 0x02:
15451                                           ! 1689        case 0x12:
15452                       0000387F            .29:
15453                                           ! 1690         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15454                       0000387F            .2A:
15455                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15456 387F           8A46         0C            mov	al,$C[bp]
15457                                           ! Debug: list unsigned char = al+0 (used reg = )
15458 3882           30E4                       xor	ah,ah
15459 3884           50                         push	ax
15460                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15461 3885           8A46         12            mov	al,$12[bp]
15462                                           ! Debug: list unsigned char = al+0 (used reg = )
15463 3888           30E4                       xor	ah,ah
15464 388A           50                         push	ax
15465                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15466 388B           E8         2EE6            call	_biosfn_load_text_8_8_pat
15467 388E           83C4                   04  add	sp,*4
15468                                           !BCC_EOS
15469                                           ! 1691         break;
15470 3891           E9         00E2            br 	.22
15471                                           !BCC_EOS
15472                                           ! 1692        case 0x04:
15473                                           ! 1693        case 0x14:
15474                       00003894            .2B:
15475                                           ! 1694         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15476                       00003894            .2C:
15477                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15478 3894           8A46         0C            mov	al,$C[bp]
15479                                           ! Debug: list unsigned char = al+0 (used reg = )
15480 3897           30E4                       xor	ah,ah
15481 3899           50                         push	ax
15482                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15483 389A           8A46         12            mov	al,$12[bp]
15484                                           ! Debug: list unsigned char = al+0 (used reg = )
15485 389D           30E4                       xor	ah,ah
15486 389F           50                         push	ax
15487                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15488 38A0           E8         2F6F            call	_biosfn_load_text_8_16_pat
15489 38A3           83C4                   04  add	sp,*4
15490                                           !BCC_EOS
15491                                           ! 1695         break;
15492 38A6           E9         00CD            br 	.22
15493                                           !BCC_EOS
15494                                           ! 1696        case 0x20:
15495                                           ! 1697         biosfn_load_gfx_8_8_chars(ES,BP);
15496                       000038A9            .2D:
15497                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15498 38A9           FF76         08            push	8[bp]
15499                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15500 38AC           FF76         16            push	$16[bp]
15501                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15502 38AF           E8         2FF1            call	_biosfn_load_gfx_8_8_chars
15503 38B2           83C4                   04  add	sp,*4
15504                                           !BCC_EOS
15505                                           ! 1698         break;
15506 38B5           E9         00BE            br 	.22
15507                                           !BCC_EOS
15508                                           ! 1699        case 0x21:
15509                                           ! 1700         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15510                       000038B8            .2E:
15511                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15512 38B8           8A46         0E            mov	al,$E[bp]
15513                                           ! Debug: list unsigned char = al+0 (used reg = )
15514 38BB           30E4                       xor	ah,ah
15515 38BD           50                         push	ax
15516                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15517 38BE           8A46         0C            mov	al,$C[bp]
15518                                           ! Debug: list unsigned char = al+0 (used reg = )
15519 38C1           30E4                       xor	ah,ah
15520 38C3           50                         push	ax
15521                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15522 38C4           FF76         10            push	$10[bp]
15523                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15524 38C7           FF76         08            push	8[bp]
15525                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15526 38CA           FF76         16            push	$16[bp]
15527                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15528 38CD           E8         2FD4            call	_biosfn_load_gfx_user_chars
15529 38D0           83C4                   0A  add	sp,*$A
15530                                           !BCC_EOS
15531                                           ! 1701         break;
15532 38D3           E9         00A0            br 	.22
15533                                           !BCC_EOS
15534                                           ! 1702        case 0x22:
15535                                           ! 1703         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15536                       000038D6            .2F:
15537                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15538 38D6           8A46         0C            mov	al,$C[bp]
15539                                           ! Debug: list unsigned char = al+0 (used reg = )
15540 38D9           30E4                       xor	ah,ah
15541 38DB           50                         push	ax
15542                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15543 38DC           E8         2FC6            call	_biosfn_load_gfx_8_14_chars
15544 38DF           44                         inc	sp
15545 38E0           44                         inc	sp
15546                                           !BCC_EOS
15547                                           ! 1704         break;
15548 38E1           E9         0092            br 	.22
15549                                           !BCC_EOS
15550                                           ! 1705        case 0x23:
15551                                           ! 1706         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15552                       000038E4            .30:
15553                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15554 38E4           8A46         0C            mov	al,$C[bp]
15555                                           ! Debug: list unsigned char = al+0 (used reg = )
15556 38E7           30E4                       xor	ah,ah
15557 38E9           50                         push	ax
15558                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15559 38EA           E8         2FB9            call	_biosfn_load_gfx_8_8_dd_chars
15560 38ED           44                         inc	sp
15561 38EE           44                         inc	sp
15562                                           !BCC_EOS
15563                                           ! 1707         break;
15564 38EF           E9         0084            br 	.22
15565                                           !BCC_EOS
15566                                           ! 1708        case 0x24:
15567                                           ! 1709         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15568                       000038F2            .31:
15569                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15570 38F2           8A46         0C            mov	al,$C[bp]
15571                                           ! Debug: list unsigned char = al+0 (used reg = )
15572 38F5           30E4                       xor	ah,ah
15573 38F7           50                         push	ax
15574                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15575 38F8           E8         2FAC            call	_biosfn_load_gfx_8_16_chars
15576 38FB           44                         inc	sp
15577 38FC           44                         inc	sp
15578                                           !BCC_EOS
15579                                           ! 1710         break;
15580 38FD           E9         0076            br 	.22
15581                                           !BCC_EOS
15582                                           ! 1711        case 0x30:
15583                                           ! 1712         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15584                       00003900            .32:
15585                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15586 3900           8D5E         0E            lea	bx,$E[bp]
15587 3903           53                         push	bx
15588                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15589 3904           8D5E         10            lea	bx,$10[bp]
15590 3907           53                         push	bx
15591                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15592 3908           8D5E         08            lea	bx,8[bp]
15593 390B           53                         push	bx
15594                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15595 390C           8D5E         16            lea	bx,$16[bp]
15596 390F           53                         push	bx
15597                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15598 3910           8B46         0C            mov	ax,$C[bp]
15599 3913           88E0                       mov	al,ah
15600 3915           30E4                       xor	ah,ah
15601                                           ! Debug: list unsigned int = ax+0 (used reg = )
15602 3917           50                         push	ax
15603                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15604 3918           E8         2F8D            call	_biosfn_get_font_info
15605 391B           83C4                   0A  add	sp,*$A
15606                                           !BCC_EOS
15607                                           ! 1713         break;
15608 391E           EB           56            jmp .22
15609                                           !BCC_EOS
15610                                           ! 1714     
15611                                           ! 1714   }
15612                                           ! 1715      break;
15613 3920           EB           54            jmp .22
15614                       00003922            .24:
15615 3922           2C                     00  sub	al,*0
15616 3924         0F84         FF19            beq 	.25
15617 3928           2C                     01  sub	al,*1
15618 392A         0F84         FF3C            beq 	.27
15619 392E           2C                     01  sub	al,*1
15620 3930         0F84         FF4B            beq 	.29
15621 3934           2C                     02  sub	al,*2
15622 3936         0F84         FF5A            beq 	.2B
15623 393A           2C                     0C  sub	al,*$C
15624 393C         0F84         FF01            beq 	.26
15625 3940           2C                     01  sub	al,*1
15626 3942         0F84         FF24            beq 	.28
15627 3946           2C                     01  sub	al,*1
15628 3948         0F84         FF33            beq 	.2A
15629 394C           2C                     02  sub	al,*2
15630 394E         0F84         FF42            beq 	.2C
15631 3952           2C                     0C  sub	al,*$C
15632 3954         0F84         FF51            beq 	.2D
15633 3958           2C                     01  sub	al,*1
15634 395A         0F84         FF5A            beq 	.2E
15635 395E           2C                     01  sub	al,*1
15636 3960         0F84         FF72            beq 	.2F
15637 3964           2C                     01  sub	al,*1
15638 3966         0F84         FF7A            beq 	.30
15639 396A           2C                     01  sub	al,*1
15640 396C         0F84         FF82            beq 	.31
15641 3970           2C                     0C  sub	al,*$C
15642 3972         0F84         FF8A            beq 	.32
15643                       00003976            .22:
15644 3976           E9         013F            br 	.1
15645                                           !BCC_EOS
15646                                           ! 1716    case 0x12:
15647                                           ! 1717      switch(( BX & 0x00ff ))
15648                       00003979            .33:
15649                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15650 3979           8A46         0C            mov	al,$C[bp]
15651                                           ! 1718       {
15652 397C           EB           3C            jmp .36
15653                                           ! 1719        case 0x20:
15654                                           ! 1720         biosfn_alternate_prtsc();
15655                       0000397E            .37:
15656                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15657 397E           E8         3101            call	_biosfn_alternate_prtsc
15658                                           !BCC_EOS
15659                                           ! 1721         break;
15660 3981           EB           43            jmp .34
15661                                           !BCC_EOS
15662                                           ! 1722        case 0x35:
15663                                           ! 1723         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15664                       00003983            .38:
15665                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15666 3983           FF76         0E            push	$E[bp]
15667                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15668 3986           FF76         16            push	$16[bp]
15669                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15670 3989           8A46         12            mov	al,$12[bp]
15671                                           ! Debug: list unsigned char = al+0 (used reg = )
15672 398C           30E4                       xor	ah,ah
15673 398E           50                         push	ax
15674                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15675 398F           E8         31CA            call	_biosfn_switch_video_interface
15676 3992           83C4                   06  add	sp,*6
15677                                           !BCC_EOS
15678                                           ! 1724         AX = ((AX & 0xff00) | (0x12));
15679                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15680 3995           8B46         12            mov	ax,$12[bp]
15681 3998           30C0                       xor	al,al
15682                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15683 399A           0C                     12  or	al,*$12
15684                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15685 399C           8946         12            mov	$12[bp],ax
15686                                           !BCC_EOS
15687                                           ! 1725         break;
15688 399F           EB           25            jmp .34
15689                                           !BCC_EOS
15690                                           ! 1726        case 0x36:
15691                                           ! 1727         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15692                       000039A1            .39:
15693                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15694 39A1           8A46         12            mov	al,$12[bp]
15695                                           ! Debug: list unsigned char = al+0 (used reg = )
15696 39A4           30E4                       xor	ah,ah
15697 39A6           50                         push	ax
15698                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15699 39A7           E8         31B3            call	_biosfn_enable_video_refresh_control
15700 39AA           44                         inc	sp
15701 39AB           44                         inc	sp
15702                                           !BCC_EOS
15703                                           ! 1728         AX = ((AX & 0xff00) | (0x12));
15704                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15705 39AC           8B46         12            mov	ax,$12[bp]
15706 39AF           30C0                       xor	al,al
15707                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15708 39B1           0C                     12  or	al,*$12
15709                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15710 39B3           8946         12            mov	$12[bp],ax
15711                                           !BCC_EOS
15712                                           ! 1729         break;
15713 39B6           EB           0E            jmp .34
15714                                           !BCC_EOS
15715                                           ! 1730       }
15716                                           ! 1731      break;
15717 39B8           EB           0C            jmp .34
15718                       000039BA            .36:
15719 39BA           2C                     20  sub	al,*$20
15720 39BC           74           C0            je 	.37
15721 39BE           2C                     15  sub	al,*$15
15722 39C0           74           C1            je 	.38
15723 39C2           2C                     01  sub	al,*1
15724 39C4           74           DB            je 	.39
15725                       000039C6            .34:
15726 39C6           E9         00EF            br 	.1
15727                                           !BCC_EOS
15728                                           ! 1732    case 0x13:
15729                                           ! 1733      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
15730                       000039C9            .3A:
15731                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15732 39C9           FF76         08            push	8[bp]
15733                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15734 39CC           FF76         16            push	$16[bp]
15735                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15736 39CF           8A46         0E            mov	al,$E[bp]
15737                                           ! Debug: list unsigned char = al+0 (used reg = )
15738 39D2           30E4                       xor	ah,ah
15739 39D4           50                         push	ax
15740                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15741 39D5           8B46         0E            mov	ax,$E[bp]
15742 39D8           88E0                       mov	al,ah
15743 39DA           30E4                       xor	ah,ah
15744                                           ! Debug: list unsigned int = ax+0 (used reg = )
15745 39DC           50                         push	ax
15746                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
15747 39DD           FF76         10            push	$10[bp]
15748                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
15749 39E0           8A46         0C            mov	al,$C[bp]
15750                                           ! Debug: list unsigned char = al+0 (used reg = )
15751 39E3           30E4                       xor	ah,ah
15752 39E5           50                         push	ax
15753                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15754 39E6           8B46         0C            mov	ax,$C[bp]
15755 39E9           88E0                       mov	al,ah
15756 39EB           30E4                       xor	ah,ah
15757                                           ! Debug: list unsigned int = ax+0 (used reg = )
15758 39ED           50                         push	ax
15759                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15760 39EE           8A46         12            mov	al,$12[bp]
15761                                           ! Debug: list unsigned char = al+0 (used reg = )
15762 39F1           30E4                       xor	ah,ah
15763 39F3           50                         push	ax
15764                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
15765 39F4           E8         3167            call	_biosfn_write_string
15766 39F7           83C4                   10  add	sp,*$10
15767                                           !BCC_EOS
15768                                           ! 1734      break;
15769 39FA           E9         00BB            br 	.1
15770                                           !BCC_EOS
15771                                           ! 1735    case 0x1B:
15772                                           ! 1736      biosfn_read_state_info(BX,ES,DI);
15773                       000039FD            .3B:
15774                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
15775 39FD           FF76         04            push	4[bp]
15776                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15777 3A00           FF76         16            push	$16[bp]
15778                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15779 3A03           FF76         0C            push	$C[bp]
15780                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
15781 3A06           E8         3261            call	_biosfn_read_state_info
15782 3A09           83C4                   06  add	sp,*6
15783                                           !BCC_EOS
15784                                           ! 1737      AX = ((AX & 0xff00) | (0x1B));
15785                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15786 3A0C           8B46         12            mov	ax,$12[bp]
15787 3A0F           30C0                       xor	al,al
15788                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
15789 3A11           0C                     1B  or	al,*$1B
15790                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15791 3A13           8946         12            mov	$12[bp],ax
15792                                           !BCC_EOS
15793                                           ! 1738      break;
15794 3A16           E9         009F            br 	.1
15795                                           !BCC_EOS
15796                                           ! 1739    case 0x1C:
15797                                           ! 1740      switch(( AX & 0x00ff ))
15798                       00003A19            .3C:
15799                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15800 3A19           8A46         12            mov	al,$12[bp]
15801                                           ! 1741       {
15802 3A1C           EB           33            jmp .3F
15803                                           ! 1742        case 0x00:
15804                                           ! 1743         biosfn_read_video_state_size(CX,&BX);
15805                       00003A1E            .40:
15806                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
15807 3A1E           8D5E         0C            lea	bx,$C[bp]
15808 3A21           53                         push	bx
15809                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15810 3A22           FF76         10            push	$10[bp]
15811                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
15812 3A25           E8         33C1            call	_biosfn_read_video_state_size
15813 3A28           83C4                   04  add	sp,*4
15814                                           !BCC_EOS
15815                                           ! 1744         break;
15816 3A2B           EB           30            jmp .3D
15817                                           !BCC_EOS
15818                                           ! 1745        case 0x01:
15819                                           ! 1746         biosfn_save_video_state(CX,ES,BX);
15820                       00003A2D            .41:
15821                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15822 3A2D           FF76         0C            push	$C[bp]
15823                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15824 3A30           FF76         16            push	$16[bp]
15825                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15826 3A33           FF76         10            push	$10[bp]
15827                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
15828 3A36           E8         33D4            call	_biosfn_save_video_state
15829 3A39           83C4                   06  add	sp,*6
15830                                           !BCC_EOS
15831                                           ! 1747         break;
15832 3A3C           EB           1F            jmp .3D
15833                                           !BCC_EOS
15834                                           ! 1748        case 0x02:
15835                                           ! 1749         biosfn_restore_video_state(CX,ES,BX);
15836                       00003A3E            .42:
15837                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15838 3A3E           FF76         0C            push	$C[bp]
15839                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15840 3A41           FF76         16            push	$16[bp]
15841                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15842 3A44           FF76         10            push	$10[bp]
15843                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
15844 3A47           E8         398D            call	_biosfn_restore_video_state
15845 3A4A           83C4                   06  add	sp,*6
15846                                           !BCC_EOS
15847                                           ! 1750         break;
15848 3A4D           EB           0E            jmp .3D
15849                                           !BCC_EOS
15850                                           ! 1751       }
15851                                           ! 1752      AX = ((AX & 0xff00) | (0x1C));
15852 3A4F           EB           0C            jmp .3D
15853                       00003A51            .3F:
15854 3A51           2C                     00  sub	al,*0
15855 3A53           74           C9            je 	.40
15856 3A55           2C                     01  sub	al,*1
15857 3A57           74           D4            je 	.41
15858 3A59           2C                     01  sub	al,*1
15859 3A5B           74           E1            je 	.42
15860                       00003A5D            .3D:
15861                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15862 3A5D           8B46         12            mov	ax,$12[bp]
15863 3A60           30C0                       xor	al,al
15864                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
15865 3A62           0C                     1C  or	al,*$1C
15866                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15867 3A64           8946         12            mov	$12[bp],ax
15868                                           !BCC_EOS
15869                                           ! 1753      break;
15870 3A67           EB           4F            jmp .1
15871                                           !BCC_EOS
15872                                           ! 1754   }
15873                                           ! 1755 }
15874 3A69           EB           4D            jmp .1
15875                       00003A6B            .3:
15876 3A6B           2D                   0000  sub	ax,*0
15877 3A6E           7C           48            jl  	.1
15878 3A70           3D                   001C  cmp	ax,*$1C
15879 3A73           77           43            ja  	.43
15880 3A75           D1E0                       shl	ax,*1
15881 3A77           89C3                       mov	bx,ax
15882 3A79           2E                         seg	cs
15883 3A7A           FFA7       3A7E            br	.44[bx]
15884                       00003A7E            .44:
15885 3A7E                      3646            .word	.4
15886 3A80                      36A4            .word	.13
15887 3A82                      36BB            .word	.14
15888 3A84                      36CF            .word	.15
15889 3A86                      36E8            .word	.16
15890 3A88                      36FF            .word	.17
15891 3A8A                      370D            .word	.18
15892 3A8C                      3748            .word	.19
15893 3A8E                      3782            .word	.1A
15894 3A90                      3797            .word	.1B
15895 3A92                      37B7            .word	.1C
15896 3A94                      3AB8            .word	.1
15897 3A96                      37D7            .word	.1D
15898 3A98                      37F4            .word	.1E
15899 3A9A                      380F            .word	.1F
15900 3A9C                      3AB8            .word	.1
15901 3A9E                      382C            .word	.20
15902 3AA0                      383B            .word	.21
15903 3AA2                      3979            .word	.33
15904 3AA4                      39C9            .word	.3A
15905 3AA6                      3AB8            .word	.1
15906 3AA8                      3AB8            .word	.1
15907 3AAA                      3AB8            .word	.1
15908 3AAC                      3AB8            .word	.1
15909 3AAE                      3AB8            .word	.1
15910 3AB0                      3AB8            .word	.1
15911 3AB2                      3AB8            .word	.1
15912 3AB4                      39FD            .word	.3B
15913 3AB6                      3A19            .word	.3C
15914                       00003AB8            .43:
15915                       00003AB8            .1:
15916                       FFFFFFFE            ..FFFF	=	-2
15917 3AB8           5D                         pop	bp
15918 3AB9           C3                         ret
15919                                           ! 1756 static void biosfn_set_video_mode(mode) Bit8u mode;
15920                                           ! Register BX used in function int10_func
15921                       00003ABA            _biosfn_set_video_mode:
15922                                           !BCC_EOS
15923                                           ! 1757 {
15924                                           ! 1758  Bit8u noclearmem=mode&0x80;
15925 3ABA           55                         push	bp
15926 3ABB           89E5                       mov	bp,sp
15927 3ABD           4C                         dec	sp
15928                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
15929 3ABE           8A46         04            mov	al,4[bp]
15930 3AC1           24                     80  and	al,#$80
15931                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
15932 3AC3           8846         FF            mov	-1[bp],al
15933                                           !BCC_EOS
15934                                           ! 1759  Bit8u line,mmask,*palette,vpti;
15935                                           !BCC_EOS
15936                                           ! 1760  Bit16u i,twidth,theightm1,cheight;
15937                                           !BCC_EOS
15938                                           ! 1761  Bit8u modeset_ctl,video_ctl,vga_switches;
15939                                           !BCC_EOS
15940                                           ! 1762  Bit16u crtc_addr;
15941                                           !BCC_EOS
15942                                           ! 1763  mode=mode&0x7f;
15943 3AC6           83C4                   EB  add	sp,*-$15
15944                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
15945 3AC9           8A46         04            mov	al,4[bp]
15946 3ACC           24                     7F  and	al,*$7F
15947                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
15948 3ACE           8846         04            mov	4[bp],al
15949                                           !BCC_EOS
15950                                           ! 1764  line=find_vga_entry(mode);
15951                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
15952 3AD1           8A46         04            mov	al,4[bp]
15953 3AD4           30E4                       xor	ah,ah
15954 3AD6           50                         push	ax
15955                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
15956 3AD7           E8         3EDB            call	_find_vga_entry
15957 3ADA           44                         inc	sp
15958 3ADB           44                         inc	sp
15959                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
15960 3ADC           8846         FE            mov	-2[bp],al
15961                                           !BCC_EOS
15962                                           ! 1765  if(line==0xFF)
15963                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
15964 3ADF           8A46         FE            mov	al,-2[bp]
15965 3AE2           3C                     FF  cmp	al,#$FF
15966 3AE4           75           04            jne 	.45
15967                       00003AE6            .46:
15968                                           ! 1766   return;
15969 3AE6           89EC                       mov	sp,bp
15970 3AE8           5D                         pop	bp
15971 3AE9           C3                         ret
15972                                           !BCC_EOS
15973                                           ! 1767  vpti=line_to_vpti[line];
15974                       00003AEA            .45:
15975                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
15976 3AEA           8A46         FE            mov	al,-2[bp]
15977 3AED           30E4                       xor	ah,ah
15978 3AEF           89C3                       mov	bx,ax
15979                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
15980 3AF1           8A87       025A            mov	al,_line_to_vpti[bx]
15981 3AF5           8846         F9            mov	-7[bp],al
15982                                           !BCC_EOS
15983                                           ! 1768  twidth=video_param_table[vpti].twidth;
15984                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15985 3AF8           8A46         F9            mov	al,-7[bp]
15986 3AFB           30E4                       xor	ah,ah
15987 3AFD           B1                     06  mov	cl,*6
15988 3AFF           D3E0                       shl	ax,cl
15989 3B01           89C3                       mov	bx,ax
15990                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
15991 3B03           8A87       026E            mov	al,_video_param_table[bx]
15992 3B07           30E4                       xor	ah,ah
15993 3B09           8946         F4            mov	-$C[bp],ax
15994                                           !BCC_EOS
15995                                           ! 1769  theightm1=video_param_table[vpti].theightm1;
15996                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15997 3B0C           8A46         F9            mov	al,-7[bp]
15998 3B0F           30E4                       xor	ah,ah
15999 3B11           B1                     06  mov	cl,*6
16000 3B13           D3E0                       shl	ax,cl
16001 3B15           89C3                       mov	bx,ax
16002 3B17           81C3                 026E  add	bx,#_video_param_table
16003                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16004 3B1B           8A47         01            mov	al,1[bx]
16005 3B1E           30E4                       xor	ah,ah
16006 3B20           8946         F2            mov	-$E[bp],ax
16007                                           !BCC_EOS
16008                                           ! 1770  cheight=video_param_table[vpti].cheight;
16009                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16010 3B23           8A46         F9            mov	al,-7[bp]
16011 3B26           30E4                       xor	ah,ah
16012 3B28           B1                     06  mov	cl,*6
16013 3B2A           D3E0                       shl	ax,cl
16014 3B2C           89C3                       mov	bx,ax
16015 3B2E           81C3                 026E  add	bx,#_video_param_table
16016                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16017 3B32           8A47         02            mov	al,2[bx]
16018 3B35           30E4                       xor	ah,ah
16019 3B37           8946         F0            mov	-$10[bp],ax
16020                                           !BCC_EOS
16021                                           ! 1771  video_ctl=read_byte(0x40,0x87);
16022                                           ! Debug: list int = const $87 (used reg = )
16023 3B3A           B8                   0087  mov	ax,#$87
16024 3B3D           50                         push	ax
16025                                           ! Debug: list int = const $40 (used reg = )
16026 3B3E           B8                   0040  mov	ax,*$40
16027 3B41           50                         push	ax
16028                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16029 3B42           E8         3F5C            call	_read_byte
16030 3B45           83C4                   04  add	sp,*4
16031                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16032 3B48           8846         EE            mov	-$12[bp],al
16033                                           !BCC_EOS
16034                                           ! 1772  vga_switches=read_byte(0x40,0x88);
16035                                           ! Debug: list int = const $88 (used reg = )
16036 3B4B           B8                   0088  mov	ax,#$88
16037 3B4E           50                         push	ax
16038                                           ! Debug: list int = const $40 (used reg = )
16039 3B4F           B8                   0040  mov	ax,*$40
16040 3B52           50                         push	ax
16041                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16042 3B53           E8         3F4B            call	_read_byte
16043 3B56           83C4                   04  add	sp,*4
16044                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16045 3B59           8846         ED            mov	-$13[bp],al
16046                                           !BCC_EOS
16047                                           ! 1773  modeset_ctl=read_byte(0x40,0x89);
16048                                           ! Debug: list int = const $89 (used reg = )
16049 3B5C           B8                   0089  mov	ax,#$89
16050 3B5F           50                         push	ax
16051                                           ! Debug: list int = const $40 (used reg = )
16052 3B60           B8                   0040  mov	ax,*$40
16053 3B63           50                         push	ax
16054                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16055 3B64           E8         3F3A            call	_read_byte
16056 3B67           83C4                   04  add	sp,*4
16057                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16058 3B6A           8846         EF            mov	-$11[bp],al
16059                                           !BCC_EOS
16060                                           ! 1774  if((modeset_ctl&0x08)==0)
16061                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16062 3B6D           8A46         EF            mov	al,-$11[bp]
16063 3B70           24                     08  and	al,*8
16064                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16065 3B72           84C0                       test	al,al
16066 3B74         0F85         0145            bne 	.47
16067                       00003B78            .48:
16068                                           ! 1775   {
16069                                           ! 1776    outb(0x3c6,vga_modes[line].pelmask);
16070                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16071 3B78           8A46         FE            mov	al,-2[bp]
16072 3B7B           30E4                       xor	ah,ah
16073 3B7D           B1                     03  mov	cl,*3
16074 3B7F           D3E0                       shl	ax,cl
16075 3B81           89C3                       mov	bx,ax
16076 3B83           81C3                 01DA  add	bx,#_vga_modes
16077                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16078 3B87           8A47         06            mov	al,6[bx]
16079 3B8A           30E4                       xor	ah,ah
16080 3B8C           50                         push	ax
16081                                           ! Debug: list int = const $3C6 (used reg = )
16082 3B8D           B8                   03C6  mov	ax,#$3C6
16083 3B90           50                         push	ax
16084                                           ! Debug: func () void = outb+0 (used reg = )
16085 3B91           E8         3F79            call	_outb
16086 3B94           83C4                   04  add	sp,*4
16087                                           !BCC_EOS
16088                                           ! 1777    outb(0x3c8,0x00);
16089                                           ! Debug: list int = const 0 (used reg = )
16090 3B97           31C0                       xor	ax,ax
16091 3B99           50                         push	ax
16092                                           ! Debug: list int = const $3C8 (used reg = )
16093 3B9A           B8                   03C8  mov	ax,#$3C8
16094 3B9D           50                         push	ax
16095                                           ! Debug: func () void = outb+0 (used reg = )
16096 3B9E           E8         3F6C            call	_outb
16097 3BA1           83C4                   04  add	sp,*4
16098                                           !BCC_EOS
16099                                           ! 1778    switch(vga_modes[line].dacmodel)
16100                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16101 3BA4           8A46         FE            mov	al,-2[bp]
16102 3BA7           30E4                       xor	ah,ah
16103 3BA9           B1                     03  mov	cl,*3
16104 3BAB           D3E0                       shl	ax,cl
16105 3BAD           89C3                       mov	bx,ax
16106 3BAF           81C3                 01DA  add	bx,#_vga_modes
16107 3BB3           8A47         07            mov	al,7[bx]
16108                                           ! 1779     {case 0:
16109 3BB6           EB           22            jmp .4B
16110                                           ! 1780       palette=&palette0;
16111                       00003BB8            .4C:
16112                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16113 3BB8           BB                   09EE  mov	bx,#_palette0
16114 3BBB           895E         FA            mov	-6[bp],bx
16115                                           !BCC_EOS
16116                                           ! 1781       break;
16117 3BBE           EB           2A            jmp .49
16118                                           !BCC_EOS
16119                                           ! 1782      case 1:
16120                                           ! 1783       palette=&palette1;
16121                       00003BC0            .4D:
16122                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16123 3BC0           BB                   0AAE  mov	bx,#_palette1
16124 3BC3           895E         FA            mov	-6[bp],bx
16125                                           !BCC_EOS
16126                                           ! 1784       break;
16127 3BC6           EB           22            jmp .49
16128                                           !BCC_EOS
16129                                           ! 1785      case 2:
16130                                           ! 1786       palette=&palette2;
16131                       00003BC8            .4E:
16132                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16133 3BC8           BB                   0B6E  mov	bx,#_palette2
16134 3BCB           895E         FA            mov	-6[bp],bx
16135                                           !BCC_EOS
16136                                           ! 1787       break;
16137 3BCE           EB           1A            jmp .49
16138                                           !BCC_EOS
16139                                           ! 1788      case 3:
16140                                           ! 1789       palette=&palette3;
16141                       00003BD0            .4F:
16142                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16143 3BD0           BB                   0C2E  mov	bx,#_palette3
16144 3BD3           895E         FA            mov	-6[bp],bx
16145                                           !BCC_EOS
16146                                           ! 1790       break;
16147 3BD6           EB           12            jmp .49
16148                                           !BCC_EOS
16149                                           ! 1791     }
16150                                           ! 1792    for(i=0;i<0x0100;i++)
16151 3BD8           EB           10            jmp .49
16152                       00003BDA            .4B:
16153 3BDA           2C                     00  sub	al,*0
16154 3BDC           74           DA            je 	.4C
16155 3BDE           2C                     01  sub	al,*1
16156 3BE0           74           DE            je 	.4D
16157 3BE2           2C                     01  sub	al,*1
16158 3BE4           74           E2            je 	.4E
16159 3BE6           2C                     01  sub	al,*1
16160 3BE8           74           E6            je 	.4F
16161                       00003BEA            .49:
16162                       FFFFFFE8            ..FFFE	=	-$18
16163                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16164 3BEA           31C0                       xor	ax,ax
16165 3BEC           8946         F6            mov	-$A[bp],ax
16166                                           !BCC_EOS
16167                                           !BCC_EOS
16168                                           ! 1793     {if(i<=dac_regs[vga_modes[line].dacmodel])
16169 3BEF           E9         00AB            br 	.52
16170                       00003BF2            .53:
16171                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16172 3BF2           8A46         FE            mov	al,-2[bp]
16173 3BF5           30E4                       xor	ah,ah
16174 3BF7           B1                     03  mov	cl,*3
16175 3BF9           D3E0                       shl	ax,cl
16176 3BFB           89C3                       mov	bx,ax
16177 3BFD           81C3                 01DA  add	bx,#_vga_modes
16178                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16179 3C01           8A47         07            mov	al,7[bx]
16180 3C04           30E4                       xor	ah,ah
16181 3C06           89C3                       mov	bx,ax
16182                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16183 3C08           8A87       026A            mov	al,_dac_regs[bx]
16184 3C0C           30E4                       xor	ah,ah
16185 3C0E           3B46         F6            cmp	ax,-$A[bp]
16186 3C11           72           5C            jb  	.54
16187                       00003C13            .55:
16188                                           ! 1794       {outb(0x3c9,palette[(i*3)+0]);
16189                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16190 3C13           8B46         F6            mov	ax,-$A[bp]
16191 3C16           89C2                       mov	dx,ax
16192 3C18           D1E0                       shl	ax,*1
16193 3C1A           01D0                       add	ax,dx
16194                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16195                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16196 3C1C           0346         FA            add	ax,-6[bp]
16197 3C1F           89C3                       mov	bx,ax
16198                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16199 3C21           8A07                       mov	al,[bx]
16200 3C23           30E4                       xor	ah,ah
16201 3C25           50                         push	ax
16202                                           ! Debug: list int = const $3C9 (used reg = )
16203 3C26           B8                   03C9  mov	ax,#$3C9
16204 3C29           50                         push	ax
16205                                           ! Debug: func () void = outb+0 (used reg = )
16206 3C2A           E8         3EE0            call	_outb
16207 3C2D           83C4                   04  add	sp,*4
16208                                           !BCC_EOS
16209                                           ! 1795        outb(0x3c9,palette[(i*3)+1]);
16210                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16211 3C30           8B46         F6            mov	ax,-$A[bp]
16212 3C33           89C2                       mov	dx,ax
16213 3C35           D1E0                       shl	ax,*1
16214 3C37           01D0                       add	ax,dx
16215                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16216                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16217 3C39           40                         inc	ax
16218 3C3A           0346         FA            add	ax,-6[bp]
16219 3C3D           89C3                       mov	bx,ax
16220                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16221 3C3F           8A07                       mov	al,[bx]
16222 3C41           30E4                       xor	ah,ah
16223 3C43           50                         push	ax
16224                                           ! Debug: list int = const $3C9 (used reg = )
16225 3C44           B8                   03C9  mov	ax,#$3C9
16226 3C47           50                         push	ax
16227                                           ! Debug: func () void = outb+0 (used reg = )
16228 3C48           E8         3EC2            call	_outb
16229 3C4B           83C4                   04  add	sp,*4
16230                                           !BCC_EOS
16231                                           ! 1796        outb(0x3c9
16232                                           ! 1796 ,palette[(i*3)+2]);
16233                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16234 3C4E           8B46         F6            mov	ax,-$A[bp]
16235 3C51           89C2                       mov	dx,ax
16236 3C53           D1E0                       shl	ax,*1
16237 3C55           01D0                       add	ax,dx
16238                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16239                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16240 3C57           40                         inc	ax
16241 3C58           40                         inc	ax
16242 3C59           0346         FA            add	ax,-6[bp]
16243 3C5C           89C3                       mov	bx,ax
16244                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16245 3C5E           8A07                       mov	al,[bx]
16246 3C60           30E4                       xor	ah,ah
16247 3C62           50                         push	ax
16248                                           ! Debug: list int = const $3C9 (used reg = )
16249 3C63           B8                   03C9  mov	ax,#$3C9
16250 3C66           50                         push	ax
16251                                           ! Debug: func () void = outb+0 (used reg = )
16252 3C67           E8         3EA3            call	_outb
16253 3C6A           83C4                   04  add	sp,*4
16254                                           !BCC_EOS
16255                                           ! 1797       }
16256                                           ! 1798      else
16257                                           ! 1799       {outb(0x3c9,0);
16258 3C6D           EB           27            jmp .56
16259                       00003C6F            .54:
16260                                           ! Debug: list int = const 0 (used reg = )
16261 3C6F           31C0                       xor	ax,ax
16262 3C71           50                         push	ax
16263                                           ! Debug: list int = const $3C9 (used reg = )
16264 3C72           B8                   03C9  mov	ax,#$3C9
16265 3C75           50                         push	ax
16266                                           ! Debug: func () void = outb+0 (used reg = )
16267 3C76           E8         3E94            call	_outb
16268 3C79           83C4                   04  add	sp,*4
16269                                           !BCC_EOS
16270                                           ! 1800        outb(0x3c9,0);
16271                                           ! Debug: list int = const 0 (used reg = )
16272 3C7C           31C0                       xor	ax,ax
16273 3C7E           50                         push	ax
16274                                           ! Debug: list int = const $3C9 (used reg = )
16275 3C7F           B8                   03C9  mov	ax,#$3C9
16276 3C82           50                         push	ax
16277                                           ! Debug: func () void = outb+0 (used reg = )
16278 3C83           E8         3E87            call	_outb
16279 3C86           83C4                   04  add	sp,*4
16280                                           !BCC_EOS
16281                                           ! 1801        outb(0x3c9,0);
16282                                           ! Debug: list int = const 0 (used reg = )
16283 3C89           31C0                       xor	ax,ax
16284 3C8B           50                         push	ax
16285                                           ! Debug: list int = const $3C9 (used reg = )
16286 3C8C           B8                   03C9  mov	ax,#$3C9
16287 3C8F           50                         push	ax
16288                                           ! Debug: func () void = outb+0 (used reg = )
16289 3C90           E8         3E7A            call	_outb
16290 3C93           83C4                   04  add	sp,*4
16291                                           !BCC_EOS
16292                                           ! 1802       }
16293                                           ! 1803     }
16294                       00003C96            .56:
16295                                           ! 1804    if((modeset_ctl&0x02)==0x02)
16296                       00003C96            .51:
16297                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16298 3C96           8B46         F6            mov	ax,-$A[bp]
16299 3C99           40                         inc	ax
16300 3C9A           8946         F6            mov	-$A[bp],ax
16301                       00003C9D            .52:
16302                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16303 3C9D           8B46         F6            mov	ax,-$A[bp]
16304 3CA0           3D                   0100  cmp	ax,#$100
16305 3CA3         0F82         FF4B            blo 	.53
16306                       00003CA7            .57:
16307                       00003CA7            .50:
16308                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16309 3CA7           8A46         EF            mov	al,-$11[bp]
16310 3CAA           24                     02  and	al,*2
16311                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16312 3CAC           3C                     02  cmp	al,*2
16313 3CAE           75           0D            jne 	.58
16314                       00003CB0            .59:
16315                                           ! 1805     {
16316                                           ! 1806      biosfn_perform_gray_scale_summing(0x00, 0x100);
16317                                           ! Debug: list int = const $100 (used reg = )
16318 3CB0           B8                   0100  mov	ax,#$100
16319 3CB3           50                         push	ax
16320                                           ! Debug: list int = const 0 (used reg = )
16321 3CB4           31C0                       xor	ax,ax
16322 3CB6           50                         push	ax
16323                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16324 3CB7           E8         26E0            call	_biosfn_perform_gray_scale_summing
16325 3CBA           83C4                   04  add	sp,*4
16326                                           !BCC_EOS
16327                                           ! 1807     }
16328                                           ! 1808   }
16329                       00003CBD            .58:
16330                                           ! 1809  inb(0x3da);
16331                       00003CBD            .47:
16332                                           ! Debug: list int = const $3DA (used reg = )
16333 3CBD           B8                   03DA  mov	ax,#$3DA
16334 3CC0           50                         push	ax
16335                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16336 3CC1           E8         3E33            call	_inb
16337 3CC4           44                         inc	sp
16338 3CC5           44                         inc	sp
16339                                           !BCC_EOS
16340                                           ! 1810  for(i=0;i<=0x13;i++)
16341                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16342 3CC6           31C0                       xor	ax,ax
16343 3CC8           8946         F6            mov	-$A[bp],ax
16344                                           !BCC_EOS
16345                                           !BCC_EOS
16346                                           ! 1811   {outb(0x3c0,i);
16347 3CCB           EB           38            jmp .5C
16348                       00003CCD            .5D:
16349                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16350 3CCD           FF76         F6            push	-$A[bp]
16351                                           ! Debug: list int = const $3C0 (used reg = )
16352 3CD0           B8                   03C0  mov	ax,#$3C0
16353 3CD3           50                         push	ax
16354                                           ! Debug: func () void = outb+0 (used reg = )
16355 3CD4           E8         3E36            call	_outb
16356 3CD7           83C4                   04  add	sp,*4
16357                                           !BCC_EOS
16358                                           ! 1812    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16359                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16360 3CDA           8A46         F9            mov	al,-7[bp]
16361 3CDD           30E4                       xor	ah,ah
16362 3CDF           B1                     06  mov	cl,*6
16363 3CE1           D3E0                       shl	ax,cl
16364 3CE3           89C3                       mov	bx,ax
16365 3CE5           81C3                 026E  add	bx,#_video_param_table
16366                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16367 3CE9           8B46         F6            mov	ax,-$A[bp]
16368 3CEC           01C3                       add	bx,ax
16369                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16370 3CEE           8A47         23            mov	al,$23[bx]
16371 3CF1           30E4                       xor	ah,ah
16372 3CF3           50                         push	ax
16373                                           ! Debug: list int = const $3C0 (used reg = )
16374 3CF4           B8                   03C0  mov	ax,#$3C0
16375 3CF7           50                         push	ax
16376                                           ! Debug: func () void = outb+0 (used reg = )
16377 3CF8           E8         3E12            call	_outb
16378 3CFB           83C4                   04  add	sp,*4
16379                                           !BCC_EOS
16380                                           ! 1813   }
16381                                           ! 1814  outb(0x3c0,0x14);
16382                       00003CFE            .5B:
16383                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16384 3CFE           8B46         F6            mov	ax,-$A[bp]
16385 3D01           40                         inc	ax
16386 3D02           8946         F6            mov	-$A[bp],ax
16387                       00003D05            .5C:
16388                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16389 3D05           8B46         F6            mov	ax,-$A[bp]
16390 3D08           3D                   0013  cmp	ax,*$13
16391 3D0B           76           C0            jbe	.5D
16392                       00003D0D            .5E:
16393                       00003D0D            .5A:
16394                                           ! Debug: list int = const $14 (used reg = )
16395 3D0D           B8                   0014  mov	ax,*$14
16396 3D10           50                         push	ax
16397                                           ! Debug: list int = const $3C0 (used reg = )
16398 3D11           B8                   03C0  mov	ax,#$3C0
16399 3D14           50                         push	ax
16400                                           ! Debug: func () void = outb+0 (used reg = )
16401 3D15           E8         3DF5            call	_outb
16402 3D18           83C4                   04  add	sp,*4
16403                                           !BCC_EOS
16404                                           ! 1815  outb(0x3c0,0x00);
16405                                           ! Debug: list int = const 0 (used reg = )
16406 3D1B           31C0                       xor	ax,ax
16407 3D1D           50                         push	ax
16408                                           ! Debug: list int = const $3C0 (used reg = )
16409 3D1E           B8                   03C0  mov	ax,#$3C0
16410 3D21           50                         push	ax
16411                                           ! Debug: func () void = outb+0 (used reg = )
16412 3D22           E8         3DE8            call	_outb
16413 3D25           83C4                   04  add	sp,*4
16414                                           !BCC_EOS
16415                                           ! 1816  outb(0x3c4,0);
16416                                           ! Debug: list int = const 0 (used reg = )
16417 3D28           31C0                       xor	ax,ax
16418 3D2A           50                         push	ax
16419                                           ! Debug: list int = const $3C4 (used reg = )
16420 3D2B           B8                   03C4  mov	ax,#$3C4
16421 3D2E           50                         push	ax
16422                                           ! Debug: func () void = outb+0 (used reg = )
16423 3D2F           E8         3DDB            call	_outb
16424 3D32           83C4                   04  add	sp,*4
16425                                           !BCC_EOS
16426                                           ! 1817  outb(0x3c5,0x03);
16427                                           ! Debug: list int = const 3 (used reg = )
16428 3D35           B8                   0003  mov	ax,*3
16429 3D38           50                         push	ax
16430                                           ! Debug: list int = const $3C5 (used reg = )
16431 3D39           B8                   03C5  mov	ax,#$3C5
16432 3D3C           50                         push	ax
16433                                           ! Debug: func () void = outb+0 (used reg = )
16434 3D3D           E8         3DCD            call	_outb
16435 3D40           83C4                   04  add	sp,*4
16436                                           !BCC_EOS
16437                                           ! 1818  for(i=1;i<=4;i++)
16438                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16439 3D43           B8                   0001  mov	ax,*1
16440 3D46           8946         F6            mov	-$A[bp],ax
16441                                           !BCC_EOS
16442                                           !BCC_EOS
16443                                           ! 1819   {outb(0x3c4,i);
16444 3D49           EB           3F            jmp .61
16445                       00003D4B            .62:
16446                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16447 3D4B           FF76         F6            push	-$A[bp]
16448                                           ! Debug: list int = const $3C4 (used reg = )
16449 3D4E           B8                   03C4  mov	ax,#$3C4
16450 3D51           50                         push	ax
16451                                           ! Debug: func () void = outb+0 (used reg = )
16452 3D52           E8         3DB8            call	_outb
16453 3D55           83C4                   04  add	sp,*4
16454                                           !BCC_EOS
16455                                           ! 1820    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16456                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16457 3D58           8B46         F6            mov	ax,-$A[bp]
16458 3D5B           48                         dec	ax
16459 3D5C           50                         push	ax
16460                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16461 3D5D           8A46         F9            mov	al,-7[bp]
16462 3D60           30E4                       xor	ah,ah
16463 3D62           B1                     06  mov	cl,*6
16464 3D64           D3E0                       shl	ax,cl
16465 3D66           89C3                       mov	bx,ax
16466 3D68           81C3                 026E  add	bx,#_video_param_table
16467                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16468 3D6C           8B46         E8            mov	ax,-$18[bp]
16469 3D6F           01C3                       add	bx,ax
16470 3D71           44                         inc	sp
16471 3D72           44                         inc	sp
16472                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16473 3D73           8A47         05            mov	al,5[bx]
16474 3D76           30E4                       xor	ah,ah
16475 3D78           50                         push	ax
16476                                           ! Debug: list int = const $3C5 (used reg = )
16477 3D79           B8                   03C5  mov	ax,#$3C5
16478 3D7C           50                         push	ax
16479                                           ! Debug: func () void = outb+0 (used reg = )
16480 3D7D           E8         3D8D            call	_outb
16481 3D80           83C4                   04  add	sp,*4
16482                                           !BCC_EOS
16483                                           ! 1821   }
16484                                           ! 1822  for(i=0;i<=8;i++)
16485                       00003D83            .60:
16486                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16487 3D83           8B46         F6            mov	ax,-$A[bp]
16488 3D86           40                         inc	ax
16489 3D87           8946         F6            mov	-$A[bp],ax
16490                       00003D8A            .61:
16491                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16492 3D8A           8B46         F6            mov	ax,-$A[bp]
16493 3D8D           3D                   0004  cmp	ax,*4
16494 3D90           76           B9            jbe	.62
16495                       00003D92            .63:
16496                       00003D92            .5F:
16497                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16498 3D92           31C0                       xor	ax,ax
16499 3D94           8946         F6            mov	-$A[bp],ax
16500                                           !BCC_EOS
16501                                           !BCC_EOS
16502                                           ! 1823   {outb(0x3ce,i);
16503 3D97           EB           38            jmp .66
16504                       00003D99            .67:
16505                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16506 3D99           FF76         F6            push	-$A[bp]
16507                                           ! Debug: list int = const $3CE (used reg = )
16508 3D9C           B8                   03CE  mov	ax,#$3CE
16509 3D9F           50                         push	ax
16510                                           ! Debug: func () void = outb+0 (used reg = )
16511 3DA0           E8         3D6A            call	_outb
16512 3DA3           83C4                   04  add	sp,*4
16513                                           !BCC_EOS
16514                                           ! 1824    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16515                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16516 3DA6           8A46         F9            mov	al,-7[bp]
16517 3DA9           30E4                       xor	ah,ah
16518 3DAB           B1                     06  mov	cl,*6
16519 3DAD           D3E0                       shl	ax,cl
16520 3DAF           89C3                       mov	bx,ax
16521 3DB1           81C3                 026E  add	bx,#_video_param_table
16522                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16523 3DB5           8B46         F6            mov	ax,-$A[bp]
16524 3DB8           01C3                       add	bx,ax
16525                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16526 3DBA           8A47         37            mov	al,$37[bx]
16527 3DBD           30E4                       xor	ah,ah
16528 3DBF           50                         push	ax
16529                                           ! Debug: list int = const $3CF (used reg = )
16530 3DC0           B8                   03CF  mov	ax,#$3CF
16531 3DC3           50                         push	ax
16532                                           ! Debug: func () void = outb+0 (used reg = )
16533 3DC4           E8         3D46            call	_outb
16534 3DC7           83C4                   04  add	sp,*4
16535                                           !BCC_EOS
16536                                           ! 1825   }
16537                                           ! 1826  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
16538                       00003DCA            .65:
16539                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16540 3DCA           8B46         F6            mov	ax,-$A[bp]
16541 3DCD           40                         inc	ax
16542 3DCE           8946         F6            mov	-$A[bp],ax
16543                       00003DD1            .66:
16544                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
16545 3DD1           8B46         F6            mov	ax,-$A[bp]
16546 3DD4           3D                   0008  cmp	ax,*8
16547 3DD7           76           C0            jbe	.67
16548                       00003DD9            .68:
16549                       00003DD9            .64:
16550                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16551 3DD9           8A46         FE            mov	al,-2[bp]
16552 3DDC           30E4                       xor	ah,ah
16553 3DDE           B1                     03  mov	cl,*3
16554 3DE0           D3E0                       shl	ax,cl
16555 3DE2           89C3                       mov	bx,ax
16556 3DE4           81C3                 01DA  add	bx,#_vga_modes
16557                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
16558 3DE8           8A47         02            mov	al,2[bx]
16559 3DEB           3C                     01  cmp	al,*1
16560 3DED           75           05            jne 	.69
16561                       00003DEF            .6A:
16562 3DEF           B8                   03B4  mov	ax,#$3B4
16563 3DF2           EB           03            jmp .6B
16564                       00003DF4            .69:
16565 3DF4           B8                   03D4  mov	ax,#$3D4
16566                       00003DF7            .6B:
16567                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
16568 3DF7           8946         EA            mov	-$16[bp],ax
16569                                           !BCC_EOS
16570                                           ! 1827  outw(crtc_addr,0x0011);
16571                                           ! Debug: list int = const $11 (used reg = )
16572 3DFA           B8                   0011  mov	ax,*$11
16573 3DFD           50                         push	ax
16574                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16575 3DFE           FF76         EA            push	-$16[bp]
16576                                           ! Debug: func () void = outw+0 (used reg = )
16577 3E01           E8         3D19            call	_outw
16578 3E04           83C4                   04  add	sp,*4
16579                                           !BCC_EOS
16580                                           ! 1828  for(i=0;i<=0x18;i++)
16581                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16582 3E07           31C0                       xor	ax,ax
16583 3E09           8946         F6            mov	-$A[bp],ax
16584                                           !BCC_EOS
16585                                           !BCC_EOS
16586                                           ! 1829   {outb(crtc_addr,i);
16587 3E0C           EB           38            jmp .6E
16588                       00003E0E            .6F:
16589                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16590 3E0E           FF76         F6            push	-$A[bp]
16591                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16592 3E11           FF76         EA            push	-$16[bp]
16593                                           ! Debug: func () void = outb+0 (used reg = )
16594 3E14           E8         3CF6            call	_outb
16595 3E17           83C4                   04  add	sp,*4
16596                                           !BCC_EOS
16597                                           ! 1830    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
16598                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16599 3E1A           8A46         F9            mov	al,-7[bp]
16600 3E1D           30E4                       xor	ah,ah
16601 3E1F           B1                     06  mov	cl,*6
16602 3E21           D3E0                       shl	ax,cl
16603 3E23           89C3                       mov	bx,ax
16604 3E25           81C3                 026E  add	bx,#_video_param_table
16605                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
16606 3E29           8B46         F6            mov	ax,-$A[bp]
16607 3E2C           01C3                       add	bx,ax
16608                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
16609 3E2E           8A47         0A            mov	al,$A[bx]
16610 3E31           30E4                       xor	ah,ah
16611 3E33           50                         push	ax
16612                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16613 3E34           8B46         EA            mov	ax,-$16[bp]
16614                                           ! Debug: list unsigned int = ax+1 (used reg = )
16615 3E37           40                         inc	ax
16616 3E38           50                         push	ax
16617                                           ! Debug: func () void = outb+0 (used reg = )
16618 3E39           E8         3CD1            call	_outb
16619 3E3C           83C4                   04  add	sp,*4
16620                                           !BCC_EOS
16621                                           ! 1831   }
16622                                           ! 1832  outb(0x3c2,video_param_table[vpti].miscreg);
16623                       00003E3F            .6D:
16624                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16625 3E3F           8B46         F6            mov	ax,-$A[bp]
16626 3E42           40                         inc	ax
16627 3E43           8946         F6            mov	-$A[bp],ax
16628                       00003E46            .6E:
16629                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
16630 3E46           8B46         F6            mov	ax,-$A[bp]
16631 3E49           3D                   0018  cmp	ax,*$18
16632 3E4C           76           C0            jbe	.6F
16633                       00003E4E            .70:
16634                       00003E4E            .6C:
16635                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16636 3E4E           8A46         F9            mov	al,-7[bp]
16637 3E51           30E4                       xor	ah,ah
16638 3E53           B1                     06  mov	cl,*6
16639 3E55           D3E0                       shl	ax,cl
16640 3E57           89C3                       mov	bx,ax
16641 3E59           81C3                 026E  add	bx,#_video_param_table
16642                                           ! Debug: list unsigned char = [bx+9] (used reg = )
16643 3E5D           8A47         09            mov	al,9[bx]
16644 3E60           30E4                       xor	ah,ah
16645 3E62           50                         push	ax
16646                                           ! Debug: list int = const $3C2 (used reg = )
16647 3E63           B8                   03C2  mov	ax,#$3C2
16648 3E66           50                         push	ax
16649                                           ! Debug: func () void = outb+0 (used reg = )
16650 3E67           E8         3CA3            call	_outb
16651 3E6A           83C4                   04  add	sp,*4
16652                                           !BCC_EOS
16653                                           ! 1833  outb(0x3c0,0x20);
16654                                           ! Debug: list int = const $20 (used reg = )
16655 3E6D           B8                   0020  mov	ax,*$20
16656 3E70           50                         push	ax
16657                                           ! Debug: list int = const $3C0 (used reg = )
16658 3E71           B8                   03C0  mov	ax,#$3C0
16659 3E74           50                         push	ax
16660                                           ! Debug: func () void = outb+0 (used reg = )
16661 3E75           E8         3C95            call	_outb
16662 3E78           83C4                   04  add	sp,*4
16663                                           !BCC_EOS
16664                                           ! 1834  inb(0x3da);
16665                                           ! Debug: list int = const $3DA (used reg = )
16666 3E7B           B8                   03DA  mov	ax,#$3DA
16667 3E7E           50                         push	ax
16668                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16669 3E7F           E8         3C75            call	_inb
16670 3E82           44                         inc	sp
16671 3E83           44                         inc	sp
16672                                           !BCC_EOS
16673                                           ! 1835  if(noclearmem==0x00)
16674                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
16675 3E84           8A46         FF            mov	al,-1[bp]
16676 3E87           84C0                       test	al,al
16677 3E89         0F85         00C1            bne 	.71
16678                       00003E8D            .72:
16679                                           ! 1836   {
16680                                           ! 1837    if(vga_modes[line].class==0x00)
16681                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16682 3E8D           8A46         FE            mov	al,-2[bp]
16683 3E90           30E4                       xor	ah,ah
16684 3E92           B1                     03  mov	cl,*3
16685 3E94           D3E0                       shl	ax,cl
16686 3E96           89C3                       mov	bx,ax
16687 3E98           81C3                 01DA  add	bx,#_vga_modes
16688                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
16689 3E9C           8A47         01            mov	al,1[bx]
16690 3E9F           84C0                       test	al,al
16691 3EA1           75           26            jne 	.73
16692                       00003EA3            .74:
16693                                           ! 1838     {
16694                                           ! 1839      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
16695                                           ! Debug: list int = const $4000 (used reg = )
16696 3EA3           B8                   4000  mov	ax,#$4000
16697 3EA6           50                         push	ax
16698                                           ! Debug: list int = const $720 (used reg = )
16699 3EA7           B8                   0720  mov	ax,#$720
16700 3EAA           50                         push	ax
16701                                           ! Debug: list int = const 0 (used reg = )
16702 3EAB           31C0                       xor	ax,ax
16703 3EAD           50                         push	ax
16704                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16705 3EAE           8A46         FE            mov	al,-2[bp]
16706 3EB1           30E4                       xor	ah,ah
16707 3EB3           B1                     03  mov	cl,*3
16708 3EB5           D3E0                       shl	ax,cl
16709 3EB7           89C3                       mov	bx,ax
16710 3EB9           81C3                 01DA  add	bx,#_vga_modes
16711                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16712 3EBD           FF77         04            push	4[bx]
16713                                           ! Debug: func () void = memsetw+0 (used reg = )
16714 3EC0           E8         3B59            call	_memsetw
16715 3EC3           83C4                   08  add	sp,*8
16716                                           !BCC_EOS
16717                                           ! 1840     }
16718                                           ! 1841    else
16719                                           ! 1842     {
16720 3EC6           E9         0085            br 	.75
16721                       00003EC9            .73:
16722                                           ! 1843      if(mode<0x0d)
16723                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
16724 3EC9           8A46         04            mov	al,4[bp]
16725 3ECC           3C                     0D  cmp	al,*$D
16726 3ECE           73           24            jae 	.76
16727                       00003ED0            .77:
16728                                           ! 1844       {
16729                                           ! 1845        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
16730                                           ! Debug: list int = const $4000 (used reg = )
16731 3ED0           B8                   4000  mov	ax,#$4000
16732 3ED3           50                         push	ax
16733                                           ! Debug: list int = const 0 (used reg = )
16734 3ED4           31C0                       xor	ax,ax
16735 3ED6           50                         push	ax
16736                                           ! Debug: list int = const 0 (used reg = )
16737 3ED7           31C0                       xor	ax,ax
16738 3ED9           50                         push	ax
16739                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16740 3EDA           8A46         FE            mov	al,-2[bp]
16741 3EDD           30E4                       xor	ah,ah
16742 3EDF           B1                     03  mov	cl,*3
16743 3EE1           D3E0                       shl	ax,cl
16744 3EE3           89C3                       mov	bx,ax
16745 3EE5           81C3                 01DA  add	bx,#_vga_modes
16746                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16747 3EE9           FF77         04            push	4[bx]
16748                                           ! Debug: func () void = memsetw+0 (used reg = )
16749 3EEC           E8         3B2D            call	_memsetw
16750 3EEF           83C4                   08  add	sp,*8
16751                                           !BCC_EOS
16752                                           ! 1846       }
16753                                           ! 1847      else
16754                                           ! 1848       {
16755 3EF2           EB           5A            jmp .78
16756                       00003EF4            .76:
16757                                           ! 1849        outb( 0x3c4, 0x02 );
16758                                           ! Debug: list int = const 2 (used reg = )
16759 3EF4           B8                   0002  mov	ax,*2
16760 3EF7           50                         push	ax
16761                                           ! Debug: list int = const $3C4 (used reg = )
16762 3EF8           B8                   03C4  mov	ax,#$3C4
16763 3EFB           50                         push	ax
16764                                           ! Debug: func () void = outb+0 (used reg = )
16765 3EFC           E8         3C0E            call	_outb
16766 3EFF           83C4                   04  add	sp,*4
16767                                           !BCC_EOS
16768                                           ! 1850        mmask = inb( 0x3c5 );
16769                                           ! Debug: list int = const $3C5 (used reg = )
16770 3F02           B8                   03C5  mov	ax,#$3C5
16771 3F05           50                         push	ax
16772                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16773 3F06           E8         3BEE            call	_inb
16774 3F09           44                         inc	sp
16775 3F0A           44                         inc	sp
16776                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
16777 3F0B           8846         FD            mov	-3[bp],al
16778                                           !BCC_EOS
16779                                           ! 1851        outb( 0x3c5, 0x0f );
16780                                           ! Debug: list int = const $F (used reg = )
16781 3F0E           B8                   000F  mov	ax,*$F
16782 3F11           50                         push	ax
16783                                           ! Debug: list int = const $3C5 (used reg = )
16784 3F12           B8                   03C5  mov	ax,#$3C5
16785 3F15           50                         push	ax
16786                                           ! Debug: func () void = outb+0 (used reg = )
16787 3F16           E8         3BF4            call	_outb
16788 3F19           83C4                   04  add	sp,*4
16789                                           !BCC_EOS
16790                                           ! 1852        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
16791                                           ! Debug: list unsigned int = const $8000 (used reg = )
16792 3F1C           B8                   8000  mov	ax,#$8000
16793 3F1F           50                         push	ax
16794                                           ! Debug: list int = const 0 (used reg = )
16795 3F20           31C0                       xor	ax,ax
16796 3F22           50                         push	ax
16797                                           ! Debug: list int = const 0 (used reg = )
16798 3F23           31C0                       xor	ax,ax
16799 3F25           50                         push	ax
16800                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16801 3F26           8A46         FE            mov	al,-2[bp]
16802 3F29           30E4                       xor	ah,ah
16803 3F2B           B1                     03  mov	cl,*3
16804 3F2D           D3E0                       shl	ax,cl
16805 3F2F           89C3                       mov	bx,ax
16806 3F31           81C3                 01DA  add	bx,#_vga_modes
16807                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16808 3F35           FF77         04            push	4[bx]
16809                                           ! Debug: func () void = memsetw+0 (used reg = )
16810 3F38           E8         3AE1            call	_memsetw
16811 3F3B           83C4                   08  add	sp,*8
16812                                           !BCC_EOS
16813                                           ! 1853        outb( 0x3c5, mmask );
16814                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
16815 3F3E           8A46         FD            mov	al,-3[bp]
16816 3F41           30E4                       xor	ah,ah
16817 3F43           50                         push	ax
16818                                           ! Debug: list int = const $3C5 (used reg = )
16819 3F44           B8                   03C5  mov	ax,#$3C5
16820 3F47           50                         push	ax
16821                                           ! Debug: func () void = outb+0 (used reg = )
16822 3F48           E8         3BC2            call	_outb
16823 3F4B           83C4                   04  add	sp,*4
16824                                           !BCC_EOS
16825                                           ! 1854       }
16826                                           ! 1855     }
16827                       00003F4E            .78:
16828                                           ! 1856   }
16829                       00003F4E            .75:
16830                                           ! 1857  write_byte(0x40,0x49,mode);
16831                       00003F4E            .71:
16832                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16833 3F4E           8A46         04            mov	al,4[bp]
16834 3F51           30E4                       xor	ah,ah
16835 3F53           50                         push	ax
16836                                           ! Debug: list int = const $49 (used reg = )
16837 3F54           B8                   0049  mov	ax,*$49
16838 3F57           50                         push	ax
16839                                           ! Debug: list int = const $40 (used reg = )
16840 3F58           B8                   0040  mov	ax,*$40
16841 3F5B           50                         push	ax
16842                                           ! Debug: func () void = write_byte+0 (used reg = )
16843 3F5C           E8         3B68            call	_write_byte
16844 3F5F           83C4                   06  add	sp,*6
16845                                           !BCC_EOS
16846                                           ! 1858  write_word(0x40,0x4A,twidth);
16847                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
16848 3F62           FF76         F4            push	-$C[bp]
16849                                           ! Debug: list int = const $4A (used reg = )
16850 3F65           B8                   004A  mov	ax,*$4A
16851 3F68           50                         push	ax
16852                                           ! Debug: list int = const $40 (used reg = )
16853 3F69           B8                   0040  mov	ax,*$40
16854 3F6C           50                         push	ax
16855                                           ! Debug: func () void = write_word+0 (used reg = )
16856 3F6D           E8         3B6F            call	_write_word
16857 3F70           83C4                   06  add	sp,*6
16858                                           !BCC_EOS
16859                                           ! 1859  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
16860                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16861 3F73           8A46         F9            mov	al,-7[bp]
16862 3F76           30E4                       xor	ah,ah
16863 3F78           B1                     06  mov	cl,*6
16864 3F7A           D3E0                       shl	ax,cl
16865 3F7C           89C3                       mov	bx,ax
16866 3F7E           81C3                 026E  add	bx,#_video_param_table
16867                                           ! Debug: address unsigned char = [bx+3] (used reg = )
16868                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
16869                                           ! Debug: list unsigned short = [bx+3] (used reg = )
16870 3F82           FF77         03            push	3[bx]
16871                                           ! Debug: list int = const $4C (used reg = )
16872 3F85           B8                   004C  mov	ax,*$4C
16873 3F88           50                         push	ax
16874                                           ! Debug: list int = const $40 (used reg = )
16875 3F89           B8                   0040  mov	ax,*$40
16876 3F8C           50                         push	ax
16877                                           ! Debug: func () void = write_word+0 (used reg = )
16878 3F8D           E8         3B4F            call	_write_word
16879 3F90           83C4                   06  add	sp,*6
16880                                           !BCC_EOS
16881                                           ! 1860  write_word(0x40,0x63,crtc_addr);
16882                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
16883 3F93           FF76         EA            push	-$16[bp]
16884                                           ! Debug: list int = const $63 (used reg = )
16885 3F96           B8                   0063  mov	ax,*$63
16886 3F99           50                         push	ax
16887                                           ! Debug: list int = const $40 (used reg = )
16888 3F9A           B8                   0040  mov	ax,*$40
16889 3F9D           50                         push	ax
16890                                           ! Debug: func () void = write_word+0 (used reg = )
16891 3F9E           E8         3B3E            call	_write_word
16892 3FA1           83C4                   06  add	sp,*6
16893                                           !BCC_EOS
16894                                           ! 1861  write_byte(0x40,0x84,theightm1);
16895                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
16896 3FA4           FF76         F2            push	-$E[bp]
16897                                           ! Debug: list int = const $84 (used reg = )
16898 3FA7           B8                   0084  mov	ax,#$84
16899 3FAA           50                         push	ax
16900                                           ! Debug: list int = const $40 (used reg = )
16901 3FAB           B8                   0040  mov	ax,*$40
16902 3FAE           50                         push	ax
16903                                           ! Debug: func () void = write_byte+0 (used reg = )
16904 3FAF           E8         3B15            call	_write_byte
16905 3FB2           83C4                   06  add	sp,*6
16906                                           !BCC_EOS
16907                                           ! 1862  write_word(0x40,0x85,cheight);
16908                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
16909 3FB5           FF76         F0            push	-$10[bp]
16910                                           ! Debug: list int = const $85 (used reg = )
16911 3FB8           B8                   0085  mov	ax,#$85
16912 3FBB           50                         push	ax
16913                                           ! Debug: list int = const $40 (used reg = )
16914 3FBC           B8                   0040  mov	ax,*$40
16915 3FBF           50                         push	ax
16916                                           ! Debug: func () void = write_word+0 (used reg = )
16917 3FC0           E8         3B1C            call	_write_word
16918 3FC3           83C4                   06  add	sp,*6
16919                                           !BCC_EOS
16920                                           ! 1863  write_byte(0x40,0x87,(0x60|noclearmem));
16921                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
16922                                           ! Debug: expression subtree swapping
16923 3FC6           8A46         FF            mov	al,-1[bp]
16924 3FC9           0C                     60  or	al,*$60
16925                                           ! Debug: list unsigned char = al+0 (used reg = )
16926 3FCB           30E4                       xor	ah,ah
16927 3FCD           50                         push	ax
16928                                           ! Debug: list int = const $87 (used reg = )
16929 3FCE           B8                   0087  mov	ax,#$87
16930 3FD1           50                         push	ax
16931                                           ! Debug: list int = const $40 (used reg = )
16932 3FD2           B8                   0040  mov	ax,*$40
16933 3FD5           50                         push	ax
16934                                           ! Debug: func () void = write_byte+0 (used reg = )
16935 3FD6           E8         3AEE            call	_write_byte
16936 3FD9           83C4                   06  add	sp,*6
16937                                           !BCC_EOS
16938                                           ! 1864  write_byte(0x40,0x88,0xF9);
16939                                           ! Debug: list int = const $F9 (used reg = )
16940 3FDC           B8                   00F9  mov	ax,#$F9
16941 3FDF           50                         push	ax
16942                                           ! Debug: list int = const $88 (used reg = )
16943 3FE0           B8                   0088  mov	ax,#$88
16944 3FE3           50                         push	ax
16945                                           ! Debug: list int = const $40 (used reg = )
16946 3FE4           B8                   0040  mov	ax,*$40
16947 3FE7           50                         push	ax
16948                                           ! Debug: func () void = write_byte+0 (used reg = )
16949 3FE8           E8         3ADC            call	_write_byte
16950 3FEB           83C4                   06  add	sp,*6
16951                                           !BCC_EOS
16952                                           ! 1865  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
16953                                           ! Debug: list int = const $89 (used reg = )
16954 3FEE           B8                   0089  mov	ax,#$89
16955 3FF1           50                         push	ax
16956                                           ! Debug: list int = const $40 (used reg = )
16957 3FF2           B8                   0040  mov	ax,*$40
16958 3FF5           50                         push	ax
16959                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16960 3FF6           E8         3AA8            call	_read_byte
16961 3FF9           83C4                   04  add	sp,*4
16962                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
16963 3FFC           24                     7F  and	al,*$7F
16964                                           ! Debug: list unsigned char = al+0 (used reg = )
16965 3FFE           30E4                       xor	ah,ah
16966 4000           50                         push	ax
16967                                           ! Debug: list int = const $89 (used reg = )
16968 4001           B8                   0089  mov	ax,#$89
16969 4004           50                         push	ax
16970                                           ! Debug: list int = const $40 (used reg = )
16971 4005           B8                   0040  mov	ax,*$40
16972 4008           50                         push	ax
16973                                           ! Debug: func () void = write_byte+0 (used reg = )
16974 4009           E8         3ABB            call	_write_byte
16975 400C           83C4                   06  add	sp,*6
16976                                           !BCC_EOS
16977                                           ! 1866  write_byte(0x40,0x8A,0x08);
16978                                           ! Debug: list int = const 8 (used reg = )
16979 400F           B8                   0008  mov	ax,*8
16980 4012           50                         push	ax
16981                                           ! Debug: list int = const $8A (used reg = )
16982 4013           B8                   008A  mov	ax,#$8A
16983 4016           50                         push	ax
16984                                           ! Debug: list int = const $40 (used reg = )
16985 4017           B8                   0040  mov	ax,*$40
16986 401A           50                         push	ax
16987                                           ! Debug: func () void = write_byte+0 (used reg = )
16988 401B           E8         3AA9            call	_write_byte
16989 401E           83C4                   06  add	sp,*6
16990                                           !BCC_EOS
16991                                           ! 1867  write_word(0x40,0xA8, video_save_pointer_table);
16992                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
16993 4021           BB                   35D7  mov	bx,#_video_save_pointer_table
16994 4024           53                         push	bx
16995                                           ! Debug: list int = const $A8 (used reg = )
16996 4025           B8                   00A8  mov	ax,#$A8
16997 4028           50                         push	ax
16998                                           ! Debug: list int = const $40 (used reg = )
16999 4029           B8                   0040  mov	ax,*$40
17000 402C           50                         push	ax
17001                                           ! Debug: func () void = write_word+0 (used reg = )
17002 402D           E8         3AAF            call	_write_word
17003 4030           83C4                   06  add	sp,*6
17004                                           !BCC_EOS
17005                                           ! 1868  write_word(0x40,0xA8 +2, 0xc000);
17006                                           ! Debug: list unsigned int = const $C000 (used reg = )
17007 4033           B8                   C000  mov	ax,#$C000
17008 4036           50                         push	ax
17009                                           ! Debug: list int = const $AA (used reg = )
17010 4037           B8                   00AA  mov	ax,#$AA
17011 403A           50                         push	ax
17012                                           ! Debug: list int = const $40 (used reg = )
17013 403B           B8                   0040  mov	ax,*$40
17014 403E           50                         push	ax
17015                                           ! Debug: func () void = write_word+0 (used reg = )
17016 403F           E8         3A9D            call	_write_word
17017 4042           83C4                   06  add	sp,*6
17018                                           !BCC_EOS
17019                                           ! 1869  write_byte(0x40,0x65,0x00);
17020                                           ! Debug: list int = const 0 (used reg = )
17021 4045           31C0                       xor	ax,ax
17022 4047           50                         push	ax
17023                                           ! Debug: list int = const $65 (used reg = )
17024 4048           B8                   0065  mov	ax,*$65
17025 404B           50                         push	ax
17026                                           ! Debug: list int = const $40 (used reg = )
17027 404C           B8                   0040  mov	ax,*$40
17028 404F           50                         push	ax
17029                                           ! Debug: func () void = write_byte+0 (used reg = )
17030 4050           E8         3A74            call	_write_byte
17031 4053           83C4                   06  add	sp,*6
17032                                           !BCC_EOS
17033                                           ! 1870  write_byte(0x40,0x66,0x00);
17034                                           ! Debug: list int = const 0 (used reg = )
17035 4056           31C0                       xor	ax,ax
17036 4058           50                         push	ax
17037                                           ! Debug: list int = const $66 (used reg = )
17038 4059           B8                   0066  mov	ax,*$66
17039 405C           50                         push	ax
17040                                           ! Debug: list int = const $40 (used reg = )
17041 405D           B8                   0040  mov	ax,*$40
17042 4060           50                         push	ax
17043                                           ! Debug: func () void = write_byte+0 (used reg = )
17044 4061           E8         3A63            call	_write_byte
17045 4064           83C4                   06  add	sp,*6
17046                                           !BCC_EOS
17047                                           ! 1871  if(vga_modes[line].class==0x00)
17048                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17049 4067           8A46         FE            mov	al,-2[bp]
17050 406A           30E4                       xor	ah,ah
17051 406C           B1                     03  mov	cl,*3
17052 406E           D3E0                       shl	ax,cl
17053 4070           89C3                       mov	bx,ax
17054 4072           81C3                 01DA  add	bx,#_vga_modes
17055                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17056 4076           8A47         01            mov	al,1[bx]
17057 4079           84C0                       test	al,al
17058 407B           75           0E            jne 	.79
17059                       0000407D            .7A:
17060                                           ! 1872   {
17061                                           ! 1873    biosfn_set_cursor_shape(0x06,0x07);
17062                                           ! Debug: list int = const 7 (used reg = )
17063 407D           B8                   0007  mov	ax,*7
17064 4080           50                         push	ax
17065                                           ! Debug: list int = const 6 (used reg = )
17066 4081           B8                   0006  mov	ax,*6
17067 4084           50                         push	ax
17068                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17069 4085           E8         00BA            call	_biosfn_set_cursor_shape
17070 4088           83C4                   04  add	sp,*4
17071                                           !BCC_EOS
17072                                           ! 1874   }
17073                                           ! 1875  for(i=0;i<8;i++)
17074                       0000408B            .79:
17075                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17076 408B           31C0                       xor	ax,ax
17077 408D           8946         F6            mov	-$A[bp],ax
17078                                           !BCC_EOS
17079                                           !BCC_EOS
17080                                           ! 1876   biosfn_set_cursor_pos(i,0x0000);
17081 4090           EB           13            jmp .7D
17082                       00004092            .7E:
17083                                           ! Debug: list int = const 0 (used reg = )
17084 4092           31C0                       xor	ax,ax
17085 4094           50                         push	ax
17086                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17087 4095           FF76         F6            push	-$A[bp]
17088                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17089 4098           E8         01C2            call	_biosfn_set_cursor_pos
17090 409B           83C4                   04  add	sp,*4
17091                                           !BCC_EOS
17092                                           ! 1877  biosfn_set_active_page(0x00);
17093                       0000409E            .7C:
17094                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17095 409E           8B46         F6            mov	ax,-$A[bp]
17096 40A1           40                         inc	ax
17097 40A2           8946         F6            mov	-$A[bp],ax
17098                       000040A5            .7D:
17099                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17100 40A5           8B46         F6            mov	ax,-$A[bp]
17101 40A8           3D                   0008  cmp	ax,*8
17102 40AB           72           E5            jb 	.7E
17103                       000040AD            .7F:
17104                       000040AD            .7B:
17105                                           ! Debug: list int = const 0 (used reg = )
17106 40AD           31C0                       xor	ax,ax
17107 40AF           50                         push	ax
17108                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17109 40B0           E8         031F            call	_biosfn_set_active_page
17110 40B3           44                         inc	sp
17111 40B4           44                         inc	sp
17112                                           !BCC_EOS
17113                                           ! 1878  if(vga_modes[line].class==0x00)
17114                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17115 40B5           8A46         FE            mov	al,-2[bp]
17116 40B8           30E4                       xor	ah,ah
17117 40BA           B1                     03  mov	cl,*3
17118 40BC           D3E0                       shl	ax,cl
17119 40BE           89C3                       mov	bx,ax
17120 40C0           81C3                 01DA  add	bx,#_vga_modes
17121                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17122 40C4           8A47         01            mov	al,1[bx]
17123 40C7           84C0                       test	al,al
17124 40C9           75           0E            jne 	.80
17125                       000040CB            .81:
17126                                           ! 1879   {
17127                                           ! 1880 #asm
17128                                           !BCC_EOS
17129                                           !BCC_ASM
17130                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17131                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17132                       00000008            _biosfn_set_video_mode.theightm1	set	8
17133                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17134                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17135                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17136                       00000014            _biosfn_set_video_mode.line	set	$14
17137                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17138                       00000006            _biosfn_set_video_mode.cheight	set	6
17139                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17140                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17141                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17142                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17143                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17144                       0000000C            _biosfn_set_video_mode.i	set	$C
17145                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17146                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17147                       00000004            .biosfn_set_video_mode.mode	set	4
17148                       00000010            _biosfn_set_video_mode.palette	set	$10
17149                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17150                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17151                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17152                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17153                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17154                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17155                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17156                       00000013            _biosfn_set_video_mode.mmask	set	$13
17157                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17158                                             ;; copy and activate 8x16 font
17159 40CB           B8                   1104    mov ax, #0x1104
17160 40CE           B3                     00    mov bl, #0x00
17161 40D0           CD                     10    int #0x10
17162 40D2           B8                   1103    mov ax, #0x1103
17163 40D5           B3                     00    mov bl, #0x00
17164 40D7           CD                     10    int #0x10
17165                                           ! 1888 endasm
17166                                           !BCC_ENDASM
17167                                           !BCC_EOS
17168                                           ! 1889   }
17169                                           ! 1890 #asm
17170                       000040D9            .80:
17171                                           !BCC_EOS
17172                                           !BCC_ASM
17173                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17174                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17175                       00000008            _biosfn_set_video_mode.theightm1	set	8
17176                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17177                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17178                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17179                       00000014            _biosfn_set_video_mode.line	set	$14
17180                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17181                       00000006            _biosfn_set_video_mode.cheight	set	6
17182                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17183                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17184                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17185                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17186                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17187                       0000000C            _biosfn_set_video_mode.i	set	$C
17188                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17189                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17190                       00000004            .biosfn_set_video_mode.mode	set	4
17191                       00000010            _biosfn_set_video_mode.palette	set	$10
17192                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17193                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17194                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17195                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17196                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17197                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17198                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17199                       00000013            _biosfn_set_video_mode.mmask	set	$13
17200                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17201                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   40D9           1E                           push ds
 +a   40DA           31C0                         xor ax, ax
 +a   40DC           8ED8                         mov ds, ax
 +a   40DE           B8                   133E    mov ax,  #_vgafont8+128*8
 +a   40E1           A3         007C              mov 0x1f*4, ax
 +a   40E4           B8                   C000    mov ax,  #0xC000
 +a   40E7           A3         007E              mov 0x1f*4+2, ax
 +a   40EA           1F                           pop ds
17202                                           ! 1892 endasm
17203                                           !BCC_ENDASM
17204                                           !BCC_EOS
17205                                           ! 1893   switch(cheight)
17206 40EB           8B46         F0            mov	ax,-$10[bp]
17207                                           ! 1894    {case 8:
17208 40EE           E9         003E            br 	.84
17209                                           ! 1895 #asm
17210                       000040F1            .85:
17211                                           !BCC_EOS
17212                                           !BCC_ASM
17213                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17214                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17215                       00000008            _biosfn_set_video_mode.theightm1	set	8
17216                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17217                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17218                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17219                       00000014            _biosfn_set_video_mode.line	set	$14
17220                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17221                       00000006            _biosfn_set_video_mode.cheight	set	6
17222                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17223                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17224                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17225                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17226                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17227                       0000000C            _biosfn_set_video_mode.i	set	$C
17228                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17229                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17230                       00000004            .biosfn_set_video_mode.mode	set	4
17231                       00000010            _biosfn_set_video_mode.palette	set	$10
17232                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17233                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17234                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17235                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17236                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17237                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17238                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17239                       00000013            _biosfn_set_video_mode.mmask	set	$13
17240                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17241                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   40F1           1E                           push ds
 +a   40F2           31C0                         xor ax, ax
 +a   40F4           8ED8                         mov ds, ax
 +a   40F6           B8                   0F3E    mov ax,  #_vgafont8
 +a   40F9           A3         010C              mov 0x43*4, ax
 +a   40FC           B8                   C000    mov ax,  #0xC000
 +a   40FF           A3         010E              mov 0x43*4+2, ax
 +a   4102           1F                           pop ds
17242                                           ! 1897 endasm
17243                                           !BCC_ENDASM
17244                                           !BCC_EOS
17245                                           ! 1898      break;
17246 4103           EB           39            jmp .82
17247                                           !BCC_EOS
17248                                           ! 1899     case 14:
17249                                           ! 1900 #asm
17250                       00004105            .86:
17251                                           !BCC_EOS
17252                                           !BCC_ASM
17253                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17254                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17255                       00000008            _biosfn_set_video_mode.theightm1	set	8
17256                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17257                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17258                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17259                       00000014            _biosfn_set_video_mode.line	set	$14
17260                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17261                       00000006            _biosfn_set_video_mode.cheight	set	6
17262                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17263                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17264                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17265                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17266                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17267                       0000000C            _biosfn_set_video_mode.i	set	$C
17268                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17269                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17270                       00000004            .biosfn_set_video_mode.mode	set	4
17271                       00000010            _biosfn_set_video_mode.palette	set	$10
17272                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17273                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17274                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17275                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17276                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17277                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17278                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17279                       00000013            _biosfn_set_video_mode.mmask	set	$13
17280                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17281                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   4105           1E                           push ds
 +a   4106           31C0                         xor ax, ax
 +a   4108           8ED8                         mov ds, ax
 +a   410A           B8                   173E    mov ax,  #_vgafont14
 +a   410D           A3         010C              mov 0x43*4, ax
 +a   4110           B8                   C000    mov ax,  #0xC000
 +a   4113           A3         010E              mov 0x43*4+2, ax
 +a   4116           1F                           pop ds
17282                                           ! 1902 endasm
17283                                           !BCC_ENDASM
17284                                           !BCC_EOS
17285                                           ! 1903      break;
17286 4117           EB           25            jmp .82
17287                                           !BCC_EOS
17288                                           ! 1904     case 16:
17289                                           ! 1905 #asm
17290                       00004119            .87:
17291                                           !BCC_EOS
17292                                           !BCC_ASM
17293                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17294                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17295                       00000008            _biosfn_set_video_mode.theightm1	set	8
17296                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17297                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17298                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17299                       00000014            _biosfn_set_video_mode.line	set	$14
17300                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17301                       00000006            _biosfn_set_video_mode.cheight	set	6
17302                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17303                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17304                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17305                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17306                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17307                       0000000C            _biosfn_set_video_mode.i	set	$C
17308                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17309                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17310                       00000004            .biosfn_set_video_mode.mode	set	4
17311                       00000010            _biosfn_set_video_mode.palette	set	$10
17312                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17313                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17314                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17315                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17316                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17317                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17318                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17319                       00000013            _biosfn_set_video_mode.mmask	set	$13
17320                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17321                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4119           1E                           push ds
 +a   411A           31C0                         xor ax, ax
 +a   411C           8ED8                         mov ds, ax
 +a   411E           B8                   253E    mov ax,  #_vgafont16
 +a   4121           A3         010C              mov 0x43*4, ax
 +a   4124           B8                   C000    mov ax,  #0xC000
 +a   4127           A3         010E              mov 0x43*4+2, ax
 +a   412A           1F                           pop ds
17322                                           ! 1907 endasm
17323                                           !BCC_ENDASM
17324                                           !BCC_EOS
17325                                           ! 1908      break;
17326 412B           EB           11            jmp .82
17327                                           !BCC_EOS
17328                                           ! 1909    }
17329                                           ! 1910 }
17330 412D           EB           0F            jmp .82
17331                       0000412F            .84:
17332 412F           2D                   0008  sub	ax,*8
17333 4132           74           BD            je 	.85
17334 4134           2D                   0006  sub	ax,*6
17335 4137           74           CC            je 	.86
17336 4139           2D                   0002  sub	ax,*2
17337 413C           74           DB            je 	.87
17338                       0000413E            .82:
17339                       FFFFFFE8            ..FFFD	=	-$18
17340 413E           89EC                       mov	sp,bp
17341 4140           5D                         pop	bp
17342 4141           C3                         ret
17343                                           ! 1911 static void biosfn_set_cursor_shape (CH,CL)
17344                                           ! Register BX used in function biosfn_set_video_mode
17345                                           ! 1912 Bit8u CH;Bit8u CL;
17346                       00004142            _biosfn_set_cursor_shape:
17347                                           !BCC_EOS
17348                                           !BCC_EOS
17349                                           ! 1913 {Bit16u cheight,curs,crtc_addr;
17350                                           !BCC_EOS
17351                                           ! 1914  Bit8u modeset_ctl;
17352                                           !BCC_EOS
17353                                           ! 1915  CH&=0x3f;
17354 4142           55                         push	bp
17355 4143           89E5                       mov	bp,sp
17356 4145           83C4                   F8  add	sp,*-8
17357                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17358 4148           8A46         04            mov	al,4[bp]
17359 414B           24                     3F  and	al,*$3F
17360 414D           8846         04            mov	4[bp],al
17361                                           !BCC_EOS
17362                                           ! 1916  CL&=0x1f;
17363                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17364 4150           8A46         06            mov	al,6[bp]
17365 4153           24                     1F  and	al,*$1F
17366 4155           8846         06            mov	6[bp],al
17367                                           !BCC_EOS
17368                                           ! 1917  curs=(CH<<8)+CL;
17369                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17370 4158           8A46         04            mov	al,4[bp]
17371 415B           30E4                       xor	ah,ah
17372 415D           88C4                       mov	ah,al
17373 415F           30C0                       xor	al,al
17374                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17375 4161           0246         06            add	al,6[bp]
17376 4164           80D4                   00  adc	ah,*0
17377                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17378 4167           8946         FC            mov	-4[bp],ax
17379                                           !BCC_EOS
17380                                           ! 1918  write_word(0x40,0x60,curs);
17381                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17382 416A           FF76         FC            push	-4[bp]
17383                                           ! Debug: list int = const $60 (used reg = )
17384 416D           B8                   0060  mov	ax,*$60
17385 4170           50                         push	ax
17386                                           ! Debug: list int = const $40 (used reg = )
17387 4171           B8                   0040  mov	ax,*$40
17388 4174           50                         push	ax
17389                                           ! Debug: func () void = write_word+0 (used reg = )
17390 4175           E8         3967            call	_write_word
17391 4178           83C4                   06  add	sp,*6
17392                                           !BCC_EOS
17393                                           ! 1919  modeset_ctl=read_byte(0x40,0x89);
17394                                           ! Debug: list int = const $89 (used reg = )
17395 417B           B8                   0089  mov	ax,#$89
17396 417E           50                         push	ax
17397                                           ! Debug: list int = const $40 (used reg = )
17398 417F           B8                   0040  mov	ax,*$40
17399 4182           50                         push	ax
17400                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17401 4183           E8         391B            call	_read_byte
17402 4186           83C4                   04  add	sp,*4
17403                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17404 4189           8846         F9            mov	-7[bp],al
17405                                           !BCC_EOS
17406                                           ! 1920  cheight = read_word(0x40,0x85);
17407                                           ! Debug: list int = const $85 (used reg = )
17408 418C           B8                   0085  mov	ax,#$85
17409 418F           50                         push	ax
17410                                           ! Debug: list int = const $40 (used reg = )
17411 4190           B8                   0040  mov	ax,*$40
17412 4193           50                         push	ax
17413                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17414 4194           E8         391D            call	_read_word
17415 4197           83C4                   04  add	sp,*4
17416                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17417 419A           8946         FE            mov	-2[bp],ax
17418                                           !BCC_EOS
17419                                           ! 1921  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17420                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17421 419D           8A46         F9            mov	al,-7[bp]
17422 41A0           24                     01  and	al,*1
17423 41A2           84C0                       test	al,al
17424 41A4           74           66            je  	.88
17425                       000041A6            .8C:
17426                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17427 41A6           8B46         FE            mov	ax,-2[bp]
17428 41A9           3D                   0008  cmp	ax,*8
17429 41AC           76           5E            jbe 	.88
17430                       000041AE            .8B:
17431                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17432 41AE           8A46         06            mov	al,6[bp]
17433 41B1           3C                     08  cmp	al,*8
17434 41B3           73           57            jae 	.88
17435                       000041B5            .8A:
17436                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17437 41B5           8A46         04            mov	al,4[bp]
17438 41B8           3C                     20  cmp	al,*$20
17439 41BA           73           50            jae 	.88
17440                       000041BC            .89:
17441                                           ! 1922   {
17442                                           ! 1923    if(CL!=(CH+1))
17443                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17444 41BC           8A46         04            mov	al,4[bp]
17445 41BF           30E4                       xor	ah,ah
17446                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17447                                           ! Debug: expression subtree swapping
17448 41C1           40                         inc	ax
17449 41C2           50                         push	ax
17450 41C3           8A46         06            mov	al,6[bp]
17451 41C6           30E4                       xor	ah,ah
17452 41C8           3B46         F6            cmp	ax,-$A[bp]
17453 41CB           8D66         F8            lea	sp,-8[bp]
17454 41CE           74           15            je  	.8D
17455                       000041D0            .8E:
17456                                           ! 1924     {
17457                                           ! 1925      CH = ((CH+1) * cheight / 8) -1;
17458                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17459 41D0           8A46         04            mov	al,4[bp]
17460 41D3           30E4                       xor	ah,ah
17461                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17462 41D5           40                         inc	ax
17463 41D6           8B4E         FE            mov	cx,-2[bp]
17464 41D9           F7E9                       imul	cx
17465                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17466 41DB           B1                     03  mov	cl,*3
17467 41DD           D3E8                       shr	ax,cl
17468                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17469                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17470 41DF           48                         dec	ax
17471 41E0           8846         04            mov	4[bp],al
17472                                           !BCC_EOS
17473                                           ! 1926     }
17474                                           ! 1927    else
17475                                           ! 1928     {
17476 41E3           EB           14            jmp .8F
17477                       000041E5            .8D:
17478                                           ! 1929      CH = ((CL+1) * cheight / 8) - 2;
17479                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17480 41E5           8A46         06            mov	al,6[bp]
17481 41E8           30E4                       xor	ah,ah
17482                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17483 41EA           40                         inc	ax
17484 41EB           8B4E         FE            mov	cx,-2[bp]
17485 41EE           F7E9                       imul	cx
17486                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17487 41F0           B1                     03  mov	cl,*3
17488 41F2           D3E8                       shr	ax,cl
17489                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17490                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17491 41F4           48                         dec	ax
17492 41F5           48                         dec	ax
17493 41F6           8846         04            mov	4[bp],al
17494                                           !BCC_EOS
17495                                           ! 1930     }
17496                                           ! 1931    CL = ((CL+1) * cheight / 8) - 1;
17497                       000041F9            .8F:
17498                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17499 41F9           8A46         06            mov	al,6[bp]
17500 41FC           30E4                       xor	ah,ah
17501                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17502 41FE           40                         inc	ax
17503 41FF           8B4E         FE            mov	cx,-2[bp]
17504 4202           F7E9                       imul	cx
17505                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17506 4204           B1                     03  mov	cl,*3
17507 4206           D3E8                       shr	ax,cl
17508                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17509                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17510 4208           48                         dec	ax
17511 4209           8846         06            mov	6[bp],al
17512                                           !BCC_EOS
17513                                           ! 1932   }
17514                                           ! 1933  crtc_addr=read_word(0x40,0x63);
17515                       0000420C            .88:
17516                                           ! Debug: list int = const $63 (used reg = )
17517 420C           B8                   0063  mov	ax,*$63
17518 420F           50                         push	ax
17519                                           ! Debug: list int = const $40 (used reg = )
17520 4210           B8                   0040  mov	ax,*$40
17521 4213           50                         push	ax
17522                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17523 4214           E8         389D            call	_read_word
17524 4217           83C4                   04  add	sp,*4
17525                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17526 421A           8946         FA            mov	-6[bp],ax
17527                                           !BCC_EOS
17528                                           ! 1934  outb(crtc_addr,0x0a);
17529                                           ! Debug: list int = const $A (used reg = )
17530 421D           B8                   000A  mov	ax,*$A
17531 4220           50                         push	ax
17532                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17533 4221           FF76         FA            push	-6[bp]
17534                                           ! Debug: func () void = outb+0 (used reg = )
17535 4224           E8         38E6            call	_outb
17536 4227           83C4                   04  add	sp,*4
17537                                           !BCC_EOS
17538                                           ! 1935  outb(crtc_addr+1,CH);
17539                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
17540 422A           8A46         04            mov	al,4[bp]
17541 422D           30E4                       xor	ah,ah
17542 422F           50                         push	ax
17543                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17544 4230           8B46         FA            mov	ax,-6[bp]
17545                                           ! Debug: list unsigned int = ax+1 (used reg = )
17546 4233           40                         inc	ax
17547 4234           50                         push	ax
17548                                           ! Debug: func () void = outb+0 (used reg = )
17549 4235           E8         38D5            call	_outb
17550 4238           83C4                   04  add	sp,*4
17551                                           !BCC_EOS
17552                                           ! 1936  outb(crtc_addr,0x0b);
17553                                           ! Debug: list int = const $B (used reg = )
17554 423B           B8                   000B  mov	ax,*$B
17555 423E           50                         push	ax
17556                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17557 423F           FF76         FA            push	-6[bp]
17558                                           ! Debug: func () void = outb+0 (used reg = )
17559 4242           E8         38C8            call	_outb
17560 4245           83C4                   04  add	sp,*4
17561                                           !BCC_EOS
17562                                           ! 1937  outb(crtc_addr+1,CL);
17563                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
17564 4248           8A46         06            mov	al,6[bp]
17565 424B           30E4                       xor	ah,ah
17566 424D           50                         push	ax
17567                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17568 424E           8B46         FA            mov	ax,-6[bp]
17569                                           ! Debug: list unsigned int = ax+1 (used reg = )
17570 4251           40                         inc	ax
17571 4252           50                         push	ax
17572                                           ! Debug: func () void = outb+0 (used reg = )
17573 4253           E8         38B7            call	_outb
17574 4256           83C4                   04  add	sp,*4
17575                                           !BCC_EOS
17576                                           ! 1938 }
17577 4259           89EC                       mov	sp,bp
17578 425B           5D                         pop	bp
17579 425C           C3                         ret
17580                                           ! 1939 static void biosfn_set_cursor_pos (page, cursor)
17581                                           ! 1940 Bit8u page;Bit16u cursor;
17582                       0000425D            _biosfn_set_cursor_pos:
17583                                           !BCC_EOS
17584                                           !BCC_EOS
17585                                           ! 1941 {
17586                                           ! 1942  Bit8u xcurs,ycurs,current;
17587                                           !BCC_EOS
17588                                           ! 1943  Bit16u nbcols,nbrows,address,crtc_addr;
17589                                           !BCC_EOS
17590                                           ! 1944  if(page>7)return;
17591 425D           55                         push	bp
17592 425E           89E5                       mov	bp,sp
17593 4260           83C4                   F4  add	sp,*-$C
17594                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
17595 4263           8A46         04            mov	al,4[bp]
17596 4266           3C                     07  cmp	al,*7
17597 4268           76           04            jbe 	.90
17598                       0000426A            .91:
17599 426A           89EC                       mov	sp,bp
17600 426C           5D                         pop	bp
17601 426D           C3                         ret
17602                                           !BCC_EOS
17603                                           ! 1945  write_word(0x40, 0x50 +2*page, cursor);
17604                       0000426E            .90:
17605                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
17606 426E           FF76         06            push	6[bp]
17607                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
17608                                           ! Debug: expression subtree swapping
17609 4271           8A46         04            mov	al,4[bp]
17610 4274           30E4                       xor	ah,ah
17611 4276           D1E0                       shl	ax,*1
17612                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17613                                           ! Debug: expression subtree swapping
17614                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17615 4278           05                   0050  add	ax,*$50
17616 427B           50                         push	ax
17617                                           ! Debug: list int = const $40 (used reg = )
17618 427C           B8                   0040  mov	ax,*$40
17619 427F           50                         push	ax
17620                                           ! Debug: func () void = write_word+0 (used reg = )
17621 4280           E8         385C            call	_write_word
17622 4283           83C4                   06  add	sp,*6
17623                                           !BCC_EOS
17624                                           ! 1946  current=read_byte(0x40,0x62);
17625                                           ! Debug: list int = const $62 (used reg = )
17626 4286           B8                   0062  mov	ax,*$62
17627 4289           50                         push	ax
17628                                           ! Debug: list int = const $40 (used reg = )
17629 428A           B8                   0040  mov	ax,*$40
17630 428D           50                         push	ax
17631                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17632 428E           E8         3810            call	_read_byte
17633 4291           83C4                   04  add	sp,*4
17634                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
17635 4294           8846         FD            mov	-3[bp],al
17636                                           !BCC_EOS
17637                                           ! 1947  if(page==current)
17638                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
17639 4297           8A46         04            mov	al,4[bp]
17640 429A           3A46         FD            cmp	al,-3[bp]
17641 429D         0F85         00B8            bne 	.92
17642                       000042A1            .93:
17643                                           ! 1948   {
17644                                           ! 1949    nbcols=read_word(0x40,0x4A);
17645                                           ! Debug: list int = const $4A (used reg = )
17646 42A1           B8                   004A  mov	ax,*$4A
17647 42A4           50                         push	ax
17648                                           ! Debug: list int = const $40 (used reg = )
17649 42A5           B8                   0040  mov	ax,*$40
17650 42A8           50                         push	ax
17651                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17652 42A9           E8         3808            call	_read_word
17653 42AC           83C4                   04  add	sp,*4
17654                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
17655 42AF           8946         FA            mov	-6[bp],ax
17656                                           !BCC_EOS
17657                                           ! 1950    nbrows=read_byte(0x40,0x84)+1;
17658                                           ! Debug: list int = const $84 (used reg = )
17659 42B2           B8                   0084  mov	ax,#$84
17660 42B5           50                         push	ax
17661                                           ! Debug: list int = const $40 (used reg = )
17662 42B6           B8                   0040  mov	ax,*$40
17663 42B9           50                         push	ax
17664                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17665 42BA           E8         37E4            call	_read_byte
17666 42BD           83C4                   04  add	sp,*4
17667                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
17668 42C0           30E4                       xor	ah,ah
17669                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
17670 42C2           40                         inc	ax
17671 42C3           8946         F8            mov	-8[bp],ax
17672                                           !BCC_EOS
17673                                           ! 1951    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
17674                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
17675 42C6           8A46         06            mov	al,6[bp]
17676                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
17677 42C9           8846         FF            mov	-1[bp],al
17678                                           !BCC_EOS
17679                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
17680 42CC           8B46         06            mov	ax,6[bp]
17681 42CF           30C0                       xor	al,al
17682                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17683 42D1           88E0                       mov	al,ah
17684 42D3           30E4                       xor	ah,ah
17685                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
17686 42D5           8846         FE            mov	-2[bp],al
17687                                           !BCC_EOS
17688                                           ! 1952    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
17689                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
17690 42D8           8A46         FE            mov	al,-2[bp]
17691 42DB           30E4                       xor	ah,ah
17692 42DD           8B4E         FA            mov	cx,-6[bp]
17693 42E0           F7E9                       imul	cx
17694 42E2           50                         push	ax
17695                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
17696 42E3           8B46         FA            mov	ax,-6[bp]
17697 42E6           8B4E         F8            mov	cx,-8[bp]
17698 42E9           F7E9                       imul	cx
17699                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
17700 42EB           0C                     FF  or	al,#$FF
17701                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
17702                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
17703 42ED           89C3                       mov	bx,ax
17704 42EF           8A46         04            mov	al,4[bp]
17705 42F2           30E4                       xor	ah,ah
17706 42F4           93                         xchg	ax,bx
17707 42F5           40                         inc	ax
17708 42F6           89D9                       mov	cx,bx
17709 42F8           F7E9                       imul	cx
17710                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
17711 42FA           0246         FF            add	al,-1[bp]
17712 42FD           80D4                   00  adc	ah,*0
17713                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
17714 4300           0346         F2            add	ax,-$E[bp]
17715 4303           44                         inc	sp
17716 4304           44                         inc	sp
17717                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
17718 4305           8946         F6            mov	-$A[bp],ax
17719                                           !BCC_EOS
17720                                           ! 1953    crtc_addr=read_word(0x40,0x63);
17721                                           ! Debug: list int = const $63 (used reg = )
17722 4308           B8                   0063  mov	ax,*$63
17723 430B           50                         push	ax
17724                                           ! Debug: list int = const $40 (used reg = )
17725 430C           B8                   0040  mov	ax,*$40
17726 430F           50                         push	ax
17727                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17728 4310           E8         37A1            call	_read_word
17729 4313           83C4                   04  add	sp,*4
17730                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
17731 4316           8946         F4            mov	-$C[bp],ax
17732                                           !BCC_EOS
17733                                           ! 1954    outb(crtc_addr,0x0e);
17734                                           ! Debug: list int = const $E (used reg = )
17735 4319           B8                   000E  mov	ax,*$E
17736 431C           50                         push	ax
17737                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17738 431D           FF76         F4            push	-$C[bp]
17739                                           ! Debug: func () void = outb+0 (used reg = )
17740 4320           E8         37EA            call	_outb
17741 4323           83C4                   04  add	sp,*4
17742                                           !BCC_EOS
17743                                           ! 1955    outb(crtc_addr+1,(address&0xff00)>>8);
17744                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
17745 4326           8B46         F6            mov	ax,-$A[bp]
17746 4329           30C0                       xor	al,al
17747                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17748 432B           88E0                       mov	al,ah
17749 432D           30E4                       xor	ah,ah
17750                                           ! Debug: list unsigned int = ax+0 (used reg = )
17751 432F           50                         push	ax
17752                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17753 4330           8B46         F4            mov	ax,-$C[bp]
17754                                           ! Debug: list unsigned int = ax+1 (used reg = )
17755 4333           40                         inc	ax
17756 4334           50                         push	ax
17757                                           ! Debug: func () void = outb+0 (used reg = )
17758 4335           E8         37D5            call	_outb
17759 4338           83C4                   04  add	sp,*4
17760                                           !BCC_EOS
17761                                           ! 1956    outb(crtc_addr,0x0f);
17762                                           ! Debug: list int = const $F (used reg = )
17763 433B           B8                   000F  mov	ax,*$F
17764 433E           50                         push	ax
17765                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17766 433F           FF76         F4            push	-$C[bp]
17767                                           ! Debug: func () void = outb+0 (used reg = )
17768 4342           E8         37C8            call	_outb
17769 4345           83C4                   04  add	sp,*4
17770                                           !BCC_EOS
17771                                           ! 1957    outb(crtc_addr+1,address&0x00ff);
17772                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
17773 4348           8A46         F6            mov	al,-$A[bp]
17774                                           ! Debug: list unsigned char = al+0 (used reg = )
17775 434B           30E4                       xor	ah,ah
17776 434D           50                         push	ax
17777                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17778 434E           8B46         F4            mov	ax,-$C[bp]
17779                                           ! Debug: list unsigned int = ax+1 (used reg = )
17780 4351           40                         inc	ax
17781 4352           50                         push	ax
17782                                           ! Debug: func () void = outb+0 (used reg = )
17783 4353           E8         37B7            call	_outb
17784 4356           83C4                   04  add	sp,*4
17785                                           !BCC_EOS
17786                                           ! 1958   }
17787                                           ! 1959 }
17788                       00004359            .92:
17789 4359           89EC                       mov	sp,bp
17790 435B           5D                         pop	bp
17791 435C           C3                         ret
17792                                           ! 1960 static void biosfn_get_cursor_pos (page,shape, pos)
17793                                           ! Register BX used in function biosfn_set_cursor_pos
17794                                           ! 1961 Bit8u page;Bit16u *shape;Bit16u *pos;
17795                       0000435D            _biosfn_get_cursor_pos:
17796                                           !BCC_EOS
17797                                           !BCC_EOS
17798                                           !BCC_EOS
17799                                           ! 1962 {
17800                                           ! 1963  Bit16u ss=get_SS();
17801 435D           55                         push	bp
17802 435E           89E5                       mov	bp,sp
17803 4360           4C                         dec	sp
17804 4361           4C                         dec	sp
17805                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
17806 4362           E8         37C8            call	_get_SS
17807                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
17808 4365           8946         FE            mov	-2[bp],ax
17809                                           !BCC_EOS
17810                                           ! 1964  write_word(ss, shape, 0);
17811                                           ! Debug: list int = const 0 (used reg = )
17812 4368           31C0                       xor	ax,ax
17813 436A           50                         push	ax
17814                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17815 436B           FF76         06            push	6[bp]
17816                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17817 436E           FF76         FE            push	-2[bp]
17818                                           ! Debug: func () void = write_word+0 (used reg = )
17819 4371           E8         376B            call	_write_word
17820 4374           83C4                   06  add	sp,*6
17821                                           !BCC_EOS
17822                                           ! 1965  write_word(ss, pos, 0);
17823                                           ! Debug: list int = const 0 (used reg = )
17824 4377           31C0                       xor	ax,ax
17825 4379           50                         push	ax
17826                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17827 437A           FF76         08            push	8[bp]
17828                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17829 437D           FF76         FE            push	-2[bp]
17830                                           ! Debug: func () void = write_word+0 (used reg = )
17831 4380           E8         375C            call	_write_word
17832 4383           83C4                   06  add	sp,*6
17833                                           !BCC_EOS
17834                                           ! 1966  if(page>7)return;
17835                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
17836 4386           8A46         04            mov	al,4[bp]
17837 4389           3C                     07  cmp	al,*7
17838 438B           76           04            jbe 	.94
17839                       0000438D            .95:
17840 438D           89EC                       mov	sp,bp
17841 438F           5D                         pop	bp
17842 4390           C3                         ret
17843                                           !BCC_EOS
17844                                           ! 1967  write_word(ss,shape,read_word(0x40,0x60));
17845                       00004391            .94:
17846                                           ! Debug: list int = const $60 (used reg = )
17847 4391           B8                   0060  mov	ax,*$60
17848 4394           50                         push	ax
17849                                           ! Debug: list int = const $40 (used reg = )
17850 4395           B8                   0040  mov	ax,*$40
17851 4398           50                         push	ax
17852                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17853 4399           E8         3718            call	_read_word
17854 439C           83C4                   04  add	sp,*4
17855                                           ! Debug: list unsigned short = ax+0 (used reg = )
17856 439F           50                         push	ax
17857                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17858 43A0           FF76         06            push	6[bp]
17859                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17860 43A3           FF76         FE            push	-2[bp]
17861                                           ! Debug: func () void = write_word+0 (used reg = )
17862 43A6           E8         3736            call	_write_word
17863 43A9           83C4                   06  add	sp,*6
17864                                           !BCC_EOS
17865                                           ! 1968  write_word(ss,pos,read_word(0x40,0x50 +page*2));
17866                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
17867 43AC           8A46         04            mov	al,4[bp]
17868 43AF           30E4                       xor	ah,ah
17869 43B1           D1E0                       shl	ax,*1
17870                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17871                                           ! Debug: expression subtree swapping
17872                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17873 43B3           05                   0050  add	ax,*$50
17874 43B6           50                         push	ax
17875                                           ! Debug: list int = const $40 (used reg = )
17876 43B7           B8                   0040  mov	ax,*$40
17877 43BA           50                         push	ax
17878                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17879 43BB           E8         36F6            call	_read_word
17880 43BE           83C4                   04  add	sp,*4
17881                                           ! Debug: list unsigned short = ax+0 (used reg = )
17882 43C1           50                         push	ax
17883                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17884 43C2           FF76         08            push	8[bp]
17885                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17886 43C5           FF76         FE            push	-2[bp]
17887                                           ! Debug: func () void = write_word+0 (used reg = )
17888 43C8           E8         3714            call	_write_word
17889 43CB           83C4                   06  add	sp,*6
17890                                           !BCC_EOS
17891                                           ! 1969 }
17892 43CE           89EC                       mov	sp,bp
17893 43D0           5D                         pop	bp
17894 43D1           C3                         ret
17895                                           ! 1970 static void biosfn_set_active_page (page)
17896                                           ! 1971 Bit8u page;
17897                       000043D2            _biosfn_set_active_page:
17898                                           !BCC_EOS
17899                                           ! 1972 {
17900                                           ! 1973  Bit16u cursor,dummy,crtc_addr;
17901                                           !BCC_EOS
17902                                           ! 1974 
17903                                           ! 1974  Bit16u nbcols,nbrows,address;
17904                                           !BCC_EOS
17905                                           ! 1975  Bit8u mode,line;
17906                                           !BCC_EOS
17907                                           ! 1976  if(page>7)return;
17908 43D2           55                         push	bp
17909 43D3           89E5                       mov	bp,sp
17910 43D5           83C4                   F2  add	sp,*-$E
17911                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
17912 43D8           8A46         04            mov	al,4[bp]
17913 43DB           3C                     07  cmp	al,*7
17914 43DD           76           04            jbe 	.96
17915                       000043DF            .97:
17916 43DF           89EC                       mov	sp,bp
17917 43E1           5D                         pop	bp
17918 43E2           C3                         ret
17919                                           !BCC_EOS
17920                                           ! 1977  mode=read_byte(0x40,0x49);
17921                       000043E3            .96:
17922                                           ! Debug: list int = const $49 (used reg = )
17923 43E3           B8                   0049  mov	ax,*$49
17924 43E6           50                         push	ax
17925                                           ! Debug: list int = const $40 (used reg = )
17926 43E7           B8                   0040  mov	ax,*$40
17927 43EA           50                         push	ax
17928                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17929 43EB           E8         36B3            call	_read_byte
17930 43EE           83C4                   04  add	sp,*4
17931                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
17932 43F1           8846         F3            mov	-$D[bp],al
17933                                           !BCC_EOS
17934                                           ! 1978  line=find_vga_entry(mode);
17935                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
17936 43F4           8A46         F3            mov	al,-$D[bp]
17937 43F7           30E4                       xor	ah,ah
17938 43F9           50                         push	ax
17939                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
17940 43FA           E8         35B8            call	_find_vga_entry
17941 43FD           44                         inc	sp
17942 43FE           44                         inc	sp
17943                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
17944 43FF           8846         F2            mov	-$E[bp],al
17945                                           !BCC_EOS
17946                                           ! 1979  if(line==0xFF)return;
17947                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
17948 4402           8A46         F2            mov	al,-$E[bp]
17949 4405           3C                     FF  cmp	al,#$FF
17950 4407           75           04            jne 	.98
17951                       00004409            .99:
17952 4409           89EC                       mov	sp,bp
17953 440B           5D                         pop	bp
17954 440C           C3                         ret
17955                                           !BCC_EOS
17956                                           ! 1980  biosfn_get_cursor_pos(page,&dummy,&cursor);
17957                       0000440D            .98:
17958                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
17959 440D           8D5E         FE            lea	bx,-2[bp]
17960 4410           53                         push	bx
17961                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
17962 4411           8D5E         FC            lea	bx,-4[bp]
17963 4414           53                         push	bx
17964                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
17965 4415           8A46         04            mov	al,4[bp]
17966 4418           30E4                       xor	ah,ah
17967 441A           50                         push	ax
17968                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
17969 441B           E8         FF3F            call	_biosfn_get_cursor_pos
17970 441E           83C4                   06  add	sp,*6
17971                                           !BCC_EOS
17972                                           ! 1981  if(vga_modes[line].class==0x00)
17973                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
17974 4421           8A46         F2            mov	al,-$E[bp]
17975 4424           30E4                       xor	ah,ah
17976 4426           B1                     03  mov	cl,*3
17977 4428           D3E0                       shl	ax,cl
17978 442A           89C3                       mov	bx,ax
17979 442C           81C3                 01DA  add	bx,#_vga_modes
17980                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17981 4430           8A47         01            mov	al,1[bx]
17982 4433           84C0                       test	al,al
17983 4435           75           6E            jne 	.9A
17984                       00004437            .9B:
17985                                           ! 1982   {
17986                                           ! 1983    nbcols=read_word(0x40,0x4A);
17987                                           ! Debug: list int = const $4A (used reg = )
17988 4437           B8                   004A  mov	ax,*$4A
17989 443A           50                         push	ax
17990                                           ! Debug: list int = const $40 (used reg = )
17991 443B           B8                   0040  mov	ax,*$40
17992 443E           50                         push	ax
17993                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17994 443F           E8         3672            call	_read_word
17995 4442           83C4                   04  add	sp,*4
17996                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
17997 4445           8946         F8            mov	-8[bp],ax
17998                                           !BCC_EOS
17999                                           ! 1984    nbrows=read_byte(0x40,0x84)+1;
18000                                           ! Debug: list int = const $84 (used reg = )
18001 4448           B8                   0084  mov	ax,#$84
18002 444B           50                         push	ax
18003                                           ! Debug: list int = const $40 (used reg = )
18004 444C           B8                   0040  mov	ax,*$40
18005 444F           50                         push	ax
18006                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18007 4450           E8         364E            call	_read_byte
18008 4453           83C4                   04  add	sp,*4
18009                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18010 4456           30E4                       xor	ah,ah
18011                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18012 4458           40                         inc	ax
18013 4459           8946         F6            mov	-$A[bp],ax
18014                                           !BCC_EOS
18015                                           ! 1985    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18016                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18017 445C           8B46         F8            mov	ax,-8[bp]
18018 445F           8B4E         F6            mov	cx,-$A[bp]
18019 4462           F7E9                       imul	cx
18020                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18021 4464           D1E0                       shl	ax,*1
18022                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18023 4466           0C                     FF  or	al,#$FF
18024                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18025                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18026 4468           89C3                       mov	bx,ax
18027 446A           8A46         04            mov	al,4[bp]
18028 446D           30E4                       xor	ah,ah
18029 446F           93                         xchg	ax,bx
18030 4470           40                         inc	ax
18031 4471           89D9                       mov	cx,bx
18032 4473           F7E9                       imul	cx
18033                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18034 4475           8946         F4            mov	-$C[bp],ax
18035                                           !BCC_EOS
18036                                           ! 1986    write_word(0x40,0x4E,address);
18037                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18038 4478           FF76         F4            push	-$C[bp]
18039                                           ! Debug: list int = const $4E (used reg = )
18040 447B           B8                   004E  mov	ax,*$4E
18041 447E           50                         push	ax
18042                                           ! Debug: list int = const $40 (used reg = )
18043 447F           B8                   0040  mov	ax,*$40
18044 4482           50                         push	ax
18045                                           ! Debug: func () void = write_word+0 (used reg = )
18046 4483           E8         3659            call	_write_word
18047 4486           83C4                   06  add	sp,*6
18048                                           !BCC_EOS
18049                                           ! 1987    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18050                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18051 4489           8B46         F8            mov	ax,-8[bp]
18052 448C           8B4E         F6            mov	cx,-$A[bp]
18053 448F           F7E9                       imul	cx
18054                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18055 4491           0C                     FF  or	al,#$FF
18056                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18057                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18058 4493           89C3                       mov	bx,ax
18059 4495           8A46         04            mov	al,4[bp]
18060 4498           30E4                       xor	ah,ah
18061 449A           93                         xchg	ax,bx
18062 449B           40                         inc	ax
18063 449C           89D9                       mov	cx,bx
18064 449E           F7E9                       imul	cx
18065                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18066 44A0           8946         F4            mov	-$C[bp],ax
18067                                           !BCC_EOS
18068                                           ! 1988   }
18069                                           ! 1989  else
18070                                           ! 1990   {
18071 44A3           EB           24            jmp .9C
18072                       000044A5            .9A:
18073                                           ! 1991    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18074                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18075 44A5           8A46         F2            mov	al,-$E[bp]
18076 44A8           30E4                       xor	ah,ah
18077 44AA           89C3                       mov	bx,ax
18078                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18079 44AC           8A87       025A            mov	al,_line_to_vpti[bx]
18080 44B0           30E4                       xor	ah,ah
18081 44B2           B1                     06  mov	cl,*6
18082 44B4           D3E0                       shl	ax,cl
18083 44B6           89C3                       mov	bx,ax
18084 44B8           81C3                 026E  add	bx,#_video_param_table
18085                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18086                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18087                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18088 44BC           8A46         04            mov	al,4[bp]
18089 44BF           30E4                       xor	ah,ah
18090 44C1           8B4F         03            mov	cx,3[bx]
18091 44C4           F7E9                       imul	cx
18092                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18093 44C6           8946         F4            mov	-$C[bp],ax
18094                                           !BCC_EOS
18095                                           ! 1992   }
18096                                           ! 1993  crtc_addr=read_word(0x40,0x63);
18097                       000044C9            .9C:
18098                                           ! Debug: list int = const $63 (used reg = )
18099 44C9           B8                   0063  mov	ax,*$63
18100 44CC           50                         push	ax
18101                                           ! Debug: list int = const $40 (used reg = )
18102 44CD           B8                   0040  mov	ax,*$40
18103 44D0           50                         push	ax
18104                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18105 44D1           E8         35E0            call	_read_word
18106 44D4           83C4                   04  add	sp,*4
18107                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18108 44D7           8946         FA            mov	-6[bp],ax
18109                                           !BCC_EOS
18110                                           ! 1994  outb(crtc_addr,0x0c);
18111                                           ! Debug: list int = const $C (used reg = )
18112 44DA           B8                   000C  mov	ax,*$C
18113 44DD           50                         push	ax
18114                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18115 44DE           FF76         FA            push	-6[bp]
18116                                           ! Debug: func () void = outb+0 (used reg = )
18117 44E1           E8         3629            call	_outb
18118 44E4           83C4                   04  add	sp,*4
18119                                           !BCC_EOS
18120                                           ! 1995  outb(crtc_addr+1,(address&0xff00)>>8);
18121                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18122 44E7           8B46         F4            mov	ax,-$C[bp]
18123 44EA           30C0                       xor	al,al
18124                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18125 44EC           88E0                       mov	al,ah
18126 44EE           30E4                       xor	ah,ah
18127                                           ! Debug: list unsigned int = ax+0 (used reg = )
18128 44F0           50                         push	ax
18129                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18130 44F1           8B46         FA            mov	ax,-6[bp]
18131                                           ! Debug: list unsigned int = ax+1 (used reg = )
18132 44F4           40                         inc	ax
18133 44F5           50                         push	ax
18134                                           ! Debug: func () void = outb+0 (used reg = )
18135 44F6           E8         3614            call	_outb
18136 44F9           83C4                   04  add	sp,*4
18137                                           !BCC_EOS
18138                                           ! 1996  outb(crtc_addr,0x0d);
18139                                           ! Debug: list int = const $D (used reg = )
18140 44FC           B8                   000D  mov	ax,*$D
18141 44FF           50                         push	ax
18142                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18143 4500           FF76         FA            push	-6[bp]
18144                                           ! Debug: func () void = outb+0 (used reg = )
18145 4503           E8         3607            call	_outb
18146 4506           83C4                   04  add	sp,*4
18147                                           !BCC_EOS
18148                                           ! 1997  outb(crtc_addr+1,address&0x00ff);
18149                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18150 4509           8A46         F4            mov	al,-$C[bp]
18151                                           ! Debug: list unsigned char = al+0 (used reg = )
18152 450C           30E4                       xor	ah,ah
18153 450E           50                         push	ax
18154                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18155 450F           8B46         FA            mov	ax,-6[bp]
18156                                           ! Debug: list unsigned int = ax+1 (used reg = )
18157 4512           40                         inc	ax
18158 4513           50                         push	ax
18159                                           ! Debug: func () void = outb+0 (used reg = )
18160 4514           E8         35F6            call	_outb
18161 4517           83C4                   04  add	sp,*4
18162                                           !BCC_EOS
18163                                           ! 1998  write_byte(0x40,0x62,page);
18164                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18165 451A           8A46         04            mov	al,4[bp]
18166 451D           30E4                       xor	ah,ah
18167 451F           50                         push	ax
18168                                           ! Debug: list int = const $62 (used reg = )
18169 4520           B8                   0062  mov	ax,*$62
18170 4523           50                         push	ax
18171                                           ! Debug: list int = const $40 (used reg = )
18172 4524           B8                   0040  mov	ax,*$40
18173 4527           50                         push	ax
18174                                           ! Debug: func () void = write_byte+0 (used reg = )
18175 4528           E8         359C            call	_write_byte
18176 452B           83C4                   06  add	sp,*6
18177                                           !BCC_EOS
18178                                           ! 1999  biosfn_set_cursor_pos(page,cursor);
18179                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18180 452E           FF76         FE            push	-2[bp]
18181                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18182 4531           8A46         04            mov	al,4[bp]
18183 4534           30E4                       xor	ah,ah
18184 4536           50                         push	ax
18185                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18186 4537           E8         FD23            call	_biosfn_set_cursor_pos
18187 453A           83C4                   04  add	sp,*4
18188                                           !BCC_EOS
18189                                           ! 2000 }
18190 453D           89EC                       mov	sp,bp
18191 453F           5D                         pop	bp
18192 4540           C3                         ret
18193                                           ! 2001 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18194                                           ! Register BX used in function biosfn_set_active_page
18195                                           ! 2002 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18196                       00004541            _vgamem_copy_pl4:
18197                                           !BCC_EOS
18198                                           !BCC_EOS
18199                                           !BCC_EOS
18200                                           !BCC_EOS
18201                                           !BCC_EOS
18202                                           !BCC_EOS
18203                                           ! 2003 {
18204                                           ! 2004  Bit16u src,dest;
18205                                           !BCC_EOS
18206                                           ! 2005  Bit8u i;
18207                                           !BCC_EOS
18208                                           ! 2006  src=ysrc*cheight*nbcols+xstart;
18209 4541           55                         push	bp
18210 4542           89E5                       mov	bp,sp
18211 4544           83C4                   FA  add	sp,*-6
18212                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18213 4547           8A46         0E            mov	al,$E[bp]
18214 454A           30E4                       xor	ah,ah
18215 454C           89C3                       mov	bx,ax
18216 454E           8A46         06            mov	al,6[bp]
18217 4551           30E4                       xor	ah,ah
18218 4553           89D9                       mov	cx,bx
18219 4555           F7E9                       imul	cx
18220                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18221 4557           89C3                       mov	bx,ax
18222 4559           8A46         0C            mov	al,$C[bp]
18223 455C           30E4                       xor	ah,ah
18224 455E           93                         xchg	ax,bx
18225 455F           89D9                       mov	cx,bx
18226 4561           F7E9                       imul	cx
18227                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18228 4563           0246         04            add	al,4[bp]
18229 4566           80D4                   00  adc	ah,*0
18230                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18231 4569           8946         FE            mov	-2[bp],ax
18232                                           !BCC_EOS
18233                                           ! 2007  dest=ydest*cheight*nbcols+xstart;
18234                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18235 456C           8A46         0E            mov	al,$E[bp]
18236 456F           30E4                       xor	ah,ah
18237 4571           89C3                       mov	bx,ax
18238 4573           8A46         08            mov	al,8[bp]
18239 4576           30E4                       xor	ah,ah
18240 4578           89D9                       mov	cx,bx
18241 457A           F7E9                       imul	cx
18242                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18243 457C           89C3                       mov	bx,ax
18244 457E           8A46         0C            mov	al,$C[bp]
18245 4581           30E4                       xor	ah,ah
18246 4583           93                         xchg	ax,bx
18247 4584           89D9                       mov	cx,bx
18248 4586           F7E9                       imul	cx
18249                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18250 4588           0246         04            add	al,4[bp]
18251 458B           80D4                   00  adc	ah,*0
18252                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18253 458E           8946         FC            mov	-4[bp],ax
18254                                           !BCC_EOS
18255                                           ! 2008  outw(0x3ce, 0x0105);
18256                                           ! Debug: list int = const $105 (used reg = )
18257 4591           B8                   0105  mov	ax,#$105
18258 4594           50                         push	ax
18259                                           ! Debug: list int = const $3CE (used reg = )
18260 4595           B8                   03CE  mov	ax,#$3CE
18261 4598           50                         push	ax
18262                                           ! Debug: func () void = outw+0 (used reg = )
18263 4599           E8         3581            call	_outw
18264 459C           83C4                   04  add	sp,*4
18265                                           !BCC_EOS
18266                                           ! 2009  for(i=0;i<cheight;i++)
18267                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18268 459F           30C0                       xor	al,al
18269 45A1           8846         FB            mov	-5[bp],al
18270                                           !BCC_EOS
18271                                           !BCC_EOS
18272                                           ! 2010   {
18273 45A4           EB           43            jmp .9F
18274                       000045A6            .A0:
18275                                           ! 2011    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18276                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18277 45A6           8A46         0A            mov	al,$A[bp]
18278 45A9           30E4                       xor	ah,ah
18279 45AB           50                         push	ax
18280                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18281 45AC           8A46         0C            mov	al,$C[bp]
18282 45AF           30E4                       xor	ah,ah
18283 45B1           89C3                       mov	bx,ax
18284 45B3           8A46         FB            mov	al,-5[bp]
18285 45B6           30E4                       xor	ah,ah
18286 45B8           89D9                       mov	cx,bx
18287 45BA           F7E9                       imul	cx
18288                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18289                                           ! Debug: expression subtree swapping
18290 45BC           0346         FE            add	ax,-2[bp]
18291                                           ! Debug: list unsigned int = ax+0 (used reg = )
18292 45BF           50                         push	ax
18293                                           ! Debug: list unsigned int = const $A000 (used reg = )
18294 45C0           B8                   A000  mov	ax,#$A000
18295 45C3           50                         push	ax
18296                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18297 45C4           8A46         0C            mov	al,$C[bp]
18298 45C7           30E4                       xor	ah,ah
18299 45C9           89C3                       mov	bx,ax
18300 45CB           8A46         FB            mov	al,-5[bp]
18301 45CE           30E4                       xor	ah,ah
18302 45D0           89D9                       mov	cx,bx
18303 45D2           F7E9                       imul	cx
18304                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18305                                           ! Debug: expression subtree swapping
18306 45D4           0346         FC            add	ax,-4[bp]
18307                                           ! Debug: list unsigned int = ax+0 (used reg = )
18308 45D7           50                         push	ax
18309                                           ! Debug: list unsigned int = const $A000 (used reg = )
18310 45D8           B8                   A000  mov	ax,#$A000
18311 45DB           50                         push	ax
18312                                           ! Debug: func () void = memcpyb+0 (used reg = )
18313 45DC           E8         3462            call	_memcpyb
18314 45DF           83C4                   0A  add	sp,*$A
18315                                           !BCC_EOS
18316                                           ! 2012   }
18317                                           ! 2013  outw(0x3ce, 0x0005);
18318                       000045E2            .9E:
18319                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18320 45E2           8A46         FB            mov	al,-5[bp]
18321 45E5           40                         inc	ax
18322 45E6           8846         FB            mov	-5[bp],al
18323                       000045E9            .9F:
18324                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18325 45E9           8A46         FB            mov	al,-5[bp]
18326 45EC           3A46         0E            cmp	al,$E[bp]
18327 45EF           72           B5            jb 	.A0
18328                       000045F1            .A1:
18329                       000045F1            .9D:
18330                                           ! Debug: list int = const 5 (used reg = )
18331 45F1           B8                   0005  mov	ax,*5
18332 45F4           50                         push	ax
18333                                           ! Debug: list int = const $3CE (used reg = )
18334 45F5           B8                   03CE  mov	ax,#$3CE
18335 45F8           50                         push	ax
18336                                           ! Debug: func () void = outw+0 (used reg = )
18337 45F9           E8         3521            call	_outw
18338 45FC           83C4                   04  add	sp,*4
18339                                           !BCC_EOS
18340                                           ! 2014 }
18341 45FF           89EC                       mov	sp,bp
18342 4601           5D                         pop	bp
18343 4602           C3                         ret
18344                                           ! 2015 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18345                                           ! Register BX used in function vgamem_copy_pl4
18346                                           ! 2016 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18347                       00004603            _vgamem_fill_pl4:
18348                                           !BCC_EOS
18349                                           !BCC_EOS
18350                                           !BCC_EOS
18351                                           !BCC_EOS
18352                                           !BCC_EOS
18353                                           !BCC_EOS
18354                                           ! 2017 {
18355                                           ! 2018  Bit16u dest;
18356                                           !BCC_EOS
18357                                           ! 2019  Bit8u i;
18358                                           !BCC_EOS
18359                                           ! 2020  dest=ystart*cheight*nbcols+xstart;
18360 4603           55                         push	bp
18361 4604           89E5                       mov	bp,sp
18362 4606           83C4                   FC  add	sp,*-4
18363                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18364 4609           8A46         0C            mov	al,$C[bp]
18365 460C           30E4                       xor	ah,ah
18366 460E           89C3                       mov	bx,ax
18367 4610           8A46         06            mov	al,6[bp]
18368 4613           30E4                       xor	ah,ah
18369 4615           89D9                       mov	cx,bx
18370 4617           F7E9                       imul	cx
18371                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18372 4619           89C3                       mov	bx,ax
18373 461B           8A46         0A            mov	al,$A[bp]
18374 461E           30E4                       xor	ah,ah
18375 4620           93                         xchg	ax,bx
18376 4621           89D9                       mov	cx,bx
18377 4623           F7E9                       imul	cx
18378                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18379 4625           0246         04            add	al,4[bp]
18380 4628           80D4                   00  adc	ah,*0
18381                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18382 462B           8946         FE            mov	-2[bp],ax
18383                                           !BCC_EOS
18384                                           ! 2021  outw(0x3ce, 0x0205);
18385                                           ! Debug: list int = const $205 (used reg = )
18386 462E           B8                   0205  mov	ax,#$205
18387 4631           50                         push	ax
18388                                           ! Debug: list int = const $3CE (used reg = )
18389 4632           B8                   03CE  mov	ax,#$3CE
18390 4635           50                         push	ax
18391                                           ! Debug: func () void = outw+0 (used reg = )
18392 4636           E8         34E4            call	_outw
18393 4639           83C4                   04  add	sp,*4
18394                                           !BCC_EOS
18395                                           ! 2022  for(i=0;i<cheight;i++)
18396                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18397 463C           30C0                       xor	al,al
18398 463E           8846         FD            mov	-3[bp],al
18399                                           !BCC_EOS
18400                                           !BCC_EOS
18401                                           ! 2023   {
18402 4641           EB           31            jmp .A4
18403                       00004643            .A5:
18404                                           ! 2024    memsetb(0xa000,dest+i*nbcols,attr,cols);
18405                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18406 4643           8A46         08            mov	al,8[bp]
18407 4646           30E4                       xor	ah,ah
18408 4648           50                         push	ax
18409                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18410 4649           8A46         0E            mov	al,$E[bp]
18411 464C           30E4                       xor	ah,ah
18412 464E           50                         push	ax
18413                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18414 464F           8A46         0A            mov	al,$A[bp]
18415 4652           30E4                       xor	ah,ah
18416 4654           89C3                       mov	bx,ax
18417 4656           8A46         FD            mov	al,-3[bp]
18418 4659           30E4                       xor	ah,ah
18419 465B           89D9                       mov	cx,bx
18420 465D           F7E9                       imul	cx
18421                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18422                                           ! Debug: expression subtree swapping
18423 465F           0346         FE            add	ax,-2[bp]
18424                                           ! Debug: list unsigned int = ax+0 (used reg = )
18425 4662           50                         push	ax
18426                                           ! Debug: list unsigned int = const $A000 (used reg = )
18427 4663           B8                   A000  mov	ax,#$A000
18428 4666           50                         push	ax
18429                                           ! Debug: func () void = memsetb+0 (used reg = )
18430 4667           E8         338D            call	_memsetb
18431 466A           83C4                   08  add	sp,*8
18432                                           !BCC_EOS
18433                                           ! 2025   }
18434                                           ! 2026  outw(0x3ce, 0x0005);
18435                       0000466D            .A3:
18436                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18437 466D           8A46         FD            mov	al,-3[bp]
18438 4670           40                         inc	ax
18439 4671           8846         FD            mov	-3[bp],al
18440                       00004674            .A4:
18441                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18442 4674           8A46         FD            mov	al,-3[bp]
18443 4677           3A46         0C            cmp	al,$C[bp]
18444 467A           72           C7            jb 	.A5
18445                       0000467C            .A6:
18446                       0000467C            .A2:
18447                                           ! Debug: list int = const 5 (used reg = )
18448 467C           B8                   0005  mov	ax,*5
18449 467F           50                         push	ax
18450                                           ! Debug: list int = const $3CE (used reg = )
18451 4680           B8                   03CE  mov	ax,#$3CE
18452 4683           50                         push	ax
18453                                           ! Debug: func () void = outw+0 (used reg = )
18454 4684           E8         3496            call	_outw
18455 4687           83C4                   04  add	sp,*4
18456                                           !BCC_EOS
18457                                           ! 2027 }
18458 468A           89EC                       mov	sp,bp
18459 468C           5D                         pop	bp
18460 468D           C3                         ret
18461                                           ! 2028 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18462                                           ! Register BX used in function vgamem_fill_pl4
18463                                           ! 2029 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18464                       0000468E            _vgamem_copy_cga:
18465                                           !BCC_EOS
18466                                           !BCC_EOS
18467                                           !BCC_EOS
18468                                           !BCC_EOS
18469                                           !BCC_EOS
18470                                           !BCC_EOS
18471                                           ! 2030 {
18472                                           ! 2031  Bit16u src,dest;
18473                                           !BCC_EOS
18474                                           ! 2032  Bit8u i;
18475                                           !BCC_EOS
18476                                           ! 2033  src=((ysrc*cheight*nbcols)>>1)+xstart;
18477 468E           55                         push	bp
18478 468F           89E5                       mov	bp,sp
18479 4691           83C4                   FA  add	sp,*-6
18480                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18481 4694           8A46         0E            mov	al,$E[bp]
18482 4697           30E4                       xor	ah,ah
18483 4699           89C3                       mov	bx,ax
18484 469B           8A46         06            mov	al,6[bp]
18485 469E           30E4                       xor	ah,ah
18486 46A0           89D9                       mov	cx,bx
18487 46A2           F7E9                       imul	cx
18488                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18489 46A4           89C3                       mov	bx,ax
18490 46A6           8A46         0C            mov	al,$C[bp]
18491 46A9           30E4                       xor	ah,ah
18492 46AB           93                         xchg	ax,bx
18493 46AC           89D9                       mov	cx,bx
18494 46AE           F7E9                       imul	cx
18495                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18496 46B0           D1E8                       shr	ax,*1
18497                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18498 46B2           0246         04            add	al,4[bp]
18499 46B5           80D4                   00  adc	ah,*0
18500                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18501 46B8           8946         FE            mov	-2[bp],ax
18502                                           !BCC_EOS
18503                                           ! 2034  dest=((ydest*cheight*nbcols)>>1)+xstart;
18504                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18505 46BB           8A46         0E            mov	al,$E[bp]
18506 46BE           30E4                       xor	ah,ah
18507 46C0           89C3                       mov	bx,ax
18508 46C2           8A46         08            mov	al,8[bp]
18509 46C5           30E4                       xor	ah,ah
18510 46C7           89D9                       mov	cx,bx
18511 46C9           F7E9                       imul	cx
18512                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18513 46CB           89C3                       mov	bx,ax
18514 46CD           8A46         0C            mov	al,$C[bp]
18515 46D0           30E4                       xor	ah,ah
18516 46D2           93                         xchg	ax,bx
18517 46D3           89D9                       mov	cx,bx
18518 46D5           F7E9                       imul	cx
18519                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18520 46D7           D1E8                       shr	ax,*1
18521                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18522 46D9           0246         04            add	al,4[bp]
18523 46DC           80D4                   00  adc	ah,*0
18524                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18525 46DF           8946         FC            mov	-4[bp],ax
18526                                           !BCC_EOS
18527                                           ! 2035  for(i=0;i<cheight;i++)
18528                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18529 46E2           30C0                       xor	al,al
18530 46E4           8846         FB            mov	-5[bp],al
18531                                           !BCC_EOS
18532                                           !BCC_EOS
18533                                           ! 2036   {
18534 46E7           E9         00A8            br 	.A9
18535                       000046EA            .AA:
18536                                           ! 2037    if (i & 1)
18537                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
18538 46EA           8A46         FB            mov	al,-5[bp]
18539 46ED           24                     01  and	al,*1
18540 46EF           84C0                       test	al,al
18541 46F1           74           56            je  	.AB
18542                       000046F3            .AC:
18543                                           ! 2038      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
18544                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18545 46F3           8A46         0A            mov	al,$A[bp]
18546 46F6           30E4                       xor	ah,ah
18547 46F8           50                         push	ax
18548                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18549 46F9           8A46         FB            mov	al,-5[bp]
18550 46FC           30E4                       xor	ah,ah
18551 46FE           D1E8                       shr	ax,*1
18552                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18553 4700           89C3                       mov	bx,ax
18554 4702           8A46         0C            mov	al,$C[bp]
18555 4705           30E4                       xor	ah,ah
18556 4707           93                         xchg	ax,bx
18557 4708           89D9                       mov	cx,bx
18558 470A           F7E9                       imul	cx
18559 470C           50                         push	ax
18560                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
18561                                           ! Debug: expression subtree swapping
18562 470D           8B46         FE            mov	ax,-2[bp]
18563                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18564 4710           05                   2000  add	ax,#$2000
18565 4713           0346         F6            add	ax,-$A[bp]
18566 4716           44                         inc	sp
18567 4717           44                         inc	sp
18568                                           ! Debug: list unsigned int = ax+0 (used reg = )
18569 4718           50                         push	ax
18570                                           ! Debug: list unsigned int = const $B800 (used reg = )
18571 4719           B8                   B800  mov	ax,#$B800
18572 471C           50                         push	ax
18573                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18574 471D           8A46         FB            mov	al,-5[bp]
18575 4720           30E4                       xor	ah,ah
18576 4722           D1E8                       shr	ax,*1
18577                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18578 4724           89C3                       mov	bx,ax
18579 4726           8A46         0C            mov	al,$C[bp]
18580 4729           30E4                       xor	ah,ah
18581 472B           93                         xchg	ax,bx
18582 472C           89D9                       mov	cx,bx
18583 472E           F7E9                       imul	cx
18584 4730           50                         push	ax
18585                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
18586                                           ! Debug: expression subtree swapping
18587 4731           8B46         FC            mov	ax,-4[bp]
18588                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
18589 4734           05                   2000  add	ax,#$2000
18590 4737           0346         F2            add	ax,-$E[bp]
18591 473A           44                         inc	sp
18592 473B           44                         inc	sp
18593                                           ! Debug: list unsigned int = ax+0 (used reg = )
18594 473C           50                         push	ax
18595                                           ! Debug: list unsigned int = const $B800 (used reg = )
18596 473D           B8                   B800  mov	ax,#$B800
18597 4740           50                         push	ax
18598                                           ! Debug: func () void = memcpyb+0 (used reg = )
18599 4741           E8         32FD            call	_memcpyb
18600 4744           83C4                   0A  add	sp,*$A
18601                                           !BCC_EOS
18602                                           ! 2039    else
18603                                           ! 2040      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
18604 4747           EB           42            jmp .AD
18605                       00004749            .AB:
18606                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18607 4749           8A46         0A            mov	al,$A[bp]
18608 474C           30E4                       xor	ah,ah
18609 474E           50                         push	ax
18610                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18611 474F           8A46         FB            mov	al,-5[bp]
18612 4752           30E4                       xor	ah,ah
18613 4754           D1E8                       shr	ax,*1
18614                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18615 4756           89C3                       mov	bx,ax
18616 4758           8A46         0C            mov	al,$C[bp]
18617 475B           30E4                       xor	ah,ah
18618 475D           93                         xchg	ax,bx
18619 475E           89D9                       mov	cx,bx
18620 4760           F7E9                       imul	cx
18621                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18622                                           ! Debug: expression subtree swapping
18623 4762           0346         FE            add	ax,-2[bp]
18624                                           ! Debug: list unsigned int = ax+0 (used reg = )
18625 4765           50                         push	ax
18626                                           ! Debug: list unsigned int = const $B800 (used reg = )
18627 4766           B8                   B800  mov	ax,#$B800
18628 4769           50                         push	ax
18629                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18630 476A           8A46         FB            mov	al,-5[bp]
18631 476D           30E4                       xor	ah,ah
18632 476F           D1E8                       shr	ax,*1
18633                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18634 4771           89C3                       mov	bx,ax
18635 4773           8A46         0C            mov	al,$C[bp]
18636 4776           30E4                       xor	ah,ah
18637 4778           93                         xchg	ax,bx
18638 4779           89D9                       mov	cx,bx
18639 477B           F7E9                       imul	cx
18640                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18641                                           ! Debug: expression subtree swapping
18642 477D           0346         FC            add	ax,-4[bp]
18643                                           ! Debug: list unsigned int = ax+0 (used reg = )
18644 4780           50                         push	ax
18645                                           ! Debug: list unsigned int = const $B800 (used reg = )
18646 4781           B8                   B800  mov	ax,#$B800
18647 4784           50                         push	ax
18648                                           ! Debug: func () void = memcpyb+0 (used reg = )
18649 4785           E8         32B9            call	_memcpyb
18650 4788           83C4                   0A  add	sp,*$A
18651                                           !BCC_EOS
18652                                           ! 2041   }
18653                       0000478B            .AD:
18654                                           ! 2042 }
18655                       0000478B            .A8:
18656                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18657 478B           8A46         FB            mov	al,-5[bp]
18658 478E           40                         inc	ax
18659 478F           8846         FB            mov	-5[bp],al
18660                       00004792            .A9:
18661                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18662 4792           8A46         FB            mov	al,-5[bp]
18663 4795           3A46         0E            cmp	al,$E[bp]
18664 4798         0F82         FF4E            blo 	.AA
18665                       0000479C            .AE:
18666                       0000479C            .A7:
18667 479C           89EC                       mov	sp,bp
18668 479E           5D                         pop	bp
18669 479F           C3                         ret
18670                                           ! 2043 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
18671                                           ! Register BX used in function vgamem_copy_cga
18672                                           ! 2044 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u che
18673                       000047A0            _vgamem_fill_cga:
18674                                           !BCC_EOS
18675                                           !BCC_EOS
18676                                           !BCC_EOS
18677                                           !BCC_EOS
18678                                           ! 2044 ight;Bit8u attr;
18679                                           !BCC_EOS
18680                                           !BCC_EOS
18681                                           ! 2045 {
18682                                           ! 2046  Bit16u dest;
18683                                           !BCC_EOS
18684                                           ! 2047  Bit8u i;
18685                                           !BCC_EOS
18686                                           ! 2048  dest=((ystart*cheight*nbcols)>>1)+xstart;
18687 47A0           55                         push	bp
18688 47A1           89E5                       mov	bp,sp
18689 47A3           83C4                   FC  add	sp,*-4
18690                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18691 47A6           8A46         0C            mov	al,$C[bp]
18692 47A9           30E4                       xor	ah,ah
18693 47AB           89C3                       mov	bx,ax
18694 47AD           8A46         06            mov	al,6[bp]
18695 47B0           30E4                       xor	ah,ah
18696 47B2           89D9                       mov	cx,bx
18697 47B4           F7E9                       imul	cx
18698                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18699 47B6           89C3                       mov	bx,ax
18700 47B8           8A46         0A            mov	al,$A[bp]
18701 47BB           30E4                       xor	ah,ah
18702 47BD           93                         xchg	ax,bx
18703 47BE           89D9                       mov	cx,bx
18704 47C0           F7E9                       imul	cx
18705                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18706 47C2           D1E8                       shr	ax,*1
18707                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18708 47C4           0246         04            add	al,4[bp]
18709 47C7           80D4                   00  adc	ah,*0
18710                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18711 47CA           8946         FE            mov	-2[bp],ax
18712                                           !BCC_EOS
18713                                           ! 2049  for(i=0;i<cheight;i++)
18714                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18715 47CD           30C0                       xor	al,al
18716 47CF           8846         FD            mov	-3[bp],al
18717                                           !BCC_EOS
18718                                           !BCC_EOS
18719                                           ! 2050   {
18720 47D2           EB           75            jmp .B1
18721                       000047D4            .B2:
18722                                           ! 2051    if (i & 1)
18723                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
18724 47D4           8A46         FD            mov	al,-3[bp]
18725 47D7           24                     01  and	al,*1
18726 47D9           84C0                       test	al,al
18727 47DB           74           38            je  	.B3
18728                       000047DD            .B4:
18729                                           ! 2052      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
18730                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18731 47DD           8A46         08            mov	al,8[bp]
18732 47E0           30E4                       xor	ah,ah
18733 47E2           50                         push	ax
18734                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18735 47E3           8A46         0E            mov	al,$E[bp]
18736 47E6           30E4                       xor	ah,ah
18737 47E8           50                         push	ax
18738                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18739 47E9           8A46         FD            mov	al,-3[bp]
18740 47EC           30E4                       xor	ah,ah
18741 47EE           D1E8                       shr	ax,*1
18742                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18743 47F0           89C3                       mov	bx,ax
18744 47F2           8A46         0A            mov	al,$A[bp]
18745 47F5           30E4                       xor	ah,ah
18746 47F7           93                         xchg	ax,bx
18747 47F8           89D9                       mov	cx,bx
18748 47FA           F7E9                       imul	cx
18749 47FC           50                         push	ax
18750                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
18751                                           ! Debug: expression subtree swapping
18752 47FD           8B46         FE            mov	ax,-2[bp]
18753                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18754 4800           05                   2000  add	ax,#$2000
18755 4803           0346         F6            add	ax,-$A[bp]
18756 4806           44                         inc	sp
18757 4807           44                         inc	sp
18758                                           ! Debug: list unsigned int = ax+0 (used reg = )
18759 4808           50                         push	ax
18760                                           ! Debug: list unsigned int = const $B800 (used reg = )
18761 4809           B8                   B800  mov	ax,#$B800
18762 480C           50                         push	ax
18763                                           ! Debug: func () void = memsetb+0 (used reg = )
18764 480D           E8         31E7            call	_memsetb
18765 4810           83C4                   08  add	sp,*8
18766                                           !BCC_EOS
18767                                           ! 2053    else
18768                                           ! 2054      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
18769 4813           EB           2D            jmp .B5
18770                       00004815            .B3:
18771                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18772 4815           8A46         08            mov	al,8[bp]
18773 4818           30E4                       xor	ah,ah
18774 481A           50                         push	ax
18775                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18776 481B           8A46         0E            mov	al,$E[bp]
18777 481E           30E4                       xor	ah,ah
18778 4820           50                         push	ax
18779                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18780 4821           8A46         FD            mov	al,-3[bp]
18781 4824           30E4                       xor	ah,ah
18782 4826           D1E8                       shr	ax,*1
18783                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18784 4828           89C3                       mov	bx,ax
18785 482A           8A46         0A            mov	al,$A[bp]
18786 482D           30E4                       xor	ah,ah
18787 482F           93                         xchg	ax,bx
18788 4830           89D9                       mov	cx,bx
18789 4832           F7E9                       imul	cx
18790                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18791                                           ! Debug: expression subtree swapping
18792 4834           0346         FE            add	ax,-2[bp]
18793                                           ! Debug: list unsigned int = ax+0 (used reg = )
18794 4837           50                         push	ax
18795                                           ! Debug: list unsigned int = const $B800 (used reg = )
18796 4838           B8                   B800  mov	ax,#$B800
18797 483B           50                         push	ax
18798                                           ! Debug: func () void = memsetb+0 (used reg = )
18799 483C           E8         31B8            call	_memsetb
18800 483F           83C4                   08  add	sp,*8
18801                                           !BCC_EOS
18802                                           ! 2055   }
18803                       00004842            .B5:
18804                                           ! 2056 }
18805                       00004842            .B0:
18806                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18807 4842           8A46         FD            mov	al,-3[bp]
18808 4845           40                         inc	ax
18809 4846           8846         FD            mov	-3[bp],al
18810                       00004849            .B1:
18811                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18812 4849           8A46         FD            mov	al,-3[bp]
18813 484C           3A46         0C            cmp	al,$C[bp]
18814 484F           72           83            jb 	.B2
18815                       00004851            .B6:
18816                       00004851            .AF:
18817 4851           89EC                       mov	sp,bp
18818 4853           5D                         pop	bp
18819 4854           C3                         ret
18820                                           ! 2057 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
18821                                           ! Register BX used in function vgamem_fill_cga
18822                                           ! 2058 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
18823                       00004855            _biosfn_scroll:
18824                                           !BCC_EOS
18825                                           !BCC_EOS
18826                                           !BCC_EOS
18827                                           !BCC_EOS
18828                                           !BCC_EOS
18829                                           !BCC_EOS
18830                                           !BCC_EOS
18831                                           !BCC_EOS
18832                                           ! 2059 {
18833                                           ! 2060  Bit8u mode,line,cheight,bpp,cols;
18834                                           !BCC_EOS
18835                                           ! 2061  Bit16u nbcols,nbrows,i;
18836                                           !BCC_EOS
18837                                           ! 2062  Bit16u address;
18838                                           !BCC_EOS
18839                                           ! 2063  if(rul>rlr)return;
18840 4855           55                         push	bp
18841 4856           89E5                       mov	bp,sp
18842 4858           83C4                   F2  add	sp,*-$E
18843                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
18844 485B           8A46         08            mov	al,8[bp]
18845 485E           3A46         0C            cmp	al,$C[bp]
18846 4861           76           04            jbe 	.B7
18847                       00004863            .B8:
18848 4863           89EC                       mov	sp,bp
18849 4865           5D                         pop	bp
18850 4866           C3                         ret
18851                                           !BCC_EOS
18852                                           ! 2064  if(cul>clr)return;
18853                       00004867            .B7:
18854                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
18855 4867           8A46         0A            mov	al,$A[bp]
18856 486A           3A46         0E            cmp	al,$E[bp]
18857 486D           76           04            jbe 	.B9
18858                       0000486F            .BA:
18859 486F           89EC                       mov	sp,bp
18860 4871           5D                         pop	bp
18861 4872           C3                         ret
18862                                           !BCC_EOS
18863                                           ! 2065  mode=read_byte(0x40,0x49);
18864                       00004873            .B9:
18865                                           ! Debug: list int = const $49 (used reg = )
18866 4873           B8                   0049  mov	ax,*$49
18867 4876           50                         push	ax
18868                                           ! Debug: list int = const $40 (used reg = )
18869 4877           B8                   0040  mov	ax,*$40
18870 487A           50                         push	ax
18871                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18872 487B           E8         3223            call	_read_byte
18873 487E           83C4                   04  add	sp,*4
18874                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
18875 4881           8846         FF            mov	-1[bp],al
18876                                           !BCC_EOS
18877                                           ! 2066  line=find_vga_entry(mode);
18878                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
18879 4884           8A46         FF            mov	al,-1[bp]
18880 4887           30E4                       xor	ah,ah
18881 4889           50                         push	ax
18882                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18883 488A           E8         3128            call	_find_vga_entry
18884 488D           44                         inc	sp
18885 488E           44                         inc	sp
18886                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
18887 488F           8846         FE            mov	-2[bp],al
18888                                           !BCC_EOS
18889                                           ! 2067  if(line==0xFF)return;
18890                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
18891 4892           8A46         FE            mov	al,-2[bp]
18892 4895           3C                     FF  cmp	al,#$FF
18893 4897           75           04            jne 	.BB
18894                       00004899            .BC:
18895 4899           89EC                       mov	sp,bp
18896 489B           5D                         pop	bp
18897 489C           C3                         ret
18898                                           !BCC_EOS
18899                                           ! 2068  nbrows=read_byte(0x40,0x84)+1;
18900                       0000489D            .BB:
18901                                           ! Debug: list int = const $84 (used reg = )
18902 489D           B8                   0084  mov	ax,#$84
18903 48A0           50                         push	ax
18904                                           ! Debug: list int = const $40 (used reg = )
18905 48A1           B8                   0040  mov	ax,*$40
18906 48A4           50                         push	ax
18907                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18908 48A5           E8         31F9            call	_read_byte
18909 48A8           83C4                   04  add	sp,*4
18910                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18911 48AB           30E4                       xor	ah,ah
18912                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18913 48AD           40                         inc	ax
18914 48AE           8946         F6            mov	-$A[bp],ax
18915                                           !BCC_EOS
18916                                           ! 2069  nbcols=read_word(0x40,0x4A);
18917                                           ! Debug: list int = const $4A (used reg = )
18918 48B1           B8                   004A  mov	ax,*$4A
18919 48B4           50                         push	ax
18920                                           ! Debug: list int = const $40 (used reg = )
18921 48B5           B8                   0040  mov	ax,*$40
18922 48B8           50                         push	ax
18923                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18924 48B9           E8         31F8            call	_read_word
18925 48BC           83C4                   04  add	sp,*4
18926                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18927 48BF           8946         F8            mov	-8[bp],ax
18928                                           !BCC_EOS
18929                                           ! 2070  if(page==0xFF)
18930                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
18931 48C2           8A46         10            mov	al,$10[bp]
18932 48C5           3C                     FF  cmp	al,#$FF
18933 48C7           75           11            jne 	.BD
18934                       000048C9            .BE:
18935                                           ! 2071   page=read_byte(0x40,0x62);
18936                                           ! Debug: list int = const $62 (used reg = )
18937 48C9           B8                   0062  mov	ax,*$62
18938 48CC           50                         push	ax
18939                                           ! Debug: list int = const $40 (used reg = )
18940 48CD           B8                   0040  mov	ax,*$40
18941 48D0           50                         push	ax
18942                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18943 48D1           E8         31CD            call	_read_byte
18944 48D4           83C4                   04  add	sp,*4
18945                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
18946 48D7           8846         10            mov	$10[bp],al
18947                                           !BCC_EOS
18948                                           ! 2072  if(rlr>=nbrows)rlr=nbrows-1;
18949                       000048DA            .BD:
18950                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
18951 48DA           8A46         0C            mov	al,$C[bp]
18952 48DD           30E4                       xor	ah,ah
18953 48DF           3B46         F6            cmp	ax,-$A[bp]
18954 48E2           72           07            jb  	.BF
18955                       000048E4            .C0:
18956                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18957 48E4           8B46         F6            mov	ax,-$A[bp]
18958                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
18959 48E7           48                         dec	ax
18960 48E8           8846         0C            mov	$C[bp],al
18961                                           !BCC_EOS
18962                                           ! 2073  if(clr>=nbcols)clr=nbcols-1;
18963                       000048EB            .BF:
18964                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
18965 48EB           8A46         0E            mov	al,$E[bp]
18966 48EE           30E4                       xor	ah,ah
18967 48F0           3B46         F8            cmp	ax,-8[bp]
18968 48F3           72           07            jb  	.C1
18969                       000048F5            .C2:
18970                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
18971 48F5           8B46         F8            mov	ax,-8[bp]
18972                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
18973 48F8           48                         dec	ax
18974 48F9           8846         0E            mov	$E[bp],al
18975                                           !BCC_EOS
18976                                           ! 2074  if(nblines>nbrows)nblines=0;
18977                       000048FC            .C1:
18978                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
18979 48FC           8A46         04            mov	al,4[bp]
18980 48FF           30E4                       xor	ah,ah
18981 4901           3B46         F6            cmp	ax,-$A[bp]
18982 4904           76           05            jbe 	.C3
18983                       00004906            .C4:
18984                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
18985 4906           30C0                       xor	al,al
18986 4908           8846         04            mov	4[bp],al
18987                                           !BCC_EOS
18988                                           ! 2075  cols=clr-cul+1;
18989                       0000490B            .C3:
18990                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
18991 490B           8A46         0E            mov	al,$E[bp]
18992 490E           30E4                       xor	ah,ah
18993 4910           2A46         0A            sub	al,$A[bp]
18994 4913           80DC                   00  sbb	ah,*0
18995                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18996                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
18997 4916           40                         inc	ax
18998 4917           8846         FB            mov	-5[bp],al
18999                                           !BCC_EOS
19000                                           ! 2076  if(vga_modes[line].class==0x00)
19001                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19002 491A           8A46         FE            mov	al,-2[bp]
19003 491D           30E4                       xor	ah,ah
19004 491F           B1                     03  mov	cl,*3
19005 4921           D3E0                       shl	ax,cl
19006 4923           89C3                       mov	bx,ax
19007 4925           81C3                 01DA  add	bx,#_vga_modes
19008                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19009 4929           8A47         01            mov	al,1[bx]
19010 492C           84C0                       test	al,al
19011 492E         0F85         0250            bne 	.C5
19012                       00004932            .C6:
19013                                           ! 2077   {
19014                                           ! 2078    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19015                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19016 4932           8B46         F8            mov	ax,-8[bp]
19017 4935           8B4E         F6            mov	cx,-$A[bp]
19018 4938           F7E9                       imul	cx
19019                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19020 493A           D1E0                       shl	ax,*1
19021                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19022 493C           0C                     FF  or	al,#$FF
19023                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19024                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19025 493E           89C3                       mov	bx,ax
19026 4940           8A46         10            mov	al,$10[bp]
19027 4943           30E4                       xor	ah,ah
19028 4945           93                         xchg	ax,bx
19029 4946           40                         inc	ax
19030 4947           89D9                       mov	cx,bx
19031 4949           F7E9                       imul	cx
19032                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19033 494B           8946         F2            mov	-$E[bp],ax
19034                                           !BCC_EOS
19035                                           ! 2079    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19036                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19037 494E           8A46         04            mov	al,4[bp]
19038 4951           84C0                       test	al,al
19039 4953           75           67            jne 	.C7
19040                       00004955            .CC:
19041                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19042 4955           8A46         08            mov	al,8[bp]
19043 4958           84C0                       test	al,al
19044 495A           75           60            jne 	.C7
19045                       0000495C            .CB:
19046                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19047 495C           8A46         0A            mov	al,$A[bp]
19048 495F           84C0                       test	al,al
19049 4961           75           59            jne 	.C7
19050                       00004963            .CA:
19051                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19052 4963           8B46         F6            mov	ax,-$A[bp]
19053                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19054                                           ! Debug: expression subtree swapping
19055 4966           48                         dec	ax
19056 4967           50                         push	ax
19057 4968           8A46         0C            mov	al,$C[bp]
19058 496B           30E4                       xor	ah,ah
19059 496D           3B46         F0            cmp	ax,-$10[bp]
19060 4970           8D66         F2            lea	sp,-$E[bp]
19061 4973           75           47            jne 	.C7
19062                       00004975            .C9:
19063                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19064 4975           8B46         F8            mov	ax,-8[bp]
19065                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19066                                           ! Debug: expression subtree swapping
19067 4978           48                         dec	ax
19068 4979           50                         push	ax
19069 497A           8A46         0E            mov	al,$E[bp]
19070 497D           30E4                       xor	ah,ah
19071 497F           3B46         F0            cmp	ax,-$10[bp]
19072 4982           8D66         F2            lea	sp,-$E[bp]
19073 4985           75           35            jne 	.C7
19074                       00004987            .C8:
19075                                           ! 2080     {
19076                                           ! 2081      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19077                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19078 4987           8B46         F6            mov	ax,-$A[bp]
19079 498A           8B4E         F8            mov	cx,-8[bp]
19080 498D           F7E9                       imul	cx
19081                                           ! Debug: list unsigned int = ax+0 (used reg = )
19082 498F           50                         push	ax
19083                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19084 4990           8A46         06            mov	al,6[bp]
19085 4993           30E4                       xor	ah,ah
19086                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19087 4995           B9                   0100  mov	cx,#$100
19088 4998           F7E9                       imul	cx
19089                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19090                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19091 499A           05                   0020  add	ax,*$20
19092 499D           50                         push	ax
19093                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19094 499E           FF76         F2            push	-$E[bp]
19095                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19096 49A1           8A46         FE            mov	al,-2[bp]
19097 49A4           30E4                       xor	ah,ah
19098 49A6           B1                     03  mov	cl,*3
19099 49A8           D3E0                       shl	ax,cl
19100 49AA           89C3                       mov	bx,ax
19101 49AC           81C3                 01DA  add	bx,#_vga_modes
19102                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19103 49B0           FF77         04            push	4[bx]
19104                                           ! Debug: func () void = memsetw+0 (used reg = )
19105 49B3           E8         3066            call	_memsetw
19106 49B6           83C4                   08  add	sp,*8
19107                                           !BCC_EOS
19108                                           ! 2082     }
19109                                           ! 2083    else
19110                                           ! 2084     {
19111 49B9           E9         01C3            br 	.CD
19112                       000049BC            .C7:
19113                                           ! 2085      if(dir==1)
19114                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19115 49BC           8A46         12            mov	al,$12[bp]
19116 49BF           3C                     01  cmp	al,*1
19117 49C1         0F85         00DC            bne 	.CE
19118                       000049C5            .CF:
19119                                           ! 2086       {for(i=rul;i<=rlr;i++)
19120                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19121 49C5           8A46         08            mov	al,8[bp]
19122 49C8           30E4                       xor	ah,ah
19123 49CA           8946         F4            mov	-$C[bp],ax
19124                                           !BCC_EOS
19125                                           !BCC_EOS
19126                                           ! 2087         {
19127 49CD           E9         00C2            br 	.D2
19128                       000049D0            .D3:
19129                                           ! 2088          if((i+nblines>rlr)||(nblines==0))
19130                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19131 49D0           8B46         F4            mov	ax,-$C[bp]
19132 49D3           0246         04            add	al,4[bp]
19133 49D6           80D4                   00  adc	ah,*0
19134                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19135 49D9           50                         push	ax
19136 49DA           8A46         0C            mov	al,$C[bp]
19137 49DD           30E4                       xor	ah,ah
19138 49DF           3B46         F0            cmp	ax,-$10[bp]
19139 49E2           8D66         F2            lea	sp,-$E[bp]
19140 49E5           72           07            jb  	.D5
19141                       000049E7            .D6:
19142                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19143 49E7           8A46         04            mov	al,4[bp]
19144 49EA           84C0                       test	al,al
19145 49EC           75           42            jne 	.D4
19146                       000049EE            .D5:
19147                                           ! 2089           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19148                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19149 49EE           8A46         FB            mov	al,-5[bp]
19150 49F1           30E4                       xor	ah,ah
19151 49F3           50                         push	ax
19152                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19153 49F4           8A46         06            mov	al,6[bp]
19154 49F7           30E4                       xor	ah,ah
19155                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19156 49F9           B9                   0100  mov	cx,#$100
19157 49FC           F7E9                       imul	cx
19158                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19159                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19160 49FE           05                   0020  add	ax,*$20
19161 4A01           50                         push	ax
19162                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19163 4A02           8B46         F4            mov	ax,-$C[bp]
19164 4A05           8B4E         F8            mov	cx,-8[bp]
19165 4A08           F7E9                       imul	cx
19166                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19167 4A0A           0246         0A            add	al,$A[bp]
19168 4A0D           80D4                   00  adc	ah,*0
19169                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19170 4A10           D1E0                       shl	ax,*1
19171                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19172                                           ! Debug: expression subtree swapping
19173 4A12           0346         F2            add	ax,-$E[bp]
19174                                           ! Debug: list unsigned int = ax+0 (used reg = )
19175 4A15           50                         push	ax
19176                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19177 4A16           8A46         FE            mov	al,-2[bp]
19178 4A19           30E4                       xor	ah,ah
19179 4A1B           B1                     03  mov	cl,*3
19180 4A1D           D3E0                       shl	ax,cl
19181 4A1F           89C3                       mov	bx,ax
19182 4A21           81C3                 01DA  add	bx,#_vga_modes
19183                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19184 4A25           FF77         04            push	4[bx]
19185                                           ! Debug: func () void = memsetw+0 (used reg = )
19186 4A28           E8         2FF1            call	_memsetw
19187 4A2B           83C4                   08  add	sp,*8
19188                                           !BCC_EOS
19189                                           ! 2090          else
19190                                           ! 2091           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19191 4A2E           EB           5B            jmp .D7
19192                       00004A30            .D4:
19193                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19194 4A30           8A46         FB            mov	al,-5[bp]
19195 4A33           30E4                       xor	ah,ah
19196 4A35           50                         push	ax
19197                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19198 4A36           8B46         F4            mov	ax,-$C[bp]
19199 4A39           0246         04            add	al,4[bp]
19200 4A3C           80D4                   00  adc	ah,*0
19201                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19202 4A3F           8B4E         F8            mov	cx,-8[bp]
19203 4A42           F7E9                       imul	cx
19204                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19205 4A44           0246         0A            add	al,$A[bp]
19206 4A47           80D4                   00  adc	ah,*0
19207                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19208 4A4A           D1E0                       shl	ax,*1
19209                                           ! Debug: list unsigned int = ax+0 (used reg = )
19210 4A4C           50                         push	ax
19211                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19212 4A4D           8A46         FE            mov	al,-2[bp]
19213 4A50           30E4                       xor	ah,ah
19214 4A52           B1                     03  mov	cl,*3
19215 4A54           D3E0                       shl	ax,cl
19216 4A56           89C3                       mov	bx,ax
19217 4A58           81C3                 01DA  add	bx,#_vga_modes
19218                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19219 4A5C           FF77         04            push	4[bx]
19220                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19221 4A5F           8B46         F4            mov	ax,-$C[bp]
19222 4A62           8B4E         F8            mov	cx,-8[bp]
19223 4A65           F7E9                       imul	cx
19224                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19225 4A67           0246         0A            add	al,$A[bp]
19226 4A6A           80D4                   00  adc	ah,*0
19227                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19228 4A6D           D1E0                       shl	ax,*1
19229                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19230                                           ! Debug: expression subtree swapping
19231 4A6F           0346         F2            add	ax,-$E[bp]
19232                                           ! Debug: list unsigned int = ax+0 (used reg = )
19233 4A72           50                         push	ax
19234                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19235 4A73           8A46         FE            mov	al,-2[bp]
19236 4A76           30E4                       xor	ah,ah
19237 4A78           B1                     03  mov	cl,*3
19238 4A7A           D3E0                       shl	ax,cl
19239 4A7C           89C3                       mov	bx,ax
19240 4A7E           81C3                 01DA  add	bx,#_vga_modes
19241                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19242 4A82           FF77         04            push	4[bx]
19243                                           ! Debug: func () void = memcpyw+0 (used reg = )
19244 4A85           E8         2FE9            call	_memcpyw
19245 4A88           83C4                   0A  add	sp,*$A
19246                                           !BCC_EOS
19247                                           ! 2092         }
19248                       00004A8B            .D7:
19249                                           ! 2093       }
19250                       00004A8B            .D1:
19251                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19252 4A8B           8B46         F4            mov	ax,-$C[bp]
19253 4A8E           40                         inc	ax
19254 4A8F           8946         F4            mov	-$C[bp],ax
19255                       00004A92            .D2:
19256                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19257 4A92           8A46         0C            mov	al,$C[bp]
19258 4A95           30E4                       xor	ah,ah
19259 4A97           3B46         F4            cmp	ax,-$C[bp]
19260 4A9A         0F83         FF32            bhis	.D3
19261                       00004A9E            .D8:
19262                       00004A9E            .D0:
19263                                           ! 2094      else
19264                                           ! 2095       {for(i=rlr;i>=rul;i--)
19265 4A9E           E9         00DE            br 	.D9
19266                       00004AA1            .CE:
19267                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19268 4AA1           8A46         0C            mov	al,$C[bp]
19269 4AA4           30E4                       xor	ah,ah
19270 4AA6           8946         F4            mov	-$C[bp],ax
19271                                           !BCC_EOS
19272                                           !BCC_EOS
19273                                           ! 2096         {
19274 4AA9           E9         00C7            br 	.DC
19275                       00004AAC            .DD:
19276                                           ! 2097          if((i<rul+nblines)||(nblines==0))
19277                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19278 4AAC           8A46         08            mov	al,8[bp]
19279 4AAF           30E4                       xor	ah,ah
19280 4AB1           0246         04            add	al,4[bp]
19281 4AB4           80D4                   00  adc	ah,*0
19282                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19283 4AB7           3B46         F4            cmp	ax,-$C[bp]
19284 4ABA           77           07            ja  	.DF
19285                       00004ABC            .E0:
19286                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19287 4ABC           8A46         04            mov	al,4[bp]
19288 4ABF           84C0                       test	al,al
19289 4AC1           75           42            jne 	.DE
19290                       00004AC3            .DF:
19291                                           ! 2098           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19292                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19293 4AC3           8A46         FB            mov	al,-5[bp]
19294 4AC6           30E4                       xor	ah,ah
19295 4AC8           50                         push	ax
19296                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19297 4AC9           8A46         06            mov	al,6[bp]
19298 4ACC           30E4                       xor	ah,ah
19299                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19300 4ACE           B9                   0100  mov	cx,#$100
19301 4AD1           F7E9                       imul	cx
19302                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19303                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19304 4AD3           05                   0020  add	ax,*$20
19305 4AD6           50                         push	ax
19306                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19307 4AD7           8B46         F4            mov	ax,-$C[bp]
19308 4ADA           8B4E         F8            mov	cx,-8[bp]
19309 4ADD           F7E9                       imul	cx
19310                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19311 4ADF           0246         0A            add	al,$A[bp]
19312 4AE2           80D4                   00  adc	ah,*0
19313                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19314 4AE5           D1E0                       shl	ax,*1
19315                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19316                                           ! Debug: expression subtree swapping
19317 4AE7           0346         F2            add	ax,-$E[bp]
19318                                           ! Debug: list unsigned int = ax+0 (used reg = )
19319 4AEA           50                         push	ax
19320                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19321 4AEB           8A46         FE            mov	al,-2[bp]
19322 4AEE           30E4                       xor	ah,ah
19323 4AF0           B1                     03  mov	cl,*3
19324 4AF2           D3E0                       shl	ax,cl
19325 4AF4           89C3                       mov	bx,ax
19326 4AF6           81C3                 01DA  add	bx,#_vga_modes
19327                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19328 4AFA           FF77         04            push	4[bx]
19329                                           ! Debug: func () void = memsetw+0 (used reg = )
19330 4AFD           E8         2F1C            call	_memsetw
19331 4B00           83C4                   08  add	sp,*8
19332                                           !BCC_EOS
19333                                           ! 2099          else
19334                                           ! 2100           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19335 4B03           EB           5B            jmp .E1
19336                       00004B05            .DE:
19337                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19338 4B05           8A46         FB            mov	al,-5[bp]
19339 4B08           30E4                       xor	ah,ah
19340 4B0A           50                         push	ax
19341                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19342 4B0B           8B46         F4            mov	ax,-$C[bp]
19343 4B0E           2A46         04            sub	al,4[bp]
19344 4B11           80DC                   00  sbb	ah,*0
19345                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19346 4B14           8B4E         F8            mov	cx,-8[bp]
19347 4B17           F7E9                       imul	cx
19348                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19349 4B19           0246         0A            add	al,$A[bp]
19350 4B1C           80D4                   00  adc	ah,*0
19351                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19352 4B1F           D1E0                       shl	ax,*1
19353                                           ! Debug: list unsigned int = ax+0 (used reg = )
19354 4B21           50                         push	ax
19355                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19356 4B22           8A46         FE            mov	al,-2[bp]
19357 4B25           30E4                       xor	ah,ah
19358 4B27           B1                     03  mov	cl,*3
19359 4B29           D3E0                       shl	ax,cl
19360 4B2B           89C3                       mov	bx,ax
19361 4B2D           81C3                 01DA  add	bx,#_vga_modes
19362                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19363 4B31           FF77         04            push	4[bx]
19364                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19365 4B34           8B46         F4            mov	ax,-$C[bp]
19366 4B37           8B4E         F8            mov	cx,-8[bp]
19367 4B3A           F7E9                       imul	cx
19368                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19369 4B3C           0246         0A            add	al,$A[bp]
19370 4B3F           80D4                   00  adc	ah,*0
19371                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19372 4B42           D1E0                       shl	ax,*1
19373                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19374                                           ! Debug: expression subtree swapping
19375 4B44           0346         F2            add	ax,-$E[bp]
19376                                           ! Debug: list unsigned int = ax+0 (used reg = )
19377 4B47           50                         push	ax
19378                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19379 4B48           8A46         FE            mov	al,-2[bp]
19380 4B4B           30E4                       xor	ah,ah
19381 4B4D           B1                     03  mov	cl,*3
19382 4B4F           D3E0                       shl	ax,cl
19383 4B51           89C3                       mov	bx,ax
19384 4B53           81C3                 01DA  add	bx,#_vga_modes
19385                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19386 4B57           FF77         04            push	4[bx]
19387                                           ! Debug: func () void = memcpyw+0 (used reg = )
19388 4B5A           E8         2F14            call	_memcpyw
19389 4B5D           83C4                   0A  add	sp,*$A
19390                                           !BCC_EOS
19391                                           ! 2101          if (i>rlr) break;
19392                       00004B60            .E1:
19393                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19394 4B60           8A46         0C            mov	al,$C[bp]
19395 4B63           30E4                       xor	ah,ah
19396 4B65           3B46         F4            cmp	ax,-$C[bp]
19397 4B68           73           02            jae 	.E2
19398                       00004B6A            .E3:
19399 4B6A           EB           13            jmp .DA
19400                                           !BCC_EOS
19401                                           ! 2102         }
19402                       00004B6C            .E2:
19403                                           ! 2103       }
19404                       00004B6C            .DB:
19405                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19406 4B6C           8B46         F4            mov	ax,-$C[bp]
19407 4B6F           48                         dec	ax
19408 4B70           8946         F4            mov	-$C[bp],ax
19409                       00004B73            .DC:
19410                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19411 4B73           8A46         08            mov	al,8[bp]
19412 4B76           30E4                       xor	ah,ah
19413 4B78           3B46         F4            cmp	ax,-$C[bp]
19414 4B7B         0F86         FF2D            blos	.DD
19415                       00004B7F            .E4:
19416                       00004B7F            .DA:
19417                                           ! 2104     }
19418                       00004B7F            .D9:
19419                                           ! 2105   }
19420                       00004B7F            .CD:
19421                                           ! 2106  else
19422                                           ! 2107   {
19423 4B7F           E9         03D5            br 	.E5
19424                       00004B82            .C5:
19425                                           ! 2108    cheight=video_param_table[line_to_vpti[line]].cheight;
19426                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19427 4B82           8A46         FE            mov	al,-2[bp]
19428 4B85           30E4                       xor	ah,ah
19429 4B87           89C3                       mov	bx,ax
19430                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19431 4B89           8A87       025A            mov	al,_line_to_vpti[bx]
19432 4B8D           30E4                       xor	ah,ah
19433 4B8F           B1                     06  mov	cl,*6
19434 4B91           D3E0                       shl	ax,cl
19435 4B93           89C3                       mov	bx,ax
19436 4B95           81C3                 026E  add	bx,#_video_param_table
19437                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19438 4B99           8A47         02            mov	al,2[bx]
19439 4B9C           8846         FD            mov	-3[bp],al
19440                                           !BCC_EOS
19441                                           ! 2109    switch(vga_modes[line].memmodel)
19442                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19443 4B9F           8A46         FE            mov	al,-2[bp]
19444 4BA2           30E4                       xor	ah,ah
19445 4BA4           B1                     03  mov	cl,*3
19446 4BA6           D3E0                       shl	ax,cl
19447 4BA8           89C3                       mov	bx,ax
19448 4BAA           81C3                 01DA  add	bx,#_vga_modes
19449 4BAE           8A47         02            mov	al,2[bx]
19450                                           ! 2110     {
19451 4BB1           E9         0391            br 	.E8
19452                                           ! 2111      case 0x04:
19453                                           ! 2112      case 0x03:
19454                       00004BB4            .E9:
19455                                           ! 2113        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19456                       00004BB4            .EA:
19457                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19458 4BB4           8A46         04            mov	al,4[bp]
19459 4BB7           84C0                       test	al,al
19460 4BB9         0F85         0089            bne 	.EB
19461                       00004BBD            .F0:
19462                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19463 4BBD           8A46         08            mov	al,8[bp]
19464 4BC0           84C0                       test	al,al
19465 4BC2         0F85         0080            bne 	.EB
19466                       00004BC6            .EF:
19467                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19468 4BC6           8A46         0A            mov	al,$A[bp]
19469 4BC9           84C0                       test	al,al
19470 4BCB           75           79            jne 	.EB
19471                       00004BCD            .EE:
19472                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19473 4BCD           8B46         F6            mov	ax,-$A[bp]
19474                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19475                                           ! Debug: expression subtree swapping
19476 4BD0           48                         dec	ax
19477 4BD1           50                         push	ax
19478 4BD2           8A46         0C            mov	al,$C[bp]
19479 4BD5           30E4                       xor	ah,ah
19480 4BD7           3B46         F0            cmp	ax,0+..FFFC[bp]
19481 4BDA           8D66         F2            lea	sp,2+..FFFC[bp]
19482 4BDD           75           67            jne 	.EB
19483                       00004BDF            .ED:
19484                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19485 4BDF           8B46         F8            mov	ax,-8[bp]
19486                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19487                                           ! Debug: expression subtree swapping
19488 4BE2           48                         dec	ax
19489 4BE3           50                         push	ax
19490 4BE4           8A46         0E            mov	al,$E[bp]
19491 4BE7           30E4                       xor	ah,ah
19492 4BE9           3B46         F0            cmp	ax,0+..FFFC[bp]
19493 4BEC           8D66         F2            lea	sp,2+..FFFC[bp]
19494 4BEF           75           55            jne 	.EB
19495                       00004BF1            .EC:
19496                                           ! 2114         {
19497                                           ! 2115          outw(0x3ce, 0x
19498                                           ! 2115 0205);
19499                                           ! Debug: list int = const $205 (used reg = )
19500 4BF1           B8                   0205  mov	ax,#$205
19501 4BF4           50                         push	ax
19502                                           ! Debug: list int = const $3CE (used reg = )
19503 4BF5           B8                   03CE  mov	ax,#$3CE
19504 4BF8           50                         push	ax
19505                                           ! Debug: func () void = outw+0 (used reg = )
19506 4BF9           E8         2F21            call	_outw
19507 4BFC           83C4                   04  add	sp,*4
19508                                           !BCC_EOS
19509                                           ! 2116          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19510                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19511 4BFF           8B46         F6            mov	ax,-$A[bp]
19512 4C02           8B4E         F8            mov	cx,-8[bp]
19513 4C05           F7E9                       imul	cx
19514                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19515 4C07           89C3                       mov	bx,ax
19516 4C09           8A46         FD            mov	al,-3[bp]
19517 4C0C           30E4                       xor	ah,ah
19518 4C0E           93                         xchg	ax,bx
19519 4C0F           89D9                       mov	cx,bx
19520 4C11           F7E9                       imul	cx
19521                                           ! Debug: list unsigned int = ax+0 (used reg = )
19522 4C13           50                         push	ax
19523                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19524 4C14           8A46         06            mov	al,6[bp]
19525 4C17           30E4                       xor	ah,ah
19526 4C19           50                         push	ax
19527                                           ! Debug: list int = const 0 (used reg = )
19528 4C1A           31C0                       xor	ax,ax
19529 4C1C           50                         push	ax
19530                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19531 4C1D           8A46         FE            mov	al,-2[bp]
19532 4C20           30E4                       xor	ah,ah
19533 4C22           B1                     03  mov	cl,*3
19534 4C24           D3E0                       shl	ax,cl
19535 4C26           89C3                       mov	bx,ax
19536 4C28           81C3                 01DA  add	bx,#_vga_modes
19537                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19538 4C2C           FF77         04            push	4[bx]
19539                                           ! Debug: func () void = memsetb+0 (used reg = )
19540 4C2F           E8         2DC5            call	_memsetb
19541 4C32           83C4                   08  add	sp,*8
19542                                           !BCC_EOS
19543                                           ! 2117          outw(0x3ce, 0x0005);
19544                                           ! Debug: list int = const 5 (used reg = )
19545 4C35           B8                   0005  mov	ax,*5
19546 4C38           50                         push	ax
19547                                           ! Debug: list int = const $3CE (used reg = )
19548 4C39           B8                   03CE  mov	ax,#$3CE
19549 4C3C           50                         push	ax
19550                                           ! Debug: func () void = outw+0 (used reg = )
19551 4C3D           E8         2EDD            call	_outw
19552 4C40           83C4                   04  add	sp,*4
19553                                           !BCC_EOS
19554                                           ! 2118         }
19555                                           ! 2119        else
19556                                           ! 2120         {
19557 4C43           E9         0121            br 	.F1
19558                       00004C46            .EB:
19559                                           ! 2121          if(dir==1)
19560                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19561 4C46           8A46         12            mov	al,$12[bp]
19562 4C49           3C                     01  cmp	al,*1
19563 4C4B         0F85         008A            bne 	.F2
19564                       00004C4F            .F3:
19565                                           ! 2122           {for(i=rul;i<=rlr;i++)
19566                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19567 4C4F           8A46         08            mov	al,8[bp]
19568 4C52           30E4                       xor	ah,ah
19569 4C54           8946         F4            mov	-$C[bp],ax
19570                                           !BCC_EOS
19571                                           !BCC_EOS
19572                                           ! 2123             {
19573 4C57           EB           73            jmp .F6
19574                       00004C59            .F7:
19575                                           ! 2124              if((i+nblines>rlr)||(nblines==0))
19576                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19577 4C59           8B46         F4            mov	ax,-$C[bp]
19578 4C5C           0246         04            add	al,4[bp]
19579 4C5F           80D4                   00  adc	ah,*0
19580                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19581 4C62           50                         push	ax
19582 4C63           8A46         0C            mov	al,$C[bp]
19583 4C66           30E4                       xor	ah,ah
19584 4C68           3B46         F0            cmp	ax,0+..FFFC[bp]
19585 4C6B           8D66         F2            lea	sp,2+..FFFC[bp]
19586 4C6E           72           07            jb  	.F9
19587                       00004C70            .FA:
19588                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19589 4C70           8A46         04            mov	al,4[bp]
19590 4C73           84C0                       test	al,al
19591 4C75           75           26            jne 	.F8
19592                       00004C77            .F9:
19593                                           ! 2125               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19594                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19595 4C77           8A46         06            mov	al,6[bp]
19596 4C7A           30E4                       xor	ah,ah
19597 4C7C           50                         push	ax
19598                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19599 4C7D           8A46         FD            mov	al,-3[bp]
19600 4C80           30E4                       xor	ah,ah
19601 4C82           50                         push	ax
19602                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19603 4C83           FF76         F8            push	-8[bp]
19604                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19605 4C86           8A46         FB            mov	al,-5[bp]
19606 4C89           30E4                       xor	ah,ah
19607 4C8B           50                         push	ax
19608                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19609 4C8C           FF76         F4            push	-$C[bp]
19610                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19611 4C8F           8A46         0A            mov	al,$A[bp]
19612 4C92           30E4                       xor	ah,ah
19613 4C94           50                         push	ax
19614                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19615 4C95           E8         F96B            call	_vgamem_fill_pl4
19616 4C98           83C4                   0C  add	sp,*$C
19617                                           !BCC_EOS
19618                                           ! 2126              else
19619                                           ! 2127               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
19620 4C9B           EB           28            jmp .FB
19621                       00004C9D            .F8:
19622                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19623 4C9D           8A46         FD            mov	al,-3[bp]
19624 4CA0           30E4                       xor	ah,ah
19625 4CA2           50                         push	ax
19626                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19627 4CA3           FF76         F8            push	-8[bp]
19628                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19629 4CA6           8A46         FB            mov	al,-5[bp]
19630 4CA9           30E4                       xor	ah,ah
19631 4CAB           50                         push	ax
19632                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19633 4CAC           FF76         F4            push	-$C[bp]
19634                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19635 4CAF           8B46         F4            mov	ax,-$C[bp]
19636 4CB2           0246         04            add	al,4[bp]
19637 4CB5           80D4                   00  adc	ah,*0
19638                                           ! Debug: list unsigned int = ax+0 (used reg = )
19639 4CB8           50                         push	ax
19640                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19641 4CB9           8A46         0A            mov	al,$A[bp]
19642 4CBC           30E4                       xor	ah,ah
19643 4CBE           50                         push	ax
19644                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19645 4CBF           E8         F87F            call	_vgamem_copy_pl4
19646 4CC2           83C4                   0C  add	sp,*$C
19647                                           !BCC_EOS
19648                                           ! 2128             }
19649                       00004CC5            .FB:
19650                                           ! 2129           }
19651                       00004CC5            .F5:
19652                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19653 4CC5           8B46         F4            mov	ax,-$C[bp]
19654 4CC8           40                         inc	ax
19655 4CC9           8946         F4            mov	-$C[bp],ax
19656                       00004CCC            .F6:
19657                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19658 4CCC           8A46         0C            mov	al,$C[bp]
19659 4CCF           30E4                       xor	ah,ah
19660 4CD1           3B46         F4            cmp	ax,-$C[bp]
19661 4CD4           73           83            jae	.F7
19662                       00004CD6            .FC:
19663                       00004CD6            .F4:
19664                                           ! 2130          else
19665                                           ! 2131           {for(i=rlr;i>=rul;i--)
19666 4CD6           E9         008E            br 	.FD
19667                       00004CD9            .F2:
19668                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19669 4CD9           8A46         0C            mov	al,$C[bp]
19670 4CDC           30E4                       xor	ah,ah
19671 4CDE           8946         F4            mov	-$C[bp],ax
19672                                           !BCC_EOS
19673                                           !BCC_EOS
19674                                           ! 2132             {
19675 4CE1           EB           78            jmp .100
19676                       00004CE3            .101:
19677                                           ! 2133              if((i<rul+nblines)||(nblines==0))
19678                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19679 4CE3           8A46         08            mov	al,8[bp]
19680 4CE6           30E4                       xor	ah,ah
19681 4CE8           0246         04            add	al,4[bp]
19682 4CEB           80D4                   00  adc	ah,*0
19683                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19684 4CEE           3B46         F4            cmp	ax,-$C[bp]
19685 4CF1           77           07            ja  	.103
19686                       00004CF3            .104:
19687                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19688 4CF3           8A46         04            mov	al,4[bp]
19689 4CF6           84C0                       test	al,al
19690 4CF8           75           26            jne 	.102
19691                       00004CFA            .103:
19692                                           ! 2134               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19693                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19694 4CFA           8A46         06            mov	al,6[bp]
19695 4CFD           30E4                       xor	ah,ah
19696 4CFF           50                         push	ax
19697                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19698 4D00           8A46         FD            mov	al,-3[bp]
19699 4D03           30E4                       xor	ah,ah
19700 4D05           50                         push	ax
19701                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19702 4D06           FF76         F8            push	-8[bp]
19703                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19704 4D09           8A46         FB            mov	al,-5[bp]
19705 4D0C           30E4                       xor	ah,ah
19706 4D0E           50                         push	ax
19707                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19708 4D0F           FF76         F4            push	-$C[bp]
19709                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19710 4D12           8A46         0A            mov	al,$A[bp]
19711 4D15           30E4                       xor	ah,ah
19712 4D17           50                         push	ax
19713                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19714 4D18           E8         F8E8            call	_vgamem_fill_pl4
19715 4D1B           83C4                   0C  add	sp,*$C
19716                                           !BCC_EOS
19717                                           ! 2135              else
19718                                           ! 2136               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
19719 4D1E           EB           28            jmp .105
19720                       00004D20            .102:
19721                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19722 4D20           8A46         FD            mov	al,-3[bp]
19723 4D23           30E4                       xor	ah,ah
19724 4D25           50                         push	ax
19725                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19726 4D26           FF76         F8            push	-8[bp]
19727                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19728 4D29           8A46         FB            mov	al,-5[bp]
19729 4D2C           30E4                       xor	ah,ah
19730 4D2E           50                         push	ax
19731                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
19732 4D2F           8B46         F4            mov	ax,-$C[bp]
19733 4D32           2A46         04            sub	al,4[bp]
19734 4D35           80DC                   00  sbb	ah,*0
19735                                           ! Debug: list unsigned int = ax+0 (used reg = )
19736 4D38           50                         push	ax
19737                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19738 4D39           FF76         F4            push	-$C[bp]
19739                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19740 4D3C           8A46         0A            mov	al,$A[bp]
19741 4D3F           30E4                       xor	ah,ah
19742 4D41           50                         push	ax
19743                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19744 4D42           E8         F7FC            call	_vgamem_copy_pl4
19745 4D45           83C4                   0C  add	sp,*$C
19746                                           !BCC_EOS
19747                                           ! 2137              if (i>rlr) break;
19748                       00004D48            .105:
19749                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19750 4D48           8A46         0C            mov	al,$C[bp]
19751 4D4B           30E4                       xor	ah,ah
19752 4D4D           3B46         F4            cmp	ax,-$C[bp]
19753 4D50           73           02            jae 	.106
19754                       00004D52            .107:
19755 4D52           EB           13            jmp .FE
19756                                           !BCC_EOS
19757                                           ! 2138             }
19758                       00004D54            .106:
19759                                           ! 2139           }
19760                       00004D54            .FF:
19761                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19762 4D54           8B46         F4            mov	ax,-$C[bp]
19763 4D57           48                         dec	ax
19764 4D58           8946         F4            mov	-$C[bp],ax
19765                       00004D5B            .100:
19766                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19767 4D5B           8A46         08            mov	al,8[bp]
19768 4D5E           30E4                       xor	ah,ah
19769 4D60           3B46         F4            cmp	ax,-$C[bp]
19770 4D63         0F86         FF7C            blos	.101
19771                       00004D67            .108:
19772                       00004D67            .FE:
19773                                           ! 2140         }
19774                       00004D67            .FD:
19775                                           ! 2141        break;
19776                       00004D67            .F1:
19777 4D67           E9         01ED            br 	.E6
19778                                           !BCC_EOS
19779                                           ! 2142      case 0x02:
19780                                           ! 2143        bpp=vga_modes[line].pixbits;
19781                       00004D6A            .109:
19782                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19783 4D6A           8A46         FE            mov	al,-2[bp]
19784 4D6D           30E4                       xor	ah,ah
19785 4D6F           B1                     03  mov	cl,*3
19786 4D71           D3E0                       shl	ax,cl
19787 4D73           89C3                       mov	bx,ax
19788 4D75           81C3                 01DA  add	bx,#_vga_modes
19789                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
19790 4D79           8A47         03            mov	al,3[bx]
19791 4D7C           8846         FC            mov	-4[bp],al
19792                                           !BCC_EOS
19793                                           ! 2144        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19794                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19795 4D7F           8A46         04            mov	al,4[bp]
19796 4D82           84C0                       test	al,al
19797 4D84           75           77            jne 	.10A
19798                       00004D86            .10F:
19799                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19800 4D86           8A46         08            mov	al,8[bp]
19801 4D89           84C0                       test	al,al
19802 4D8B           75           70            jne 	.10A
19803                       00004D8D            .10E:
19804                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19805 4D8D           8A46         0A            mov	al,$A[bp]
19806 4D90           84C0                       test	al,al
19807 4D92           75           69            jne 	.10A
19808                       00004D94            .10D:
19809                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19810 4D94           8B46         F6            mov	ax,-$A[bp]
19811                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19812                                           ! Debug: expression subtree swapping
19813 4D97           48                         dec	ax
19814 4D98           50                         push	ax
19815 4D99           8A46         0C            mov	al,$C[bp]
19816 4D9C           30E4                       xor	ah,ah
19817 4D9E           3B46         F0            cmp	ax,0+..FFFC[bp]
19818 4DA1           8D66         F2            lea	sp,2+..FFFC[bp]
19819 4DA4           75           57            jne 	.10A
19820                       00004DA6            .10C:
19821                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19822 4DA6           8B46         F8            mov	ax,-8[bp]
19823                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19824                                           ! Debug: expression subtree swapping
19825 4DA9           48                         dec	ax
19826 4DAA           50                         push	ax
19827 4DAB           8A46         0E            mov	al,$E[bp]
19828 4DAE           30E4                       xor	ah,ah
19829 4DB0           3B46         F0            cmp	ax,0+..FFFC[bp]
19830 4DB3           8D66         F2            lea	sp,2+..FFFC[bp]
19831 4DB6           75           45            jne 	.10A
19832                       00004DB8            .10B:
19833                                           ! 2145         {
19834                                           ! 2146          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
19835                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19836 4DB8           8B46         F6            mov	ax,-$A[bp]
19837 4DBB           8B4E         F8            mov	cx,-8[bp]
19838 4DBE           F7E9                       imul	cx
19839                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19840 4DC0           89C3                       mov	bx,ax
19841 4DC2           8A46         FD            mov	al,-3[bp]
19842 4DC5           30E4                       xor	ah,ah
19843 4DC7           93                         xchg	ax,bx
19844 4DC8           89D9                       mov	cx,bx
19845 4DCA           F7E9                       imul	cx
19846                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
19847 4DCC           89C3                       mov	bx,ax
19848 4DCE           8A46         FC            mov	al,-4[bp]
19849 4DD1           30E4                       xor	ah,ah
19850 4DD3           93                         xchg	ax,bx
19851 4DD4           89D9                       mov	cx,bx
19852 4DD6           F7E9                       imul	cx
19853                                           ! Debug: list unsigned int = ax+0 (used reg = )
19854 4DD8           50                         push	ax
19855                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19856 4DD9           8A46         06            mov	al,6[bp]
19857 4DDC           30E4                       xor	ah,ah
19858 4DDE           50                         push	ax
19859                                           ! Debug: list int = const 0 (used reg = )
19860 4DDF           31C0                       xor	ax,ax
19861 4DE1           50                         push	ax
19862                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19863 4DE2           8A46         FE            mov	al,-2[bp]
19864 4DE5           30E4                       xor	ah,ah
19865 4DE7           B1                     03  mov	cl,*3
19866 4DE9           D3E0                       shl	ax,cl
19867 4DEB           89C3                       mov	bx,ax
19868 4DED           81C3                 01DA  add	bx,#_vga_modes
19869                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19870 4DF1           FF77         04            push	4[bx]
19871                                           ! Debug: func () void = memsetb+0 (used reg = )
19872 4DF4           E8         2C00            call	_memsetb
19873 4DF7           83C4                   08  add	sp,*8
19874                                           !BCC_EOS
19875                                           ! 2147         }
19876                                           ! 2148        else
19877                                           ! 2149         {
19878 4DFA           E9         0144            br 	.110
19879                       00004DFD            .10A:
19880                                           ! 2150          if(bpp==2)
19881                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
19882 4DFD           8A46         FC            mov	al,-4[bp]
19883 4E00           3C                     02  cmp	al,*2
19884 4E02           75           1C            jne 	.111
19885                       00004E04            .112:
19886                                           ! 2151           {
19887                                           ! 2152            cul<<=1;
19888                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
19889 4E04           8A46         0A            mov	al,$A[bp]
19890 4E07           30E4                       xor	ah,ah
19891 4E09           D1E0                       shl	ax,*1
19892 4E0B           8846         0A            mov	$A[bp],al
19893                                           !BCC_EOS
19894                                           ! 2153            cols<<=1;
19895                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
19896 4E0E           8A46         FB            mov	al,-5[bp]
19897 4E11           30E4                       xor	ah,ah
19898 4E13           D1E0                       shl	ax,*1
19899 4E15           8846         FB            mov	-5[bp],al
19900                                           !BCC_EOS
19901                                           ! 2154            nbcols<<=1;
19902                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19903 4E18           8B46         F8            mov	ax,-8[bp]
19904 4E1B           D1E0                       shl	ax,*1
19905 4E1D           8946         F8            mov	-8[bp],ax
19906                                           !BCC_EOS
19907                                           ! 2155           }
19908                                           ! 2156          if(dir==1)
19909                       00004E20            .111:
19910                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19911 4E20           8A46         12            mov	al,$12[bp]
19912 4E23           3C                     01  cmp	al,*1
19913 4E25         0F85         008A            bne 	.113
19914                       00004E29            .114:
19915                                           ! 2157           {for(i=rul;i<=rlr;i++)
19916                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19917 4E29           8A46         08            mov	al,8[bp]
19918 4E2C           30E4                       xor	ah,ah
19919 4E2E           8946         F4            mov	-$C[bp],ax
19920                                           !BCC_EOS
19921                                           !BCC_EOS
19922                                           ! 2158             {
19923 4E31           EB           73            jmp .117
19924                       00004E33            .118:
19925                                           ! 2159              if((i+nblines>rlr)||(nblines==0))
19926                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19927 4E33           8B46         F4            mov	ax,-$C[bp]
19928 4E36           0246         04            add	al,4[bp]
19929 4E39           80D4                   00  adc	ah,*0
19930                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19931 4E3C           50                         push	ax
19932 4E3D           8A46         0C            mov	al,$C[bp]
19933 4E40           30E4                       xor	ah,ah
19934 4E42           3B46         F0            cmp	ax,0+..FFFC[bp]
19935 4E45           8D66         F2            lea	sp,2+..FFFC[bp]
19936 4E48           72           07            jb  	.11A
19937                       00004E4A            .11B:
19938                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19939 4E4A           8A46         04            mov	al,4[bp]
19940 4E4D           84C0                       test	al,al
19941 4E4F           75           26            jne 	.119
19942                       00004E51            .11A:
19943                                           ! 2160               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
19944                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19945 4E51           8A46         06            mov	al,6[bp]
19946 4E54           30E4                       xor	ah,ah
19947 4E56           50                         push	ax
19948                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19949 4E57           8A46         FD            mov	al,-3[bp]
19950 4E5A           30E4                       xor	ah,ah
19951 4E5C           50                         push	ax
19952                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19953 4E5D           FF76         F8            push	-8[bp]
19954                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19955 4E60           8A46         FB            mov	al,-5[bp]
19956 4E63           30E4                       xor	ah,ah
19957 4E65           50                         push	ax
19958                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19959 4E66           FF76         F4            push	-$C[bp]
19960                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19961 4E69           8A46         0A            mov	al,$A[bp]
19962 4E6C           30E4                       xor	ah,ah
19963 4E6E           50                         push	ax
19964                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
19965 4E6F           E8         F92E            call	_vgamem_fill_cga
19966 4E72           83C4                   0C  add	sp,*$C
19967                                           !BCC_EOS
19968                                           ! 2161              else
19969                                           ! 2162               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
19970 4E75           EB           28            jmp .11C
19971                       00004E77            .119:
19972                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19973 4E77           8A46         FD            mov	al,-3[bp]
19974 4E7A           30E4                       xor	ah,ah
19975 4E7C           50                         push	ax
19976                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19977 4E7D           FF76         F8            push	-8[bp]
19978                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19979 4E80           8A46         FB            mov	al,-5[bp]
19980 4E83           30E4                       xor	ah,ah
19981 4E85           50                         push	ax
19982                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19983 4E86           FF76         F4            push	-$C[bp]
19984                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19985 4E89           8B46         F4            mov	ax,-$C[bp]
19986 4E8C           0246         04            add	al,4[bp]
19987 4E8F           80D4                   00  adc	ah,*0
19988                                           ! Debug: list unsigned int = ax+0 (used reg = )
19989 4E92           50                         push	ax
19990                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19991 4E93           8A46         0A            mov	al,$A[bp]
19992 4E96           30E4                       xor	ah,ah
19993 4E98           50                         push	ax
19994                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
19995 4E99           E8         F7F2            call	_vgamem_copy_cga
19996 4E9C           83C4                   0C  add	sp,*$C
19997                                           !BCC_EOS
19998                                           ! 2163             }
19999                       00004E9F            .11C:
20000                                           ! 2164           }
20001                       00004E9F            .116:
20002                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20003 4E9F           8B46         F4            mov	ax,-$C[bp]
20004 4EA2           40                         inc	ax
20005 4EA3           8946         F4            mov	-$C[bp],ax
20006                       00004EA6            .117:
20007                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20008 4EA6           8A46         0C            mov	al,$C[bp]
20009 4EA9           30E4                       xor	ah,ah
20010 4EAB           3B46         F4            cmp	ax,-$C[bp]
20011 4EAE           73           83            jae	.118
20012                       00004EB0            .11D:
20013                       00004EB0            .115:
20014                                           ! 2165          else
20015                                           ! 2166           {for(i=rlr;i>=rul;i--)
20016 4EB0           E9         008E            br 	.11E
20017                       00004EB3            .113:
20018                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20019 4EB3           8A46         0C            mov	al,$C[bp]
20020 4EB6           30E4                       xor	ah,ah
20021 4EB8           8946         F4            mov	-$C[bp],ax
20022                                           !BCC_EOS
20023                                           !BCC_EOS
20024                                           ! 2167             {
20025 4EBB           EB           78            jmp .121
20026                       00004EBD            .122:
20027                                           ! 2168              if((i<rul+nblines)||(nblines==0))
20028                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20029 4EBD           8A46         08            mov	al,8[bp]
20030 4EC0           30E4                       xor	ah,ah
20031 4EC2           0246         04            add	al,4[bp]
20032 4EC5           80D4                   00  adc	ah,*0
20033                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20034 4EC8           3B46         F4            cmp	ax,-$C[bp]
20035 4ECB           77           07            ja  	.124
20036                       00004ECD            .125:
20037                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20038 4ECD           8A46         04            mov	al,4[bp]
20039 4ED0           84C0                       test	al,al
20040 4ED2           75           26            jne 	.123
20041                       00004ED4            .124:
20042                                           ! 2169               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20043                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20044 4ED4           8A46         06            mov	al,6[bp]
20045 4ED7           30E4                       xor	ah,ah
20046 4ED9           50                         push	ax
20047                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20048 4EDA           8A46         FD            mov	al,-3[bp]
20049 4EDD           30E4                       xor	ah,ah
20050 4EDF           50                         push	ax
20051                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20052 4EE0           FF76         F8            push	-8[bp]
20053                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20054 4EE3           8A46         FB            mov	al,-5[bp]
20055 4EE6           30E4                       xor	ah,ah
20056 4EE8           50                         push	ax
20057                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20058 4EE9           FF76         F4            push	-$C[bp]
20059                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20060 4EEC           8A46         0A            mov	al,$A[bp]
20061 4EEF           30E4                       xor	ah,ah
20062 4EF1           50                         push	ax
20063                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20064 4EF2           E8         F8AB            call	_vgamem_fill_cga
20065 4EF5           83C4                   0C  add	sp,*$C
20066                                           !BCC_EOS
20067                                           ! 2170              else
20068                                           ! 2171               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20069 4EF8           EB           28            jmp .126
20070                       00004EFA            .123:
20071                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20072 4EFA           8A46         FD            mov	al,-3[bp]
20073 4EFD           30E4                       xor	ah,ah
20074 4EFF           50                         push	ax
20075                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20076 4F00           FF76         F8            push	-8[bp]
20077                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20078 4F03           8A46         FB            mov	al,-5[bp]
20079 4F06           30E4                       xor	ah,ah
20080 4F08           50                         push	ax
20081                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20082 4F09           8B46         F4            mov	ax,-$C[bp]
20083 4F0C           2A46         04            sub	al,4[bp]
20084 4F0F           80DC                   00  sbb	ah,*0
20085                                           ! Debug: list unsigned int = ax+0 (used reg = )
20086 4F12           50                         push	ax
20087                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20088 4F13           FF76         F4            push	-$C[bp]
20089                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20090 4F16           8A46         0A            mov	al,$A[bp]
20091 4F19           30E4                       xor	ah,ah
20092 4F1B           50                         push	ax
20093                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20094 4F1C           E8         F76F            call	_vgamem_copy_cga
20095 4F1F           83C4                   0C  add	sp,*$C
20096                                           !BCC_EOS
20097                                           ! 2172              if (i>rlr) break;
20098                       00004F22            .126:
20099                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20100 4F22           8A46         0C            mov	al,$C[bp]
20101 4F25           30E4                       xor	ah,ah
20102 4F27           3B46         F4            cmp	ax,-$C[bp]
20103 4F2A           73           02            jae 	.127
20104                       00004F2C            .128:
20105 4F2C           EB           13            jmp .11F
20106                                           !BCC_EOS
20107                                           ! 2173             }
20108                       00004F2E            .127:
20109                                           ! 2174           }
20110                       00004F2E            .120:
20111                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20112 4F2E           8B46         F4            mov	ax,-$C[bp]
20113 4F31           48                         dec	ax
20114 4F32           8946         F4            mov	-$C[bp],ax
20115                       00004F35            .121:
20116                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20117 4F35           8A46         08            mov	al,8[bp]
20118 4F38           30E4                       xor	ah,ah
20119 4F3A           3B46         F4            cmp	ax,-$C[bp]
20120 4F3D         0F86         FF7C            blos	.122
20121                       00004F41            .129:
20122                       00004F41            .11F:
20123                                           ! 2175         }
20124                       00004F41            .11E:
20125                                           ! 2176        break;
20126                       00004F41            .110:
20127 4F41           EB           14            jmp .E6
20128                                           !BCC_EOS
20129                                           ! 2177     }
20130                                           ! 2178   }
20131 4F43           EB           12            jmp .E6
20132                       00004F45            .E8:
20133 4F45           2C                     02  sub	al,*2
20134 4F47         0F84         FE1F            beq 	.109
20135 4F4B           2C                     01  sub	al,*1
20136 4F4D         0F84         FC63            beq 	.EA
20137 4F51           2C                     01  sub	al,*1
20138 4F53         0F84         FC5D            beq 	.E9
20139                       00004F57            .E6:
20140                       FFFFFFF0            ..FFFC	=	-$10
20141                                           ! 2179 }
20142                       00004F57            .E5:
20143 4F57           89EC                       mov	sp,bp
20144 4F59           5D                         pop	bp
20145 4F5A           C3                         ret
20146                                           ! 2180 static void biosfn_read_char_attr (page,car)
20147                                           ! Register BX used in function biosfn_scroll
20148                                           ! 2181 Bit8u page;Bit16u *car;
20149                       00004F5B            _biosfn_read_char_attr:
20150                                           !BCC_EOS
20151                                           !BCC_EOS
20152                                           ! 2182 {Bit16u ss=get_SS();
20153 4F5B           55                         push	bp
20154 4F5C           89E5                       mov	bp,sp
20155 4F5E           4C                         dec	sp
20156 4F5F           4C                         dec	sp
20157                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20158 4F60           E8         2BCA            call	_get_SS
20159                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20160 4F63           8946         FE            mov	-2[bp],ax
20161                                           !BCC_EOS
20162                                           ! 2183  Bit8u xcurs,ycurs,mode,line;
20163                                           !BCC_EOS
20164                                           ! 2184  Bit16u nbcols,nbrows,address;
20165                                           !BCC_EOS
20166                                           ! 2185  Bit16u cursor,dummy;
20167                                           !BCC_EOS
20168                                           ! 2186  mode=read_byte(0x40,0x49);
20169 4F66           83C4                   F2  add	sp,*-$E
20170                                           ! Debug: list int = const $49 (used reg = )
20171 4F69           B8                   0049  mov	ax,*$49
20172 4F6C           50                         push	ax
20173                                           ! Debug: list int = const $40 (used reg = )
20174 4F6D           B8                   0040  mov	ax,*$40
20175 4F70           50                         push	ax
20176                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20177 4F71           E8         2B2D            call	_read_byte
20178 4F74           83C4                   04  add	sp,*4
20179                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20180 4F77           8846         FB            mov	-5[bp],al
20181                                           !BCC_EOS
20182                                           ! 2187  line=find_vga_entry(mode);
20183                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20184 4F7A           8A46         FB            mov	al,-5[bp]
20185 4F7D           30E4                       xor	ah,ah
20186 4F7F           50                         push	ax
20187                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20188 4F80           E8         2A32            call	_find_vga_entry
20189 4F83           44                         inc	sp
20190 4F84           44                         inc	sp
20191                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20192 4F85           8846         FA            mov	-6[bp],al
20193                                           !BCC_EOS
20194                                           ! 2188  if(line==0xFF)return;
20195                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20196 4F88           8A46         FA            mov	al,-6[bp]
20197 4F8B           3C                     FF  cmp	al,#$FF
20198 4F8D           75           04            jne 	.12A
20199                       00004F8F            .12B:
20200 4F8F           89EC                       mov	sp,bp
20201 4F91           5D                         pop	bp
20202 4F92           C3                         ret
20203                                           !BCC_EOS
20204                                           ! 2189  biosfn_get_cursor_pos(page,&dummy,&cursor);
20205                       00004F93            .12A:
20206                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20207 4F93           8D5E         F2            lea	bx,-$E[bp]
20208 4F96           53                         push	bx
20209                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20210 4F97           8D5E         F0            lea	bx,-$10[bp]
20211 4F9A           53                         push	bx
20212                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20213 4F9B           8A46         04            mov	al,4[bp]
20214 4F9E           30E4                       xor	ah,ah
20215 4FA0           50                         push	ax
20216                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20217 4FA1           E8         F3B9            call	_biosfn_get_cursor_pos
20218 4FA4           83C4                   06  add	sp,*6
20219                                           !BCC_EOS
20220                                           ! 2190 
20221                                           ! 2190  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20222                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20223 4FA7           8A46         F2            mov	al,-$E[bp]
20224                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20225 4FAA           8846         FD            mov	-3[bp],al
20226                                           !BCC_EOS
20227                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20228 4FAD           8B46         F2            mov	ax,-$E[bp]
20229 4FB0           30C0                       xor	al,al
20230                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20231 4FB2           88E0                       mov	al,ah
20232 4FB4           30E4                       xor	ah,ah
20233                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20234 4FB6           8846         FC            mov	-4[bp],al
20235                                           !BCC_EOS
20236                                           ! 2191  nbrows=read_byte(0x40,0x84)+1;
20237                                           ! Debug: list int = const $84 (used reg = )
20238 4FB9           B8                   0084  mov	ax,#$84
20239 4FBC           50                         push	ax
20240                                           ! Debug: list int = const $40 (used reg = )
20241 4FBD           B8                   0040  mov	ax,*$40
20242 4FC0           50                         push	ax
20243                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20244 4FC1           E8         2ADD            call	_read_byte
20245 4FC4           83C4                   04  add	sp,*4
20246                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20247 4FC7           30E4                       xor	ah,ah
20248                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20249 4FC9           40                         inc	ax
20250 4FCA           8946         F6            mov	-$A[bp],ax
20251                                           !BCC_EOS
20252                                           ! 2192  nbcols=read_word(0x40,0x4A);
20253                                           ! Debug: list int = const $4A (used reg = )
20254 4FCD           B8                   004A  mov	ax,*$4A
20255 4FD0           50                         push	ax
20256                                           ! Debug: list int = const $40 (used reg = )
20257 4FD1           B8                   0040  mov	ax,*$40
20258 4FD4           50                         push	ax
20259                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20260 4FD5           E8         2ADC            call	_read_word
20261 4FD8           83C4                   04  add	sp,*4
20262                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20263 4FDB           8946         F8            mov	-8[bp],ax
20264                                           !BCC_EOS
20265                                           ! 2193  if(vga_modes[line].class==0x00)
20266                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20267 4FDE           8A46         FA            mov	al,-6[bp]
20268 4FE1           30E4                       xor	ah,ah
20269 4FE3           B1                     03  mov	cl,*3
20270 4FE5           D3E0                       shl	ax,cl
20271 4FE7           89C3                       mov	bx,ax
20272 4FE9           81C3                 01DA  add	bx,#_vga_modes
20273                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20274 4FED           8A47         01            mov	al,1[bx]
20275 4FF0           84C0                       test	al,al
20276 4FF2           75           5E            jne 	.12C
20277                       00004FF4            .12D:
20278                                           ! 2194   {
20279                                           ! 2195    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20280                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20281 4FF4           8A46         FC            mov	al,-4[bp]
20282 4FF7           30E4                       xor	ah,ah
20283 4FF9           8B4E         F8            mov	cx,-8[bp]
20284 4FFC           F7E9                       imul	cx
20285                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20286                                           ! Debug: expression subtree swapping
20287 4FFE           0246         FD            add	al,-3[bp]
20288 5001           80D4                   00  adc	ah,*0
20289                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20290 5004           D1E0                       shl	ax,*1
20291 5006           50                         push	ax
20292                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20293 5007           8B46         F8            mov	ax,-8[bp]
20294 500A           8B4E         F6            mov	cx,-$A[bp]
20295 500D           F7E9                       imul	cx
20296                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20297 500F           D1E0                       shl	ax,*1
20298                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20299 5011           0C                     FF  or	al,#$FF
20300                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20301                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20302 5013           89C3                       mov	bx,ax
20303 5015           8A46         04            mov	al,4[bp]
20304 5018           30E4                       xor	ah,ah
20305 501A           93                         xchg	ax,bx
20306 501B           40                         inc	ax
20307 501C           89D9                       mov	cx,bx
20308 501E           F7E9                       imul	cx
20309                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20310 5020           0346         EE            add	ax,-$12[bp]
20311 5023           44                         inc	sp
20312 5024           44                         inc	sp
20313                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20314 5025           8946         F4            mov	-$C[bp],ax
20315                                           !BCC_EOS
20316                                           ! 2196    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20317                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20318 5028           FF76         F4            push	-$C[bp]
20319                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20320 502B           8A46         FA            mov	al,-6[bp]
20321 502E           30E4                       xor	ah,ah
20322 5030           B1                     03  mov	cl,*3
20323 5032           D3E0                       shl	ax,cl
20324 5034           89C3                       mov	bx,ax
20325 5036           81C3                 01DA  add	bx,#_vga_modes
20326                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20327 503A           FF77         04            push	4[bx]
20328                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20329 503D           E8         2A74            call	_read_word
20330 5040           83C4                   04  add	sp,*4
20331                                           ! Debug: list unsigned short = ax+0 (used reg = )
20332 5043           50                         push	ax
20333                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20334 5044           FF76         06            push	6[bp]
20335                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20336 5047           FF76         FE            push	-2[bp]
20337                                           ! Debug: func () void = write_word+0 (used reg = )
20338 504A           E8         2A92            call	_write_word
20339 504D           83C4                   06  add	sp,*6
20340                                           !BCC_EOS
20341                                           ! 2197   }
20342                                           ! 2198  else
20343                                           ! 2199   {
20344 5050           EB           00            jmp .12E
20345                       00005052            .12C:
20346                                           ! 2200   }
20347                                           ! 2201 }
20348                       00005052            .12E:
20349 5052           89EC                       mov	sp,bp
20350 5054           5D                         pop	bp
20351 5055           C3                         ret
20352                                           ! 2202 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20353                                           ! Register BX used in function biosfn_read_char_attr
20354                                           ! 2203 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20355                       00005056            _write_gfx_char_pl4:
20356                                           !BCC_EOS
20357                                           !BCC_EOS
20358                                           !BCC_EOS
20359                                           !BCC_EOS
20360                                           !BCC_EOS
20361                                           !BCC_EOS
20362                                           ! 2204 {
20363                                           ! 2205  Bit8u i,j,mask;
20364                                           !BCC_EOS
20365                                           ! 2206  Bit8u *fdata;
20366                                           !BCC_EOS
20367                                           ! 2207  Bit16u addr,dest,src;
20368                                           !BCC_EOS
20369                                           ! 2208  switch(cheight)
20370 5056           55                         push	bp
20371 5057           89E5                       mov	bp,sp
20372 5059           83C4                   F4  add	sp,*-$C
20373 505C           8A46         0E            mov	al,$E[bp]
20374                                           ! 2209   {case 14:
20375 505F           EB           18            jmp .131
20376                                           ! 2210     fdata = &vgafont14;
20377                       00005061            .132:
20378                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20379 5061           BB                   173E  mov	bx,#_vgafont14
20380 5064           895E         FA            mov	-6[bp],bx
20381                                           !BCC_EOS
20382                                           ! 2211     break;
20383 5067           EB           1A            jmp .12F
20384                                           !BCC_EOS
20385                                           ! 2212    case 16:
20386                                           ! 2213     fdata = &vgafont16;
20387                       00005069            .133:
20388                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20389 5069           BB                   253E  mov	bx,#_vgafont16
20390 506C           895E         FA            mov	-6[bp],bx
20391                                           !BCC_EOS
20392                                           ! 2214     break;
20393 506F           EB           12            jmp .12F
20394                                           !BCC_EOS
20395                                           ! 2215    default:
20396                                           ! 2216     fdata = &vgafont8;
20397                       00005071            .134:
20398                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20399 5071           BB                   0F3E  mov	bx,#_vgafont8
20400 5074           895E         FA            mov	-6[bp],bx
20401                                           !BCC_EOS
20402                                           ! 2217   }
20403                                           ! 2218  addr=xcurs+ycurs*cheight*nbcols;
20404 5077           EB           0A            jmp .12F
20405                       00005079            .131:
20406 5079           2C                     0E  sub	al,*$E
20407 507B           74           E4            je 	.132
20408 507D           2C                     02  sub	al,*2
20409 507F           74           E8            je 	.133
20410 5081           EB           EE            jmp	.134
20411                       00005083            .12F:
20412                       FFFFFFF2            ..FFFB	=	-$E
20413                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20414 5083           8A46         0E            mov	al,$E[bp]
20415 5086           30E4                       xor	ah,ah
20416 5088           89C3                       mov	bx,ax
20417 508A           8A46         0A            mov	al,$A[bp]
20418 508D           30E4                       xor	ah,ah
20419 508F           89D9                       mov	cx,bx
20420 5091           F7E9                       imul	cx
20421                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20422 5093           89C3                       mov	bx,ax
20423 5095           8A46         0C            mov	al,$C[bp]
20424 5098           30E4                       xor	ah,ah
20425 509A           93                         xchg	ax,bx
20426 509B           89D9                       mov	cx,bx
20427 509D           F7E9                       imul	cx
20428                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20429                                           ! Debug: expression subtree swapping
20430 509F           0246         08            add	al,8[bp]
20431 50A2           80D4                   00  adc	ah,*0
20432                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20433 50A5           8946         F8            mov	-8[bp],ax
20434                                           !BCC_EOS
20435                                           ! 2219  src = car * cheight;
20436                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20437 50A8           8A46         0E            mov	al,$E[bp]
20438 50AB           30E4                       xor	ah,ah
20439 50AD           89C3                       mov	bx,ax
20440 50AF           8A46         04            mov	al,4[bp]
20441 50B2           30E4                       xor	ah,ah
20442 50B4           89D9                       mov	cx,bx
20443 50B6           F7E9                       imul	cx
20444                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20445 50B8           8946         F4            mov	-$C[bp],ax
20446                                           !BCC_EOS
20447                                           ! 2220  outw(0x3c4, 0x0f02);
20448                                           ! Debug: list int = const $F02 (used reg = )
20449 50BB           B8                   0F02  mov	ax,#$F02
20450 50BE           50                         push	ax
20451                                           ! Debug: list int = const $3C4 (used reg = )
20452 50BF           B8                   03C4  mov	ax,#$3C4
20453 50C2           50                         push	ax
20454                                           ! Debug: func () void = outw+0 (used reg = )
20455 50C3           E8         2A57            call	_outw
20456 50C6           83C4                   04  add	sp,*4
20457                                           !BCC_EOS
20458                                           ! 2221  outw(0x3ce, 0x0205);
20459                                           ! Debug: list int = const $205 (used reg = )
20460 50C9           B8                   0205  mov	ax,#$205
20461 50CC           50                         push	ax
20462                                           ! Debug: list int = const $3CE (used reg = )
20463 50CD           B8                   03CE  mov	ax,#$3CE
20464 50D0           50                         push	ax
20465                                           ! Debug: func () void = outw+0 (used reg = )
20466 50D1           E8         2A49            call	_outw
20467 50D4           83C4                   04  add	sp,*4
20468                                           !BCC_EOS
20469                                           ! 2222  if(attr&0x80)
20470                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20471 50D7           8A46         06            mov	al,6[bp]
20472 50DA           24                     80  and	al,#$80
20473 50DC           84C0                       test	al,al
20474 50DE           74           10            je  	.135
20475                       000050E0            .136:
20476                                           ! 2223   {
20477                                           ! 2224    outw(0x3ce, 0x1803);
20478                                           ! Debug: list int = const $1803 (used reg = )
20479 50E0           B8                   1803  mov	ax,#$1803
20480 50E3           50                         push	ax
20481                                           ! Debug: list int = const $3CE (used reg = )
20482 50E4           B8                   03CE  mov	ax,#$3CE
20483 50E7           50                         push	ax
20484                                           ! Debug: func () void = outw+0 (used reg = )
20485 50E8           E8         2A32            call	_outw
20486 50EB           83C4                   04  add	sp,*4
20487                                           !BCC_EOS
20488                                           ! 2225   }
20489                                           ! 2226  else
20490                                           ! 2227   {
20491 50EE           EB           0E            jmp .137
20492                       000050F0            .135:
20493                                           ! 2228    outw(0x3ce, 0x0003);
20494                                           ! Debug: list int = const 3 (used reg = )
20495 50F0           B8                   0003  mov	ax,*3
20496 50F3           50                         push	ax
20497                                           ! Debug: list int = const $3CE (used reg = )
20498 50F4           B8                   03CE  mov	ax,#$3CE
20499 50F7           50                         push	ax
20500                                           ! Debug: func () void = outw+0 (used reg = )
20501 50F8           E8         2A22            call	_outw
20502 50FB           83C4                   04  add	sp,*4
20503                                           !BCC_EOS
20504                                           ! 2229   }
20505                                           ! 2230  for(i=0;i<cheight;i++)
20506                       000050FE            .137:
20507                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20508 50FE           30C0                       xor	al,al
20509 5100           8846         FF            mov	-1[bp],al
20510                                           !BCC_EOS
20511                                           !BCC_EOS
20512                                           ! 2231   {
20513 5103           E9         00A6            br 	.13A
20514                       00005106            .13B:
20515                                           ! 2232    dest=addr+i*nbcols;
20516                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20517 5106           8A46         0C            mov	al,$C[bp]
20518 5109           30E4                       xor	ah,ah
20519 510B           89C3                       mov	bx,ax
20520 510D           8A46         FF            mov	al,-1[bp]
20521 5110           30E4                       xor	ah,ah
20522 5112           89D9                       mov	cx,bx
20523 5114           F7E9                       imul	cx
20524                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20525                                           ! Debug: expression subtree swapping
20526 5116           0346         F8            add	ax,-8[bp]
20527                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20528 5119           8946         F6            mov	-$A[bp],ax
20529                                           !BCC_EOS
20530                                           ! 2233    for(j=0;j<8;j++)
20531                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20532 511C           30C0                       xor	al,al
20533 511E           8846         FE            mov	-2[bp],al
20534                                           !BCC_EOS
20535                                           !BCC_EOS
20536                                           ! 2234     {
20537 5121           EB           79            jmp .13E
20538                       00005123            .13F:
20539                                           ! 2235      mask=0x80>>j;
20540                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
20541 5123           8A46         FE            mov	al,-2[bp]
20542 5126           30E4                       xor	ah,ah
20543 5128           89C3                       mov	bx,ax
20544 512A           B8                   0080  mov	ax,#$80
20545 512D           89D9                       mov	cx,bx
20546 512F           D3F8                       sar	ax,cl
20547                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
20548 5131           8846         FD            mov	-3[bp],al
20549                                           !BCC_EOS
20550                                           ! 2236      outw(0x3ce, (mask << 8) | 0x08);
20551                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
20552 5134           8A46         FD            mov	al,-3[bp]
20553 5137           30E4                       xor	ah,ah
20554 5139           88C4                       mov	ah,al
20555 513B           30C0                       xor	al,al
20556                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
20557 513D           0C                     08  or	al,*8
20558                                           ! Debug: list unsigned int = ax+0 (used reg = )
20559 513F           50                         push	ax
20560                                           ! Debug: list int = const $3CE (used reg = )
20561 5140           B8                   03CE  mov	ax,#$3CE
20562 5143           50                         push	ax
20563                                           ! Debug: func () void = outw+0 (used reg = )
20564 5144           E8         29D6            call	_outw
20565 5147           83C4                   04  add	sp,*4
20566                                           !BCC_EOS
20567                                           ! 2237      read_byte(0xa000,dest);
20568                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20569 514A           FF76         F6            push	-$A[bp]
20570                                           ! Debug: list unsigned int = const $A000 (used reg = )
20571 514D           B8                   A000  mov	ax,#$A000
20572 5150           50                         push	ax
20573                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20574 5151           E8         294D            call	_read_byte
20575 5154           83C4                   04  add	sp,*4
20576                                           !BCC_EOS
20577                                           ! 2238      if(fdata[src+i]&mask)
20578                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20579 5157           8B46         F4            mov	ax,-$C[bp]
20580 515A           0246         FF            add	al,-1[bp]
20581 515D           80D4                   00  adc	ah,*0
20582                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20583 5160           0346         FA            add	ax,-6[bp]
20584 5163           89C3                       mov	bx,ax
20585                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20586 5165           8A07                       mov	al,[bx]
20587 5167           2246         FD            and	al,-3[bp]
20588 516A           84C0                       test	al,al
20589 516C           74           17            je  	.140
20590                       0000516E            .141:
20591                                           ! 2239       {
20592                                           ! 2240        write_byte(0xa000,dest,attr&0x0f);
20593                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
20594 516E           8A46         06            mov	al,6[bp]
20595 5171           24                     0F  and	al,*$F
20596                                           ! Debug: list unsigned char = al+0 (used reg = )
20597 5173           30E4                       xor	ah,ah
20598 5175           50                         push	ax
20599                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20600 5176           FF76         F6            push	-$A[bp]
20601                                           ! Debug: list unsigned int = const $A000 (used reg = )
20602 5179           B8                   A000  mov	ax,#$A000
20603 517C           50                         push	ax
20604                                           ! Debug: func () void = write_byte+0 (used reg = )
20605 517D           E8         2947            call	_write_byte
20606 5180           83C4                   06  add	sp,*6
20607                                           !BCC_EOS
20608                                           ! 2241       }
20609                                           ! 2242      else
20610                                           ! 2243       {
20611 5183           EB           10            jmp .142
20612                       00005185            .140:
20613                                           ! 2244        write_byte(0xa000,dest,0x00);
20614                                           ! Debug: list int = const 0 (used reg = )
20615 5185           31C0                       xor	ax,ax
20616 5187           50                         push	ax
20617                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20618 5188           FF76         F6            push	-$A[bp]
20619                                           ! Debug: list unsigned int = const $A000 (used reg = )
20620 518B           B8                   A000  mov	ax,#$A000
20621 518E           50                         push	ax
20622                                           ! Debug: func () void = write_byte+0 (used reg = )
20623 518F           E8         2935            call	_write_byte
20624 5192           83C4                   06  add	sp,*6
20625                                           !BCC_EOS
20626                                           ! 2245       }
20627                                           ! 2246     }
20628                       00005195            .142:
20629                                           ! 2247   }
20630                       00005195            .13D:
20631                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20632 5195           8A46         FE            mov	al,-2[bp]
20633 5198           40                         inc	ax
20634 5199           8846         FE            mov	-2[bp],al
20635                       0000519C            .13E:
20636                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20637 519C           8A46         FE            mov	al,-2[bp]
20638 519F           3C                     08  cmp	al,*8
20639 51A1         0F82         FF7E            blo 	.13F
20640                       000051A5            .143:
20641                       000051A5            .13C:
20642                                           ! 2248 #asm
20643                       000051A5            .139:
20644                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
20645 51A5           8A46         FF            mov	al,-1[bp]
20646 51A8           40                         inc	ax
20647 51A9           8846         FF            mov	-1[bp],al
20648                       000051AC            .13A:
20649                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
20650 51AC           8A46         FF            mov	al,-1[bp]
20651 51AF           3A46         0E            cmp	al,$E[bp]
20652 51B2         0F82         FF50            blo 	.13B
20653                       000051B6            .144:
20654                       000051B6            .138:
20655                                           !BCC_EOS
20656                                           !BCC_ASM
20657                       0000000A            _write_gfx_char_pl4.j	set	$A
20658                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
20659                       00000006            _write_gfx_char_pl4.fdata	set	6
20660                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
20661                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
20662                       0000000E            .write_gfx_char_pl4.cheight	set	$E
20663                       00000018            _write_gfx_char_pl4.nbcols	set	$18
20664                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
20665                       0000000B            _write_gfx_char_pl4.i	set	$B
20666                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
20667                       00000016            _write_gfx_char_pl4.ycurs	set	$16
20668                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
20669                       00000009            _write_gfx_char_pl4.mask	set	9
20670                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
20671                       00000002            _write_gfx_char_pl4.dest	set	2
20672                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
20673                       00000014            _write_gfx_char_pl4.xcurs	set	$14
20674                       00000008            .write_gfx_char_pl4.xcurs	set	8
20675                       00000000            _write_gfx_char_pl4.src	set	0
20676                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
20677                       00000012            _write_gfx_char_pl4.attr	set	$12
20678                       00000006            .write_gfx_char_pl4.attr	set	6
20679                       00000010            _write_gfx_char_pl4.car	set	$10
20680                       00000004            .write_gfx_char_pl4.car	set	4
20681                       00000004            _write_gfx_char_pl4.addr	set	4
20682                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
20683 51B6           BA                   03CE    mov dx, # 0x3ce
20684 51B9           B8                   FF08    mov ax, #0xff08
20685 51BC           EF                           out dx, ax
20686 51BD           B8                   0005    mov ax, #0x0005
20687 51C0           EF                           out dx, ax
20688 51C1           B8                   0003    mov ax, #0x0003
20689 51C4           EF                           out dx, ax
20690                                           ! 2256 endasm
20691                                           !BCC_ENDASM
20692                                           !BCC_EOS
20693                                           ! 2257 }
20694 51C5           89EC                       mov	sp,bp
20695 51C7           5D                         pop	bp
20696 51C8           C3                         ret
20697                                           ! 2258 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
20698                                           ! Register BX used in function write_gfx_char_pl4
20699                                           ! 2259 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
20700                       000051C9            _write_gfx_char_cga:
20701                                           !BCC_EOS
20702                                           !BCC_EOS
20703                                           !BCC_EOS
20704                                           !BCC_EOS
20705                                           !BCC_EOS
20706                                           !BCC_EOS
20707                                           ! 2260 {
20708                                           ! 2261  Bit8u i,j,mask,data;
20709                                           !BCC_EOS
20710                                           ! 2262  Bit8u *fdata;
20711                                           !BCC_EOS
20712                                           ! 2263  Bit16u addr,dest,src;
20713                                           !BCC_EOS
20714                                           ! 2264  fdata = &vgafont8;
20715 51C9           55                         push	bp
20716 51CA           89E5                       mov	bp,sp
20717 51CC           83C4                   F4  add	sp,*-$C
20718                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20719 51CF           BB                   0F3E  mov	bx,#_vgafont8
20720 51D2           895E         FA            mov	-6[bp],bx
20721                                           !BCC_EOS
20722                                           ! 2265  addr=(xcurs*bpp)+ycurs*320;
20723                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
20724 51D5           8A46         0A            mov	al,$A[bp]
20725 51D8           30E4                       xor	ah,ah
20726 51DA           B9                   0140  mov	cx,#$140
20727 51DD           F7E9                       imul	cx
20728 51DF           50                         push	ax
20729                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
20730 51E0           8A46         0E            mov	al,$E[bp]
20731 51E3           30E4                       xor	ah,ah
20732 51E5           89C3                       mov	bx,ax
20733 51E7           8A46         08            mov	al,8[bp]
20734 51EA           30E4                       xor	ah,ah
20735 51EC           89D9                       mov	cx,bx
20736 51EE           F7E9                       imul	cx
20737                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
20738 51F0           0346         F2            add	ax,-$E[bp]
20739 51F3           44                         inc	sp
20740 51F4           44                         inc	sp
20741                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20742 51F5           8946         F8            mov	-8[bp],ax
20743                                           !BCC_EOS
20744                                           ! 2266  src = car * 8;
20745                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
20746 51F8           8A46         04            mov	al,4[bp]
20747 51FB           30E4                       xor	ah,ah
20748 51FD           B1                     03  mov	cl,*3
20749 51FF           D3E0                       shl	ax,cl
20750                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20751 5201           8946         F4            mov	-$C[bp],ax
20752                                           !BCC_EOS
20753                                           ! 2267  for(i=0;i<8;i++)
20754                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20755 5204           30C0                       xor	al,al
20756 5206           8846         FF            mov	-1[bp],al
20757                                           !BCC_EOS
20758                                           !BCC_EOS
20759                                           ! 2268   {
20760 5209           E9         01B5            br 	.147
20761                       0000520C            .148:
20762                                           ! 2269    dest=addr+(i>>1)*80;
20763                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20764 520C           8A46         FF            mov	al,-1[bp]
20765 520F           30E4                       xor	ah,ah
20766 5211           D1E8                       shr	ax,*1
20767                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
20768 5213           B9                   0050  mov	cx,*$50
20769 5216           F7E9                       imul	cx
20770                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20771                                           ! Debug: expression subtree swapping
20772 5218           0346         F8            add	ax,-8[bp]
20773                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20774 521B           8946         F6            mov	-$A[bp],ax
20775                                           !BCC_EOS
20776                                           ! 2270    if (i & 1) dest += 0x2000;
20777                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20778 521E           8A46         FF            mov	al,-1[bp]
20779 5221           24                     01  and	al,*1
20780 5223           84C0                       test	al,al
20781 5225           74           09            je  	.149
20782                       00005227            .14A:
20783                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
20784 5227           8B46         F6            mov	ax,-$A[bp]
20785 522A           05                   2000  add	ax,#$2000
20786 522D           8946         F6            mov	-$A[bp],ax
20787                                           !BCC_EOS
20788                                           ! 2271    mask = 0x80;
20789                       00005230            .149:
20790                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
20791 5230           B0                     80  mov	al,#$80
20792 5232           8846         FD            mov	-3[bp],al
20793                                           !BCC_EOS
20794                                           ! 2272    if (bpp == 1)
20795                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
20796 5235           8A46         0E            mov	al,$E[bp]
20797 5238           3C                     01  cmp	al,*1
20798 523A         0F85         00B3            bne 	.14B
20799                       0000523E            .14C:
20800                                           ! 2273     {
20801                                           ! 2274      if (attr & 0x80)
20802                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20803 523E           8A46         06            mov	al,6[bp]
20804 5241           24                     80  and	al,#$80
20805 5243           84C0                       test	al,al
20806 5245           74           12            je  	.14D
20807                       00005247            .14E:
20808                                           ! 2275       {
20809                                           ! 2276        data = read_byte(0xb800,dest);
20810                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20811 5247           FF76         F6            push	-$A[bp]
20812                                           ! Debug: list unsigned int = const $B800 (used reg = )
20813 524A           B8                   B800  mov	ax,#$B800
20814 524D           50                         push	ax
20815                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20816 524E           E8         2850            call	_read_byte
20817 5251           83C4                   04  add	sp,*4
20818                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20819 5254           8846         FC            mov	-4[bp],al
20820                                           !BCC_EOS
20821                                           ! 2277       }
20822                                           ! 2278      else
20823                                           ! 2279       {
20824 5257           EB           05            jmp .14F
20825                       00005259            .14D:
20826                                           ! 2280        data = 0x00;
20827                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20828 5259           30C0                       xor	al,al
20829 525B           8846         FC            mov	-4[bp],al
20830                                           !BCC_EOS
20831                                           ! 2281       }
20832                                           ! 2282      for(j=0;j<8;j++)
20833                       0000525E            .14F:
20834                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20835 525E           30C0                       xor	al,al
20836 5260           8846         FE            mov	-2[bp],al
20837                                           !BCC_EOS
20838                                           !BCC_EOS
20839                                           ! 2283       {
20840 5263           EB           6F            jmp .152
20841                       00005265            .153:
20842                                           ! 2284        if (fdata[src+i] & mask)
20843                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20844 5265           8B46         F4            mov	ax,-$C[bp]
20845 5268           0246         FF            add	al,-1[bp]
20846 526B           80D4                   00  adc	ah,*0
20847                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20848 526E           0346         FA            add	ax,-6[bp]
20849 5271           89C3                       mov	bx,ax
20850                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20851 5273           8A07                       mov	al,[bx]
20852 5275           2246         FD            and	al,-3[bp]
20853 5278           84C0                       test	al,al
20854 527A           74           47            je  	.154
20855                       0000527C            .155:
20856                                           ! 2285         {
20857                                           ! 2286          if (attr & 0x80)
20858                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20859 527C           8A46         06            mov	al,6[bp]
20860 527F           24                     80  and	al,#$80
20861 5281           84C0                       test	al,al
20862 5283           74           20            je  	.156
20863                       00005285            .157:
20864                                           ! 2287           {
20865                                           ! 2288            data ^= (attr & 0x01) << (7-j);
20866                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20867 5285           B8                   0007  mov	ax,*7
20868 5288           2A46         FE            sub	al,-2[bp]
20869 528B           80DC                   00  sbb	ah,*0
20870 528E           50                         push	ax
20871                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20872 528F           8A46         06            mov	al,6[bp]
20873 5292           24                     01  and	al,*1
20874                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20875 5294           30E4                       xor	ah,ah
20876 5296           8B4E         F2            mov	cx,-$E[bp]
20877 5299           D3E0                       shl	ax,cl
20878 529B           44                         inc	sp
20879 529C           44                         inc	sp
20880                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20881 529D           3246         FC            xor	al,-4[bp]
20882 52A0           8846         FC            mov	-4[bp],al
20883                                           !BCC_EOS
20884                                           ! 2289           }
20885                                           ! 2290          else
20886                                           ! 2291           {
20887 52A3           EB           1E            jmp .158
20888                       000052A5            .156:
20889                                           ! 2292            data |= (attr & 0x01) << (7-j);
20890                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20891 52A5           B8                   0007  mov	ax,*7
20892 52A8           2A46         FE            sub	al,-2[bp]
20893 52AB           80DC                   00  sbb	ah,*0
20894 52AE           50                         push	ax
20895                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20896 52AF           8A46         06            mov	al,6[bp]
20897 52B2           24                     01  and	al,*1
20898                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20899 52B4           30E4                       xor	ah,ah
20900 52B6           8B4E         F2            mov	cx,-$E[bp]
20901 52B9           D3E0                       shl	ax,cl
20902 52BB           44                         inc	sp
20903 52BC           44                         inc	sp
20904                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20905 52BD           0A46         FC            or	al,-4[bp]
20906 52C0           8846         FC            mov	-4[bp],al
20907                                           !BCC_EOS
20908                                           ! 2293           }
20909                                           ! 2294         }
20910                       000052C3            .158:
20911                                           ! 2295        mask
20912                                           ! 2295  >>= 1;
20913                       000052C3            .154:
20914                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
20915 52C3           8A46         FD            mov	al,-3[bp]
20916 52C6           30E4                       xor	ah,ah
20917 52C8           D1E8                       shr	ax,*1
20918 52CA           8846         FD            mov	-3[bp],al
20919                                           !BCC_EOS
20920                                           ! 2296       }
20921                                           ! 2297      write_byte(0xb800,dest,data);
20922                       000052CD            .151:
20923                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20924 52CD           8A46         FE            mov	al,-2[bp]
20925 52D0           40                         inc	ax
20926 52D1           8846         FE            mov	-2[bp],al
20927                       000052D4            .152:
20928                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20929 52D4           8A46         FE            mov	al,-2[bp]
20930 52D7           3C                     08  cmp	al,*8
20931 52D9           72           8A            jb 	.153
20932                       000052DB            .159:
20933                       000052DB            .150:
20934                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
20935 52DB           8A46         FC            mov	al,-4[bp]
20936 52DE           30E4                       xor	ah,ah
20937 52E0           50                         push	ax
20938                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20939 52E1           FF76         F6            push	-$A[bp]
20940                                           ! Debug: list unsigned int = const $B800 (used reg = )
20941 52E4           B8                   B800  mov	ax,#$B800
20942 52E7           50                         push	ax
20943                                           ! Debug: func () void = write_byte+0 (used reg = )
20944 52E8           E8         27DC            call	_write_byte
20945 52EB           83C4                   06  add	sp,*6
20946                                           !BCC_EOS
20947                                           ! 2298     }
20948                                           ! 2299    else
20949                                           ! 2300     {
20950 52EE           E9         00C9            br 	.15A
20951                       000052F1            .14B:
20952                                           ! 2301      while (mask > 0)
20953                                           ! 2302       {
20954 52F1           E9         00BD            br 	.15C
20955                       000052F4            .15D:
20956                                           ! 2303        if (attr & 0x80)
20957                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20958 52F4           8A46         06            mov	al,6[bp]
20959 52F7           24                     80  and	al,#$80
20960 52F9           84C0                       test	al,al
20961 52FB           74           12            je  	.15E
20962                       000052FD            .15F:
20963                                           ! 2304         {
20964                                           ! 2305          data = read_byte(0xb800,dest);
20965                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20966 52FD           FF76         F6            push	-$A[bp]
20967                                           ! Debug: list unsigned int = const $B800 (used reg = )
20968 5300           B8                   B800  mov	ax,#$B800
20969 5303           50                         push	ax
20970                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20971 5304           E8         279A            call	_read_byte
20972 5307           83C4                   04  add	sp,*4
20973                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20974 530A           8846         FC            mov	-4[bp],al
20975                                           !BCC_EOS
20976                                           ! 2306         }
20977                                           ! 2307        else
20978                                           ! 2308         {
20979 530D           EB           05            jmp .160
20980                       0000530F            .15E:
20981                                           ! 2309          data = 0x00;
20982                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20983 530F           30C0                       xor	al,al
20984 5311           8846         FC            mov	-4[bp],al
20985                                           !BCC_EOS
20986                                           ! 2310         }
20987                                           ! 2311        for(j=0;j<4;j++)
20988                       00005314            .160:
20989                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20990 5314           30C0                       xor	al,al
20991 5316           8846         FE            mov	-2[bp],al
20992                                           !BCC_EOS
20993                                           !BCC_EOS
20994                                           ! 2312         {
20995 5319           EB           75            jmp .163
20996                       0000531B            .164:
20997                                           ! 2313          if (fdata[src+i] & mask)
20998                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20999 531B           8B46         F4            mov	ax,-$C[bp]
21000 531E           0246         FF            add	al,-1[bp]
21001 5321           80D4                   00  adc	ah,*0
21002                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21003 5324           0346         FA            add	ax,-6[bp]
21004 5327           89C3                       mov	bx,ax
21005                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21006 5329           8A07                       mov	al,[bx]
21007 532B           2246         FD            and	al,-3[bp]
21008 532E           84C0                       test	al,al
21009 5330           74           4D            je  	.165
21010                       00005332            .166:
21011                                           ! 2314           {
21012                                           ! 2315            if (attr & 0x80)
21013                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21014 5332           8A46         06            mov	al,6[bp]
21015 5335           24                     80  and	al,#$80
21016 5337           84C0                       test	al,al
21017 5339         0F84         0022            beq 	.167
21018                       0000533D            .168:
21019                                           ! 2316             {
21020                                           ! 2317              data ^= (attr & 0x03) << ((3-j)*2);
21021                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21022 533D           B8                   0003  mov	ax,*3
21023 5340           2A46         FE            sub	al,-2[bp]
21024 5343           80DC                   00  sbb	ah,*0
21025                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21026 5346           D1E0                       shl	ax,*1
21027 5348           50                         push	ax
21028                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21029 5349           8A46         06            mov	al,6[bp]
21030 534C           24                     03  and	al,*3
21031                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21032 534E           30E4                       xor	ah,ah
21033 5350           8B4E         F2            mov	cx,-$E[bp]
21034 5353           D3E0                       shl	ax,cl
21035 5355           44                         inc	sp
21036 5356           44                         inc	sp
21037                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21038 5357           3246         FC            xor	al,-4[bp]
21039 535A           8846         FC            mov	-4[bp],al
21040                                           !BCC_EOS
21041                                           ! 2318             }
21042                                           ! 2319            else
21043                                           ! 2320             {
21044 535D           EB           20            jmp .169
21045                       0000535F            .167:
21046                                           ! 2321              data |= (attr & 0x03) << ((3-j)*2);
21047                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21048 535F           B8                   0003  mov	ax,*3
21049 5362           2A46         FE            sub	al,-2[bp]
21050 5365           80DC                   00  sbb	ah,*0
21051                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21052 5368           D1E0                       shl	ax,*1
21053 536A           50                         push	ax
21054                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21055 536B           8A46         06            mov	al,6[bp]
21056 536E           24                     03  and	al,*3
21057                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21058 5370           30E4                       xor	ah,ah
21059 5372           8B4E         F2            mov	cx,-$E[bp]
21060 5375           D3E0                       shl	ax,cl
21061 5377           44                         inc	sp
21062 5378           44                         inc	sp
21063                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21064 5379           0A46         FC            or	al,-4[bp]
21065 537C           8846         FC            mov	-4[bp],al
21066                                           !BCC_EOS
21067                                           ! 2322             }
21068                                           ! 2323           }
21069                       0000537F            .169:
21070                                           ! 2324          mask >>= 1;
21071                       0000537F            .165:
21072                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21073 537F           8A46         FD            mov	al,-3[bp]
21074 5382           30E4                       xor	ah,ah
21075 5384           D1E8                       shr	ax,*1
21076 5386           8846         FD            mov	-3[bp],al
21077                                           !BCC_EOS
21078                                           ! 2325         }
21079                                           ! 2326        write_byte(0xb800,dest,data);
21080                       00005389            .162:
21081                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21082 5389           8A46         FE            mov	al,-2[bp]
21083 538C           40                         inc	ax
21084 538D           8846         FE            mov	-2[bp],al
21085                       00005390            .163:
21086                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21087 5390           8A46         FE            mov	al,-2[bp]
21088 5393           3C                     04  cmp	al,*4
21089 5395           72           84            jb 	.164
21090                       00005397            .16A:
21091                       00005397            .161:
21092                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21093 5397           8A46         FC            mov	al,-4[bp]
21094 539A           30E4                       xor	ah,ah
21095 539C           50                         push	ax
21096                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21097 539D           FF76         F6            push	-$A[bp]
21098                                           ! Debug: list unsigned int = const $B800 (used reg = )
21099 53A0           B8                   B800  mov	ax,#$B800
21100 53A3           50                         push	ax
21101                                           ! Debug: func () void = write_byte+0 (used reg = )
21102 53A4           E8         2720            call	_write_byte
21103 53A7           83C4                   06  add	sp,*6
21104                                           !BCC_EOS
21105                                           ! 2327        dest += 1;
21106                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21107 53AA           8B46         F6            mov	ax,-$A[bp]
21108 53AD           40                         inc	ax
21109 53AE           8946         F6            mov	-$A[bp],ax
21110                                           !BCC_EOS
21111                                           ! 2328       }
21112                                           ! 2329     }
21113                       000053B1            .15C:
21114                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21115 53B1           8A46         FD            mov	al,-3[bp]
21116 53B4           84C0                       test	al,al
21117 53B6         0F85         FF3A            bne 	.15D
21118                       000053BA            .16B:
21119                       000053BA            .15B:
21120                                           ! 2330   }
21121                       000053BA            .15A:
21122                                           ! 2331 }
21123                       000053BA            .146:
21124                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21125 53BA           8A46         FF            mov	al,-1[bp]
21126 53BD           40                         inc	ax
21127 53BE           8846         FF            mov	-1[bp],al
21128                       000053C1            .147:
21129                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21130 53C1           8A46         FF            mov	al,-1[bp]
21131 53C4           3C                     08  cmp	al,*8
21132 53C6         0F82         FE42            blo 	.148
21133                       000053CA            .16C:
21134                       000053CA            .145:
21135 53CA           89EC                       mov	sp,bp
21136 53CC           5D                         pop	bp
21137 53CD           C3                         ret
21138                                           ! 2332 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21139                                           ! Register BX used in function write_gfx_char_cga
21140                                           ! 2333 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21141                       000053CE            _write_gfx_char_lin:
21142                                           !BCC_EOS
21143                                           !BCC_EOS
21144                                           !BCC_EOS
21145                                           !BCC_EOS
21146                                           !BCC_EOS
21147                                           ! 2334 {
21148                                           ! 2335  Bit8u i,j,mask,data;
21149                                           !BCC_EOS
21150                                           ! 2336  Bit8u *fdata;
21151                                           !BCC_EOS
21152                                           ! 2337  Bit16u addr,dest,src;
21153                                           !BCC_EOS
21154                                           ! 2338  fdata = &vgafont8;
21155 53CE           55                         push	bp
21156 53CF           89E5                       mov	bp,sp
21157 53D1           83C4                   F4  add	sp,*-$C
21158                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21159 53D4           BB                   0F3E  mov	bx,#_vgafont8
21160 53D7           895E         FA            mov	-6[bp],bx
21161                                           !BCC_EOS
21162                                           ! 2339  addr=xcurs*8+ycurs*nbcols*64;
21163                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21164 53DA           8A46         0C            mov	al,$C[bp]
21165 53DD           30E4                       xor	ah,ah
21166 53DF           89C3                       mov	bx,ax
21167 53E1           8A46         0A            mov	al,$A[bp]
21168 53E4           30E4                       xor	ah,ah
21169 53E6           89D9                       mov	cx,bx
21170 53E8           F7E9                       imul	cx
21171                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21172 53EA           B1                     06  mov	cl,*6
21173 53EC           D3E0                       shl	ax,cl
21174 53EE           50                         push	ax
21175                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21176 53EF           8A46         08            mov	al,8[bp]
21177 53F2           30E4                       xor	ah,ah
21178 53F4           B1                     03  mov	cl,*3
21179 53F6           D3E0                       shl	ax,cl
21180                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21181 53F8           0346         F2            add	ax,-$E[bp]
21182 53FB           44                         inc	sp
21183 53FC           44                         inc	sp
21184                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21185 53FD           8946         F8            mov	-8[bp],ax
21186                                           !BCC_EOS
21187                                           ! 2340  src = car * 8;
21188                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21189 5400           8A46         04            mov	al,4[bp]
21190 5403           30E4                       xor	ah,ah
21191 5405           B1                     03  mov	cl,*3
21192 5407           D3E0                       shl	ax,cl
21193                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21194 5409           8946         F4            mov	-$C[bp],ax
21195                                           !BCC_EOS
21196                                           ! 2341  for(i=0;i<8;i++)
21197                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21198 540C           30C0                       xor	al,al
21199 540E           8846         FF            mov	-1[bp],al
21200                                           !BCC_EOS
21201                                           !BCC_EOS
21202                                           ! 2342   {
21203 5411           E9         0081            br 	.16F
21204                       00005414            .170:
21205                                           ! 2343    dest=addr+i*nbcols*8;
21206                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21207 5414           8A46         0C            mov	al,$C[bp]
21208 5417           30E4                       xor	ah,ah
21209 5419           89C3                       mov	bx,ax
21210 541B           8A46         FF            mov	al,-1[bp]
21211 541E           30E4                       xor	ah,ah
21212 5420           89D9                       mov	cx,bx
21213 5422           F7E9                       imul	cx
21214                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21215 5424           B1                     03  mov	cl,*3
21216 5426           D3E0                       shl	ax,cl
21217                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21218                                           ! Debug: expression subtree swapping
21219 5428           0346         F8            add	ax,-8[bp]
21220                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21221 542B           8946         F6            mov	-$A[bp],ax
21222                                           !BCC_EOS
21223                                           ! 2344    mask = 0x80;
21224                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21225 542E           B0                     80  mov	al,#$80
21226 5430           8846         FD            mov	-3[bp],al
21227                                           !BCC_EOS
21228                                           ! 2345    for(j=0;j<8;j++)
21229                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21230 5433           30C0                       xor	al,al
21231 5435           8846         FE            mov	-2[bp],al
21232                                           !BCC_EOS
21233                                           !BCC_EOS
21234                                           ! 2346     {
21235 5438           EB           4D            jmp .173
21236                       0000543A            .174:
21237                                           ! 2347      data = 0x00;
21238                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21239 543A           30C0                       xor	al,al
21240 543C           8846         FC            mov	-4[bp],al
21241                                           !BCC_EOS
21242                                           ! 2348      if (fdata[src+i] & mask)
21243                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21244 543F           8B46         F4            mov	ax,-$C[bp]
21245 5442           0246         FF            add	al,-1[bp]
21246 5445           80D4                   00  adc	ah,*0
21247                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21248 5448           0346         FA            add	ax,-6[bp]
21249 544B           89C3                       mov	bx,ax
21250                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21251 544D           8A07                       mov	al,[bx]
21252 544F           2246         FD            and	al,-3[bp]
21253 5452           84C0                       test	al,al
21254 5454           74           06            je  	.175
21255                       00005456            .176:
21256                                           ! 2349       {
21257                                           ! 2350        data = attr;
21258                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21259 5456           8A46         06            mov	al,6[bp]
21260 5459           8846         FC            mov	-4[bp],al
21261                                           !BCC_EOS
21262                                           ! 2351       }
21263                                           ! 2352      write_byte(0xa000,dest+j,data);
21264                       0000545C            .175:
21265                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21266 545C           8A46         FC            mov	al,-4[bp]
21267 545F           30E4                       xor	ah,ah
21268 5461           50                         push	ax
21269                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21270 5462           8B46         F6            mov	ax,-$A[bp]
21271 5465           0246         FE            add	al,-2[bp]
21272 5468           80D4                   00  adc	ah,*0
21273                                           ! Debug: list unsigned int = ax+0 (used reg = )
21274 546B           50                         push	ax
21275                                           ! Debug: list unsigned int = const $A000 (used reg = )
21276 546C           B8                   A000  mov	ax,#$A000
21277 546F           50                         push	ax
21278                                           ! Debug: func () void = write_byte+0 (used reg = )
21279 5470           E8         2654            call	_write_byte
21280 5473           83C4                   06  add	sp,*6
21281                                           !BCC_EOS
21282                                           ! 2353      mask >>= 1;
21283                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21284 5476           8A46         FD            mov	al,-3[bp]
21285 5479           30E4                       xor	ah,ah
21286 547B           D1E8                       shr	ax,*1
21287 547D           8846         FD            mov	-3[bp],al
21288                                           !BCC_EOS
21289                                           ! 2354     }
21290                                           ! 2355   }
21291                       00005480            .172:
21292                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21293 5480           8A46         FE            mov	al,-2[bp]
21294 5483           40                         inc	ax
21295 5484           8846         FE            mov	-2[bp],al
21296                       00005487            .173:
21297                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21298 5487           8A46         FE            mov	al,-2[bp]
21299 548A           3C                     08  cmp	al,*8
21300 548C           72           AC            jb 	.174
21301                       0000548E            .177:
21302                       0000548E            .171:
21303                                           ! 2356 }
21304                       0000548E            .16E:
21305                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21306 548E           8A46         FF            mov	al,-1[bp]
21307 5491           40                         inc	ax
21308 5492           8846         FF            mov	-1[bp],al
21309                       00005495            .16F:
21310                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21311 5495           8A46         FF            mov	al,-1[bp]
21312 5498           3C                     08  cmp	al,*8
21313 549A         0F82         FF76            blo 	.170
21314                       0000549E            .178:
21315                       0000549E            .16D:
21316 549E           89EC                       mov	sp,bp
21317 54A0           5D                         pop	bp
21318 54A1           C3                         ret
21319                                           ! 2357 static void biosfn_write_char_attr (car,page,attr,count)
21320                                           ! Register BX used in function write_gfx_char_lin
21321                                           ! 2358 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21322                       000054A2            _biosfn_write_char_attr:
21323                                           !BCC_EOS
21324                                           !BCC_EOS
21325                                           !BCC_EOS
21326                                           !BCC_EOS
21327                                           ! 2359 {
21328                                           ! 2360  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21329                                           !BCC_EOS
21330                                           ! 2361  Bit16u nbcols,nbrows,address;
21331                                           !BCC_EOS
21332                                           ! 2362  Bit16u cursor,dummy;
21333                                           !BCC_EOS
21334                                           ! 2363  mode=read_byte(0x40,0x49);
21335 54A2           55                         push	bp
21336 54A3           89E5                       mov	bp,sp
21337 54A5           83C4                   F0  add	sp,*-$10
21338                                           ! Debug: list int = const $49 (used reg = )
21339 54A8           B8                   0049  mov	ax,*$49
21340 54AB           50                         push	ax
21341                                           ! Debug: list int = const $40 (used reg = )
21342 54AC           B8                   0040  mov	ax,*$40
21343 54AF           50                         push	ax
21344                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21345 54B0           E8         25EE            call	_read_byte
21346 54B3           83C4                   04  add	sp,*4
21347                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21348 54B6           8846         FC            mov	-4[bp],al
21349                                           !BCC_EOS
21350                                           ! 2364  line=find_vga_entry(mode);
21351                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21352 54B9           8A46         FC            mov	al,-4[bp]
21353 54BC           30E4                       xor	ah,ah
21354 54BE           50                         push	ax
21355                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21356 54BF           E8         24F3            call	_find_vga_entry
21357 54C2           44                         inc	sp
21358 54C3           44                         inc	sp
21359                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21360 54C4           8846         FB            mov	-5[bp],al
21361                                           !BCC_EOS
21362                                           ! 2365  if(line==0xFF)return;
21363                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21364 54C7           8A46         FB            mov	al,-5[bp]
21365 54CA           3C                     FF  cmp	al,#$FF
21366 54CC           75           04            jne 	.179
21367                       000054CE            .17A:
21368 54CE           89EC                       mov	sp,bp
21369 54D0           5D                         pop	bp
21370 54D1           C3                         ret
21371                                           !BCC_EOS
21372                                           ! 2366  biosfn_get_cursor_pos(page,&dummy,&cursor);
21373                       000054D2            .179:
21374                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21375 54D2           8D5E         F2            lea	bx,-$E[bp]
21376 54D5           53                         push	bx
21377                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21378 54D6           8D5E         F0            lea	bx,-$10[bp]
21379 54D9           53                         push	bx
21380                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21381 54DA           8A46         06            mov	al,6[bp]
21382 54DD           30E4                       xor	ah,ah
21383 54DF           50                         push	ax
21384                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21385 54E0           E8         EE7A            call	_biosfn_get_cursor_pos
21386 54E3           83C4                   06  add	sp,*6
21387                                           !BCC_EOS
21388                                           ! 2367  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21389                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21390 54E6           8A46         F2            mov	al,-$E[bp]
21391                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21392 54E9           8846         FE            mov	-2[bp],al
21393                                           !BCC_EOS
21394                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21395 54EC           8B46         F2            mov	ax,-$E[bp]
21396 54EF           30C0                       xor	al,al
21397                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21398 54F1           88E0                       mov	al,ah
21399 54F3           30E4                       xor	ah,ah
21400                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21401 54F5           8846         FD            mov	-3[bp],al
21402                                           !BCC_EOS
21403                                           ! 2368  nbrows=read_byte(0x40,0x84)+1;
21404                                           ! Debug: list int = const $84 (used reg = )
21405 54F8           B8                   0084  mov	ax,#$84
21406 54FB           50                         push	ax
21407                                           ! Debug: list int = const $40 (used reg = )
21408 54FC           B8                   0040  mov	ax,*$40
21409 54FF           50                         push	ax
21410                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21411 5500           E8         259E            call	_read_byte
21412 5503           83C4                   04  add	sp,*4
21413                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21414 5506           30E4                       xor	ah,ah
21415                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21416 5508           40                         inc	ax
21417 5509           8946         F6            mov	-$A[bp],ax
21418                                           !BCC_EOS
21419                                           ! 2369  nbcols=read_word(0x40,0x4A);
21420                                           ! Debug: list int = const $4A (used reg = )
21421 550C           B8                   004A  mov	ax,*$4A
21422 550F           50                         push	ax
21423                                           ! Debug: list int = const $40 (used reg = )
21424 5510           B8                   0040  mov	ax,*$40
21425 5513           50                         push	ax
21426                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21427 5514           E8         259D            call	_read_word
21428 5517           83C4                   04  add	sp,*4
21429                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21430 551A           8946         F8            mov	-8[bp],ax
21431                                           !BCC_EOS
21432                                           ! 2370  if(vga_modes[line].class==0x00)
21433                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21434 551D           8A46         FB            mov	al,-5[bp]
21435 5520           30E4                       xor	ah,ah
21436 5522           B1                     03  mov	cl,*3
21437 5524           D3E0                       shl	ax,cl
21438 5526           89C3                       mov	bx,ax
21439 5528           81C3                 01DA  add	bx,#_vga_modes
21440                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21441 552C           8A47         01            mov	al,1[bx]
21442 552F           84C0                       test	al,al
21443 5531           75           6A            jne 	.17B
21444                       00005533            .17C:
21445                                           ! 2371   {
21446                                           ! 2372    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21447                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21448 5533           8A46         FD            mov	al,-3[bp]
21449 5536           30E4                       xor	ah,ah
21450 5538           8B4E         F8            mov	cx,-8[bp]
21451 553B           F7E9                       imul	cx
21452                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21453                                           ! Debug: expression subtree swapping
21454 553D           0246         FE            add	al,-2[bp]
21455 5540           80D4                   00  adc	ah,*0
21456                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21457 5543           D1E0                       shl	ax,*1
21458 5545           50                         push	ax
21459                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21460 5546           8B46         F8            mov	ax,-8[bp]
21461 5549           8B4E         F6            mov	cx,-$A[bp]
21462 554C           F7E9                       imul	cx
21463                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21464 554E           D1E0                       shl	ax,*1
21465                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21466 5550           0C                     FF  or	al,#$FF
21467                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21468                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21469 5552           89C3                       mov	bx,ax
21470 5554           8A46         06            mov	al,6[bp]
21471 5557           30E4                       xor	ah,ah
21472 5559           93                         xchg	ax,bx
21473 555A           40                         inc	ax
21474 555B           89D9                       mov	cx,bx
21475 555D           F7E9                       imul	cx
21476                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21477 555F           0346         EE            add	ax,-$12[bp]
21478 5562           44                         inc	sp
21479 5563           44                         inc	sp
21480                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21481 5564           8946         F4            mov	-$C[bp],ax
21482                                           !BCC_EOS
21483                                           ! 2373    dummy=((Bit16u)attr<<8)+car;
21484                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21485 5567           8A46         08            mov	al,8[bp]
21486 556A           30E4                       xor	ah,ah
21487                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21488 556C           88C4                       mov	ah,al
21489 556E           30C0                       xor	al,al
21490                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21491 5570           0246         04            add	al,4[bp]
21492 5573           80D4                   00  adc	ah,*0
21493                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21494 5576           8946         F0            mov	-$10[bp],ax
21495                                           !BCC_EOS
21496                                           ! 2374    memsetw(vga_modes[line].sstart,address,dummy,count);
21497                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21498 5579           FF76         0A            push	$A[bp]
21499                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21500 557C           FF76         F0            push	-$10[bp]
21501                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21502 557F           FF76         F4            push	-$C[bp]
21503                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21504 5582           8A46         FB            mov	al,-5[bp]
21505 5585           30E4                       xor	ah,ah
21506 5587           B1                     03  mov	cl,*3
21507 5589           D3E0                       shl	ax,cl
21508 558B           89C3                       mov	bx,ax
21509 558D           81C3                 01DA  add	bx,#_vga_modes
21510                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21511 5591           FF77         04            push	4[bx]
21512                                           ! Debug: func () void = memsetw+0 (used reg = )
21513 5594           E8         2485            call	_memsetw
21514 5597           83C4                   08  add	sp,*8
21515                                           !BCC_EOS
21516                                           ! 2375   }
21517                                           ! 2376  else
21518                                           ! 2377   {
21519 559A           E9         00F3            br 	.17D
21520                       0000559D            .17B:
21521                                           ! 2378    cheight=video_param_table[line_to_vpti[line]].cheight;
21522                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21523 559D           8A46         FB            mov	al,-5[bp]
21524 55A0           30E4                       xor	ah,ah
21525 55A2           89C3                       mov	bx,ax
21526                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21527 55A4           8A87       025A            mov	al,_line_to_vpti[bx]
21528 55A8           30E4                       xor	ah,ah
21529 55AA           B1                     06  mov	cl,*6
21530 55AC           D3E0                       shl	ax,cl
21531 55AE           89C3                       mov	bx,ax
21532 55B0           81C3                 026E  add	bx,#_video_param_table
21533                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21534 55B4           8A47         02            mov	al,2[bx]
21535 55B7           8846         FF            mov	-1[bp],al
21536                                           !BCC_EOS
21537                                           ! 2379    bpp=vga_modes[line].pixbits;
21538                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21539 55BA           8A46         FB            mov	al,-5[bp]
21540 55BD           30E4                       xor	ah,ah
21541 55BF           B1                     03  mov	cl,*3
21542 55C1           D3E0                       shl	ax,cl
21543 55C3           89C3                       mov	bx,ax
21544 55C5           81C3                 01DA  add	bx,#_vga_modes
21545                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21546 55C9           8A47         03            mov	al,3[bx]
21547 55CC           8846         FA            mov	-6[bp],al
21548                                           !BCC_EOS
21549                                           ! 2380    while((count-->0) && (xcurs<nbcols))
21550                                           ! 2381     {
21551 55CF           E9         00A6            br 	.17F
21552                       000055D2            .180:
21553                                           ! 2382      switch(vga_modes[line].memmodel)
21554                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21555 55D2           8A46         FB            mov	al,-5[bp]
21556 55D5           30E4                       xor	ah,ah
21557 55D7           B1                     03  mov	cl,*3
21558 55D9           D3E0                       shl	ax,cl
21559 55DB           89C3                       mov	bx,ax
21560 55DD           81C3                 01DA  add	bx,#_vga_modes
21561 55E1           8A47         02            mov	al,2[bx]
21562                                           ! 2383       {
21563 55E4           EB           77            jmp .183
21564                                           ! 2384        case 0x04:
21565                                           ! 2385        case 0x03:
21566                       000055E6            .184:
21567                                           ! 2386          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight
21568                       000055E6            .185:
21569                                           ! 2386 );
21570                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21571 55E6           8A46         FF            mov	al,-1[bp]
21572 55E9           30E4                       xor	ah,ah
21573 55EB           50                         push	ax
21574                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21575 55EC           FF76         F8            push	-8[bp]
21576                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21577 55EF           8A46         FD            mov	al,-3[bp]
21578 55F2           30E4                       xor	ah,ah
21579 55F4           50                         push	ax
21580                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21581 55F5           8A46         FE            mov	al,-2[bp]
21582 55F8           30E4                       xor	ah,ah
21583 55FA           50                         push	ax
21584                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21585 55FB           8A46         08            mov	al,8[bp]
21586 55FE           30E4                       xor	ah,ah
21587 5600           50                         push	ax
21588                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21589 5601           8A46         04            mov	al,4[bp]
21590 5604           30E4                       xor	ah,ah
21591 5606           50                         push	ax
21592                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21593 5607           E8         FA4C            call	_write_gfx_char_pl4
21594 560A           83C4                   0C  add	sp,*$C
21595                                           !BCC_EOS
21596                                           ! 2387          break;
21597 560D           EB           62            jmp .181
21598                                           !BCC_EOS
21599                                           ! 2388        case 0x02:
21600                                           ! 2389          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21601                       0000560F            .186:
21602                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21603 560F           8A46         FA            mov	al,-6[bp]
21604 5612           30E4                       xor	ah,ah
21605 5614           50                         push	ax
21606                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21607 5615           FF76         F8            push	-8[bp]
21608                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21609 5618           8A46         FD            mov	al,-3[bp]
21610 561B           30E4                       xor	ah,ah
21611 561D           50                         push	ax
21612                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21613 561E           8A46         FE            mov	al,-2[bp]
21614 5621           30E4                       xor	ah,ah
21615 5623           50                         push	ax
21616                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21617 5624           8A46         08            mov	al,8[bp]
21618 5627           30E4                       xor	ah,ah
21619 5629           50                         push	ax
21620                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21621 562A           8A46         04            mov	al,4[bp]
21622 562D           30E4                       xor	ah,ah
21623 562F           50                         push	ax
21624                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
21625 5630           E8         FB96            call	_write_gfx_char_cga
21626 5633           83C4                   0C  add	sp,*$C
21627                                           !BCC_EOS
21628                                           ! 2390          break;
21629 5636           EB           39            jmp .181
21630                                           !BCC_EOS
21631                                           ! 2391        case 0x05:
21632                                           ! 2392          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
21633                       00005638            .187:
21634                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
21635 5638           FF76         F8            push	-8[bp]
21636                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
21637 563B           8A46         FD            mov	al,-3[bp]
21638 563E           30E4                       xor	ah,ah
21639 5640           50                         push	ax
21640                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
21641 5641           8A46         FE            mov	al,-2[bp]
21642 5644           30E4                       xor	ah,ah
21643 5646           50                         push	ax
21644                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
21645 5647           8A46         08            mov	al,8[bp]
21646 564A           30E4                       xor	ah,ah
21647 564C           50                         push	ax
21648                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
21649 564D           8A46         04            mov	al,4[bp]
21650 5650           30E4                       xor	ah,ah
21651 5652           50                         push	ax
21652                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
21653 5653           E8         FD78            call	_write_gfx_char_lin
21654 5656           83C4                   0A  add	sp,*$A
21655                                           !BCC_EOS
21656                                           ! 2393          break;
21657 5659           EB           16            jmp .181
21658                                           !BCC_EOS
21659                                           ! 2394       }
21660                                           ! 2395      xcurs++;
21661 565B           EB           14            jmp .181
21662                       0000565D            .183:
21663 565D           2C                     02  sub	al,*2
21664 565F           74           AE            je 	.186
21665 5661           2C                     01  sub	al,*1
21666 5663         0F84         FF7F            beq 	.185
21667 5667           2C                     01  sub	al,*1
21668 5669         0F84         FF79            beq 	.184
21669 566D           2C                     01  sub	al,*1
21670 566F           74           C7            je 	.187
21671                       00005671            .181:
21672                       FFFFFFEE            ..FFFA	=	-$12
21673                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
21674 5671           8A46         FE            mov	al,-2[bp]
21675 5674           40                         inc	ax
21676 5675           8846         FE            mov	-2[bp],al
21677                                           !BCC_EOS
21678                                           ! 2396     }
21679                                           ! 2397   }
21680                       00005678            .17F:
21681                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21682 5678           8B46         0A            mov	ax,$A[bp]
21683 567B           48                         dec	ax
21684 567C           8946         0A            mov	$A[bp],ax
21685                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21686 567F           3D                   FFFF  cmp	ax,*-1
21687 5682           74           0C            je  	.188
21688                       00005684            .189:
21689                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
21690 5684           8A46         FE            mov	al,-2[bp]
21691 5687           30E4                       xor	ah,ah
21692 5689           3B46         F8            cmp	ax,-8[bp]
21693 568C         0F82         FF42            blo 	.180
21694                       00005690            .188:
21695                       00005690            .17E:
21696                                           ! 2398 }
21697                       00005690            .17D:
21698 5690           89EC                       mov	sp,bp
21699 5692           5D                         pop	bp
21700 5693           C3                         ret
21701                                           ! 2399 static void biosfn_write_char_only (car,page,attr,count)
21702                                           ! Register BX used in function biosfn_write_char_attr
21703                                           ! 2400 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21704                       00005694            _biosfn_write_char_only:
21705                                           !BCC_EOS
21706                                           !BCC_EOS
21707                                           !BCC_EOS
21708                                           !BCC_EOS
21709                                           ! 2401 {
21710                                           ! 2402  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21711                                           !BCC_EOS
21712                                           ! 2403  Bit16u nbcols,nbrows,address;
21713                                           !BCC_EOS
21714                                           ! 2404  Bit16u cursor,dummy;
21715                                           !BCC_EOS
21716                                           ! 2405  mode=read_byte(0x40,0x49);
21717 5694           55                         push	bp
21718 5695           89E5                       mov	bp,sp
21719 5697           83C4                   F0  add	sp,*-$10
21720                                           ! Debug: list int = const $49 (used reg = )
21721 569A           B8                   0049  mov	ax,*$49
21722 569D           50                         push	ax
21723                                           ! Debug: list int = const $40 (used reg = )
21724 569E           B8                   0040  mov	ax,*$40
21725 56A1           50                         push	ax
21726                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21727 56A2           E8         23FC            call	_read_byte
21728 56A5           83C4                   04  add	sp,*4
21729                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21730 56A8           8846         FC            mov	-4[bp],al
21731                                           !BCC_EOS
21732                                           ! 2406  line=find_vga_entry(mode);
21733                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21734 56AB           8A46         FC            mov	al,-4[bp]
21735 56AE           30E4                       xor	ah,ah
21736 56B0           50                         push	ax
21737                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21738 56B1           E8         2301            call	_find_vga_entry
21739 56B4           44                         inc	sp
21740 56B5           44                         inc	sp
21741                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21742 56B6           8846         FB            mov	-5[bp],al
21743                                           !BCC_EOS
21744                                           ! 2407  if(line==0xFF)return;
21745                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21746 56B9           8A46         FB            mov	al,-5[bp]
21747 56BC           3C                     FF  cmp	al,#$FF
21748 56BE           75           04            jne 	.18A
21749                       000056C0            .18B:
21750 56C0           89EC                       mov	sp,bp
21751 56C2           5D                         pop	bp
21752 56C3           C3                         ret
21753                                           !BCC_EOS
21754                                           ! 2408  biosfn_get_cursor_pos(page,&dummy,&cursor);
21755                       000056C4            .18A:
21756                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21757 56C4           8D5E         F2            lea	bx,-$E[bp]
21758 56C7           53                         push	bx
21759                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21760 56C8           8D5E         F0            lea	bx,-$10[bp]
21761 56CB           53                         push	bx
21762                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21763 56CC           8A46         06            mov	al,6[bp]
21764 56CF           30E4                       xor	ah,ah
21765 56D1           50                         push	ax
21766                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21767 56D2           E8         EC88            call	_biosfn_get_cursor_pos
21768 56D5           83C4                   06  add	sp,*6
21769                                           !BCC_EOS
21770                                           ! 2409  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21771                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21772 56D8           8A46         F2            mov	al,-$E[bp]
21773                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21774 56DB           8846         FE            mov	-2[bp],al
21775                                           !BCC_EOS
21776                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21777 56DE           8B46         F2            mov	ax,-$E[bp]
21778 56E1           30C0                       xor	al,al
21779                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21780 56E3           88E0                       mov	al,ah
21781 56E5           30E4                       xor	ah,ah
21782                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21783 56E7           8846         FD            mov	-3[bp],al
21784                                           !BCC_EOS
21785                                           ! 2410  nbrows=read_byte(0x40,0x84)+1;
21786                                           ! Debug: list int = const $84 (used reg = )
21787 56EA           B8                   0084  mov	ax,#$84
21788 56ED           50                         push	ax
21789                                           ! Debug: list int = const $40 (used reg = )
21790 56EE           B8                   0040  mov	ax,*$40
21791 56F1           50                         push	ax
21792                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21793 56F2           E8         23AC            call	_read_byte
21794 56F5           83C4                   04  add	sp,*4
21795                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21796 56F8           30E4                       xor	ah,ah
21797                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21798 56FA           40                         inc	ax
21799 56FB           8946         F6            mov	-$A[bp],ax
21800                                           !BCC_EOS
21801                                           ! 2411  nbcols=read_word(0x40,0x4A);
21802                                           ! Debug: list int = const $4A (used reg = )
21803 56FE           B8                   004A  mov	ax,*$4A
21804 5701           50                         push	ax
21805                                           ! Debug: list int = const $40 (used reg = )
21806 5702           B8                   0040  mov	ax,*$40
21807 5705           50                         push	ax
21808                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21809 5706           E8         23AB            call	_read_word
21810 5709           83C4                   04  add	sp,*4
21811                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21812 570C           8946         F8            mov	-8[bp],ax
21813                                           !BCC_EOS
21814                                           ! 2412  if(vga_modes[line].class==0x00)
21815                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21816 570F           8A46         FB            mov	al,-5[bp]
21817 5712           30E4                       xor	ah,ah
21818 5714           B1                     03  mov	cl,*3
21819 5716           D3E0                       shl	ax,cl
21820 5718           89C3                       mov	bx,ax
21821 571A           81C3                 01DA  add	bx,#_vga_modes
21822                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21823 571E           8A47         01            mov	al,1[bx]
21824 5721           84C0                       test	al,al
21825 5723           75           6E            jne 	.18C
21826                       00005725            .18D:
21827                                           ! 2413   {
21828                                           ! 2414    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21829                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21830 5725           8A46         FD            mov	al,-3[bp]
21831 5728           30E4                       xor	ah,ah
21832 572A           8B4E         F8            mov	cx,-8[bp]
21833 572D           F7E9                       imul	cx
21834                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21835                                           ! Debug: expression subtree swapping
21836 572F           0246         FE            add	al,-2[bp]
21837 5732           80D4                   00  adc	ah,*0
21838                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21839 5735           D1E0                       shl	ax,*1
21840 5737           50                         push	ax
21841                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21842 5738           8B46         F8            mov	ax,-8[bp]
21843 573B           8B4E         F6            mov	cx,-$A[bp]
21844 573E           F7E9                       imul	cx
21845                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21846 5740           D1E0                       shl	ax,*1
21847                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21848 5742           0C                     FF  or	al,#$FF
21849                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21850                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21851 5744           89C3                       mov	bx,ax
21852 5746           8A46         06            mov	al,6[bp]
21853 5749           30E4                       xor	ah,ah
21854 574B           93                         xchg	ax,bx
21855 574C           40                         inc	ax
21856 574D           89D9                       mov	cx,bx
21857 574F           F7E9                       imul	cx
21858                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21859 5751           0346         EE            add	ax,-$12[bp]
21860 5754           44                         inc	sp
21861 5755           44                         inc	sp
21862                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21863 5756           8946         F4            mov	-$C[bp],ax
21864                                           !BCC_EOS
21865                                           ! 2415    while(count-->0)
21866                                           ! 2416     {write_byte(vga_modes[line].sstart,address,car);
21867 5759           EB           29            jmp .18F
21868                       0000575B            .190:
21869                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
21870 575B           8A46         04            mov	al,4[bp]
21871 575E           30E4                       xor	ah,ah
21872 5760           50                         push	ax
21873                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
21874 5761           FF76         F4            push	-$C[bp]
21875                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
21876 5764           8A46         FB            mov	al,-5[bp]
21877 5767           30E4                       xor	ah,ah
21878 5769           B1                     03  mov	cl,*3
21879 576B           D3E0                       shl	ax,cl
21880 576D           89C3                       mov	bx,ax
21881 576F           81C3                 01DA  add	bx,#_vga_modes
21882                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21883 5773           FF77         04            push	4[bx]
21884                                           ! Debug: func () void = write_byte+0 (used reg = )
21885 5776           E8         234E            call	_write_byte
21886 5779           83C4                   06  add	sp,*6
21887                                           !BCC_EOS
21888                                           ! 2417      address+=2;
21889                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
21890 577C           8B46         F4            mov	ax,-$C[bp]
21891 577F           40                         inc	ax
21892 5780           40                         inc	ax
21893 5781           8946         F4            mov	-$C[bp],ax
21894                                           !BCC_EOS
21895                                           ! 2418     }
21896                                           ! 2419   }
21897                       00005784            .18F:
21898                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21899 5784           8B46         0A            mov	ax,$A[bp]
21900 5787           48                         dec	ax
21901 5788           8946         0A            mov	$A[bp],ax
21902                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21903 578B           3D                   FFFF  cmp	ax,*-1
21904 578E           75           CB            jne	.190
21905                       00005790            .191:
21906                       00005790            .18E:
21907                                           ! 2420  else
21908                                           ! 2421   {
21909 5790           E9         00F3            br 	.192
21910                       00005793            .18C:
21911                                           ! 2422    cheight=video_param_table[line_to_vpti[line]].cheight;
21912                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21913 5793           8A46         FB            mov	al,-5[bp]
21914 5796           30E4                       xor	ah,ah
21915 5798           89C3                       mov	bx,ax
21916                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21917 579A           8A87       025A            mov	al,_line_to_vpti[bx]
21918 579E           30E4                       xor	ah,ah
21919 57A0           B1                     06  mov	cl,*6
21920 57A2           D3E0                       shl	ax,cl
21921 57A4           89C3                       mov	bx,ax
21922 57A6           81C3                 026E  add	bx,#_video_param_table
21923                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21924 57AA           8A47         02            mov	al,2[bx]
21925 57AD           8846         FF            mov	-1[bp],al
21926                                           !BCC_EOS
21927                                           ! 2423    bpp=vga_modes[line].pixbits;
21928                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21929 57B0           8A46         FB            mov	al,-5[bp]
21930 57B3           30E4                       xor	ah,ah
21931 57B5           B1                     03  mov	cl,*3
21932 57B7           D3E0                       shl	ax,cl
21933 57B9           89C3                       mov	bx,ax
21934 57BB           81C3                 01DA  add	bx,#_vga_modes
21935                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21936 57BF           8A47         03            mov	al,3[bx]
21937 57C2           8846         FA            mov	-6[bp],al
21938                                           !BCC_EOS
21939                                           ! 2424    while((count-->0) && (xcurs<nbcols))
21940                                           ! 2425     {
21941 57C5           E9         00A6            br 	.194
21942                       000057C8            .195:
21943                                           ! 2426      switch(vga_modes[line].memmodel)
21944                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21945 57C8           8A46         FB            mov	al,-5[bp]
21946 57CB           30E4                       xor	ah,ah
21947 57CD           B1                     03  mov	cl,*3
21948 57CF           D3E0                       shl	ax,cl
21949 57D1           89C3                       mov	bx,ax
21950 57D3           81C3                 01DA  add	bx,#_vga_modes
21951 57D7           8A47         02            mov	al,2[bx]
21952                                           ! 2427       {
21953 57DA           EB           77            jmp .198
21954                                           ! 2428        case 0x04:
21955                                           ! 2429        case 0x03:
21956                       000057DC            .199:
21957                                           ! 2430          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
21958                       000057DC            .19A:
21959                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21960 57DC           8A46         FF            mov	al,-1[bp]
21961 57DF           30E4                       xor	ah,ah
21962 57E1           50                         push	ax
21963                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21964 57E2           FF76         F8            push	-8[bp]
21965                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21966 57E5           8A46         FD            mov	al,-3[bp]
21967 57E8           30E4                       xor	ah,ah
21968 57EA           50                         push	ax
21969                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21970 57EB           8A46         FE            mov	al,-2[bp]
21971 57EE           30E4                       xor	ah,ah
21972 57F0           50                         push	ax
21973                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21974 57F1           8A46         08            mov	al,8[bp]
21975 57F4           30E4                       xor	ah,ah
21976 57F6           50                         push	ax
21977                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21978 57F7           8A46         04            mov	al,4[bp]
21979 57FA           30E4                       xor	ah,ah
21980 57FC           50                         push	ax
21981                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21982 57FD           E8         F856            call	_write_gfx_char_pl4
21983 5800           83C4                   0C  add	sp,*$C
21984                                           !BCC_EOS
21985                                           ! 2431          break;
21986 5803           EB           62            jmp .196
21987                                           !BCC_EOS
21988                                           ! 2432        case 0x02:
21989                                           ! 2433          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21990                       00005805            .19B:
21991                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21992 5805           8A46         FA            mov	al,-6[bp]
21993 5808           30E4                       xor	ah,ah
21994 580A           50                         push	ax
21995                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21996 580B           FF76         F8            push	-8[bp]
21997                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21998 580E           8A46         FD            mov	al,-3[bp]
21999 5811           30E4                       xor	ah,ah
22000 5813           50                         push	ax
22001                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22002 5814           8A46         FE            mov	al,-2[bp]
22003 5817           30E4                       xor	ah,ah
22004 5819           50                         push	ax
22005                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22006 581A           8A46         08            mov	al,8[bp]
22007 581D           30E4                       xor	ah,ah
22008 581F           50                         push	ax
22009                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22010 5820           8A46         04            mov	al,4[bp]
22011 5823           30E4                       xor	ah,ah
22012 5825           50                         push	ax
22013                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22014 5826           E8         F9A0            call	_write_gfx_char_cga
22015 5829           83C4                   0C  add	sp,*$C
22016                                           !BCC_EOS
22017                                           ! 2434          break;
22018 582C           EB           39            jmp .196
22019                                           !BCC_EOS
22020                                           ! 2435        case 0x05:
22021                                           ! 2436          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22022                       0000582E            .19C:
22023                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22024 582E           FF76         F8            push	-8[bp]
22025                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22026 5831           8A46         FD            mov	al,-3[bp]
22027 5834           30E4                       xor	ah,ah
22028 5836           50                         push	ax
22029                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22030 5837           8A46         FE            mov	al,-2[bp]
22031 583A           30E4                       xor	ah,ah
22032 583C           50                         push	ax
22033                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22034 583D           8A46         08            mov	al,8[bp]
22035 5840           30E4                       xor	ah,ah
22036 5842           50                         push	ax
22037                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22038 5843           8A46         04            mov	al,4[bp]
22039 5846           30E4                       xor	ah,ah
22040 5848           50                         push	ax
22041                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22042 5849           E8         FB82            call	_write_gfx_char_lin
22043 584C           83C4                   0A  add	sp,*$A
22044                                           !BCC_EOS
22045                                           ! 2437          break;
22046 584F           EB           16            jmp .196
22047                                           !BCC_EOS
22048                                           ! 2438       }
22049                                           ! 2439      xcurs++;
22050 5851           EB           14            jmp .196
22051                       00005853            .198:
22052 5853           2C                     02  sub	al,*2
22053 5855           74           AE            je 	.19B
22054 5857           2C                     01  sub	al,*1
22055 5859         0F84         FF7F            beq 	.19A
22056 585D           2C                     01  sub	al,*1
22057 585F         0F84         FF79            beq 	.199
22058 5863           2C                     01  sub	al,*1
22059 5865           74           C7            je 	.19C
22060                       00005867            .196:
22061                       FFFFFFEE            ..FFF9	=	-$12
22062                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22063 5867           8A46         FE            mov	al,-2[bp]
22064 586A           40                         inc	ax
22065 586B           8846         FE            mov	-2[bp],al
22066                                           !BCC_EOS
22067                                           ! 2440     }
22068                                           ! 2441   }
22069                       0000586E            .194:
22070                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22071 586E           8B46         0A            mov	ax,$A[bp]
22072 5871           48                         dec	ax
22073 5872           8946         0A            mov	$A[bp],ax
22074                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22075 5875           3D                   FFFF  cmp	ax,*-1
22076 5878           74           0C            je  	.19D
22077                       0000587A            .19E:
22078                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22079 587A           8A46         FE            mov	al,-2[bp]
22080 587D           30E4                       xor	ah,ah
22081 587F           3B46         F8            cmp	ax,-8[bp]
22082 5882         0F82         FF42            blo 	.195
22083                       00005886            .19D:
22084                       00005886            .193:
22085                                           ! 2442 }
22086                       00005886            .192:
22087 5886           89EC                       mov	sp,bp
22088 5888           5D                         pop	bp
22089 5889           C3                         ret
22090                                           ! 2443 #asm
22091                                           !BCC_ASM
22092                       00000008            _biosfn_write_char_only.count	set	8
22093                       00000006            _biosfn_write_char_only.attr	set	6
22094                       00000004            _biosfn_write_char_only.page	set	4
22095                       00000002            _biosfn_write_char_only.car	set	2
22096                       0000588A            biosfn_group_0B:
22097 588A           80FF                   00    cmp bh, #0x00
22098 588D           74           06              je biosfn_set_border_color
22099 588F           80FF                   01    cmp bh, #0x01
22100 5892           74           40              je biosfn_set_palette
22101 5894           C3                           ret
22102                       00005895            biosfn_set_border_color:
22103 5895           50                           push ax
22104 5896           53                           push bx
22105 5897           51                           push cx
22106 5898           52                           push dx
22107 5899           BA                   03DA    mov dx, # 0x3da
22108 589C           EC                           in al, dx
22109 589D           BA                   03C0    mov dx, # 0x3c0
22110 58A0           B0                     00    mov al, #0x00
22111 58A2           EE                           out dx, al
22112 58A3           88D8                         mov al, bl
22113 58A5           24                     0F    and al, #0x0f
22114 58A7           A8                     08    test al, #0x08
22115 58A9           74           02              jz set_low_border
22116 58AB           04                     08    add al, #0x08
22117                       000058AD            set_low_border:
22118 58AD           EE                           out dx, al
22119 58AE           B1                     01    mov cl, #0x01
22120 58B0           80E3                   10    and bl, #0x10
22121                       000058B3            set_intensity_loop:
22122 58B3           BA                   03C0    mov dx, # 0x3c0
22123 58B6           88C8                         mov al, cl
22124 58B8           EE                           out dx, al
22125 58B9           BA                   03C1    mov dx, # 0x3c1
22126 58BC           EC                           in al, dx
22127 58BD           24                     EF    and al, #0xef
22128 58BF           08D8                         or al, bl
22129 58C1           BA                   03C0    mov dx, # 0x3c0
22130 58C4           EE                           out dx, al
22131 58C5           FEC1                         inc cl
22132 58C7           80F9                   04    cmp cl, #0x04
22133 58CA           75           E7              jne set_intensity_loop
22134 58CC           B0                     20    mov al, #0x20
22135 58CE           EE                           out dx, al
22136 58CF           5A                           pop dx
22137 58D0           59                           pop cx
22138 58D1           5B                           pop bx
22139 58D2           58                           pop ax
22140 58D3           C3                           ret
22141                       000058D4            biosfn_set_palette:
22142 58D4           50                           push ax
22143 58D5           53                           push bx
22144 58D6           51                           push cx
22145 58D7           52                           push dx
22146 58D8           BA                   03DA    mov dx, # 0x3da
22147 58DB           EC                           in al, dx
22148 58DC           B1                     01    mov cl, #0x01
22149 58DE           80E3                   01    and bl, #0x01
22150                       000058E1            set_cga_palette_loop:
22151 58E1           BA                   03C0    mov dx, # 0x3c0
22152 58E4           88C8                         mov al, cl
22153 58E6           EE                           out dx, al
22154 58E7           BA                   03C1    mov dx, # 0x3c1
22155 58EA           EC                           in al, dx
22156 58EB           24                     FE    and al, #0xfe
22157 58ED           08D8                         or al, bl
22158 58EF           BA                   03C0    mov dx, # 0x3c0
22159 58F2           EE                           out dx, al
22160 58F3           FEC1                         inc cl
22161 58F5           80F9                   04    cmp cl, #0x04
22162 58F8           75           E7              jne set_cga_palette_loop
22163 58FA           B0                     20    mov al, #0x20
22164 58FC           EE                           out dx, al
22165 58FD           5A                           pop dx
22166 58FE           59                           pop cx
22167 58FF           5B                           pop bx
22168 5900           58                           pop ax
22169 5901           C3                           ret
22170                                           ! 2518 endasm
22171                                           !BCC_ENDASM
22172                                           ! 2519 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22173                                           ! Register BX used in function biosfn_write_char_only
22174                       00005902            _biosfn_write_pixel:
22175                                           !BCC_EOS
22176                                           !BCC_EOS
22177                                           !BCC_EOS
22178                                           !BCC_EOS
22179                                           ! 2520 {
22180                                           ! 2521  Bit8u mode,line,mask,attr,data;
22181                                           !BCC_EOS
22182                                           ! 2522  Bit16u addr;
22183                                           !BCC_EOS
22184                                           ! 2523  mode=read_byte(0x40,0x49);
22185 5902           55                         push	bp
22186 5903           89E5                       mov	bp,sp
22187 5905           83C4                   F8  add	sp,*-8
22188                                           ! Debug: list int = const $49 (used reg = )
22189 5908           B8                   0049  mov	ax,*$49
22190 590B           50                         push	ax
22191                                           ! Debug: list int = const $40 (used reg = )
22192 590C           B8                   0040  mov	ax,*$40
22193 590F           50                         push	ax
22194                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22195 5910           E8         218E            call	_read_byte
22196 5913           83C4                   04  add	sp,*4
22197                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22198 5916           8846         FF            mov	-1[bp],al
22199                                           !BCC_EOS
22200                                           ! 2524  line=find_vga_entry(mode);
22201                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22202 5919           8A46         FF            mov	al,-1[bp]
22203 591C           30E4                       xor	ah,ah
22204 591E           50                         push	ax
22205                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22206 591F           E8         2093            call	_find_vga_entry
22207 5922           44                         inc	sp
22208 5923           44                         inc	sp
22209                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22210 5924           8846         FE            mov	-2[bp],al
22211                                           !BCC_EOS
22212                                           ! 2525  if(line==0xFF)return;
22213                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22214 5927           8A46         FE            mov	al,-2[bp]
22215 592A           3C                     FF  cmp	al,#$FF
22216 592C           75           04            jne 	.19F
22217                       0000592E            .1A0:
22218 592E           89EC                       mov	sp,bp
22219 5930           5D                         pop	bp
22220 5931           C3                         ret
22221                                           !BCC_EOS
22222                                           ! 2526  if(vga_modes[line].class==0x00)return;
22223                       00005932            .19F:
22224                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22225 5932           8A46         FE            mov	al,-2[bp]
22226 5935           30E4                       xor	ah,ah
22227 5937           B1                     03  mov	cl,*3
22228 5939           D3E0                       shl	ax,cl
22229 593B           89C3                       mov	bx,ax
22230 593D           81C3                 01DA  add	bx,#_vga_modes
22231                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22232 5941           8A47         01            mov	al,1[bx]
22233 5944           84C0                       test	al,al
22234 5946           75           04            jne 	.1A1
22235                       00005948            .1A2:
22236 5948           89EC                       mov	sp,bp
22237 594A           5D                         pop	bp
22238 594B           C3                         ret
22239                                           !BCC_EOS
22240                                           ! 2527  switch(vga_modes[line].memmodel)
22241                       0000594C            .1A1:
22242                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22243 594C           8A46         FE            mov	al,-2[bp]
22244 594F           30E4                       xor	ah,ah
22245 5951           B1                     03  mov	cl,*3
22246 5953           D3E0                       shl	ax,cl
22247 5955           89C3                       mov	bx,ax
22248 5957           81C3                 01DA  add	bx,#_vga_modes
22249 595B           8A47         02            mov	al,2[bx]
22250                                           ! 2528   {
22251 595E           E9         0223            br 	.1A5
22252                                           ! 2529    case 0x04:
22253                                           ! 2530    case 0x03:
22254                       00005961            .1A6:
22255                                           ! 2531      addr = CX/8+DX*read_word(0x40,0x4A);
22256                       00005961            .1A7:
22257                                           ! Debug: list int = const $4A (used reg = )
22258 5961           B8                   004A  mov	ax,*$4A
22259 5964           50                         push	ax
22260                                           ! Debug: list int = const $40 (used reg = )
22261 5965           B8                   0040  mov	ax,*$40
22262 5968           50                         push	ax
22263                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22264 5969           E8         2148            call	_read_word
22265 596C           83C4                   04  add	sp,*4
22266                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22267                                           ! Debug: expression subtree swapping
22268 596F           8B4E         0A            mov	cx,$A[bp]
22269 5972           F7E9                       imul	cx
22270 5974           50                         push	ax
22271                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22272 5975           8B46         08            mov	ax,8[bp]
22273 5978           B1                     03  mov	cl,*3
22274 597A           D3E8                       shr	ax,cl
22275                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22276 597C           0346         F6            add	ax,0+..FFF8[bp]
22277 597F           44                         inc	sp
22278 5980           44                         inc	sp
22279                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22280 5981           8946         F8            mov	-8[bp],ax
22281                                           !BCC_EOS
22282                                           ! 2532      mask = 0x80 >> (CX & 0x07);
22283                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22284 5984           8A46         08            mov	al,8[bp]
22285 5987           24                     07  and	al,*7
22286                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22287 5989           30E4                       xor	ah,ah
22288 598B           89C3                       mov	bx,ax
22289 598D           B8                   0080  mov	ax,#$80
22290 5990           89D9                       mov	cx,bx
22291 5992           D3F8                       sar	ax,cl
22292                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22293 5994           8846         FD            mov	-3[bp],al
22294                                           !BCC_EOS
22295                                           ! 2533      outw(0x3ce, (mask << 8) | 0x08);
22296                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22297 5997           8A46         FD            mov	al,-3[bp]
22298 599A           30E4                       xor	ah,ah
22299 599C           88C4                       mov	ah,al
22300 599E           30C0                       xor	al,al
22301                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22302 59A0           0C                     08  or	al,*8
22303                                           ! Debug: list unsigned int = ax+0 (used reg = )
22304 59A2           50                         push	ax
22305                                           ! Debug: list int = const $3CE (used reg = )
22306 59A3           B8                   03CE  mov	ax,#$3CE
22307 59A6           50                         push	ax
22308                                           ! Debug: func () void = outw+0 (used reg = )
22309 59A7           E8         2173            call	_outw
22310 59AA           83C4                   04  add	sp,*4
22311                                           !BCC_EOS
22312                                           ! 2534      outw(0x3ce, 0x0205);
22313                                           ! Debug: list int = const $205 (used reg = )
22314 59AD           B8                   0205  mov	ax,#$205
22315 59B0           50                         push	ax
22316                                           ! Debug: list int = const $3CE (used reg = )
22317 59B1           B8                   03CE  mov	ax,#$3CE
22318 59B4           50                         push	ax
22319                                           ! Debug: func () void = outw+0 (used reg = )
22320 59B5           E8         2165            call	_outw
22321 59B8           83C4                   04  add	sp,*4
22322                                           !BCC_EOS
22323                                           ! 2535      data = read_byte(0xa000,addr);
22324                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22325 59BB           FF76         F8            push	-8[bp]
22326                                           ! Debug: list unsigned int = const $A000 (used reg = )
22327 59BE           B8                   A000  mov	ax,#$A000
22328 59C1           50                         push	ax
22329                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22330 59C2           E8         20DC            call	_read_byte
22331 59C5           83C4                   04  add	sp,*4
22332                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22333 59C8           8846         FB            mov	-5[bp],al
22334                                           !BCC_EOS
22335                                           ! 2536      if (AL & 0x80)
22336                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22337 59CB           8A46         06            mov	al,6[bp]
22338 59CE           24                     80  and	al,#$80
22339 59D0           84C0                       test	al,al
22340 59D2           74           0E            je  	.1A8
22341                       000059D4            .1A9:
22342                                           ! 2537       {
22343                                           ! 2538        outw(0x3ce, 0x1803);
22344                                           ! Debug: list int = const $1803 (used reg = )
22345 59D4           B8                   1803  mov	ax,#$1803
22346 59D7           50                         push	ax
22347                                           ! Debug: list int = const $3CE (used reg = )
22348 59D8           B8                   03CE  mov	ax,#$3CE
22349 59DB           50                         push	ax
22350                                           ! Debug: func () void = outw+0 (used reg = )
22351 59DC           E8         213E            call	_outw
22352 59DF           83C4                   04  add	sp,*4
22353                                           !BCC_EOS
22354                                           ! 2539       }
22355                                           ! 2540      write_byte(0xa000,addr,AL);
22356                       000059E2            .1A8:
22357                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22358 59E2           8A46         06            mov	al,6[bp]
22359 59E5           30E4                       xor	ah,ah
22360 59E7           50                         push	ax
22361                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22362 59E8           FF76         F8            push	-8[bp]
22363                                           ! Debug: list unsigned int = const $A000 (used reg = )
22364 59EB           B8                   A000  mov	ax,#$A000
22365 59EE           50                         push	ax
22366                                           ! Debug: func () void = write_byte+0 (used reg = )
22367 59EF           E8         20D5            call	_write_byte
22368 59F2           83C4                   06  add	sp,*6
22369                                           !BCC_EOS
22370                                           ! 2541 #asm
22371                                           !BCC_EOS
22372                                           !BCC_ASM
22373                       0000000C            _biosfn_write_pixel.BH	set	$C
22374                       00000004            .biosfn_write_pixel.BH	set	4
22375                       00000010            _biosfn_write_pixel.CX	set	$10
22376                       00000008            .biosfn_write_pixel.CX	set	8
22377                       00000006            _biosfn_write_pixel.line	set	6
22378                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22379                       0000000E            _biosfn_write_pixel.AL	set	$E
22380                       00000006            .biosfn_write_pixel.AL	set	6
22381                       00000003            _biosfn_write_pixel.data	set	3
22382                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22383                       00000012            _biosfn_write_pixel.DX	set	$12
22384                       0000000A            .biosfn_write_pixel.DX	set	$A
22385                       00000005            _biosfn_write_pixel.mask	set	5
22386                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22387                       00000004            _biosfn_write_pixel.attr	set	4
22388                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22389                       00000007            _biosfn_write_pixel.mode	set	7
22390                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22391                       00000000            _biosfn_write_pixel.addr	set	0
22392                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22393 59F5           BA                   03CE       mov dx, # 0x3ce
22394 59F8           B8                   FF08       mov ax, #0xff08
22395 59FB           EF                              out dx, ax
22396 59FC           B8                   0005       mov ax, #0x0005
22397 59FF           EF                              out dx, ax
22398 5A00           B8                   0003       mov ax, #0x0003
22399 5A03           EF                              out dx, ax
22400                                           ! 2549 endasm
22401                                           !BCC_ENDASM
22402                                           !BCC_EOS
22403                                           ! 2550      break;
22404 5A04           E9         0193            br 	.1A3
22405                                           !BCC_EOS
22406                                           ! 2551    case 0x02:
22407                                           ! 2552      if(vga_modes[line].pixbits==2)
22408                       00005A07            .1AA:
22409                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22410 5A07           8A46         FE            mov	al,-2[bp]
22411 5A0A           30E4                       xor	ah,ah
22412 5A0C           B1                     03  mov	cl,*3
22413 5A0E           D3E0                       shl	ax,cl
22414 5A10           89C3                       mov	bx,ax
22415 5A12           81C3                 01DA  add	bx,#_vga_modes
22416                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22417 5A16           8A47         03            mov	al,3[bx]
22418 5A19           3C                     02  cmp	al,*2
22419 5A1B           75           1C            jne 	.1AB
22420                       00005A1D            .1AC:
22421                                           ! 2553       {
22422                                           ! 2554        addr=(CX>>2)+(DX>>1)*80;
22423                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22424 5A1D           8B46         0A            mov	ax,$A[bp]
22425 5A20           D1E8                       shr	ax,*1
22426                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22427 5A22           B9                   0050  mov	cx,*$50
22428 5A25           F7E9                       imul	cx
22429 5A27           50                         push	ax
22430                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22431 5A28           8B46         08            mov	ax,8[bp]
22432 5A2B           D1E8                       shr	ax,*1
22433 5A2D           D1E8                       shr	ax,*1
22434                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22435 5A2F           0346         F6            add	ax,0+..FFF8[bp]
22436 5A32           44                         inc	sp
22437 5A33           44                         inc	sp
22438                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22439 5A34           8946         F8            mov	-8[bp],ax
22440                                           !BCC_EOS
22441                                           ! 2555       }
22442                                           ! 2556      else
22443                                           ! 2557       {
22444 5A37           EB           1A            jmp .1AD
22445                       00005A39            .1AB:
22446                                           ! 2558        addr=(CX>>3)+(DX>>1)*80;
22447                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22448 5A39           8B46         0A            mov	ax,$A[bp]
22449 5A3C           D1E8                       shr	ax,*1
22450                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22451 5A3E           B9                   0050  mov	cx,*$50
22452 5A41           F7E9                       imul	cx
22453 5A43           50                         push	ax
22454                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22455 5A44           8B46         08            mov	ax,8[bp]
22456 5A47           B1                     03  mov	cl,*3
22457 5A49           D3E8                       shr	ax,cl
22458                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22459 5A4B           0346         F6            add	ax,0+..FFF8[bp]
22460 5A4E           44                         inc	sp
22461 5A4F           44                         inc	sp
22462                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22463 5A50           8946         F8            mov	-8[bp],ax
22464                                           !BCC_EOS
22465                                           ! 2559       }
22466                                           ! 2560      if (DX & 1) addr += 0x2000;
22467                       00005A53            .1AD:
22468                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22469 5A53           8A46         0A            mov	al,$A[bp]
22470 5A56           24                     01  and	al,*1
22471 5A58           84C0                       test	al,al
22472 5A5A           74           09            je  	.1AE
22473                       00005A5C            .1AF:
22474                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22475 5A5C           8B46         F8            mov	ax,-8[bp]
22476 5A5F           05                   2000  add	ax,#$2000
22477 5A62           8946         F8            mov	-8[bp],ax
22478                                           !BCC_EOS
22479                                           ! 2561      data = read_byte(0xb800,addr);
22480                       00005A65            .1AE:
22481                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22482 5A65           FF76         F8            push	-8[bp]
22483                                           ! Debug: list unsigned int = const $B800 (used reg = )
22484 5A68           B8                   B800  mov	ax,#$B800
22485 5A6B           50                         push	ax
22486                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22487 5A6C           E8         2032            call	_read_byte
22488 5A6F           83C4                   04  add	sp,*4
22489                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22490 5A72           8846         FB            mov	-5[bp],al
22491                                           !BCC_EOS
22492                                           ! 2562      if(vga_modes[line].pixbits==2)
22493                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22494 5A75           8A46         FE            mov	al,-2[bp]
22495 5A78           30E4                       xor	ah,ah
22496 5A7A           B1                     03  mov	cl,*3
22497 5A7C           D3E0                       shl	ax,cl
22498 5A7E           89C3                       mov	bx,ax
22499 5A80           81C3                 01DA  add	bx,#_vga_modes
22500                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22501 5A84           8A47         03            mov	al,3[bx]
22502 5A87           3C                     02  cmp	al,*2
22503 5A89           75           46            jne 	.1B0
22504                       00005A8B            .1B1:
22505                                           ! 2563       {
22506                                           ! 2564        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22507                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22508 5A8B           8A46         08            mov	al,8[bp]
22509 5A8E           24                     03  and	al,*3
22510                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22511 5A90           50                         push	ax
22512 5A91           B8                   0003  mov	ax,*3
22513 5A94           2A46         F6            sub	al,0+..FFF8[bp]
22514 5A97           80DC                   00  sbb	ah,*0
22515 5A9A           44                         inc	sp
22516 5A9B           44                         inc	sp
22517                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22518 5A9C           D1E0                       shl	ax,*1
22519 5A9E           50                         push	ax
22520                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22521 5A9F           8A46         06            mov	al,6[bp]
22522 5AA2           24                     03  and	al,*3
22523                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22524 5AA4           30E4                       xor	ah,ah
22525 5AA6           8B4E         F6            mov	cx,0+..FFF8[bp]
22526 5AA9           D3E0                       shl	ax,cl
22527 5AAB           44                         inc	sp
22528 5AAC           44                         inc	sp
22529                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22530 5AAD           8846         FC            mov	-4[bp],al
22531                                           !BCC_EOS
22532                                           ! 2565        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
22533                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22534 5AB0           8A46         08            mov	al,8[bp]
22535 5AB3           24                     03  and	al,*3
22536                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22537 5AB5           50                         push	ax
22538 5AB6           B8                   0003  mov	ax,*3
22539 5AB9           2A46         F6            sub	al,0+..FFF8[bp]
22540 5ABC           80DC                   00  sbb	ah,*0
22541 5ABF           44                         inc	sp
22542 5AC0           44                         inc	sp
22543                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22544 5AC1           D1E0                       shl	ax,*1
22545                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
22546 5AC3           89C3                       mov	bx,ax
22547 5AC5           B8                   0003  mov	ax,*3
22548 5AC8           89D9                       mov	cx,bx
22549 5ACA           D3E0                       shl	ax,cl
22550                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22551 5ACC           8846         FD            mov	-3[bp],al
22552                                           !BCC_EOS
22553                                           ! 2566       }
22554                                           ! 2567      else
22555                                           ! 2568       {
22556 5ACF           EB           40            jmp .1B2
22557                       00005AD1            .1B0:
22558                                           ! 2569        attr = (AL & 0x01) << (7 - (CX & 0x07));
22559                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22560 5AD1           8A46         08            mov	al,8[bp]
22561 5AD4           24                     07  and	al,*7
22562                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22563 5AD6           50                         push	ax
22564 5AD7           B8                   0007  mov	ax,*7
22565 5ADA           2A46         F6            sub	al,0+..FFF8[bp]
22566 5ADD           80DC                   00  sbb	ah,*0
22567 5AE0           44                         inc	sp
22568 5AE1           44                         inc	sp
22569 5AE2           50                         push	ax
22570                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
22571 5AE3           8A46         06            mov	al,6[bp]
22572 5AE6           24                     01  and	al,*1
22573                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22574 5AE8           30E4                       xor	ah,ah
22575 5AEA           8B4E         F6            mov	cx,0+..FFF8[bp]
22576 5AED           D3E0                       shl	ax,cl
22577 5AEF           44                         inc	sp
22578 5AF0           44                         inc	sp
22579                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22580 5AF1           8846         FC            mov	-4[bp],al
22581                                           !BCC_EOS
22582                                           ! 2570        mask = 0x01 << (7 - (CX & 0x07));
22583                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22584 5AF4           8A46         08            mov	al,8[bp]
22585 5AF7           24                     07  and	al,*7
22586                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22587 5AF9           50                         push	ax
22588 5AFA           B8                   0007  mov	ax,*7
22589 5AFD           2A46         F6            sub	al,0+..FFF8[bp]
22590 5B00           80DC                   00  sbb	ah,*0
22591 5B03           44                         inc	sp
22592 5B04           44                         inc	sp
22593                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
22594 5B05           89C3                       mov	bx,ax
22595 5B07           B8                   0001  mov	ax,*1
22596 5B0A           89D9                       mov	cx,bx
22597 5B0C           D3E0                       shl	ax,cl
22598                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22599 5B0E           8846         FD            mov	-3[bp],al
22600                                           !BCC_EOS
22601                                           ! 2571       }
22602                                           ! 2572      if (AL & 0x80)
22603                       00005B11            .1B2:
22604                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22605 5B11           8A46         06            mov	al,6[bp]
22606 5B14           24                     80  and	al,#$80
22607 5B16           84C0                       test	al,al
22608 5B18           74           0B            je  	.1B3
22609                       00005B1A            .1B4:
22610                                           ! 2573       {
22611                                           ! 2574        data ^= attr;
22612                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22613 5B1A           8A46         FB            mov	al,-5[bp]
22614 5B1D           3246         FC            xor	al,-4[bp]
22615 5B20           8846         FB            mov	-5[bp],al
22616                                           !BCC_EOS
22617                                           ! 2575       }
22618                                           ! 2576      else
22619                                           ! 2577       {
22620 5B23           EB           16            jmp .1B5
22621                       00005B25            .1B3:
22622                                           ! 2578        data &= ~mask;
22623                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
22624 5B25           8A46         FD            mov	al,-3[bp]
22625 5B28           30E4                       xor	ah,ah
22626 5B2A           F7D0                       not	ax
22627                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
22628 5B2C           2246         FB            and	al,-5[bp]
22629 5B2F           8846         FB            mov	-5[bp],al
22630                                           !BCC_EOS
22631                                           ! 2579        data |= attr;
22632                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22633 5B32           8A46         FB            mov	al,-5[bp]
22634 5B35           0A46         FC            or	al,-4[bp]
22635 5B38           8846         FB            mov	-5[bp],al
22636                                           !BCC_EOS
22637                                           ! 2580       }
22638                                           ! 2581      write_byte(0xb800,addr,data);
22639                       00005B3B            .1B5:
22640                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
22641 5B3B           8A46         FB            mov	al,-5[bp]
22642 5B3E           30E4                       xor	ah,ah
22643 5B40           50                         push	ax
22644                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22645 5B41           FF76         F8            push	-8[bp]
22646                                           ! Debug: list unsigned int = const $B800 (used reg = )
22647 5B44           B8                   B800  mov	ax,#$B800
22648 5B47           50                         push	ax
22649                                           ! Debug: func () void = write_byte+0 (used reg = )
22650 5B48           E8         1F7C            call	_write_byte
22651 5B4B           83C4                   06  add	sp,*6
22652                                           !BCC_EOS
22653                                           ! 2582      break;
22654 5B4E           EB           4A            jmp .1A3
22655                                           !BCC_EOS
22656                                           ! 2583    case 0x05:
22657                                           ! 2584      addr=CX+DX*(read_word(0x40,0x4A)*8);
22658                       00005B50            .1B6:
22659                                           ! Debug: list int = const $4A (used reg = )
22660 5B50           B8                   004A  mov	ax,*$4A
22661 5B53           50                         push	ax
22662                                           ! Debug: list int = const $40 (used reg = )
22663 5B54           B8                   0040  mov	ax,*$40
22664 5B57           50                         push	ax
22665                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22666 5B58           E8         1F59            call	_read_word
22667 5B5B           83C4                   04  add	sp,*4
22668                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
22669 5B5E           B1                     03  mov	cl,*3
22670 5B60           D3E0                       shl	ax,cl
22671                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22672                                           ! Debug: expression subtree swapping
22673 5B62           8B4E         0A            mov	cx,$A[bp]
22674 5B65           F7E9                       imul	cx
22675                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
22676                                           ! Debug: expression subtree swapping
22677 5B67           0346         08            add	ax,8[bp]
22678                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22679 5B6A           8946         F8            mov	-8[bp],ax
22680                                           !BCC_EOS
22681                                           ! 2585      write_byte(0xa000,addr,AL);
22682                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22683 5B6D           8A46         06            mov	al,6[bp]
22684 5B70           30E4                       xor	ah,ah
22685 5B72           50                         push	ax
22686                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22687 5B73           FF76         F8            push	-8[bp]
22688                                           ! Debug: list unsigned int = const $A000 (used reg = )
22689 5B76           B8                   A000  mov	ax,#$A000
22690 5B79           50                         push	ax
22691                                           ! Debug: func () void = write_byte+0 (used reg = )
22692 5B7A           E8         1F4A            call	_write_byte
22693 5B7D           83C4                   06  add	sp,*6
22694                                           !BCC_EOS
22695                                           ! 2586      break;
22696 5B80           EB           18            jmp .1A3
22697                                           !BCC_EOS
22698                                           ! 2587   }
22699                                           ! 2588 }
22700 5B82           EB           16            jmp .1A3
22701                       00005B84            .1A5:
22702 5B84           2C                     02  sub	al,*2
22703 5B86         0F84         FE7D            beq 	.1AA
22704 5B8A           2C                     01  sub	al,*1
22705 5B8C         0F84         FDD1            beq 	.1A7
22706 5B90           2C                     01  sub	al,*1
22707 5B92         0F84         FDCB            beq 	.1A6
22708 5B96           2C                     01  sub	al,*1
22709 5B98           74           B6            je 	.1B6
22710                       00005B9A            .1A3:
22711                       FFFFFFF6            ..FFF8	=	-$A
22712 5B9A           89EC                       mov	sp,bp
22713 5B9C           5D                         pop	bp
22714 5B9D           C3                         ret
22715                                           ! 2589 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u 
22716                                           ! Register BX used in function biosfn_write_pixel
22717                       00005B9E            _biosfn_read_pixel:
22718                                           !BCC_EOS
22719                                           !BCC_EOS
22720                                           !BCC_EOS
22721                                           ! 2589 *AX;
22722                                           !BCC_EOS
22723                                           ! 2590 {
22724                                           ! 2591  Bit8u mode,line,mask,attr,data,i;
22725                                           !BCC_EOS
22726                                           ! 2592  Bit16u addr;
22727                                           !BCC_EOS
22728                                           ! 2593  Bit16u ss=get_SS();
22729 5B9E           55                         push	bp
22730 5B9F           89E5                       mov	bp,sp
22731 5BA1           83C4                   F6  add	sp,*-$A
22732                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
22733 5BA4           E8         1F86            call	_get_SS
22734                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
22735 5BA7           8946         F6            mov	-$A[bp],ax
22736                                           !BCC_EOS
22737                                           ! 2594  mode=read_byte(0x40,0x49);
22738                                           ! Debug: list int = const $49 (used reg = )
22739 5BAA           B8                   0049  mov	ax,*$49
22740 5BAD           50                         push	ax
22741                                           ! Debug: list int = const $40 (used reg = )
22742 5BAE           B8                   0040  mov	ax,*$40
22743 5BB1           50                         push	ax
22744                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22745 5BB2           E8         1EEC            call	_read_byte
22746 5BB5           83C4                   04  add	sp,*4
22747                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
22748 5BB8           8846         FF            mov	-1[bp],al
22749                                           !BCC_EOS
22750                                           ! 2595  line=find_vga_entry(mode);
22751                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
22752 5BBB           8A46         FF            mov	al,-1[bp]
22753 5BBE           30E4                       xor	ah,ah
22754 5BC0           50                         push	ax
22755                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22756 5BC1           E8         1DF1            call	_find_vga_entry
22757 5BC4           44                         inc	sp
22758 5BC5           44                         inc	sp
22759                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
22760 5BC6           8846         FE            mov	-2[bp],al
22761                                           !BCC_EOS
22762                                           ! 2596  if(line==0xFF)return;
22763                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
22764 5BC9           8A46         FE            mov	al,-2[bp]
22765 5BCC           3C                     FF  cmp	al,#$FF
22766 5BCE           75           04            jne 	.1B7
22767                       00005BD0            .1B8:
22768 5BD0           89EC                       mov	sp,bp
22769 5BD2           5D                         pop	bp
22770 5BD3           C3                         ret
22771                                           !BCC_EOS
22772                                           ! 2597  if(vga_modes[line].class==0x00)return;
22773                       00005BD4            .1B7:
22774                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22775 5BD4           8A46         FE            mov	al,-2[bp]
22776 5BD7           30E4                       xor	ah,ah
22777 5BD9           B1                     03  mov	cl,*3
22778 5BDB           D3E0                       shl	ax,cl
22779 5BDD           89C3                       mov	bx,ax
22780 5BDF           81C3                 01DA  add	bx,#_vga_modes
22781                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22782 5BE3           8A47         01            mov	al,1[bx]
22783 5BE6           84C0                       test	al,al
22784 5BE8           75           04            jne 	.1B9
22785                       00005BEA            .1BA:
22786 5BEA           89EC                       mov	sp,bp
22787 5BEC           5D                         pop	bp
22788 5BED           C3                         ret
22789                                           !BCC_EOS
22790                                           ! 2598  switch(vga_modes[line].memmodel)
22791                       00005BEE            .1B9:
22792                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22793 5BEE           8A46         FE            mov	al,-2[bp]
22794 5BF1           30E4                       xor	ah,ah
22795 5BF3           B1                     03  mov	cl,*3
22796 5BF5           D3E0                       shl	ax,cl
22797 5BF7           89C3                       mov	bx,ax
22798 5BF9           81C3                 01DA  add	bx,#_vga_modes
22799 5BFD           8A47         02            mov	al,2[bx]
22800                                           ! 2599   {
22801 5C00           E9         0167            br 	.1BD
22802                                           ! 2600    case 0x04:
22803                                           ! 2601    case 0x03:
22804                       00005C03            .1BE:
22805                                           ! 2602      addr = CX/8+DX*read_word(0x40,0x4A);
22806                       00005C03            .1BF:
22807                                           ! Debug: list int = const $4A (used reg = )
22808 5C03           B8                   004A  mov	ax,*$4A
22809 5C06           50                         push	ax
22810                                           ! Debug: list int = const $40 (used reg = )
22811 5C07           B8                   0040  mov	ax,*$40
22812 5C0A           50                         push	ax
22813                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22814 5C0B           E8         1EA6            call	_read_word
22815 5C0E           83C4                   04  add	sp,*4
22816                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
22817                                           ! Debug: expression subtree swapping
22818 5C11           8B4E         08            mov	cx,8[bp]
22819 5C14           F7E9                       imul	cx
22820 5C16           50                         push	ax
22821                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
22822 5C17           8B46         06            mov	ax,6[bp]
22823 5C1A           B1                     03  mov	cl,*3
22824 5C1C           D3E8                       shr	ax,cl
22825                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22826 5C1E           0346         F4            add	ax,0+..FFF7[bp]
22827 5C21           44                         inc	sp
22828 5C22           44                         inc	sp
22829                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22830 5C23           8946         F8            mov	-8[bp],ax
22831                                           !BCC_EOS
22832                                           ! 2603      mask = 0x80 >> (CX & 0x07);
22833                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
22834 5C26           8A46         06            mov	al,6[bp]
22835 5C29           24                     07  and	al,*7
22836                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22837 5C2B           30E4                       xor	ah,ah
22838 5C2D           89C3                       mov	bx,ax
22839 5C2F           B8                   0080  mov	ax,#$80
22840 5C32           89D9                       mov	cx,bx
22841 5C34           D3F8                       sar	ax,cl
22842                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
22843 5C36           8846         FD            mov	-3[bp],al
22844                                           !BCC_EOS
22845                                           ! 2604      attr = 0x00;
22846                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
22847 5C39           30C0                       xor	al,al
22848 5C3B           8846         FC            mov	-4[bp],al
22849                                           !BCC_EOS
22850                                           ! 2605      for(i=0;i<4;i++)
22851                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
22852 5C3E           30C0                       xor	al,al
22853 5C40           8846         FA            mov	-6[bp],al
22854                                           !BCC_EOS
22855                                           !BCC_EOS
22856                                           ! 2606       {
22857 5C43           EB           4B            jmp .1C2
22858                       00005C45            .1C3:
22859                                           ! 2607        outw(0x3ce, (i << 8) | 0x04);
22860                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
22861 5C45           8A46         FA            mov	al,-6[bp]
22862 5C48           30E4                       xor	ah,ah
22863 5C4A           88C4                       mov	ah,al
22864 5C4C           30C0                       xor	al,al
22865                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
22866 5C4E           0C                     04  or	al,*4
22867                                           ! Debug: list unsigned int = ax+0 (used reg = )
22868 5C50           50                         push	ax
22869                                           ! Debug: list int = const $3CE (used reg = )
22870 5C51           B8                   03CE  mov	ax,#$3CE
22871 5C54           50                         push	ax
22872                                           ! Debug: func () void = outw+0 (used reg = )
22873 5C55           E8         1EC5            call	_outw
22874 5C58           83C4                   04  add	sp,*4
22875                                           !BCC_EOS
22876                                           ! 2608        data = read_byte(0xa000,addr) & mask;
22877                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22878 5C5B           FF76         F8            push	-8[bp]
22879                                           ! Debug: list unsigned int = const $A000 (used reg = )
22880 5C5E           B8                   A000  mov	ax,#$A000
22881 5C61           50                         push	ax
22882                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22883 5C62           E8         1E3C            call	_read_byte
22884 5C65           83C4                   04  add	sp,*4
22885                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
22886 5C68           2246         FD            and	al,-3[bp]
22887                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22888 5C6B           8846         FB            mov	-5[bp],al
22889                                           !BCC_EOS
22890                                           ! 2609        if (data > 0) attr |= (0x01 << i);
22891                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
22892 5C6E           8A46         FB            mov	al,-5[bp]
22893 5C71           84C0                       test	al,al
22894 5C73           74           14            je  	.1C4
22895                       00005C75            .1C5:
22896                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
22897 5C75           8A46         FA            mov	al,-6[bp]
22898 5C78           30E4                       xor	ah,ah
22899 5C7A           89C3                       mov	bx,ax
22900 5C7C           B8                   0001  mov	ax,*1
22901 5C7F           89D9                       mov	cx,bx
22902 5C81           D3E0                       shl	ax,cl
22903                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
22904 5C83           0A46         FC            or	al,-4[bp]
22905 5C86           8846         FC            mov	-4[bp],al
22906                                           !BCC_EOS
22907                                           ! 2610       }
22908                       00005C89            .1C4:
22909                                           ! 2611      break;
22910                       00005C89            .1C1:
22911                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
22912 5C89           8A46         FA            mov	al,-6[bp]
22913 5C8C           40                         inc	ax
22914 5C8D           8846         FA            mov	-6[bp],al
22915                       00005C90            .1C2:
22916                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
22917 5C90           8A46         FA            mov	al,-6[bp]
22918 5C93           3C                     04  cmp	al,*4
22919 5C95           72           AE            jb 	.1C3
22920                       00005C97            .1C6:
22921                       00005C97            .1C0:
22922 5C97           E9         00E8            br 	.1BB
22923                                           !BCC_EOS
22924                                           ! 2612    case 0x02:
22925                                           ! 2613      addr=(CX>>2)+(DX>>1)*80;
22926                       00005C9A            .1C7:
22927                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22928 5C9A           8B46         08            mov	ax,8[bp]
22929 5C9D           D1E8                       shr	ax,*1
22930                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22931 5C9F           B9                   0050  mov	cx,*$50
22932 5CA2           F7E9                       imul	cx
22933 5CA4           50                         push	ax
22934                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
22935 5CA5           8B46         06            mov	ax,6[bp]
22936 5CA8           D1E8                       shr	ax,*1
22937 5CAA           D1E8                       shr	ax,*1
22938                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22939 5CAC           0346         F4            add	ax,0+..FFF7[bp]
22940 5CAF           44                         inc	sp
22941 5CB0           44                         inc	sp
22942                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22943 5CB1           8946         F8            mov	-8[bp],ax
22944                                           !BCC_EOS
22945                                           ! 2614      if (DX & 1) addr += 0x2000;
22946                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22947 5CB4           8A46         08            mov	al,8[bp]
22948 5CB7           24                     01  and	al,*1
22949 5CB9           84C0                       test	al,al
22950 5CBB           74           09            je  	.1C8
22951                       00005CBD            .1C9:
22952                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
22953 5CBD           8B46         F8            mov	ax,-8[bp]
22954 5CC0           05                   2000  add	ax,#$2000
22955 5CC3           8946         F8            mov	-8[bp],ax
22956                                           !BCC_EOS
22957                                           ! 2615      data = read_byte(0xb800,addr);
22958                       00005CC6            .1C8:
22959                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22960 5CC6           FF76         F8            push	-8[bp]
22961                                           ! Debug: list unsigned int = const $B800 (used reg = )
22962 5CC9           B8                   B800  mov	ax,#$B800
22963 5CCC           50                         push	ax
22964                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22965 5CCD           E8         1DD1            call	_read_byte
22966 5CD0           83C4                   04  add	sp,*4
22967                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22968 5CD3           8846         FB            mov	-5[bp],al
22969                                           !BCC_EOS
22970                                           ! 2616      if(vga_modes[line].pixbits==2)
22971                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22972 5CD6           8A46         FE            mov	al,-2[bp]
22973 5CD9           30E4                       xor	ah,ah
22974 5CDB           B1                     03  mov	cl,*3
22975 5CDD           D3E0                       shl	ax,cl
22976 5CDF           89C3                       mov	bx,ax
22977 5CE1           81C3                 01DA  add	bx,#_vga_modes
22978                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22979 5CE5           8A47         03            mov	al,3[bx]
22980 5CE8           3C                     02  cmp	al,*2
22981 5CEA           75           25            jne 	.1CA
22982                       00005CEC            .1CB:
22983                                           ! 2617       {
22984                                           ! 2618        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
22985                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
22986 5CEC           8A46         06            mov	al,6[bp]
22987 5CEF           24                     03  and	al,*3
22988                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22989 5CF1           50                         push	ax
22990 5CF2           B8                   0003  mov	ax,*3
22991 5CF5           2A46         F4            sub	al,0+..FFF7[bp]
22992 5CF8           80DC                   00  sbb	ah,*0
22993 5CFB           44                         inc	sp
22994 5CFC           44                         inc	sp
22995                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22996 5CFD           D1E0                       shl	ax,*1
22997                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
22998 5CFF           89C3                       mov	bx,ax
22999 5D01           8A46         FB            mov	al,-5[bp]
23000 5D04           30E4                       xor	ah,ah
23001 5D06           89D9                       mov	cx,bx
23002 5D08           D3E8                       shr	ax,cl
23003                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23004 5D0A           24                     03  and	al,*3
23005                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23006 5D0C           8846         FC            mov	-4[bp],al
23007                                           !BCC_EOS
23008                                           ! 2619       }
23009                                           ! 2620      else
23010                                           ! 2621       {
23011 5D0F           EB           21            jmp .1CC
23012                       00005D11            .1CA:
23013                                           ! 2622        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23014                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23015 5D11           8A46         06            mov	al,6[bp]
23016 5D14           24                     07  and	al,*7
23017                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23018 5D16           50                         push	ax
23019 5D17           B8                   0007  mov	ax,*7
23020 5D1A           2A46         F4            sub	al,0+..FFF7[bp]
23021 5D1D           80DC                   00  sbb	ah,*0
23022 5D20           44                         inc	sp
23023 5D21           44                         inc	sp
23024                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23025 5D22           89C3                       mov	bx,ax
23026 5D24           8A46         FB            mov	al,-5[bp]
23027 5D27           30E4                       xor	ah,ah
23028 5D29           89D9                       mov	cx,bx
23029 5D2B           D3E8                       shr	ax,cl
23030                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23031 5D2D           24                     01  and	al,*1
23032                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23033 5D2F           8846         FC            mov	-4[bp],al
23034                                           !BCC_EOS
23035                                           ! 2623       }
23036                                           ! 2624      break;
23037                       00005D32            .1CC:
23038 5D32           EB           4E            jmp .1BB
23039                                           !BCC_EOS
23040                                           ! 2625    case 0x05:
23041                                           ! 2626      addr=CX+DX*(read_word(0x40,0x4A)*8);
23042                       00005D34            .1CD:
23043                                           ! Debug: list int = const $4A (used reg = )
23044 5D34           B8                   004A  mov	ax,*$4A
23045 5D37           50                         push	ax
23046                                           ! Debug: list int = const $40 (used reg = )
23047 5D38           B8                   0040  mov	ax,*$40
23048 5D3B           50                         push	ax
23049                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23050 5D3C           E8         1D75            call	_read_word
23051 5D3F           83C4                   04  add	sp,*4
23052                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23053 5D42           B1                     03  mov	cl,*3
23054 5D44           D3E0                       shl	ax,cl
23055                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23056                                           ! Debug: expression subtree swapping
23057 5D46           8B4E         08            mov	cx,8[bp]
23058 5D49           F7E9                       imul	cx
23059                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23060                                           ! Debug: expression subtree swapping
23061 5D4B           0346         06            add	ax,6[bp]
23062                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23063 5D4E           8946         F8            mov	-8[bp],ax
23064                                           !BCC_EOS
23065                                           ! 2627      attr=read_byte(0xa000,addr);
23066                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23067 5D51           FF76         F8            push	-8[bp]
23068                                           ! Debug: list unsigned int = const $A000 (used reg = )
23069 5D54           B8                   A000  mov	ax,#$A000
23070 5D57           50                         push	ax
23071                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23072 5D58           E8         1D46            call	_read_byte
23073 5D5B           83C4                   04  add	sp,*4
23074                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23075 5D5E           8846         FC            mov	-4[bp],al
23076                                           !BCC_EOS
23077                                           ! 2628      break;
23078 5D61           EB           1F            jmp .1BB
23079                                           !BCC_EOS
23080                                           ! 2629    default:
23081                                           ! 2630      attr = 0;
23082                       00005D63            .1CE:
23083                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23084 5D63           30C0                       xor	al,al
23085 5D65           8846         FC            mov	-4[bp],al
23086                                           !BCC_EOS
23087                                           ! 2631   }
23088                                           ! 2632  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23089 5D68           EB           18            jmp .1BB
23090                       00005D6A            .1BD:
23091 5D6A           2C                     02  sub	al,*2
23092 5D6C         0F84         FF2A            beq 	.1C7
23093 5D70           2C                     01  sub	al,*1
23094 5D72         0F84         FE8D            beq 	.1BF
23095 5D76           2C                     01  sub	al,*1
23096 5D78         0F84         FE87            beq 	.1BE
23097 5D7C           2C                     01  sub	al,*1
23098 5D7E           74           B4            je 	.1CD
23099 5D80           EB           E1            jmp	.1CE
23100                       00005D82            .1BB:
23101                       FFFFFFF4            ..FFF7	=	-$C
23102                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23103 5D82           FF76         0A            push	$A[bp]
23104                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23105 5D85           FF76         F6            push	-$A[bp]
23106                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23107 5D88           E8         1D29            call	_read_word
23108 5D8B           83C4                   04  add	sp,*4
23109                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23110 5D8E           30C0                       xor	al,al
23111                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23112 5D90           0A46         FC            or	al,-4[bp]
23113                                           ! Debug: list unsigned int = ax+0 (used reg = )
23114 5D93           50                         push	ax
23115                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23116 5D94           FF76         0A            push	$A[bp]
23117                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23118 5D97           FF76         F6            push	-$A[bp]
23119                                           ! Debug: func () void = write_word+0 (used reg = )
23120 5D9A           E8         1D42            call	_write_word
23121 5D9D           83C4                   06  add	sp,*6
23122                                           !BCC_EOS
23123                                           ! 2633 }
23124 5DA0           89EC                       mov	sp,bp
23125 5DA2           5D                         pop	bp
23126 5DA3           C3                         ret
23127                                           ! 2634 static void biosfn_write_teletype (car, page, attr, flag)
23128                                           ! Register BX used in function biosfn_read_pixel
23129                                           ! 2635 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23130                       00005DA4            _biosfn_write_teletype:
23131                                           !BCC_EOS
23132                                           !BCC_EOS
23133                                           !BCC_EOS
23134                                           !BCC_EOS
23135                                           ! 2636 {
23136                                           ! 2637  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23137                                           !BCC_EOS
23138                                           ! 2638  Bit16u nbcols,nbrows,address;
23139                                           !BCC_EOS
23140                                           ! 2639  Bit16u cursor,dummy;
23141                                           !BCC_EOS
23142                                           ! 2640  if(page==0xff)
23143 5DA4           55                         push	bp
23144 5DA5           89E5                       mov	bp,sp
23145 5DA7           83C4                   F0  add	sp,*-$10
23146                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23147 5DAA           8A46         06            mov	al,6[bp]
23148 5DAD           3C                     FF  cmp	al,#$FF
23149 5DAF           75           11            jne 	.1CF
23150                       00005DB1            .1D0:
23151                                           ! 2641   page=read_byte(0x40,0x62);
23152                                           ! Debug: list int = const $62 (used reg = )
23153 5DB1           B8                   0062  mov	ax,*$62
23154 5DB4           50                         push	ax
23155                                           ! Debug: list int = const $40 (used reg = )
23156 5DB5           B8                   0040  mov	ax,*$40
23157 5DB8           50                         push	ax
23158                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23159 5DB9           E8         1CE5            call	_read_byte
23160 5DBC           83C4                   04  add	sp,*4
23161                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23162 5DBF           8846         06            mov	6[bp],al
23163                                           !BCC_EOS
23164                                           ! 2642  mode=read_byte(0x40,0x49);
23165                       00005DC2            .1CF:
23166                                           ! Debug: list int = const $49 (used reg = )
23167 5DC2           B8                   0049  mov	ax,*$49
23168 5DC5           50                         push	ax
23169                                           ! Debug: list int = const $40 (used reg = )
23170 5DC6           B8                   0040  mov	ax,*$40
23171 5DC9           50                         push	ax
23172                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23173 5DCA           E8         1CD4            call	_read_byte
23174 5DCD           83C4                   04  add	sp,*4
23175                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23176 5DD0           8846         FC            mov	-4[bp],al
23177                                           !BCC_EOS
23178                                           ! 2643  line=find_vga_entry(mode);
23179                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23180 5DD3           8A46         FC            mov	al,-4[bp]
23181 5DD6           30E4                       xor	ah,ah
23182 5DD8           50                         push	ax
23183                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23184 5DD9           E8         1BD9            call	_find_vga_entry
23185 5DDC           44                         inc	sp
23186 5DDD           44                         inc	sp
23187                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23188 5DDE           8846         FB            mov	-5[bp],al
23189                                           !BCC_EOS
23190                                           ! 2644  if(line==0xFF)return;
23191                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23192 5DE1           8A46         FB            mov	al,-5[bp]
23193 5DE4           3C                     FF  cmp	al,#$FF
23194 5DE6           75           04            jne 	.1D1
23195                       00005DE8            .1D2:
23196 5DE8           89EC                       mov	sp,bp
23197 5DEA           5D                         pop	bp
23198 5DEB           C3                         ret
23199                                           !BCC_EOS
23200                                           ! 2645  biosfn_get_cursor_pos(page,&dummy,&cursor);
23201                       00005DEC            .1D1:
23202                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23203 5DEC           8D5E         F2            lea	bx,-$E[bp]
23204 5DEF           53                         push	bx
23205                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23206 5DF0           8D5E         F0            lea	bx,-$10[bp]
23207 5DF3           53                         push	bx
23208                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23209 5DF4           8A46         06            mov	al,6[bp]
23210 5DF7           30E4                       xor	ah,ah
23211 5DF9           50                         push	ax
23212                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23213 5DFA           E8         E560            call	_biosfn_get_cursor_pos
23214 5DFD           83C4                   06  add	sp,*6
23215                                           !BCC_EOS
23216                                           ! 2646  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23217                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23218 5E00           8A46         F2            mov	al,-$E[bp]
23219                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23220 5E03           8846         FE            mov	-2[bp],al
23221                                           !BCC_EOS
23222                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23223 5E06           8B46         F2            mov	ax,-$E[bp]
23224 5E09           30C0                       xor	al,al
23225                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23226 5E0B           88E0                       mov	al,ah
23227 5E0D           30E4                       xor	ah,ah
23228                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23229 5E0F           8846         FD            mov	-3[bp],al
23230                                           !BCC_EOS
23231                                           ! 2647  nbrows=read_byte(0x40,0x84)+1;
23232                                           ! Debug: list int = const $84 (used reg = )
23233 5E12           B8                   0084  mov	ax,#$84
23234 5E15           50                         push	ax
23235                                           ! Debug: list int = const $40 (used reg = )
23236 5E16           B8                   0040  mov	ax,*$40
23237 5E19           50                         push	ax
23238                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23239 5E1A           E8         1C84            call	_read_byte
23240 5E1D           83C4                   04  add	sp,*4
23241                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23242 5E20           30E4                       xor	ah,ah
23243                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23244 5E22           40                         inc	ax
23245 5E23           8946         F6            mov	-$A[bp],ax
23246                                           !BCC_EOS
23247                                           ! 2648  nbcols=read_word(0x40,0x4A);
23248                                           ! Debug: list int = const $4A (used reg = )
23249 5E26           B8                   004A  mov	ax,*$4A
23250 5E29           50                         push	ax
23251                                           ! Debug: list int = const $40 (used reg = )
23252 5E2A           B8                   0040  mov	ax,*$40
23253 5E2D           50                         push	ax
23254                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23255 5E2E           E8         1C83            call	_read_word
23256 5E31           83C4                   04  add	sp,*4
23257                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23258 5E34           8946         F8            mov	-8[bp],ax
23259                                           !BCC_EOS
23260                                           ! 2649  switch(car)
23261 5E37           8A46         04            mov	al,4[bp]
23262                                           ! 2650   {
23263 5E3A           E9         01EB            br 	.1D5
23264                                           ! 2651    case 7:
23265                                           ! 2652     break;
23266                       00005E3D            .1D6:
23267 5E3D           E9         0209            br 	.1D3
23268                                           !BCC_EOS
23269                                           ! 2653    case 8:
23270                                           ! 2654     if(xcurs>0)xcurs--;
23271                       00005E40            .1D7:
23272                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23273 5E40           8A46         FE            mov	al,-2[bp]
23274 5E43           84C0                       test	al,al
23275 5E45           74           07            je  	.1D8
23276                       00005E47            .1D9:
23277                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23278 5E47           8A46         FE            mov	al,-2[bp]
23279 5E4A           48                         dec	ax
23280 5E4B           8846         FE            mov	-2[bp],al
23281                                           !BCC_EOS
23282                                           ! 2655     break;
23283                       00005E4E            .1D8:
23284 5E4E           E9         01F8            br 	.1D3
23285                                           !BCC_EOS
23286                                           ! 2656    case '\r':
23287                                           ! 2657     xcurs=0;
23288                       00005E51            .1DA:
23289                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23290 5E51           30C0                       xor	al,al
23291 5E53           8846         FE            mov	-2[bp],al
23292                                           !BCC_EOS
23293                                           ! 2658     break;
23294 5E56           E9         01F0            br 	.1D3
23295                                           !BCC_EOS
23296                                           ! 2659    case '\n':
23297                                           ! 2660     ycurs++;
23298                       00005E59            .1DB:
23299                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23300 5E59           8A46         FD            mov	al,-3[bp]
23301 5E5C           40                         inc	ax
23302 5E5D           8846         FD            mov	-3[bp],al
23303                                           !BCC_EOS
23304                                           ! 2661     break;
23305 5E60           E9         01E6            br 	.1D3
23306                                           !BCC_EOS
23307                                           ! 2662    case '\t':
23308                                           ! 2663     do
23309                       00005E63            .1DC:
23310                                           ! 2664      {
23311                       00005E63            .1DF:
23312                                           ! 2665       biosfn_write_teletype(' ',page,attr,flag);
23313                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23314 5E63           8A46         0A            mov	al,$A[bp]
23315 5E66           30E4                       xor	ah,ah
23316 5E68           50                         push	ax
23317                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23318 5E69           8A46         08            mov	al,8[bp]
23319 5E6C           30E4                       xor	ah,ah
23320 5E6E           50                         push	ax
23321                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23322 5E6F           8A46         06            mov	al,6[bp]
23323 5E72           30E4                       xor	ah,ah
23324 5E74           50                         push	ax
23325                                           ! Debug: list int = const $20 (used reg = )
23326 5E75           B8                   0020  mov	ax,*$20
23327 5E78           50                         push	ax
23328                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23329 5E79           E8         FF28            call	_biosfn_write_teletype
23330 5E7C           83C4                   08  add	sp,*8
23331                                           !BCC_EOS
23332                                           ! 2666       biosfn_get_cursor_pos(page,&dummy,&cursor);
23333                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23334 5E7F           8D5E         F2            lea	bx,-$E[bp]
23335 5E82           53                         push	bx
23336                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23337 5E83           8D5E         F0            lea	bx,-$10[bp]
23338 5E86           53                         push	bx
23339                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23340 5E87           8A46         06            mov	al,6[bp]
23341 5E8A           30E4                       xor	ah,ah
23342 5E8C           50                         push	ax
23343                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23344 5E8D           E8         E4CD            call	_biosfn_get_cursor_pos
23345 5E90           83C4                   06  add	sp,*6
23346                                           !BCC_EOS
23347                                           ! 2667       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23348                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23349 5E93           8A46         F2            mov	al,-$E[bp]
23350                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23351 5E96           8846         FE            mov	-2[bp],al
23352                                           !BCC_EOS
23353                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23354 5E99           8B46         F2            mov	ax,-$E[bp]
23355 5E9C           30C0                       xor	al,al
23356                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23357 5E9E           88E0                       mov	al,ah
23358 5EA0           30E4                       xor	ah,ah
23359                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23360 5EA2           8846         FD            mov	-3[bp],al
23361                                           !BCC_EOS
23362                                           ! 2668      }while(xcurs%8==0);
23363                       00005EA5            .1DE:
23364                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23365 5EA5           8A46         FE            mov	al,-2[bp]
23366 5EA8           30E4                       xor	ah,ah
23367 5EAA           24                     07  and	al,*7
23368                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23369 5EAC           84C0                       test	al,al
23370 5EAE           74           B3            je 	.1DF
23371                       00005EB0            .1E0:
23372                                           !BCC_EOS
23373                                           ! 2669     break;
23374                       00005EB0            .1DD:
23375 5EB0           E9         0196            br 	.1D3
23376                                           !BCC_EOS
23377                                           ! 2670    default:
23378                                           ! 2671     if(vga_modes[line].class==0x00)
23379                       00005EB3            .1E1:
23380                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23381 5EB3           8A46         FB            mov	al,-5[bp]
23382 5EB6           30E4                       xor	ah,ah
23383 5EB8           B1                     03  mov	cl,*3
23384 5EBA           D3E0                       shl	ax,cl
23385 5EBC           89C3                       mov	bx,ax
23386 5EBE           81C3                 01DA  add	bx,#_vga_modes
23387                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23388 5EC2           8A47         01            mov	al,1[bx]
23389 5EC5           84C0                       test	al,al
23390 5EC7         0F85         0082            bne 	.1E2
23391                       00005ECB            .1E3:
23392                                           ! 2672      {
23393                                           ! 2673       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23394                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23395 5ECB           8A46         FD            mov	al,-3[bp]
23396 5ECE           30E4                       xor	ah,ah
23397 5ED0           8B4E         F8            mov	cx,-8[bp]
23398 5ED3           F7E9                       imul	cx
23399                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23400                                           ! Debug: expression subtree swapping
23401 5ED5           0246         FE            add	al,-2[bp]
23402 5ED8           80D4                   00  adc	ah,*0
23403                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23404 5EDB           D1E0                       shl	ax,*1
23405 5EDD           50                         push	ax
23406                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23407 5EDE           8B46         F8            mov	ax,-8[bp]
23408 5EE1           8B4E         F6            mov	cx,-$A[bp]
23409 5EE4           F7E9                       imul	cx
23410                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23411 5EE6           D1E0                       shl	ax,*1
23412                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23413 5EE8           0C                     FF  or	al,#$FF
23414                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23415                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23416 5EEA           89C3                       mov	bx,ax
23417 5EEC           8A46         06            mov	al,6[bp]
23418 5EEF           30E4                       xor	ah,ah
23419 5EF1           93                         xchg	ax,bx
23420 5EF2           40                         inc	ax
23421 5EF3           89D9                       mov	cx,bx
23422 5EF5           F7E9                       imul	cx
23423                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23424 5EF7           0346         EE            add	ax,0+..FFF6[bp]
23425 5EFA           44                         inc	sp
23426 5EFB           44                         inc	sp
23427                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23428 5EFC           8946         F4            mov	-$C[bp],ax
23429                                           !BCC_EOS
23430                                           ! 2674       write_byte(vga_modes[line].sst
23431                                           ! 2674 art,address,car);
23432                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23433 5EFF           8A46         04            mov	al,4[bp]
23434 5F02           30E4                       xor	ah,ah
23435 5F04           50                         push	ax
23436                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23437 5F05           FF76         F4            push	-$C[bp]
23438                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23439 5F08           8A46         FB            mov	al,-5[bp]
23440 5F0B           30E4                       xor	ah,ah
23441 5F0D           B1                     03  mov	cl,*3
23442 5F0F           D3E0                       shl	ax,cl
23443 5F11           89C3                       mov	bx,ax
23444 5F13           81C3                 01DA  add	bx,#_vga_modes
23445                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23446 5F17           FF77         04            push	4[bx]
23447                                           ! Debug: func () void = write_byte+0 (used reg = )
23448 5F1A           E8         1BAA            call	_write_byte
23449 5F1D           83C4                   06  add	sp,*6
23450                                           !BCC_EOS
23451                                           ! 2675       if(flag==3)
23452                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23453 5F20           8A46         0A            mov	al,$A[bp]
23454 5F23           3C                     03  cmp	al,*3
23455 5F25           75           23            jne 	.1E4
23456                       00005F27            .1E5:
23457                                           ! 2676        write_byte(vga_modes[line].sstart,address+1,attr);
23458                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23459 5F27           8A46         08            mov	al,8[bp]
23460 5F2A           30E4                       xor	ah,ah
23461 5F2C           50                         push	ax
23462                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23463 5F2D           8B46         F4            mov	ax,-$C[bp]
23464                                           ! Debug: list unsigned int = ax+1 (used reg = )
23465 5F30           40                         inc	ax
23466 5F31           50                         push	ax
23467                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23468 5F32           8A46         FB            mov	al,-5[bp]
23469 5F35           30E4                       xor	ah,ah
23470 5F37           B1                     03  mov	cl,*3
23471 5F39           D3E0                       shl	ax,cl
23472 5F3B           89C3                       mov	bx,ax
23473 5F3D           81C3                 01DA  add	bx,#_vga_modes
23474                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23475 5F41           FF77         04            push	4[bx]
23476                                           ! Debug: func () void = write_byte+0 (used reg = )
23477 5F44           E8         1B80            call	_write_byte
23478 5F47           83C4                   06  add	sp,*6
23479                                           !BCC_EOS
23480                                           ! 2677      }
23481                       00005F4A            .1E4:
23482                                           ! 2678     else
23483                                           ! 2679      {
23484 5F4A           E9         00D2            br 	.1E6
23485                       00005F4D            .1E2:
23486                                           ! 2680       cheight=video_param_table[line_to_vpti[line]].cheight;
23487                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23488 5F4D           8A46         FB            mov	al,-5[bp]
23489 5F50           30E4                       xor	ah,ah
23490 5F52           89C3                       mov	bx,ax
23491                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23492 5F54           8A87       025A            mov	al,_line_to_vpti[bx]
23493 5F58           30E4                       xor	ah,ah
23494 5F5A           B1                     06  mov	cl,*6
23495 5F5C           D3E0                       shl	ax,cl
23496 5F5E           89C3                       mov	bx,ax
23497 5F60           81C3                 026E  add	bx,#_video_param_table
23498                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23499 5F64           8A47         02            mov	al,2[bx]
23500 5F67           8846         FF            mov	-1[bp],al
23501                                           !BCC_EOS
23502                                           ! 2681       bpp=vga_modes[line].pixbits;
23503                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23504 5F6A           8A46         FB            mov	al,-5[bp]
23505 5F6D           30E4                       xor	ah,ah
23506 5F6F           B1                     03  mov	cl,*3
23507 5F71           D3E0                       shl	ax,cl
23508 5F73           89C3                       mov	bx,ax
23509 5F75           81C3                 01DA  add	bx,#_vga_modes
23510                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23511 5F79           8A47         03            mov	al,3[bx]
23512 5F7C           8846         FA            mov	-6[bp],al
23513                                           !BCC_EOS
23514                                           ! 2682       switch(vga_modes[line].memmodel)
23515                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23516 5F7F           8A46         FB            mov	al,-5[bp]
23517 5F82           30E4                       xor	ah,ah
23518 5F84           B1                     03  mov	cl,*3
23519 5F86           D3E0                       shl	ax,cl
23520 5F88           89C3                       mov	bx,ax
23521 5F8A           81C3                 01DA  add	bx,#_vga_modes
23522 5F8E           8A47         02            mov	al,2[bx]
23523                                           ! 2683        {
23524 5F91           E9         0077            br 	.1E9
23525                                           ! 2684         case 0x04:
23526                                           ! 2685         case 0x03:
23527                       00005F94            .1EA:
23528                                           ! 2686           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
23529                       00005F94            .1EB:
23530                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
23531 5F94           8A46         FF            mov	al,-1[bp]
23532 5F97           30E4                       xor	ah,ah
23533 5F99           50                         push	ax
23534                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23535 5F9A           FF76         F8            push	-8[bp]
23536                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23537 5F9D           8A46         FD            mov	al,-3[bp]
23538 5FA0           30E4                       xor	ah,ah
23539 5FA2           50                         push	ax
23540                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23541 5FA3           8A46         FE            mov	al,-2[bp]
23542 5FA6           30E4                       xor	ah,ah
23543 5FA8           50                         push	ax
23544                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23545 5FA9           8A46         08            mov	al,8[bp]
23546 5FAC           30E4                       xor	ah,ah
23547 5FAE           50                         push	ax
23548                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23549 5FAF           8A46         04            mov	al,4[bp]
23550 5FB2           30E4                       xor	ah,ah
23551 5FB4           50                         push	ax
23552                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
23553 5FB5           E8         F09E            call	_write_gfx_char_pl4
23554 5FB8           83C4                   0C  add	sp,*$C
23555                                           !BCC_EOS
23556                                           ! 2687           break;
23557 5FBB           EB           62            jmp .1E7
23558                                           !BCC_EOS
23559                                           ! 2688         case 0x02:
23560                                           ! 2689           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
23561                       00005FBD            .1EC:
23562                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
23563 5FBD           8A46         FA            mov	al,-6[bp]
23564 5FC0           30E4                       xor	ah,ah
23565 5FC2           50                         push	ax
23566                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23567 5FC3           FF76         F8            push	-8[bp]
23568                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23569 5FC6           8A46         FD            mov	al,-3[bp]
23570 5FC9           30E4                       xor	ah,ah
23571 5FCB           50                         push	ax
23572                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23573 5FCC           8A46         FE            mov	al,-2[bp]
23574 5FCF           30E4                       xor	ah,ah
23575 5FD1           50                         push	ax
23576                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23577 5FD2           8A46         08            mov	al,8[bp]
23578 5FD5           30E4                       xor	ah,ah
23579 5FD7           50                         push	ax
23580                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23581 5FD8           8A46         04            mov	al,4[bp]
23582 5FDB           30E4                       xor	ah,ah
23583 5FDD           50                         push	ax
23584                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
23585 5FDE           E8         F1E8            call	_write_gfx_char_cga
23586 5FE1           83C4                   0C  add	sp,*$C
23587                                           !BCC_EOS
23588                                           ! 2690           break;
23589 5FE4           EB           39            jmp .1E7
23590                                           !BCC_EOS
23591                                           ! 2691         case 0x05:
23592                                           ! 2692           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
23593                       00005FE6            .1ED:
23594                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
23595 5FE6           FF76         F8            push	-8[bp]
23596                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
23597 5FE9           8A46         FD            mov	al,-3[bp]
23598 5FEC           30E4                       xor	ah,ah
23599 5FEE           50                         push	ax
23600                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
23601 5FEF           8A46         FE            mov	al,-2[bp]
23602 5FF2           30E4                       xor	ah,ah
23603 5FF4           50                         push	ax
23604                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
23605 5FF5           8A46         08            mov	al,8[bp]
23606 5FF8           30E4                       xor	ah,ah
23607 5FFA           50                         push	ax
23608                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
23609 5FFB           8A46         04            mov	al,4[bp]
23610 5FFE           30E4                       xor	ah,ah
23611 6000           50                         push	ax
23612                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
23613 6001           E8         F3CA            call	_write_gfx_char_lin
23614 6004           83C4                   0A  add	sp,*$A
23615                                           !BCC_EOS
23616                                           ! 2693           break;
23617 6007           EB           16            jmp .1E7
23618                                           !BCC_EOS
23619                                           ! 2694        }
23620                                           ! 2695      }
23621 6009           EB           14            jmp .1E7
23622                       0000600B            .1E9:
23623 600B           2C                     02  sub	al,*2
23624 600D           74           AE            je 	.1EC
23625 600F           2C                     01  sub	al,*1
23626 6011         0F84         FF7F            beq 	.1EB
23627 6015           2C                     01  sub	al,*1
23628 6017         0F84         FF79            beq 	.1EA
23629 601B           2C                     01  sub	al,*1
23630 601D           74           C7            je 	.1ED
23631                       0000601F            .1E7:
23632                                           ! 2696     xcurs++;
23633                       0000601F            .1E6:
23634                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
23635 601F           8A46         FE            mov	al,-2[bp]
23636 6022           40                         inc	ax
23637 6023           8846         FE            mov	-2[bp],al
23638                                           !BCC_EOS
23639                                           ! 2697   }
23640                                           ! 2698  if(xcurs==nbcols)
23641 6026           EB           21            jmp .1D3
23642                       00006028            .1D5:
23643 6028           2C                     07  sub	al,*7
23644 602A         0F84         FE0F            beq 	.1D6
23645 602E           2C                     01  sub	al,*1
23646 6030         0F84         FE0C            beq 	.1D7
23647 6034           2C                     01  sub	al,*1
23648 6036         0F84         FE29            beq 	.1DC
23649 603A           2C                     01  sub	al,*1
23650 603C         0F84         FE19            beq 	.1DB
23651 6040           2C                     03  sub	al,*3
23652 6042         0F84         FE0B            beq 	.1DA
23653 6046           E9         FE6A            br 	.1E1
23654                       00006049            .1D3:
23655                       FFFFFFEE            ..FFF6	=	-$12
23656                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
23657 6049           8A46         FE            mov	al,-2[bp]
23658 604C           30E4                       xor	ah,ah
23659 604E           3B46         F8            cmp	ax,-8[bp]
23660 6051           75           0C            jne 	.1EE
23661                       00006053            .1EF:
23662                                           ! 2699   {xcurs=0;
23663                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23664 6053           30C0                       xor	al,al
23665 6055           8846         FE            mov	-2[bp],al
23666                                           !BCC_EOS
23667                                           ! 2700    ycurs++;
23668                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23669 6058           8A46         FD            mov	al,-3[bp]
23670 605B           40                         inc	ax
23671 605C           8846         FD            mov	-3[bp],al
23672                                           !BCC_EOS
23673                                           ! 2701   }
23674                                           ! 2702  if(ycurs==nbrows)
23675                       0000605F            .1EE:
23676                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
23677 605F           8A46         FD            mov	al,-3[bp]
23678 6062           30E4                       xor	ah,ah
23679 6064           3B46         F6            cmp	ax,-$A[bp]
23680 6067           75           70            jne 	.1F0
23681                       00006069            .1F1:
23682                                           ! 2703   {
23683                                           ! 2704    if(vga_modes[line].class==0x00)
23684                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23685 6069           8A46         FB            mov	al,-5[bp]
23686 606C           30E4                       xor	ah,ah
23687 606E           B1                     03  mov	cl,*3
23688 6070           D3E0                       shl	ax,cl
23689 6072           89C3                       mov	bx,ax
23690 6074           81C3                 01DA  add	bx,#_vga_modes
23691                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23692 6078           8A47         01            mov	al,1[bx]
23693 607B           84C0                       test	al,al
23694 607D           75           2A            jne 	.1F2
23695                       0000607F            .1F3:
23696                                           ! 2705     {
23697                                           ! 2706      biosfn_scroll(0x01,0x07,0,0,nbrows-1,nbcols-1,page,1);
23698                                           ! Debug: list int = const 1 (used reg = )
23699 607F           B8                   0001  mov	ax,*1
23700 6082           50                         push	ax
23701                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23702 6083           8A46         06            mov	al,6[bp]
23703 6086           30E4                       xor	ah,ah
23704 6088           50                         push	ax
23705                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23706 6089           8B46         F8            mov	ax,-8[bp]
23707                                           ! Debug: list unsigned int = ax-1 (used reg = )
23708 608C           48                         dec	ax
23709 608D           50                         push	ax
23710                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23711 608E           8B46         F6            mov	ax,-$A[bp]
23712                                           ! Debug: list unsigned int = ax-1 (used reg = )
23713 6091           48                         dec	ax
23714 6092           50                         push	ax
23715                                           ! Debug: list int = const 0 (used reg = )
23716 6093           31C0                       xor	ax,ax
23717 6095           50                         push	ax
23718                                           ! Debug: list int = const 0 (used reg = )
23719 6096           31C0                       xor	ax,ax
23720 6098           50                         push	ax
23721                                           ! Debug: list int = const 7 (used reg = )
23722 6099           B8                   0007  mov	ax,*7
23723 609C           50                         push	ax
23724                                           ! Debug: list int = const 1 (used reg = )
23725 609D           B8                   0001  mov	ax,*1
23726 60A0           50                         push	ax
23727                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23728 60A1           E8         E7B1            call	_biosfn_scroll
23729 60A4           83C4                   10  add	sp,*$10
23730                                           !BCC_EOS
23731                                           ! 2707     }
23732                                           ! 2708    else
23733                                           ! 2709     {
23734 60A7           EB           27            jmp .1F4
23735                       000060A9            .1F2:
23736                                           ! 2710      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
23737                                           ! Debug: list int = const 1 (used reg = )
23738 60A9           B8                   0001  mov	ax,*1
23739 60AC           50                         push	ax
23740                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23741 60AD           8A46         06            mov	al,6[bp]
23742 60B0           30E4                       xor	ah,ah
23743 60B2           50                         push	ax
23744                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23745 60B3           8B46         F8            mov	ax,-8[bp]
23746                                           ! Debug: list unsigned int = ax-1 (used reg = )
23747 60B6           48                         dec	ax
23748 60B7           50                         push	ax
23749                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23750 60B8           8B46         F6            mov	ax,-$A[bp]
23751                                           ! Debug: list unsigned int = ax-1 (used reg = )
23752 60BB           48                         dec	ax
23753 60BC           50                         push	ax
23754                                           ! Debug: list int = const 0 (used reg = )
23755 60BD           31C0                       xor	ax,ax
23756 60BF           50                         push	ax
23757                                           ! Debug: list int = const 0 (used reg = )
23758 60C0           31C0                       xor	ax,ax
23759 60C2           50                         push	ax
23760                                           ! Debug: list int = const 0 (used reg = )
23761 60C3           31C0                       xor	ax,ax
23762 60C5           50                         push	ax
23763                                           ! Debug: list int = const 1 (used reg = )
23764 60C6           B8                   0001  mov	ax,*1
23765 60C9           50                         push	ax
23766                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23767 60CA           E8         E788            call	_biosfn_scroll
23768 60CD           83C4                   10  add	sp,*$10
23769                                           !BCC_EOS
23770                                           ! 2711     }
23771                                           ! 2712    ycurs-=1;
23772                       000060D0            .1F4:
23773                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23774 60D0           8A46         FD            mov	al,-3[bp]
23775 60D3           30E4                       xor	ah,ah
23776 60D5           48                         dec	ax
23777 60D6           8846         FD            mov	-3[bp],al
23778                                           !BCC_EOS
23779                                           ! 2713   }
23780                                           ! 2714  cursor=ycurs; cursor<<=8; cursor+=xcurs;
23781                       000060D9            .1F0:
23782                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
23783 60D9           8A46         FD            mov	al,-3[bp]
23784 60DC           30E4                       xor	ah,ah
23785 60DE           8946         F2            mov	-$E[bp],ax
23786                                           !BCC_EOS
23787                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
23788 60E1           8B46         F2            mov	ax,-$E[bp]
23789 60E4           88C4                       mov	ah,al
23790 60E6           30C0                       xor	al,al
23791 60E8           8946         F2            mov	-$E[bp],ax
23792                                           !BCC_EOS
23793                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
23794 60EB           8B46         F2            mov	ax,-$E[bp]
23795 60EE           0246         FE            add	al,-2[bp]
23796 60F1           80D4                   00  adc	ah,*0
23797 60F4           8946         F2            mov	-$E[bp],ax
23798                                           !BCC_EOS
23799                                           ! 2715  biosfn_set_cursor_pos(page,cursor);
23800                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
23801 60F7           FF76         F2            push	-$E[bp]
23802                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23803 60FA           8A46         06            mov	al,6[bp]
23804 60FD           30E4                       xor	ah,ah
23805 60FF           50                         push	ax
23806                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
23807 6100           E8         E15A            call	_biosfn_set_cursor_pos
23808 6103           83C4                   04  add	sp,*4
23809                                           !BCC_EOS
23810                                           ! 2716 }
23811 6106           89EC                       mov	sp,bp
23812 6108           5D                         pop	bp
23813 6109           C3                         ret
23814                                           ! 2717 #asm
23815                                           !BCC_ASM
23816                       00000008            _biosfn_write_teletype.flag	set	8
23817                       00000006            _biosfn_write_teletype.attr	set	6
23818                       00000004            _biosfn_write_teletype.page	set	4
23819                       00000002            _biosfn_write_teletype.car	set	2
23820                       0000610A            biosfn_get_video_mode:
23821 610A           1E                           push ds
23822 610B           B8                   0040    mov ax, # 0x40
23823 610E           8ED8                         mov ds, ax
23824 6110           53                           push bx
23825 6111           BB                   0062    mov bx, # 0x62
23826 6114           8A07                         mov al, [bx]
23827 6116           5B                           pop bx
23828 6117           88C7                         mov bh, al
23829 6119           53                           push bx
23830 611A           BB                   0087    mov bx, # 0x87
23831 611D           8A27                         mov ah, [bx]
23832 611F           80E4                   80    and ah, #0x80
23833 6122           BB                   0049    mov bx, # 0x49
23834 6125           8A07                         mov al, [bx]
23835 6127           08E0                         or al, ah
23836 6129           BB                   004A    mov bx, # 0x4A
23837 612C           8A27                         mov ah, [bx]
23838 612E           5B                           pop bx
23839 612F           1F                           pop ds
23840 6130           C3                           ret
23841                                           ! 2739 endasm
23842                                           !BCC_ENDASM
23843                                           ! 2740 #asm
23844                                           !BCC_ASM
23845                       00000008            _biosfn_write_teletype.flag	set	8
23846                       00000006            _biosfn_write_teletype.attr	set	6
23847                       00000004            _biosfn_write_teletype.page	set	4
23848                       00000002            _biosfn_write_teletype.car	set	2
23849                       00006131            biosfn_group_10:
23850 6131           3C                     00    cmp al, #0x00
23851 6133           75           02              jne int10_test_1001
23852 6135           EB           61              jmp biosfn_set_single_palette_reg
23853                       00006137            int10_test_1001:
23854 6137           3C                     01    cmp al, #0x01
23855 6139           75           02              jne int10_test_1002
23856 613B           EB           75              jmp biosfn_set_overscan_border_color
23857                       0000613D            int10_test_1002:
23858 613D           3C                     02    cmp al, #0x02
23859 613F           75           02              jne int10_test_1003
23860 6141           EB           77              jmp biosfn_set_all_palette_reg
23861                       00006143            int10_test_1003:
23862 6143           3C                     03    cmp al, #0x03
23863 6145           75           03              jne int10_test_1007
23864 6147           E9         009D              jmp biosfn_toggle_intensity
23865                       0000614A            int10_test_1007:
23866 614A           3C                     07    cmp al, #0x07
23867 614C           75           03              jne int10_test_1008
23868 614E           E9         00BC              jmp biosfn_get_single_palette_reg
23869                       00006151            int10_test_1008:
23870 6151           3C                     08    cmp al, #0x08
23871 6153           75           03              jne int10_test_1009
23872 6155           E9         00D9              jmp biosfn_read_overscan_border_color
23873                       00006158            int10_test_1009:
23874 6158           3C                     09    cmp al, #0x09
23875 615A           75           03              jne int10_test_1010
23876 615C           E9         00E0              jmp biosfn_get_all_palette_reg
23877                       0000615F            int10_test_1010:
23878 615F           3C                     10    cmp al, #0x10
23879 6161           75           03              jne int10_test_1012
23880 6163           E9         011A              jmp biosfn_set_single_dac_reg
23881                       00006166            int10_test_1012:
23882 6166           3C                     12    cmp al, #0x12
23883 6168           75           03              jne int10_test_1013
23884 616A           E9         012C              jmp biosfn_set_all_dac_reg
23885                       0000616D            int10_test_1013:
23886 616D           3C                     13    cmp al, #0x13
23887 616F           75           03              jne int10_test_1015
23888 6171           E9         014D              jmp biosfn_select_video_dac_color_page
23889                       00006174            int10_test_1015:
23890 6174           3C                     15    cmp al, #0x15
23891 6176           75           03              jne int10_test_1017
23892 6178           E9         0189              jmp biosfn_read_single_dac_reg
23893                       0000617B            int10_test_1017:
23894 617B           3C                     17    cmp al, #0x17
23895 617D           75           03              jne int10_test_1018
23896 617F           E9         019D              jmp biosfn_read_all_dac_reg
23897                       00006182            int10_test_1018:
23898 6182           3C                     18    cmp al, #0x18
23899 6184           75           03              jne int10_test_1019
23900 6186           E9         01BE              jmp biosfn_set_pel_mask
23901                       00006189            int10_test_1019:
23902 6189           3C                     19    cmp al, #0x19
23903 618B           75           03              jne int10_test_101A
23904 618D           E9         01C2              jmp biosfn_read_pel_mask
23905                       00006190            int10_test_101A:
23906 6190           3C                     1A    cmp al, #0x1a
23907 6192           75           03              jne int10_group_10_unknown
23908 6194           E9         01C6              jmp biosfn_read_video_dac_state
23909                       00006197            int10_group_10_unknown:
23910 6197           C3                           ret
23911                       00006198            biosfn_set_single_palette_reg:
23912 6198           80FB                   14    cmp bl, #0x14
23913 619B           77           14              ja no_actl_reg1
23914 619D           50                           push ax
23915 619E           52                           push dx
23916 619F           BA                   03DA    mov dx, # 0x3da
23917 61A2           EC                           in al, dx
23918 61A3           BA                   03C0    mov dx, # 0x3c0
23919 61A6           88D8                         mov al, bl
23920 61A8           EE                           out dx, al
23921 61A9           88F8                         mov al, bh
23922 61AB           EE                           out dx, al
23923 61AC           B0                     20    mov al, #0x20
23924 61AE           EE                           out dx, al
23925 61AF           5A                           pop dx
23926 61B0           58                           pop ax
23927                       000061B1            no_actl_reg1:
23928 61B1           C3                           ret
23929                                           ! 2821 endasm
23930                                           !BCC_ENDASM
23931                                           ! 2822 #asm
23932                                           !BCC_ASM
23933                       00000008            _biosfn_write_teletype.flag	set	8
23934                       00000006            _biosfn_write_teletype.attr	set	6
23935                       00000004            _biosfn_write_teletype.page	set	4
23936                       00000002            _biosfn_write_teletype.car	set	2
23937                       000061B2            biosfn_set_overscan_border_color:
23938 61B2           53                           push bx
23939 61B3           B3                     11    mov bl, #0x11
23940 61B5           E8         FFE0              call biosfn_set_single_palette_reg
23941 61B8           5B                           pop bx
23942 61B9           C3                           ret
23943                                           ! 2829 endasm
23944                                           !BCC_ENDASM
23945                                           ! 2830 #asm
23946                                           !BCC_ASM
23947                       00000008            _biosfn_write_teletype.flag	set	8
23948                       00000006            _biosfn_write_teletype.attr	set	6
23949                       00000004            _biosfn_write_teletype.page	set	4
23950                       00000002            _biosfn_write_teletype.car	set	2
23951                       000061BA            biosfn_set_all_palette_reg:
23952 61BA           50                           push ax
23953 61BB           53                           push bx
23954 61BC           51                           push cx
23955 61BD           52                           push dx
23956 61BE           89D3                         mov bx, dx
23957 61C0           BA                   03DA    mov dx, # 0x3da
23958 61C3           EC                           in al, dx
23959 61C4           B1                     00    mov cl, #0x00
23960 61C6           BA                   03C0    mov dx, # 0x3c0
23961                       000061C9            set_palette_loop:
23962 61C9           88C8                         mov al, cl
23963 61CB           EE                           out dx, al
23964 61CC           26                           seg es
23965 61CD           8A07                         mov al, [bx]
23966 61CF           EE                           out dx, al
23967 61D0           43                           inc bx
23968 61D1           FEC1                         inc cl
23969 61D3           80F9                   10    cmp cl, #0x10
23970 61D6           75           F1              jne set_palette_loop
23971 61D8           B0                     11    mov al, #0x11
23972 61DA           EE                           out dx, al
23973 61DB           26                           seg es
23974 61DC           8A07                         mov al, [bx]
23975 61DE           EE                           out dx, al
23976 61DF           B0                     20    mov al, #0x20
23977 61E1           EE                           out dx, al
23978 61E2           5A                           pop dx
23979 61E3           59                           pop cx
23980 61E4           5B                           pop bx
23981 61E5           58                           pop ax
23982 61E6           C3                           ret
23983                                           ! 2863 endasm
23984                                           !BCC_ENDASM
23985                                           ! 2864 #asm
23986                                           !BCC_ASM
23987                       00000008            _biosfn_write_teletype.flag	set	8
23988                       00000006            _biosfn_write_teletype.attr	set	6
23989                       00000004            _biosfn_write_teletype.page	set	4
23990                       00000002            _biosfn_write_teletype.car	set	2
23991                       000061E7            biosfn_toggle_intensity:
23992 61E7           50                           push ax
23993 61E8           53                           push bx
23994 61E9           52                           push dx
23995 61EA           BA                   03DA    mov dx, # 0x3da
23996 61ED           EC                           in al, dx
23997 61EE           BA                   03C0    mov dx, # 0x3c0
23998 61F1           B0                     10    mov al, #0x10
23999 61F3           EE                           out dx, al
24000 61F4           BA                   03C1    mov dx, # 0x3c1
24001 61F7           EC                           in al, dx
24002 61F8           24                     F7    and al, #0xf7
24003 61FA           80E3                   01    and bl, #0x01
24004 61FD           C0E3                   03    shl bl, 3
24005 6200           08D8                         or al, bl
24006 6202           BA                   03C0    mov dx, # 0x3c0
24007 6205           EE                           out dx, al
24008 6206           B0                     20    mov al, #0x20
24009 6208           EE                           out dx, al
24010 6209           5A                           pop dx
24011 620A           5B                           pop bx
24012 620B           58                           pop ax
24013 620C           C3                           ret
24014                                           ! 2888 endasm
24015                                           !BCC_ENDASM
24016                                           ! 2889 #asm
24017                                           !BCC_ASM
24018                       00000008            _biosfn_write_teletype.flag	set	8
24019                       00000006            _biosfn_write_teletype.attr	set	6
24020                       00000004            _biosfn_write_teletype.page	set	4
24021                       00000002            _biosfn_write_teletype.car	set	2
24022                       0000620D            biosfn_get_single_palette_reg:
24023 620D           80FB                   14    cmp bl, #0x14
24024 6210           77           1E              ja no_actl_reg2
24025 6212           50                           push ax
24026 6213           52                           push dx
24027 6214           BA                   03DA    mov dx, # 0x3da
24028 6217           EC                           in al, dx
24029 6218           BA                   03C0    mov dx, # 0x3c0
24030 621B           88D8                         mov al, bl
24031 621D           EE                           out dx, al
24032 621E           BA                   03C1    mov dx, # 0x3c1
24033 6221           EC                           in al, dx
24034 6222           88C7                         mov bh, al
24035 6224           BA                   03DA    mov dx, # 0x3da
24036 6227           EC                           in al, dx
24037 6228           BA                   03C0    mov dx, # 0x3c0
24038 622B           B0                     20    mov al, #0x20
24039 622D           EE                           out dx, al
24040 622E           5A                           pop dx
24041 622F           58                           pop ax
24042                       00006230            no_actl_reg2:
24043 6230           C3                           ret
24044                                           ! 2912 en
24045                                           !BCC_ENDASM
24046                                           ! 2913 #asm
24047                                           !BCC_ASM
24048                       00000008            _biosfn_write_teletype.flag	set	8
24049                       00000006            _biosfn_write_teletype.attr	set	6
24050                       00000004            _biosfn_write_teletype.page	set	4
24051                       00000002            _biosfn_write_teletype.car	set	2
24052                       00006231            biosfn_read_overscan_border_color:
24053 6231           50                           push ax
24054 6232           53                           push bx
24055 6233           B3                     11    mov bl, #0x11
24056 6235           E8         FFD5              call biosfn_get_single_palette_reg
24057 6238           88F8                         mov al, bh
24058 623A           5B                           pop bx
24059 623B           88C7                         mov bh, al
24060 623D           58                           pop ax
24061 623E           C3                           ret
24062                                           ! 2924 endasm
24063                                           !BCC_ENDASM
24064                                           ! 2925 #asm
24065                                           !BCC_ASM
24066                       00000008            _biosfn_write_teletype.flag	set	8
24067                       00000006            _biosfn_write_teletype.attr	set	6
24068                       00000004            _biosfn_write_teletype.page	set	4
24069                       00000002            _biosfn_write_teletype.car	set	2
24070                       0000623F            biosfn_get_all_palette_reg:
24071 623F           50                           push ax
24072 6240           53                           push bx
24073 6241           51                           push cx
24074 6242           52                           push dx
24075 6243           89D3                         mov bx, dx
24076 6245           B1                     00    mov cl, #0x00
24077                       00006247            get_palette_loop:
24078 6247           BA                   03DA    mov dx, # 0x3da
24079 624A           EC                           in al, dx
24080 624B           BA                   03C0    mov dx, # 0x3c0
24081 624E           88C8                         mov al, cl
24082 6250           EE                           out dx, al
24083 6251           BA                   03C1    mov dx, # 0x3c1
24084 6254           EC                           in al, dx
24085 6255           26                           seg es
24086 6256           8807                         mov [bx], al
24087 6258           43                           inc bx
24088 6259           FEC1                         inc cl
24089 625B           80F9                   10    cmp cl, #0x10
24090 625E           75           E7              jne get_palette_loop
24091 6260           BA                   03DA    mov dx, # 0x3da
24092 6263           EC                           in al, dx
24093 6264           BA                   03C0    mov dx, # 0x3c0
24094 6267           B0                     11    mov al, #0x11
24095 6269           EE                           out dx, al
24096 626A           BA                   03C1    mov dx, # 0x3c1
24097 626D           EC                           in al, dx
24098 626E           26                           seg es
24099 626F           8807                         mov [bx], al
24100 6271           BA                   03DA    mov dx, # 0x3da
24101 6274           EC                           in al, dx
24102 6275           BA                   03C0    mov dx, # 0x3c0
24103 6278           B0                     20    mov al, #0x20
24104 627A           EE                           out dx, al
24105 627B           5A                           pop dx
24106 627C           59                           pop cx
24107 627D           5B                           pop bx
24108 627E           58                           pop ax
24109 627F           C3                           ret
24110                                           ! 2966 endasm
24111                                           !BCC_ENDASM
24112                                           ! 2967 #asm
24113                                           !BCC_ASM
24114                       00000008            _biosfn_write_teletype.flag	set	8
24115                       00000006            _biosfn_write_teletype.attr	set	6
24116                       00000004            _biosfn_write_teletype.page	set	4
24117                       00000002            _biosfn_write_teletype.car	set	2
24118                       00006280            biosfn_set_single_dac_reg:
24119 6280           50                           push ax
24120 6281           52                           push dx
24121 6282           BA                   03C8    mov dx, # 0x3c8
24122 6285           88D8                         mov al, bl
24123 6287           EE                           out dx, al
24124 6288           BA                   03C9    mov dx, # 0x3c9
24125 628B           58                           pop ax
24126 628C           50                           push ax
24127 628D           88E0                         mov al, ah
24128 628F           EE                           out dx, al
24129 6290           88E8                         mov al, ch
24130 6292           EE                           out dx, al
24131 6293           88C8                         mov al, cl
24132 6295           EE                           out dx, al
24133 6296           5A                           pop dx
24134 6297           58                           pop ax
24135 6298           C3                           ret
24136                                           ! 2986 endasm
24137                                           !BCC_ENDASM
24138                                           ! 2987 #asm
24139                                           !BCC_ASM
24140                       00000008            _biosfn_write_teletype.flag	set	8
24141                       00000006            _biosfn_write_teletype.attr	set	6
24142                       00000004            _biosfn_write_teletype.page	set	4
24143                       00000002            _biosfn_write_teletype.car	set	2
24144                       00006299            biosfn_set_all_dac_reg:
24145 6299           50                           push ax
24146 629A           53                           push bx
24147 629B           51                           push cx
24148 629C           52                           push dx
24149 629D           BA                   03C8    mov dx, # 0x3c8
24150 62A0           88D8                         mov al, bl
24151 62A2           EE                           out dx, al
24152 62A3           5A                           pop dx
24153 62A4           52                           push dx
24154 62A5           89D3                         mov bx, dx
24155 62A7           BA                   03C9    mov dx, # 0x3c9
24156                       000062AA            set_dac_loop:
24157 62AA           26                           seg es
24158 62AB           8A07                         mov al, [bx]
24159 62AD           EE                           out dx, al
24160 62AE           43                           inc bx
24161 62AF           26                           seg es
24162 62B0           8A07                         mov al, [bx]
24163 62B2           EE                           out dx, al
24164 62B3           43                           inc bx
24165 62B4           26                           seg es
24166 62B5           8A07                         mov al, [bx]
24167 62B7           EE                           out dx, al
24168 62B8           43                           inc bx
24169 62B9           49                           dec cx
24170 62BA           75           EE              jnz set_dac_loop
24171 62BC           5A                           pop dx
24172 62BD           59                           pop cx
24173 62BE           5B                           pop bx
24174 62BF           58                           pop ax
24175 62C0           C3                           ret
24176                                           ! 3020 endasm
24177                                           !BCC_ENDASM
24178                                           ! 3021 #asm
24179                                           !BCC_ASM
24180                       00000008            _biosfn_write_teletype.flag	set	8
24181                       00000006            _biosfn_write_teletype.attr	set	6
24182                       00000004            _biosfn_write_teletype.page	set	4
24183                       00000002            _biosfn_write_teletype.car	set	2
24184                       000062C1            biosfn_select_video_dac_color_page:
24185 62C1           50                           push ax
24186 62C2           53                           push bx
24187 62C3           52                           push dx
24188 62C4           BA                   03DA    mov dx, # 0x3da
24189 62C7           EC                           in al, dx
24190 62C8           BA                   03C0    mov dx, # 0x3c0
24191 62CB           B0                     10    mov al, #0x10
24192 62CD           EE                           out dx, al
24193 62CE           BA                   03C1    mov dx, # 0x3c1
24194 62D1           EC                           in al, dx
24195 62D2           80E3                   01    and bl, #0x01
24196 62D5           75           0D              jnz set_dac_page
24197 62D7           24                     7F    and al, #0x7f
24198 62D9           C0E7                   07    shl bh, 7
24199 62DC           08F8                         or al, bh
24200 62DE           BA                   03C0    mov dx, # 0x3c0
24201 62E1           EE                           out dx, al
24202 62E2           EB           19              jmp set_actl_normal
24203                       000062E4            set_dac_page:
24204 62E4           50                           push ax
24205 62E5           BA                   03DA    mov dx, # 0x3da
24206 62E8           EC                           in al, dx
24207 62E9           BA                   03C0    mov dx, # 0x3c0
24208 62EC           B0                     14    mov al, #0x14
24209 62EE           EE                           out dx, al
24210 62EF           58                           pop ax
24211 62F0           24                     80    and al, #0x80
24212 62F2           75           03              jnz set_dac_16_page
24213 62F4           C0E7                   02    shl bh, 2
24214                       000062F7            set_dac_16_page:
24215 62F7           80E7                   0F    and bh, #0x0f
24216 62FA           88F8                         mov al, bh
24217 62FC           EE                           out dx, al
24218                       000062FD            set_actl_normal:
24219 62FD           B0                     20    mov al, #0x20
24220 62FF           EE                           out dx, al
24221 6300           5A                           pop dx
24222 6301           5B                           pop bx
24223 6302           58                           pop ax
24224 6303           C3                           ret
24225                                           ! 3063 endasm
24226                                           !BCC_ENDASM
24227                                           ! 3064 #asm
24228                                           !BCC_ASM
24229                       00000008            _biosfn_write_teletype.flag	set	8
24230                       00000006            _biosfn_write_teletype.attr	set	6
24231                       00000004            _biosfn_write_teletype.page	set	4
24232                       00000002            _biosfn_write_teletype.car	set	2
24233                       00006304            biosfn_read_single_dac_reg:
24234 6304           50                           push ax
24235 6305           52                           push dx
24236 6306           BA                   03C7    mov dx, # 0x3c7
24237 6309           88D8                         mov al, bl
24238 630B           EE                           out dx, al
24239 630C           58                           pop ax
24240 630D           88C4                         mov ah, al
24241 630F           BA                   03C9    mov dx, # 0x3c9
24242 6312           EC                           in al, dx
24243 6313           86E0                         xchg al, ah
24244 6315           50                           push ax
24245 6316           EC                           in al, dx
24246 6317           88C5                         mov ch, al
24247 6319           EC                           in al, dx
24248 631A           88C1                         mov cl, al
24249 631C           5A                           pop dx
24250 631D           58                           pop ax
24251 631E           C3                           ret
24252                                           ! 3084 endasm
24253                                           !BCC_ENDASM
24254                                           ! 3085 #asm
24255                                           !BCC_ASM
24256                       00000008            _biosfn_write_teletype.flag	set	8
24257                       00000006            _biosfn_write_teletype.attr	set	6
24258                       00000004            _biosfn_write_teletype.page	set	4
24259                       00000002            _biosfn_write_teletype.car	set	2
24260                       0000631F            biosfn_read_all_dac_reg:
24261 631F           50                           push ax
24262 6320           53                           push bx
24263 6321           51                           push cx
24264 6322           52                           push dx
24265 6323           BA                   03C7    mov dx, # 0x3c7
24266 6326           88D8                         mov al, bl
24267 6328           EE                           out dx, al
24268 6329           5A                           pop dx
24269 632A           52                           push dx
24270 632B           89D3                         mov bx, dx
24271 632D           BA                   03C9    mov dx, # 0x3c9
24272                       00006330            read_dac_loop:
24273 6330           EC                           in al, dx
24274 6331           26                           seg es
24275 6332           8807                         mov [bx], al
24276 6334           43                           inc bx
24277 6335           EC                           in al, dx
24278 6336           26                           seg es
24279 6337           8807                         mov [bx], al
24280 6339           43                           inc bx
24281 633A           EC                           in al, dx
24282 633B           26                           seg es
24283 633C           8807                         mov [bx], al
24284 633E           43                           inc bx
24285 633F           49                           dec cx
24286 6340           75           EE              jnz read_dac_loop
24287 6342           5A                           pop dx
24288 6343           59                           pop cx
24289 6344           5B                           pop bx
24290 6345           58                           pop ax
24291 6346           C3                           ret
24292                                           ! 3118 endasm
24293                                           !BCC_ENDASM
24294                                           ! 3119 #asm
24295                                           !BCC_ASM
24296                       00000008            _biosfn_write_teletype.flag	set	8
24297                       00000006            _biosfn_write_teletype.attr	set	6
24298                       00000004            _biosfn_write_teletype.page	set	4
24299                       00000002            _biosfn_write_teletype.car	set	2
24300                       00006347            biosfn_set_pel_mask:
24301 6347           50                           push ax
24302 6348           52                           push dx
24303 6349           BA                   03C6    mov dx, # 0x3c6
24304 634C           88D8                         mov al, bl
24305 634E           EE                           out dx, al
24306 634F           5A                           pop dx
24307 6350           58                           pop ax
24308 6351           C3                           ret
24309                                           ! 3129 endasm
24310                                           !BCC_ENDASM
24311                                           ! 3130 #asm
24312                                           !BCC_ASM
24313                       00000008            _biosfn_write_teletype.flag	set	8
24314                       00000006            _biosfn_write_teletype.attr	set	6
24315                       00000004            _biosfn_write_teletype.page	set	4
24316                       00000002            _biosfn_write_teletype.car	set	2
24317                       00006352            biosfn_read_pel_mask:
24318 6352           50                           push ax
24319 6353           52                           push dx
24320 6354           BA                   03C6    mov dx, # 0x3c6
24321 6357           EC                           in al, dx
24322 6358           88C3                         mov bl, al
24323 635A           5A                           pop dx
24324 635B           58                           pop ax
24325 635C           C3                           ret
24326                                           ! 3140 endasm
24327                                           !BCC_ENDASM
24328                                           ! 3141 #asm
24329                                           !BCC_ASM
24330                       00000008            _biosfn_write_teletype.flag	set	8
24331                       00000006            _biosfn_write_teletype.attr	set	6
24332                       00000004            _biosfn_write_teletype.page	set	4
24333                       00000002            _biosfn_write_teletype.car	set	2
24334                       0000635D            biosfn_read_video_dac_state:
24335 635D           50                           push ax
24336 635E           52                           push dx
24337 635F           BA                   03DA    mov dx, # 0x3da
24338 6362           EC                           in al, dx
24339 6363           BA                   03C0    mov dx, # 0x3c0
24340 6366           B0                     10    mov al, #0x10
24341 6368           EE                           out dx, al
24342 6369           BA                   03C1    mov dx, # 0x3c1
24343 636C           EC                           in al, dx
24344 636D           88C3                         mov bl, al
24345 636F           C0EB                   07    shr bl, 7
24346 6372           BA                   03DA    mov dx, # 0x3da
24347 6375           EC                           in al, dx
24348 6376           BA                   03C0    mov dx, # 0x3c0
24349 6379           B0                     14    mov al, #0x14
24350 637B           EE                           out dx, al
24351 637C           BA                   03C1    mov dx, # 0x3c1
24352 637F           EC                           in al, dx
24353 6380           88C7                         mov bh, al
24354 6382           80E7                   0F    and bh, #0x0f
24355 6385           F6C3                   01    test bl, #0x01
24356 6388           75           03              jnz get_dac_16_page
24357 638A           C0EF                   02    shr bh, 2
24358                       0000638D            get_dac_16_page:
24359 638D           BA                   03DA    mov dx, # 0x3da
24360 6390           EC                           in al, dx
24361 6391           BA                   03C0    mov dx, # 0x3c0
24362 6394           B0                     20    mov al, #0x20
24363 6396           EE                           out dx, al
24364 6397           5A                           pop dx
24365 6398           58                           pop ax
24366 6399           C3                           ret
24367                                           ! 3175 endasm
24368                                           !BCC_ENDASM
24369                                           ! 3176 static void biosfn_perform_gray_scale_summing (start,count)
24370                                           ! Register BX used in function biosfn_write_teletype
24371                                           ! 3177 Bit16u start;Bit16u count;
24372                       0000639A            _biosfn_perform_gray_scale_summing:
24373                                           !BCC_EOS
24374                                           !BCC_EOS
24375                                           ! 3178 {Bit8u r,g,b;
24376                                           !BCC_EOS
24377                                           ! 3179  Bit16u i;
24378                                           !BCC_EOS
24379                                           ! 3180  Bit16u index;
24380                                           !BCC_EOS
24381                                           ! 3181  inb(0x3da);
24382 639A           55                         push	bp
24383 639B           89E5                       mov	bp,sp
24384 639D           83C4                   F8  add	sp,*-8
24385                                           ! Debug: list int = const $3DA (used reg = )
24386 63A0           B8                   03DA  mov	ax,#$3DA
24387 63A3           50                         push	ax
24388                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24389 63A4           E8         1750            call	_inb
24390 63A7           44                         inc	sp
24391 63A8           44                         inc	sp
24392                                           !BCC_EOS
24393                                           ! 3182  outb(0x3c0,0x00);
24394                                           ! Debug: list int = const 0 (used reg = )
24395 63A9           31C0                       xor	ax,ax
24396 63AB           50                         push	ax
24397                                           ! Debug: list int = const $3C0 (used reg = )
24398 63AC           B8                   03C0  mov	ax,#$3C0
24399 63AF           50                         push	ax
24400                                           ! Debug: func () void = outb+0 (used reg = )
24401 63B0           E8         175A            call	_outb
24402 63B3           83C4                   04  add	sp,*4
24403                                           !BCC_EOS
24404                                           ! 3183  for( index = 0; index < count; index++ )
24405                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24406 63B6           31C0                       xor	ax,ax
24407 63B8           8946         F8            mov	-8[bp],ax
24408                                           !BCC_EOS
24409                                           !BCC_EOS
24410                                           ! 3184   {
24411 63BB           E9         00BE            br 	.1F7
24412                       000063BE            .1F8:
24413                                           ! 3185    outb(0x3c7,start);
24414                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24415 63BE           FF76         04            push	4[bp]
24416                                           ! Debug: list int = const $3C7 (used reg = )
24417 63C1           B8                   03C7  mov	ax,#$3C7
24418 63C4           50                         push	ax
24419                                           ! Debug: func () void = outb+0 (used reg = )
24420 63C5           E8         1745            call	_outb
24421 63C8           83C4                   04  add	sp,*4
24422                                           !BCC_EOS
24423                                           ! 3186    r=inb( 0x3c9 );
24424                                           ! Debug: list int = const $3C9 (used reg = )
24425 63CB           B8                   03C9  mov	ax,#$3C9
24426 63CE           50                         push	ax
24427                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24428 63CF           E8         1725            call	_inb
24429 63D2           44                         inc	sp
24430 63D3           44                         inc	sp
24431                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24432 63D4           8846         FF            mov	-1[bp],al
24433                                           !BCC_EOS
24434                                           ! 3187    g=inb( 0x3c9 );
24435                                           ! Debug: list int = const $3C9 (used reg = )
24436 63D7           B8                   03C9  mov	ax,#$3C9
24437 63DA           50                         push	ax
24438                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24439 63DB           E8         1719            call	_inb
24440 63DE           44                         inc	sp
24441 63DF           44                         inc	sp
24442                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24443 63E0           8846         FE            mov	-2[bp],al
24444                                           !BCC_EOS
24445                                           ! 3188    b=inb( 0x3c9 );
24446                                           ! Debug: list int = const $3C9 (used reg = )
24447 63E3           B8                   03C9  mov	ax,#$3C9
24448 63E6           50                         push	ax
24449                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24450 63E7           E8         170D            call	_inb
24451 63EA           44                         inc	sp
24452 63EB           44                         inc	sp
24453                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24454 63EC           8846         FD            mov	-3[bp],al
24455                                           !BCC_EOS
24456                                           ! 3189    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24457                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24458                                           ! Debug: expression subtree swapping
24459 63EF           8A46         FD            mov	al,-3[bp]
24460 63F2           30E4                       xor	ah,ah
24461 63F4           B9                   001C  mov	cx,*$1C
24462 63F7           F7E9                       imul	cx
24463 63F9           50                         push	ax
24464                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24465                                           ! Debug: expression subtree swapping
24466 63FA           8A46         FE            mov	al,-2[bp]
24467 63FD           30E4                       xor	ah,ah
24468 63FF           B9                   0097  mov	cx,#$97
24469 6402           F7E9                       imul	cx
24470 6404           50                         push	ax
24471                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
24472                                           ! Debug: expression subtree swapping
24473 6405           8A46         FF            mov	al,-1[bp]
24474 6408           30E4                       xor	ah,ah
24475 640A           B9                   004D  mov	cx,*$4D
24476 640D           F7E9                       imul	cx
24477                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
24478 640F           0346         F4            add	ax,-$C[bp]
24479 6412           44                         inc	sp
24480 6413           44                         inc	sp
24481                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24482 6414           0346         F6            add	ax,-$A[bp]
24483 6417           44                         inc	sp
24484 6418           44                         inc	sp
24485                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
24486                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
24487 6419           05                   0080  add	ax,#$80
24488 641C           88E0                       mov	al,ah
24489 641E           30E4                       xor	ah,ah
24490                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
24491 6420           8946         FA            mov	-6[bp],ax
24492                                           !BCC_EOS
24493                                           ! 3190    if(i>0x3f)i=0x3f;
24494                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24495 6423           8B46         FA            mov	ax,-6[bp]
24496 6426           3D                   003F  cmp	ax,*$3F
24497 6429           76           06            jbe 	.1F9
24498                       0000642B            .1FA:
24499                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24500 642B           B8                   003F  mov	ax,*$3F
24501 642E           8946         FA            mov	-6[bp],ax
24502                                           !BCC_EOS
24503                                           ! 3191    outb(0x3c8,start);
24504                       00006431            .1F9:
24505                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24506 6431           FF76         04            push	4[bp]
24507                                           ! Debug: list int = const $3C8 (used reg = )
24508 6434           B8                   03C8  mov	ax,#$3C8
24509 6437           50                         push	ax
24510                                           ! Debug: func () void = outb+0 (used reg = )
24511 6438           E8         16D2            call	_outb
24512 643B           83C4                   04  add	sp,*4
24513                                           !BCC_EOS
24514                                           ! 3192    outb( 0x3c9, i&0xff );
24515                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24516 643E           8A46         FA            mov	al,-6[bp]
24517                                           ! Debug: list unsigned char = al+0 (used reg = )
24518 6441           30E4                       xor	ah,ah
24519 6443           50                         push	ax
24520                                           ! Debug: list int = const $3C9 (used reg = )
24521 6444           B8                   03C9  mov	ax,#$3C9
24522 6447           50                         push	ax
24523                                           ! Debug: func () void = outb+0 (used reg = )
24524 6448           E8         16C2            call	_outb
24525 644B           83C4                   04  add	sp,*4
24526                                           !BCC_EOS
24527                                           ! 3193    outb( 0x3c9, i&0xff );
24528                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24529 644E           8A46         FA            mov	al,-6[bp]
24530                                           ! Debug: list unsigned char = al+0 (used reg = )
24531 6451           30E4                       xor	ah,ah
24532 6453           50                         push	ax
24533                                           ! Debug: list int = const $3C9 (used reg = )
24534 6454           B8                   03C9  mov	ax,#$3C9
24535 6457           50                         push	ax
24536                                           ! Debug: func () void = outb+0 (used reg = )
24537 6458           E8         16B2            call	_outb
24538 645B           83C4                   04  add	sp,*4
24539                                           !BCC_EOS
24540                                           ! 3194    outb( 0x3c9, i&0xff );
24541                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24542 645E           8A46         FA            mov	al,-6[bp]
24543                                           ! Debug: list unsigned char = al+0 (used reg = )
24544 6461           30E4                       xor	ah,ah
24545 6463           50                         push	ax
24546                                           ! Debug: list int = const $3C9 (used reg = )
24547 6464           B8                   03C9  mov	ax,#$3C9
24548 6467           50                         push	ax
24549                                           ! Debug: func () void = outb+0 (used reg = )
24550 6468           E8         16A2            call	_outb
24551 646B           83C4                   04  add	sp,*4
24552                                           !BCC_EOS
24553                                           ! 3195    start++;
24554                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
24555 646E           8B46         04            mov	ax,4[bp]
24556 6471           40                         inc	ax
24557 6472           8946         04            mov	4[bp],ax
24558                                           !BCC_EOS
24559                                           ! 3196   }
24560                                           ! 3197  inb(0x3da);
24561                       00006475            .1F6:
24562                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
24563 6475           8B46         F8            mov	ax,-8[bp]
24564 6478           40                         inc	ax
24565 6479           8946         F8            mov	-8[bp],ax
24566                       0000647C            .1F7:
24567                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
24568 647C           8B46         F8            mov	ax,-8[bp]
24569 647F           3B46         06            cmp	ax,6[bp]
24570 6482         0F82         FF38            blo 	.1F8
24571                       00006486            .1FB:
24572                       00006486            .1F5:
24573                                           ! Debug: list int = const $3DA (used reg = )
24574 6486           B8                   03DA  mov	ax,#$3DA
24575 6489           50                         push	ax
24576                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24577 648A           E8         166A            call	_inb
24578 648D           44                         inc	sp
24579 648E           44                         inc	sp
24580                                           !BCC_EOS
24581                                           ! 3198  outb(0x3c0,0x20);
24582                                           ! Debug: list int = const $20 (used reg = )
24583 648F           B8                   0020  mov	ax,*$20
24584 6492           50                         push	ax
24585                                           ! Debug: list int = const $3C0 (used reg = )
24586 6493           B8                   03C0  mov	ax,#$3C0
24587 6496           50                         push	ax
24588                                           ! Debug: func () void = outb+0 (used reg = )
24589 6497           E8         1673            call	_outb
24590 649A           83C4                   04  add	sp,*4
24591                                           !BCC_EOS
24592                                           ! 3199 }
24593 649D           89EC                       mov	sp,bp
24594 649F           5D                         pop	bp
24595 64A0           C3                         ret
24596                                           ! 3200 static void get_font_access()
24597                                           ! 3201 {
24598                       000064A1            _get_font_access:
24599                                           ! 3202 #asm
24600                                           !BCC_ASM
24601 64A1           BA                   03C4   mov dx, # 0x3c4
24602 64A4           B8                   0100   mov ax, #0x0100
24603 64A7           EF                          out dx, ax
24604 64A8           B8                   0402   mov ax, #0x0402
24605 64AB           EF                          out dx, ax
24606 64AC           B8                   0704   mov ax, #0x0704
24607 64AF           EF                          out dx, ax
24608 64B0           B8                   0300   mov ax, #0x0300
24609 64B3           EF                          out dx, ax
24610 64B4           BA                   03CE   mov dx, # 0x3ce
24611 64B7           B8                   0204   mov ax, #0x0204
24612 64BA           EF                          out dx, ax
24613 64BB           B8                   0005   mov ax, #0x0005
24614 64BE           EF                          out dx, ax
24615 64BF           B8                   0406   mov ax, #0x0406
24616 64C2           EF                          out dx, ax
24617                                           ! 3219 endasm
24618                                           !BCC_ENDASM
24619                                           ! 3220 }
24620 64C3           C3                         ret
24621                                           ! 3221 static void release_font_access()
24622                                           ! 3222 {
24623                       000064C4            _release_font_access:
24624                                           ! 3223 #asm
24625                                           !BCC_ASM
24626 64C4           BA                   03C4   mov dx, # 0x3c4
24627 64C7           B8                   0100   mov ax, #0x0100
24628 64CA           EF                          out dx, ax
24629 64CB           B8                   0302   mov ax, #0x0302
24630 64CE           EF                          out dx, ax
24631 64CF           B8                   0304   mov ax, #0x0304
24632 64D2           EF                          out dx, ax
24633 64D3           B8                   0300   mov ax, #0x0300
24634 64D6           EF                          out dx, ax
24635 64D7           BA                   03CC   mov dx, # 0x3cc
24636 64DA           EC                          in al, dx
24637 64DB           24                     01   and al, #0x01
24638 64DD           C0E0                   02   shl al, 2
24639 64E0           0C                     0A   or al, #0x0a
24640 64E2           88C4                        mov ah, al
24641 64E4           B0                     06   mov al, #0x06
24642 64E6           BA                   03CE   mov dx, # 0x3ce
24643 64E9           EF                          out dx, ax
24644 64EA           B8                   0004   mov ax, #0x0004
24645 64ED           EF                          out dx, ax
24646 64EE           B8                   1005   mov ax, #0x1005
24647 64F1           EF                          out dx, ax
24648                                           ! 3246 endasm
24649                                           !BCC_ENDASM
24650                                           ! 3247 }
24651 64F2           C3                         ret
24652                                           ! 3248 #asm
24653                                           !BCC_ASM
24654                       000064F3            idiv_u:
24655 64F3           31D2                         xor dx,dx
24656 64F5           F7F3                         div bx
24657 64F7           C3                           ret
24658                                           ! 3253 endasm
24659                                           !BCC_ENDASM
24660                                           ! 3254 static void set_scan_lines(lines) Bit8u lines;
24661                       000064F8            _set_scan_lines:
24662                                           !BCC_EOS
24663                                           ! 3255 {
24664                                           ! 3256  Bit16u crtc_addr,cols,page,vde;
24665                                           !BCC_EOS
24666                                           ! 3257  Bit8u crtc_r9,ovl,rows;
24667                                           !BCC_EOS
24668                                           ! 3258  crtc_addr = read_word(0x40,0x63);
24669 64F8           55                         push	bp
24670 64F9           89E5                       mov	bp,sp
24671 64FB           83C4                   F4  add	sp,*-$C
24672                                           ! Debug: list int = const $63 (used reg = )
24673 64FE           B8                   0063  mov	ax,*$63
24674 6501           50                         push	ax
24675                                           ! Debug: list int = const $40 (used reg = )
24676 6502           B8                   0040  mov	ax,*$40
24677 6505           50                         push	ax
24678                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24679 6506           E8         15AB            call	_read_word
24680 6509           83C4                   04  add	sp,*4
24681                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24682 650C           8946         FE            mov	-2[bp],ax
24683                                           !BCC_EOS
24684                                           ! 3259  outb(crtc_addr, 0x09);
24685                                           ! Debug: list int = const 9 (used reg = )
24686 650F           B8                   0009  mov	ax,*9
24687 6512           50                         push	ax
24688                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24689 6513           FF76         FE            push	-2[bp]
24690                                           ! Debug: func () void = outb+0 (used reg = )
24691 6516           E8         15F4            call	_outb
24692 6519           83C4                   04  add	sp,*4
24693                                           !BCC_EOS
24694                                           ! 3260  crtc_r9 = inb(crtc_addr+1);
24695                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24696 651C           8B46         FE            mov	ax,-2[bp]
24697                                           ! Debug: list unsigned int = ax+1 (used reg = )
24698 651F           40                         inc	ax
24699 6520           50                         push	ax
24700                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24701 6521           E8         15D3            call	_inb
24702 6524           44                         inc	sp
24703 6525           44                         inc	sp
24704                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24705 6526           8846         F7            mov	-9[bp],al
24706                                           !BCC_EOS
24707                                           ! 3261  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
24708                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
24709 6529           8A46         04            mov	al,4[bp]
24710 652C           30E4                       xor	ah,ah
24711 652E           48                         dec	ax
24712 652F           50                         push	ax
24713                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
24714 6530           8A46         F7            mov	al,-9[bp]
24715 6533           24                     E0  and	al,#$E0
24716                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
24717 6535           30E4                       xor	ah,ah
24718 6537           0B46         F2            or	ax,-$E[bp]
24719 653A           44                         inc	sp
24720 653B           44                         inc	sp
24721                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24722 653C           8846         F7            mov	-9[bp],al
24723                                           !BCC_EOS
24724                                           ! 3262  outb(crtc_addr+1, crtc_r9);
24725                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24726 653F           8A46         F7            mov	al,-9[bp]
24727 6542           30E4                       xor	ah,ah
24728 6544           50                         push	ax
24729                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
24730 6545           8B46         FE            mov	ax,-2[bp]
24731                                           ! Debug: list unsigned int = ax+1 (used reg = )
24732 6548           40                         inc	ax
24733 6549           50                         push	ax
24734                                           ! Debug: func () void = outb+0 (used reg = )
24735 654A           E8         15C0            call	_outb
24736 654D           83C4                   04  add	sp,*4
24737                                           !BCC_EOS
24738                                           ! 3263  if(lines==8)
24739                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
24740 6550           8A46         04            mov	al,4[bp]
24741 6553           3C                     08  cmp	al,*8
24742 6555           75           10            jne 	.1FC
24743                       00006557            .1FD:
24744                                           ! 3264   {
24745                                           ! 3265    biosfn_set_cursor_shape(0x06,0x07);
24746                                           ! Debug: list int = const 7 (used reg = )
24747 6557           B8                   0007  mov	ax,*7
24748 655A           50                         push	ax
24749                                           ! Debug: list int = const 6 (used reg = )
24750 655B           B8                   0006  mov	ax,*6
24751 655E           50                         push	ax
24752                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24753 655F           E8         DBE0            call	_biosfn_set_cursor_shape
24754 6562           83C4                   04  add	sp,*4
24755                                           !BCC_EOS
24756                                           ! 3266   }
24757                                           ! 3267  else
24758                                           ! 3268   {
24759 6565           EB           18            jmp .1FE
24760                       00006567            .1FC:
24761                                           ! 3269    biosfn_set_cursor_shape(lines-4,lines-3);
24762                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
24763 6567           8A46         04            mov	al,4[bp]
24764 656A           30E4                       xor	ah,ah
24765                                           ! Debug: list unsigned int = ax-3 (used reg = )
24766 656C           05                   FFFD  add	ax,*-3
24767 656F           50                         push	ax
24768                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
24769 6570           8A46         04            mov	al,4[bp]
24770 6573           30E4                       xor	ah,ah
24771                                           ! Debug: list unsigned int = ax-4 (used reg = )
24772 6575           05                   FFFC  add	ax,*-4
24773 6578           50                         push	ax
24774                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24775 6579           E8         DBC6            call	_biosfn_set_cursor_shape
24776 657C           83C4                   04  add	sp,*4
24777                                           !BCC_EOS
24778                                           ! 3270   }
24779                                           ! 3271  write_word(0x40,0x85, lines);
24780                       0000657F            .1FE:
24781                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
24782 657F           8A46         04            mov	al,4[bp]
24783 6582           30E4                       xor	ah,ah
24784 6584           50                         push	ax
24785                                           ! Debug: list int = const $85 (used reg = )
24786 6585           B8                   0085  mov	ax,#$85
24787 6588           50                         push	ax
24788                                           ! Debug: list int = const $40 (used reg = )
24789 6589           B8                   0040  mov	ax,*$40
24790 658C           50                         push	ax
24791                                           ! Debug: func () void = write_word+0 (used reg = )
24792 658D           E8         154F            call	_write_word
24793 6590           83C4                   06  add	sp,*6
24794                                           !BCC_EOS
24795                                           ! 3272  outb(crtc_addr, 0x12);
24796                                           ! Debug: list int = const $12 (used reg = )
24797 6593           B8                   0012  mov	ax,*$12
24798 6596           50                         push	ax
24799                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24800 6597           FF76         FE            push	-2[bp]
24801                                           ! Debug: func () void = outb+0 (used reg = )
24802 659A           E8         1570            call	_outb
24803 659D           83C4                   04  add	sp,*4
24804                                           !BCC_EOS
24805                                           ! 3273  vde = inb(crtc_addr+1);
24806                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24807 65A0           8B46         FE            mov	ax,-2[bp]
24808                                           ! Debug: list unsigned int = ax+1 (used reg = )
24809 65A3           40                         inc	ax
24810 65A4           50                         push	ax
24811                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24812 65A5           E8         154F            call	_inb
24813 65A8           44                         inc	sp
24814 65A9           44                         inc	sp
24815                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
24816 65AA           30E4                       xor	ah,ah
24817 65AC           8946         F8            mov	-8[bp],ax
24818                                           !BCC_EOS
24819                                           ! 3274  outb(crtc_addr, 0x07);
24820                                           ! Debug: list int = const 7 (used reg = )
24821 65AF           B8                   0007  mov	ax,*7
24822 65B2           50                         push	ax
24823                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24824 65B3           FF76         FE            push	-2[bp]
24825                                           ! Debug: func () void = outb+0 (used reg = )
24826 65B6           E8         1554            call	_outb
24827 65B9           83C4                   04  add	sp,*4
24828                                           !BCC_EOS
24829                                           ! 3275  ovl = inb(crtc_addr+1);
24830                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24831 65BC           8B46         FE            mov	ax,-2[bp]
24832                                           ! Debug: list unsigned int = ax+1 (used reg = )
24833 65BF           40                         inc	ax
24834 65C0           50                         push	ax
24835                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24836 65C1           E8         1533            call	_inb
24837 65C4           44                         inc	sp
24838 65C5           44                         inc	sp
24839                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
24840 65C6           8846         F6            mov	-$A[bp],al
24841                                           !BCC_EOS
24842                                           ! 3276  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
24843                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
24844 65C9           8A46         F6            mov	al,-$A[bp]
24845 65CC           24                     40  and	al,*$40
24846                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
24847 65CE           30E4                       xor	ah,ah
24848 65D0           B1                     03  mov	cl,*3
24849 65D2           D3E0                       shl	ax,cl
24850 65D4           50                         push	ax
24851                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
24852 65D5           8A46         F6            mov	al,-$A[bp]
24853 65D8           24                     02  and	al,*2
24854                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
24855 65DA           30E4                       xor	ah,ah
24856 65DC           B1                     07  mov	cl,*7
24857 65DE           D3E0                       shl	ax,cl
24858                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
24859 65E0           0346         F2            add	ax,-$E[bp]
24860 65E3           44                         inc	sp
24861 65E4           44                         inc	sp
24862                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24863                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
24864 65E5           40                         inc	ax
24865 65E6           0346         F8            add	ax,-8[bp]
24866 65E9           8946         F8            mov	-8[bp],ax
24867                                           !BCC_EOS
24868                                           ! 3277  rows = vde / lines;
24869                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
24870 65EC           8A46         04            mov	al,4[bp]
24871 65EF           30E4                       xor	ah,ah
24872 65F1           89C3                       mov	bx,ax
24873 65F3           8B46         F8            mov	ax,-8[bp]
24874 65F6           E8         FEFA            call	idiv_u
24875                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
24876 65F9           8846         F5            mov	-$B[bp],al
24877                                           !BCC_EOS
24878                                           ! 3278  write_byte(0x40,0x84, rows-1);
24879                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
24880 65FC           8A46         F5            mov	al,-$B[bp]
24881 65FF           30E4                       xor	ah,ah
24882                                           ! Debug: list unsigned int = ax-1 (used reg = )
24883 6601           48                         dec	ax
24884 6602           50                         push	ax
24885                                           ! Debug: list int = const $84 (used reg = )
24886 6603           B8                   0084  mov	ax,#$84
24887 6606           50                         push	ax
24888                                           ! Debug: list int = const $40 (used reg = )
24889 6607           B8                   0040  mov	ax,*$40
24890 660A           50                         push	ax
24891                                           ! Debug: func () void = write_byte+0 (used reg = )
24892 660B           E8         14B9            call	_write_byte
24893 660E           83C4                   06  add	sp,*6
24894                                           !BCC_EOS
24895                                           ! 3279  cols = read_word(0x40,0x4A);
24896                                           ! Debug: list int = const $4A (used reg = )
24897 6611           B8                   004A  mov	ax,*$4A
24898 6614           50                         push	ax
24899                                           ! Debug: list int = const $40 (used reg = )
24900 6615           B8                   0040  mov	ax,*$40
24901 6618           50                         push	ax
24902                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24903 6619           E8         1498            call	_read_word
24904 661C           83C4                   04  add	sp,*4
24905                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
24906 661F           8946         FC            mov	-4[bp],ax
24907                                           !BCC_EOS
24908                                           ! 3280  write_word(0x40,0x4C, rows * cols * 2);
24909                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
24910 6622           8A46         F5            mov	al,-$B[bp]
24911 6625           30E4                       xor	ah,ah
24912 6627           8B4E         FC            mov	cx,-4[bp]
24913 662A           F7E9                       imul	cx
24914                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24915 662C           D1E0                       shl	ax,*1
24916                                           ! Debug: list unsigned int = ax+0 (used reg = )
24917 662E           50                         push	ax
24918                                           ! Debug: list int = const $4C (used reg = )
24919 662F           B8                   004C  mov	ax,*$4C
24920 6632           50                         push	ax
24921                                           ! Debug: list int = const $40 (used reg = )
24922 6633           B8                   0040  mov	ax,*$40
24923 6636           50                         push	ax
24924                                           ! Debug: func () void = write_word+0 (used reg = )
24925 6637           E8         14A5            call	_write_word
24926 663A           83C4                   06  add	sp,*6
24927                                           !BCC_EOS
24928                                           ! 3281 }
24929 663D           89EC                       mov	sp,bp
24930 663F           5D                         pop	bp
24931 6640           C3                         ret
24932                                           ! 3282 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
24933                                           ! Register BX used in function set_scan_lines
24934                       00006641            _biosfn_load_text_user_pat:
24935                                           !BCC_EOS
24936                                           !BCC_EOS
24937                                           !BCC_EOS
24938                                           !BCC_EOS
24939                                           !BCC_EOS
24940                                           !BCC_EOS
24941                                           !BCC_EOS
24942                                           ! 3283 {
24943                                           ! 3284  Bit16u blockaddr,dest,i,src;
24944                                           !BCC_EOS
24945                                           ! 3285  get_font_access();
24946 6641           55                         push	bp
24947 6642           89E5                       mov	bp,sp
24948 6644           83C4                   F8  add	sp,*-8
24949                                           ! Debug: func () void = get_font_access+0 (used reg = )
24950 6647           E8         FE57            call	_get_font_access
24951                                           !BCC_EOS
24952                                           ! 3286  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
24953                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
24954 664A           8A46         0E            mov	al,$E[bp]
24955 664D           24                     04  and	al,*4
24956                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
24957 664F           30E4                       xor	ah,ah
24958 6651           88C4                       mov	ah,al
24959 6653           30C0                       xor	al,al
24960 6655           B1                     03  mov	cl,*3
24961 6657           D3E0                       shl	ax,cl
24962 6659           50                         push	ax
24963                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
24964 665A           8A46         0E            mov	al,$E[bp]
24965 665D           24                     03  and	al,*3
24966                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
24967 665F           30E4                       xor	ah,ah
24968 6661           88C4                       mov	ah,al
24969 6663           30C0                       xor	al,al
24970 6665           B1                     06  mov	cl,*6
24971 6667           D3E0                       shl	ax,cl
24972                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24973 6669           0346         F6            add	ax,-$A[bp]
24974 666C           44                         inc	sp
24975 666D           44                         inc	sp
24976                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
24977 666E           8946         FE            mov	-2[bp],ax
24978                                           !BCC_EOS
24979                                           ! 3287  for(i=0;i<CX;i++)
24980                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
24981 6671           31C0                       xor	ax,ax
24982 6673           8946         FA            mov	-6[bp],ax
24983                                           !BCC_EOS
24984                                           !BCC_EOS
24985                                           ! 3288   {
24986 6676           EB           44            jmp .201
24987                       00006678            .202:
24988                                           ! 3289    src = BP + i * BH;
24989                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
24990 6678           8A46         10            mov	al,$10[bp]
24991 667B           30E4                       xor	ah,ah
24992 667D           89C3                       mov	bx,ax
24993 667F           8B46         FA            mov	ax,-6[bp]
24994 6682           89D9                       mov	cx,bx
24995 6684           F7E9                       imul	cx
24996                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
24997                                           ! Debug: expression subtree swapping
24998 6686           0346         08            add	ax,8[bp]
24999                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25000 6689           8946         F8            mov	-8[bp],ax
25001                                           !BCC_EOS
25002                                           ! 3290    dest = blockaddr + (DX + i) * 32;
25003                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25004 668C           8B46         0C            mov	ax,$C[bp]
25005 668F           0346         FA            add	ax,-6[bp]
25006                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25007 6692           B1                     05  mov	cl,*5
25008 6694           D3E0                       shl	ax,cl
25009                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25010                                           ! Debug: expression subtree swapping
25011 6696           0346         FE            add	ax,-2[bp]
25012                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25013 6699           8946         FC            mov	-4[bp],ax
25014                                           !BCC_EOS
25015                                           ! 3291    memcpyb(0xA000, dest, ES, src, BH);
25016                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25017 669C           8A46         10            mov	al,$10[bp]
25018 669F           30E4                       xor	ah,ah
25019 66A1           50                         push	ax
25020                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25021 66A2           FF76         F8            push	-8[bp]
25022                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25023 66A5           FF76         06            push	6[bp]
25024                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25025 66A8           FF76         FC            push	-4[bp]
25026                                           ! Debug: list unsigned int = const $A000 (used reg = )
25027 66AB           B8                   A000  mov	ax,#$A000
25028 66AE           50                         push	ax
25029                                           ! Debug: func () void = memcpyb+0 (used reg = )
25030 66AF           E8         138F            call	_memcpyb
25031 66B2           83C4                   0A  add	sp,*$A
25032                                           !BCC_EOS
25033                                           ! 3292   }
25034                                           ! 3293  release_font_access();
25035                       000066B5            .200:
25036                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25037 66B5           8B46         FA            mov	ax,-6[bp]
25038 66B8           40                         inc	ax
25039 66B9           8946         FA            mov	-6[bp],ax
25040                       000066BC            .201:
25041                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25042 66BC           8B46         FA            mov	ax,-6[bp]
25043 66BF           3B46         0A            cmp	ax,$A[bp]
25044 66C2           72           B4            jb 	.202
25045                       000066C4            .203:
25046                       000066C4            .1FF:
25047                                           ! Debug: func () void = release_font_access+0 (used reg = )
25048 66C4           E8         FDFD            call	_release_font_access
25049                                           !BCC_EOS
25050                                           ! 3294  if(AL>=0x10)
25051                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25052 66C7           8A46         04            mov	al,4[bp]
25053 66CA           3C                     10  cmp	al,*$10
25054 66CC           72           0B            jb  	.204
25055                       000066CE            .205:
25056                                           ! 3295   {
25057                                           ! 3296    set_scan_lines(BH);
25058                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25059 66CE           8A46         10            mov	al,$10[bp]
25060 66D1           30E4                       xor	ah,ah
25061 66D3           50                         push	ax
25062                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25063 66D4           E8         FE21            call	_set_scan_lines
25064 66D7           44                         inc	sp
25065 66D8           44                         inc	sp
25066                                           !BCC_EOS
25067                                           ! 3297   }
25068                                           ! 3298 }
25069                       000066D9            .204:
25070 66D9           89EC                       mov	sp,bp
25071 66DB           5D                         pop	bp
25072 66DC           C3                         ret
25073                                           ! 3299 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25074                                           ! Register BX used in function biosfn_load_text_user_pat
25075                       000066DD            _biosfn_load_text_8_14_pat:
25076                                           !BCC_EOS
25077                                           !BCC_EOS
25078                                           ! 3300 {
25079                                           ! 3301  Bit16u blockaddr,dest,i,src;
25080                                           !BCC_EOS
25081                                           ! 3302  get_font_access();
25082 66DD           55                         push	bp
25083 66DE           89E5                       mov	bp,sp
25084 66E0           83C4                   F8  add	sp,*-8
25085                                           ! Debug: func () void = get_font_access+0 (used reg = )
25086 66E3           E8         FDBB            call	_get_font_access
25087                                           !BCC_EOS
25088                                           ! 3303  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25089                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25090 66E6           8A46         06            mov	al,6[bp]
25091 66E9           24                     04  and	al,*4
25092                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25093 66EB           30E4                       xor	ah,ah
25094 66ED           88C4                       mov	ah,al
25095 66EF           30C0                       xor	al,al
25096 66F1           B1                     03  mov	cl,*3
25097 66F3           D3E0                       shl	ax,cl
25098 66F5           50                         push	ax
25099                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25100 66F6           8A46         06            mov	al,6[bp]
25101 66F9           24                     03  and	al,*3
25102                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25103 66FB           30E4                       xor	ah,ah
25104 66FD           88C4                       mov	ah,al
25105 66FF           30C0                       xor	al,al
25106 6701           B1                     06  mov	cl,*6
25107 6703           D3E0                       shl	ax,cl
25108                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25109 6705           0346         F6            add	ax,-$A[bp]
25110 6708           44                         inc	sp
25111 6709           44                         inc	sp
25112                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25113 670A           8946         FE            mov	-2[bp],ax
25114                                           !BCC_EOS
25115                                           ! 3304  for(i=0;i<0x100;i++)
25116                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25117 670D           31C0                       xor	ax,ax
25118 670F           8946         FA            mov	-6[bp],ax
25119                                           !BCC_EOS
25120                                           !BCC_EOS
25121                                           ! 3305   {
25122 6712           EB           41            jmp .208
25123                       00006714            .209:
25124                                           ! 3306    src = i * 14;
25125                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25126 6714           8B46         FA            mov	ax,-6[bp]
25127 6717           89C2                       mov	dx,ax
25128 6719           B1                     03  mov	cl,*3
25129 671B           D3E0                       shl	ax,cl
25130 671D           29D0                       sub	ax,dx
25131 671F           D1E0                       shl	ax,*1
25132                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25133 6721           8946         F8            mov	-8[bp],ax
25134                                           !BCC_EOS
25135                                           ! 3307    dest = blockaddr + i * 32;
25136                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25137 6724           8B46         FA            mov	ax,-6[bp]
25138 6727           B1                     05  mov	cl,*5
25139 6729           D3E0                       shl	ax,cl
25140                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25141                                           ! Debug: expression subtree swapping
25142 672B           0346         FE            add	ax,-2[bp]
25143                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25144 672E           8946         FC            mov	-4[bp],ax
25145                                           !BCC_EOS
25146                                           ! 3308    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25147                                           ! Debug: list int = const $E (used reg = )
25148 6731           B8                   000E  mov	ax,*$E
25149 6734           50                         push	ax
25150                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25151 6735           8B5E         F8            mov	bx,-8[bp]
25152                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25153                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25154 6738           81C3                 173E  add	bx,#_vgafont14
25155 673C           53                         push	bx
25156                                           ! Debug: list unsigned int = const $C000 (used reg = )
25157 673D           B8                   C000  mov	ax,#$C000
25158 6740           50                         push	ax
25159                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25160 6741           FF76         FC            push	-4[bp]
25161                                           ! Debug: list unsigned int = const $A000 (used reg = )
25162 6744           B8                   A000  mov	ax,#$A000
25163 6747           50                         push	ax
25164                                           ! Debug: func () void = memcpyb+0 (used reg = )
25165 6748           E8         12F6            call	_memcpyb
25166 674B           83C4                   0A  add	sp,*$A
25167                                           !BCC_EOS
25168                                           ! 3309   }
25169                                           ! 3310  release_font_access();
25170                       0000674E            .207:
25171                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25172 674E           8B46         FA            mov	ax,-6[bp]
25173 6751           40                         inc	ax
25174 6752           8946         FA            mov	-6[bp],ax
25175                       00006755            .208:
25176                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25177 6755           8B46         FA            mov	ax,-6[bp]
25178 6758           3D                   0100  cmp	ax,#$100
25179 675B           72           B7            jb 	.209
25180                       0000675D            .20A:
25181                       0000675D            .206:
25182                                           ! Debug: func () void = release_font_access+0 (used reg = )
25183 675D           E8         FD64            call	_release_font_access
25184                                           !BCC_EOS
25185                                           ! 3311  if(AL>=0x10)
25186                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25187 6760           8A46         04            mov	al,4[bp]
25188 6763           3C                     10  cmp	al,*$10
25189 6765           72           09            jb  	.20B
25190                       00006767            .20C:
25191                                           ! 3312   {
25192                                           ! 3313    set_scan_lines(14);
25193                                           ! Debug: list int = const $E (used reg = )
25194 6767           B8                   000E  mov	ax,*$E
25195 676A           50                         push	ax
25196                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25197 676B           E8         FD8A            call	_set_scan_lines
25198 676E           44                         inc	sp
25199 676F           44                         inc	sp
25200                                           !BCC_EOS
25201                                           ! 3314   }
25202                                           ! 3315 }
25203                       00006770            .20B:
25204 6770           89EC                       mov	sp,bp
25205 6772           5D                         pop	bp
25206 6773           C3                         ret
25207                                           ! 3316 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u
25208                                           ! Register BX used in function biosfn_load_text_8_14_pat
25209                       00006774            _biosfn_load_text_8_8_pat:
25210                                           !BCC_EOS
25211                                           ! 3316  BL;
25212                                           !BCC_EOS
25213                                           ! 3317 {
25214                                           ! 3318  Bit16u blockaddr,dest,i,src;
25215                                           !BCC_EOS
25216                                           ! 3319  get_font_access();
25217 6774           55                         push	bp
25218 6775           89E5                       mov	bp,sp
25219 6777           83C4                   F8  add	sp,*-8
25220                                           ! Debug: func () void = get_font_access+0 (used reg = )
25221 677A           E8         FD24            call	_get_font_access
25222                                           !BCC_EOS
25223                                           ! 3320  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25224                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25225 677D           8A46         06            mov	al,6[bp]
25226 6780           24                     04  and	al,*4
25227                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25228 6782           30E4                       xor	ah,ah
25229 6784           88C4                       mov	ah,al
25230 6786           30C0                       xor	al,al
25231 6788           B1                     03  mov	cl,*3
25232 678A           D3E0                       shl	ax,cl
25233 678C           50                         push	ax
25234                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25235 678D           8A46         06            mov	al,6[bp]
25236 6790           24                     03  and	al,*3
25237                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25238 6792           30E4                       xor	ah,ah
25239 6794           88C4                       mov	ah,al
25240 6796           30C0                       xor	al,al
25241 6798           B1                     06  mov	cl,*6
25242 679A           D3E0                       shl	ax,cl
25243                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25244 679C           0346         F6            add	ax,-$A[bp]
25245 679F           44                         inc	sp
25246 67A0           44                         inc	sp
25247                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25248 67A1           8946         FE            mov	-2[bp],ax
25249                                           !BCC_EOS
25250                                           ! 3321  for(i=0;i<0x100;i++)
25251                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25252 67A4           31C0                       xor	ax,ax
25253 67A6           8946         FA            mov	-6[bp],ax
25254                                           !BCC_EOS
25255                                           !BCC_EOS
25256                                           ! 3322   {
25257 67A9           EB           3B            jmp .20F
25258                       000067AB            .210:
25259                                           ! 3323    src = i * 8;
25260                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25261 67AB           8B46         FA            mov	ax,-6[bp]
25262 67AE           B1                     03  mov	cl,*3
25263 67B0           D3E0                       shl	ax,cl
25264                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25265 67B2           8946         F8            mov	-8[bp],ax
25266                                           !BCC_EOS
25267                                           ! 3324    dest = blockaddr + i * 32;
25268                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25269 67B5           8B46         FA            mov	ax,-6[bp]
25270 67B8           B1                     05  mov	cl,*5
25271 67BA           D3E0                       shl	ax,cl
25272                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25273                                           ! Debug: expression subtree swapping
25274 67BC           0346         FE            add	ax,-2[bp]
25275                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25276 67BF           8946         FC            mov	-4[bp],ax
25277                                           !BCC_EOS
25278                                           ! 3325    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25279                                           ! Debug: list int = const 8 (used reg = )
25280 67C2           B8                   0008  mov	ax,*8
25281 67C5           50                         push	ax
25282                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25283 67C6           8B5E         F8            mov	bx,-8[bp]
25284                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25285                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25286 67C9           81C3                 0F3E  add	bx,#_vgafont8
25287 67CD           53                         push	bx
25288                                           ! Debug: list unsigned int = const $C000 (used reg = )
25289 67CE           B8                   C000  mov	ax,#$C000
25290 67D1           50                         push	ax
25291                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25292 67D2           FF76         FC            push	-4[bp]
25293                                           ! Debug: list unsigned int = const $A000 (used reg = )
25294 67D5           B8                   A000  mov	ax,#$A000
25295 67D8           50                         push	ax
25296                                           ! Debug: func () void = memcpyb+0 (used reg = )
25297 67D9           E8         1265            call	_memcpyb
25298 67DC           83C4                   0A  add	sp,*$A
25299                                           !BCC_EOS
25300                                           ! 3326   }
25301                                           ! 3327  release_font_access();
25302                       000067DF            .20E:
25303                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25304 67DF           8B46         FA            mov	ax,-6[bp]
25305 67E2           40                         inc	ax
25306 67E3           8946         FA            mov	-6[bp],ax
25307                       000067E6            .20F:
25308                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25309 67E6           8B46         FA            mov	ax,-6[bp]
25310 67E9           3D                   0100  cmp	ax,#$100
25311 67EC           72           BD            jb 	.210
25312                       000067EE            .211:
25313                       000067EE            .20D:
25314                                           ! Debug: func () void = release_font_access+0 (used reg = )
25315 67EE           E8         FCD3            call	_release_font_access
25316                                           !BCC_EOS
25317                                           ! 3328  if(AL>=0x10)
25318                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25319 67F1           8A46         04            mov	al,4[bp]
25320 67F4           3C                     10  cmp	al,*$10
25321 67F6           72           09            jb  	.212
25322                       000067F8            .213:
25323                                           ! 3329   {
25324                                           ! 3330    set_scan_lines(8);
25325                                           ! Debug: list int = const 8 (used reg = )
25326 67F8           B8                   0008  mov	ax,*8
25327 67FB           50                         push	ax
25328                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25329 67FC           E8         FCF9            call	_set_scan_lines
25330 67FF           44                         inc	sp
25331 6800           44                         inc	sp
25332                                           !BCC_EOS
25333                                           ! 3331   }
25334                                           ! 3332 }
25335                       00006801            .212:
25336 6801           89EC                       mov	sp,bp
25337 6803           5D                         pop	bp
25338 6804           C3                         ret
25339                                           ! 3333 #asm
25340                                           !BCC_ASM
25341                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25342                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25343                       00006805            biosfn_set_text_block_specifier:
25344 6805           50                           push ax
25345 6806           52                           push dx
25346 6807           BA                   03C4    mov dx, # 0x3c4
25347 680A           88DC                         mov ah, bl
25348 680C           B0                     03    mov al, #0x03
25349 680E           EF                           out dx, ax
25350 680F           5A                           pop dx
25351 6810           58                           pop ax
25352 6811           C3                           ret
25353                                           ! 3344 endasm
25354                                           !BCC_ENDASM
25355                                           ! 3345 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25356                                           ! Register BX used in function biosfn_load_text_8_8_pat
25357                       00006812            _biosfn_load_text_8_16_pat:
25358                                           !BCC_EOS
25359                                           !BCC_EOS
25360                                           ! 3346 {
25361                                           ! 3347  Bit16u blockaddr,dest,i,src;
25362                                           !BCC_EOS
25363                                           ! 3348  get_font_access();
25364 6812           55                         push	bp
25365 6813           89E5                       mov	bp,sp
25366 6815           83C4                   F8  add	sp,*-8
25367                                           ! Debug: func () void = get_font_access+0 (used reg = )
25368 6818           E8         FC86            call	_get_font_access
25369                                           !BCC_EOS
25370                                           ! 3349  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25371                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25372 681B           8A46         06            mov	al,6[bp]
25373 681E           24                     04  and	al,*4
25374                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25375 6820           30E4                       xor	ah,ah
25376 6822           88C4                       mov	ah,al
25377 6824           30C0                       xor	al,al
25378 6826           B1                     03  mov	cl,*3
25379 6828           D3E0                       shl	ax,cl
25380 682A           50                         push	ax
25381                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25382 682B           8A46         06            mov	al,6[bp]
25383 682E           24                     03  and	al,*3
25384                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25385 6830           30E4                       xor	ah,ah
25386 6832           88C4                       mov	ah,al
25387 6834           30C0                       xor	al,al
25388 6836           B1                     06  mov	cl,*6
25389 6838           D3E0                       shl	ax,cl
25390                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25391 683A           0346         F6            add	ax,-$A[bp]
25392 683D           44                         inc	sp
25393 683E           44                         inc	sp
25394                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25395 683F           8946         FE            mov	-2[bp],ax
25396                                           !BCC_EOS
25397                                           ! 3350  for(i=0;i<0x100;i++)
25398                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25399 6842           31C0                       xor	ax,ax
25400 6844           8946         FA            mov	-6[bp],ax
25401                                           !BCC_EOS
25402                                           !BCC_EOS
25403                                           ! 3351   {
25404 6847           EB           3B            jmp .216
25405                       00006849            .217:
25406                                           ! 3352    src = i * 16;
25407                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25408 6849           8B46         FA            mov	ax,-6[bp]
25409 684C           B1                     04  mov	cl,*4
25410 684E           D3E0                       shl	ax,cl
25411                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25412 6850           8946         F8            mov	-8[bp],ax
25413                                           !BCC_EOS
25414                                           ! 3353    dest = blockaddr + i * 32;
25415                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25416 6853           8B46         FA            mov	ax,-6[bp]
25417 6856           B1                     05  mov	cl,*5
25418 6858           D3E0                       shl	ax,cl
25419                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25420                                           ! Debug: expression subtree swapping
25421 685A           0346         FE            add	ax,-2[bp]
25422                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25423 685D           8946         FC            mov	-4[bp],ax
25424                                           !BCC_EOS
25425                                           ! 3354    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25426                                           ! Debug: list int = const $10 (used reg = )
25427 6860           B8                   0010  mov	ax,*$10
25428 6863           50                         push	ax
25429                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25430 6864           8B5E         F8            mov	bx,-8[bp]
25431                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25432                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25433 6867           81C3                 253E  add	bx,#_vgafont16
25434 686B           53                         push	bx
25435                                           ! Debug: list unsigned int = const $C000 (used reg = )
25436 686C           B8                   C000  mov	ax,#$C000
25437 686F           50                         push	ax
25438                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25439 6870           FF76         FC            push	-4[bp]
25440                                           ! Debug: list unsigned int = const $A000 (used reg = )
25441 6873           B8                   A000  mov	ax,#$A000
25442 6876           50                         push	ax
25443                                           ! Debug: func () void = memcpyb+0 (used reg = )
25444 6877           E8         11C7            call	_memcpyb
25445 687A           83C4                   0A  add	sp,*$A
25446                                           !BCC_EOS
25447                                           ! 3355   }
25448                                           ! 3356  release_font_access();
25449                       0000687D            .215:
25450                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25451 687D           8B46         FA            mov	ax,-6[bp]
25452 6880           40                         inc	ax
25453 6881           8946         FA            mov	-6[bp],ax
25454                       00006884            .216:
25455                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25456 6884           8B46         FA            mov	ax,-6[bp]
25457 6887           3D                   0100  cmp	ax,#$100
25458 688A           72           BD            jb 	.217
25459                       0000688C            .218:
25460                       0000688C            .214:
25461                                           ! Debug: func () void = release_font_access+0 (used reg = )
25462 688C           E8         FC35            call	_release_font_access
25463                                           !BCC_EOS
25464                                           ! 3357  if(AL>=0x10)
25465                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25466 688F           8A46         04            mov	al,4[bp]
25467 6892           3C                     10  cmp	al,*$10
25468 6894           72           09            jb  	.219
25469                       00006896            .21A:
25470                                           ! 3358   {
25471                                           ! 3359    set_scan_lines(16);
25472                                           ! Debug: list int = const $10 (used reg = )
25473 6896           B8                   0010  mov	ax,*$10
25474 6899           50                         push	ax
25475                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25476 689A           E8         FC5B            call	_set_scan_lines
25477 689D           44                         inc	sp
25478 689E           44                         inc	sp
25479                                           !BCC_EOS
25480                                           ! 3360   }
25481                                           ! 3361 }
25482                       0000689F            .219:
25483 689F           89EC                       mov	sp,bp
25484 68A1           5D                         pop	bp
25485 68A2           C3                         ret
25486                                           ! 3362 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
25487                                           ! Register BX used in function biosfn_load_text_8_16_pat
25488                       000068A3            _biosfn_load_gfx_8_8_chars:
25489                                           !BCC_EOS
25490                                           !BCC_EOS
25491                                           ! 3363 {
25492                                           ! 3364 }
25493 68A3           C3                         ret
25494                                           ! 3365 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
25495                       000068A4            _biosfn_load_gfx_user_chars:
25496                                           !BCC_EOS
25497                                           !BCC_EOS
25498                                           !BCC_EOS
25499                                           !BCC_EOS
25500                                           !BCC_EOS
25501                                           ! 3366 {
25502                                           ! 3367 }
25503 68A4           C3                         ret
25504                                           ! 3368 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
25505                       000068A5            _biosfn_load_gfx_8_14_chars:
25506                                           !BCC_EOS
25507                                           ! 3369 {
25508                                           ! 3370 }
25509 68A5           C3                         ret
25510                                           ! 3371 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
25511                       000068A6            _biosfn_load_gfx_8_8_dd_chars:
25512                                           !BCC_EOS
25513                                           ! 3372 {
25514                                           ! 3373 }
25515 68A6           C3                         ret
25516                                           ! 3374 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
25517                       000068A7            _biosfn_load_gfx_8_16_chars:
25518                                           !BCC_EOS
25519                                           ! 3375 {
25520                                           ! 3376 }
25521 68A7           C3                         ret
25522                                           ! 3377 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
25523                                           ! 3378 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
25524                       000068A8            _biosfn_get_font_info:
25525                                           !BCC_EOS
25526                                           !BCC_EOS
25527                                           !BCC_EOS
25528                                           !BCC_EOS
25529                                           !BCC_EOS
25530                                           ! 3379 {Bit16u ss=get_SS();
25531 68A8           55                         push	bp
25532 68A9           89E5                       mov	bp,sp
25533 68AB           4C                         dec	sp
25534 68AC           4C                         dec	sp
25535                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
25536 68AD           E8         127D            call	_get_SS
25537                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
25538 68B0           8946         FE            mov	-2[bp],ax
25539                                           !BCC_EOS
25540                                           ! 3380  switch(BH)
25541 68B3           8A46         04            mov	al,4[bp]
25542                                           ! 3381   {case 0x00:
25543 68B6           E9         0143            br 	.21D
25544                                           ! 3382     write_word(ss,ES,read_word(0x00,0x1f*4));
25545                       000068B9            .21E:
25546                                           ! Debug: list int = const $7C (used reg = )
25547 68B9           B8                   007C  mov	ax,*$7C
25548 68BC           50                         push	ax
25549                                           ! Debug: list int = const 0 (used reg = )
25550 68BD           31C0                       xor	ax,ax
25551 68BF           50                         push	ax
25552                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25553 68C0           E8         11F1            call	_read_word
25554 68C3           83C4                   04  add	sp,*4
25555                                           ! Debug: list unsigned short = ax+0 (used reg = )
25556 68C6           50                         push	ax
25557                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25558 68C7           FF76         06            push	6[bp]
25559                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25560 68CA           FF76         FE            push	-2[bp]
25561                                           ! Debug: func () void = write_word+0 (used reg = )
25562 68CD           E8         120F            call	_write_word
25563 68D0           83C4                   06  add	sp,*6
25564                                           !BCC_EOS
25565                                           ! 3383     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
25566                                           ! Debug: list int = const $7E (used reg = )
25567 68D3           B8                   007E  mov	ax,*$7E
25568 68D6           50                         push	ax
25569                                           ! Debug: list int = const 0 (used reg = )
25570 68D7           31C0                       xor	ax,ax
25571 68D9           50                         push	ax
25572                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25573 68DA           E8         11D7            call	_read_word
25574 68DD           83C4                   04  add	sp,*4
25575                                           ! Debug: list unsigned short = ax+0 (used reg = )
25576 68E0           50                         push	ax
25577                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25578 68E1           FF76         08            push	8[bp]
25579                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25580 68E4           FF76         FE            push	-2[bp]
25581                                           ! Debug: func () void = write_word+0 (used reg = )
25582 68E7           E8         11F5            call	_write_word
25583 68EA           83C4                   06  add	sp,*6
25584                                           !BCC_EOS
25585                                           ! 3384     break;
25586 68ED           E9         0131            br 	.21B
25587                                           !BCC_EOS
25588                                           ! 3385    case 0x01:
25589                                           ! 3386     write_word(ss,ES,read_word(0x00,0x43*4));
25590                       000068F0            .21F:
25591                                           ! Debug: list int = const $10C (used reg = )
25592 68F0           B8                   010C  mov	ax,#$10C
25593 68F3           50                         push	ax
25594                                           ! Debug: list int = const 0 (used reg = )
25595 68F4           31C0                       xor	ax,ax
25596 68F6           50                         push	ax
25597                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25598 68F7           E8         11BA            call	_read_word
25599 68FA           83C4                   04  add	sp,*4
25600                                           ! Debug: list unsigned short = ax+0 (used reg = )
25601 68FD           50                         push	ax
25602                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25603 68FE           FF76         06            push	6[bp]
25604                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25605 6901           FF76         FE            push	-2[bp]
25606                                           ! Debug: func () void = write_word+0 (used reg = )
25607 6904           E8         11D8            call	_write_word
25608 6907           83C4                   06  add	sp,*6
25609                                           !BCC_EOS
25610                                           ! 3387     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
25611                                           ! Debug: list int = const $10E (used reg = )
25612 690A           B8                   010E  mov	ax,#$10E
25613 690D           50                         push	ax
25614                                           ! Debug: list int = const 0 (used reg = )
25615 690E           31C0                       xor	ax,ax
25616 6910           50                         push	ax
25617                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25618 6911           E8         11A0            call	_read_word
25619 6914           83C4                   04  add	sp,*4
25620                                           ! Debug: list unsigned short = ax+0 (used reg = )
25621 6917           50                         push	ax
25622                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25623 6918           FF76         08            push	8[bp]
25624                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25625 691B           FF76         FE            push	-2[bp]
25626                                           ! Debug: func () void = write_word+0 (used reg = )
25627 691E           E8         11BE            call	_write_word
25628 6921           83C4                   06  add	sp,*6
25629                                           !BCC_EOS
25630                                           ! 3388     break;
25631 6924           E9         00FA            br 	.21B
25632                                           !BCC_EOS
25633                                           ! 3389    case 0x02:
25634                                           ! 3390     write_word(ss,ES,0xC000);
25635                       00006927            .220:
25636                                           ! Debug: list unsigned int = const $C000 (used reg = )
25637 6927           B8                   C000  mov	ax,#$C000
25638 692A           50                         push	ax
25639                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25640 692B           FF76         06            push	6[bp]
25641                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25642 692E           FF76         FE            push	-2[bp]
25643                                           ! Debug: func () void = write_word+0 (used reg = )
25644 6931           E8         11AB            call	_write_word
25645 6934           83C4                   06  add	sp,*6
25646                                           !BCC_EOS
25647                                           ! 3391     write_word(ss,BP,vgafont14);
25648                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
25649 6937           BB                   173E  mov	bx,#_vgafont14
25650 693A           53                         push	bx
25651                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25652 693B           FF76         08            push	8[bp]
25653                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25654 693E           FF76         FE            push	-2[bp]
25655                                           ! Debug: func () void = write_word+0 (used reg = )
25656 6941           E8         119B            call	_write_word
25657 6944           83C4                   06  add	sp,*6
25658                                           !BCC_EOS
25659                                           ! 3392     break;
25660 6947           E9         00D7            br 	.21B
25661                                           !BCC_EOS
25662                                           ! 3393    case 0x03:
25663                                           ! 3394     write_word(ss,ES,0xC000);
25664                       0000694A            .221:
25665                                           ! Debug: list unsigned int = const $C000 (used reg = )
25666 694A           B8                   C000  mov	ax,#$C000
25667 694D           50                         push	ax
25668                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25669 694E           FF76         06            push	6[bp]
25670                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25671 6951           FF76         FE            push	-2[bp]
25672                                           ! Debug: func () void = write_word+0 (used reg = )
25673 6954           E8         1188            call	_write_word
25674 6957           83C4                   06  add	sp,*6
25675                                           !BCC_EOS
25676                                           ! 3395     write_word(ss,BP,vgafont8);
25677                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
25678 695A           BB                   0F3E  mov	bx,#_vgafont8
25679 695D           53                         push	bx
25680                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25681 695E           FF76         08            push	8[bp]
25682                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25683 6961           FF76         FE            push	-2[bp]
25684                                           ! Debug: func () void = write_word+0 (used reg = )
25685 6964           E8         1178            call	_write_word
25686 6967           83C4                   06  add	sp,*6
25687                                           !BCC_EOS
25688                                           ! 3396     break;
25689 696A           E9         00B4            br 	.21B
25690                                           !BCC_EOS
25691                                           ! 3397    case 0x04:
25692                                           ! 3398     write_word(ss,ES,0xC000);
25693                       0000696D            .222:
25694                                           ! Debug: list unsigned int = const $C000 (used reg = )
25695 696D           B8                   C000  mov	ax,#$C000
25696 6970           50                         push	ax
25697                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25698 6971           FF76         06            push	6[bp]
25699                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25700 6974           FF76         FE            push	-2[bp]
25701                                           ! Debug: func () void = write_word+0 (used reg = )
25702 6977           E8         1165            call	_write_word
25703 697A           83C4                   06  add	sp,*6
25704                                           !BCC_EOS
25705                                           ! 3399     write_word(ss,BP,vgafont8+128*8);
25706                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
25707 697D           BB                   133E  mov	bx,#_vgafont8+$400
25708 6980           53                         push	bx
25709                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25710 6981           FF76         08            push	8[bp]
25711                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25712 6984           FF76         FE            push	-2[bp]
25713                                           ! Debug: func () void = write_word+0 (used reg = )
25714 6987           E8         1155            call	_write_word
25715 698A           83C4                   06  add	sp,*6
25716                                           !BCC_EOS
25717                                           ! 3400     break;
25718 698D           E9         0091            br 	.21B
25719                                           !BCC_EOS
25720                                           ! 3401    case 0x05:
25721                                           ! 3402     write_word(ss,ES,0xC000);
25722                       00006990            .223:
25723                                           ! Debug: list unsigned int = const $C000 (used reg = )
25724 6990           B8                   C000  mov	ax,#$C000
25725 6993           50                         push	ax
25726                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25727 6994           FF76         06            push	6[bp]
25728                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25729 6997           FF76         FE            push	-2[bp]
25730                                           ! Debug: func () void = write_word+0 (used reg = )
25731 699A           E8         1142            call	_write_word
25732 699D           83C4                   06  add	sp,*6
25733                                           !BCC_EOS
25734                                           ! 3403     write_word(ss,BP,vgafont14alt);
25735                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
25736 69A0           BB                   353E  mov	bx,#_vgafont14alt
25737 69A3           53                         push	bx
25738                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25739 69A4           FF76         08            push	8[bp]
25740                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25741 69A7           FF76         FE            push	-2[bp]
25742                                           ! Debug: func () void = write_word+0 (used reg = )
25743 69AA           E8         1132            call	_write_word
25744 69AD           83C4                   06  add	sp,*6
25745                                           !BCC_EOS
25746                                           ! 3404     break;
25747 69B0           EB           6F            jmp .21B
25748                                           !BCC_EOS
25749                                           ! 3405    case 0x06:
25750                                           ! 3406     write_word(ss,ES,0xC000);
25751                       000069B2            .224:
25752                                           ! Debug: list unsigned int = const $C000 (used reg = )
25753 69B2           B8                   C000  mov	ax,#$C000
25754 69B5           50                         push	ax
25755                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25756 69B6           FF76         06            push	6[bp]
25757                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25758 69B9           FF76         FE            push	-2[bp]
25759                                           ! Debug: func () void = write_word+0 (used reg = )
25760 69BC           E8         1120            call	_write_word
25761 69BF           83C4                   06  add	sp,*6
25762                                           !BCC_EOS
25763                                           ! 3407     write_word(ss,BP,vgafont16);
25764                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
25765 69C2           BB                   253E  mov	bx,#_vgafont16
25766 69C5           53                         push	bx
25767                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25768 69C6           FF76         08            push	8[bp]
25769                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25770 69C9           FF76         FE            push	-2[bp]
25771                                           ! Debug: func () void = write_word+0 (used reg = )
25772 69CC           E8         1110            call	_write_word
25773 69CF           83C4                   06  add	sp,*6
25774                                           !BCC_EOS
25775                                           ! 3408     break;
25776 69D2           EB           4D            jmp .21B
25777                                           !BCC_EOS
25778                                           ! 3409    case 0x07:
25779                                           ! 3410     write_word(ss,
25780                       000069D4            .225:
25781                                           ! 3410 ES,0xC000);
25782                                           ! Debug: list unsigned int = const $C000 (used reg = )
25783 69D4           B8                   C000  mov	ax,#$C000
25784 69D7           50                         push	ax
25785                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25786 69D8           FF76         06            push	6[bp]
25787                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25788 69DB           FF76         FE            push	-2[bp]
25789                                           ! Debug: func () void = write_word+0 (used reg = )
25790 69DE           E8         10FE            call	_write_word
25791 69E1           83C4                   06  add	sp,*6
25792                                           !BCC_EOS
25793                                           ! 3411     write_word(ss,BP,vgafont16alt);
25794                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
25795 69E4           BB                   353F  mov	bx,#_vgafont16alt
25796 69E7           53                         push	bx
25797                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25798 69E8           FF76         08            push	8[bp]
25799                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25800 69EB           FF76         FE            push	-2[bp]
25801                                           ! Debug: func () void = write_word+0 (used reg = )
25802 69EE           E8         10EE            call	_write_word
25803 69F1           83C4                   06  add	sp,*6
25804                                           !BCC_EOS
25805                                           ! 3412     break;
25806 69F4           EB           2B            jmp .21B
25807                                           !BCC_EOS
25808                                           ! 3413    default:
25809                                           ! 3414     return;
25810                       000069F6            .226:
25811 69F6           89EC                       mov	sp,bp
25812 69F8           5D                         pop	bp
25813 69F9           C3                         ret
25814                                           !BCC_EOS
25815                                           ! 3415   }
25816                                           ! 3416  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
25817 69FA           EB           25            jmp .21B
25818                       000069FC            .21D:
25819 69FC           2C                     00  sub	al,*0
25820 69FE           72           F6            jb 	.226
25821 6A00           3C                     07  cmp	al,*7
25822 6A02           77           1B            ja  	.227
25823 6A04           30E4                       xor	ah,ah
25824 6A06           D1E0                       shl	ax,*1
25825 6A08           89C3                       mov	bx,ax
25826 6A0A           2E                         seg	cs
25827 6A0B           FFA7       6A0F            br	.228[bx]
25828                       00006A0F            .228:
25829 6A0F                      68B9            .word	.21E
25830 6A11                      68F0            .word	.21F
25831 6A13                      6927            .word	.220
25832 6A15                      694A            .word	.221
25833 6A17                      696D            .word	.222
25834 6A19                      6990            .word	.223
25835 6A1B                      69B2            .word	.224
25836 6A1D                      69D4            .word	.225
25837                       00006A1F            .227:
25838 6A1F           EB           D5            jmp	.226
25839                       00006A21            .21B:
25840                       FFFFFFFC            ..FFF5	=	-4
25841                                           ! Debug: list int = const $85 (used reg = )
25842 6A21           B8                   0085  mov	ax,#$85
25843 6A24           50                         push	ax
25844                                           ! Debug: list int = const $40 (used reg = )
25845 6A25           B8                   0040  mov	ax,*$40
25846 6A28           50                         push	ax
25847                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
25848 6A29           E8         1075            call	_read_byte
25849 6A2C           83C4                   04  add	sp,*4
25850                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
25851 6A2F           30E4                       xor	ah,ah
25852                                           ! Debug: list unsigned short = ax+0 (used reg = )
25853 6A31           50                         push	ax
25854                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
25855 6A32           FF76         0A            push	$A[bp]
25856                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25857 6A35           FF76         FE            push	-2[bp]
25858                                           ! Debug: func () void = write_word+0 (used reg = )
25859 6A38           E8         10A4            call	_write_word
25860 6A3B           83C4                   06  add	sp,*6
25861                                           !BCC_EOS
25862                                           ! 3417  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
25863                                           ! Debug: list int = const $84 (used reg = )
25864 6A3E           B8                   0084  mov	ax,#$84
25865 6A41           50                         push	ax
25866                                           ! Debug: list int = const $40 (used reg = )
25867 6A42           B8                   0040  mov	ax,*$40
25868 6A45           50                         push	ax
25869                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
25870 6A46           E8         1058            call	_read_byte
25871 6A49           83C4                   04  add	sp,*4
25872                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
25873 6A4C           30E4                       xor	ah,ah
25874                                           ! Debug: list unsigned short = ax+0 (used reg = )
25875 6A4E           50                         push	ax
25876                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
25877 6A4F           FF76         0C            push	$C[bp]
25878                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25879 6A52           FF76         FE            push	-2[bp]
25880                                           ! Debug: func () void = write_word+0 (used reg = )
25881 6A55           E8         1087            call	_write_word
25882 6A58           83C4                   06  add	sp,*6
25883                                           !BCC_EOS
25884                                           ! 3418 }
25885 6A5B           89EC                       mov	sp,bp
25886 6A5D           5D                         pop	bp
25887 6A5E           C3                         ret
25888                                           ! 3419 #asm
25889                                           !BCC_ASM
25890                       00000006            _biosfn_get_font_info.BP	set	6
25891                       00000002            _biosfn_get_font_info.BH	set	2
25892                       00000008            _biosfn_get_font_info.CX	set	8
25893                       0000000A            _biosfn_get_font_info.DX	set	$A
25894                       00000004            _biosfn_get_font_info.ES	set	4
25895                       00006A5F            biosfn_get_ega_info:
25896 6A5F           1E                           push ds
25897 6A60           50                           push ax
25898 6A61           B8                   0040    mov ax, # 0x40
25899 6A64           8ED8                         mov ds, ax
25900 6A66           30ED                         xor ch, ch
25901 6A68           BB                   0088    mov bx, # 0x88
25902 6A6B           8A0F                         mov cl, [bx]
25903 6A6D           80E1                   0F    and cl, #0x0f
25904 6A70           BB                   0063    mov bx, # 0x63
25905 6A73           8B07                         mov ax, [bx]
25906 6A75           BB                   0003    mov bx, #0x0003
25907 6A78           3D                   03B4    cmp ax, # 0x3b4
25908 6A7B           75           02              jne mode_ega_color
25909 6A7D           B7                     01    mov bh, #0x01
25910                       00006A7F            mode_ega_color:
25911 6A7F           58                           pop ax
25912 6A80           1F                           pop ds
25913 6A81           C3                           ret
25914                                           ! 3439 endasm
25915                                           !BCC_ENDASM
25916                                           ! 3440 static void biosfn_alternate_prtsc()
25917                                           ! Register BX used in function biosfn_get_font_info
25918                                           ! 3441 {
25919                       00006A82            _biosfn_alternate_prtsc:
25920                                           ! 3442 }
25921 6A82           C3                         ret
25922                                           ! 3443 #asm
25923                                           !BCC_ASM
25924                       00006A83            biosfn_select_vert_res:
25925                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
25926 6A83           1E                           push ds
25927 6A84           53                           push bx
25928 6A85           52                           push dx
25929 6A86           88C2                         mov dl, al
25930 6A88           B8                   0040    mov ax, # 0x40
25931 6A8B           8ED8                         mov ds, ax
25932 6A8D           BB                   0089    mov bx, # 0x89
25933 6A90           8A07                         mov al, [bx]
25934 6A92           BB                   0088    mov bx, # 0x88
25935 6A95           8A27                         mov ah, [bx]
25936 6A97           80FA                   01    cmp dl, #0x01
25937 6A9A           74           15              je vert_res_350
25938 6A9C           72           1D              jb vert_res_200
25939 6A9E           80FA                   02    cmp dl, #0x02
25940 6AA1           74           02              je vert_res_400
25941 6AA3           EB           2A              jmp set_retcode
25942                       00006AA5            vert_res_400:
25943                                             ; reset modeset ctl bit 7 and set bit 4
25944                                             ; set switches bit 3-0 to 0x09
25945 6AA5           24                     7F    and al, #0x7f
25946 6AA7           0C                     10    or al, #0x10
25947 6AA9           80E4                   F0    and ah, #0xf0
25948 6AAC           80CC                   09    or ah, #0x09
25949 6AAF           75           14              jnz set_vert_res
25950                       00006AB1            vert_res_350:
25951                                             ; reset modeset ctl bit 7 and bit 4
25952                                             ; set switches bit 3-0 to 0x09
25953 6AB1           24                     6F    and al, #0x6f
25954 6AB3           80E4                   F0    and ah, #0xf0
25955 6AB6           80CC                   09    or ah, #0x09
25956 6AB9           75           0A              jnz set_vert_res
25957                       00006ABB            vert_res_200:
25958                                             ; set modeset ctl bit 7 and reset bit 4
25959                                             ; set switches bit 3-0 to 0x08
25960 6ABB           24                     EF    and al, #0xef
25961 6ABD           0C                     80    or al, #0x80
25962 6ABF           80E4                   F0    and ah, #0xf0
25963 6AC2           80CC                   08    or ah, #0x08
25964                       00006AC5            set_vert_res:
25965 6AC5           BB                   0089    mov bx, # 0x89
25966 6AC8           8807                         mov [bx], al
25967 6ACA           BB                   0088    mov bx, # 0x88
25968 6ACD           8827                         mov [bx], ah
25969                       00006ACF            set_retcode:
25970 6ACF           B8                   1212    mov ax, #0x1212
25971 6AD2           5A                           pop dx
25972 6AD3           5B                           pop bx
25973 6AD4           1F                           pop ds
25974 6AD5           C3                           ret
25975                       00006AD6            biosfn_enable_default_palette_loading:
25976 6AD6           1E                           push ds
25977 6AD7           53                           push bx
25978 6AD8           52                           push dx
25979 6AD9           88C2                         mov dl, al
25980 6ADB           80E2                   01    and dl, #0x01
25981 6ADE           C0E2                   03    shl dl, 3
25982 6AE1           B8                   0040    mov ax, # 0x40
25983 6AE4           8ED8                         mov ds, ax
25984 6AE6           BB                   0089    mov bx, # 0x89
25985 6AE9           8A07                         mov al, [bx]
25986 6AEB           24                     F7    and al, #0xf7
25987 6AED           08D0                         or al, dl
25988 6AEF           8807                         mov [bx], al
25989 6AF1           B8                   1212    mov ax, #0x1212
25990 6AF4           5A                           pop dx
25991 6AF5           5B                           pop bx
25992 6AF6           1F                           pop ds
25993 6AF7           C3                           ret
25994                       00006AF8            biosfn_enable_video_addressing:
25995 6AF8           53                           push bx
25996 6AF9           52                           push dx
25997 6AFA           88C3                         mov bl, al
25998 6AFC           80E3                   01    and bl, #0x01
25999 6AFF           80F3                   01    xor bl, #0x01
26000 6B02           D0E3                         shl bl, 1
26001 6B04           BA                   03CC    mov dx, # 0x3cc
26002 6B07           EC                           in al, dx
26003 6B08           24                     FD    and al, #0xfd
26004 6B0A           08D8                         or al, bl
26005 6B0C           BA                   03C2    mov dx, # 0x3c2
26006 6B0F           EE                           out dx, al
26007 6B10           B8                   1212    mov ax, #0x1212
26008 6B13           5A                           pop dx
26009 6B14           5B                           pop bx
26010 6B15           C3                           ret
26011                       00006B16            biosfn_enable_grayscale_summing:
26012 6B16           1E                           push ds
26013 6B17           53                           push bx
26014 6B18           52                           push dx
26015 6B19           88C2                         mov dl, al
26016 6B1B           80E2                   01    and dl, #0x01
26017 6B1E           80F2                   01    xor dl, #0x01
26018 6B21           D0E2                         shl dl, 1
26019 6B23           B8                   0040    mov ax, # 0x40
26020 6B26           8ED8                         mov ds, ax
26021 6B28           BB                   0089    mov bx, # 0x89
26022 6B2B           8A07                         mov al, [bx]
26023 6B2D           24                     FD    and al, #0xfd
26024 6B2F           08D0                         or al, dl
26025 6B31           8807                         mov [bx], al
26026 6B33           B8                   1212    mov ax, #0x1212
26027 6B36           5A                           pop dx
26028 6B37           5B                           pop bx
26029 6B38           1F                           pop ds
26030 6B39           C3                           ret
26031                       00006B3A            biosfn_enable_cursor_emulation:
26032 6B3A           1E                           push ds
26033 6B3B           53                           push bx
26034 6B3C           52                           push dx
26035 6B3D           88C2                         mov dl, al
26036 6B3F           80E2                   01    and dl, #0x01
26037 6B42           80F2                   01    xor dl, #0x01
26038 6B45           B8                   0040    mov ax, # 0x40
26039 6B48           8ED8                         mov ds, ax
26040 6B4A           BB                   0089    mov bx, # 0x89
26041 6B4D           8A07                         mov al, [bx]
26042 6B4F           24                     FE    and al, #0xfe
26043 6B51           08D0                         or al, dl
26044 6B53           8807                         mov [bx], al
26045 6B55           B8                   1212    mov ax, #0x1212
26046 6B58           5A                           pop dx
26047 6B59           5B                           pop bx
26048 6B5A           1F                           pop ds
26049 6B5B           C3                           ret
26050                                           ! 3570 endasm
26051                                           !BCC_ENDASM
26052                                           ! 3571 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26053                       00006B5C            _biosfn_switch_video_interface:
26054                                           !BCC_EOS
26055                                           !BCC_EOS
26056                                           !BCC_EOS
26057                                           ! 3572 {
26058                                           ! 3573 }
26059 6B5C           C3                         ret
26060                                           ! 3574 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26061                       00006B5D            _biosfn_enable_video_refresh_control:
26062                                           !BCC_EOS
26063                                           ! 3575 {
26064                                           ! 3576 }
26065 6B5D           C3                         ret
26066                                           ! 3577 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26067                                           ! 3578 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26068                       00006B5E            _biosfn_write_string:
26069                                           !BCC_EOS
26070                                           !BCC_EOS
26071                                           !BCC_EOS
26072                                           !BCC_EOS
26073                                           !BCC_EOS
26074                                           !BCC_EOS
26075                                           !BCC_EOS
26076                                           !BCC_EOS
26077                                           ! 3579 {
26078                                           ! 3580  Bit16u newcurs,oldcurs,dummy;
26079                                           !BCC_EOS
26080                                           ! 3581  Bit8u car,carattr;
26081                                           !BCC_EOS
26082                                           ! 3582  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26083 6B5E           55                         push	bp
26084 6B5F           89E5                       mov	bp,sp
26085 6B61           83C4                   F8  add	sp,*-8
26086                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26087 6B64           8D5E         FC            lea	bx,-4[bp]
26088 6B67           53                         push	bx
26089                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26090 6B68           8D5E         FA            lea	bx,-6[bp]
26091 6B6B           53                         push	bx
26092                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26093 6B6C           8A46         06            mov	al,6[bp]
26094 6B6F           30E4                       xor	ah,ah
26095 6B71           50                         push	ax
26096                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26097 6B72           E8         D7E8            call	_biosfn_get_cursor_pos
26098 6B75           83C4                   06  add	sp,*6
26099                                           !BCC_EOS
26100                                           ! 3583  if(row==0xff)
26101                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26102 6B78           8A46         0C            mov	al,$C[bp]
26103 6B7B           3C                     FF  cmp	al,#$FF
26104 6B7D           75           12            jne 	.229
26105                       00006B7F            .22A:
26106                                           ! 3584   {col=oldcurs&0x00ff;
26107                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26108 6B7F           8A46         FC            mov	al,-4[bp]
26109                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26110 6B82           8846         0E            mov	$E[bp],al
26111                                           !BCC_EOS
26112                                           ! 3585    row=(oldcurs&0xff00)>>8;
26113                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26114 6B85           8B46         FC            mov	ax,-4[bp]
26115 6B88           30C0                       xor	al,al
26116                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26117 6B8A           88E0                       mov	al,ah
26118 6B8C           30E4                       xor	ah,ah
26119                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26120 6B8E           8846         0C            mov	$C[bp],al
26121                                           !BCC_EOS
26122                                           ! 3586   }
26123                                           ! 3587  newcurs=row; newcurs<<=8; newcurs+=col;
26124                       00006B91            .229:
26125                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26126 6B91           8A46         0C            mov	al,$C[bp]
26127 6B94           30E4                       xor	ah,ah
26128 6B96           8946         FE            mov	-2[bp],ax
26129                                           !BCC_EOS
26130                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26131 6B99           8B46         FE            mov	ax,-2[bp]
26132 6B9C           88C4                       mov	ah,al
26133 6B9E           30C0                       xor	al,al
26134 6BA0           8946         FE            mov	-2[bp],ax
26135                                           !BCC_EOS
26136                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26137 6BA3           8B46         FE            mov	ax,-2[bp]
26138 6BA6           0246         0E            add	al,$E[bp]
26139 6BA9           80D4                   00  adc	ah,*0
26140 6BAC           8946         FE            mov	-2[bp],ax
26141                                           !BCC_EOS
26142                                           ! 3588  biosfn_set_cursor_pos(page,newcurs);
26143                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26144 6BAF           FF76         FE            push	-2[bp]
26145                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26146 6BB2           8A46         06            mov	al,6[bp]
26147 6BB5           30E4                       xor	ah,ah
26148 6BB7           50                         push	ax
26149                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26150 6BB8           E8         D6A2            call	_biosfn_set_cursor_pos
26151 6BBB           83C4                   04  add	sp,*4
26152                                           !BCC_EOS
26153                                           ! 3589  while(count--!=0)
26154                                           ! 3590   {
26155 6BBE           EB           4F            jmp .22C
26156                       00006BC0            .22D:
26157                                           ! 3591    car=read_byte(seg,offset++);
26158                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26159 6BC0           8B46         12            mov	ax,$12[bp]
26160 6BC3           40                         inc	ax
26161 6BC4           8946         12            mov	$12[bp],ax
26162                                           ! Debug: list unsigned short = ax-1 (used reg = )
26163 6BC7           48                         dec	ax
26164 6BC8           50                         push	ax
26165                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26166 6BC9           FF76         10            push	$10[bp]
26167                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26168 6BCC           E8         0ED2            call	_read_byte
26169 6BCF           83C4                   04  add	sp,*4
26170                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26171 6BD2           8846         F9            mov	-7[bp],al
26172                                           !BCC_EOS
26173                                           ! 3592    if((flag&0x02)!=0)
26174                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26175 6BD5           8A46         04            mov	al,4[bp]
26176 6BD8           24                     02  and	al,*2
26177                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26178 6BDA           84C0                       test	al,al
26179 6BDC           74           15            je  	.22E
26180                       00006BDE            .22F:
26181                                           ! 3593     attr=read_byte(seg,offset++);
26182                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26183 6BDE           8B46         12            mov	ax,$12[bp]
26184 6BE1           40                         inc	ax
26185 6BE2           8946         12            mov	$12[bp],ax
26186                                           ! Debug: list unsigned short = ax-1 (used reg = )
26187 6BE5           48                         dec	ax
26188 6BE6           50                         push	ax
26189                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26190 6BE7           FF76         10            push	$10[bp]
26191                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26192 6BEA           E8         0EB4            call	_read_byte
26193 6BED           83C4                   04  add	sp,*4
26194                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26195 6BF0           8846         08            mov	8[bp],al
26196                                           !BCC_EOS
26197                                           ! 3594    biosfn_write_teletype(car,page,attr,3);
26198                       00006BF3            .22E:
26199                                           ! Debug: list int = const 3 (used reg = )
26200 6BF3           B8                   0003  mov	ax,*3
26201 6BF6           50                         push	ax
26202                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26203 6BF7           8A46         08            mov	al,8[bp]
26204 6BFA           30E4                       xor	ah,ah
26205 6BFC           50                         push	ax
26206                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26207 6BFD           8A46         06            mov	al,6[bp]
26208 6C00           30E4                       xor	ah,ah
26209 6C02           50                         push	ax
26210                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26211 6C03           8A46         F9            mov	al,-7[bp]
26212 6C06           30E4                       xor	ah,ah
26213 6C08           50                         push	ax
26214                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26215 6C09           E8         F198            call	_biosfn_write_teletype
26216 6C0C           83C4                   08  add	sp,*8
26217                                           !BCC_EOS
26218                                           ! 3595   }
26219                                           ! 3596  if((flag&0x01)==0)
26220                       00006C0F            .22C:
26221                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26222 6C0F           8B46         0A            mov	ax,$A[bp]
26223 6C12           48                         dec	ax
26224 6C13           8946         0A            mov	$A[bp],ax
26225                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26226 6C16           3D                   FFFF  cmp	ax,*-1
26227 6C19           75           A5            jne	.22D
26228                       00006C1B            .230:
26229                       00006C1B            .22B:
26230                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26231 6C1B           8A46         04            mov	al,4[bp]
26232 6C1E           24                     01  and	al,*1
26233                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26234 6C20           84C0                       test	al,al
26235 6C22           75           0F            jne 	.231
26236                       00006C24            .232:
26237                                           ! 3597   biosfn_set_cursor_pos(page,oldcurs);
26238                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26239 6C24           FF76         FC            push	-4[bp]
26240                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26241 6C27           8A46         06            mov	al,6[bp]
26242 6C2A           30E4                       xor	ah,ah
26243 6C2C           50                         push	ax
26244                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26245 6C2D           E8         D62D            call	_biosfn_set_cursor_pos
26246 6C30           83C4                   04  add	sp,*4
26247                                           !BCC_EOS
26248                                           ! 3598 }
26249                       00006C33            .231:
26250 6C33           89EC                       mov	sp,bp
26251 6C35           5D                         pop	bp
26252 6C36           C3                         ret
26253                                           ! 3599 #asm
26254                                           !BCC_ASM
26255                       00000008            _biosfn_write_string.count	set	8
26256                       0000000E            _biosfn_write_string.seg	set	$E
26257                       0000000C            _biosfn_write_string.col	set	$C
26258                       00000002            _biosfn_write_string.flag	set	2
26259                       00000006            _biosfn_write_string.attr	set	6
26260                       00000004            _biosfn_write_string.page	set	4
26261                       0000000A            _biosfn_write_string.row	set	$A
26262                       00000010            _biosfn_write_string.offset	set	$10
26263                       00006C37            biosfn_group_1A:
26264 6C37           3C                     00    cmp al, #0x00
26265 6C39           74           05              je biosfn_read_display_code
26266 6C3B           3C                     01    cmp al, #0x01
26267 6C3D           74           16              je biosfn_set_display_code
26268 6C3F           C3                           ret
26269                       00006C40            biosfn_read_display_code:
26270 6C40           1E                           push ds
26271 6C41           50                           push ax
26272 6C42           B8                   0040    mov ax, # 0x40
26273 6C45           8ED8                         mov ds, ax
26274 6C47           BB                   008A    mov bx, # 0x8A
26275 6C4A           8A07                         mov al, [bx]
26276 6C4C           88C3                         mov bl, al
26277 6C4E           30FF                         xor bh, bh
26278 6C50           58                           pop ax
26279 6C51           88E0                         mov al, ah
26280 6C53           1F                           pop ds
26281 6C54           C3                           ret
26282                       00006C55            biosfn_set_display_code:
26283 6C55           1E                           push ds
26284 6C56           50                           push ax
26285 6C57           53                           push bx
26286 6C58           B8                   0040    mov ax, # 0x40
26287 6C5B           8ED8                         mov ds, ax
26288 6C5D           89D8                         mov ax, bx
26289 6C5F           BB                   008A    mov bx, # 0x8A
26290 6C62           8807                         mov [bx], al
26291 6C64           5B                           pop bx
26292 6C65           58                           pop ax
26293 6C66           88E0                         mov al, ah
26294 6C68           1F                           pop ds
26295 6C69           C3                           ret
26296                                           ! 3633 endasm
26297                                           !BCC_ENDASM
26298                                           ! 3634 static void biosfn_read_state_info (BX,ES,DI)
26299                                           ! Register BX used in function biosfn_write_string
26300                                           ! 3635 Bit16u BX;Bit16u ES;Bit16u DI;
26301                       00006C6A            _biosfn_read_state_info:
26302                                           !BCC_EOS
26303                                           !BCC_EOS
26304                                           !BCC_EOS
26305                                           ! 3636 {
26306                                           ! 3637  write_word(ES,DI+0x00,&static_functionality);
26307 6C6A           55                         push	bp
26308 6C6B           89E5                       mov	bp,sp
26309                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26310 6C6D           BB                   0F2E  mov	bx,#_static_functionality
26311 6C70           53                         push	bx
26312                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26313 6C71           8B46         08            mov	ax,8[bp]
26314                                           ! Debug: list unsigned int = ax+0 (used reg = )
26315 6C74           50                         push	ax
26316                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26317 6C75           FF76         06            push	6[bp]
26318                                           ! Debug: func () void = write_word+0 (used reg = )
26319 6C78           E8         0E64            call	_write_word
26320 6C7B           89EC                       mov	sp,bp
26321                                           !BCC_EOS
26322                                           ! 3638  write_word(ES,DI+0x02,0xC000);
26323                                           ! Debug: list unsigned int = const $C000 (used reg = )
26324 6C7D           B8                   C000  mov	ax,#$C000
26325 6C80           50                         push	ax
26326                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26327 6C81           8B46         08            mov	ax,8[bp]
26328                                           ! Debug: list unsigned int = ax+2 (used reg = )
26329 6C84           40                         inc	ax
26330 6C85           40                         inc	ax
26331 6C86           50                         push	ax
26332                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26333 6C87           FF76         06            push	6[bp]
26334                                           ! Debug: func () void = write_word+0 (used reg = )
26335 6C8A           E8         0E52            call	_write_word
26336 6C8D           89EC                       mov	sp,bp
26337                                           !BCC_EOS
26338                                           ! 3639  memcpyb(ES,DI+0x04,0x40,0x49,30);
26339                                           ! Debug: list int = const $1E (used reg = )
26340 6C8F           B8                   001E  mov	ax,*$1E
26341 6C92           50                         push	ax
26342                                           ! Debug: list int = const $49 (used reg = )
26343 6C93           B8                   0049  mov	ax,*$49
26344 6C96           50                         push	ax
26345                                           ! Debug: list int = const $40 (used reg = )
26346 6C97           B8                   0040  mov	ax,*$40
26347 6C9A           50                         push	ax
26348                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26349 6C9B           8B46         08            mov	ax,8[bp]
26350                                           ! Debug: list unsigned int = ax+4 (used reg = )
26351 6C9E           05                   0004  add	ax,*4
26352 6CA1           50                         push	ax
26353                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26354 6CA2           FF76         06            push	6[bp]
26355                                           ! Debug: func () void = memcpyb+0 (used reg = )
26356 6CA5           E8         0D99            call	_memcpyb
26357 6CA8           89EC                       mov	sp,bp
26358                                           !BCC_EOS
26359                                           ! 3640  memcpyb(ES,DI+0x22,0x40,0x84,3);
26360                                           ! Debug: list int = const 3 (used reg = )
26361 6CAA           B8                   0003  mov	ax,*3
26362 6CAD           50                         push	ax
26363                                           ! Debug: list int = const $84 (used reg = )
26364 6CAE           B8                   0084  mov	ax,#$84
26365 6CB1           50                         push	ax
26366                                           ! Debug: list int = const $40 (used reg = )
26367 6CB2           B8                   0040  mov	ax,*$40
26368 6CB5           50                         push	ax
26369                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26370 6CB6           8B46         08            mov	ax,8[bp]
26371                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26372 6CB9           05                   0022  add	ax,*$22
26373 6CBC           50                         push	ax
26374                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26375 6CBD           FF76         06            push	6[bp]
26376                                           ! Debug: func () void = memcpyb+0 (used reg = )
26377 6CC0           E8         0D7E            call	_memcpyb
26378 6CC3           89EC                       mov	sp,bp
26379                                           !BCC_EOS
26380                                           ! 3641  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26381                                           ! Debug: list int = const $8A (used reg = )
26382 6CC5           B8                   008A  mov	ax,#$8A
26383 6CC8           50                         push	ax
26384                                           ! Debug: list int = const $40 (used reg = )
26385 6CC9           B8                   0040  mov	ax,*$40
26386 6CCC           50                         push	ax
26387                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26388 6CCD           E8         0DD1            call	_read_byte
26389 6CD0           89EC                       mov	sp,bp
26390                                           ! Debug: list unsigned char = al+0 (used reg = )
26391 6CD2           30E4                       xor	ah,ah
26392 6CD4           50                         push	ax
26393                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26394 6CD5           8B46         08            mov	ax,8[bp]
26395                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26396 6CD8           05                   0025  add	ax,*$25
26397 6CDB           50                         push	ax
26398                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26399 6CDC           FF76         06            push	6[bp]
26400                                           ! Debug: func () void = write_byte+0 (used reg = )
26401 6CDF           E8         0DE5            call	_write_byte
26402 6CE2           89EC                       mov	sp,bp
26403                                           !BCC_EOS
26404                                           ! 3642  write_byte(ES,DI+0x26,0);
26405                                           ! Debug: list int = const 0 (used reg = )
26406 6CE4           31C0                       xor	ax,ax
26407 6CE6           50                         push	ax
26408                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26409 6CE7           8B46         08            mov	ax,8[bp]
26410                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26411 6CEA           05                   0026  add	ax,*$26
26412 6CED           50                         push	ax
26413                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26414 6CEE           FF76         06            push	6[bp]
26415                                           ! Debug: func () void = write_byte+0 (used reg = )
26416 6CF1           E8         0DD3            call	_write_byte
26417 6CF4           89EC                       mov	sp,bp
26418                                           !BCC_EOS
26419                                           ! 3643  write_byte(ES,DI+0x27,16);
26420                                           ! Debug: list int = const $10 (used reg = )
26421 6CF6           B8                   0010  mov	ax,*$10
26422 6CF9           50                         push	ax
26423                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26424 6CFA           8B46         08            mov	ax,8[bp]
26425                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26426 6CFD           05                   0027  add	ax,*$27
26427 6D00           50                         push	ax
26428                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26429 6D01           FF76         06            push	6[bp]
26430                                           ! Debug: func () void = write_byte+0 (used reg = )
26431 6D04           E8         0DC0            call	_write_byte
26432 6D07           89EC                       mov	sp,bp
26433                                           !BCC_EOS
26434                                           ! 3644  wr
26435                                           ! 3644 ite_byte(ES,DI+0x28,0);
26436                                           ! Debug: list int = const 0 (used reg = )
26437 6D09           31C0                       xor	ax,ax
26438 6D0B           50                         push	ax
26439                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26440 6D0C           8B46         08            mov	ax,8[bp]
26441                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26442 6D0F           05                   0028  add	ax,*$28
26443 6D12           50                         push	ax
26444                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26445 6D13           FF76         06            push	6[bp]
26446                                           ! Debug: func () void = write_byte+0 (used reg = )
26447 6D16           E8         0DAE            call	_write_byte
26448 6D19           89EC                       mov	sp,bp
26449                                           !BCC_EOS
26450                                           ! 3645  write_byte(ES,DI+0x29,8);
26451                                           ! Debug: list int = const 8 (used reg = )
26452 6D1B           B8                   0008  mov	ax,*8
26453 6D1E           50                         push	ax
26454                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26455 6D1F           8B46         08            mov	ax,8[bp]
26456                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26457 6D22           05                   0029  add	ax,*$29
26458 6D25           50                         push	ax
26459                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26460 6D26           FF76         06            push	6[bp]
26461                                           ! Debug: func () void = write_byte+0 (used reg = )
26462 6D29           E8         0D9B            call	_write_byte
26463 6D2C           89EC                       mov	sp,bp
26464                                           !BCC_EOS
26465                                           ! 3646  write_byte(ES,DI+0x2a,2);
26466                                           ! Debug: list int = const 2 (used reg = )
26467 6D2E           B8                   0002  mov	ax,*2
26468 6D31           50                         push	ax
26469                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
26470 6D32           8B46         08            mov	ax,8[bp]
26471                                           ! Debug: list unsigned int = ax+$2A (used reg = )
26472 6D35           05                   002A  add	ax,*$2A
26473 6D38           50                         push	ax
26474                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26475 6D39           FF76         06            push	6[bp]
26476                                           ! Debug: func () void = write_byte+0 (used reg = )
26477 6D3C           E8         0D88            call	_write_byte
26478 6D3F           89EC                       mov	sp,bp
26479                                           !BCC_EOS
26480                                           ! 3647  write_byte(ES,DI+0x2b,0);
26481                                           ! Debug: list int = const 0 (used reg = )
26482 6D41           31C0                       xor	ax,ax
26483 6D43           50                         push	ax
26484                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
26485 6D44           8B46         08            mov	ax,8[bp]
26486                                           ! Debug: list unsigned int = ax+$2B (used reg = )
26487 6D47           05                   002B  add	ax,*$2B
26488 6D4A           50                         push	ax
26489                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26490 6D4B           FF76         06            push	6[bp]
26491                                           ! Debug: func () void = write_byte+0 (used reg = )
26492 6D4E           E8         0D76            call	_write_byte
26493 6D51           89EC                       mov	sp,bp
26494                                           !BCC_EOS
26495                                           ! 3648  write_byte(ES,DI+0x2c,0);
26496                                           ! Debug: list int = const 0 (used reg = )
26497 6D53           31C0                       xor	ax,ax
26498 6D55           50                         push	ax
26499                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
26500 6D56           8B46         08            mov	ax,8[bp]
26501                                           ! Debug: list unsigned int = ax+$2C (used reg = )
26502 6D59           05                   002C  add	ax,*$2C
26503 6D5C           50                         push	ax
26504                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26505 6D5D           FF76         06            push	6[bp]
26506                                           ! Debug: func () void = write_byte+0 (used reg = )
26507 6D60           E8         0D64            call	_write_byte
26508 6D63           89EC                       mov	sp,bp
26509                                           !BCC_EOS
26510                                           ! 3649  write_byte(ES,DI+0x31,3);
26511                                           ! Debug: list int = const 3 (used reg = )
26512 6D65           B8                   0003  mov	ax,*3
26513 6D68           50                         push	ax
26514                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
26515 6D69           8B46         08            mov	ax,8[bp]
26516                                           ! Debug: list unsigned int = ax+$31 (used reg = )
26517 6D6C           05                   0031  add	ax,*$31
26518 6D6F           50                         push	ax
26519                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26520 6D70           FF76         06            push	6[bp]
26521                                           ! Debug: func () void = write_byte+0 (used reg = )
26522 6D73           E8         0D51            call	_write_byte
26523 6D76           89EC                       mov	sp,bp
26524                                           !BCC_EOS
26525                                           ! 3650  write_byte(ES,DI+0x32,0);
26526                                           ! Debug: list int = const 0 (used reg = )
26527 6D78           31C0                       xor	ax,ax
26528 6D7A           50                         push	ax
26529                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
26530 6D7B           8B46         08            mov	ax,8[bp]
26531                                           ! Debug: list unsigned int = ax+$32 (used reg = )
26532 6D7E           05                   0032  add	ax,*$32
26533 6D81           50                         push	ax
26534                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26535 6D82           FF76         06            push	6[bp]
26536                                           ! Debug: func () void = write_byte+0 (used reg = )
26537 6D85           E8         0D3F            call	_write_byte
26538 6D88           89EC                       mov	sp,bp
26539                                           !BCC_EOS
26540                                           ! 3651  memsetb(ES,DI+0x33,0,13);
26541                                           ! Debug: list int = const $D (used reg = )
26542 6D8A           B8                   000D  mov	ax,*$D
26543 6D8D           50                         push	ax
26544                                           ! Debug: list int = const 0 (used reg = )
26545 6D8E           31C0                       xor	ax,ax
26546 6D90           50                         push	ax
26547                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
26548 6D91           8B46         08            mov	ax,8[bp]
26549                                           ! Debug: list unsigned int = ax+$33 (used reg = )
26550 6D94           05                   0033  add	ax,*$33
26551 6D97           50                         push	ax
26552                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
26553 6D98           FF76         06            push	6[bp]
26554                                           ! Debug: func () void = memsetb+0 (used reg = )
26555 6D9B           E8         0C59            call	_memsetb
26556 6D9E           89EC                       mov	sp,bp
26557                                           !BCC_EOS
26558                                           ! 3652 }
26559 6DA0           5D                         pop	bp
26560 6DA1           C3                         ret
26561                                           ! 3653 static Bit16u biosfn_read_video_state_size2 (CX)
26562                                           ! Register BX used in function biosfn_read_state_info
26563                                           ! 3654      Bit16u CX;
26564                       00006DA2            _biosfn_read_video_state_size2:
26565                                           !BCC_EOS
26566                                           ! 3655 {
26567                                           ! 3656     Bit16u size;
26568                                           !BCC_EOS
26569                                           ! 3657     size = 0;
26570 6DA2           55                         push	bp
26571 6DA3           89E5                       mov	bp,sp
26572 6DA5           4C                         dec	sp
26573 6DA6           4C                         dec	sp
26574                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
26575 6DA7           31C0                       xor	ax,ax
26576 6DA9           8946         FE            mov	-2[bp],ax
26577                                           !BCC_EOS
26578                                           ! 3658     if (CX & 1) {
26579                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
26580 6DAC           8A46         04            mov	al,4[bp]
26581 6DAF           24                     01  and	al,*1
26582 6DB1           84C0                       test	al,al
26583 6DB3           74           09            je  	.233
26584                       00006DB5            .234:
26585                                           ! 3659         size += 0x46;
26586                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
26587 6DB5           8B46         FE            mov	ax,-2[bp]
26588 6DB8           05                   0046  add	ax,*$46
26589 6DBB           8946         FE            mov	-2[bp],ax
26590                                           !BCC_EOS
26591                                           ! 3660     }
26592                                           ! 3661     if (CX & 2) {
26593                       00006DBE            .233:
26594                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
26595 6DBE           8A46         04            mov	al,4[bp]
26596 6DC1           24                     02  and	al,*2
26597 6DC3           84C0                       test	al,al
26598 6DC5           74           09            je  	.235
26599                       00006DC7            .236:
26600                                           ! 3662         size += (5 + 8 + 5) * 2 + 6;
26601                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
26602 6DC7           8B46         FE            mov	ax,-2[bp]
26603 6DCA           05                   002A  add	ax,*$2A
26604 6DCD           8946         FE            mov	-2[bp],ax
26605                                           !BCC_EOS
26606                                           ! 3663     }
26607                                           ! 3664     if (CX & 4) {
26608                       00006DD0            .235:
26609                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
26610 6DD0           8A46         04            mov	al,4[bp]
26611 6DD3           24                     04  and	al,*4
26612 6DD5           84C0                       test	al,al
26613 6DD7           74           09            je  	.237
26614                       00006DD9            .238:
26615                                           ! 3665         size += 3 + 256 * 3 + 1;
26616                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
26617 6DD9           8B46         FE            mov	ax,-2[bp]
26618 6DDC           05                   0304  add	ax,#$304
26619 6DDF           8946         FE            mov	-2[bp],ax
26620                                           !BCC_EOS
26621                                           ! 3666 }
26622                                           ! 3667     return size;
26623                       00006DE2            .237:
26624 6DE2           8B46         FE            mov	ax,-2[bp]
26625 6DE5           89EC                       mov	sp,bp
26626 6DE7           5D                         pop	bp
26627 6DE8           C3                         ret
26628                                           !BCC_EOS
26629                                           ! 3668 }
26630                                           ! 3669 static void biosfn_read_video_state_size (CX, BX)
26631                                           ! 3670      Bit16u CX; Bit16u *BX;
26632                       00006DE9            _biosfn_read_video_state_size:
26633                                           !BCC_EOS
26634                                           !BCC_EOS
26635                                           ! 3671 {
26636                                           ! 3672     Bit16u ss=get_SS();
26637 6DE9           55                         push	bp
26638 6DEA           89E5                       mov	bp,sp
26639 6DEC           4C                         dec	sp
26640 6DED           4C                         dec	sp
26641                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26642 6DEE           E8         0D3C            call	_get_SS
26643                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26644 6DF1           8946         FE            mov	-2[bp],ax
26645                                           !BCC_EOS
26646                                           ! 3673     write_word(ss, BX, biosfn_read_video_state_size2(CX));
26647                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
26648 6DF4           FF76         04            push	4[bp]
26649                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
26650 6DF7           E8         FFA8            call	_biosfn_read_video_state_size2
26651 6DFA           44                         inc	sp
26652 6DFB           44                         inc	sp
26653                                           ! Debug: list unsigned short = ax+0 (used reg = )
26654 6DFC           50                         push	ax
26655                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
26656 6DFD           FF76         06            push	6[bp]
26657                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26658 6E00           FF76         FE            push	-2[bp]
26659                                           ! Debug: func () void = write_word+0 (used reg = )
26660 6E03           E8         0CD9            call	_write_word
26661 6E06           83C4                   06  add	sp,*6
26662                                           !BCC_EOS
26663                                           ! 3674 }
26664 6E09           89EC                       mov	sp,bp
26665 6E0B           5D                         pop	bp
26666 6E0C           C3                         ret
26667                                           ! 3675 static Bit16u biosfn_save_video_state (CX,ES,BX)
26668                                           ! 3676      Bit16u CX;Bit16u ES;Bit16u BX;
26669                       00006E0D            _biosfn_save_video_state:
26670                                           !BCC_EOS
26671                                           !BCC_EOS
26672                                           !BCC_EOS
26673                                           ! 3677 {
26674                                           ! 3678     Bit16u i, v, crtc_addr, ar_index;
26675                                           !BCC_EOS
26676                                           ! 3679     crtc_addr = read_word(0x40, 0x63);
26677 6E0D           55                         push	bp
26678 6E0E           89E5                       mov	bp,sp
26679 6E10           83C4                   F8  add	sp,*-8
26680                                           ! Debug: list int = const $63 (used reg = )
26681 6E13           B8                   0063  mov	ax,*$63
26682 6E16           50                         push	ax
26683                                           ! Debug: list int = const $40 (used reg = )
26684 6E17           B8                   0040  mov	ax,*$40
26685 6E1A           50                         push	ax
26686                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26687 6E1B           E8         0C96            call	_read_word
26688 6E1E           83C4                   04  add	sp,*4
26689                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
26690 6E21           8946         FA            mov	-6[bp],ax
26691                                           !BCC_EOS
26692                                           ! 3680     if (CX & 1) {
26693                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
26694 6E24           8A46         04            mov	al,4[bp]
26695 6E27           24                     01  and	al,*1
26696 6E29           84C0                       test	al,al
26697 6E2B         0F84         0266            beq 	.239
26698                       00006E2F            .23A:
26699                                           ! 3681         write_byte(ES, BX, inb(0x3c4)); BX++;
26700                                           ! Debug: list int = const $3C4 (used reg = )
26701 6E2F           B8                   03C4  mov	ax,#$3C4
26702 6E32           50                         push	ax
26703                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26704 6E33           E8         0CC1            call	_inb
26705 6E36           44                         inc	sp
26706 6E37           44                         inc	sp
26707                                           ! Debug: list unsigned char = al+0 (used reg = )
26708 6E38           30E4                       xor	ah,ah
26709 6E3A           50                         push	ax
26710                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26711 6E3B           FF76         08            push	8[bp]
26712                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26713 6E3E           FF76         06            push	6[bp]
26714                                           ! Debug: func () void = write_byte+0 (used reg = )
26715 6E41           E8         0C83            call	_write_byte
26716 6E44           83C4                   06  add	sp,*6
26717                                           !BCC_EOS
26718                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26719 6E47           8B46         08            mov	ax,8[bp]
26720 6E4A           40                         inc	ax
26721 6E4B           8946         08            mov	8[bp],ax
26722                                           !BCC_EOS
26723                                           ! 3682         write_byte(ES, BX, inb(crtc_addr)); BX++;
26724                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
26725 6E4E           FF76         FA            push	-6[bp]
26726                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26727 6E51           E8         0CA3            call	_inb
26728 6E54           44                         inc	sp
26729 6E55           44                         inc	sp
26730                                           ! Debug: list unsigned char = al+0 (used reg = )
26731 6E56           30E4                       xor	ah,ah
26732 6E58           50                         push	ax
26733                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26734 6E59           FF76         08            push	8[bp]
26735                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26736 6E5C           FF76         06            push	6[bp]
26737                                           ! Debug: func () void = write_byte+0 (used reg = )
26738 6E5F           E8         0C65            call	_write_byte
26739 6E62           83C4                   06  add	sp,*6
26740                                           !BCC_EOS
26741                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26742 6E65           8B46         08            mov	ax,8[bp]
26743 6E68           40                         inc	ax
26744 6E69           8946         08            mov	8[bp],ax
26745                                           !BCC_EOS
26746                                           ! 3683         write_byte(ES, BX, inb(0x3ce)); BX++;
26747                                           ! Debug: list int = const $3CE (used reg = )
26748 6E6C           B8                   03CE  mov	ax,#$3CE
26749 6E6F           50                         push	ax
26750                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26751 6E70           E8         0C84            call	_inb
26752 6E73           44                         inc	sp
26753 6E74           44                         inc	sp
26754                                           ! Debug: list unsigned char = al+0 (used reg = )
26755 6E75           30E4                       xor	ah,ah
26756 6E77           50                         push	ax
26757                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26758 6E78           FF76         08            push	8[bp]
26759                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26760 6E7B           FF76         06            push	6[bp]
26761                                           ! Debug: func () void = write_byte+0 (used reg = )
26762 6E7E           E8         0C46            call	_write_byte
26763 6E81           83C4                   06  add	sp,*6
26764                                           !BCC_EOS
26765                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26766 6E84           8B46         08            mov	ax,8[bp]
26767 6E87           40                         inc	ax
26768 6E88           8946         08            mov	8[bp],ax
26769                                           !BCC_EOS
26770                                           ! 3684         inb(0x3da);
26771                                           ! Debug: list int = const $3DA (used reg = )
26772 6E8B           B8                   03DA  mov	ax,#$3DA
26773 6E8E           50                         push	ax
26774                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26775 6E8F           E8         0C65            call	_inb
26776 6E92           44                         inc	sp
26777 6E93           44                         inc	sp
26778                                           !BCC_EOS
26779                                           ! 3685         ar_index = inb(0x3c0);
26780                                           ! Debug: list int = const $3C0 (used reg = )
26781 6E94           B8                   03C0  mov	ax,#$3C0
26782 6E97           50                         push	ax
26783                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26784 6E98           E8         0C5C            call	_inb
26785 6E9B           44                         inc	sp
26786 6E9C           44                         inc	sp
26787                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
26788 6E9D           30E4                       xor	ah,ah
26789 6E9F           8946         F8            mov	-8[bp],ax
26790                                           !BCC_EOS
26791                                           ! 3686         write_byte(ES, BX, ar_index); BX++;
26792                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
26793 6EA2           FF76         F8            push	-8[bp]
26794                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26795 6EA5           FF76         08            push	8[bp]
26796                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26797 6EA8           FF76         06            push	6[bp]
26798                                           ! Debug: func () void = write_byte+0 (used reg = )
26799 6EAB           E8         0C19            call	_write_byte
26800 6EAE           83C4                   06  add	sp,*6
26801                                           !BCC_EOS
26802                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26803 6EB1           8B46         08            mov	ax,8[bp]
26804 6EB4           40                         inc	ax
26805 6EB5           8946         08            mov	8[bp],ax
26806                                           !BCC_EOS
26807                                           ! 3687         write_byte(ES, BX, inb(0x3ca)); BX++;
26808                                           ! Debug: list int = const $3CA (used reg = )
26809 6EB8           B8                   03CA  mov	ax,#$3CA
26810 6EBB           50                         push	ax
26811                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26812 6EBC           E8         0C38            call	_inb
26813 6EBF           44                         inc	sp
26814 6EC0           44                         inc	sp
26815                                           ! Debug: list unsigned char = al+0 (used reg = )
26816 6EC1           30E4                       xor	ah,ah
26817 6EC3           50                         push	ax
26818                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26819 6EC4           FF76         08            push	8[bp]
26820                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26821 6EC7           FF76         06            push	6[bp]
26822                                           ! Debug: func () void = write_byte+0 (used reg = )
26823 6ECA           E8         0BFA            call	_write_byte
26824 6ECD           83C4                   06  add	sp,*6
26825                                           !BCC_EOS
26826                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26827 6ED0           8B46         08            mov	ax,8[bp]
26828 6ED3           40                         inc	ax
26829 6ED4           8946         08            mov	8[bp],ax
26830                                           !BCC_EOS
26831                                           ! 3688         for(i=1;i<=4;i++){
26832                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
26833 6ED7           B8                   0001  mov	ax,*1
26834 6EDA           8946         FE            mov	-2[bp],ax
26835                                           !BCC_EOS
26836                                           !BCC_EOS
26837 6EDD           EB           33            jmp .23D
26838                       00006EDF            .23E:
26839                                           ! 3689             outb(0x3c4, i);
26840                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
26841 6EDF           FF76         FE            push	-2[bp]
26842                                           ! Debug: list int = const $3C4 (used reg = )
26843 6EE2           B8                   03C4  mov	ax,#$3C4
26844 6EE5           50                         push	ax
26845                                           ! Debug: func () void = outb+0 (used reg = )
26846 6EE6           E8         0C24            call	_outb
26847 6EE9           83C4                   04  add	sp,*4
26848                                           !BCC_EOS
26849                                           ! 3690             write_byte(ES, BX, inb(0x3c5)); BX++;
26850                                           ! Debug: list int = const $3C5 (used reg = )
26851 6EEC           B8                   03C5  mov	ax,#$3C5
26852 6EEF           50                         push	ax
26853                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26854 6EF0           E8         0C04            call	_inb
26855 6EF3           44                         inc	sp
26856 6EF4           44                         inc	sp
26857                                           ! Debug: list unsigned char = al+0 (used reg = )
26858 6EF5           30E4                       xor	ah,ah
26859 6EF7           50                         push	ax
26860                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26861 6EF8           FF76         08            push	8[bp]
26862                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26863 6EFB           FF76         06            push	6[bp]
26864                                           ! Debug: func () void = write_byte+0 (used reg = )
26865 6EFE           E8         0BC6            call	_write_byte
26866 6F01           83C4                   06  add	sp,*6
26867                                           !BCC_EOS
26868                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26869 6F04           8B46         08            mov	ax,8[bp]
26870 6F07           40                         inc	ax
26871 6F08           8946         08            mov	8[bp],ax
26872                                           !BCC_EOS
26873                                           ! 3691         }
26874                                           ! 3692         outb(0x3c4, 0);
26875                       00006F0B            .23C:
26876                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
26877 6F0B           8B46         FE            mov	ax,-2[bp]
26878 6F0E           40                         inc	ax
26879 6F0F           8946         FE            mov	-2[bp],ax
26880                       00006F12            .23D:
26881                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
26882 6F12           8B46         FE            mov	ax,-2[bp]
26883 6F15           3D                   0004  cmp	ax,*4
26884 6F18           76           C5            jbe	.23E
26885                       00006F1A            .23F:
26886                       00006F1A            .23B:
26887                                           ! Debug: list int = const 0 (used reg = )
26888 6F1A           31C0                       xor	ax,ax
26889 6F1C           50                         push	ax
26890                                           ! Debug: list int = const $3C4 (used reg = )
26891 6F1D           B8                   03C4  mov	ax,#$3C4
26892 6F20           50                         push	ax
26893                                           ! Debug: func () void = outb+0 (used reg = )
26894 6F21           E8         0BE9            call	_outb
26895 6F24           83C4                   04  add	sp,*4
26896                                           !BCC_EOS
26897                                           ! 3693         write_byte(ES, BX, inb(0x3c5)); BX++;
26898                                           ! Debug: list int = const $3C5 (used reg = )
26899 6F27           B8                   03C5  mov	ax,#$3C5
26900 6F2A           50                         push	ax
26901                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26902 6F2B           E8         0BC9            call	_inb
26903 6F2E           44                         inc	sp
26904 6F2F           44                         inc	sp
26905                                           ! Debug: list unsigned char = al+0 (used reg = )
26906 6F30           30E4                       xor	ah,ah
26907 6F32           50                         push	ax
26908                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26909 6F33           FF76         08            push	8[bp]
26910                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26911 6F36           FF76         06            push	6[bp]
26912                                           ! Debug: func () void = write_byte+0 (used reg = )
26913 6F39           E8         0B8B            call	_write_byte
26914 6F3C           83C4                   06  add	sp,*6
26915                                           !BCC_EOS
26916                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26917 6F3F           8B46         08            mov	ax,8[bp]
26918 6F42           40                         inc	ax
26919 6F43           8946         08            mov	8[bp],ax
26920                                           !BCC_EOS
26921                                           ! 3694         for(i=0;i<=0x18;i++) {
26922                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
26923 6F46           31C0                       xor	ax,ax
26924 6F48           8946         FE            mov	-2[bp],ax
26925                                           !BCC_EOS
26926                                           !BCC_EOS
26927 6F4B           EB           33            jmp .242
26928                       00006F4D            .243:
26929                                           ! 3695             outb(crtc_addr,i);
26930                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
26931 6F4D           FF76         FE            push	-2[bp]
26932                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
26933 6F50           FF76         FA            push	-6[bp]
26934                                           ! Debug: func () void = outb+0 (used reg = )
26935 6F53           E8         0BB7            call	_outb
26936 6F56           83C4                   04  add	sp,*4
26937                                           !BCC_EOS
26938                                           ! 3696             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
26939                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
26940 6F59           8B46         FA            mov	ax,-6[bp]
26941                                           ! Debug: list unsigned int = ax+1 (used reg = )
26942 6F5C           40                         inc	ax
26943 6F5D           50                         push	ax
26944                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26945 6F5E           E8         0B96            call	_inb
26946 6F61           44                         inc	sp
26947 6F62           44                         inc	sp
26948                                           ! Debug: list unsigned char = al+0 (used reg = )
26949 6F63           30E4                       xor	ah,ah
26950 6F65           50                         push	ax
26951                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26952 6F66           FF76         08            push	8[bp]
26953                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26954 6F69           FF76         06            push	6[bp]
26955                                           ! Debug: func () void = write_byte+0 (used reg = )
26956 6F6C           E8         0B58            call	_write_byte
26957 6F6F           83C4                   06  add	sp,*6
26958                                           !BCC_EOS
26959                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26960 6F72           8B46         08            mov	ax,8[bp]
26961 6F75           40                         inc	ax
26962 6F76           8946         08            mov	8[bp],ax
26963                                           !BCC_EOS
26964                                           ! 3697         }
26965                                           ! 3698         for(i=0;i<=0x13;i++) {
26966                       00006F79            .241:
26967                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
26968 6F79           8B46         FE            mov	ax,-2[bp]
26969 6F7C           40                         inc	ax
26970 6F7D           8946         FE            mov	-2[bp],ax
26971                       00006F80            .242:
26972                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
26973 6F80           8B46         FE            mov	ax,-2[bp]
26974 6F83           3D                   0018  cmp	ax,*$18
26975 6F86           76           C5            jbe	.243
26976                       00006F88            .244:
26977                       00006F88            .240:
26978                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
26979 6F88           31C0                       xor	ax,ax
26980 6F8A           8946         FE            mov	-2[bp],ax
26981                                           !BCC_EOS
26982                                           !BCC_EOS
26983 6F8D           EB           44            jmp .247
26984                       00006F8F            .248:
26985                                           ! 3699             inb(0x3da);
26986                                           ! Debug: list int = const $3DA (used reg = )
26987 6F8F           B8                   03DA  mov	ax,#$3DA
26988 6F92           50                         push	ax
26989                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26990 6F93           E8         0B61            call	_inb
26991 6F96           44                         inc	sp
26992 6F97           44                         inc	sp
26993                                           !BCC_EOS
26994                                           ! 3700             outb(0x3c0, i | (ar_index & 0x20));
26995                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
26996 6F98           8A46         F8            mov	al,-8[bp]
26997 6F9B           24                     20  and	al,*$20
26998                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
26999                                           ! Debug: expression subtree swapping
27000 6F9D           30E4                       xor	ah,ah
27001 6F9F           0B46         FE            or	ax,-2[bp]
27002                                           ! Debug: list unsigned int = ax+0 (used reg = )
27003 6FA2           50                         push	ax
27004                                           ! Debug: list int = const $3C0 (used reg = )
27005 6FA3           B8                   03C0  mov	ax,#$3C0
27006 6FA6           50                         push	ax
27007                                           ! Debug: func () void = outb+0 (used reg = )
27008 6FA7           E8         0B63            call	_outb
27009 6FAA           83C4                   04  add	sp,*4
27010                                           !BCC_EOS
27011                                           ! 3701             write_byte(ES, BX, inb(0x3c1)); BX++;
27012                                           ! Debug: list int = const $3C1 (used reg = )
27013 6FAD           B8                   03C1  mov	ax,#$3C1
27014 6FB0           50                         push	ax
27015                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27016 6FB1           E8         0B43            call	_inb
27017 6FB4           44                         inc	sp
27018 6FB5           44                         inc	sp
27019                                           ! Debug: list unsigned char = al+0 (used reg = )
27020 6FB6           30E4                       xor	ah,ah
27021 6FB8           50                         push	ax
27022                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27023 6FB9           FF76         08            push	8[bp]
27024                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27025 6FBC           FF76         06            push	6[bp]
27026                                           ! Debug: func () void = write_byte+0 (used reg = )
27027 6FBF           E8         0B05            call	_write_byte
27028 6FC2           83C4                   06  add	sp,*6
27029                                           !BCC_EOS
27030                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27031 6FC5           8B46         08            mov	ax,8[bp]
27032 6FC8           40                         inc	ax
27033 6FC9           8946         08            mov	8[bp],ax
27034                                           !BCC_EOS
27035                                           ! 3702         }
27036                                           ! 3703         inb(0x3da);
27037                       00006FCC            .246:
27038                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27039 6FCC           8B46         FE            mov	ax,-2[bp]
27040 6FCF           40                         inc	ax
27041 6FD0           8946         FE            mov	-2[bp],ax
27042                       00006FD3            .247:
27043                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27044 6FD3           8B46         FE            mov	ax,-2[bp]
27045 6FD6           3D                   0013  cmp	ax,*$13
27046 6FD9           76           B4            jbe	.248
27047                       00006FDB            .249:
27048                       00006FDB            .245:
27049                                           ! Debug: list int = const $3DA (used reg = )
27050 6FDB           B8                   03DA  mov	ax,#$3DA
27051 6FDE           50                         push	ax
27052                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27053 6FDF           E8         0B15            call	_inb
27054 6FE2           44                         inc	sp
27055 6FE3           44                         inc	sp
27056                                           !BCC_EOS
27057                                           ! 3704         for(i=0;i<=8;i++) {
27058                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27059 6FE4           31C0                       xor	ax,ax
27060 6FE6           8946         FE            mov	-2[bp],ax
27061                                           !BCC_EOS
27062                                           !BCC_EOS
27063 6FE9           EB           33            jmp .24C
27064                       00006FEB            .24D:
27065                                           ! 3705             outb(0x3ce,i);
27066                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27067 6FEB           FF76         FE            push	-2[bp]
27068                                           ! Debug: list int = const $3CE (used reg = )
27069 6FEE           B8                   03CE  mov	ax,#$3CE
27070 6FF1           50                         push	ax
27071                                           ! Debug: func () void = outb+0 (used reg = )
27072 6FF2           E8         0B18            call	_outb
27073 6FF5           83C4                   04  add	sp,*4
27074                                           !BCC_EOS
27075                                           ! 3706             write_byte(ES, BX, inb(0x3cf)); BX++;
27076                                           ! Debug: list int = const $3CF (used reg = )
27077 6FF8           B8                   03CF  mov	ax,#$3CF
27078 6FFB           50                         push	ax
27079                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27080 6FFC           E8         0AF8            call	_inb
27081 6FFF           44                         inc	sp
27082 7000           44                         inc	sp
27083                                           ! Debug: list unsigned char = al+0 (used reg = )
27084 7001           30E4                       xor	ah,ah
27085 7003           50                         push	ax
27086                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27087 7004           FF76         08            push	8[bp]
27088                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27089 7007           FF76         06            push	6[bp]
27090                                           ! Debug: func () void = write_byte+0 (used reg = )
27091 700A           E8         0ABA            call	_write_byte
27092 700D           83C4                   06  add	sp,*6
27093                                           !BCC_EOS
27094                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27095 7010           8B46         08            mov	ax,8[bp]
27096 7013           40                         inc	ax
27097 7014           8946         08            mov	8[bp],ax
27098                                           !BCC_EOS
27099                                           ! 3707         }
27100                                           ! 3708         write_word(ES, BX, crtc_addr); BX+= 2;
27101                       00007017            .24B:
27102                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27103 7017           8B46         FE            mov	ax,-2[bp]
27104 701A           40                         inc	ax
27105 701B           8946         FE            mov	-2[bp],ax
27106                       0000701E            .24C:
27107                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27108 701E           8B46         FE            mov	ax,-2[bp]
27109 7021           3D                   0008  cmp	ax,*8
27110 7024           76           C5            jbe	.24D
27111                       00007026            .24E:
27112                       00007026            .24A:
27113                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27114 7026           FF76         FA            push	-6[bp]
27115                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27116 7029           FF76         08            push	8[bp]
27117                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27118 702C           FF76         06            push	6[bp]
27119                                           ! Debug: func () void = write_word+0 (used reg = )
27120 702F           E8         0AAD            call	_write_word
27121 7032           83C4                   06  add	sp,*6
27122                                           !BCC_EOS
27123                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27124 7035           8B46         08            mov	ax,8[bp]
27125 7038           40                         inc	ax
27126 7039           40                         inc	ax
27127 703A           8946         08            mov	8[bp],ax
27128                                           !BCC_EOS
27129                                           ! 3709         write_byte(ES, BX, 0); BX++;
27130                                           ! Debug: list int = const 0 (used reg = )
27131 703D           31C0                       xor	ax,ax
27132 703F           50                         push	ax
27133                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27134 7040           FF76         08            push	8[bp]
27135                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27136 7043           FF76         06            push	6[bp]
27137                                           ! Debug: func () void = write_byte+0 (used reg = )
27138 7046           E8         0A7E            call	_write_byte
27139 7049           83C4                   06  add	sp,*6
27140                                           !BCC_EOS
27141                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27142 704C           8B46         08            mov	ax,8[bp]
27143 704F           40                         inc	ax
27144 7050           8946         08            mov	8[bp],ax
27145                                           !BCC_EOS
27146                                           ! 3710         write_byte(ES, BX, 0); BX++;
27147                                           ! Debug: list int = const 0 (used reg = )
27148 7053           31C0                       xor	ax,ax
27149 7055           50                         push	ax
27150                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27151 7056           FF76         08            push	8[bp]
27152                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27153 7059           FF76         06            push	6[bp]
27154                                           ! Debug: func () void = write_byte+0 (used reg = )
27155 705C           E8         0A68            call	_write_byte
27156 705F           83C4                   06  add	sp,*6
27157                                           !BCC_EOS
27158                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27159 7062           8B46         08            mov	ax,8[bp]
27160 7065           40                         inc	ax
27161 7066           8946         08            mov	8[bp],ax
27162                                           !BCC_EOS
27163                                           ! 3711         write_byte(ES, BX, 0); BX++;
27164                                           ! Debug: list int = const 0 (used reg = )
27165 7069           31C0                       xor	ax,ax
27166 706B           50                         push	ax
27167                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27168 706C           FF76         08            push	8[bp]
27169                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27170 706F           FF76         06            push	6[bp]
27171                                           ! Debug: func () void = write_byte+0 (used reg = )
27172 7072           E8         0A52            call	_write_byte
27173 7075           83C4                   06  add	sp,*6
27174                                           !BCC_EOS
27175                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27176 7078           8B46         08            mov	ax,8[bp]
27177 707B           40                         inc	ax
27178 707C           8946         08            mov	8[bp],ax
27179                                           !BCC_EOS
27180                                           ! 3712         write_byte(ES, BX, 0); BX++;
27181                                           ! Debug: list int = const 0 (used reg = )
27182 707F           31C0                       xor	ax,ax
27183 7081           50                         push	ax
27184                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27185 7082           FF76         08            push	8[bp]
27186                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27187 7085           FF76         06            push	6[bp]
27188                                           ! Debug: func () void = write_byte+0 (used reg = )
27189 7088           E8         0A3C            call	_write_byte
27190 708B           83C4                   06  add	sp,*6
27191                                           !BCC_EOS
27192                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27193 708E           8B46         08            mov	ax,8[bp]
27194 7091           40                         inc	ax
27195 7092           8946         08            mov	8[bp],ax
27196                                           !BCC_EOS
27197                                           ! 3713     }
27198                                           ! 3714     if (CX & 2) {
27199                       00007095            .239:
27200                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27201 7095           8A46         04            mov	al,4[bp]
27202 7098           24                     02  and	al,*2
27203 709A           84C0                       test	al,al
27204 709C         0F84         0270            beq 	.24F
27205                       000070A0            .250:
27206                                           ! 3715         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27207                                           ! Debug: list int = const $49 (used reg = )
27208 70A0           B8                   0049  mov	ax,*$49
27209 70A3           50                         push	ax
27210                                           ! Debug: list int = const $40 (used reg = )
27211 70A4           B8                   0040  mov	ax,*$40
27212 70A7           50                         push	ax
27213                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27214 70A8           E8         09F6            call	_read_byte
27215 70AB           83C4                   04  add	sp,*4
27216                                           ! Debug: list unsigned char = al+0 (used reg = )
27217 70AE           30E4                       xor	ah,ah
27218 70B0           50                         push	ax
27219                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27220 70B1           FF76         08            push	8[bp]
27221                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27222 70B4           FF76         06            push	6[bp]
27223                                           ! Debug: func () void = write_byte+0 (used reg = )
27224 70B7           E8         0A0D            call	_write_byte
27225 70BA           83C4                   06  add	sp,*6
27226                                           !BCC_EOS
27227                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27228 70BD           8B46         08            mov	ax,8[bp]
27229 70C0           40                         inc	ax
27230 70C1           8946         08            mov	8[bp],ax
27231                                           !BCC_EOS
27232                                           ! 3716         write_word(ES, BX, read_word(0x4
27233                                           ! 3716 0,0x4A)); BX += 2;
27234                                           ! Debug: list int = const $4A (used reg = )
27235 70C4           B8                   004A  mov	ax,*$4A
27236 70C7           50                         push	ax
27237                                           ! Debug: list int = const $40 (used reg = )
27238 70C8           B8                   0040  mov	ax,*$40
27239 70CB           50                         push	ax
27240                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27241 70CC           E8         09E5            call	_read_word
27242 70CF           83C4                   04  add	sp,*4
27243                                           ! Debug: list unsigned short = ax+0 (used reg = )
27244 70D2           50                         push	ax
27245                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27246 70D3           FF76         08            push	8[bp]
27247                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27248 70D6           FF76         06            push	6[bp]
27249                                           ! Debug: func () void = write_word+0 (used reg = )
27250 70D9           E8         0A03            call	_write_word
27251 70DC           83C4                   06  add	sp,*6
27252                                           !BCC_EOS
27253                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27254 70DF           8B46         08            mov	ax,8[bp]
27255 70E2           40                         inc	ax
27256 70E3           40                         inc	ax
27257 70E4           8946         08            mov	8[bp],ax
27258                                           !BCC_EOS
27259                                           ! 3717         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27260                                           ! Debug: list int = const $4C (used reg = )
27261 70E7           B8                   004C  mov	ax,*$4C
27262 70EA           50                         push	ax
27263                                           ! Debug: list int = const $40 (used reg = )
27264 70EB           B8                   0040  mov	ax,*$40
27265 70EE           50                         push	ax
27266                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27267 70EF           E8         09C2            call	_read_word
27268 70F2           83C4                   04  add	sp,*4
27269                                           ! Debug: list unsigned short = ax+0 (used reg = )
27270 70F5           50                         push	ax
27271                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27272 70F6           FF76         08            push	8[bp]
27273                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27274 70F9           FF76         06            push	6[bp]
27275                                           ! Debug: func () void = write_word+0 (used reg = )
27276 70FC           E8         09E0            call	_write_word
27277 70FF           83C4                   06  add	sp,*6
27278                                           !BCC_EOS
27279                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27280 7102           8B46         08            mov	ax,8[bp]
27281 7105           40                         inc	ax
27282 7106           40                         inc	ax
27283 7107           8946         08            mov	8[bp],ax
27284                                           !BCC_EOS
27285                                           ! 3718         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27286                                           ! Debug: list int = const $63 (used reg = )
27287 710A           B8                   0063  mov	ax,*$63
27288 710D           50                         push	ax
27289                                           ! Debug: list int = const $40 (used reg = )
27290 710E           B8                   0040  mov	ax,*$40
27291 7111           50                         push	ax
27292                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27293 7112           E8         099F            call	_read_word
27294 7115           83C4                   04  add	sp,*4
27295                                           ! Debug: list unsigned short = ax+0 (used reg = )
27296 7118           50                         push	ax
27297                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27298 7119           FF76         08            push	8[bp]
27299                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27300 711C           FF76         06            push	6[bp]
27301                                           ! Debug: func () void = write_word+0 (used reg = )
27302 711F           E8         09BD            call	_write_word
27303 7122           83C4                   06  add	sp,*6
27304                                           !BCC_EOS
27305                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27306 7125           8B46         08            mov	ax,8[bp]
27307 7128           40                         inc	ax
27308 7129           40                         inc	ax
27309 712A           8946         08            mov	8[bp],ax
27310                                           !BCC_EOS
27311                                           ! 3719         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27312                                           ! Debug: list int = const $84 (used reg = )
27313 712D           B8                   0084  mov	ax,#$84
27314 7130           50                         push	ax
27315                                           ! Debug: list int = const $40 (used reg = )
27316 7131           B8                   0040  mov	ax,*$40
27317 7134           50                         push	ax
27318                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27319 7135           E8         0969            call	_read_byte
27320 7138           83C4                   04  add	sp,*4
27321                                           ! Debug: list unsigned char = al+0 (used reg = )
27322 713B           30E4                       xor	ah,ah
27323 713D           50                         push	ax
27324                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27325 713E           FF76         08            push	8[bp]
27326                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27327 7141           FF76         06            push	6[bp]
27328                                           ! Debug: func () void = write_byte+0 (used reg = )
27329 7144           E8         0980            call	_write_byte
27330 7147           83C4                   06  add	sp,*6
27331                                           !BCC_EOS
27332                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27333 714A           8B46         08            mov	ax,8[bp]
27334 714D           40                         inc	ax
27335 714E           8946         08            mov	8[bp],ax
27336                                           !BCC_EOS
27337                                           ! 3720         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27338                                           ! Debug: list int = const $85 (used reg = )
27339 7151           B8                   0085  mov	ax,#$85
27340 7154           50                         push	ax
27341                                           ! Debug: list int = const $40 (used reg = )
27342 7155           B8                   0040  mov	ax,*$40
27343 7158           50                         push	ax
27344                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27345 7159           E8         0958            call	_read_word
27346 715C           83C4                   04  add	sp,*4
27347                                           ! Debug: list unsigned short = ax+0 (used reg = )
27348 715F           50                         push	ax
27349                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27350 7160           FF76         08            push	8[bp]
27351                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27352 7163           FF76         06            push	6[bp]
27353                                           ! Debug: func () void = write_word+0 (used reg = )
27354 7166           E8         0976            call	_write_word
27355 7169           83C4                   06  add	sp,*6
27356                                           !BCC_EOS
27357                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27358 716C           8B46         08            mov	ax,8[bp]
27359 716F           40                         inc	ax
27360 7170           40                         inc	ax
27361 7171           8946         08            mov	8[bp],ax
27362                                           !BCC_EOS
27363                                           ! 3721         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27364                                           ! Debug: list int = const $87 (used reg = )
27365 7174           B8                   0087  mov	ax,#$87
27366 7177           50                         push	ax
27367                                           ! Debug: list int = const $40 (used reg = )
27368 7178           B8                   0040  mov	ax,*$40
27369 717B           50                         push	ax
27370                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27371 717C           E8         0922            call	_read_byte
27372 717F           83C4                   04  add	sp,*4
27373                                           ! Debug: list unsigned char = al+0 (used reg = )
27374 7182           30E4                       xor	ah,ah
27375 7184           50                         push	ax
27376                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27377 7185           FF76         08            push	8[bp]
27378                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27379 7188           FF76         06            push	6[bp]
27380                                           ! Debug: func () void = write_byte+0 (used reg = )
27381 718B           E8         0939            call	_write_byte
27382 718E           83C4                   06  add	sp,*6
27383                                           !BCC_EOS
27384                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27385 7191           8B46         08            mov	ax,8[bp]
27386 7194           40                         inc	ax
27387 7195           8946         08            mov	8[bp],ax
27388                                           !BCC_EOS
27389                                           ! 3722         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27390                                           ! Debug: list int = const $88 (used reg = )
27391 7198           B8                   0088  mov	ax,#$88
27392 719B           50                         push	ax
27393                                           ! Debug: list int = const $40 (used reg = )
27394 719C           B8                   0040  mov	ax,*$40
27395 719F           50                         push	ax
27396                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27397 71A0           E8         08FE            call	_read_byte
27398 71A3           83C4                   04  add	sp,*4
27399                                           ! Debug: list unsigned char = al+0 (used reg = )
27400 71A6           30E4                       xor	ah,ah
27401 71A8           50                         push	ax
27402                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27403 71A9           FF76         08            push	8[bp]
27404                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27405 71AC           FF76         06            push	6[bp]
27406                                           ! Debug: func () void = write_byte+0 (used reg = )
27407 71AF           E8         0915            call	_write_byte
27408 71B2           83C4                   06  add	sp,*6
27409                                           !BCC_EOS
27410                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27411 71B5           8B46         08            mov	ax,8[bp]
27412 71B8           40                         inc	ax
27413 71B9           8946         08            mov	8[bp],ax
27414                                           !BCC_EOS
27415                                           ! 3723         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27416                                           ! Debug: list int = const $89 (used reg = )
27417 71BC           B8                   0089  mov	ax,#$89
27418 71BF           50                         push	ax
27419                                           ! Debug: list int = const $40 (used reg = )
27420 71C0           B8                   0040  mov	ax,*$40
27421 71C3           50                         push	ax
27422                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27423 71C4           E8         08DA            call	_read_byte
27424 71C7           83C4                   04  add	sp,*4
27425                                           ! Debug: list unsigned char = al+0 (used reg = )
27426 71CA           30E4                       xor	ah,ah
27427 71CC           50                         push	ax
27428                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27429 71CD           FF76         08            push	8[bp]
27430                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27431 71D0           FF76         06            push	6[bp]
27432                                           ! Debug: func () void = write_byte+0 (used reg = )
27433 71D3           E8         08F1            call	_write_byte
27434 71D6           83C4                   06  add	sp,*6
27435                                           !BCC_EOS
27436                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27437 71D9           8B46         08            mov	ax,8[bp]
27438 71DC           40                         inc	ax
27439 71DD           8946         08            mov	8[bp],ax
27440                                           !BCC_EOS
27441                                           ! 3724         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27442                                           ! Debug: list int = const $60 (used reg = )
27443 71E0           B8                   0060  mov	ax,*$60
27444 71E3           50                         push	ax
27445                                           ! Debug: list int = const $40 (used reg = )
27446 71E4           B8                   0040  mov	ax,*$40
27447 71E7           50                         push	ax
27448                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27449 71E8           E8         08C9            call	_read_word
27450 71EB           83C4                   04  add	sp,*4
27451                                           ! Debug: list unsigned short = ax+0 (used reg = )
27452 71EE           50                         push	ax
27453                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27454 71EF           FF76         08            push	8[bp]
27455                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27456 71F2           FF76         06            push	6[bp]
27457                                           ! Debug: func () void = write_word+0 (used reg = )
27458 71F5           E8         08E7            call	_write_word
27459 71F8           83C4                   06  add	sp,*6
27460                                           !BCC_EOS
27461                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27462 71FB           8B46         08            mov	ax,8[bp]
27463 71FE           40                         inc	ax
27464 71FF           40                         inc	ax
27465 7200           8946         08            mov	8[bp],ax
27466                                           !BCC_EOS
27467                                           ! 3725         for(i=0;i<8;i++) {
27468                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27469 7203           31C0                       xor	ax,ax
27470 7205           8946         FE            mov	-2[bp],ax
27471                                           !BCC_EOS
27472                                           !BCC_EOS
27473 7208           EB           2F            jmp .253
27474                       0000720A            .254:
27475                                           ! 3726             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
27476                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
27477                                           ! Debug: expression subtree swapping
27478 720A           8B46         FE            mov	ax,-2[bp]
27479 720D           D1E0                       shl	ax,*1
27480                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
27481                                           ! Debug: expression subtree swapping
27482                                           ! Debug: list unsigned int = ax+$50 (used reg = )
27483 720F           05                   0050  add	ax,*$50
27484 7212           50                         push	ax
27485                                           ! Debug: list int = const $40 (used reg = )
27486 7213           B8                   0040  mov	ax,*$40
27487 7216           50                         push	ax
27488                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27489 7217           E8         089A            call	_read_word
27490 721A           83C4                   04  add	sp,*4
27491                                           ! Debug: list unsigned short = ax+0 (used reg = )
27492 721D           50                         push	ax
27493                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27494 721E           FF76         08            push	8[bp]
27495                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27496 7221           FF76         06            push	6[bp]
27497                                           ! Debug: func () void = write_word+0 (used reg = )
27498 7224           E8         08B8            call	_write_word
27499 7227           83C4                   06  add	sp,*6
27500                                           !BCC_EOS
27501                                           ! 3727             BX += 2;
27502                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27503 722A           8B46         08            mov	ax,8[bp]
27504 722D           40                         inc	ax
27505 722E           40                         inc	ax
27506 722F           8946         08            mov	8[bp],ax
27507                                           !BCC_EOS
27508                                           ! 3728         }
27509                                           ! 3729         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
27510                       00007232            .252:
27511                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27512 7232           8B46         FE            mov	ax,-2[bp]
27513 7235           40                         inc	ax
27514 7236           8946         FE            mov	-2[bp],ax
27515                       00007239            .253:
27516                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27517 7239           8B46         FE            mov	ax,-2[bp]
27518 723C           3D                   0008  cmp	ax,*8
27519 723F           72           C9            jb 	.254
27520                       00007241            .255:
27521                       00007241            .251:
27522                                           ! Debug: list int = const $4E (used reg = )
27523 7241           B8                   004E  mov	ax,*$4E
27524 7244           50                         push	ax
27525                                           ! Debug: list int = const $40 (used reg = )
27526 7245           B8                   0040  mov	ax,*$40
27527 7248           50                         push	ax
27528                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27529 7249           E8         0868            call	_read_word
27530 724C           83C4                   04  add	sp,*4
27531                                           ! Debug: list unsigned short = ax+0 (used reg = )
27532 724F           50                         push	ax
27533                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27534 7250           FF76         08            push	8[bp]
27535                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27536 7253           FF76         06            push	6[bp]
27537                                           ! Debug: func () void = write_word+0 (used reg = )
27538 7256           E8         0886            call	_write_word
27539 7259           83C4                   06  add	sp,*6
27540                                           !BCC_EOS
27541                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27542 725C           8B46         08            mov	ax,8[bp]
27543 725F           40                         inc	ax
27544 7260           40                         inc	ax
27545 7261           8946         08            mov	8[bp],ax
27546                                           !BCC_EOS
27547                                           ! 3730         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
27548                                           ! Debug: list int = const $62 (used reg = )
27549 7264           B8                   0062  mov	ax,*$62
27550 7267           50                         push	ax
27551                                           ! Debug: list int = const $40 (used reg = )
27552 7268           B8                   0040  mov	ax,*$40
27553 726B           50                         push	ax
27554                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27555 726C           E8         0832            call	_read_byte
27556 726F           83C4                   04  add	sp,*4
27557                                           ! Debug: list unsigned char = al+0 (used reg = )
27558 7272           30E4                       xor	ah,ah
27559 7274           50                         push	ax
27560                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27561 7275           FF76         08            push	8[bp]
27562                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27563 7278           FF76         06            push	6[bp]
27564                                           ! Debug: func () void = write_byte+0 (used reg = )
27565 727B           E8         0849            call	_write_byte
27566 727E           83C4                   06  add	sp,*6
27567                                           !BCC_EOS
27568                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27569 7281           8B46         08            mov	ax,8[bp]
27570 7284           40                         inc	ax
27571 7285           8946         08            mov	8[bp],ax
27572                                           !BCC_EOS
27573                                           ! 3731         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
27574                                           ! Debug: list int = const $7C (used reg = )
27575 7288           B8                   007C  mov	ax,*$7C
27576 728B           50                         push	ax
27577                                           ! Debug: list int = const 0 (used reg = )
27578 728C           31C0                       xor	ax,ax
27579 728E           50                         push	ax
27580                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27581 728F           E8         0822            call	_read_word
27582 7292           83C4                   04  add	sp,*4
27583                                           ! Debug: list unsigned short = ax+0 (used reg = )
27584 7295           50                         push	ax
27585                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27586 7296           FF76         08            push	8[bp]
27587                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27588 7299           FF76         06            push	6[bp]
27589                                           ! Debug: func () void = write_word+0 (used reg = )
27590 729C           E8         0840            call	_write_word
27591 729F           83C4                   06  add	sp,*6
27592                                           !BCC_EOS
27593                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27594 72A2           8B46         08            mov	ax,8[bp]
27595 72A5           40                         inc	ax
27596 72A6           40                         inc	ax
27597 72A7           8946         08            mov	8[bp],ax
27598                                           !BCC_EOS
27599                                           ! 3732         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
27600                                           ! Debug: list int = const $7E (used reg = )
27601 72AA           B8                   007E  mov	ax,*$7E
27602 72AD           50                         push	ax
27603                                           ! Debug: list int = const 0 (used reg = )
27604 72AE           31C0                       xor	ax,ax
27605 72B0           50                         push	ax
27606                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27607 72B1           E8         0800            call	_read_word
27608 72B4           83C4                   04  add	sp,*4
27609                                           ! Debug: list unsigned short = ax+0 (used reg = )
27610 72B7           50                         push	ax
27611                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27612 72B8           FF76         08            push	8[bp]
27613                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27614 72BB           FF76         06            push	6[bp]
27615                                           ! Debug: func () void = write_word+0 (used reg = )
27616 72BE           E8         081E            call	_write_word
27617 72C1           83C4                   06  add	sp,*6
27618                                           !BCC_EOS
27619                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27620 72C4           8B46         08            mov	ax,8[bp]
27621 72C7           40                         inc	ax
27622 72C8           40                         inc	ax
27623 72C9           8946         08            mov	8[bp],ax
27624                                           !BCC_EOS
27625                                           ! 3733         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
27626                                           ! Debug: list int = const $10C (used reg = )
27627 72CC           B8                   010C  mov	ax,#$10C
27628 72CF           50                         push	ax
27629                                           ! Debug: list int = const 0 (used reg = )
27630 72D0           31C0                       xor	ax,ax
27631 72D2           50                         push	ax
27632                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27633 72D3           E8         07DE            call	_read_word
27634 72D6           83C4                   04  add	sp,*4
27635                                           ! Debug: list unsigned short = ax+0 (used reg = )
27636 72D9           50                         push	ax
27637                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27638 72DA           FF76         08            push	8[bp]
27639                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27640 72DD           FF76         06            push	6[bp]
27641                                           ! Debug: func () void = write_word+0 (used reg = )
27642 72E0           E8         07FC            call	_write_word
27643 72E3           83C4                   06  add	sp,*6
27644                                           !BCC_EOS
27645                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27646 72E6           8B46         08            mov	ax,8[bp]
27647 72E9           40                         inc	ax
27648 72EA           40                         inc	ax
27649 72EB           8946         08            mov	8[bp],ax
27650                                           !BCC_EOS
27651                                           ! 3734         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
27652                                           ! Debug: list int = const $10E (used reg = )
27653 72EE           B8                   010E  mov	ax,#$10E
27654 72F1           50                         push	ax
27655                                           ! Debug: list int = const 0 (used reg = )
27656 72F2           31C0                       xor	ax,ax
27657 72F4           50                         push	ax
27658                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27659 72F5           E8         07BC            call	_read_word
27660 72F8           83C4                   04  add	sp,*4
27661                                           ! Debug: list unsigned short = ax+0 (used reg = )
27662 72FB           50                         push	ax
27663                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27664 72FC           FF76         08            push	8[bp]
27665                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27666 72FF           FF76         06            push	6[bp]
27667                                           ! Debug: func () void = write_word+0 (used reg = )
27668 7302           E8         07DA            call	_write_word
27669 7305           83C4                   06  add	sp,*6
27670                                           !BCC_EOS
27671                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27672 7308           8B46         08            mov	ax,8[bp]
27673 730B           40                         inc	ax
27674 730C           40                         inc	ax
27675 730D           8946         08            mov	8[bp],ax
27676                                           !BCC_EOS
27677                                           ! 3735     }
27678                                           ! 3736     if (CX & 4) {
27679                       00007310            .24F:
27680                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
27681 7310           8A46         04            mov	al,4[bp]
27682 7313           24                     04  and	al,*4
27683 7315           84C0                       test	al,al
27684 7317         0F84         00B5            beq 	.256
27685                       0000731B            .257:
27686                                           ! 3737         write_byte(ES, BX, inb(0x3c7)); BX++;
27687                                           ! Debug: list int = const $3C7 (used reg = )
27688 731B           B8                   03C7  mov	ax,#$3C7
27689 731E           50                         push	ax
27690                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27691 731F           E8         07D5            call	_inb
27692 7322           44                         inc	sp
27693 7323           44                         inc	sp
27694                                           ! Debug: list unsigned char = al+0 (used reg = )
27695 7324           30E4                       xor	ah,ah
27696 7326           50                         push	ax
27697                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27698 7327           FF76         08            push	8[bp]
27699                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27700 732A           FF76         06            push	6[bp]
27701                                           ! Debug: func () void = write_byte+0 (used reg = )
27702 732D           E8         0797            call	_write_byte
27703 7330           83C4                   06  add	sp,*6
27704                                           !BCC_EOS
27705                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27706 7333           8B46         08            mov	ax,8[bp]
27707 7336           40                         inc	ax
27708 7337           8946         08            mov	8[bp],ax
27709                                           !BCC_EOS
27710                                           ! 3738         write_byte(ES, BX, inb(0x3c8)); BX++;
27711                                           ! Debug: list int = const $3C8 (used reg = )
27712 733A           B8                   03C8  mov	ax,#$3C8
27713 733D           50                         push	ax
27714                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27715 733E           E8         07B6            call	_inb
27716 7341           44                         inc	sp
27717 7342           44                         inc	sp
27718                                           ! Debug: list unsigned char = al+0 (used reg = )
27719 7343           30E4                       xor	ah,ah
27720 7345           50                         push	ax
27721                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27722 7346           FF76         08            push	8[bp]
27723                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27724 7349           FF76         06            push	6[bp]
27725                                           ! Debug: func () void = write_byte+0 (used reg = )
27726 734C           E8         0778            call	_write_byte
27727 734F           83C4                   06  add	sp,*6
27728                                           !BCC_EOS
27729                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27730 7352           8B46         08            mov	ax,8[bp]
27731 7355           40                         inc	ax
27732 7356           8946         08            mov	8[bp],ax
27733                                           !BCC_EOS
27734                                           ! 3739         write_byte(ES, BX, inb(0x3c6)); BX++;
27735                                           ! Debug: list int = const $3C6 (used reg = )
27736 7359           B8                   03C6  mov	ax,#$3C6
27737 735C           50                         push	ax
27738                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27739 735D           E8         0797            call	_inb
27740 7360           44                         inc	sp
27741 7361           44                         inc	sp
27742                                           ! Debug: list unsigned char = al+0 (used reg = )
27743 7362           30E4                       xor	ah,ah
27744 7364           50                         push	ax
27745                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27746 7365           FF76         08            push	8[bp]
27747                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27748 7368           FF76         06            push	6[bp]
27749                                           ! Debug: func () void = write_byte+0 (used reg = )
27750 736B           E8         0759            call	_write_byte
27751 736E           83C4                   06  add	sp,*6
27752                                           !BCC_EOS
27753                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27754 7371           8B46         08            mov	ax,8[bp]
27755 7374           40                         inc	ax
27756 7375           8946         08            mov	8[bp],ax
27757                                           !BCC_EOS
27758                                           ! 3740         outb(0x3c8,0x00);
27759                                           ! Debug: list int = const 0 (used reg = )
27760 7378           31C0                       xor	ax,ax
27761 737A           50                         push	ax
27762                                           ! Debug: list int = const $3C8 (used reg = )
27763 737B           B8                   03C8  mov	ax,#$3C8
27764 737E           50                         push	ax
27765                                           ! Debug: func () void = outb+0 (used reg = )
27766 737F           E8         078B            call	_outb
27767 7382           83C4                   04  add	sp,*4
27768                                           !BCC_EOS
27769                                           ! 3741         for(i=0;i<256*3;i++) {
27770                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27771 7385           31C0                       xor	ax,ax
27772 7387           8946         FE            mov	-2[bp],ax
27773                                           !BCC_EOS
27774                                           !BCC_EOS
27775 738A           EB           26            jmp .25A
27776                       0000738C            .25B:
27777                                           ! 3742             write_byte(ES, BX, inb(0x3c9)); BX++;
27778                                           ! Debug: list int = const $3C9 (used reg = )
27779 738C           B8                   03C9  mov	ax,#$3C9
27780 738F           50                         push	ax
27781                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27782 7390           E8         0764            call	_inb
27783 7393           44                         inc	sp
27784 7394           44                         inc	sp
27785                                           ! Debug: list unsigned char = al+0 (used reg = )
27786 7395           30E4                       xor	ah,ah
27787 7397           50                         push	ax
27788                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27789 7398           FF76         08            push	8[bp]
27790                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27791 739B           FF76         06            push	6[bp]
27792                                           ! Debug: func () void = write_byte+0 (used reg = )
27793 739E           E8         0726            call	_write_byte
27794 73A1           83C4                   06  add	sp,*6
27795                                           !BCC_EOS
27796                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27797 73A4           8B46         08            mov	ax,8[bp]
27798 73A7           40                         inc	ax
27799 73A8           8946         08            mov	8[bp],ax
27800                                           !BCC_EOS
27801                                           ! 3743         }
27802                                           ! 3744         write_byte(ES, BX, 0); BX++;
27803                       000073AB            .259:
27804                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27805 73AB           8B46         FE            mov	ax,-2[bp]
27806 73AE           40                         inc	ax
27807 73AF           8946         FE            mov	-2[bp],ax
27808                       000073B2            .25A:
27809                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
27810 73B2           8B46         FE            mov	ax,-2[bp]
27811 73B5           3D                   0300  cmp	ax,#$300
27812 73B8           72           D2            jb 	.25B
27813                       000073BA            .25C:
27814                       000073BA            .258:
27815                                           ! Debug: list int = const 0 (used reg = )
27816 73BA           31C0                       xor	ax,ax
27817 73BC           50                         push	ax
27818                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27819 73BD           FF76         08            push	8[bp]
27820                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27821 73C0           FF76         06            push	6[bp]
27822                                           ! Debug: func () void = write_byte+0 (used reg = )
27823 73C3           E8         0701            call	_write_byte
27824 73C6           83C4                   06  add	sp,*6
27825                                           !BCC_EOS
27826                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27827 73C9           8B46         08            mov	ax,8[bp]
27828 73CC           40                         inc	ax
27829 73CD           8946         08            mov	8[bp],ax
27830                                           !BCC_EOS
27831                                           ! 3745     }
27832                                           ! 3746     return BX;
27833                       000073D0            .256:
27834 73D0           8B46         08            mov	ax,8[bp]
27835 73D3           89EC                       mov	sp,bp
27836 73D5           5D                         pop	bp
27837 73D6           C3                         ret
27838                                           !BCC_EOS
27839                                           ! 3747 }
27840                                           ! 3748 static Bit16u biosfn_restore_video_state (CX,ES,BX)
27841                                           ! 3749      Bit16u CX;Bit16u ES;Bit16u BX;
27842                       000073D7            _biosfn_restore_video_state:
27843                                           !BCC_EOS
27844                                           !BCC_EOS
27845                                           !BCC_EOS
27846                                           ! 3750 {
27847                                           ! 3751     Bit16u i, crtc_addr, v, addr1, ar_index;
27848                                           !BCC_EOS
27849                                           ! 3752     if (CX & 1) {
27850 73D7           55                         push	bp
27851 73D8           89E5                       mov	bp,sp
27852 73DA           83C4                   F6  add	sp,*-$A
27853                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
27854 73DD           8A46         04            mov	al,4[bp]
27855 73E0           24                     01  and	al,*1
27856 73E2           84C0                       test	al,al
27857 73E4         0F84         02AA            beq 	.25D
27858                       000073E8            .25E:
27859                                           ! 3753         inb(0x3da);
27860                                           ! Debug: list int = const $3DA (used reg = )
27861 73E8           B8                   03DA  mov	ax,#$3DA
27862 73EB           50                         push	ax
27863                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27864 73EC           E8         0708            call	_inb
27865 73EF           44                         inc	sp
27866 73F0           44                         inc	sp
27867                                           !BCC_EOS
27868                                           ! 3754         crtc_addr = read_word(ES, BX + 0x40);
27869                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
27870 73F1           8B46         08            mov	ax,8[bp]
27871                                           ! Debug: list unsigned int = ax+$40 (used reg = )
27872 73F4           05                   0040  add	ax,*$40
27873 73F7           50                         push	ax
27874                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27875 73F8           FF76         06            push	6[bp]
27876                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27877 73FB           E8         06B6            call	_read_word
27878 73FE           83C4                   04  add	sp,*4
27879                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
27880 7401           8946         FC            mov	-4[bp],ax
27881                                           !BCC_EOS
27882                                           ! 3755         addr1 = BX;
27883                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
27884 7404           8B46         08            mov	ax,8[bp]
27885 7407           8946         F8            mov	-8[bp],ax
27886                                           !BCC_EOS
27887                                           ! 3756         BX += 5;
27888                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
27889 740A           8B46         08            mov	ax,8[bp]
27890 740D           05                   0005  add	ax,*5
27891 7410           8946         08            mov	8[bp],ax
27892                                           !BCC_EOS
27893                                           ! 3757         for(i=1;i<=4;i++){
27894                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
27895 7413           B8                   0001  mov	ax,*1
27896 7416           8946         FE            mov	-2[bp],ax
27897                                           !BCC_EOS
27898                                           !BCC_EOS
27899 7419           EB           34            jmp .261
27900                       0000741B            .262:
27901                                           ! 3758             outb(0x3c4, i);
27902                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
27903 741B           FF76         FE            push	-2[bp]
27904                                           ! Debug: list int = const $3C4 (used reg = )
27905 741E           B8                   03C4  mov	ax,#$3C4
27906 7421           50                         push	ax
27907                                           ! Debug: func () void = outb+0 (used reg = )
27908 7422           E8         06E8            call	_outb
27909 7425           83C4                   04  add	sp,*4
27910                                           !BCC_EOS
27911                                           ! 3759             outb(0x3c5, read_byte(ES, BX)); BX++;
27912                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27913 7428           FF76         08            push	8[bp]
27914                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27915 742B           FF76         06            push	6[bp]
27916                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27917 742E           E8         0670            call	_read_byte
27918 7431           83C4                   04  add	sp,*4
27919                                           ! Debug: list unsigned char = al+0 (used reg = )
27920 7434           30E4                       xor	ah,ah
27921 7436           50                         push	ax
27922                                           ! Debug: list int = const $3C5 (used reg = )
27923 7437           B8                   03C5  mov	ax,#$3C5
27924 743A           50                         push	ax
27925                                           ! Debug: func () void = outb+0 (used reg = )
27926 743B           E8         06CF            call	_outb
27927 743E           83C4                   04  add	sp,*4
27928                                           !BCC_EOS
27929                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
27930 7441           8B46         08            mov	ax,8[bp]
27931 7444           40                         inc	ax
27932 7445           8946         08            mov	8[bp],ax
27933                                           !BCC_EOS
27934                                           ! 3760         }
27935                                           ! 3761         outb(0x3c4, 0);
27936                       00007448            .260:
27937                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
27938 7448           8B46         FE            mov	ax,-2[bp]
27939 744B           40                         inc	ax
27940 744C           8946         FE            mov	-2[bp],ax
27941                       0000744F            .261:
27942                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
27943 744F           8B46         FE            mov	ax,-2[bp]
27944 7452           3D                   0004  cmp	ax,*4
27945 7455           76           C4            jbe	.262
27946                       00007457            .263:
27947                       00007457            .25F:
27948                                           ! Debug: list int = const 0 (used reg = )
27949 7457           31C0                       xor	ax,ax
27950 7459           50                         push	ax
27951                                           ! Debug: list int = const $3C4 (used reg = )
27952 745A           B8                   03C4  mov	ax,#$3C4
27953 745D           50                         push	ax
27954                                           ! Debug: func () void = outb+0 (used reg = )
27955 745E           E8         06AC            call	_outb
27956 7461           83C4                   04  add	sp,*4
27957                                           !BCC_EOS
27958                                           ! 3762         outb(0x3c5, read_byte(ES, BX)); BX++;
27959                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27960 7464           FF76         08            push	8[bp]
27961                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27962 7467           FF76         06            push	6[bp]
27963                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27964 746A           E8         0634            call	_read_byte
27965 746D           83C4                   04  add	sp,*4
27966                                           ! Debug: list unsigned char = al+0 (used reg = )
27967 7470           30E4                       xor	ah,ah
27968 7472           50                         push	ax
27969                                           ! Debug: list int = const $3C5 (used reg = )
27970 7473           B8                   03C5  mov	ax,#$3C5
27971 7476           50                         push	ax
27972                                           ! Debug: func () void = outb+0 (used reg = )
27973 7477           E8         0693            call	_outb
27974 747A           83C4                   04  add	sp,*4
27975                                           !BCC_EOS
27976                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
27977 747D           8B46         08            mov	ax,8[bp]
27978 7480           40                         inc	ax
27979 7481           8946         08            mov	8[bp],ax
27980                                           !BCC_EOS
27981                                           ! 3763         outw(crtc_addr,0x0011);
27982                                           ! Debug: list int = const $11 (used reg = )
27983 7484           B8                   0011  mov	ax,*$11
27984 7487           50                         push	ax
27985                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
27986 7488           FF76         FC            push	-4[bp]
27987                                           ! Debug: func () void = outw+0 (used reg = )
27988 748B           E8         068F            call	_outw
27989 748E           83C4                   04  add	sp,*4
27990                                           !BCC_EOS
27991                                           ! 3764         for(i=0;i<=0x18;i++) {
27992                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
27993 7491           31C0                       xor	ax,ax
27994 7493           8946         FE            mov	-2[bp],ax
27995                                           !BCC_EOS
27996                                           !BCC_EOS
27997 7496           EB           3C            jmp .266
27998                       00007498            .267:
27999                                           ! 3765             if (i != 0x11) {
28000                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28001 7498           8B46         FE            mov	ax,-2[bp]
28002 749B           3D                   0011  cmp	ax,*$11
28003 749E           74           26            je  	.268
28004                       000074A0            .269:
28005                                           ! 3766                 outb(crtc_addr,i);
28006                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28007 74A0           FF76         FE            push	-2[bp]
28008                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28009 74A3           FF76         FC            push	-4[bp]
28010                                           ! Debug: func () void = outb+0 (used reg = )
28011 74A6           E8         0664            call	_outb
28012 74A9           83C4                   04  add	sp,*4
28013                                           !BCC_EOS
28014                                           ! 3767                 outb(crtc_addr+1, read_byte(ES, BX));
28015                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28016 74AC           FF76         08            push	8[bp]
28017                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28018 74AF           FF76         06            push	6[bp]
28019                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28020 74B2           E8         05EC            call	_read_byte
28021 74B5           83C4                   04  add	sp,*4
28022                                           ! Debug: list unsigned char = al+0 (used reg = )
28023 74B8           30E4                       xor	ah,ah
28024 74BA           50                         push	ax
28025                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28026 74BB           8B46         FC            mov	ax,-4[bp]
28027                                           ! Debug: list unsigned int = ax+1 (used reg = )
28028 74BE           40                         inc	ax
28029 74BF           50                         push	ax
28030                                           ! Debug: func () void = outb+0 (used reg = )
28031 74C0           E8         064A            call	_outb
28032 74C3           83C4                   04  add	sp,*4
28033                                           !BCC_EOS
28034                                           ! 3768             }
28035                                           ! 3769             BX++;
28036                       000074C6            .268:
28037                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28038 74C6           8B46         08            mov	ax,8[bp]
28039 74C9           40                         inc	ax
28040 74CA           8946         08            mov	8[bp],ax
28041                                           !BCC_EOS
28042                                           ! 3770         }
28043                                           ! 3771         v = inb(0x3cc) & ~0x01;
28044                       000074CD            .265:
28045                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28046 74CD           8B46         FE            mov	ax,-2[bp]
28047 74D0           40                         inc	ax
28048 74D1           8946         FE            mov	-2[bp],ax
28049                       000074D4            .266:
28050                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28051 74D4           8B46         FE            mov	ax,-2[bp]
28052 74D7           3D                   0018  cmp	ax,*$18
28053 74DA           76           BC            jbe	.267
28054                       000074DC            .26A:
28055                       000074DC            .264:
28056                                           ! Debug: list int = const $3CC (used reg = )
28057 74DC           B8                   03CC  mov	ax,#$3CC
28058 74DF           50                         push	ax
28059                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28060 74E0           E8         0614            call	_inb
28061 74E3           44                         inc	sp
28062 74E4           44                         inc	sp
28063                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28064 74E5           24                     FE  and	al,#$FE
28065                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28066 74E7           30E4                       xor	ah,ah
28067 74E9           8946         FA            mov	-6[bp],ax
28068                                           !BCC_EOS
28069                                           ! 3772         if (crtc_addr = 0x3d4)
28070                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28071 74EC           B8                   03D4  mov	ax,#$3D4
28072 74EF           8946         FC            mov	-4[bp],ax
28073 74F2           85C0                       test	ax,ax
28074 74F4           74           08            je  	.26B
28075                       000074F6            .26C:
28076                                           ! 3773             v |= 0
28077                                           ! 3773 x01;
28078                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28079 74F6           8B46         FA            mov	ax,-6[bp]
28080 74F9           0C                     01  or	al,*1
28081 74FB           8946         FA            mov	-6[bp],ax
28082                                           !BCC_EOS
28083                                           ! 3774         outb(0x3c2, v);
28084                       000074FE            .26B:
28085                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28086 74FE           FF76         FA            push	-6[bp]
28087                                           ! Debug: list int = const $3C2 (used reg = )
28088 7501           B8                   03C2  mov	ax,#$3C2
28089 7504           50                         push	ax
28090                                           ! Debug: func () void = outb+0 (used reg = )
28091 7505           E8         0605            call	_outb
28092 7508           83C4                   04  add	sp,*4
28093                                           !BCC_EOS
28094                                           ! 3775         outb(crtc_addr, 0x11);
28095                                           ! Debug: list int = const $11 (used reg = )
28096 750B           B8                   0011  mov	ax,*$11
28097 750E           50                         push	ax
28098                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28099 750F           FF76         FC            push	-4[bp]
28100                                           ! Debug: func () void = outb+0 (used reg = )
28101 7512           E8         05F8            call	_outb
28102 7515           83C4                   04  add	sp,*4
28103                                           !BCC_EOS
28104                                           ! 3776         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28105                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28106 7518           8B46         08            mov	ax,8[bp]
28107                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28108                                           ! Debug: list unsigned int = ax-7 (used reg = )
28109 751B           05                   FFF9  add	ax,*-7
28110 751E           50                         push	ax
28111                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28112 751F           FF76         06            push	6[bp]
28113                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28114 7522           E8         057C            call	_read_byte
28115 7525           83C4                   04  add	sp,*4
28116                                           ! Debug: list unsigned char = al+0 (used reg = )
28117 7528           30E4                       xor	ah,ah
28118 752A           50                         push	ax
28119                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28120 752B           8B46         FC            mov	ax,-4[bp]
28121                                           ! Debug: list unsigned int = ax+1 (used reg = )
28122 752E           40                         inc	ax
28123 752F           50                         push	ax
28124                                           ! Debug: func () void = outb+0 (used reg = )
28125 7530           E8         05DA            call	_outb
28126 7533           83C4                   04  add	sp,*4
28127                                           !BCC_EOS
28128                                           ! 3777         ar_index = read_byte(ES, addr1 + 0x03);
28129                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28130 7536           8B46         F8            mov	ax,-8[bp]
28131                                           ! Debug: list unsigned int = ax+3 (used reg = )
28132 7539           05                   0003  add	ax,*3
28133 753C           50                         push	ax
28134                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28135 753D           FF76         06            push	6[bp]
28136                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28137 7540           E8         055E            call	_read_byte
28138 7543           83C4                   04  add	sp,*4
28139                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28140 7546           30E4                       xor	ah,ah
28141 7548           8946         F6            mov	-$A[bp],ax
28142                                           !BCC_EOS
28143                                           ! 3778         inb(0x3da);
28144                                           ! Debug: list int = const $3DA (used reg = )
28145 754B           B8                   03DA  mov	ax,#$3DA
28146 754E           50                         push	ax
28147                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28148 754F           E8         05A5            call	_inb
28149 7552           44                         inc	sp
28150 7553           44                         inc	sp
28151                                           !BCC_EOS
28152                                           ! 3779         for(i=0;i<=0x13;i++) {
28153                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28154 7554           31C0                       xor	ax,ax
28155 7556           8946         FE            mov	-2[bp],ax
28156                                           !BCC_EOS
28157                                           !BCC_EOS
28158 7559           EB           3C            jmp .26F
28159                       0000755B            .270:
28160                                           ! 3780             outb(0x3c0, i | (ar_index & 0x20));
28161                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28162 755B           8A46         F6            mov	al,-$A[bp]
28163 755E           24                     20  and	al,*$20
28164                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28165                                           ! Debug: expression subtree swapping
28166 7560           30E4                       xor	ah,ah
28167 7562           0B46         FE            or	ax,-2[bp]
28168                                           ! Debug: list unsigned int = ax+0 (used reg = )
28169 7565           50                         push	ax
28170                                           ! Debug: list int = const $3C0 (used reg = )
28171 7566           B8                   03C0  mov	ax,#$3C0
28172 7569           50                         push	ax
28173                                           ! Debug: func () void = outb+0 (used reg = )
28174 756A           E8         05A0            call	_outb
28175 756D           83C4                   04  add	sp,*4
28176                                           !BCC_EOS
28177                                           ! 3781             outb(0x3c0, read_byte(ES, BX)); BX++;
28178                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28179 7570           FF76         08            push	8[bp]
28180                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28181 7573           FF76         06            push	6[bp]
28182                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28183 7576           E8         0528            call	_read_byte
28184 7579           83C4                   04  add	sp,*4
28185                                           ! Debug: list unsigned char = al+0 (used reg = )
28186 757C           30E4                       xor	ah,ah
28187 757E           50                         push	ax
28188                                           ! Debug: list int = const $3C0 (used reg = )
28189 757F           B8                   03C0  mov	ax,#$3C0
28190 7582           50                         push	ax
28191                                           ! Debug: func () void = outb+0 (used reg = )
28192 7583           E8         0587            call	_outb
28193 7586           83C4                   04  add	sp,*4
28194                                           !BCC_EOS
28195                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28196 7589           8B46         08            mov	ax,8[bp]
28197 758C           40                         inc	ax
28198 758D           8946         08            mov	8[bp],ax
28199                                           !BCC_EOS
28200                                           ! 3782         }
28201                                           ! 3783         outb(0x3c0, ar_index);
28202                       00007590            .26E:
28203                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28204 7590           8B46         FE            mov	ax,-2[bp]
28205 7593           40                         inc	ax
28206 7594           8946         FE            mov	-2[bp],ax
28207                       00007597            .26F:
28208                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28209 7597           8B46         FE            mov	ax,-2[bp]
28210 759A           3D                   0013  cmp	ax,*$13
28211 759D           76           BC            jbe	.270
28212                       0000759F            .271:
28213                       0000759F            .26D:
28214                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28215 759F           FF76         F6            push	-$A[bp]
28216                                           ! Debug: list int = const $3C0 (used reg = )
28217 75A2           B8                   03C0  mov	ax,#$3C0
28218 75A5           50                         push	ax
28219                                           ! Debug: func () void = outb+0 (used reg = )
28220 75A6           E8         0564            call	_outb
28221 75A9           83C4                   04  add	sp,*4
28222                                           !BCC_EOS
28223                                           ! 3784         inb(0x3da);
28224                                           ! Debug: list int = const $3DA (used reg = )
28225 75AC           B8                   03DA  mov	ax,#$3DA
28226 75AF           50                         push	ax
28227                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28228 75B0           E8         0544            call	_inb
28229 75B3           44                         inc	sp
28230 75B4           44                         inc	sp
28231                                           !BCC_EOS
28232                                           ! 3785         for(i=0;i<=8;i++) {
28233                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28234 75B5           31C0                       xor	ax,ax
28235 75B7           8946         FE            mov	-2[bp],ax
28236                                           !BCC_EOS
28237                                           !BCC_EOS
28238 75BA           EB           34            jmp .274
28239                       000075BC            .275:
28240                                           ! 3786             outb(0x3ce,i);
28241                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28242 75BC           FF76         FE            push	-2[bp]
28243                                           ! Debug: list int = const $3CE (used reg = )
28244 75BF           B8                   03CE  mov	ax,#$3CE
28245 75C2           50                         push	ax
28246                                           ! Debug: func () void = outb+0 (used reg = )
28247 75C3           E8         0547            call	_outb
28248 75C6           83C4                   04  add	sp,*4
28249                                           !BCC_EOS
28250                                           ! 3787             outb(0x3cf, read_byte(ES, BX)); BX++;
28251                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28252 75C9           FF76         08            push	8[bp]
28253                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28254 75CC           FF76         06            push	6[bp]
28255                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28256 75CF           E8         04CF            call	_read_byte
28257 75D2           83C4                   04  add	sp,*4
28258                                           ! Debug: list unsigned char = al+0 (used reg = )
28259 75D5           30E4                       xor	ah,ah
28260 75D7           50                         push	ax
28261                                           ! Debug: list int = const $3CF (used reg = )
28262 75D8           B8                   03CF  mov	ax,#$3CF
28263 75DB           50                         push	ax
28264                                           ! Debug: func () void = outb+0 (used reg = )
28265 75DC           E8         052E            call	_outb
28266 75DF           83C4                   04  add	sp,*4
28267                                           !BCC_EOS
28268                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28269 75E2           8B46         08            mov	ax,8[bp]
28270 75E5           40                         inc	ax
28271 75E6           8946         08            mov	8[bp],ax
28272                                           !BCC_EOS
28273                                           ! 3788         }
28274                                           ! 3789         BX += 2;
28275                       000075E9            .273:
28276                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28277 75E9           8B46         FE            mov	ax,-2[bp]
28278 75EC           40                         inc	ax
28279 75ED           8946         FE            mov	-2[bp],ax
28280                       000075F0            .274:
28281                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28282 75F0           8B46         FE            mov	ax,-2[bp]
28283 75F3           3D                   0008  cmp	ax,*8
28284 75F6           76           C4            jbe	.275
28285                       000075F8            .276:
28286                       000075F8            .272:
28287                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28288 75F8           8B46         08            mov	ax,8[bp]
28289 75FB           40                         inc	ax
28290 75FC           40                         inc	ax
28291 75FD           8946         08            mov	8[bp],ax
28292                                           !BCC_EOS
28293                                           ! 3790         BX += 4;
28294                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28295 7600           8B46         08            mov	ax,8[bp]
28296 7603           05                   0004  add	ax,*4
28297 7606           8946         08            mov	8[bp],ax
28298                                           !BCC_EOS
28299                                           ! 3791         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28300                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28301 7609           FF76         F8            push	-8[bp]
28302                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28303 760C           FF76         06            push	6[bp]
28304                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28305 760F           E8         048F            call	_read_byte
28306 7612           83C4                   04  add	sp,*4
28307                                           ! Debug: list unsigned char = al+0 (used reg = )
28308 7615           30E4                       xor	ah,ah
28309 7617           50                         push	ax
28310                                           ! Debug: list int = const $3C4 (used reg = )
28311 7618           B8                   03C4  mov	ax,#$3C4
28312 761B           50                         push	ax
28313                                           ! Debug: func () void = outb+0 (used reg = )
28314 761C           E8         04EE            call	_outb
28315 761F           83C4                   04  add	sp,*4
28316                                           !BCC_EOS
28317                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28318 7622           8B46         F8            mov	ax,-8[bp]
28319 7625           40                         inc	ax
28320 7626           8946         F8            mov	-8[bp],ax
28321                                           !BCC_EOS
28322                                           ! 3792         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28323                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28324 7629           FF76         F8            push	-8[bp]
28325                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28326 762C           FF76         06            push	6[bp]
28327                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28328 762F           E8         046F            call	_read_byte
28329 7632           83C4                   04  add	sp,*4
28330                                           ! Debug: list unsigned char = al+0 (used reg = )
28331 7635           30E4                       xor	ah,ah
28332 7637           50                         push	ax
28333                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28334 7638           FF76         FC            push	-4[bp]
28335                                           ! Debug: func () void = outb+0 (used reg = )
28336 763B           E8         04CF            call	_outb
28337 763E           83C4                   04  add	sp,*4
28338                                           !BCC_EOS
28339                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28340 7641           8B46         F8            mov	ax,-8[bp]
28341 7644           40                         inc	ax
28342 7645           8946         F8            mov	-8[bp],ax
28343                                           !BCC_EOS
28344                                           ! 3793         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28345                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28346 7648           FF76         F8            push	-8[bp]
28347                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28348 764B           FF76         06            push	6[bp]
28349                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28350 764E           E8         0450            call	_read_byte
28351 7651           83C4                   04  add	sp,*4
28352                                           ! Debug: list unsigned char = al+0 (used reg = )
28353 7654           30E4                       xor	ah,ah
28354 7656           50                         push	ax
28355                                           ! Debug: list int = const $3CE (used reg = )
28356 7657           B8                   03CE  mov	ax,#$3CE
28357 765A           50                         push	ax
28358                                           ! Debug: func () void = outb+0 (used reg = )
28359 765B           E8         04AF            call	_outb
28360 765E           83C4                   04  add	sp,*4
28361                                           !BCC_EOS
28362                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28363 7661           8B46         F8            mov	ax,-8[bp]
28364 7664           40                         inc	ax
28365 7665           8946         F8            mov	-8[bp],ax
28366                                           !BCC_EOS
28367                                           ! 3794         addr1++;
28368                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28369 7668           8B46         F8            mov	ax,-8[bp]
28370 766B           40                         inc	ax
28371 766C           8946         F8            mov	-8[bp],ax
28372                                           !BCC_EOS
28373                                           ! 3795         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28374                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28375 766F           FF76         F8            push	-8[bp]
28376                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28377 7672           FF76         06            push	6[bp]
28378                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28379 7675           E8         0429            call	_read_byte
28380 7678           83C4                   04  add	sp,*4
28381                                           ! Debug: list unsigned char = al+0 (used reg = )
28382 767B           30E4                       xor	ah,ah
28383 767D           50                         push	ax
28384                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28385 767E           8B46         FC            mov	ax,-4[bp]
28386                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28387                                           ! Debug: list unsigned int = ax+6 (used reg = )
28388 7681           05                   0006  add	ax,*6
28389 7684           50                         push	ax
28390                                           ! Debug: func () void = outb+0 (used reg = )
28391 7685           E8         0485            call	_outb
28392 7688           83C4                   04  add	sp,*4
28393                                           !BCC_EOS
28394                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28395 768B           8B46         F8            mov	ax,-8[bp]
28396 768E           40                         inc	ax
28397 768F           8946         F8            mov	-8[bp],ax
28398                                           !BCC_EOS
28399                                           ! 3796     }
28400                                           ! 3797     if (CX & 2) {
28401                       00007692            .25D:
28402                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28403 7692           8A46         04            mov	al,4[bp]
28404 7695           24                     02  and	al,*2
28405 7697           84C0                       test	al,al
28406 7699         0F84         0270            beq 	.277
28407                       0000769D            .278:
28408                                           ! 3798         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28409                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28410 769D           FF76         08            push	8[bp]
28411                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28412 76A0           FF76         06            push	6[bp]
28413                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28414 76A3           E8         03FB            call	_read_byte
28415 76A6           83C4                   04  add	sp,*4
28416                                           ! Debug: list unsigned char = al+0 (used reg = )
28417 76A9           30E4                       xor	ah,ah
28418 76AB           50                         push	ax
28419                                           ! Debug: list int = const $49 (used reg = )
28420 76AC           B8                   0049  mov	ax,*$49
28421 76AF           50                         push	ax
28422                                           ! Debug: list int = const $40 (used reg = )
28423 76B0           B8                   0040  mov	ax,*$40
28424 76B3           50                         push	ax
28425                                           ! Debug: func () void = write_byte+0 (used reg = )
28426 76B4           E8         0410            call	_write_byte
28427 76B7           83C4                   06  add	sp,*6
28428                                           !BCC_EOS
28429                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28430 76BA           8B46         08            mov	ax,8[bp]
28431 76BD           40                         inc	ax
28432 76BE           8946         08            mov	8[bp],ax
28433                                           !BCC_EOS
28434                                           ! 3799         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28435                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28436 76C1           FF76         08            push	8[bp]
28437                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28438 76C4           FF76         06            push	6[bp]
28439                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28440 76C7           E8         03EA            call	_read_word
28441 76CA           83C4                   04  add	sp,*4
28442                                           ! Debug: list unsigned short = ax+0 (used reg = )
28443 76CD           50                         push	ax
28444                                           ! Debug: list int = const $4A (used reg = )
28445 76CE           B8                   004A  mov	ax,*$4A
28446 76D1           50                         push	ax
28447                                           ! Debug: list int = const $40 (used reg = )
28448 76D2           B8                   0040  mov	ax,*$40
28449 76D5           50                         push	ax
28450                                           ! Debug: func () void = write_word+0 (used reg = )
28451 76D6           E8         0406            call	_write_word
28452 76D9           83C4                   06  add	sp,*6
28453                                           !BCC_EOS
28454                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28455 76DC           8B46         08            mov	ax,8[bp]
28456 76DF           40                         inc	ax
28457 76E0           40                         inc	ax
28458 76E1           8946         08            mov	8[bp],ax
28459                                           !BCC_EOS
28460                                           ! 3800         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28461                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28462 76E4           FF76         08            push	8[bp]
28463                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28464 76E7           FF76         06            push	6[bp]
28465                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28466 76EA           E8         03C7            call	_read_word
28467 76ED           83C4                   04  add	sp,*4
28468                                           ! Debug: list unsigned short = ax+0 (used reg = )
28469 76F0           50                         push	ax
28470                                           ! Debug: list int = const $4C (used reg = )
28471 76F1           B8                   004C  mov	ax,*$4C
28472 76F4           50                         push	ax
28473                                           ! Debug: list int = const $40 (used reg = )
28474 76F5           B8                   0040  mov	ax,*$40
28475 76F8           50                         push	ax
28476                                           ! Debug: func () void = write_word+0 (used reg = )
28477 76F9           E8         03E3            call	_write_word
28478 76FC           83C4                   06  add	sp,*6
28479                                           !BCC_EOS
28480                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28481 76FF           8B46         08            mov	ax,8[bp]
28482 7702           40                         inc	ax
28483 7703           40                         inc	ax
28484 7704           8946         08            mov	8[bp],ax
28485                                           !BCC_EOS
28486                                           ! 3801         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
28487                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28488 7707           FF76         08            push	8[bp]
28489                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28490 770A           FF76         06            push	6[bp]
28491                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28492 770D           E8         03A4            call	_read_word
28493 7710           83C4                   04  add	sp,*4
28494                                           ! Debug: list unsigned short = ax+0 (used reg = )
28495 7713           50                         push	ax
28496                                           ! Debug: list int = const $63 (used reg = )
28497 7714           B8                   0063  mov	ax,*$63
28498 7717           50                         push	ax
28499                                           ! Debug: list int = const $40 (used reg = )
28500 7718           B8                   0040  mov	ax,*$40
28501 771B           50                         push	ax
28502                                           ! Debug: func () void = write_word+0 (used reg = )
28503 771C           E8         03C0            call	_write_word
28504 771F           83C4                   06  add	sp,*6
28505                                           !BCC_EOS
28506                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28507 7722           8B46         08            mov	ax,8[bp]
28508 7725           40                         inc	ax
28509 7726           40                         inc	ax
28510 7727           8946         08            mov	8[bp],ax
28511                                           !BCC_EOS
28512                                           ! 3802         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
28513                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28514 772A           FF76         08            push	8[bp]
28515                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28516 772D           FF76         06            push	6[bp]
28517                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28518 7730           E8         036E            call	_read_byte
28519 7733           83C4                   04  add	sp,*4
28520                                           ! Debug: list unsigned char = al+0 (used reg = )
28521 7736           30E4                       xor	ah,ah
28522 7738           50                         push	ax
28523                                           ! Debug: list int = const $84 (used reg = )
28524 7739           B8                   0084  mov	ax,#$84
28525 773C           50                         push	ax
28526                                           ! Debug: list int = const $40 (used reg = )
28527 773D           B8                   0040  mov	ax,*$40
28528 7740           50                         push	ax
28529                                           ! Debug: func () void = write_byte+0 (used reg = )
28530 7741           E8         0383            call	_write_byte
28531 7744           83C4                   06  add	sp,*6
28532                                           !BCC_EOS
28533                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28534 7747           8B46         08            mov	ax,8[bp]
28535 774A           40                         inc	ax
28536 774B           8946         08            mov	8[bp],ax
28537                                           !BCC_EOS
28538                                           ! 3803         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
28539                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28540 774E           FF76         08            push	8[bp]
28541                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28542 7751           FF76         06            push	6[bp]
28543                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28544 7754           E8         035D            call	_read_word
28545 7757           83C4                   04  add	sp,*4
28546                                           ! Debug: list unsigned short = ax+0 (used reg = )
28547 775A           50                         push	ax
28548                                           ! Debug: list int = const $85 (used reg = )
28549 775B           B8                   0085  mov	ax,#$85
28550 775E           50                         push	ax
28551                                           ! Debug: list int = const $40 (used reg = )
28552 775F           B8                   0040  mov	ax,*$40
28553 7762           50                         push	ax
28554                                           ! Debug: func () void = write_word+0 (used reg = )
28555 7763           E8         0379            call	_write_word
28556 7766           83C4                   06  add	sp,*6
28557                                           !BCC_EOS
28558                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28559 7769           8B46         08            mov	ax,8[bp]
28560 776C           40                         inc	ax
28561 776D           40                         inc	ax
28562 776E           8946         08            mov	8[bp],ax
28563                                           !BCC_EOS
28564                                           ! 3804         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
28565                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28566 7771           FF76         08            push	8[bp]
28567                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28568 7774           FF76         06            push	6[bp]
28569                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28570 7777           E8         0327            call	_read_byte
28571 777A           83C4                   04  add	sp,*4
28572                                           ! Debug: list unsigned char = al+0 (used reg = )
28573 777D           30E4                       xor	ah,ah
28574 777F           50                         push	ax
28575                                           ! Debug: list int = const $87 (used reg = )
28576 7780           B8                   0087  mov	ax,#$87
28577 7783           50                         push	ax
28578                                           ! Debug: list int = const $40 (used reg = )
28579 7784           B8                   0040  mov	ax,*$40
28580 7787           50                         push	ax
28581                                           ! Debug: func () void = write_byte+0 (used reg = )
28582 7788           E8         033C            call	_write_byte
28583 778B           83C4                   06  add	sp,*6
28584                                           !BCC_EOS
28585                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28586 778E           8B46         08            mov	ax,8[bp]
28587 7791           40                         inc	ax
28588 7792           8946         08            mov	8[bp],ax
28589                                           !BCC_EOS
28590                                           ! 3805         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
28591                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28592 7795           FF76         08            push	8[bp]
28593                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28594 7798           FF76         06            push	6[bp]
28595                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28596 779B           E8         0303            call	_read_byte
28597 779E           83C4                   04  add	sp,*4
28598                                           ! Debug: list unsigned char = al+0 (used reg = )
28599 77A1           30E4                       xor	ah,ah
28600 77A3           50                         push	ax
28601                                           ! Debug: list int = const $88 (used reg = )
28602 77A4           B8                   0088  mov	ax,#$88
28603 77A7           50                         push	ax
28604                                           ! Debug: list int = const $40 (used reg = )
28605 77A8           B8                   0040  mov	ax,*$40
28606 77AB           50                         push	ax
28607                                           ! Debug: func () void = write_byte+0 (used reg = )
28608 77AC           E8         0318            call	_write_byte
28609 77AF           83C4                   06  add	sp,*6
28610                                           !BCC_EOS
28611                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28612 77B2           8B46         08            mov	ax,8[bp]
28613 77B5           40                         inc	ax
28614 77B6           8946         08            mov	8[bp],ax
28615                                           !BCC_EOS
28616                                           ! 3806         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
28617                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28618 77B9           FF76         08            push	8[bp]
28619                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28620 77BC           FF76         06            push	6[bp]
28621                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28622 77BF           E8         02DF            call	_read_byte
28623 77C2           83C4                   04  add	sp,*4
28624                                           ! Debug: list unsigned char = al+0 (used reg = )
28625 77C5           30E4                       xor	ah,ah
28626 77C7           50                         push	ax
28627                                           ! Debug: list int = const $89 (used reg = )
28628 77C8           B8                   0089  mov	ax,#$89
28629 77CB           50                         push	ax
28630                                           ! Debug: list int = const $40 (used reg = )
28631 77CC           B8                   0040  mov	ax,*$40
28632 77CF           50                         push	ax
28633                                           ! Debug: func () void = write_byte+0 (used reg = )
28634 77D0           E8         02F4            call	_write_byte
28635 77D3           83C4                   06  add	sp,*6
28636                                           !BCC_EOS
28637                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28638 77D6           8B46         08            mov	ax,8[bp]
28639 77D9           40                         inc	ax
28640 77DA           8946         08            mov	8[bp],ax
28641                                           !BCC_EOS
28642                                           ! 3807         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
28643                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28644 77DD           FF76         08            push	8[bp]
28645                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28646 77E0           FF76         06            push	6[bp]
28647                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28648 77E3           E8         02CE            call	_read_word
28649 77E6           83C4                   04  add	sp,*4
28650                                           ! Debug: list unsigned short = ax+0 (used reg = )
28651 77E9           50                         push	ax
28652                                           ! Debug: list int = const $60 (used reg = )
28653 77EA           B8                   0060  mov	ax,*$60
28654 77ED           50                         push	ax
28655                                           ! Debug: list int = const $40 (used reg = )
28656 77EE           B8                   0040  mov	ax,*$40
28657 77F1           50                         push	ax
28658                                           ! Debug: func () void = write_word+0 (used reg = )
28659 77F2           E8         02EA            call	_write_word
28660 77F5           83C4                   06  add	sp,*6
28661                                           !BCC_EOS
28662                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28663 77F8           8B46         08            mov	ax,8[bp]
28664 77FB           40                         inc	ax
28665 77FC           40                         inc	ax
28666 77FD           8946         08            mov	8[bp],ax
28667                                           !BCC_EOS
28668                                           ! 3808         for(i=0;i<8;i++) {
28669                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28670 7800           31C0                       xor	ax,ax
28671 7802           8946         FE            mov	-2[bp],ax
28672                                           !BCC_EOS
28673                                           !BCC_EOS
28674 7805           EB           2F            jmp .27B
28675                       00007807            .27C:
28676                                           ! 3809             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
28677                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28678 7807           FF76         08            push	8[bp]
28679                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28680 780A           FF76         06            push	6[bp]
28681                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28682 780D           E8         02A4            call	_read_word
28683 7810           83C4                   04  add	sp,*4
28684                                           ! Debug: list unsigned short = ax+0 (used reg = )
28685 7813           50                         push	ax
28686                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
28687                                           ! Debug: expression subtree swapping
28688 7814           8B46         FE            mov	ax,-2[bp]
28689 7817           D1E0                       shl	ax,*1
28690                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28691                                           ! Debug: expression subtree swapping
28692                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28693 7819           05                   0050  add	ax,*$50
28694 781C           50                         push	ax
28695                                           ! Debug: list int = const $40 (used reg = )
28696 781D           B8                   0040  mov	ax,*$40
28697 7820           50                         push	ax
28698                                           ! Debug: func () void = write_word+0 (used reg = )
28699 7821           E8         02BB            call	_write_word
28700 7824           83C4                   06  add	sp,*6
28701                                           !BCC_EOS
28702                                           ! 3810             BX += 2;
28703                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28704 7827           8B46         08            mov	ax,8[bp]
28705 782A           40                         inc	ax
28706 782B           40                         inc	ax
28707 782C           8946         08            mov	8[bp],ax
28708                                           !BCC_EOS
28709                                           ! 3811         }
28710                                           ! 3812         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
28711                       0000782F            .27A:
28712                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28713 782F           8B46         FE            mov	ax,-2[bp]
28714 7832           40                         inc	ax
28715 7833           8946         FE            mov	-2[bp],ax
28716                       00007836            .27B:
28717                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28718 7836           8B46         FE            mov	ax,-2[bp]
28719 7839           3D                   0008  cmp	ax,*8
28720 783C           72           C9            jb 	.27C
28721                       0000783E            .27D:
28722                       0000783E            .279:
28723                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28724 783E           FF76         08            push	8[bp]
28725                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28726 7841           FF76         06            push	6[bp]
28727                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28728 7844           E8         026D            call	_read_word
28729 7847           83C4                   04  add	sp,*4
28730                                           ! Debug: list unsigned short = ax+0 (used reg = )
28731 784A           50                         push	ax
28732                                           ! Debug: list int = const $4E (used reg = )
28733 784B           B8                   004E  mov	ax,*$4E
28734 784E           50                         push	ax
28735                                           ! Debug: list int = const $40 (used reg = )
28736 784F           B8                   0040  mov	ax,*$40
28737 7852           50                         push	ax
28738                                           ! Debug: func () void = write_word+0 (used reg = )
28739 7853           E8         0289            call	_write_word
28740 7856           83C4                   06  add	sp,*6
28741                                           !BCC_EOS
28742                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28743 7859           8B46         08            mov	ax,8[bp]
28744 785C           40                         inc	ax
28745 785D           40                         inc	ax
28746 785E           8946         08            mov	8[bp],ax
28747                                           !BCC_EOS
28748                                           ! 3813         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
28749                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28750 7861           FF76         08            push	8[bp]
28751                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28752 7864           FF76         06            push	6[bp]
28753                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28754 7867           E8         0237            call	_read_byte
28755 786A           83C4                   04  add	sp,*4
28756                                           ! Debug: list unsigned char = al+0 (used reg = )
28757 786D           30E4                       xor	ah,ah
28758 786F           50                         push	ax
28759                                           ! Debug: list int = const $62 (used reg = )
28760 7870           B8                   0062  mov	ax,*$62
28761 7873           50                         push	ax
28762                                           ! Debug: list int = const $40 (used reg = )
28763 7874           B8                   0040  mov	ax,*$40
28764 7877           50                         push	ax
28765                                           ! Debug: func () void = write_byte+0 (used reg = )
28766 7878           E8         024C            call	_write_byte
28767 787B           83C4                   06  add	sp,*6
28768                                           !BCC_EOS
28769                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28770 787E           8B46         08            mov	ax,8[bp]
28771 7881           40                         inc	ax
28772 7882           8946         08            mov	8[bp],ax
28773                                           !BCC_EOS
28774                                           ! 3814         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
28775                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28776 7885           FF76         08            push	8[bp]
28777                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28778 7888           FF76         06            push	6[bp]
28779                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28780 788B           E8         0226            call	_read_word
28781 788E           83C4                   04  add	sp,*4
28782                                           ! Debug: list unsigned short = ax+0 (used reg = )
28783 7891           50                         push	ax
28784                                           ! Debug: list int = const $7C (used reg = )
28785 7892           B8                   007C  mov	ax,*$7C
28786 7895           50                         push	ax
28787                                           ! Debug: list int = const 0 (used reg = )
28788 7896           31C0                       xor	ax,ax
28789 7898           50                         push	ax
28790                                           ! Debug: func () void = write_word+0 (used reg = )
28791 7899           E8         0243            call	_write_word
28792 789C           83C4                   06  add	sp,*6
28793                                           !BCC_EOS
28794                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28795 789F           8B46         08            mov	ax,8[bp]
28796 78A2           40                         inc	ax
28797 78A3           40                         inc	ax
28798 78A4           8946         08            mov	8[bp],ax
28799                                           !BCC_EOS
28800                                           ! 3815         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
28801                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28802 78A7           FF76         08            push	8[bp]
28803                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28804 78AA           FF76         06            push	6[bp]
28805                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28806 78AD           E8         0204            call	_read_word
28807 78B0           83C4                   04  add	sp,*4
28808                                           ! Debug: list unsigned short = ax+0 (used reg = )
28809 78B3           50                         push	ax
28810                                           ! Debug: list int = const $7E (used reg = )
28811 78B4           B8                   007E  mov	ax,*$7E
28812 78B7           50                         push	ax
28813                                           ! Debug: list int = const 0 (used reg = )
28814 78B8           31C0                       xor	ax,ax
28815 78BA           50                         push	ax
28816                                           ! Debug: func () void = write_word+0 (used reg = )
28817 78BB           E8         0221            call	_write_word
28818 78BE           83C4                   06  add	sp,*6
28819                                           !BCC_EOS
28820                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28821 78C1           8B46         08            mov	ax,8[bp]
28822 78C4           40                         inc	ax
28823 78C5           40                         inc	ax
28824 78C6           8946         08            mov	8[bp],ax
28825                                           !BCC_EOS
28826                                           ! 3816         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
28827                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28828 78C9           FF76         08            push	8[bp]
28829                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28830 78CC           FF76         06            push	6[bp]
28831                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28832 78CF           E8         01E2            call	_read_word
28833 78D2           83C4                   04  add	sp,*4
28834                                           ! Debug: list unsigned short = ax+0 (used reg = )
28835 78D5           50                         push	ax
28836                                           ! Debug: list int = const $10C (used reg = )
28837 78D6           B8                   010C  mov	ax,#$10C
28838 78D9           50                         push	ax
28839                                           ! Debug: list int = const 0 (used reg = )
28840 78DA           31C0                       xor	ax,ax
28841 78DC           50                         push	ax
28842                                           ! Debug: func () void = write_word+0 (used reg = )
28843 78DD           E8         01FF            call	_write_word
28844 78E0           83C4                   06  add	sp,*6
28845                                           !BCC_EOS
28846                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28847 78E3           8B46         08            mov	ax,8[bp]
28848 78E6           40                         inc	ax
28849 78E7           40                         inc	ax
28850 78E8           8946         08            mov	8[bp],ax
28851                                           !BCC_EOS
28852                                           ! 3817         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
28853                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28854 78EB           FF76         08            push	8[bp]
28855                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28856 78EE           FF76         06            push	6[bp]
28857                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28858 78F1           E8         01C0            call	_read_word
28859 78F4           83C4                   04  add	sp,*4
28860                                           ! Debug: list unsigned short = ax+0 (used reg = )
28861 78F7           50                         push	ax
28862                                           ! Debug: list int = const $10E (used reg = )
28863 78F8           B8                   010E  mov	ax,#$10E
28864 78FB           50                         push	ax
28865                                           ! Debug: list int = const 0 (used reg = )
28866 78FC           31C0                       xor	ax,ax
28867 78FE           50                         push	ax
28868                                           ! Debug: func () void = write_word+0 (used reg = )
28869 78FF           E8         01DD            call	_write_word
28870 7902           83C4                   06  add	sp,*6
28871                                           !BCC_EOS
28872                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28873 7905           8B46         08            mov	ax,8[bp]
28874 7908           40                         inc	ax
28875 7909           40                         inc	ax
28876 790A           8946         08            mov	8[bp],ax
28877                                           !BCC_EOS
28878                                           ! 3818     }
28879                                           ! 3819     if (CX & 4) {
28880                       0000790D            .277:
28881                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
28882 790D           8A46         04            mov	al,4[bp]
28883 7910           24                     04  and	al,*4
28884 7912           84C0                       test	al,al
28885 7914         0F84         0096            beq 	.27E
28886                       00007918            .27F:
28887                                           ! 3820         BX++;
28888                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28889 7918           8B46         08            mov	ax,8[bp]
28890 791B           40                         inc	ax
28891 791C           8946         08            mov	8[bp],ax
28892                                           !BCC_EOS
28893                                           ! 3821         v = read_byte(ES, BX); BX++;
28894                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28895 791F           FF76         08            push	8[bp]
28896                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28897 7922           FF76         06            push	6[bp]
28898                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28899 7925           E8         0179            call	_read_byte
28900 7928           83C4                   04  add	sp,*4
28901                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28902 792B           30E4                       xor	ah,ah
28903 792D           8946         FA            mov	-6[bp],ax
28904                                           !BCC_EOS
28905                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28906 7930           8B46         08            mov	ax,8[bp]
28907 7933           40                         inc	ax
28908 7934           8946         08            mov	8[bp],ax
28909                                           !BCC_EOS
28910                                           ! 3822         outb(0x3c6, read_byte(ES, BX)); BX++;
28911                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28912 7937           FF76         08            push	8[bp]
28913                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28914 793A           FF76         06            push	6[bp]
28915                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28916 793D           E8         0161            call	_read_byte
28917 7940           83C4                   04  add	sp,*4
28918                                           ! Debug: list unsigned char = al+0 (used reg = )
28919 7943           30E4                       xor	ah,ah
28920 7945           50                         push	ax
28921                                           ! Debug: list int = const $3C6 (used reg = )
28922 7946           B8                   03C6  mov	ax,#$3C6
28923 7949           50                         push	ax
28924                                           ! Debug: func () void = outb+0 (used reg = )
28925 794A           E8         01C0            call	_outb
28926 794D           83C4                   04  add	sp,*4
28927                                           !BCC_EOS
28928                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28929 7950           8B46         08            mov	ax,8[bp]
28930 7953           40                         inc	ax
28931 7954           8946         08            mov	8[bp],ax
28932                                           !BCC_EOS
28933                                           ! 3823         outb(0x3c8,0x00);
28934                                           ! Debug: list int = const 0 (used reg = )
28935 7957           31C0                       xor	ax,ax
28936 7959           50                         push	ax
28937                                           ! Debug: list int = const $3C8 (used reg = )
28938 795A           B8                   03C8  mov	ax,#$3C8
28939 795D           50                         push	ax
28940                                           ! Debug: func () void = outb+0 (used reg = )
28941 795E           E8         01AC            call	_outb
28942 7961           83C4                   04  add	sp,*4
28943                                           !BCC_EOS
28944                                           ! 3824         for(i=0;i<256*3;i++) {
28945                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28946 7964           31C0                       xor	ax,ax
28947 7966           8946         FE            mov	-2[bp],ax
28948                                           !BCC_EOS
28949                                           !BCC_EOS
28950 7969           EB           27            jmp .282
28951                       0000796B            .283:
28952                                           ! 3825             ou
28953                                           ! 3825 tb(0x3c9, read_byte(ES, BX)); BX++;
28954                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28955 796B           FF76         08            push	8[bp]
28956                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28957 796E           FF76         06            push	6[bp]
28958                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28959 7971           E8         012D            call	_read_byte
28960 7974           83C4                   04  add	sp,*4
28961                                           ! Debug: list unsigned char = al+0 (used reg = )
28962 7977           30E4                       xor	ah,ah
28963 7979           50                         push	ax
28964                                           ! Debug: list int = const $3C9 (used reg = )
28965 797A           B8                   03C9  mov	ax,#$3C9
28966 797D           50                         push	ax
28967                                           ! Debug: func () void = outb+0 (used reg = )
28968 797E           E8         018C            call	_outb
28969 7981           83C4                   04  add	sp,*4
28970                                           !BCC_EOS
28971                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28972 7984           8B46         08            mov	ax,8[bp]
28973 7987           40                         inc	ax
28974 7988           8946         08            mov	8[bp],ax
28975                                           !BCC_EOS
28976                                           ! 3826         }
28977                                           ! 3827         BX++;
28978                       0000798B            .281:
28979                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28980 798B           8B46         FE            mov	ax,-2[bp]
28981 798E           40                         inc	ax
28982 798F           8946         FE            mov	-2[bp],ax
28983                       00007992            .282:
28984                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
28985 7992           8B46         FE            mov	ax,-2[bp]
28986 7995           3D                   0300  cmp	ax,#$300
28987 7998           72           D1            jb 	.283
28988                       0000799A            .284:
28989                       0000799A            .280:
28990                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28991 799A           8B46         08            mov	ax,8[bp]
28992 799D           40                         inc	ax
28993 799E           8946         08            mov	8[bp],ax
28994                                           !BCC_EOS
28995                                           ! 3828         outb(0x3c8, v);
28996                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28997 79A1           FF76         FA            push	-6[bp]
28998                                           ! Debug: list int = const $3C8 (used reg = )
28999 79A4           B8                   03C8  mov	ax,#$3C8
29000 79A7           50                         push	ax
29001                                           ! Debug: func () void = outb+0 (used reg = )
29002 79A8           E8         0162            call	_outb
29003 79AB           83C4                   04  add	sp,*4
29004                                           !BCC_EOS
29005                                           ! 3829     }
29006                                           ! 3830     return BX;
29007                       000079AE            .27E:
29008 79AE           8B46         08            mov	ax,8[bp]
29009 79B1           89EC                       mov	sp,bp
29010 79B3           5D                         pop	bp
29011 79B4           C3                         ret
29012                                           !BCC_EOS
29013                                           ! 3831 }
29014                                           ! 3832 static Bit8u find_vga_entry(mode)
29015                                           ! 3833 Bit8u mode;
29016                       000079B5            _find_vga_entry:
29017                                           !BCC_EOS
29018                                           ! 3834 {
29019                                           ! 3835  Bit8u i,line=0xFF;
29020 79B5           55                         push	bp
29021 79B6           89E5                       mov	bp,sp
29022 79B8           4C                         dec	sp
29023 79B9           4C                         dec	sp
29024                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29025 79BA           B0                     FF  mov	al,#$FF
29026 79BC           8846         FE            mov	-2[bp],al
29027                                           !BCC_EOS
29028                                           ! 3836  for(i=0;i<=15;i++)
29029                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29030 79BF           30C0                       xor	al,al
29031 79C1           8846         FF            mov	-1[bp],al
29032                                           !BCC_EOS
29033                                           !BCC_EOS
29034                                           ! 3837   if(vga_modes[i].svgamode==mode)
29035 79C4           EB           23            jmp .287
29036                       000079C6            .288:
29037                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29038 79C6           8A46         FF            mov	al,-1[bp]
29039 79C9           30E4                       xor	ah,ah
29040 79CB           B1                     03  mov	cl,*3
29041 79CD           D3E0                       shl	ax,cl
29042 79CF           89C3                       mov	bx,ax
29043                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29044 79D1           8A87       01DA            mov	al,_vga_modes[bx]
29045 79D5           3A46         04            cmp	al,4[bp]
29046 79D8           75           08            jne 	.289
29047                       000079DA            .28A:
29048                                           ! 3838    {line=i;
29049                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29050 79DA           8A46         FF            mov	al,-1[bp]
29051 79DD           8846         FE            mov	-2[bp],al
29052                                           !BCC_EOS
29053                                           ! 3839     break;
29054 79E0           EB           0E            jmp .285
29055                                           !BCC_EOS
29056                                           ! 3840    }
29057                                           ! 3841  return line;
29058                       000079E2            .289:
29059                       000079E2            .286:
29060                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29061 79E2           8A46         FF            mov	al,-1[bp]
29062 79E5           40                         inc	ax
29063 79E6           8846         FF            mov	-1[bp],al
29064                       000079E9            .287:
29065                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29066 79E9           8A46         FF            mov	al,-1[bp]
29067 79EC           3C                     0F  cmp	al,*$F
29068 79EE           76           D6            jbe	.288
29069                       000079F0            .28B:
29070                       000079F0            .285:
29071 79F0           8A46         FE            mov	al,-2[bp]
29072 79F3           89EC                       mov	sp,bp
29073 79F5           5D                         pop	bp
29074 79F6           C3                         ret
29075                                           !BCC_EOS
29076                                           ! 3842 }
29077                                           ! 3843 static void memsetb(seg,offset,value,count)
29078                                           ! Register BX used in function find_vga_entry
29079                                           ! 3844   Bit16u seg;
29080                       000079F7            _memsetb:
29081                                           !BCC_EOS
29082                                           ! 3845   Bit16u offset;
29083                                           !BCC_EOS
29084                                           ! 3846   Bit16u value;
29085                                           !BCC_EOS
29086                                           ! 3847   Bit16u count;
29087                                           !BCC_EOS
29088                                           ! 3848 {
29089                                           ! 3849 #asm
29090                                           !BCC_ASM
29091                       00000008            _memsetb.count	set	8
29092                       00000002            _memsetb.seg	set	2
29093                       00000006            _memsetb.value	set	6
29094                       00000004            _memsetb.offset	set	4
29095 79F7           55                           push bp
29096 79F8           89E5                         mov bp, sp
29097 79FA           50                             push ax
29098 79FB           51                             push cx
29099 79FC           06                             push es
29100 79FD           57                             push di
29101 79FE           8B4E         0A                mov cx, 10[bp] ; count
29102 7A01           83F9                   00      cmp cx, #0x00
29103 7A04           74           10                je memsetb_end
29104 7A06           8B46         04                mov ax, 4[bp] ; segment
29105 7A09           8EC0                           mov es, ax
29106 7A0B           8B46         06                mov ax, 6[bp] ; offset
29107 7A0E           89C7                           mov di, ax
29108 7A10           8A46         08                mov al, 8[bp] ; value
29109 7A13           FC                             cld
29110 7A14           F3                             rep
29111 7A15           AA                              stosb
29112                       00007A16            memsetb_end:
29113 7A16           5F                             pop di
29114 7A17           07                             pop es
29115 7A18           59                             pop cx
29116 7A19           58                             pop ax
29117 7A1A           5D                           pop bp
29118                                           ! 3873 endasm
29119                                           !BCC_ENDASM
29120                                           ! 3874 }
29121 7A1B           C3                         ret
29122                                           ! 3875 static void memsetw(seg,offset,value,count)
29123                                           ! 3876   Bit16u seg;
29124                       00007A1C            _memsetw:
29125                                           !BCC_EOS
29126                                           ! 3877   Bit16u offset;
29127                                           !BCC_EOS
29128                                           ! 3878   Bit16u value;
29129                                           !BCC_EOS
29130                                           ! 3879   Bit16u count;
29131                                           !BCC_EOS
29132                                           ! 3880 {
29133                                           ! 3881 #asm
29134                                           !BCC_ASM
29135                       00000008            _memsetw.count	set	8
29136                       00000002            _memsetw.seg	set	2
29137                       00000006            _memsetw.value	set	6
29138                       00000004            _memsetw.offset	set	4
29139 7A1C           55                           push bp
29140 7A1D           89E5                         mov bp, sp
29141 7A1F           50                             push ax
29142 7A20           51                             push cx
29143 7A21           06                             push es
29144 7A22           57                             push di
29145 7A23           8B4E         0A                mov cx, 10[bp] ; count
29146 7A26           83F9                   00      cmp cx, #0x00
29147 7A29           74           10                je memsetw_end
29148 7A2B           8B46         04                mov ax, 4[bp] ; segment
29149 7A2E           8EC0                           mov es, ax
29150 7A30           8B46         06                mov ax, 6[bp] ; offset
29151 7A33           89C7                           mov di, ax
29152 7A35           8B46         08                mov ax, 8[bp] ; value
29153 7A38           FC                             cld
29154 7A39           F3                             rep
29155 7A3A           AB                              stosw
29156                       00007A3B            memsetw_end:
29157 7A3B           5F                             pop di
29158 7A3C           07                             pop es
29159 7A3D           59                             pop cx
29160 7A3E           58                             pop ax
29161 7A3F           5D                           pop bp
29162                                           ! 3905 endasm
29163                                           !BCC_ENDASM
29164                                           ! 3906 }
29165 7A40           C3                         ret
29166                                           ! 3907 static void memcpyb(dseg,doffset,sseg,soffset,count)
29167                                           ! 3908   Bit16u dseg;
29168                       00007A41            _memcpyb:
29169                                           !BCC_EOS
29170                                           ! 3909   Bit16u doffset;
29171                                           !BCC_EOS
29172                                           ! 3910   Bit16u sseg;
29173                                           !BCC_EOS
29174                                           ! 3911   Bit16u soffset;
29175                                           !BCC_EOS
29176                                           ! 3912   Bit16u count;
29177                                           !BCC_EOS
29178                                           ! 3913 {
29179                                           ! 3914 #asm
29180                                           !BCC_ASM
29181                       0000000A            _memcpyb.count	set	$A
29182                       00000006            _memcpyb.sseg	set	6
29183                       00000008            _memcpyb.soffset	set	8
29184                       00000002            _memcpyb.dseg	set	2
29185                       00000004            _memcpyb.doffset	set	4
29186 7A41           55                           push bp
29187 7A42           89E5                         mov bp, sp
29188 7A44           50                             push ax
29189 7A45           51                             push cx
29190 7A46           06                             push es
29191 7A47           57                             push di
29192 7A48           1E                             push ds
29193 7A49           56                             push si
29194 7A4A           8B4E         0C                mov cx, 12[bp] ; count
29195 7A4D           83F9                   00      cmp cx, #0x0000
29196 7A50           74           17                je memcpyb_end
29197 7A52           8B46         04                mov ax, 4[bp] ; dsegment
29198 7A55           8EC0                           mov es, ax
29199 7A57           8B46         06                mov ax, 6[bp] ; doffset
29200 7A5A           89C7                           mov di, ax
29201 7A5C           8B46         08                mov ax, 8[bp] ; ssegment
29202 7A5F           8ED8                           mov ds, ax
29203 7A61           8B46         0A                mov ax, 10[bp] ; soffset
29204 7A64           89C6                           mov si, ax
29205 7A66           FC                             cld
29206 7A67           F3                             rep
29207 7A68           A4                              movsb
29208                       00007A69            memcpyb_end:
29209 7A69           5E                             pop si
29210 7A6A           1F                             pop ds
29211 7A6B           5F                             pop di
29212 7A6C           07                             pop es
29213 7A6D           59                             pop cx
29214 7A6E           58                             pop ax
29215 7A6F           5D                           pop bp
29216                                           ! 3945 endasm
29217                                           !BCC_ENDASM
29218                                           ! 3946 }
29219 7A70           C3                         ret
29220                                           ! 3947 static void memcpyw(dseg,doffset,sseg,soffset,count)
29221                                           ! 3948   Bit16u dseg;
29222                       00007A71            _memcpyw:
29223                                           !BCC_EOS
29224                                           ! 3949   Bit16u doffset;
29225                                           !BCC_EOS
29226                                           ! 3950   Bit16u sseg;
29227                                           !BCC_EOS
29228                                           ! 3951   Bit16u soffset;
29229                                           !BCC_EOS
29230                                           ! 3952   Bit16u count;
29231                                           !BCC_EOS
29232                                           ! 3953 {
29233                                           ! 3954 #asm
29234                                           !BCC_ASM
29235                       0000000A            _memcpyw.count	set	$A
29236                       00000006            _memcpyw.sseg	set	6
29237                       00000008            _memcpyw.soffset	set	8
29238                       00000002            _memcpyw.dseg	set	2
29239                       00000004            _memcpyw.doffset	set	4
29240 7A71           55                           push bp
29241 7A72           89E5                         mov bp, sp
29242 7A74           50                             push ax
29243 7A75           51                             push cx
29244 7A76           06                             push es
29245 7A77           57                             push di
29246 7A78           1E                             push ds
29247 7A79           56                             push si
29248 7A7A           8B4E         0C                mov cx, 12[bp] ; count
29249 7A7D           83F9                   00      cmp cx, #0x0000
29250 7A80           74           17                je memcpyw_end
29251 7A82           8B46         04                mov ax, 4[bp] ; dsegment
29252 7A85           8EC0                           mov es, ax
29253 7A87           8B46         06                mov ax, 6[bp] ; doffset
29254 7A8A           89C7                           mov di, ax
29255 7A8C           8B46         08                mov ax, 8[bp] ; ssegment
29256 7A8F           8ED8                           mov ds, ax
29257 7A91           8B46         0A                mov ax, 10[bp] ; soffset
29258 7A94           89C6                           mov si, ax
29259 7A96           FC                             cld
29260 7A97           F3                             rep
29261 7A98           A5                              movsw
29262                       00007A99            memcpyw_end:
29263 7A99           5E                             pop si
29264 7A9A           1F                             pop ds
29265 7A9B           5F                             pop di
29266 7A9C           07                             pop es
29267 7A9D           59                             pop cx
29268 7A9E           58                             pop ax
29269 7A9F           5D                           pop bp
29270                                           ! 3985 endasm
29271                                           !BCC_ENDASM
29272                                           ! 3986 }
29273 7AA0           C3                         ret
29274                                           ! 3987 static Bit8u
29275                                           ! 3988 read_byte(seg, offset)
29276                                           ! 3989   Bit16u seg;
29277                       00007AA1            _read_byte:
29278                                           !BCC_EOS
29279                                           ! 3990   Bit16u offset;
29280                                           !BCC_EOS
29281                                           ! 3991 {
29282                                           ! 3992 #asm
29283                                           !BCC_ASM
29284                       00000002            _read_byte.seg	set	2
29285                       00000004            _read_byte.offset	set	4
29286 7AA1           55                           push bp
29287 7AA2           89E5                         mov bp, sp
29288 7AA4           53                             push bx
29289 7AA5           1E                             push ds
29290 7AA6           8B46         04                mov ax, 4[bp] ; segment
29291 7AA9           8ED8                           mov ds, ax
29292 7AAB           8B5E         06                mov bx, 6[bp] ; offset
29293 7AAE           8A07                           mov al, [bx]
29294                                               ;; al = return value (byte)
29295 7AB0           1F                             pop ds
29296 7AB1           5B                             pop bx
29297 7AB2           5D                           pop bp
29298                                           ! 4005 endasm
29299                                           !BCC_ENDASM
29300                                           ! 4006 }
29301 7AB3           C3                         ret
29302                                           ! 4007 static Bit16u
29303                                           ! 4008 read_word(seg, offset)
29304                                           ! 4009   Bit16u seg;
29305                       00007AB4            _read_word:
29306                                           !BCC_EOS
29307                                           ! 4010   Bit16u offset;
29308                                           !BCC_EOS
29309                                           ! 4011 {
29310                                           ! 4012 #asm
29311                                           !BCC_ASM
29312                       00000002            _read_word.seg	set	2
29313                       00000004            _read_word.offset	set	4
29314 7AB4           55                           push bp
29315 7AB5           89E5                         mov bp, sp
29316 7AB7           53                             push bx
29317 7AB8           1E                             push ds
29318 7AB9           8B46         04                mov ax, 4[bp] ; segment
29319 7ABC           8ED8                           mov ds, ax
29320 7ABE           8B5E         06                mov bx, 6[bp] ; offset
29321 7AC1           8B07                           mov ax, [bx]
29322                                               ;; ax = return value (word)
29323 7AC3           1F                             pop ds
29324 7AC4           5B                             pop bx
29325 7AC5           5D                           pop bp
29326                                           ! 4025 endasm
29327                                           !BCC_ENDASM
29328                                           ! 4026 }
29329 7AC6           C3                         ret
29330                                           ! 4027 static void
29331                                           ! 4028 write_byte(seg, offset, data)
29332                                           ! 4029   Bit16u seg;
29333                       00007AC7            _write_byte:
29334                                           !BCC_EOS
29335                                           ! 4030   Bit16u offset;
29336                                           !BCC_EOS
29337                                           ! 4031   Bit8u data;
29338                                           !BCC_EOS
29339                                           ! 4032 {
29340                                           ! 4033 #asm
29341                                           !BCC_ASM
29342                       00000002            _write_byte.seg	set	2
29343                       00000006            _write_byte.data	set	6
29344                       00000004            _write_byte.offset	set	4
29345 7AC7           55                           push bp
29346 7AC8           89E5                         mov bp, sp
29347 7ACA           50                             push ax
29348 7ACB           53                             push bx
29349 7ACC           1E                             push ds
29350 7ACD           8B46         04                mov ax, 4[bp] ; segment
29351 7AD0           8ED8                           mov ds, ax
29352 7AD2           8B5E         06                mov bx, 6[bp] ; offset
29353 7AD5           8A46         08                mov al, 8[bp] ; data byte
29354 7AD8           8807                           mov [bx], al ; write data byte
29355 7ADA           1F                             pop ds
29356 7ADB           5B                             pop bx
29357 7ADC           58                             pop ax
29358 7ADD           5D                           pop bp
29359                                           ! 4048 endasm
29360                                           !BCC_ENDASM
29361                                           ! 4049 }
29362 7ADE           C3                         ret
29363                                           ! 4050 static void
29364                                           ! 4051 write_word(seg, offset, data)
29365                                           ! 4052   Bit16u seg;
29366                       00007ADF            _write_word:
29367                                           !BCC_EOS
29368                                           ! 4053   Bit16u offset;
29369                                           !BCC_EOS
29370                                           ! 4054   Bit16u data;
29371                                           !BCC_EOS
29372                                           ! 4055 {
29373                                           ! 4056 #asm
29374                                           !BCC_ASM
29375                       00000002            _write_word.seg	set	2
29376                       00000006            _write_word.data	set	6
29377                       00000004            _write_word.offset	set	4
29378 7ADF           55                           push bp
29379 7AE0           89E5                         mov bp, sp
29380 7AE2           50                             push ax
29381 7AE3           53                             push bx
29382 7AE4           1E                             push ds
29383 7AE5           8B46         04                mov ax, 4[bp] ; segment
29384 7AE8           8ED8                           mov ds, ax
29385 7AEA           8B5E         06                mov bx, 6[bp] ; offset
29386 7AED           8B46         08                mov ax, 8[bp] ; data word
29387 7AF0           8907                           mov [bx], ax ; write data word
29388 7AF2           1F                             pop ds
29389 7AF3           5B                             pop bx
29390 7AF4           58                             pop ax
29391 7AF5           5D                           pop bp
29392                                           ! 4071 endasm
29393                                           !BCC_ENDASM
29394                                           ! 4072 }
29395 7AF6           C3                         ret
29396                                           ! 4073  Bit8u
29397                                           ! 4074 inb(port)
29398                                           ! 4075   Bit16u port;
29399                                           export	_inb
29400                       00007AF7            _inb:
29401                                           !BCC_EOS
29402                                           ! 4076 {
29403                                           ! 4077 #asm
29404                                           !BCC_ASM
29405                       00000002            _inb.port	set	2
29406 7AF7           55                           push bp
29407 7AF8           89E5                         mov bp, sp
29408 7AFA           52                             push dx
29409 7AFB           8B56         04                mov dx, 4[bp]
29410 7AFE           EC                             in al, dx
29411 7AFF           5A                             pop dx
29412 7B00           5D                           pop bp
29413                                           ! 4085 endasm
29414                                           !BCC_ENDASM
29415                                           ! 4086 }
29416 7B01           C3                         ret
29417                                           ! 4087   Bit16u
29418                                           ! 4088 inw(port)
29419                                           ! 4089   Bit16u port;
29420                                           export	_inw
29421                       00007B02            _inw:
29422                                           !BCC_EOS
29423                                           ! 4090 {
29424                                           ! 4091 #asm
29425                                           !BCC_ASM
29426                       00000002            _inw.port	set	2
29427 7B02           55                           push bp
29428 7B03           89E5                         mov bp, sp
29429 7B05           52                             push dx
29430 7B06           8B56         04                mov dx, 4[bp]
29431 7B09           ED                             in ax, dx
29432 7B0A           5A                             pop dx
29433 7B0B           5D                           pop bp
29434                                           ! 4099 endasm
29435                                           !BCC_ENDASM
29436                                           ! 4100 }
29437 7B0C           C3                         ret
29438                                           ! 4101   void
29439                                           ! 4102 outb(port, val)
29440                                           ! 4103   Bit16u port;
29441                                           export	_outb
29442                       00007B0D            _outb:
29443                                           !BCC_EOS
29444                                           ! 4104   Bit8u val;
29445                                           !BCC_EOS
29446                                           ! 4105 {
29447                                           ! 4106 #asm
29448                                           !BCC_ASM
29449                       00000004            _outb.val	set	4
29450                       00000002            _outb.port	set	2
29451 7B0D           55                           push bp
29452 7B0E           89E5                         mov bp, sp
29453 7B10           50                             push ax
29454 7B11           52                             push dx
29455 7B12           8B56         04                mov dx, 4[bp]
29456 7B15           8A46         06                mov al, 6[bp]
29457 7B18           EE                             out dx, al
29458 7B19           5A                             pop dx
29459 7B1A           58                             pop ax
29460 7B1B           5D                           pop bp
29461                                           ! 4117 endasm
29462                                           !BCC_ENDASM
29463                                           ! 4118 }
29464 7B1C           C3                         ret
29465                                           ! 4119   void
29466                                           ! 4120 outw(port, val)
29467                                           ! 4121   Bit16u port;
29468                                           export	_outw
29469                       00007B1D            _outw:
29470                                           !BCC_EOS
29471                                           ! 4122   Bit16u val;
29472                                           !BCC_EOS
29473                                           ! 4123 {
29474                                           ! 4124 #asm
29475                                           !BCC_ASM
29476                       00000004            _outw.val	set	4
29477                       00000002            _outw.port	set	2
29478 7B1D           55                           push bp
29479 7B1E           89E5                         mov bp, sp
29480 7B20           50                             push ax
29481 7B21           52                             push dx
29482 7B22           8B56         04                mov dx, 4[bp]
29483 7B25           8B46         06                mov ax, 6[bp]
29484 7B28           EF                             out dx, ax
29485 7B29           5A                             pop dx
29486 7B2A           58                             pop ax
29487 7B2B           5D                           pop bp
29488                                           ! 4135 endasm
29489                                           !BCC_ENDASM
29490                                           ! 4136 }
29491 7B2C           C3                         ret
29492                                           ! 4137 Bit16u get_SS()
29493                                           ! 4138 {
29494                                           export	_get_SS
29495                       00007B2D            _get_SS:
29496                                           ! 4139 #asm
29497                                           !BCC_ASM
29498 7B2D           8CD0                         mov ax, ss
29499                                           ! 4141 endasm
29500                                           !BCC_ENDASM
29501                                           ! 4142 }
29502 7B2F           C3                         ret
29503                                           ! 4143 void printf(s)
29504                                           ! 4144   Bit8u *s;
29505                                           export	_printf
29506                       00007B30            _printf:
29507                                           !BCC_EOS
29508                                           ! 4145 {
29509                                           ! 4146   Bit8u c, format_char;
29510                                           !BCC_EOS
29511                                           ! 4147   Boolean in_format;
29512                                           !BCC_EOS
29513                                           ! 4148   unsigned format_width, i;
29514                                           !BCC_EOS
29515                                           ! 4149   Bit16u *arg_ptr;
29516                                           !BCC_EOS
29517                                           ! 4150   Bit16u arg_seg, arg, digit, nibble, shift_count;
29518                                           !BCC_EOS
29519                                           ! 4151   arg_ptr = &s;
29520 7B30           55                         push	bp
29521 7B31           89E5                       mov	bp,sp
29522 7B33           83C4                   EC  add	sp,*-$14
29523                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29524 7B36           8D5E         04            lea	bx,4[bp]
29525 7B39           895E         F6            mov	-$A[bp],bx
29526                                           !BCC_EOS
29527                                           ! 4152   arg_seg = get_SS();
29528                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
29529 7B3C           E8         FFEE            call	_get_SS
29530                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
29531 7B3F           8946         F4            mov	-$C[bp],ax
29532                                           !BCC_EOS
29533                                           ! 4153   in_format = 0;
29534                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29535 7B42           31C0                       xor	ax,ax
29536 7B44           8946         FC            mov	-4[bp],ax
29537                                           !BCC_EOS
29538                                           ! 4154   format_width = 0;
29539                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29540 7B47           31C0                       xor	ax,ax
29541 7B49           8946         FA            mov	-6[bp],ax
29542                                           !BCC_EOS
29543                                           ! 4155   while (c = read_byte(0xc000, s)) {
29544 7B4C           E9         0104            br 	.28D
29545                       00007B4F            .28E:
29546                                           ! 4156     if ( c == '%' ) {
29547                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
29548 7B4F           8A46         FF            mov	al,-1[bp]
29549 7B52           3C                     25  cmp	al,*$25
29550 7B54           75           0E            jne 	.28F
29551                       00007B56            .290:
29552                                           ! 4157       in_format = 1;
29553                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
29554 7B56           B8                   0001  mov	ax,*1
29555 7B59           8946         FC            mov	-4[bp],ax
29556                                           !BCC_EOS
29557                                           ! 4158       format_width = 0;
29558                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29559 7B5C           31C0                       xor	ax,ax
29560 7B5E           8946         FA            mov	-6[bp],ax
29561                                           !BCC_EOS
29562                                           ! 4159       }
29563                                           ! 4160     else if (in_format) {
29564 7B61           E9         00E8            br 	.291
29565                       00007B64            .28F:
29566 7B64           8B46         FC            mov	ax,-4[bp]
29567 7B67           85C0                       test	ax,ax
29568 7B69         0F84         00CF            beq 	.292
29569                       00007B6D            .293:
29570                                           ! 4161       if ( (c>='0') && (c<='9') ) {
29571                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29572 7B6D           8A46         FF            mov	al,-1[bp]
29573 7B70           3C                     30  cmp	al,*$30
29574 7B72           72           28            jb  	.294
29575                       00007B74            .296:
29576                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
29577 7B74           8A46         FF            mov	al,-1[bp]
29578 7B77           3C                     39  cmp	al,*$39
29579 7B79           77           21            ja  	.294
29580                       00007B7B            .295:
29581                                           ! 4162         format_width = (format_width * 10) + (c - '0');
29582                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29583 7B7B           8A46         FF            mov	al,-1[bp]
29584 7B7E           30E4                       xor	ah,ah
29585 7B80           05                   FFD0  add	ax,*-$30
29586 7B83           50                         push	ax
29587                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
29588 7B84           8B46         FA            mov	ax,-6[bp]
29589 7B87           89C2                       mov	dx,ax
29590 7B89           D1E0                       shl	ax,*1
29591 7B8B           D1E0                       shl	ax,*1
29592 7B8D           01D0                       add	ax,dx
29593 7B8F           D1E0                       shl	ax,*1
29594                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
29595 7B91           0346         EA            add	ax,-$16[bp]
29596 7B94           44                         inc	sp
29597 7B95           44                         inc	sp
29598                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
29599 7B96           8946         FA            mov	-6[bp],ax
29600                                           !BCC_EOS
29601                                           ! 4163         }
29602                                           ! 4164       else if (c == 'x') {
29603 7B99           E9         009E            br 	.297
29604                       00007B9C            .294:
29605                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
29606 7B9C           8A46         FF            mov	al,-1[bp]
29607 7B9F           3C                     78  cmp	al,*$78
29608 7BA1         0F85         0095            bne 	.298
29609                       00007BA5            .299:
29610                                           ! 4165         arg_ptr++;
29611                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29612 7BA5           8B5E         F6            mov	bx,-$A[bp]
29613 7BA8           43                         inc	bx
29614 7BA9           43                         inc	bx
29615 7BAA           895E         F6            mov	-$A[bp],bx
29616                                           !BCC_EOS
29617                                           ! 4166         arg = read_word(arg_seg, arg_ptr);
29618                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29619 7BAD           FF76         F6            push	-$A[bp]
29620                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
29621 7BB0           FF76         F4            push	-$C[bp]
29622                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29623 7BB3           E8         FEFE            call	_read_word
29624 7BB6           83C4                   04  add	sp,*4
29625                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29626 7BB9           8946         F2            mov	-$E[bp],ax
29627                                           !BCC_EOS
29628                                           ! 4167         if (format_width == 0)
29629                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29630 7BBC           8B46         FA            mov	ax,-6[bp]
29631 7BBF           85C0                       test	ax,ax
29632 7BC1           75           06            jne 	.29A
29633                       00007BC3            .29B:
29634                                           ! 4168           format_width = 4;
29635                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
29636 7BC3           B8                   0004  mov	ax,*4
29637 7BC6           8946         FA            mov	-6[bp],ax
29638                                           !BCC_EOS
29639                                           ! 4169         i = 0;
29640                       00007BC9            .29A:
29641                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29642 7BC9           31C0                       xor	ax,ax
29643 7BCB           8946         F8            mov	-8[bp],ax
29644                                           !BCC_EOS
29645                                           ! 4170         digit = format_width - 1;
29646                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
29647 7BCE           8B46         FA            mov	ax,-6[bp]
29648                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
29649 7BD1           48                         dec	ax
29650 7BD2           8946         F0            mov	-$10[bp],ax
29651                                           !BCC_EOS
29652                                           ! 4171         for (i=0; i<format_width; i++) {
29653                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29654 7BD5           31C0                       xor	ax,ax
29655 7BD7           8946         F8            mov	-8[bp],ax
29656                                           !BCC_EOS
29657                                           !BCC_EOS
29658 7BDA           EB           51            jmp .29E
29659                       00007BDC            .29F:
29660                                           ! 4172           nibble = (arg >> (4 * digit)) & 0x000f;
29661                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
29662                                           ! Debug: expression subtree swapping
29663 7BDC           8B46         F0            mov	ax,-$10[bp]
29664 7BDF           D1E0                       shl	ax,*1
29665 7BE1           D1E0                       shl	ax,*1
29666                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29667 7BE3           89C3                       mov	bx,ax
29668 7BE5           8B46         F2            mov	ax,-$E[bp]
29669 7BE8           89D9                       mov	cx,bx
29670 7BEA           D3E8                       shr	ax,cl
29671                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
29672 7BEC           24                     0F  and	al,*$F
29673                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
29674 7BEE           30E4                       xor	ah,ah
29675 7BF0           8946         EE            mov	-$12[bp],ax
29676                                           !BCC_EOS
29677                                           ! 4173           if (nibble <= 9)
29678                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
29679 7BF3           8B46         EE            mov	ax,-$12[bp]
29680 7BF6           3D                   0009  cmp	ax,*9
29681 7BF9           77           13            ja  	.2A0
29682                       00007BFB            .2A1:
29683                                           ! 4174             outb(0xe9, nibble + '0');
29684                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
29685 7BFB           8B46         EE            mov	ax,-$12[bp]
29686                                           ! Debug: list unsigned int = ax+$30 (used reg = )
29687 7BFE           05                   0030  add	ax,*$30
29688 7C01           50                         push	ax
29689                                           ! Debug: list int = const $E9 (used reg = )
29690 7C02           B8                   00E9  mov	ax,#$E9
29691 7C05           50                         push	ax
29692                                           ! Debug: func () void = outb+0 (used reg = )
29693 7C06           E8         FF04            call	_outb
29694 7C09           83C4                   04  add	sp,*4
29695                                           !BCC_EOS
29696                                           ! 4175           else
29697                                           ! 4176             outb(0xe9, (nibble - 10) + 'A');
29698 7C0C           EB           11            jmp .2A2
29699                       00007C0E            .2A0:
29700                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
29701 7C0E           8B46         EE            mov	ax,-$12[bp]
29702                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
29703                                           ! Debug: list unsigned int = ax+$37 (used reg = )
29704 7C11           05                   0037  add	ax,*$37
29705 7C14           50                         push	ax
29706                                           ! Debug: list int = const $E9 (used reg = )
29707 7C15           B8                   00E9  mov	ax,#$E9
29708 7C18           50                         push	ax
29709                                           ! Debug: func () void = outb+0 (used reg = )
29710 7C19           E8         FEF1            call	_outb
29711 7C1C           83C4                   04  add	sp,*4
29712                                           !BCC_EOS
29713                                           ! 4177           digit--;
29714                       00007C1F            .2A2:
29715                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
29716 7C1F           8B46         F0            mov	ax,-$10[bp]
29717 7C22           48                         dec	ax
29718 7C23           8946         F0            mov	-$10[bp],ax
29719                                           !BCC_EOS
29720                                           ! 4178           }
29721                                           ! 4179         in_format = 0;
29722                       00007C26            .29D:
29723                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
29724 7C26           8B46         F8            mov	ax,-8[bp]
29725 7C29           40                         inc	ax
29726 7C2A           8946         F8            mov	-8[bp],ax
29727                       00007C2D            .29E:
29728                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
29729 7C2D           8B46         F8            mov	ax,-8[bp]
29730 7C30           3B46         FA            cmp	ax,-6[bp]
29731 7C33           72           A7            jb 	.29F
29732                       00007C35            .2A3:
29733                       00007C35            .29C:
29734                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29735 7C35           31C0                       xor	ax,ax
29736 7C37           8946         FC            mov	-4[bp],ax
29737                                           !BCC_EOS
29738                                           ! 4180         }
29739                                           ! 4181       }
29740                       00007C3A            .298:
29741                       00007C3A            .297:
29742                                           ! 4182     else {
29743 7C3A           EB           10            jmp .2A4
29744                       00007C3C            .292:
29745                                           ! 4183       outb(0xe9, c);
29746                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
29747 7C3C           8A46         FF            mov	al,-1[bp]
29748 7C3F           30E4                       xor	ah,ah
29749 7C41           50                         push	ax
29750                                           ! Debug: list int = const $E9 (used reg = )
29751 7C42           B8                   00E9  mov	ax,#$E9
29752 7C45           50                         push	ax
29753                                           ! Debug: func () void = outb+0 (used reg = )
29754 7C46           E8         FEC4            call	_outb
29755 7C49           83C4                   04  add	sp,*4
29756                                           !BCC_EOS
29757                                           ! 4184       }
29758                                           ! 4185     s ++;
29759                       00007C4C            .2A4:
29760                       00007C4C            .291:
29761                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
29762 7C4C           8B5E         04            mov	bx,4[bp]
29763 7C4F           43                         inc	bx
29764 7C50           895E         04            mov	4[bp],bx
29765                                           !BCC_EOS
29766                                           ! 4186     }
29767                                           ! 4187 }
29768                       00007C53            .28D:
29769                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
29770 7C53           FF76         04            push	4[bp]
29771                                           ! Debug: list unsigned int = const $C000 (used reg = )
29772 7C56           B8                   C000  mov	ax,#$C000
29773 7C59           50                         push	ax
29774                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29775 7C5A           E8         FE44            call	_read_byte
29776 7C5D           83C4                   04  add	sp,*4
29777                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
29778 7C60           8846         FF            mov	-1[bp],al
29779 7C63           84C0                       test	al,al
29780 7C65         0F85         FEE6            bne 	.28E
29781                       00007C69            .2A5:
29782                       00007C69            .28C:
29783 7C69           89EC                       mov	sp,bp
29784 7C6B           5D                         pop	bp
29785 7C6C           C3                         ret
29786                                           ! 4188 typedef struct
29787                                           ! Register BX used in function printf
29788                                           ! 4189 {
29789                                           ! 4190   unsigned short mode;
29790                                           !BCC_EOS
29791                                           ! 4191   unsigned short width;
29792                                           !BCC_EOS
29793                                           ! 4192   unsigned short height;
29794                                           !BCC_EOS
29795                                           ! 4193   unsigned short depth;
29796                                           !BCC_EOS
29797                                           ! 4194   unsigned short hidden_dac;
29798                                           !BCC_EOS
29799                                           ! 4195   unsigned short *seq;
29800                                           !BCC_EOS
29801                                           ! 4196   unsigned short *graph;
29802                                           !BCC_EOS
29803                                           ! 4197   unsigned short *crtc;
29804                                           !BCC_EOS
29805                                           ! 4198   unsigned char bitsperpixel;
29806                                           !BCC_EOS
29807                                           ! 4199   unsigned char vesacolortype;
29808                                           !BCC_EOS
29809                                           ! 4200   unsigned char vesaredmask;
29810                                           !BCC_EOS
29811                                           ! 4201   unsigned char vesaredpos;
29812                                           !BCC_EOS
29813                                           ! 4202   unsigned char vesagreenmask;
29814                                           !BCC_EOS
29815                                           ! 4203   unsigned char vesagreenpos;
29816                                           !BCC_EOS
29817                                           ! 4204   unsigned char vesabluemask;
29818                                           !BCC_EOS
29819                                           ! 4205   unsigned char vesabluepos;
29820                                           !BCC_EOS
29821                                           ! 4206   unsigned char vesareservedmask;
29822                                           !BCC_EOS
29823                                           ! 4207   unsigned char vesareservedpos;
29824                                           !BCC_EOS
29825                                           ! 4208 } cirrus_mode_t;
29826                                           !BCC_EOS
29827                                           ! 4209 unsigned short cseq_vga[] = {0x0007,0xffff};
29828                                           
29829                                           export	_cseq_vga
29830                       00007C6D            _cseq_vga:
29831 7C6D                      0007            .word	7
29832 7C6F                      FFFF            .word	$FFFF
29833                                           !BCC_EOS
29834                                           ! 4210 unsigned short cgraph_vga[] = {0x0009,0x000a,0x000b,0xffff};
29835                                           export	_cgraph_vga
29836                       00007C71            _cgraph_vga:
29837 7C71                      0009            .word	9
29838 7C73                      000A            .word	$A
29839 7C75                      000B            .word	$B
29840 7C77                      FFFF            .word	$FFFF
29841                                           !BCC_EOS
29842                                           ! 4211 unsigned short ccrtc_vga[] = {0x001a,0x001b,0x001d,0xffff};
29843                                           export	_ccrtc_vga
29844                       00007C79            _ccrtc_vga:
29845 7C79                      001A            .word	$1A
29846 7C7B                      001B            .word	$1B
29847 7C7D                      001D            .word	$1D
29848 7C7F                      FFFF            .word	$FFFF
29849                                           !BCC_EOS
29850                                           ! 4212 unsigned short cgraph_svgacolor[] = {
29851                                           export	_cgraph_svgacolor
29852                       00007C81            _cgraph_svgacolor:
29853                                           ! 4213 0x0000,0x0
29854 7C81                      0000            .word	0
29855                                           ! 4213 001,0x0002,0x0003,0x0004,0x4005,0x0506,0x0f07,0xff08,
29856 7C83                      0001            .word	1
29857 7C85                      0002            .word	2
29858 7C87                      0003            .word	3
29859 7C89                      0004            .word	4
29860 7C8B                      4005            .word	$4005
29861 7C8D                      0506            .word	$506
29862 7C8F                      0F07            .word	$F07
29863 7C91                      FF08            .word	$FF08
29864                                           ! 4214 0x0009,0x000a,0x000b,
29865 7C93                      0009            .word	9
29866 7C95                      000A            .word	$A
29867 7C97                      000B            .word	$B
29868                                           ! 4215 0xffff
29869                                           ! 4216 };
29870 7C99                      FFFF            .word	$FFFF
29871                                           !BCC_EOS
29872                                           ! 4217 unsigned short cseq_640x480x8[] = {
29873                                           export	_cseq_640x480x8
29874                       00007C9B            _cseq_640x480x8:
29875                                           ! 4218 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
29876 7C9B                      0300            .word	$300
29877 7C9D                      2101            .word	$2101
29878 7C9F                      0F02            .word	$F02
29879 7CA1                      0003            .word	3
29880 7CA3                      0E04            .word	$E04
29881 7CA5                      1107            .word	$1107
29882                                           ! 4219 0x580b,0x580c,0x580d,0x580e,
29883 7CA7                      580B            .word	$580B
29884 7CA9                      580C            .word	$580C
29885 7CAB                      580D            .word	$580D
29886 7CAD                      580E            .word	$580E
29887                                           ! 4220 0x0412,0x0013,0x2017,
29888 7CAF                      0412            .word	$412
29889 7CB1                      0013            .word	$13
29890 7CB3                      2017            .word	$2017
29891                                           ! 4221 0x331b,0x331c,0x331d,0x331e,
29892 7CB5                      331B            .word	$331B
29893 7CB7                      331C            .word	$331C
29894 7CB9                      331D            .word	$331D
29895 7CBB                      331E            .word	$331E
29896                                           ! 4222 0xffff
29897                                           ! 4223 };
29898 7CBD                      FFFF            .word	$FFFF
29899                                           !BCC_EOS
29900                                           ! 4224 unsigned short ccrtc_640x480x8[] = {
29901                                           export	_ccrtc_640x480x8
29902                       00007CBF            _ccrtc_640x480x8:
29903                                           ! 4225 0x2c11,
29904 7CBF                      2C11            .word	$2C11
29905                                           ! 4226 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
29906 7CC1                      5F00            .word	$5F00
29907 7CC3                      4F01            .word	$4F01
29908 7CC5                      4F02            .word	$4F02
29909 7CC7                      8003            .word	$8003
29910 7CC9                      5204            .word	$5204
29911 7CCB                      1E05            .word	$1E05
29912 7CCD                      0B06            .word	$B06
29913 7CCF                      3E07            .word	$3E07
29914                                           ! 4227 0x4009,0x000c,0x000d,
29915 7CD1                      4009            .word	$4009
29916 7CD3                      000C            .word	$C
29917 7CD5                      000D            .word	$D
29918                                           ! 4228 0xea10,0xdf12,0x5013,0x4014,0xdf15,0x0b16,0xc317,0xff18,
29919 7CD7                      EA10            .word	$EA10
29920 7CD9                      DF12            .word	$DF12
29921 7CDB                      5013            .word	$5013
29922 7CDD                      4014            .word	$4014
29923 7CDF                      DF15            .word	$DF15
29924 7CE1                      0B16            .word	$B16
29925 7CE3                      C317            .word	$C317
29926 7CE5                      FF18            .word	$FF18
29927                                           ! 4229 0x001a,0x221b,0x001d,
29928 7CE7                      001A            .word	$1A
29929 7CE9                      221B            .word	$221B
29930 7CEB                      001D            .word	$1D
29931                                           ! 4230 0xffff
29932                                           ! 4231 };
29933 7CED                      FFFF            .word	$FFFF
29934                                           !BCC_EOS
29935                                           ! 4232 unsigned short cseq_640x480x16[] = {
29936                                           export	_cseq_640x480x16
29937                       00007CEF            _cseq_640x480x16:
29938                                           ! 4233 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
29939 7CEF                      0300            .word	$300
29940 7CF1                      2101            .word	$2101
29941 7CF3                      0F02            .word	$F02
29942 7CF5                      0003            .word	3
29943 7CF7                      0E04            .word	$E04
29944 7CF9                      1707            .word	$1707
29945                                           ! 4234 0x580b,0x580c,0x580d,0x580e,
29946 7CFB                      580B            .word	$580B
29947 7CFD                      580C            .word	$580C
29948 7CFF                      580D            .word	$580D
29949 7D01                      580E            .word	$580E
29950                                           ! 4235 0x0412,0x0013,0x2017,
29951 7D03                      0412            .word	$412
29952 7D05                      0013            .word	$13
29953 7D07                      2017            .word	$2017
29954                                           ! 4236 0x331b,0x331c,0x331d,0x331e,
29955 7D09                      331B            .word	$331B
29956 7D0B                      331C            .word	$331C
29957 7D0D                      331D            .word	$331D
29958 7D0F                      331E            .word	$331E
29959                                           ! 4237 0xffff
29960                                           ! 4238 };
29961 7D11                      FFFF            .word	$FFFF
29962                                           !BCC_EOS
29963                                           ! 4239 unsigned short ccrtc_640x480x16[] = {
29964                                           export	_ccrtc_640x480x16
29965                       00007D13            _ccrtc_640x480x16:
29966                                           ! 4240 0x2c11,
29967 7D13                      2C11            .word	$2C11
29968                                           ! 4241 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
29969 7D15                      5F00            .word	$5F00
29970 7D17                      4F01            .word	$4F01
29971 7D19                      4F02            .word	$4F02
29972 7D1B                      8003            .word	$8003
29973 7D1D                      5204            .word	$5204
29974 7D1F                      1E05            .word	$1E05
29975 7D21                      0B06            .word	$B06
29976 7D23                      3E07            .word	$3E07
29977                                           ! 4242 0x4009,0x000c,0x000d,
29978 7D25                      4009            .word	$4009
29979 7D27                      000C            .word	$C
29980 7D29                      000D            .word	$D
29981                                           ! 4243 0xea10,0xdf12,0xa013,0x4014,0xdf15,0x0b16,0xc317,0xff18,
29982 7D2B                      EA10            .word	$EA10
29983 7D2D                      DF12            .word	$DF12
29984 7D2F                      A013            .word	$A013
29985 7D31                      4014            .word	$4014
29986 7D33                      DF15            .word	$DF15
29987 7D35                      0B16            .word	$B16
29988 7D37                      C317            .word	$C317
29989 7D39                      FF18            .word	$FF18
29990                                           ! 4244 0x001a,0x221b,0x001d,
29991 7D3B                      001A            .word	$1A
29992 7D3D                      221B            .word	$221B
29993 7D3F                      001D            .word	$1D
29994                                           ! 4245 0xffff
29995                                           ! 4246 };
29996 7D41                      FFFF            .word	$FFFF
29997                                           !BCC_EOS
29998                                           ! 4247 unsigned short cseq_640x480x24[] = {
29999                                           export	_cseq_640x480x24
30000                       00007D43            _cseq_640x480x24:
30001                                           ! 4248 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1507,
30002 7D43                      0300            .word	$300
30003 7D45                      2101            .word	$2101
30004 7D47                      0F02            .word	$F02
30005 7D49                      0003            .word	3
30006 7D4B                      0E04            .word	$E04
30007 7D4D                      1507            .word	$1507
30008                                           ! 4249 0x580b,0x580c,0x580d,0x580e,
30009 7D4F                      580B            .word	$580B
30010 7D51                      580C            .word	$580C
30011 7D53                      580D            .word	$580D
30012 7D55                      580E            .word	$580E
30013                                           ! 4250 0x0412,0x0013,0x2017,
30014 7D57                      0412            .word	$412
30015 7D59                      0013            .word	$13
30016 7D5B                      2017            .word	$2017
30017                                           ! 4251 0x331b,0x331c,0x331d,0x331e,
30018 7D5D                      331B            .word	$331B
30019 7D5F                      331C            .word	$331C
30020 7D61                      331D            .word	$331D
30021 7D63                      331E            .word	$331E
30022                                           ! 4252 0xffff
30023                                           ! 4253 };
30024 7D65                      FFFF            .word	$FFFF
30025                                           !BCC_EOS
30026                                           ! 4254 unsigned short ccrtc_640x480x24[] = {
30027                                           export	_ccrtc_640x480x24
30028                       00007D67            _ccrtc_640x480x24:
30029                                           ! 4255 0x2c11,
30030 7D67                      2C11            .word	$2C11
30031                                           ! 4256 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
30032 7D69                      5F00            .word	$5F00
30033 7D6B                      4F01            .word	$4F01
30034 7D6D                      4F02            .word	$4F02
30035 7D6F                      8003            .word	$8003
30036 7D71                      5204            .word	$5204
30037 7D73                      1E05            .word	$1E05
30038 7D75                      0B06            .word	$B06
30039 7D77                      3E07            .word	$3E07
30040                                           ! 4257 0x4009,0x000c,0x000d,
30041 7D79                      4009            .word	$4009
30042 7D7B                      000C            .word	$C
30043 7D7D                      000D            .word	$D
30044                                           ! 4258 0xea10,0xdf12,0x0013,0x4014,0xdf15,0x0b16,0xc317,0xff18,
30045 7D7F                      EA10            .word	$EA10
30046 7D81                      DF12            .word	$DF12
30047 7D83                      0013            .word	$13
30048 7D85                      4014            .word	$4014
30049 7D87                      DF15            .word	$DF15
30050 7D89                      0B16            .word	$B16
30051 7D8B                      C317            .word	$C317
30052 7D8D                      FF18            .word	$FF18
30053                                           ! 4259 0x001a,0x321b,0x001d,
30054 7D8F                      001A            .word	$1A
30055 7D91                      321B            .word	$321B
30056 7D93                      001D            .word	$1D
30057                                           ! 4260 0xffff
30058                                           ! 4261 };
30059 7D95                      FFFF            .word	$FFFF
30060                                           !BCC_EOS
30061                                           ! 4262 unsigned short cseq_800x600x8[] = {
30062                                           export	_cseq_800x600x8
30063                       00007D97            _cseq_800x600x8:
30064                                           ! 4263 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30065 7D97                      0300            .word	$300
30066 7D99                      2101            .word	$2101
30067 7D9B                      0F02            .word	$F02
30068 7D9D                      0003            .word	3
30069 7D9F                      0E04            .word	$E04
30070 7DA1                      1107            .word	$1107
30071                                           ! 4264 0x230b,0x230c,0x230d,0x230e,
30072 7DA3                      230B            .word	$230B
30073 7DA5                      230C            .word	$230C
30074 7DA7                      230D            .word	$230D
30075 7DA9                      230E            .word	$230E
30076                                           ! 4265 0x0412,0x0013,0x2017,
30077 7DAB                      0412            .word	$412
30078 7DAD                      0013            .word	$13
30079 7DAF                      2017            .word	$2017
30080                                           ! 4266 0x141b,0x141c,0x141d,0x141e,
30081 7DB1                      141B            .word	$141B
30082 7DB3                      141C            .word	$141C
30083 7DB5                      141D            .word	$141D
30084 7DB7                      141E            .word	$141E
30085                                           ! 4267 0xffff
30086                                           ! 4268 };
30087 7DB9                      FFFF            .word	$FFFF
30088                                           !BCC_EOS
30089                                           ! 4269 unsigned short ccrtc_800x600x8[] = {
30090                                           export	_ccrtc_800x600x8
30091                       00007DBB            _ccrtc_800x600x8:
30092                                           ! 4270 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30093 7DBB                      2311            .word	$2311
30094 7DBD                      7D00            .word	$7D00
30095 7DBF                      6301            .word	$6301
30096 7DC1                      6302            .word	$6302
30097 7DC3                      8003            .word	$8003
30098 7DC5                      6B04            .word	$6B04
30099 7DC7                      1A05            .word	$1A05
30100 7DC9                      9806            .word	$9806
30101 7DCB                      F007            .word	$F007
30102                                           ! 4271 0x6009,0x000c,0x000d,
30103 7DCD                      6009            .word	$6009
30104 7DCF                      000C            .word	$C
30105 7DD1                      000D            .word	$D
30106                                           ! 4272 0x7d10,0x5712,0x6413,0x4014,0x5715,0x9816,0xc317,0xff18,
30107 7DD3                      7D10            .word	$7D10
30108 7DD5                      5712            .word	$5712
30109 7DD7                      6413            .word	$6413
30110 7DD9                      4014            .word	$4014
30111 7DDB                      5715            .word	$5715
30112 7DDD                      9816            .word	$9816
30113 7DDF                      C317            .word	$C317
30114 7DE1                      FF18            .word	$FF18
30115                                           ! 4273 0x001a,0x221b,0x001d,
30116 7DE3                      001A            .word	$1A
30117 7DE5                      221B            .word	$221B
30118 7DE7                      001D            .word	$1D
30119                                           ! 4274 0xffff
30120                                           ! 4275 };
30121 7DE9                      FFFF            .word	$FFFF
30122                                           !BCC_EOS
30123                                           ! 4276 unsigned short cseq_800x600x16[] = {
30124                                           export	_cseq_800x600x16
30125                       00007DEB            _cseq_800x600x16:
30126                                           ! 4277 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30127 7DEB                      0300            .word	$300
30128 7DED                      2101            .word	$2101
30129 7DEF                      0F02            .word	$F02
30130 7DF1                      0003            .word	3
30131 7DF3                      0E04            .word	$E04
30132 7DF5                      1707            .word	$1707
30133                                           ! 4278 0x230b,0x230c,0x230d,0x230e,
30134 7DF7                      230B            .word	$230B
30135 7DF9                      230C            .word	$230C
30136 7DFB                      230D            .word	$230D
30137 7DFD                      230E            .word	$230E
30138                                           ! 4279 0x0412,0x0013,0x2017,
30139 7DFF                      0412            .word	$412
30140 7E01                      0013            .word	$13
30141 7E03                      2017            .word	$2017
30142                                           ! 4280 0x141b,0x141c,0x141d,0x141e,
30143 7E05                      141B            .word	$141B
30144 7E07                      141C            .word	$141C
30145 7E09                      141D            .word	$141D
30146 7E0B                      141E            .word	$141E
30147                                           ! 4281 0xffff
30148                                           ! 4282 };
30149 7E0D                      FFFF            .word	$FFFF
30150                                           !BCC_EOS
30151                                           ! 4283 unsigned short ccrtc_800x600x16[] = {
30152                                           export	_ccrtc_800x600x16
30153                       00007E0F            _ccrtc_800x600x16:
30154                                           ! 4284 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30155 7E0F                      2311            .word	$2311
30156 7E11                      7D00            .word	$7D00
30157 7E13                      6301            .word	$6301
30158 7E15                      6302            .word	$6302
30159 7E17                      8003            .word	$8003
30160 7E19                      6B04            .word	$6B04
30161 7E1B                      1A05            .word	$1A05
30162 7E1D                      9806            .word	$9806
30163 7E1F                      F007            .word	$F007
30164                                           ! 4285 0x6009,0x000c,0x000d,
30165 7E21                      6009            .word	$6009
30166 7E23                      000C            .word	$C
30167 7E25                      000D            .word	$D
30168                                           ! 4286 0x7d10,0x5712,0xc813,0x4014,0x5715,0x9816,0xc317,0xff18,
30169 7E27                      7D10            .word	$7D10
30170 7E29                      5712            .word	$5712
30171 7E2B                      C813            .word	$C813
30172 7E2D                      4014            .word	$4014
30173 7E2F                      5715            .word	$5715
30174 7E31                      9816            .word	$9816
30175 7E33                      C317            .word	$C317
30176 7E35                      FF18            .word	$FF18
30177                                           ! 4287 0x001a,0x221b,0x001d,
30178 7E37                      001A            .word	$1A
30179 7E39                      221B            .word	$221B
30180 7E3B                      001D            .word	$1D
30181                                           ! 4288 0xffff
30182                                           ! 4289 };
30183 7E3D                      FFFF            .word	$FFFF
30184                                           !BCC_EOS
30185                                           ! 4290 unsigned short cseq_800x600x24[] = {
30186                                           export	_cseq_800x600x24
30187                       00007E3F            _cseq_800x600x24:
30188                                           ! 4291 0x0300,0x21
30189 7E3F                      0300            .word	$300
30190                                           ! 4291 01,0x0f02,0x0003,0x0e04,0x1507,
30191 7E41                      2101            .word	$2101
30192 7E43                      0F02            .word	$F02
30193 7E45                      0003            .word	3
30194 7E47                      0E04            .word	$E04
30195 7E49                      1507            .word	$1507
30196                                           ! 4292 0x230b,0x230c,0x230d,0x230e,
30197 7E4B                      230B            .word	$230B
30198 7E4D                      230C            .word	$230C
30199 7E4F                      230D            .word	$230D
30200 7E51                      230E            .word	$230E
30201                                           ! 4293 0x0412,0x0013,0x2017,
30202 7E53                      0412            .word	$412
30203 7E55                      0013            .word	$13
30204 7E57                      2017            .word	$2017
30205                                           ! 4294 0x141b,0x141c,0x141d,0x141e,
30206 7E59                      141B            .word	$141B
30207 7E5B                      141C            .word	$141C
30208 7E5D                      141D            .word	$141D
30209 7E5F                      141E            .word	$141E
30210                                           ! 4295 0xffff
30211                                           ! 4296 };
30212 7E61                      FFFF            .word	$FFFF
30213                                           !BCC_EOS
30214                                           ! 4297 unsigned short ccrtc_800x600x24[] = {
30215                                           export	_ccrtc_800x600x24
30216                       00007E63            _ccrtc_800x600x24:
30217                                           ! 4298 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30218 7E63                      2311            .word	$2311
30219 7E65                      7D00            .word	$7D00
30220 7E67                      6301            .word	$6301
30221 7E69                      6302            .word	$6302
30222 7E6B                      8003            .word	$8003
30223 7E6D                      6B04            .word	$6B04
30224 7E6F                      1A05            .word	$1A05
30225 7E71                      9806            .word	$9806
30226 7E73                      F007            .word	$F007
30227                                           ! 4299 0x6009,0x000c,0x000d,
30228 7E75                      6009            .word	$6009
30229 7E77                      000C            .word	$C
30230 7E79                      000D            .word	$D
30231                                           ! 4300 0x7d10,0x5712,0x2c13,0x4014,0x5715,0x9816,0xc317,0xff18,
30232 7E7B                      7D10            .word	$7D10
30233 7E7D                      5712            .word	$5712
30234 7E7F                      2C13            .word	$2C13
30235 7E81                      4014            .word	$4014
30236 7E83                      5715            .word	$5715
30237 7E85                      9816            .word	$9816
30238 7E87                      C317            .word	$C317
30239 7E89                      FF18            .word	$FF18
30240                                           ! 4301 0x001a,0x321b,0x001d,
30241 7E8B                      001A            .word	$1A
30242 7E8D                      321B            .word	$321B
30243 7E8F                      001D            .word	$1D
30244                                           ! 4302 0xffff
30245                                           ! 4303 };
30246 7E91                      FFFF            .word	$FFFF
30247                                           !BCC_EOS
30248                                           ! 4304 unsigned short cseq_1024x768x8[] = {
30249                                           export	_cseq_1024x768x8
30250                       00007E93            _cseq_1024x768x8:
30251                                           ! 4305 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30252 7E93                      0300            .word	$300
30253 7E95                      2101            .word	$2101
30254 7E97                      0F02            .word	$F02
30255 7E99                      0003            .word	3
30256 7E9B                      0E04            .word	$E04
30257 7E9D                      1107            .word	$1107
30258                                           ! 4306 0x760b,0x760c,0x760d,0x760e,
30259 7E9F                      760B            .word	$760B
30260 7EA1                      760C            .word	$760C
30261 7EA3                      760D            .word	$760D
30262 7EA5                      760E            .word	$760E
30263                                           ! 4307 0x0412,0x0013,0x2017,
30264 7EA7                      0412            .word	$412
30265 7EA9                      0013            .word	$13
30266 7EAB                      2017            .word	$2017
30267                                           ! 4308 0x341b,0x341c,0x341d,0x341e,
30268 7EAD                      341B            .word	$341B
30269 7EAF                      341C            .word	$341C
30270 7EB1                      341D            .word	$341D
30271 7EB3                      341E            .word	$341E
30272                                           ! 4309 0xffff
30273                                           ! 4310 };
30274 7EB5                      FFFF            .word	$FFFF
30275                                           !BCC_EOS
30276                                           ! 4311 unsigned short ccrtc_1024x768x8[] = {
30277                                           export	_ccrtc_1024x768x8
30278                       00007EB7            _ccrtc_1024x768x8:
30279                                           ! 4312 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
30280 7EB7                      2911            .word	$2911
30281 7EB9                      A300            .word	$A300
30282 7EBB                      7F01            .word	$7F01
30283 7EBD                      7F02            .word	$7F02
30284 7EBF                      8603            .word	$8603
30285 7EC1                      8304            .word	$8304
30286 7EC3                      9405            .word	$9405
30287 7EC5                      2406            .word	$2406
30288 7EC7                      F507            .word	$F507
30289                                           ! 4313 0x6009,0x000c,0x000d,
30290 7EC9                      6009            .word	$6009
30291 7ECB                      000C            .word	$C
30292 7ECD                      000D            .word	$D
30293                                           ! 4314 0x0310,0xff12,0x8013,0x4014,0xff15,0x2416,0xc317,0xff18,
30294 7ECF                      0310            .word	$310
30295 7ED1                      FF12            .word	$FF12
30296 7ED3                      8013            .word	$8013
30297 7ED5                      4014            .word	$4014
30298 7ED7                      FF15            .word	$FF15
30299 7ED9                      2416            .word	$2416
30300 7EDB                      C317            .word	$C317
30301 7EDD                      FF18            .word	$FF18
30302                                           ! 4315 0x001a,0x221b,0x001d,
30303 7EDF                      001A            .word	$1A
30304 7EE1                      221B            .word	$221B
30305 7EE3                      001D            .word	$1D
30306                                           ! 4316 0xffff
30307                                           ! 4317 };
30308 7EE5                      FFFF            .word	$FFFF
30309                                           !BCC_EOS
30310                                           ! 4318 unsigned short cseq_1024x768x16[] = {
30311                                           export	_cseq_1024x768x16
30312                       00007EE7            _cseq_1024x768x16:
30313                                           ! 4319 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30314 7EE7                      0300            .word	$300
30315 7EE9                      2101            .word	$2101
30316 7EEB                      0F02            .word	$F02
30317 7EED                      0003            .word	3
30318 7EEF                      0E04            .word	$E04
30319 7EF1                      1707            .word	$1707
30320                                           ! 4320 0x760b,0x760c,0x760d,0x760e,
30321 7EF3                      760B            .word	$760B
30322 7EF5                      760C            .word	$760C
30323 7EF7                      760D            .word	$760D
30324 7EF9                      760E            .word	$760E
30325                                           ! 4321 0x0412,0x0013,0x2017,
30326 7EFB                      0412            .word	$412
30327 7EFD                      0013            .word	$13
30328 7EFF                      2017            .word	$2017
30329                                           ! 4322 0x341b,0x341c,0x341d,0x341e,
30330 7F01                      341B            .word	$341B
30331 7F03                      341C            .word	$341C
30332 7F05                      341D            .word	$341D
30333 7F07                      341E            .word	$341E
30334                                           ! 4323 0xffff
30335                                           ! 4324 };
30336 7F09                      FFFF            .word	$FFFF
30337                                           !BCC_EOS
30338                                           ! 4325 unsigned short ccrtc_1024x768x16[] = {
30339                                           export	_ccrtc_1024x768x16
30340                       00007F0B            _ccrtc_1024x768x16:
30341                                           ! 4326 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
30342 7F0B                      2911            .word	$2911
30343 7F0D                      A300            .word	$A300
30344 7F0F                      7F01            .word	$7F01
30345 7F11                      7F02            .word	$7F02
30346 7F13                      8603            .word	$8603
30347 7F15                      8304            .word	$8304
30348 7F17                      9405            .word	$9405
30349 7F19                      2406            .word	$2406
30350 7F1B                      F507            .word	$F507
30351                                           ! 4327 0x6009,0x000c,0x000d,
30352 7F1D                      6009            .word	$6009
30353 7F1F                      000C            .word	$C
30354 7F21                      000D            .word	$D
30355                                           ! 4328 0x0310,0xff12,0x0013,0x4014,0xff15,0x2416,0xc317,0xff18,
30356 7F23                      0310            .word	$310
30357 7F25                      FF12            .word	$FF12
30358 7F27                      0013            .word	$13
30359 7F29                      4014            .word	$4014
30360 7F2B                      FF15            .word	$FF15
30361 7F2D                      2416            .word	$2416
30362 7F2F                      C317            .word	$C317
30363 7F31                      FF18            .word	$FF18
30364                                           ! 4329 0x001a,0x321b,0x001d,
30365 7F33                      001A            .word	$1A
30366 7F35                      321B            .word	$321B
30367 7F37                      001D            .word	$1D
30368                                           ! 4330 0xffff
30369                                           ! 4331 };
30370 7F39                      FFFF            .word	$FFFF
30371                                           !BCC_EOS
30372                                           ! 4332 unsigned short cseq_1024x768x24[] = {
30373                                           export	_cseq_1024x768x24
30374                       00007F3B            _cseq_1024x768x24:
30375                                           ! 4333 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1507,
30376 7F3B                      0300            .word	$300
30377 7F3D                      2101            .word	$2101
30378 7F3F                      0F02            .word	$F02
30379 7F41                      0003            .word	3
30380 7F43                      0E04            .word	$E04
30381 7F45                      1507            .word	$1507
30382                                           ! 4334 0x760b,0x760c,0x760d,0x760e,
30383 7F47                      760B            .word	$760B
30384 7F49                      760C            .word	$760C
30385 7F4B                      760D            .word	$760D
30386 7F4D                      760E            .word	$760E
30387                                           ! 4335 0x0412,0x0013,0x2017,
30388 7F4F                      0412            .word	$412
30389 7F51                      0013            .word	$13
30390 7F53                      2017            .word	$2017
30391                                           ! 4336 0x341b,0x341c,0x341d,0x341e,
30392 7F55                      341B            .word	$341B
30393 7F57                      341C            .word	$341C
30394 7F59                      341D            .word	$341D
30395 7F5B                      341E            .word	$341E
30396                                           ! 4337 0xffff
30397                                           ! 4338 };
30398 7F5D                      FFFF            .word	$FFFF
30399                                           !BCC_EOS
30400                                           ! 4339 unsigned short ccrtc_1024x768x24[] = {
30401                                           export	_ccrtc_1024x768x24
30402                       00007F5F            _ccrtc_1024x768x24:
30403                                           ! 4340 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
30404 7F5F                      2911            .word	$2911
30405 7F61                      A300            .word	$A300
30406 7F63                      7F01            .word	$7F01
30407 7F65                      7F02            .word	$7F02
30408 7F67                      8603            .word	$8603
30409 7F69                      8304            .word	$8304
30410 7F6B                      9405            .word	$9405
30411 7F6D                      2406            .word	$2406
30412 7F6F                      F507            .word	$F507
30413                                           ! 4341 0x6009,0x000c,0x000d,
30414 7F71                      6009            .word	$6009
30415 7F73                      000C            .word	$C
30416 7F75                      000D            .word	$D
30417                                           ! 4342 0x0310,0xff12,0x8013,0x4014,0xff15,0x2416,0xc317,0xff18,
30418 7F77                      0310            .word	$310
30419 7F79                      FF12            .word	$FF12
30420 7F7B                      8013            .word	$8013
30421 7F7D                      4014            .word	$4014
30422 7F7F                      FF15            .word	$FF15
30423 7F81                      2416            .word	$2416
30424 7F83                      C317            .word	$C317
30425 7F85                      FF18            .word	$FF18
30426                                           ! 4343 0x001a,0x321b,0x001d,
30427 7F87                      001A            .word	$1A
30428 7F89                      321B            .word	$321B
30429 7F8B                      001D            .word	$1D
30430                                           ! 4344 0xffff
30431                                           ! 4345 };
30432 7F8D                      FFFF            .word	$FFFF
30433                                           !BCC_EOS
30434                                           ! 4346 unsigned short cseq_1280x1024x8[] = {
30435                                           export	_cseq_1280x1024x8
30436                       00007F8F            _cseq_1280x1024x8:
30437                                           ! 4347 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30438 7F8F                      0300            .word	$300
30439 7F91                      2101            .word	$2101
30440 7F93                      0F02            .word	$F02
30441 7F95                      0003            .word	3
30442 7F97                      0E04            .word	$E04
30443 7F99                      1107            .word	$1107
30444                                           ! 4348 0x760b,0x760c,0x760d,0x760e,
30445 7F9B                      760B            .word	$760B
30446 7F9D                      760C            .word	$760C
30447 7F9F                      760D            .word	$760D
30448 7FA1                      760E            .word	$760E
30449                                           ! 4349 0x0412,0x0013,0x2017,
30450 7FA3                      0412            .word	$412
30451 7FA5                      0013            .word	$13
30452 7FA7                      2017            .word	$2017
30453                                           ! 4350 0x341b,0x341c,0x341d,0x341e,
30454 7FA9                      341B            .word	$341B
30455 7FAB                      341C            .word	$341C
30456 7FAD                      341D            .word	$341D
30457 7FAF                      341E            .word	$341E
30458                                           ! 4351 0xffff
30459                                           ! 4352 };
30460 7FB1                      FFFF            .word	$FFFF
30461                                           !BCC_EOS
30462                                           ! 4353 unsigned short ccrtc_1280x1024x8[] = {
30463                                           export	_ccrtc_1280x1024x8
30464                       00007FB3            _ccrtc_1280x1024x8:
30465                                           ! 4354 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
30466 7FB3                      2911            .word	$2911
30467 7FB5                      C300            .word	$C300
30468 7FB7                      9F01            .word	$9F01
30469 7FB9                      9F02            .word	$9F02
30470 7FBB                      8603            .word	$8603
30471 7FBD                      8304            .word	$8304
30472 7FBF                      9405            .word	$9405
30473 7FC1                      2406            .word	$2406
30474 7FC3                      F707            .word	$F707
30475                                           ! 4355 0x6009,0x000c,0x000d,
30476 7FC5                      6009            .word	$6009
30477 7FC7                      000C            .word	$C
30478 7FC9                      000D            .word	$D
30479                                           ! 4356 0x0310,0xff12,0xa013,0x4014,0xff15,0x2416,0xc317,0xff18,
30480 7FCB                      0310            .word	$310
30481 7FCD                      FF12            .word	$FF12
30482 7FCF                      A013            .word	$A013
30483 7FD1                      4014            .word	$4014
30484 7FD3                      FF15            .word	$FF15
30485 7FD5                      2416            .word	$2416
30486 7FD7                      C317            .word	$C317
30487 7FD9                      FF18            .word	$FF18
30488                                           ! 4357 0x001a,0x221b,0x001d,
30489 7FDB                      001A            .word	$1A
30490 7FDD                      221B            .word	$221B
30491 7FDF                      001D            .word	$1D
30492                                           ! 4358 0xffff
30493                                           ! 4359 };
30494 7FE1                      FFFF            .word	$FFFF
30495                                           !BCC_EOS
30496                                           ! 4360 unsigned short cseq_1280x1024x16[] = {
30497                                           export	_cseq_1280x1024x16
30498                       00007FE3            _cseq_1280x1024x16:
30499                                           ! 4361 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30500 7FE3                      0300            .word	$300
30501 7FE5                      2101            .word	$2101
30502 7FE7                      0F02            .word	$F02
30503 7FE9                      0003            .word	3
30504 7FEB                      0E04            .word	$E04
30505 7FED                      1707            .word	$1707
30506                                           ! 4362 0x760b,0x760c,0x760d,0x760e,
30507 7FEF                      760B            .word	$760B
30508 7FF1                      760C            .word	$760C
30509 7FF3                      760D            .word	$760D
30510 7FF5                      760E            .word	$760E
30511                                           ! 4363 0x0412,0x0013,0x2017,
30512 7FF7                      0412            .word	$412
30513 7FF9                      0013            .word	$13
30514 7FFB                      2017            .word	$2017
30515                                           ! 4364 0x341b,0x341c,0x341d,0x341e,
30516 7FFD                      341B            .word	$341B
30517 7FFF                      341C            .word	$341C
30518 8001                      341D            .word	$341D
30519 8003                      341E            .word	$341E
30520                                           ! 4365 0xffff
30521                                           ! 4366 };
30522 8005                      FFFF            .word	$FFFF
30523                                           !BCC_EOS
30524                                           ! 4367 uns
30525                                           ! 4367 igned short ccrtc_1280x1024x16[] = {
30526                                           export	_ccrtc_1280x1024x16
30527                       00008007            _ccrtc_1280x1024x16:
30528                                           ! 4368 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
30529 8007                      2911            .word	$2911
30530 8009                      C300            .word	$C300
30531 800B                      9F01            .word	$9F01
30532 800D                      9F02            .word	$9F02
30533 800F                      8603            .word	$8603
30534 8011                      8304            .word	$8304
30535 8013                      9405            .word	$9405
30536 8015                      2406            .word	$2406
30537 8017                      F707            .word	$F707
30538                                           ! 4369 0x6009,0x000c,0x000d,
30539 8019                      6009            .word	$6009
30540 801B                      000C            .word	$C
30541 801D                      000D            .word	$D
30542                                           ! 4370 0x0310,0xff12,0x4013,0x4014,0xff15,0x2416,0xc317,0xff18,
30543 801F                      0310            .word	$310
30544 8021                      FF12            .word	$FF12
30545 8023                      4013            .word	$4013
30546 8025                      4014            .word	$4014
30547 8027                      FF15            .word	$FF15
30548 8029                      2416            .word	$2416
30549 802B                      C317            .word	$C317
30550 802D                      FF18            .word	$FF18
30551                                           ! 4371 0x001a,0x321b,0x001d,
30552 802F                      001A            .word	$1A
30553 8031                      321B            .word	$321B
30554 8033                      001D            .word	$1D
30555                                           ! 4372 0xffff
30556                                           ! 4373 };
30557 8035                      FFFF            .word	$FFFF
30558                                           !BCC_EOS
30559                                           ! 4374 unsigned short cseq_1600x1200x8[] = {
30560                                           export	_cseq_1600x1200x8
30561                       00008037            _cseq_1600x1200x8:
30562                                           ! 4375 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30563 8037                      0300            .word	$300
30564 8039                      2101            .word	$2101
30565 803B                      0F02            .word	$F02
30566 803D                      0003            .word	3
30567 803F                      0E04            .word	$E04
30568 8041                      1107            .word	$1107
30569                                           ! 4376 0x760b,0x760c,0x760d,0x760e,
30570 8043                      760B            .word	$760B
30571 8045                      760C            .word	$760C
30572 8047                      760D            .word	$760D
30573 8049                      760E            .word	$760E
30574                                           ! 4377 0x0412,0x0013,0x2017,
30575 804B                      0412            .word	$412
30576 804D                      0013            .word	$13
30577 804F                      2017            .word	$2017
30578                                           ! 4378 0x341b,0x341c,0x341d,0x341e,
30579 8051                      341B            .word	$341B
30580 8053                      341C            .word	$341C
30581 8055                      341D            .word	$341D
30582 8057                      341E            .word	$341E
30583                                           ! 4379 0xffff
30584                                           ! 4380 };
30585 8059                      FFFF            .word	$FFFF
30586                                           !BCC_EOS
30587                                           ! 4381 unsigned short ccrtc_1600x1200x8[] = {
30588                                           export	_ccrtc_1600x1200x8
30589                       0000805B            _ccrtc_1600x1200x8:
30590                                           ! 4382 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
30591 805B                      2911            .word	$2911
30592 805D                      C300            .word	$C300
30593 805F                      9F01            .word	$9F01
30594 8061                      9F02            .word	$9F02
30595 8063                      8603            .word	$8603
30596 8065                      8304            .word	$8304
30597 8067                      9405            .word	$9405
30598 8069                      2406            .word	$2406
30599 806B                      F707            .word	$F707
30600                                           ! 4383 0x6009,0x000c,0x000d,
30601 806D                      6009            .word	$6009
30602 806F                      000C            .word	$C
30603 8071                      000D            .word	$D
30604                                           ! 4384 0x0310,0xff12,0xa013,0x4014,0xff15,0x2416,0xc317,0xff18,
30605 8073                      0310            .word	$310
30606 8075                      FF12            .word	$FF12
30607 8077                      A013            .word	$A013
30608 8079                      4014            .word	$4014
30609 807B                      FF15            .word	$FF15
30610 807D                      2416            .word	$2416
30611 807F                      C317            .word	$C317
30612 8081                      FF18            .word	$FF18
30613                                           ! 4385 0x001a,0x221b,0x001d,
30614 8083                      001A            .word	$1A
30615 8085                      221B            .word	$221B
30616 8087                      001D            .word	$1D
30617                                           ! 4386 0xffff
30618                                           ! 4387 };
30619 8089                      FFFF            .word	$FFFF
30620                                           !BCC_EOS
30621                                           ! 4388 cirrus_mode_t cirrus_modes[] =
30622                                           ! 4389 {
30623                                           export	_cirrus_modes
30624                       0000808B            _cirrus_modes:
30625                                           ! 4390  {0x5f,640,480,8,0x00,
30626 808B                      005F            .word	$5F
30627 808D                      0280            .word	$280
30628 808F                      01E0            .word	$1E0
30629 8091                      0008            .word	8
30630 8093                      0000            .word	0
30631                                           ! 4391    cseq_640x480x8,cgraph_svgacolor,ccrtc_640x480x8,8,
30632 8095                      7C9B            .word	_cseq_640x480x8
30633 8097                      7C81            .word	_cgraph_svgacolor
30634 8099                      7CBF            .word	_ccrtc_640x480x8
30635 809B                        08            .byte	8
30636                                           ! 4392    4,0,0,0,0,0,0,0,0},
30637 809C                        04            .byte	4
30638 809D                        00            .byte	0
30639 809E                        00            .byte	0
30640 809F                        00            .byte	0
30641 80A0                        00            .byte	0
30642 80A1                        00            .byte	0
30643 80A2                        00            .byte	0
30644 80A3                        00            .byte	0
30645 80A4                        00            .byte	0
30646                                           ! 4393  {0x64,640,480,16,0xe1,
30647 80A5                      0064            .word	$64
30648 80A7                      0280            .word	$280
30649 80A9                      01E0            .word	$1E0
30650 80AB                      0010            .word	$10
30651 80AD                      00E1            .word	$E1
30652                                           ! 4394    cseq_640x480x16,cgraph_svgacolor,ccrtc_640x480x16,16,
30653 80AF                      7CEF            .word	_cseq_640x480x16
30654 80B1                      7C81            .word	_cgraph_svgacolor
30655 80B3                      7D13            .word	_ccrtc_640x480x16
30656 80B5                        10            .byte	$10
30657                                           ! 4395    6,5,11,6,5,5,0,0,0},
30658 80B6                        06            .byte	6
30659 80B7                        05            .byte	5
30660 80B8                        0B            .byte	$B
30661 80B9                        06            .byte	6
30662 80BA                        05            .byte	5
30663 80BB                        05            .byte	5
30664 80BC                        00            .byte	0
30665 80BD                        00            .byte	0
30666 80BE                        00            .byte	0
30667                                           ! 4396  {0x66,640,480,15,0xf0,
30668 80BF                      0066            .word	$66
30669 80C1                      0280            .word	$280
30670 80C3                      01E0            .word	$1E0
30671 80C5                      000F            .word	$F
30672 80C7                      00F0            .word	$F0
30673                                           ! 4397    cseq_640x480x16,cgraph_svgacolor,ccrtc_640x480x16,16,
30674 80C9                      7CEF            .word	_cseq_640x480x16
30675 80CB                      7C81            .word	_cgraph_svgacolor
30676 80CD                      7D13            .word	_ccrtc_640x480x16
30677 80CF                        10            .byte	$10
30678                                           ! 4398    6,5,10,5,5,5,0,1,15},
30679 80D0                        06            .byte	6
30680 80D1                        05            .byte	5
30681 80D2                        0A            .byte	$A
30682 80D3                        05            .byte	5
30683 80D4                        05            .byte	5
30684 80D5                        05            .byte	5
30685 80D6                        00            .byte	0
30686 80D7                        01            .byte	1
30687 80D8                        0F            .byte	$F
30688                                           ! 4399  {0x71,640,480,24,0xe5,
30689 80D9                      0071            .word	$71
30690 80DB                      0280            .word	$280
30691 80DD                      01E0            .word	$1E0
30692 80DF                      0018            .word	$18
30693 80E1                      00E5            .word	$E5
30694                                           ! 4400    cseq_640x480x24,cgraph_svgacolor,ccrtc_640x480x24,24,
30695 80E3                      7D43            .word	_cseq_640x480x24
30696 80E5                      7C81            .word	_cgraph_svgacolor
30697 80E7                      7D67            .word	_ccrtc_640x480x24
30698 80E9                        18            .byte	$18
30699                                           ! 4401    6,8,16,8,8,8,0,0,0},
30700 80EA                        06            .byte	6
30701 80EB                        08            .byte	8
30702 80EC                        10            .byte	$10
30703 80ED                        08            .byte	8
30704 80EE                        08            .byte	8
30705 80EF                        08            .byte	8
30706 80F0                        00            .byte	0
30707 80F1                        00            .byte	0
30708 80F2                        00            .byte	0
30709                                           ! 4402  {0x5c,800,600,8,0x00,
30710 80F3                      005C            .word	$5C
30711 80F5                      0320            .word	$320
30712 80F7                      0258            .word	$258
30713 80F9                      0008            .word	8
30714 80FB                      0000            .word	0
30715                                           ! 4403    cseq_800x600x8,cgraph_svgacolor,ccrtc_800x600x8,8,
30716 80FD                      7D97            .word	_cseq_800x600x8
30717 80FF                      7C81            .word	_cgraph_svgacolor
30718 8101                      7DBB            .word	_ccrtc_800x600x8
30719 8103                        08            .byte	8
30720                                           ! 4404    4,0,0,0,0,0,0,0,0},
30721 8104                        04            .byte	4
30722 8105                        00            .byte	0
30723 8106                        00            .byte	0
30724 8107                        00            .byte	0
30725 8108                        00            .byte	0
30726 8109                        00            .byte	0
30727 810A                        00            .byte	0
30728 810B                        00            .byte	0
30729 810C                        00            .byte	0
30730                                           ! 4405  {0x65,800,600,16,0xe1,
30731 810D                      0065            .word	$65
30732 810F                      0320            .word	$320
30733 8111                      0258            .word	$258
30734 8113                      0010            .word	$10
30735 8115                      00E1            .word	$E1
30736                                           ! 4406    cseq_800x600x16,cgraph_svgacolor,ccrtc_800x600x16,16,
30737 8117                      7DEB            .word	_cseq_800x600x16
30738 8119                      7C81            .word	_cgraph_svgacolor
30739 811B                      7E0F            .word	_ccrtc_800x600x16
30740 811D                        10            .byte	$10
30741                                           ! 4407    6,5,11,6,5,5,0,0,0},
30742 811E                        06            .byte	6
30743 811F                        05            .byte	5
30744 8120                        0B            .byte	$B
30745 8121                        06            .byte	6
30746 8122                        05            .byte	5
30747 8123                        05            .byte	5
30748 8124                        00            .byte	0
30749 8125                        00            .byte	0
30750 8126                        00            .byte	0
30751                                           ! 4408  {0x67,800,600,15,0xf0,
30752 8127                      0067            .word	$67
30753 8129                      0320            .word	$320
30754 812B                      0258            .word	$258
30755 812D                      000F            .word	$F
30756 812F                      00F0            .word	$F0
30757                                           ! 4409    cseq_800x600x16,cgraph_svgacolor,ccrtc_800x600x16,16,
30758 8131                      7DEB            .word	_cseq_800x600x16
30759 8133                      7C81            .word	_cgraph_svgacolor
30760 8135                      7E0F            .word	_ccrtc_800x600x16
30761 8137                        10            .byte	$10
30762                                           ! 4410    6,5,10,5,5,5,0,1,15},
30763 8138                        06            .byte	6
30764 8139                        05            .byte	5
30765 813A                        0A            .byte	$A
30766 813B                        05            .byte	5
30767 813C                        05            .byte	5
30768 813D                        05            .byte	5
30769 813E                        00            .byte	0
30770 813F                        01            .byte	1
30771 8140                        0F            .byte	$F
30772                                           ! 4411  {0x60,1024,768,8,0x00,
30773 8141                      0060            .word	$60
30774 8143                      0400            .word	$400
30775 8145                      0300            .word	$300
30776 8147                      0008            .word	8
30777 8149                      0000            .word	0
30778                                           ! 4412    cseq_1024x768x8,cgraph_svgacolor,ccrtc_1024x768x8,8,
30779 814B                      7E93            .word	_cseq_1024x768x8
30780 814D                      7C81            .word	_cgraph_svgacolor
30781 814F                      7EB7            .word	_ccrtc_1024x768x8
30782 8151                        08            .byte	8
30783                                           ! 4413    4,0,0,0,0,0,0,0,0},
30784 8152                        04            .byte	4
30785 8153                        00            .byte	0
30786 8154                        00            .byte	0
30787 8155                        00            .byte	0
30788 8156                        00            .byte	0
30789 8157                        00            .byte	0
30790 8158                        00            .byte	0
30791 8159                        00            .byte	0
30792 815A                        00            .byte	0
30793                                           ! 4414  {0x74,1024,768,16,0xe1,
30794 815B                      0074            .word	$74
30795 815D                      0400            .word	$400
30796 815F                      0300            .word	$300
30797 8161                      0010            .word	$10
30798 8163                      00E1            .word	$E1
30799                                           ! 4415    cseq_1024x768x16,cgraph_svgacolor,ccrtc_1024x768x16,16,
30800 8165                      7EE7            .word	_cseq_1024x768x16
30801 8167                      7C81            .word	_cgraph_svgacolor
30802 8169                      7F0B            .word	_ccrtc_1024x768x16
30803 816B                        10            .byte	$10
30804                                           ! 4416    6,5,11,6,5,5,0,0,0},
30805 816C                        06            .byte	6
30806 816D                        05            .byte	5
30807 816E                        0B            .byte	$B
30808 816F                        06            .byte	6
30809 8170                        05            .byte	5
30810 8171                        05            .byte	5
30811 8172                        00            .byte	0
30812 8173                        00            .byte	0
30813 8174                        00            .byte	0
30814                                           ! 4417  {0x68,1024,768,15,0xf0,
30815 8175                      0068            .word	$68
30816 8177                      0400            .word	$400
30817 8179                      0300            .word	$300
30818 817B                      000F            .word	$F
30819 817D                      00F0            .word	$F0
30820                                           ! 4418    cseq_1024x768x16,cgraph_svgacolor,ccrtc_1024x768x16,16,
30821 817F                      7EE7            .word	_cseq_1024x768x16
30822 8181                      7C81            .word	_cgraph_svgacolor
30823 8183                      7F0B            .word	_ccrtc_1024x768x16
30824 8185                        10            .byte	$10
30825                                           ! 4419    6,5,10,5,5,5,0,1,15},
30826 8186                        06            .byte	6
30827 8187                        05            .byte	5
30828 8188                        0A            .byte	$A
30829 8189                        05            .byte	5
30830 818A                        05            .byte	5
30831 818B                        05            .byte	5
30832 818C                        00            .byte	0
30833 818D                        01            .byte	1
30834 818E                        0F            .byte	$F
30835                                           ! 4420  {0x78,800,600,24,0xe5,
30836 818F                      0078            .word	$78
30837 8191                      0320            .word	$320
30838 8193                      0258            .word	$258
30839 8195                      0018            .word	$18
30840 8197                      00E5            .word	$E5
30841                                           ! 4421    cseq_800x600x24,cgraph_svgacolor,ccrtc_800x600x24,24,
30842 8199                      7E3F            .word	_cseq_800x600x24
30843 819B                      7C81            .word	_cgraph_svgacolor
30844 819D                      7E63            .word	_ccrtc_800x600x24
30845 819F                        18            .byte	$18
30846                                           ! 4422    6,8,16,8,8,8,0,0,0},
30847 81A0                        06            .byte	6
30848 81A1                        08            .byte	8
30849 81A2                        10            .byte	$10
30850 81A3                        08            .byte	8
30851 81A4                        08            .byte	8
30852 81A5                        08            .byte	8
30853 81A6                        00            .byte	0
30854 81A7                        00            .byte	0
30855 81A8                        00            .byte	0
30856                                           ! 4423  {0x79,1024,768,24,0xe5,
30857 81A9                      0079            .word	$79
30858 81AB                      0400            .word	$400
30859 81AD                      0300            .word	$300
30860 81AF                      0018            .word	$18
30861 81B1                      00E5            .word	$E5
30862                                           ! 4424    cseq_1024x768x24,cgraph_svgacolor,ccrtc_1024x768x24,24,
30863 81B3                      7F3B            .word	_cseq_1024x768x24
30864 81B5                      7C81            .word	_cgraph_svgacolor
30865 81B7                      7F5F            .word	_ccrtc_1024x768x24
30866 81B9                        18            .byte	$18
30867                                           ! 4425    6,8,16,8,8,8,0,0,0},
30868 81BA                        06            .byte	6
30869 81BB                        08            .byte	8
30870 81BC                        10            .byte	$10
30871 81BD                        08            .byte	8
30872 81BE                        08            .byte	8
30873 81BF                        08            .byte	8
30874 81C0                        00            .byte	0
30875 81C1                        00            .byte	0
30876 81C2                        00            .byte	0
30877                                           ! 4426  {0x6d,1280,1024,8,0x00,
30878 81C3                      006D            .word	$6D
30879 81C5                      0500            .word	$500
30880 81C7                      0400            .word	$400
30881 81C9                      0008            .word	8
30882 81CB                      0000            .word	0
30883                                           ! 4427    cseq_1280x1024x8,cgraph_svgacolor,ccrtc_1280x1024x8,8,
30884 81CD                      7F8F            .word	_cseq_1280x1024x8
30885 81CF                      7C81            .word	_cgraph_svgacolor
30886 81D1                      7FB3            .word	_ccrtc_1280x1024x8
30887 81D3                        08            .byte	8
30888                                           ! 4428    4,0,0,0,0,0,0,0,0},
30889 81D4                        04            .byte	4
30890 81D5                        00            .byte	0
30891 81D6                        00            .byte	0
30892 81D7                        00            .byte	0
30893 81D8                        00            .byte	0
30894 81D9                        00            .byte	0
30895 81DA                        00            .byte	0
30896 81DB                        00            .byte	0
30897 81DC                        00            .byte	0
30898                                           ! 4429  {0x69,1280,1024,15,0xf0,
30899 81DD                      0069            .word	$69
30900 81DF                      0500            .word	$500
30901 81E1                      0400            .word	$400
30902 81E3                      000F            .word	$F
30903 81E5                      00F0            .word	$F0
30904                                           ! 4430    cseq_1280x1024x16,cgrap
30905 81E7                      7FE3            .word	_cseq_1280x1024x16
30906                                           ! 4430 h_svgacolor,ccrtc_1280x1024x16,16,
30907 81E9                      7C81            .word	_cgraph_svgacolor
30908 81EB                      8007            .word	_ccrtc_1280x1024x16
30909 81ED                        10            .byte	$10
30910                                           ! 4431    6,5,10,5,5,5,0,1,15},
30911 81EE                        06            .byte	6
30912 81EF                        05            .byte	5
30913 81F0                        0A            .byte	$A
30914 81F1                        05            .byte	5
30915 81F2                        05            .byte	5
30916 81F3                        05            .byte	5
30917 81F4                        00            .byte	0
30918 81F5                        01            .byte	1
30919 81F6                        0F            .byte	$F
30920                                           ! 4432  {0x75,1280,1024,16,0xe1,
30921 81F7                      0075            .word	$75
30922 81F9                      0500            .word	$500
30923 81FB                      0400            .word	$400
30924 81FD                      0010            .word	$10
30925 81FF                      00E1            .word	$E1
30926                                           ! 4433    cseq_1280x1024x16,cgraph_svgacolor,ccrtc_1280x1024x16,16,
30927 8201                      7FE3            .word	_cseq_1280x1024x16
30928 8203                      7C81            .word	_cgraph_svgacolor
30929 8205                      8007            .word	_ccrtc_1280x1024x16
30930 8207                        10            .byte	$10
30931                                           ! 4434    6,5,11,6,5,5,0,0,0},
30932 8208                        06            .byte	6
30933 8209                        05            .byte	5
30934 820A                        0B            .byte	$B
30935 820B                        06            .byte	6
30936 820C                        05            .byte	5
30937 820D                        05            .byte	5
30938 820E                        00            .byte	0
30939 820F                        00            .byte	0
30940 8210                        00            .byte	0
30941                                           ! 4435  {0x7b,1600,1200,8,0x00,
30942 8211                      007B            .word	$7B
30943 8213                      0640            .word	$640
30944 8215                      04B0            .word	$4B0
30945 8217                      0008            .word	8
30946 8219                      0000            .word	0
30947                                           ! 4436    cseq_1600x1200x8,cgraph_svgacolor,ccrtc_1600x1200x8,8,
30948 821B                      8037            .word	_cseq_1600x1200x8
30949 821D                      7C81            .word	_cgraph_svgacolor
30950 821F                      805B            .word	_ccrtc_1600x1200x8
30951 8221                        08            .byte	8
30952                                           ! 4437    4,0,0,0,0,0,0,0,0},
30953 8222                        04            .byte	4
30954 8223                        00            .byte	0
30955 8224                        00            .byte	0
30956 8225                        00            .byte	0
30957 8226                        00            .byte	0
30958 8227                        00            .byte	0
30959 8228                        00            .byte	0
30960 8229                        00            .byte	0
30961 822A                        00            .byte	0
30962                                           ! 4438  {0xfe,0,0,0,0,cseq_vga,cgraph_vga,ccrtc_vga,0,
30963 822B                      00FE            .word	$FE
30964 822D                      0000            .word	0
30965 822F                      0000            .word	0
30966 8231                      0000            .word	0
30967 8233                      0000            .word	0
30968 8235                      7C6D            .word	_cseq_vga
30969 8237                      7C71            .word	_cgraph_vga
30970 8239                      7C79            .word	_ccrtc_vga
30971 823B                        00            .byte	0
30972                                           ! 4439    0xff,0,0,0,0,0,0,0,0},
30973 823C                        FF            .byte	$FF
30974 823D                        00            .byte	0
30975 823E                        00            .byte	0
30976 823F                        00            .byte	0
30977 8240                        00            .byte	0
30978 8241                        00            .byte	0
30979 8242                        00            .byte	0
30980 8243                        00            .byte	0
30981 8244                        00            .byte	0
30982                                           ! 4440  {0xff,0,0,0,0,0,0,0,0,
30983 8245                      00FF            .word	$FF
30984 8247                      0000            .word	0
30985 8249                      0000            .word	0
30986 824B                      0000            .word	0
30987 824D                      0000            .word	0
30988 824F                      0000            .word	0
30989 8251                      0000            .word	0
30990 8253                      0000            .word	0
30991 8255                        00            .byte	0
30992                                           ! 4441    0xff,0,0,0,0,0,0,0,0},
30993 8256                        FF            .byte	$FF
30994 8257                        00            .byte	0
30995 8258                        00            .byte	0
30996 8259                        00            .byte	0
30997 825A                        00            .byte	0
30998 825B                        00            .byte	0
30999 825C                        00            .byte	0
31000 825D                        00            .byte	0
31001 825E                        00            .byte	0
31002                                           ! 4442 };
31003                                           !BCC_EOS
31004                                           ! 4443 unsigned char cirrus_id_table[] = {
31005                                           export	_cirrus_id_table
31006                       0000825F            _cirrus_id_table:
31007                                           ! 4444   0xA0, 0x32,
31008 825F                        A0            .byte	$A0
31009 8260                        32            .byte	$32
31010                                           ! 4445   0xB8, 0x39,
31011 8261                        B8            .byte	$B8
31012 8262                        39            .byte	$39
31013                                           ! 4446   0xff, 0xff
31014 8263                        FF            .byte	$FF
31015                                           ! 4447 };
31016 8264                        FF            .byte	$FF
31017                                           !BCC_EOS
31018                                           ! 4448 unsigned short cirrus_vesa_modelist[] = {
31019                                           export	_cirrus_vesa_modelist
31020                       00008265            _cirrus_vesa_modelist:
31021                                           ! 4449   0x101, 0x5f,
31022 8265                      0101            .word	$101
31023 8267                      005F            .word	$5F
31024                                           ! 4450   0x110, 0x66,
31025 8269                      0110            .word	$110
31026 826B                      0066            .word	$66
31027                                           ! 4451   0x111, 0x64,
31028 826D                      0111            .word	$111
31029 826F                      0064            .word	$64
31030                                           ! 4452   0x112, 0x71,
31031 8271                      0112            .word	$112
31032 8273                      0071            .word	$71
31033                                           ! 4453   0x103, 0x5c,
31034 8275                      0103            .word	$103
31035 8277                      005C            .word	$5C
31036                                           ! 4454   0x113, 0x67,
31037 8279                      0113            .word	$113
31038 827B                      0067            .word	$67
31039                                           ! 4455   0x114, 0x65,
31040 827D                      0114            .word	$114
31041 827F                      0065            .word	$65
31042                                           ! 4456   0x115, 0x78,
31043 8281                      0115            .word	$115
31044 8283                      0078            .word	$78
31045                                           ! 4457   0x105, 0x60,
31046 8285                      0105            .word	$105
31047 8287                      0060            .word	$60
31048                                           ! 4458   0x116, 0x68,
31049 8289                      0116            .word	$116
31050 828B                      0068            .word	$68
31051                                           ! 4459   0x117, 0x74,
31052 828D                      0117            .word	$117
31053 828F                      0074            .word	$74
31054                                           ! 4460   0x118, 0x79,
31055 8291                      0118            .word	$118
31056 8293                      0079            .word	$79
31057                                           ! 4461   0x107, 0x6d,
31058 8295                      0107            .word	$107
31059 8297                      006D            .word	$6D
31060                                           ! 4462   0x119, 0x69,
31061 8299                      0119            .word	$119
31062 829B                      0069            .word	$69
31063                                           ! 4463   0x11a, 0x75,
31064 829D                      011A            .word	$11A
31065 829F                      0075            .word	$75
31066                                           ! 4464   0xffff,0xffff
31067 82A1                      FFFF            .word	$FFFF
31068                                           ! 4465 };
31069 82A3                      FFFF            .word	$FFFF
31070                                           !BCC_EOS
31071                                           ! 4466 #asm
31072                                           !BCC_ASM
31073                       000082A5            cirrus_installed:
31074 82A5                        63            .ascii "cirrus-compatible VGA is detected"
31075 82C6                        0D            .byte 0x0d,0x0a
31076 82C8                        0D            .byte 0x0d,0x0a,0x00
31077                       000082CB            cirrus_not_installed:
31078 82CB                        63            .ascii "cirrus-compatible VGA is not detected"
31079 82F0                        0D            .byte 0x0d,0x0a
31080 82F2                        0D            .byte 0x0d,0x0a,0x00
31081                       000082F5            cirrus_vesa_vendorname:
31082                       000082F5            cirrus_vesa_productname:
31083                       000082F5            cirrus_vesa_oemname:
31084 82F5                        56            .ascii "VGABIOS Cirrus extension"
31085 830D                        00            .byte 0
31086                       0000830E            cirrus_vesa_productrevision:
31087 830E                        31            .ascii "1.0"
31088 8311                        00            .byte 0
31089                       00008312            cirrus_init:
31090 8312           E8         0049              call cirrus_check
31091 8315           75           31              jnz no_cirrus
31092                                             SET_INT_VECTOR(0x10, #0xC000, #cirrus_int10_handler)
 +a   8317           1E                           push ds
 +a   8318           31C0                         xor ax, ax
 +a   831A           8ED8                         mov ds, ax
 +a   831C           B8                   836E    mov ax,  #cirrus_int10_handler
 +a   831F           A3         0040              mov 0x10*4, ax
 +a   8322           B8                   C000    mov ax,  #0xC000
 +a   8325           A3         0042              mov 0x10*4+2, ax
 +a   8328           1F                           pop ds
31093 8329           B0                     0F    mov al, #0x0f ; memory setup
31094 832B           BA                   03C4    mov dx, #0x3C4
31095 832E           EE                           out dx, al
31096 832F           42                           inc dx
31097 8330           EC                           in al, dx
31098 8331           24                     18    and al, #0x18
31099 8333           88C4                         mov ah, al
31100 8335           B0                     0A    mov al, #0x0a
31101 8337           4A                           dec dx
31102 8338           EF                           out dx, ax
31103 8339           B8                   0007    mov ax, #0x0007 ; set vga mode
31104 833C           EF                           out dx, ax
31105 833D           B8                   0431    mov ax, #0x0431 ; reset bitblt
31106 8340           BA                   03CE    mov dx, #0x3CE
31107 8343           EF                           out dx, ax
31108 8344           B8                   0031    mov ax, #0x0031
31109 8347           EF                           out dx, ax
31110                       00008348            no_cirrus:
31111 8348           C3                           ret
31112                       00008349            cirrus_display_info:
31113 8349           1E                           push ds
31114 834A           56                           push si
31115 834B           0E                           push cs
31116 834C           1F                           pop ds
31117 834D           E8         000E              call cirrus_check
31118 8350           BE                   82CB    mov si, #cirrus_not_installed
31119 8353           75           03              jnz cirrus_msgnotinstalled
31120 8355           BE                   82A5    mov si, #cirrus_installed
31121                       00008358            cirrus_msgnotinstalled:
31122 8358           E8         B2B7              call _display_string
31123 835B           5E                           pop si
31124 835C           1F                           pop ds
31125 835D           C3                           ret
31126                       0000835E            cirrus_check:
31127 835E           50                           push ax
31128 835F           52                           push dx
31129 8360           B8                   9206    mov ax, #0x9206
31130 8363           BA                   03C4    mov dx, #0x3C4
31131 8366           EF                           out dx, ax
31132 8367           42                           inc dx
31133 8368           EC                           in al, dx
31134 8369           3C                     12    cmp al, #0x12
31135 836B           5A                           pop dx
31136 836C           58                           pop ax
31137 836D           C3                           ret
31138                       0000836E            cirrus_int10_handler:
31139 836E           9C                           pushf
31140 836F           55                           push bp
31141 8370           80FC                   00    cmp ah, #0x00 ;; set video mode
31142 8373           74           12              jz cirrus_set_video_mode
31143 8375           80FC                   12    cmp ah, #0x12 ;; cirrus extension
31144 8378           74           2E              jz cirrus_extbios
31145 837A           80FC                   4F    cmp ah, #0x4F ;; VESA extension
31146 837D           74           44              jz cirrus_vesa
31147                       0000837F            cirrus_unhandled:
31148 837F           5D                           pop bp
31149 8380           9D                           popf
31150 8381           E9         7DCD              jmp vgabios_int10_handler
31151                       00008384            cirrus_return:
31152 8384           5D                           pop bp
31153 8385           9D                           popf
31154 8386           CF                           iret
31155                       00008387            cirrus_set_video_mode:
31156 8387           56                           push si
31157 8388           50                           push ax
31158 8389           53                           push bx
31159 838A           1E                           push ds
31160 838B           31F6                         xor si, si
31161 838D           8EDE                         mov ds, si
31162 838F           31DB                         xor bx, bx
31163 8391           891E       04BA              mov [0x4BA], bx
31164 8395           1F                           pop ds
31165 8396           5B                           pop bx
31166 8397           E8         0498              call cirrus_get_modeentry
31167 839A           73           42              jnc cirrus_set_video_mode_extended
31168 839C           B0                     FE    mov al, #0xfe
31169 839E           E8         0493              call cirrus_get_modeentry_nomask
31170 83A1           E8         007E              call cirrus_switch_mode
31171 83A4           58                           pop ax
31172 83A5           5E                           pop si
31173 83A6           EB           D7              jmp cirrus_unhandled
31174                       000083A8            cirrus_extbios:
31175 83A8           80FB                   80    cmp bl, #0x80
31176 83AB           72           D2              jb cirrus_unhandled
31177 83AD           80FB                   AF    cmp bl, #0xAF
31178 83B0           77           CD              ja cirrus_unhandled
31179 83B2           53                           push bx
31180 83B3           83E3                   7F    and bx, #0x7F
31181 83B6           D1E3                         shl bx, 1
31182 83B8                        2E             db 0x2e ;; cs:
31183 83B9           8BAF       89D6              mov bp, cirrus_extbios_handlers[bx]
31184 83BD           5B                           pop bx
31185 83BE           68                   8384    push #cirrus_return
31186 83C1           55                           push bp
31187 83C2           C3                           ret
31188                       000083C3            cirrus_vesa:
31189 83C3           3C                     10    cmp al, #0x10
31190 83C5           77           12              ja cirrus_vesa_not_handled
31191 83C7           53                           push bx
31192 83C8           31DB                         xor bx, bx
31193 83CA           88C3                         mov bl, al
31194 83CC           D1E3                         shl bx, 1
31195 83CE                        2E             db 0x2e ;; cs:
31196 83CF           8BAF       8A36              mov bp, cirrus_vesa_handlers[bx]
31197 83D3           5B                           pop bx
31198 83D4           68                   8384    push #cirrus_return
31199 83D7           55                           push bp
31200 83D8           C3                           ret
31201                       000083D9            cirrus_vesa_not_handled:
31202 83D9           B8                   014F    mov ax, #0x014F ;; not implemented
31203 83DC           EB           A6              jmp cirrus_return
31204                       000083DE            cirrus_set_video_mode_extended:
31205 83DE           E8         0041              call cirrus_switch_mode
31206 83E1           58                           pop ax ;; mode
31207 83E2           A8                     80    test al, #0x80
31208 83E4           75           08              jnz cirrus_set_video_mode_extended_1
31209 83E6           50                           push ax
31210 83E7           B8                   FFFF    mov ax, #0xffff ; set to 0xff to keep win 2K happy
31211 83EA           E8         05B4              call cirrus_clear_vram
31212 83ED           58                           pop ax
31213                       000083EE            cirrus_set_video_mode_extended_1:
31214 83EE           24                     7F    and al, #0x7f
31215 83F0           1E                           push ds
31216 83F1           31F6                         xor si, si
31217 83F3           8EDE                         mov ds, si
31218 83F5           A2         0449              mov [0x449], al
31219 83F8           1F                           pop ds
31220 83F9           B0                     20    mov al, #0x20
31221 83FB           5E                           pop si
31222 83FC           EB           86              jmp cirrus_return
31223                       000083FE            cirrus_vesa_pmbios_init:
31224 83FE           CB                           retf
31225                       000083FF            cirrus_vesa_pmbios_entry:
31226 83FF           9C                           pushf
31227 8400           55                           push bp
31228 8401           80FC                   4F    cmp ah, #0x4F
31229 8404           75           16              jnz cirrus_vesa_pmbios_unimplemented
31230 8406           3C                     0F    cmp al, #0x0F
31231 8408           77           12              ja cirrus_vesa_pmbios_unimplemented
31232 840A           53                           push bx
31233 840B           31DB                         xor bx, bx
31234 840D           88C3                         mov bl, al
31235 840F           D1E3                         shl bx, 1
31236 8411                        2E             db 0x2e ;; cs:
31237 8412           8BAF       8A36              mov bp, cirrus_vesa_handlers[bx]
31238 8416           5B                           pop bx
31239 8417           68                   841F    push #cirrus_vesa_pmbios_return
31240 841A           55                           push bp
31241 841B           C3                           ret
31242                       0000841C            cirrus_vesa_pmbios_unimplemented:
31243 841C           B8                   014F    mov ax, #0x014F
31244                       0000841F            cirrus_vesa_pmbios_return:
31245 841F           5D                           pop bp
31246 8420           9D                           popf
31247 8421           CB                           retf
31248                                           ; in si:mode table
31249                       00008422            cirrus_switch_mode:
31250 8422           1E                           push ds
31251 8423           53                           push bx
31252 8424           52                           push dx
31253 8425           0E                           push cs
31254 8426           1F                           pop ds
31255 8427           8B5C         0A              mov bx, [si+10] ;; seq
31256 842A           BA                   03C4    mov dx, #0x3c4
31257 842D           B8                   1206    mov ax, #0x1206
31258 8430           EF                           out dx, ax ;; Unlock cirrus special
31259 8431           E8         0056              call cirrus_switch_mode_setregs
31260 8434           8B5C         0C              mov bx, [si+12] ;; graph
31261 8437           BA                   03CE    mov dx, #0x3ce
31262 843A           E8         004D              call cirrus_switch_mode_setregs
31263 843D           8B5C         0E              mov bx, [si+14] ;; crtc
31264 8440           E8         03DC              call cirrus_get_crtc
31265 8443           E8         0044              call cirrus_switch_mode_setregs
31266 8446           BA                   03C6    mov dx, #0x3c6
31267 8449           B0                     00    mov al, #0x00
31268 844B           EE                           out dx, al
31269 844C           EC                           in al, dx
31270 844D           EC                           in al, dx
31271 844E           EC                           in al, dx
31272 844F           EC                           in al, dx
31273 8450           8A44         08              mov al, [si+8] ;; hidden dac
31274 8453           EE                           out dx, al
31275 8454           B0                     FF    mov al, #0xff
31276 8456           EE                           out dx, al
31277 8457           B0                     00    mov al, #0x00
31278 8459           8A5C         11              mov bl, [si+17] ;; memory model
31279 845C           08DB                         or bl, bl
31280 845E           74           09              jz is_text_mode
31281 8460           B0                     01    mov al, #0x01
31282 8462           80FB                   03    cmp bl, #0x03
31283 8465           75           02              jnz is_text_mode
31284 8467           0C                     40    or al, #0x40
31285                       00008469            is_text_mode:
31286 8469           B3                     10    mov bl, #0x10
31287 846B           E8         DD9F              call biosfn_get_single_palette_reg
31288 846E           80E7                   FE    and bh, #0xfe
31289 8471           08C7                         or bh, al
31290 8473           E8         DD22              call biosfn_set_single_palette_reg
31291 8476           5A                           pop dx
31292 8477           5B                           pop bx
31293 8478           1F                           pop ds
31294 8479           C3                           ret
31295                       0000847A            cirrus_enable_16k_granularity:
31296 847A           50                           push ax
31297 847B           52                           push dx
31298 847C           BA                   03CE    mov dx, #0x3ce
31299 847F           B0                     0B    mov al, #0x0b
31300 8481           EE                           out dx, al
31301 8482           42                           inc dx
31302 8483           EC                           in al, dx
31303 8484           0C                     20    or al, #0x20 ;; enable 16k
31304 8486           EE                           out dx, al
31305 8487           5A                           pop dx
31306 8488           58                           pop ax
31307 8489           C3                           ret
31308                       0000848A            cirrus_switch_mode_setregs:
31309                       0000848A            csms_1:
31310 848A           8B07                         mov ax, [bx]
31311 848C           3D                   FFFF    cmp ax, #0xffff
31312 848F           74           06              jz csms_2
31313 8491           EF                           out dx, ax
31314 8492           83C3                   02    add bx, #0x2
31315 8495           EB           F3              jmp csms_1
31316                       00008497            csms_2:
31317 8497           C3                           ret
31318                       00008498            cirrus_extbios_80h:
31319 8498           52                           push dx
31320 8499           E8         0383              call cirrus_get_crtc
31321 849C           B0                     27    mov al, #0x27
31322 849E           EE                           out dx, al
31323 849F           42                           inc dx
31324 84A0           EC                           in al, dx
31325 84A1           BB                   825F    mov bx, #_cirrus_id_table
31326                       000084A4            c80h_1:
31327 84A4                        2E             db 0x2e ;; cs:
31328 84A5           8A27                         mov ah, [bx]
31329 84A7           38C4                         cmp ah, al
31330 84A9           74           09              jz c80h_2
31331 84AB           80FC                   FF    cmp ah, #0xff
31332 84AE           74           04              jz c80h_2
31333 84B0           43                           inc bx
31334 84B1           43                           inc bx
31335 84B2           EB           F0              jmp c80h_1
31336                       000084B4            c80h_2:
31337 84B4                        2E             db 0x2e ;; cs:
31338 84B5           8A47         01              mov al, 0x1[bx]
31339 84B8           5A                           pop dx
31340 84B9           B4                     00    mov ah, #0x00
31341 84BB           31DB                         xor bx, bx
31342 84BD           C3                           ret
31343                       000084BE            cirrus_extbios_81h:
31344 84BE           B8                   0103    mov ax, #0x103 ;; XXX
31345 84C1           C3                           ret
31346                       000084C2            cirrus_extbios_82h:
31347 84C2           52                           push dx
31348 84C3           E8         0359              call cirrus_get_crtc
31349 84C6           31C0                         xor ax, ax
31350 84C8           B0                     27    mov al, #0x27
31351 84CA           EE                           out dx, al
31352 84CB           42                           inc dx
31353 84CC           EC                           in al, dx
31354 84CD           24                     03    and al, #0x03
31355 84CF           B4                     AF    mov ah, #0xAF
31356 84D1           5A                           pop dx
31357 84D2           C3                           ret
31358                       000084D3            cirrus_extbios_85h:
31359 84D3           51                           push cx
31360 84D4           52                           push dx
31361 84D5           BA                   03C4    mov dx, #0x3C4
31362 84D8           B0                     0F    mov al, #0x0f ;; get DRAM band width
31363 84DA           EE                           out dx, al
31364 84DB           42                           inc dx
31365 84DC           EC                           in al, dx
31366                                             ;; al = 4 << bandwidth
31367 84DD           88C1                         mov cl, al
31368 84DF           C0E9                   03    shr cl, #0x03
31369 84E2           80E1                   03    and cl, #0x03
31370 84E5           80F9                   03    cmp cl, #0x03
31371 84E8           74           06              je c85h2
31372 84EA           B0                     04    mov al, #0x04
31373 84EC           D2E0                         shl al, cl
31374 84EE           EB           08              jmp c85h3
31375                       000084F0            c85h2:
31376                                           ;; 4MB or 2MB
31377 84F0           24                     80    and al, #0x80
31378 84F2           B0                     20    mov al, #0x20 ;; 2 MB
31379 84F4           74           02              je c85h3
31380 84F6           B0                     40    mov al, #0x40 ;; 4 MB
31381                       000084F8            c85h3:
31382 84F8           5A                           pop dx
31383 84F9           59                           pop cx
31384 84FA           C3                           ret
31385                       000084FB            cirrus_extbios_9Ah:
31386 84FB           B8                   4060    mov ax, #0x4060
31387 84FE           B9                   1132    mov cx, #0x1132
31388 8501           C3                           ret
31389                       00008502            cirrus_extbios_A0h:
31390 8502           E8         032D              call cirrus_get_modeentry
31391 8505           B4                     01    mov ah, #0x01
31392 8507           80DC                   00    sbb ah, #0x00
31393 850A           8B1E       8518              mov bx, cirrus_extbios_A0h_callback
31394 850E           BE                   FFFF    mov si, #0xffff
31395 8511           89DF                         mov di, bx
31396 8513           8EDB                         mov ds, bx
31397 8515           8EC3                         mov es, bx
31398 8517           C3                           ret
31399                       00008518            cirrus_extbios_A0h_callback:
31400                                             ;; fatal: not implemented yet
31401 8518           FA                           cli
31402 8519           F4                           hlt
31403 851A           CB                           retf
31404                       0000851B            cirrus_extbios_A1h:
31405 851B           BB                   0E00    mov bx, #0x0E00 ;; IBM 8512/8513, color
31406 851E           C3                           ret
31407                       0000851F            cirrus_extbios_A2h:
31408 851F           B0                     07    mov al, #0x07 ;; HSync 31.5 - 64.0 kHz
31409 8521           C3                           ret
31410                       00008522            cirrus_extbios_AEh:
31411 8522           B0                     01    mov al, #0x01 ;; High Refresh 75Hz
31412 8524           C3                           ret
31413                       00008525            cirrus_extbios_unimplemented:
31414 8525           C3                           ret
31415                       00008526            cirrus_vesa_00h:
31416 8526           1E                           push ds
31417 8527           56                           push si
31418 8528           89FD                         mov bp, di
31419 852A           06                           push es
31420 852B           1F                           pop ds
31421 852C           FC                           cld
31422 852D           8B05                         mov ax, [di]
31423 852F           3D                   4256    cmp ax, #0x4256 ;; VB
31424 8532           75           24              jnz cv00_1
31425 8534           8B45         02              mov ax, [di+2]
31426 8537           3D                   3245    cmp ax, #0x3245 ;; E2
31427 853A           75           1C              jnz cv00_1
31428                                             ;; VBE2
31429 853C           8D7E         14              lea di, 0x14[bp]
31430 853F           B8                   0100    mov ax, #0x0100 ;; soft ver.
31431 8542           AB                           stosw
31432 8543           B8                   82F5    mov ax, # cirrus_vesa_vendorname
31433 8546           AB                           stosw
31434 8547           8CC8                         mov ax, cs
31435 8549           AB                           stosw
31436 854A           B8                   82F5    mov ax, # cirrus_vesa_productname
31437 854D           AB                           stosw
31438 854E           8CC8                         mov ax, cs
31439 8550           AB                           stosw
31440 8551           B8                   830E    mov ax, # cirrus_vesa_productrevision
31441 8554           AB                           stosw
31442 8555           8CC8                         mov ax, cs
31443 8557           AB                           stosw
31444                       00008558            cv00_1:
31445 8558           89EF                         mov di, bp
31446 855A           B8                   4556    mov ax, #0x4556 ;; VE
31447 855D           AB                           stosw
31448 855E           B8                   4153    mov ax, #0x4153 ;; SA
31449 8561           AB                           stosw
31450 8562           B8                   0200    mov ax, #0x0200 ;; v2.00
31451 8565           AB                           stosw
31452 8566           B8                   82F5    mov ax, # cirrus_vesa_oemname
31453 8569           AB                           stosw
31454 856A           8CC8                         mov ax, cs
31455 856C           AB                           stosw
31456 856D           31C0                         xor ax, ax ;; caps
31457 856F           AB                           stosw
31458 8570           AB                           stosw
31459 8571           8D46         40              lea ax, 0x40[bp]
31460 8574           AB                           stosw
31461 8575           8CC0                         mov ax, es
31462 8577           AB                           stosw
31463 8578           E8         FF58              call cirrus_extbios_85h ;; vram in 64k
31464 857B           B4                     00    mov ah, #0x00
31465 857D           AB                           stosw
31466 857E           0E                           push cs
31467 857F           1F                           pop ds
31468 8580           8D7E         40              lea di, 0x40[bp]
31469 8583           BE                   8265    mov si, #_cirrus_vesa_modelist
31470                       00008586            cv00_2:
31471 8586           AD                           lodsw
31472 8587           AB                           stosw
31473 8588           83C6                   02    add si, #2
31474 858B           3D                   FFFF    cmp ax, #0xffff
31475 858E           75           F6              jnz cv00_2
31476 8590           B8                   004F    mov ax, #0x004F
31477 8593           89EF                         mov di, bp
31478 8595           5E                           pop si
31479 8596           1F                           pop ds
31480 8597           C3                           ret
31481                       00008598            cirrus_vesa_01h:
31482 8598           89C8                         mov ax, cx
31483 859A           25                   3FFF    and ax, #0x3fff
31484 859D           E8         0260              call cirrus_vesamode_to_mode
31485 85A0           3D                   FFFF    cmp ax, #0xffff
31486 85A3           75           03              jnz cirrus_vesa_01h_1
31487 85A5           E9         0254              jmp cirrus_vesa_unimplemented
31488                       000085A8            cirrus_vesa_01h_1:
31489 85A8           1E                           push ds
31490 85A9           56                           push si
31491 85AA           51                           push cx
31492 85AB           52                           push dx
31493 85AC           53                           push bx
31494 85AD           89FD                         mov bp, di
31495 85AF           FC                           cld
31496 85B0           0E                           push cs
31497 85B1           1F                           pop ds
31498 85B2           E8         027F              call cirrus_get_modeentry_nomask
31499 85B5           57                           push di
31500 85B6           31C0                         xor ax, ax
31501 85B8           B9                   0080    mov cx, #0x80
31502 85BB           F3                           rep
31503 85BC           AB                             stosw ;; clear buffer
31504 85BD           5F                           pop di
31505 85BE           B8                   003B    mov ax, #0x003b ;; mode
31506 85C1           AB                           stosw
31507 85C2           B8                   0007    mov ax, #0x0007 ;; attr
31508 85C5           AB                           stosw
31509 85C6           B8                   0010    mov ax, #0x0010 ;; granularity =16K
31510 85C9           AB                           stosw
31511 85CA           B8                   0040    mov ax, #0x0040 ;; size =64K
31512 85CD           AB                           stosw
31513 85CE           B8                   A000    mov ax, #0xA000 ;; segment A
31514 85D1           AB                           stosw
31515 85D2           31C0                         xor ax, ax ;; no segment B
31516 85D4           AB                           stosw
31517 85D5           B8                   86DC    mov ax, #cirrus_vesa_05h_farentry
31518 85D8           AB                           stosw
31519 85D9           8CC8                         mov ax, cs
31520 85DB           AB                           stosw
31521 85DC           E8         0320              call cirrus_get_line_offset_entry
31522 85DF           AB                           stosw ;; bytes per scan line
31523 85E0           8B44         02              mov ax, [si+2] ;; width
31524 85E3           AB                           stosw
31525 85E4           8B44         04              mov ax, [si+4] ;; height
31526 85E7           AB                           stosw
31527 85E8           B8                   0008    mov ax, #0x08
31528 85EB           AA                           stosb
31529 85EC           B8                   0010    mov ax, #0x10
31530 85EF           AA                           stosb
31531 85F0           B0                     01    mov al, #1 ;; count of planes
31532 85F2           AA                           stosb
31533 85F3           8A44         06              mov al, [si+6] ;; bpp
31534 85F6           AA                           stosb
31535 85F7           B0                     01    mov al, #0x1 ;; XXX number of banks
31536 85F9           AA                           stosb
31537 85FA           8A44         11              mov al, [si+17]
31538 85FD           AA                           stosb ;; memory model
31539 85FE           B0                     00    mov al, #0x0 ;; XXX size of bank in K
31540 8600           AA                           stosb
31541 8601           E8         02FB              call cirrus_get_line_offset_entry
31542 8604           8B5C         04              mov bx, [si+4]
31543 8607           F7E3                         mul bx ;; dx:ax=vramdisp
31544 8609           09C0                         or ax, ax
31545 860B           74           01              jz cirrus_vesa_01h_3
31546 860D           42                           inc dx
31547                       0000860E            cirrus_vesa_01h_3:
31548 860E           E8         FEC2              call cirrus_extbios_85h ;; al=vram in 64k
31549 8611           B4                     00    mov ah, #0x00
31550 8613           89D1                         mov cx, dx
31551 8615           31D2                         xor dx, dx
31552 8617           F7F1                         div cx
31553 8619           48                           dec ax
31554 861A           AA                           stosb ;; number of image pages = vramtotal/vramdisp-1
31555 861B           B0                     00    mov al, #0x00
31556 861D           AA                           stosb
31557                                             ;; v1.2+ stuffs
31558 861E           56                           push si
31559 861F           83C6                   12    add si, #18
31560 8622           A5                           movsw
31561 8623           A5                           movsw
31562 8624           A5                           movsw
31563 8625           A5                           movsw
31564 8626           5E                           pop si
31565 8627           8A64         10              mov ah, [si+16]
31566 862A           B0                     00    mov al, #0x0
31567 862C           80EC                   09    sub ah, #9
31568 862F           D0D0                         rcl al, #1 ; bit 0=palette flag
31569 8631           AA                           stosb ;; direct screen mode info
31570                                             ;; v2.0+ stuffs
31571                                             ;; 32-bit LFB address
31572 8632           31C0                         xor ax, ax
31573 8634           AB                           stosw
31574 8635           E8         0217              call cirrus_get_lfb_addr
31575 8638           AB                           stosw
31576 8639           09C0                         or ax, ax
31577 863B           74           0B              jz cirrus_vesa_01h_4
31578 863D           57                           push di
31579 863E           89EF                         mov di, bp
31580 8640                        26             db 0x26 ;; es:
31581 8641           8B05                         mov ax, [di]
31582 8643           0D                   0080    or ax, #0x0080 ;; mode bit 7:LFB
31583 8646           AB                           stosw
31584 8647           5F                           pop di
31585                       00008648            cirrus_vesa_01h_4:
31586 8648           31C0                         xor ax, ax
31587 864A           AB                           stosw ; reserved
31588 864B           AB                           stosw ; reserved
31589 864C           AB                           stosw ; reserved
31590 864D           B8                   004F    mov ax, #0x004F
31591 8650           89EF                         mov di, bp
31592 8652           5B                           pop bx
31593 8653           5A                           pop dx
31594 8654           59                           pop cx
31595 8655           5E                           pop si
31596 8656           1F                           pop ds
31597 8657           F7C1                 4000    test cx, #0x4000 ;; LFB flag
31598 865B           74           0E              jz cirrus_vesa_01h_5
31599 865D           51                           push cx
31600 865E                        26             db 0x26 ;; es:
31601 865F           8B0D                         mov cx, [di]
31602 8661           81F9                 0080    cmp cx, #0x0080 ;; is LFB supported?
31603 8665           75           03              jnz cirrus_vesa_01h_6
31604 8667           B8                   014F    mov ax, #0x014F ;; error - no LFB
31605                       0000866A            cirrus_vesa_01h_6:
31606 866A           59                           pop cx
31607                       0000866B            cirrus_vesa_01h_5:
31608 866B           C3                           ret
31609                       0000866C            cirrus_vesa_02h:
31610                                             ;; XXX support CRTC registers
31611 866C           F7C3                 3E00    test bx, #0x3e00
31612 8670           75           12              jnz cirrus_vesa_02h_2 ;; unknown flags
31613 8672           89D8                         mov ax, bx
31614 8674           25                   01FF    and ax, #0x1ff ;; bit 8-0 mode
31615 8677           3D                   0100    cmp ax, #0x100 ;; legacy VGA mode
31616 867A           72           0B              jb cirrus_vesa_02h_legacy
31617 867C           E8         0181              call cirrus_vesamode_to_mode
31618 867F           3D                   FFFF    cmp ax, #0xffff
31619 8682           75           09              jnz cirrus_vesa_02h_1
31620                       00008684            cirrus_vesa_02h_2:
31621 8684           E9         0175              jmp cirrus_vesa_unimplemented
31622                       00008687            cirrus_vesa_02h_legacy:
31623 8687           CD                     10    int #0x10
31624 8689           B8                   004F    mov ax, #0x004F
31625 868C           C3                           ret
31626                       0000868D            cirrus_vesa_02h_1:
31627 868D           56                           push si
31628 868E           50                           push ax
31629 868F           E8         01A2              call cirrus_get_modeentry_nomask
31630 8692           E8         FD8D              call cirrus_switch_mode
31631 8695           F7C3                 4000    test bx, #0x4000 ;; LFB
31632 8699           75           03              jnz cirrus_vesa_02h_3
31633 869B           E8         FDDC              call cirrus_enable_16k_granularity
31634                       0000869E            cirrus_vesa_02h_3:
31635 869E           F7C3                 8000    test bx, #0x8000 ;; no clear
31636 86A2           75           07              jnz cirrus_vesa_02h_4
31637 86A4           50                           push ax
31638 86A5           31C0                         xor ax,ax
31639 86A7           E8         02F7              call cirrus_clear_vram
31640 86AA           58                           pop ax
31641                       000086AB            cirrus_vesa_02h_4:
31642 86AB           58                           pop ax
31643 86AC           1E                           push ds
31644 86AD           31F6                         xor si, si
31645 86AF           8EDE                         mov ds, si
31646 86B1           A2         0449              mov [0x449], al
31647 86B4           891E       04BA              mov [0x4BA], bx
31648 86B8           1F                           pop ds
31649 86B9           5E                           pop si
31650 86BA           B8                   004F    mov ax, #0x004F
31651 86BD           C3                           ret
31652                       000086BE            cirrus_vesa_03h:
31653 86BE           1E                           push ds
31654 86BF           31C0                         xor ax, ax
31655 86C1           8ED8                         mov ds, ax
31656 86C3           BB                   04BA    mov bx, # 0x4BA
31657 86C6           8B07                         mov ax, [bx]
31658 86C8           89C3                         mov bx, ax
31659 86CA           85DB                         test bx, bx
31660 86CC           75           09              jnz cirrus_vesa_03h_1
31661 86CE           BB                   0449    mov bx, # 0x449
31662 86D1           8A07                         mov al, [bx]
31663 86D3           88C3                         mov bl, al
31664 86D5           30FF                         xor bh, bh
31665                       000086D7            cirrus_vesa_03h_1:
31666 86D7           B8                   004F    mov ax, #0x004f
31667 86DA           1F                           pop ds
31668 86DB           C3                           ret
31669                       000086DC            cirrus_vesa_05h_farentry:
31670 86DC           E8         0001              call cirrus_vesa_05h
31671 86DF           CB                           retf
31672                       000086E0            cirrus_vesa_05h:
31673 86E0           80FB                   01    cmp bl, #0x01
31674 86E3           77           0A              ja cirrus_vesa_05h_1
31675 86E5           80FF                   00    cmp bh, #0x00
31676 86E8           74           08              jz cirrus_vesa_05h_setmempage
31677 86EA           80FF                   01    cmp bh, #0x01
31678 86ED           74           17              jz cirrus_vesa_05h_getmempage
31679                       000086EF            cirrus_vesa_05h_1:
31680 86EF           E9         010A              jmp cirrus_vesa_unimplemented
31681                       000086F2            cirrus_vesa_05h_setmempage:
31682 86F2           08F6                         or dh, dh ; address must be < 0x100
31683 86F4           75           F9              jnz cirrus_vesa_05h_1
31684 86F6           52                           push dx
31685 86F7           88D8                         mov al, bl ;; bl=bank number
31686 86F9           04                     09    add al, #0x09
31687 86FB           88D4                         mov ah, dl ;; dx=window address in granularity
31688 86FD           BA                   03CE    mov dx, #0x3ce
31689 8700           EF                           out dx, ax
31690 8701           5A                           pop dx
31691 8702           B8                   004F    mov ax, #0x004F
31692 8705           C3                           ret
31693                       00008706            cirrus_vesa_05h_getmempage:
31694 8706           88D8                         mov al, bl ;; bl=bank number
31695 8708           04                     09    add al, #0x09
31696 870A           BA                   03CE    mov dx, #0x3ce
31697 870D           EE                           out dx, al
31698 870E           42                           inc dx
31699 870F           EC                           in al, dx
31700 8710           31D2                         xor dx, dx
31701 8712           88C2                         mov dl, al ;; dx=window address in granularity
31702 8714           B8                   004F    mov ax, #0x004F
31703 8717           C3                           ret
31704                       00008718            cirrus_vesa_06h:
31705 8718           89C8                         mov ax, cx
31706 871A           80FB                   01    cmp bl, #0x01
31707 871D           74           19              je cirrus_vesa_06h_3
31708 871F           80FB                   02    cmp bl, #0x02
31709 8722           74           11              je cirrus_vesa_06h_2
31710 8724           72           04              jb cirrus_vesa_06h_1
31711 8726           B8                   0100    mov ax, #0x0100
31712 8729           C3                           ret
31713                       0000872A            cirrus_vesa_06h_1:
31714 872A           E8         0179              call cirrus_get_bpp_bytes
31715 872D           88C3                         mov bl, al
31716 872F           30FF                         xor bh, bh
31717 8731           89C8                         mov ax, cx
31718 8733           F7E3                         mul bx
31719                       00008735            cirrus_vesa_06h_2:
31720 8735           E8         0189              call cirrus_set_line_offset
31721                       00008738            cirrus_vesa_06h_3:
31722 8738           E8         016B              call cirrus_get_bpp_bytes
31723 873B           88C3                         mov bl, al
31724 873D           30FF                         xor bh, bh
31725 873F           31D2                         xor dx, dx
31726 8741           E8         0199              call cirrus_get_line_offset
31727 8744           50                           push ax
31728 8745           F7F3                         div bx
31729 8747           89C1                         mov cx, ax
31730 8749           5B                           pop bx
31731 874A           E8         FD86              call cirrus_extbios_85h ;; al=vram in 64k
31732 874D           31D2                         xor dx, dx
31733 874F           88C2                         mov dl, al
31734 8751           31C0                         xor ax, ax
31735 8753           F7F3                         div bx
31736 8755           89C2                         mov dx, ax
31737 8757           B8                   004F    mov ax, #0x004f
31738 875A           C3                           ret
31739                       0000875B            cirrus_vesa_07h:
31740 875B           80FB                   80    cmp bl, #0x80
31741 875E           74           0B              je cirrus_vesa_07h_1
31742 8760           80FB                   01    cmp bl, #0x01
31743 8763           74           33              je cirrus_vesa_07h_2
31744 8765           72           04              jb cirrus_vesa_07h_1
31745 8767           B8                   0100    mov ax, #0x0100
31746 876A           C3                           ret
31747                       0000876B            cirrus_vesa_07h_1:
31748 876B           52                           push dx
31749 876C           E8         0137              call cirrus_get_bpp_bytes
31750 876F           88C3                         mov bl, al
31751 8771           30FF                         xor bh, bh
31752 8773           89C8                         mov ax, cx
31753 8775           F7E3                         mul bx
31754 8777           5B                           pop bx
31755 8778           50                           push ax
31756 8779           E8         0161              call cirrus_get_line_offset
31757 877C           F7E3                         mul bx
31758 877E           5B                           pop bx
31759 877F           01D8                         add ax, bx
31760 8781           73           01              jnc cirrus_vesa_07h_3
31761 8783           42                           inc dx
31762                       00008784            cirrus_vesa_07h_3:
31763 8784           52                           push dx
31764 8785           83E2                   03    and dx, #0x0003
31765 8788           BB                   0004    mov bx, #0x04
31766 878B           F7F3                         div bx
31767 878D           5A                           pop dx
31768 878E           C1EA                   02    shr dx, #2
31769 8791           E8         0195              call cirrus_set_start_addr
31770 8794           B8                   004F    mov ax, #0x004f
31771 8797           C3                           ret
31772                       00008798            cirrus_vesa_07h_2:
31773 8798           E8         01CF              call cirrus_get_start_addr
31774 879B           C1E2                   02    shl dx, #2
31775 879E           52                           push dx
31776 879F           BB                   0004    mov bx, #0x04
31777 87A2           F7E3                         mul bx
31778 87A4           5B                           pop bx
31779 87A5           09DA                         or dx, bx
31780 87A7           50                           push ax
31781 87A8           E8         0132              call cirrus_get_line_offset
31782 87AB           89C3                         mov bx, ax
31783 87AD           58                           pop ax
31784 87AE           F7F3                         div bx
31785 87B0           50                           push ax
31786 87B1           52                           push dx
31787 87B2           E8         00F1              call cirrus_get_bpp_bytes
31788 87B5           88C3                         mov bl, al
31789 87B7           30FF                         xor bh, bh
31790 87B9           58                           pop ax
31791 87BA           31D2                         xor dx, dx
31792 87BC           F7F3                         div bx
31793 87BE           89C1                         mov cx, ax
31794 87C0           5A                           pop dx
31795 87C1           B8                   004F    mov ax, #0x004f
31796 87C4           C3                           ret
31797                       000087C5            cirrus_vesa_10h: ;; Power management functions
31798                                             ;; Set up DS to read stored power info from RAM
31799 87C5           1E                           push ds
31800 87C6           31C0                         xor ax, ax
31801 87C8           8ED8                         mov ds, ax
31802                                             ;; Now choose the right function
31803 87CA           80FB                   00    cmp bl, #0x00
31804 87CD           77           08              ja cirrus_vesa_10h_01
31805                                             ;;
31806                                             ;; Function 00h: Get capabilities
31807                                             ;;
31808 87CF           BB                   0720    mov bx, #0x0720 ;; 07: standby/suspend/off, 20: VBE/PM 2.0
31809 87D2           B8                   004F    mov ax, #0x004f
31810 87D5           EB           23              jmp cirrus_vesa_10h_done
31811                       000087D7            cirrus_vesa_10h_01:
31812 87D7           80FB                   01    cmp bl, #0x01
31813 87DA           77           0C              ja cirrus_vesa_10h_02
31814                                             ;;
31815                                             ;; Function 01h: Set power state
31816                                             ;;
31817 87DC           89D8                         mov ax, bx
31818 87DE           BB                   04BC    mov bx, # 0x4BC
31819 87E1           8827                         mov [bx], ah
31820 87E3           B8                   004F    mov ax, #0x004f
31821 87E6           EB           12              jmp cirrus_vesa_10h_done
31822                       000087E8            cirrus_vesa_10h_02:
31823 87E8           80FB                   02    cmp bl, #0x02
31824 87EB           77           0A              ja cirrus_vesa_10h_unimplemented
31825                                             ;;
31826                                             ;; Function 02h: Get power state
31827                                             ;;
31828 87ED           BB                   04BC    mov bx, # 0x4BC
31829 87F0           8A3F                         mov bh, [bx]
31830 87F2           B8                   004F    mov ax, #0x004f
31831 87F5           EB           03              jmp cirrus_vesa_10h_done
31832                       000087F7            cirrus_vesa_10h_unimplemented:
31833 87F7           B8                   014F    mov ax, #0x014F ;; not implemented
31834                       000087FA            cirrus_vesa_10h_done:
31835 87FA           1F                           pop ds
31836 87FB           C3                           ret
31837                       000087FC            cirrus_vesa_unimplemented:
31838 87FC           B8                   014F    mov ax, #0x014F ;; not implemented
31839 87FF           C3                           ret
31840                                           ;; in ax:vesamode, out ax:cirrusmode
31841                       00008800            cirrus_vesamode_to_mode:
31842 8800           1E                           push ds
31843 8801           51                           push cx
31844 8802           56                           push si
31845 8803           0E                           push cs
31846 8804           1F                           pop ds
31847 8805           B9                   FFFF    mov cx, #0xffff
31848 8808           BE                   8265    mov si, #_cirrus_vesa_modelist
31849                       0000880B            cvtm_1:
31850 880B           3904                         cmp [si],ax
31851 880D           74           09              jz cvtm_2
31852 880F           390C                         cmp [si],cx
31853 8811           74           05              jz cvtm_2
31854 8813           83C6                   04    add si, #4
31855 8816           EB           F3              jmp cvtm_1
31856                       00008818            cvtm_2:
31857 8818           8B44         02              mov ax,[si+2]
31858 881B           5E                           pop si
31859 881C           59                           pop cx
31860 881D           1F                           pop ds
31861 881E           C3                           ret
31862                                             ; cirrus_get_crtc
31863                                             ;; NOTE - may be called in protected mode
31864                       0000881F            cirrus_get_crtc:
31865 881F           1E                           push ds
31866 8820           50                           push ax
31867 8821           BA                   03CC    mov dx, #0x3cc
31868 8824           EC                           in al, dx
31869 8825           24                     01    and al, #0x01
31870 8827           C0E0                   05    shl al, #5
31871 882A           BA                   03B4    mov dx, #0x3b4
31872 882D           00C2                         add dl, al
31873 882F           58                           pop ax
31874 8830           1F                           pop ds
31875 8831           C3                           ret
31876                                           ;; in - al:mode, out - cflag:result, si:table, ax:destroyed
31877                       00008832            cirrus_get_modeentry:
31878 8832           24                     7F    and al, #0x7f
31879                       00008834            cirrus_get_modeentry_nomask:
31880 8834           BE                   808B    mov si, #_cirrus_modes
31881                       00008837            cgm_1:
31882 8837                        2E             db 0x2e ;; cs:
31883 8838           8A24                         mov ah, [si]
31884 883A           38E0                         cmp al, ah
31885 883C           74           0F              jz cgm_2
31886 883E           80FC                   FF    cmp ah, #0xff
31887 8841           74           05              jz cgm_4
31888 8843           83C6                   1A    add si, # 26
31889 8846           EB           EF              jmp cgm_1
31890                       00008848            cgm_4:
31891 8848           31F6                         xor si, si
31892 884A           F9                           stc ;; video mode is not supported
31893 884B           EB           01              jmp cgm_3
31894                       0000884D            cgm_2:
31895 884D           F8                           clc ;; video mode is supported
31896                       0000884E            cgm_3:
31897 884E           C3                           ret
31898                                             ; get LFB address
31899                                             ; out - ax:LFB address (high 16 bit)
31900                                             ;; NOTE - may be called in protected mode
31901                       0000884F            cirrus_get_lfb_addr:
31902 884F           51                           push cx
31903 8850           52                           push dx
31904 8851     66    50                           push eax
31905 8853           31C9                           xor cx, cx
31906 8855           B2                     00      mov dl, #0x00
31907 8857           E8         0033                call cirrus_pci_read
31908 885A           3D                   FFFF      cmp ax, #0xffff
31909 885D           74           13                jz cirrus_get_lfb_addr_5
31910                       0000885F             cirrus_get_lfb_addr_3:
31911 885F           B2                     00      mov dl, #0x00
31912 8861           E8         0029                call cirrus_pci_read
31913 8864           3D                   1013      cmp ax, #0x1013 ;; cirrus
31914 8867           74           0D                jz cirrus_get_lfb_addr_4
31915 8869           83C1                   08      add cx, #0x8
31916 886C           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
31917 8870           72           ED                jb cirrus_get_lfb_addr_3
31918                       00008872             cirrus_get_lfb_addr_5:
31919 8872           31D2                           xor dx, dx ;; no LFB
31920 8874           EB           10                jmp cirrus_get_lfb_addr_6
31921                       00008876             cirrus_get_lfb_addr_4:
31922 8876           B2                     10      mov dl, #0x10 ;; I/O space #0
31923 8878           E8         0012                call cirrus_pci_read
31924 887B           A9                   FFF1      test ax, #0xfff1
31925 887E           75           F2                jnz cirrus_get_lfb_addr_5
31926 8880     66    C1E8                   10      shr eax, #16
31927 8884           89C2                           mov dx, ax ;; LFB address
31928                       00008886             cirrus_get_lfb_addr_6:
31929 8886     66    58                           pop eax
31930 8888           89D0                         mov ax, dx
31931 888A           5A                           pop dx
31932 888B           59                           pop cx
31933 888C           C3                           ret
31934                       0000888D            cirrus_pci_read:
31935 888D     66    B8               00800000    mov eax, #0x00800000
31936 8893           89C8                         mov ax, cx
31937 8895     66    C1E0                   08    shl eax, #8
31938 8899           88D0                         mov al, dl
31939 889B           BA                   0CF8    mov dx, #0xcf8
31940 889E     66    EF                           out dx, eax
31941 88A0           80C2                   04    add dl, #4
31942 88A3     66    ED                           in eax, dx
31943 88A5           C3                           ret
31944                                           ;; out - al:bytes per pixel
31945                       000088A6            cirrus_get_bpp_bytes:
31946 88A6           52                           push dx
31947 88A7           BA                   03C4    mov dx, #0x03c4
31948 88AA           B0                     07    mov al, #0x07
31949 88AC           EE                           out dx, al
31950 88AD           42                           inc dx
31951 88AE           EC                           in al, dx
31952 88AF           24                     0E    and al, #0x0e
31953 88B1           3C                     06    cmp al, #0x06
31954 88B3           75           02              jne cirrus_get_bpp_bytes_1
31955 88B5           24                     02    and al, #0x02
31956                       000088B7            cirrus_get_bpp_bytes_1:
31957 88B7           D0E8                         shr al, #1
31958 88B9           3C                     04    cmp al, #0x04
31959 88BB           74           02              je cirrus_get_bpp_bytes_2
31960 88BD           FEC0                         inc al
31961                       000088BF            cirrus_get_bpp_bytes_2:
31962 88BF           5A                           pop dx
31963 88C0           C3                           ret
31964                                           ;; in - ax: new line offset
31965                       000088C1            cirrus_set_line_offset:
31966 88C1           C1E8                   03    shr ax, #3
31967 88C4           50                           push ax
31968 88C5           E8         FF57              call cirrus_get_crtc
31969 88C8           B0                     13    mov al, #0x13
31970 88CA           EE                           out dx, al
31971 88CB           42                           inc dx
31972 88CC           58                           pop ax
31973 88CD           EE                           out dx, al
31974 88CE           4A                           dec dx
31975 88CF           B0                     1B    mov al, #0x1b
31976 88D1           EE                           out dx, al
31977 88D2           42                           inc dx
31978 88D3           C0E4                   04    shl ah, #4
31979 88D6           EC                           in al, dx
31980 88D7           24                     00>   and al, #ef
31981 88D9           08E0                         or al, ah
31982 88DB           EE                           out dx, al
31983 88DC           C3                           ret
31984                                           ;; out - ax: active line offset
31985                       000088DD            cirrus_get_line_offset:
31986 88DD           52                           push dx
31987 88DE           53                           push bx
31988 88DF           E8         FF3D              call cirrus_get_crtc
31989 88E2           B0                     13    mov al, #0x13
31990 88E4           EE                           out dx, al
31991 88E5           42                           inc dx
31992 88E6           EC                           in al, dx
31993 88E7           88C3                         mov bl, al
31994 88E9           4A                           dec dx
31995 88EA           B0                     1B    mov al, #0x1b
31996 88EC           EE                           out dx, al
31997 88ED           42                           inc dx
31998 88EE           EC                           in al, dx
31999 88EF           88C4                         mov ah, al
32000 88F1           C0EC                   04    shr ah, #4
32001 88F4           80E4                   01    and ah, #0x01
32002 88F7           88D8                         mov al, bl
32003 88F9           C1E0                   03    shl ax, #3
32004 88FC           5B                           pop bx
32005 88FD           5A                           pop dx
32006 88FE           C3                           ret
32007                                           ;; in - si: table
32008                                           ;; out - ax: line offset for mode
32009                       000088FF            cirrus_get_line_offset_entry:
32010 88FF           53                           push bx
32011 8900           8B5C         0E              mov bx, [si+14] ;; crtc table
32012 8903           53                           push bx
32013                       00008904            offset_loop1:
32014 8904           8B07                         mov ax, [bx]
32015 8906           3C                     13    cmp al, #0x13
32016 8908           74           04              je offset_found1
32017 890A           43                           inc bx
32018 890B           43                           inc bx
32019 890C           75           F6              jnz offset_loop1
32020                       0000890E            offset_found1:
32021 890E           30C0                         xor al, al
32022 8910           C1E8                   05    shr ax, #5
32023 8913           5B                           pop bx
32024 8914           50                           push ax
32025                       00008915            offset_loop2:
32026 8915           8B07                         mov ax, [bx]
32027 8917           3C                     1B    cmp al, #0x1b
32028 8919           74           04              je offset_found2
32029 891B           43                           inc bx
32030 891C           43                           inc bx
32031 891D           75           F6              jnz offset_loop2
32032                       0000891F            offset_found2:
32033 891F           5B                           pop bx
32034 8920           25                   1000    and ax, #0x1000
32035 8923           D1E8                         shr ax, #1
32036 8925           09D8                         or ax, bx
32037 8927           5B                           pop bx
32038 8928           C3                           ret
32039                                           ;; in - new address in DX:AX
32040                       00008929            cirrus_set_start_addr:
32041 8929           53                           push bx
32042 892A           52                           push dx
32043 892B           50                           push ax
32044 892C           E8         FEF0              call cirrus_get_crtc
32045 892F           B0                     0D    mov al, #0x0d
32046 8931           EE                           out dx, al
32047 8932           42                           inc dx
32048 8933           58                           pop ax
32049 8934           EE                           out dx, al
32050 8935           4A                           dec dx
32051 8936           B0                     0C    mov al, #0x0c
32052 8938           EE                           out dx, al
32053 8939           42                           inc dx
32054 893A           88E0                         mov al, ah
32055 893C           EE                           out dx, al
32056 893D           4A                           dec dx
32057 893E           B0                     1D    mov al, #0x1d
32058 8940           EE                           out dx, al
32059 8941           42                           inc dx
32060 8942           EC                           in al, dx
32061 8943           24                     7F    and al, #0x7f
32062 8945           5B                           pop bx
32063 8946           88DC                         mov ah, bl
32064 8948           C0E3                   04    shl bl, #4
32065 894B           80E3                   80    and bl, #0x80
32066 894E           08D8                         or al, bl
32067 8950           EE                           out dx, al
32068 8951           4A                           dec dx
32069 8952           88E3                         mov bl, ah
32070 8954           80E4                   01    and ah, #0x01
32071 8957           D0E3                         shl bl, #1
32072 8959           80E3                   0C    and bl, #0x0c
32073 895C           08DC                         or ah, bl
32074 895E           B0                     1B    mov al, #0x1b
32075 8960           EE                           out dx, al
32076 8961           42                           inc dx
32077 8962           EC                           in al, dx
32078 8963           24                     F2    and al, #0xf2
32079 8965           08E0                         or al, ah
32080 8967           EE                           out dx, al
32081 8968           5B                           pop bx
32082 8969           C3                           ret
32083                                           ;; out - current address in DX:AX
32084                       0000896A            cirrus_get_start_addr:
32085 896A           53                           push bx
32086 896B           E8         FEB1              call cirrus_get_crtc
32087 896E           B0                     0C    mov al, #0x0c
32088 8970           EE                           out dx, al
32089 8971           42                           inc dx
32090 8972           EC                           in al, dx
32091 8973           88C4                         mov ah, al
32092 8975           4A                           dec dx
32093 8976           B0                     0D    mov al, #0x0d
32094 8978           EE                           out dx, al
32095 8979           42                           inc dx
32096 897A           EC                           in al, dx
32097 897B           50                           push ax
32098 897C           4A                           dec dx
32099 897D           B0                     1B    mov al, #0x1b
32100 897F           EE                           out dx, al
32101 8980           42                           inc dx
32102 8981           EC                           in al, dx
32103 8982           4A                           dec dx
32104 8983           88C3                         mov bl, al
32105 8985           24                     01    and al, #0x01
32106 8987           80E3                   0C    and bl, #0x0c
32107 898A           D0EB                         shr bl, #1
32108 898C           08C3                         or bl, al
32109 898E           B0                     1D    mov al, #0x1d
32110 8990           EE                           out dx, al
32111 8991           42                           inc dx
32112 8992           EC                           in al, dx
32113 8993           24                     80    and al, #0x80
32114 8995           C0E8                   04    shr al, #4
32115 8998           08C3                         or bl, al
32116 899A           88DA                         mov dl, bl
32117 899C           30F6                         xor dh, dh
32118 899E           58                           pop ax
32119 899F           5B                           pop bx
32120 89A0           C3                           ret
32121                       000089A1            cirrus_clear_vram:
32122 89A1           60                           pusha
32123 89A2           06                           push es
32124 89A3           89C6                         mov si, ax
32125 89A5           E8         FAD2              call cirrus_enable_16k_granularity
32126 89A8           E8         FB28              call cirrus_extbios_85h
32127 89AB           C0E0                   02    shl al, #2
32128 89AE           88C3                         mov bl, al
32129 89B0           30E4                         xor ah,ah
32130                       000089B2            cirrus_clear_vram_1:
32131 89B2           B0                     09    mov al, #0x09
32132 89B4           BA                   03CE    mov dx, #0x3ce
32133 89B7           EF                           out dx, ax
32134 89B8           50                           push ax
32135                                           ;; Windows Vista appears to be emulating this sequence as part of changing
32136                                           ;; screen resolution, but it generates 4096 writes per iteration.
32137                                           ;; Instead, use a magic register sequence to write the whole bank.
32138                                           ;;mov cx, #0xa000
32139                                           ;;mov es, cx
32140                                           ;;xor di, di
32141                                           ;;mov ax, si
32142                                           ;;mov cx, #8192
32143                                           ;;cld
32144                                           ;;rep
32145                                           ;; stosw
32146 89B9           89F0                         mov ax, si
32147 89BB           C1E0                   08    shl ax, #8
32148 89BE           B0                     FE    mov al, #0xfe
32149 89C0           EF                           out dx, ax ;; Low byte of value to be written to the bank
32150 89C1           89F0                         mov ax, si
32151 89C3           B0                     FF    mov al, #0xff
32152 89C5           EF                           out dx, ax ;; High byte and trigger the write
32153 89C6           58                           pop ax
32154 89C7           FEC4                         inc ah
32155 89C9           38DC                         cmp ah, bl
32156 89CB           75           E5              jne cirrus_clear_vram_1
32157 89CD           30E4                         xor ah,ah
32158 89CF           BA                   03CE    mov dx, #0x3ce
32159 89D2           EF                           out dx, ax
32160 89D3           07                           pop es
32161 89D4           61                           popa
32162 89D5           C3                           ret
32163                       000089D6            cirrus_extbios_handlers:
32164                                             ;; 80h
32165 89D6                      8498              dw cirrus_extbios_80h
32166 89D8                      84BE              dw cirrus_extbios_81h
32167 89DA                      84C2              dw cirrus_extbios_82h
32168 89DC                      8525              dw cirrus_extbios_unimplemented
32169                                             ;; 84h
32170 89DE                      8525              dw cirrus_extbios_unimplemented
32171 89E0                      84D3              dw cirrus_extbios_85h
32172 89E2                      8525              dw cirrus_extbios_unimplemented
32173 89E4                      8525              dw cirrus_extbios_unimplemented
32174                                             ;; 88h
32175 89E6                      8525              dw cirrus_extbios_unimplemented
32176 89E8                      8525              dw cirrus_extbios_unimplemented
32177 89EA                      8525              dw cirrus_extbios_unimplemented
32178 89EC                      8525              dw cirrus_extbios_unimplemented
32179                                             ;; 8Ch
32180 89EE                      8525              dw cirrus_extbios_unimplemented
32181 89F0                      8525              dw cirrus_extbios_unimplemented
32182 89F2                      8525              dw cirrus_extbios_unimplemented
32183 89F4                      8525              dw cirrus_extbios_unimplemented
32184                                             ;; 90h
32185 89F6                      8525              dw cirrus_extbios_unimplemented
32186 89F8                      8525              dw cirrus_extbios_unimplemented
32187 89FA                      8525              dw cirrus_extbios_unimplemented
32188 89FC                      8525              dw cirrus_extbios_unimplemented
32189                                             ;; 94h
32190 89FE                      8525              dw cirrus_extbios_unimplemented
32191 8A00                      8525              dw cirrus_extbios_unimplemented
32192 8A02                      8525              dw cirrus_extbios_unimplemented
32193 8A04                      8525              dw cirrus_extbios_unimplemented
32194                                             ;; 98h
32195 8A06                      8525              dw cirrus_extbios_unimplemented
32196 8A08                      8525              dw cirrus_extbios_unimplemented
32197 8A0A                      84FB              dw cirrus_extbios_9Ah
32198 8A0C                      8525              dw cirrus_extbios_unimplemented
32199                                             ;; 9Ch
32200 8A0E                      8525              dw cirrus_extbios_unimplemented
32201 8A10                      8525              dw cirrus_extbios_unimplemented
32202 8A12                      8525              dw cirrus_extbios_unimplemented
32203 8A14                      8525              dw cirrus_extbios_unimplemented
32204                                             ;; A0h
32205 8A16                      8502              dw cirrus_extbios_A0h
32206 8A18                      851B              dw cirrus_extbios_A1h
32207 8A1A                      851F              dw cirrus_extbios_A2h
32208 8A1C                      8525              dw cirrus_extbios_unimplemented
32209                                             ;; A4h
32210 8A1E                      8525              dw cirrus_extbios_unimplemented
32211 8A20                      8525              dw cirrus_extbios_unimplemented
32212 8A22                      8525              dw cirrus_extbios_unimplemented
32213 8A24                      8525              dw cirrus_extbios_unimplemented
32214                                             ;; A8h
32215 8A26                      8525              dw cirrus_extbios_unimplemented
32216 8A28                      8525              dw cirrus_extbios_unimplemented
32217 8A2A                      8525              dw cirrus_extbios_unimplemented
32218 8A2C                      8525              dw cirrus_extbios_unimplemented
32219                                             ;; ACh
32220 8A2E                      8525              dw cirrus_extbios_unimplemented
32221 8A30                      8525              dw cirrus_extbios_unimplemented
32222 8A32                      8522              dw cirrus_extbios_AEh
32223 8A34                      8525              dw cirrus_extbios_unimplemented
32224                       00008A36            cirrus_vesa_handlers:
32225                                             ;; 00h
32226 8A36                      8526              dw cirrus_vesa_00h
32227 8A38                      8598              dw cirrus_vesa_01h
32228 8A3A                      866C              dw cirrus_vesa_02h
32229 8A3C                      86BE              dw cirrus_vesa_03h
32230                                             ;; 04h
32231 8A3E                      87FC              dw cirrus_vesa_unimplemented
32232 8A40                      86E0              dw cirrus_vesa_05h
32233 8A42                      8718              dw cirrus_vesa_06h
32234 8A44                      875B              dw cirrus_vesa_07h
32235                                             ;; 08h
32236 8A46                      87FC              dw cirrus_vesa_unimplemented
32237 8A48                      87FC              dw cirrus_vesa_unimplemented
32238 8A4A                      87FC              dw cirrus_vesa_unimplemented
32239 8A4C                      87FC              dw cirrus_vesa_unimplemented
32240                                             ;; 0Ch
32241 8A4E                      87FC              dw cirrus_vesa_unimplemented
32242 8A50                      87FC              dw cirrus_vesa_unimplemented
32243 8A52                      87FC              dw cirrus_vesa_unimplemented
32244 8A54                      87FC              dw cirrus_vesa_unimplemented
32245                                             ;; 10h
32246 8A56                      87C5              dw cirrus_vesa_10h
32247                                           ! 5641 endasm
32248                                           !BCC_ENDASM
32249                                           ! 5642 #asm
32250                                           !BCC_ASM
32251                                           ;; DATA_SEG_DEFS_HERE
32252                                           ! 5644 endasm
32253                                           !BCC_ENDASM
32254                                           ! 5645 #asm
32255                                           !BCC_ASM
32256 8A58                        76            .ascii "vgabios ends here"
32257 8A69                        00            .byte 0x00
32258                       00008A6A            vgabios_end:
32259 8A6A                        CB            .byte 0xCB
32260                                           ;; BLOCK_STRINGS_BEGIN
32261                                           ! 5651 endasm
32262                                           !BCC_ENDASM
32263                                           ! 5652 
32264 8A6B                                      .bss
32265                                           
32266                                           ! 0 errors detected

Symbols:
..FFF5                      0 FFFC A   ..FFF6                      0 FFEE A   
..FFF7                      0 FFF4 A   ..FFF8                      0 FFF6 A   
..FFF9                      0 FFEE A   ..FFFA                      0 FFEE A   
..FFFB                      0 FFF2 A   ..FFFC                      0 FFF0 A   
..FFFD                      0 FFE8 A   ..FFFE                      0 FFE8 A   
..FFFF                      0 FFFE A   .1                          0 3AB8 A   
.10                         0 3670 A   .100                        0 4D5B A   
.101                        0 4CE3 A   .102                        0 4D20 A   
.103                        0 4CFA A   .104                        0 4CF3 A   
.105                        0 4D48 A   .106                        0 4D54 A   
.107                        0 4D52 A   .108                        0 4D67 A   
.109                        0 4D6A A   .10A                        0 4DFD A   
.10B                        0 4DB8 A   .10C                        0 4DA6 A   
.10D                        0 4D94 A   .10E                        0 4D8D A   
.10F                        0 4D86 A   .11                         0 369F A   
.110                        0 4F41 A   .111                        0 4E20 A   
.112                        0 4E04 A   .113                        0 4EB3 A   
.114                        0 4E29 A   .115                        0 4EB0 A   
.116                        0 4E9F A   .117                        0 4EA6 A   
.118                        0 4E33 A   .119                        0 4E77 A   
.11A                        0 4E51 A   .11B                        0 4E4A A   
.11C                        0 4E9F A   .11D                        0 4EB0 A   
.11E                        0 4F41 A   .11F                        0 4F41 A   
.12                         0 368F A   .120                        0 4F2E A   
.121                        0 4F35 A   .122                        0 4EBD A   
.123                        0 4EFA A   .124                        0 4ED4 A   
.125                        0 4ECD A   .126                        0 4F22 A   
.127                        0 4F2E A   .128                        0 4F2C A   
.129                        0 4F41 A   .12A                        0 4F93 A   
.12B                        0 4F8F A   .12C                        0 5052 A   
.12D                        0 4FF4 A   .12E                        0 5052 A   
.12F                        0 5083 A   .13                         0 36A4 A   
.131                        0 5079 A   .132                        0 5061 A   
.133                        0 5069 A   .134                        0 5071 A   
.135                        0 50F0 A   .136                        0 50E0 A   
.137                        0 50FE A   .138                        0 51B6 A   
.139                        0 51A5 A   .13A                        0 51AC A   
.13B                        0 5106 A   .13C                        0 51A5 A   
.13D                        0 5195 A   .13E                        0 519C A   
.13F                        0 5123 A   .14                         0 36BB A   
.140                        0 5185 A   .141                        0 516E A   
.142                        0 5195 A   .143                        0 51A5 A   
.144                        0 51B6 A   .145                        0 53CA A   
.146                        0 53BA A   .147                        0 53C1 A   
.148                        0 520C A   .149                        0 5230 A   
.14A                        0 5227 A   .14B                        0 52F1 A   
.14C                        0 523E A   .14D                        0 5259 A   
.14E                        0 5247 A   .14F                        0 525E A   
.15                         0 36CF A   .150                        0 52DB A   
.151                        0 52CD A   .152                        0 52D4 A   
.153                        0 5265 A   .154                        0 52C3 A   
.155                        0 527C A   .156                        0 52A5 A   
.157                        0 5285 A   .158                        0 52C3 A   
.159                        0 52DB A   .15A                        0 53BA A   
.15B                        0 53BA A   .15C                        0 53B1 A   
.15D                        0 52F4 A   .15E                        0 530F A   
.15F                        0 52FD A   .16                         0 36E8 A   
.160                        0 5314 A   .161                        0 5397 A   
.162                        0 5389 A   .163                        0 5390 A   
.164                        0 531B A   .165                        0 537F A   
.166                        0 5332 A   .167                        0 535F A   
.168                        0 533D A   .169                        0 537F A   
.16A                        0 5397 A   .16B                        0 53BA A   
.16C                        0 53CA A   .16D                        0 549E A   
.16E                        0 548E A   .16F                        0 5495 A   
.17                         0 36FF A   .170                        0 5414 A   
.171                        0 548E A   .172                        0 5480 A   
.173                        0 5487 A   .174                        0 543A A   
.175                        0 545C A   .176                        0 5456 A   
.177                        0 548E A   .178                        0 549E A   
.179                        0 54D2 A   .17A                        0 54CE A   
.17B                        0 559D A   .17C                        0 5533 A   
.17D                        0 5690 A   .17E                        0 5690 A   
.17F                        0 5678 A   .18                         0 370D A   
.180                        0 55D2 A   .181                        0 5671 A   
.183                        0 565D A   .184                        0 55E6 A   
.185                        0 55E6 A   .186                        0 560F A   
.187                        0 5638 A   .188                        0 5690 A   
.189                        0 5684 A   .18A                        0 56C4 A   
.18B                        0 56C0 A   .18C                        0 5793 A   
.18D                        0 5725 A   .18E                        0 5790 A   
.18F                        0 5784 A   .19                         0 3748 A   
.190                        0 575B A   .191                        0 5790 A   
.192                        0 5886 A   .193                        0 5886 A   
.194                        0 586E A   .195                        0 57C8 A   
.196                        0 5867 A   .198                        0 5853 A   
.199                        0 57DC A   .19A                        0 57DC A   
.19B                        0 5805 A   .19C                        0 582E A   
.19D                        0 5886 A   .19E                        0 587A A   
.19F                        0 5932 A   .1A                         0 3782 A   
.1A0                        0 592E A   .1A1                        0 594C A   
.1A2                        0 5948 A   .1A3                        0 5B9A A   
.1A5                        0 5B84 A   .1A6                        0 5961 A   
.1A7                        0 5961 A   .1A8                        0 59E2 A   
.1A9                        0 59D4 A   .1AA                        0 5A07 A   
.1AB                        0 5A39 A   .1AC                        0 5A1D A   
.1AD                        0 5A53 A   .1AE                        0 5A65 A   
.1AF                        0 5A5C A   .1B                         0 3797 A   
.1B0                        0 5AD1 A   .1B1                        0 5A8B A   
.1B2                        0 5B11 A   .1B3                        0 5B25 A   
.1B4                        0 5B1A A   .1B5                        0 5B3B A   
.1B6                        0 5B50 A   .1B7                        0 5BD4 A   
.1B8                        0 5BD0 A   .1B9                        0 5BEE A   
.1BA                        0 5BEA A   .1BB                        0 5D82 A   
.1BD                        0 5D6A A   .1BE                        0 5C03 A   
.1BF                        0 5C03 A   .1C                         0 37B7 A   
.1C0                        0 5C97 A   .1C1                        0 5C89 A   
.1C2                        0 5C90 A   .1C3                        0 5C45 A   
.1C4                        0 5C89 A   .1C5                        0 5C75 A   
.1C6                        0 5C97 A   .1C7                        0 5C9A A   
.1C8                        0 5CC6 A   .1C9                        0 5CBD A   
.1CA                        0 5D11 A   .1CB                        0 5CEC A   
.1CC                        0 5D32 A   .1CD                        0 5D34 A   
.1CE                        0 5D63 A   .1CF                        0 5DC2 A   
.1D                         0 37D7 A   .1D0                        0 5DB1 A   
.1D1                        0 5DEC A   .1D2                        0 5DE8 A   
.1D3                        0 6049 A   .1D5                        0 6028 A   
.1D6                        0 5E3D A   .1D7                        0 5E40 A   
.1D8                        0 5E4E A   .1D9                        0 5E47 A   
.1DA                        0 5E51 A   .1DB                        0 5E59 A   
.1DC                        0 5E63 A   .1DD                        0 5EB0 A   
.1DE                        0 5EA5 A   .1DF                        0 5E63 A   
.1E                         0 37F4 A   .1E0                        0 5EB0 A   
.1E1                        0 5EB3 A   .1E2                        0 5F4D A   
.1E3                        0 5ECB A   .1E4                        0 5F4A A   
.1E5                        0 5F27 A   .1E6                        0 601F A   
.1E7                        0 601F A   .1E9                        0 600B A   
.1EA                        0 5F94 A   .1EB                        0 5F94 A   
.1EC                        0 5FBD A   .1ED                        0 5FE6 A   
.1EE                        0 605F A   .1EF                        0 6053 A   
.1F                         0 380F A   .1F0                        0 60D9 A   
.1F1                        0 6069 A   .1F2                        0 60A9 A   
.1F3                        0 607F A   .1F4                        0 60D0 A   
.1F5                        0 6486 A   .1F6                        0 6475 A   
.1F7                        0 647C A   .1F8                        0 63BE A   
.1F9                        0 6431 A   .1FA                        0 642B A   
.1FB                        0 6486 A   .1FC                        0 6567 A   
.1FD                        0 6557 A   .1FE                        0 657F A   
.1FF                        0 66C4 A   .20                         0 382C A   
.200                        0 66B5 A   .201                        0 66BC A   
.202                        0 6678 A   .203                        0 66C4 A   
.204                        0 66D9 A   .205                        0 66CE A   
.206                        0 675D A   .207                        0 674E A   
.208                        0 6755 A   .209                        0 6714 A   
.20A                        0 675D A   .20B                        0 6770 A   
.20C                        0 6767 A   .20D                        0 67EE A   
.20E                        0 67DF A   .20F                        0 67E6 A   
.21                         0 383B A   .210                        0 67AB A   
.211                        0 67EE A   .212                        0 6801 A   
.213                        0 67F8 A   .214                        0 688C A   
.215                        0 687D A   .216                        0 6884 A   
.217                        0 6849 A   .218                        0 688C A   
.219                        0 689F A   .21A                        0 6896 A   
.21B                        0 6A21 A   .21D                        0 69FC A   
.21E                        0 68B9 A   .21F                        0 68F0 A   
.22                         0 3976 A   .220                        0 6927 A   
.221                        0 694A A   .222                        0 696D A   
.223                        0 6990 A   .224                        0 69B2 A   
.225                        0 69D4 A   .226                        0 69F6 A   
.227                        0 6A1F A   .228                        0 6A0F A   
.229                        0 6B91 A   .22A                        0 6B7F A   
.22B                        0 6C1B A   .22C                        0 6C0F A   
.22D                        0 6BC0 A   .22E                        0 6BF3 A   
.22F                        0 6BDE A   .230                        0 6C1B A   
.231                        0 6C33 A   .232                        0 6C24 A   
.233                        0 6DBE A   .234                        0 6DB5 A   
.235                        0 6DD0 A   .236                        0 6DC7 A   
.237                        0 6DE2 A   .238                        0 6DD9 A   
.239                        0 7095 A   .23A                        0 6E2F A   
.23B                        0 6F1A A   .23C                        0 6F0B A   
.23D                        0 6F12 A   .23E                        0 6EDF A   
.23F                        0 6F1A A   .24                         0 3922 A   
.240                        0 6F88 A   .241                        0 6F79 A   
.242                        0 6F80 A   .243                        0 6F4D A   
.244                        0 6F88 A   .245                        0 6FDB A   
.246                        0 6FCC A   .247                        0 6FD3 A   
.248                        0 6F8F A   .249                        0 6FDB A   
.24A                        0 7026 A   .24B                        0 7017 A   
.24C                        0 701E A   .24D                        0 6FEB A   
.24E                        0 7026 A   .24F                        0 7310 A   
.25                         0 3841 A   .250                        0 70A0 A   
.251                        0 7241 A   .252                        0 7232 A   
.253                        0 7239 A   .254                        0 720A A   
.255                        0 7241 A   .256                        0 73D0 A   
.257                        0 731B A   .258                        0 73BA A   
.259                        0 73AB A   .25A                        0 73B2 A   
.25B                        0 738C A   .25C                        0 73BA A   
.25D                        0 7692 A   .25E                        0 73E8 A   
.25F                        0 7457 A   .26                         0 3841 A   
.260                        0 7448 A   .261                        0 744F A   
.262                        0 741B A   .263                        0 7457 A   
.264                        0 74DC A   .265                        0 74CD A   
.266                        0 74D4 A   .267                        0 7498 A   
.268                        0 74C6 A   .269                        0 74A0 A   
.26A                        0 74DC A   .26B                        0 74FE A   
.26C                        0 74F6 A   .26D                        0 759F A   
.26E                        0 7590 A   .26F                        0 7597 A   
.27                         0 386A A   .270                        0 755B A   
.271                        0 759F A   .272                        0 75F8 A   
.273                        0 75E9 A   .274                        0 75F0 A   
.275                        0 75BC A   .276                        0 75F8 A   
.277                        0 790D A   .278                        0 769D A   
.279                        0 783E A   .27A                        0 782F A   
.27B                        0 7836 A   .27C                        0 7807 A   
.27D                        0 783E A   .27E                        0 79AE A   
.27F                        0 7918 A   .28                         0 386A A   
.280                        0 799A A   .281                        0 798B A   
.282                        0 7992 A   .283                        0 796B A   
.284                        0 799A A   .285                        0 79F0 A   
.286                        0 79E2 A   .287                        0 79E9 A   
.288                        0 79C6 A   .289                        0 79E2 A   
.28A                        0 79DA A   .28B                        0 79F0 A   
.28C                        0 7C69 A   .28D                        0 7C53 A   
.28E                        0 7B4F A   .28F                        0 7B64 A   
.29                         0 387F A   .290                        0 7B56 A   
.291                        0 7C4C A   .292                        0 7C3C A   
.293                        0 7B6D A   .294                        0 7B9C A   
.295                        0 7B7B A   .296                        0 7B74 A   
.297                        0 7C3A A   .298                        0 7C3A A   
.299                        0 7BA5 A   .29A                        0 7BC9 A   
.29B                        0 7BC3 A   .29C                        0 7C35 A   
.29D                        0 7C26 A   .29E                        0 7C2D A   
.29F                        0 7BDC A   .2A                         0 387F A   
.2A0                        0 7C0E A   .2A1                        0 7BFB A   
.2A2                        0 7C1F A   .2A3                        0 7C35 A   
.2A4                        0 7C4C A   .2A5                        0 7C69 A   
.2B                         0 3894 A   .2C                         0 3894 A   
.2D                         0 38A9 A   .2E                         0 38B8 A   
.2F                         0 38D6 A   .3                          0 3A6B A   
.30                         0 38E4 A   .31                         0 38F2 A   
.32                         0 3900 A   .33                         0 3979 A   
.34                         0 39C6 A   .36                         0 39BA A   
.37                         0 397E A   .38                         0 3983 A   
.39                         0 39A1 A   .3A                         0 39C9 A   
.3B                         0 39FD A   .3C                         0 3A19 A   
.3D                         0 3A5D A   .3F                         0 3A51 A   
.4                          0 3646 A   .40                         0 3A1E A   
.41                         0 3A2D A   .42                         0 3A3E A   
.43                         0 3AB8 A   .44                         0 3A7E A   
.45                         0 3AEA A   .46                         0 3AE6 A   
.47                         0 3CBD A   .48                         0 3B78 A   
.49                         0 3BEA A   .4B                         0 3BDA A   
.4C                         0 3BB8 A   .4D                         0 3BC0 A   
.4E                         0 3BC8 A   .4F                         0 3BD0 A   
.5                          0 36A1 A   .50                         0 3CA7 A   
.51                         0 3C96 A   .52                         0 3C9D A   
.53                         0 3BF2 A   .54                         0 3C6F A   
.55                         0 3C13 A   .56                         0 3C96 A   
.57                         0 3CA7 A   .58                         0 3CBD A   
.59                         0 3CB0 A   .5A                         0 3D0D A   
.5B                         0 3CFE A   .5C                         0 3D05 A   
.5D                         0 3CCD A   .5E                         0 3D0D A   
.5F                         0 3D92 A   .60                         0 3D83 A   
.61                         0 3D8A A   .62                         0 3D4B A   
.63                         0 3D92 A   .64                         0 3DD9 A   
.65                         0 3DCA A   .66                         0 3DD1 A   
.67                         0 3D99 A   .68                         0 3DD9 A   
.69                         0 3DF4 A   .6A                         0 3DEF A   
.6B                         0 3DF7 A   .6C                         0 3E4E A   
.6D                         0 3E3F A   .6E                         0 3E46 A   
.6F                         0 3E0E A   .7                          0 367C A   
.70                         0 3E4E A   .71                         0 3F4E A   
.72                         0 3E8D A   .73                         0 3EC9 A   
.74                         0 3EA3 A   .75                         0 3F4E A   
.76                         0 3EF4 A   .77                         0 3ED0 A   
.78                         0 3F4E A   .79                         0 408B A   
.7A                         0 407D A   .7B                         0 40AD A   
.7C                         0 409E A   .7D                         0 40A5 A   
.7E                         0 4092 A   .7F                         0 40AD A   
.8                          0 3658 A   .80                         0 40D9 A   
.81                         0 40CB A   .82                         0 413E A   
.84                         0 412F A   .85                         0 40F1 A   
.86                         0 4105 A   .87                         0 4119 A   
.88                         0 420C A   .89                         0 41BC A   
.8A                         0 41B5 A   .8B                         0 41AE A   
.8C                         0 41A6 A   .8D                         0 41E5 A   
.8E                         0 41D0 A   .8F                         0 41F9 A   
.9                          0 3664 A   .90                         0 426E A   
.91                         0 426A A   .92                         0 4359 A   
.93                         0 42A1 A   .94                         0 4391 A   
.95                         0 438D A   .96                         0 43E3 A   
.97                         0 43DF A   .98                         0 440D A   
.99                         0 4409 A   .9A                         0 44A5 A   
.9B                         0 4437 A   .9C                         0 44C9 A   
.9D                         0 45F1 A   .9E                         0 45E2 A   
.9F                         0 45E9 A   .A                          0 3664 A   
.A0                         0 45A6 A   .A1                         0 45F1 A   
.A2                         0 467C A   .A3                         0 466D A   
.A4                         0 4674 A   .A5                         0 4643 A   
.A6                         0 467C A   .A7                         0 479C A   
.A8                         0 478B A   .A9                         0 4792 A   
.AA                         0 46EA A   .AB                         0 4749 A   
.AC                         0 46F3 A   .AD                         0 478B A   
.AE                         0 479C A   .AF                         0 4851 A   
.B                          0 3664 A   .B0                         0 4842 A   
.B1                         0 4849 A   .B2                         0 47D4 A   
.B3                         0 4815 A   .B4                         0 47DD A   
.B5                         0 4842 A   .B6                         0 4851 A   
.B7                         0 4867 A   .B8                         0 4863 A   
.B9                         0 4873 A   .BA                         0 486F A   
.BB                         0 489D A   .BC                         0 4899 A   
.BD                         0 48DA A   .BE                         0 48C9 A   
.BF                         0 48EB A   .C                          0 3664 A   
.C0                         0 48E4 A   .C1                         0 48FC A   
.C2                         0 48F5 A   .C3                         0 490B A   
.C4                         0 4906 A   .C5                         0 4B82 A   
.C6                         0 4932 A   .C7                         0 49BC A   
.C8                         0 4987 A   .C9                         0 4975 A   
.CA                         0 4963 A   .CB                         0 495C A   
.CC                         0 4955 A   .CD                         0 4B7F A   
.CE                         0 4AA1 A   .CF                         0 49C5 A   
.D                          0 3664 A   .D0                         0 4A9E A   
.D1                         0 4A8B A   .D2                         0 4A92 A   
.D3                         0 49D0 A   .D4                         0 4A30 A   
.D5                         0 49EE A   .D6                         0 49E7 A   
.D7                         0 4A8B A   .D8                         0 4A9E A   
.D9                         0 4B7F A   .DA                         0 4B7F A   
.DB                         0 4B6C A   .DC                         0 4B73 A   
.DD                         0 4AAC A   .DE                         0 4B05 A   
.DF                         0 4AC3 A   .E                          0 3664 A   
.E0                         0 4ABC A   .E1                         0 4B60 A   
.E2                         0 4B6C A   .E3                         0 4B6A A   
.E4                         0 4B7F A   .E5                         0 4F57 A   
.E6                         0 4F57 A   .E8                         0 4F45 A   
.E9                         0 4BB4 A   .EA                         0 4BB4 A   
.EB                         0 4C46 A   .EC                         0 4BF1 A   
.ED                         0 4BDF A   .EE                         0 4BCD A   
.EF                         0 4BC6 A   .F                          0 3664 A   
.F0                         0 4BBD A   .F1                         0 4D67 A   
.F2                         0 4CD9 A   .F3                         0 4C4F A   
.F4                         0 4CD6 A   .F5                         0 4CC5 A   
.F6                         0 4CCC A   .F7                         0 4C59 A   
.F8                         0 4C9D A   .F9                         0 4C77 A   
.FA                         0 4C70 A   .FB                         0 4CC5 A   
.FC                         0 4CD6 A   .FD                         0 4D67 A   
.FE                         0 4D67 A   .FF                         0 4D54 A   
_biosfn_alternate_prtsc     0 6A82 A   _biosfn_enable_video_refre+ 0 6B5D A   
_biosfn_get_cursor_pos      0 435D A   _biosfn_get_font_info       0 68A8 A   
_biosfn_load_gfx_8_14_char+ 0 68A5 A   _biosfn_load_gfx_8_16_char+ 0 68A7 A   
_biosfn_load_gfx_8_8_chars  0 68A3 A   _biosfn_load_gfx_8_8_dd_ch+ 0 68A6 A   
_biosfn_load_gfx_user_char+ 0 68A4 A   _biosfn_load_text_8_14_pat  0 66DD A   
_biosfn_load_text_8_16_pat  0 6812 A   _biosfn_load_text_8_8_pat   0 6774 A   
_biosfn_load_text_user_pat  0 6641 A   _biosfn_perform_gray_scale+ 0 639A A   
_biosfn_read_char_attr      0 4F5B A   _biosfn_read_pixel          0 5B9E A   
_biosfn_read_state_info     0 6C6A A   _biosfn_read_video_state_s+ 0 6DE9 A   
_biosfn_read_video_state_s+ 0 6DA2 A   _biosfn_restore_video_stat+ 0 73D7 A   
_biosfn_save_video_state    0 6E0D A   _biosfn_scroll              0 4855 A   
_biosfn_set_active_page     0 43D2 A   _biosfn_set_cursor_pos      0 425D A   
_biosfn_set_cursor_shape    0 4142 A   _biosfn_set_video_mode      0 3ABA A   
_biosfn_switch_video_inter+ 0 6B5C A   _biosfn_write_char_attr     0 54A2 A   
_biosfn_write_char_only     0 5694 A   _biosfn_write_pixel         0 5902 A   
_biosfn_write_string        0 6B5E A   _biosfn_write_teletype      0 5DA4 A   
_ccrtc_1024x768x16          0 7F0B A E _ccrtc_1024x768x24          0 7F5F A E 
_ccrtc_1024x768x8           0 7EB7 A E _ccrtc_1280x1024x16         0 8007 A E 
_ccrtc_1280x1024x8          0 7FB3 A E _ccrtc_1600x1200x8          0 805B A E 
_ccrtc_640x480x16           0 7D13 A E _ccrtc_640x480x24           0 7D67 A E 
_ccrtc_640x480x8            0 7CBF A E _ccrtc_800x600x16           0 7E0F A E 
_ccrtc_800x600x24           0 7E63 A E _ccrtc_800x600x8            0 7DBB A E 
_ccrtc_vga                  0 7C79 A E _cgraph_svgacolor           0 7C81 A E 
_cgraph_vga                 0 7C71 A E _cirrus_id_table            0 825F A E 
_cirrus_modes               0 808B A E _cirrus_vesa_modelist       0 8265 A E 
_cseq_1024x768x16           0 7EE7 A E _cseq_1024x768x24           0 7F3B A E 
_cseq_1024x768x8            0 7E93 A E _cseq_1280x1024x16          0 7FE3 A E 
_cseq_1280x1024x8           0 7F8F A E _cseq_1600x1200x8           0 8037 A E 
_cseq_640x480x16            0 7CEF A E _cseq_640x480x24            0 7D43 A E 
_cseq_640x480x8             0 7C9B A E _cseq_800x600x16            0 7DEB A E 
_cseq_800x600x24            0 7E3F A E _cseq_800x600x8             0 7D97 A E 
_cseq_vga                   0 7C6D A E _dac_regs                   0 026A A   
_display_info               0 35F4 A   _display_splash_screen      0 35F3 A   
_display_string             0 3612 A   _find_vga_entry             0 79B5 A   
_get_SS                     0 7B2D A E _get_font_access            0 64A1 A   
_inb                        0 7AF7 A E _int10_func                 0 3639 A   
_inw                        0 7B02 A E _line_to_vpti               0 025A A   
_memcpyb                    0 7A41 A   _memcpyw                    0 7A71 A   
_memsetb                    0 79F7 A   _memsetw                    0 7A1C A   
_outb                       0 7B0D A E _outw                       0 7B1D A E 
_palette0                   0 09EE A   _palette1                   0 0AAE A   
_palette2                   0 0B6E A   _palette3                   0 0C2E A   
_printf                     0 7B30 A E _read_byte                  0 7AA1 A   
_read_word                  0 7AB4 A   _release_font_access        0 64C4 A   
_set_scan_lines             0 64F8 A   _static_functionality       0 0F2E A   
_vga_modes                  0 01DA A   _vgafont14                  0 173E A   
_vgafont14alt               0 353E A   _vgafont16                  0 253E A   
_vgafont16alt               0 353F A   _vgafont8                   0 0F3E A   
_vgamem_copy_cga            0 468E A   _vgamem_copy_pl4            0 4541 A   
_vgamem_fill_cga            0 47A0 A   _vgamem_fill_pl4            0 4603 A   
_video_param_table          0 026E A   _video_save_pointer_table   0 35D7 A   
_write_byte                 0 7AC7 A   _write_gfx_char_cga         0 51C9 A   
_write_gfx_char_lin         0 53CE A   _write_gfx_char_pl4         0 5056 A   
_write_word                 0 7ADF A   biosfn_enable_cursor_emula+ 0 6B3A A   
biosfn_enable_default_pale+ 0 6AD6 A   biosfn_enable_grayscale_su+ 0 6B16 A   
biosfn_enable_video_addres+ 0 6AF8 A   biosfn_get_all_palette_reg  0 623F A   
biosfn_get_ega_info         0 6A5F A   biosfn_get_single_palette_+ 0 620D A   
biosfn_get_video_mode       0 610A A   biosfn_group_0B             0 588A A   
biosfn_group_10             0 6131 A   biosfn_group_1A             0 6C37 A   
biosfn_read_all_dac_reg     0 631F A   biosfn_read_display_code    0 6C40 A   
biosfn_read_overscan_borde+ 0 6231 A   biosfn_read_pel_mask        0 6352 A   
biosfn_read_single_dac_reg  0 6304 A   biosfn_read_video_dac_stat+ 0 635D A   
biosfn_select_vert_res      0 6A83 A   biosfn_select_video_dac_co+ 0 62C1 A   
biosfn_set_all_dac_reg      0 6299 A   biosfn_set_all_palette_reg  0 61BA A   
biosfn_set_border_color     0 5895 A   biosfn_set_display_code     0 6C55 A   
biosfn_set_overscan_border+ 0 61B2 A   biosfn_set_palette          0 58D4 A   
biosfn_set_pel_mask         0 6347 A   biosfn_set_single_dac_reg   0 6280 A   
biosfn_set_single_palette_+ 0 6198 A   biosfn_set_text_block_spec+ 0 6805 A   
biosfn_toggle_intensity     0 61E7 A   c80h_1                      0 84A4 A   
c80h_2                      0 84B4 A   c85h2                       0 84F0 A   
c85h3                       0 84F8 A   cgm_1                       0 8837 A   
cgm_2                       0 884D A   cgm_3                       0 884E A   
cgm_4                       0 8848 A   cirrus_check                0 835E A   
cirrus_clear_vram           0 89A1 A   cirrus_clear_vram_1         0 89B2 A   
cirrus_display_info         0 8349 A   cirrus_enable_16k_granular+ 0 847A A   
cirrus_extbios              0 83A8 A   cirrus_extbios_80h          0 8498 A   
cirrus_extbios_81h          0 84BE A   cirrus_extbios_82h          0 84C2 A   
cirrus_extbios_85h          0 84D3 A   cirrus_extbios_9Ah          0 84FB A   
cirrus_extbios_A0h          0 8502 A   cirrus_extbios_A0h_callbac+ 0 8518 A   
cirrus_extbios_A1h          0 851B A   cirrus_extbios_A2h          0 851F A   
cirrus_extbios_AEh          0 8522 A   cirrus_extbios_handlers     0 89D6 A   
cirrus_extbios_unimplement+ 0 8525 A   cirrus_get_bpp_bytes        0 88A6 A   
cirrus_get_bpp_bytes_1      0 88B7 A   cirrus_get_bpp_bytes_2      0 88BF A   
cirrus_get_crtc             0 881F A   cirrus_get_lfb_addr         0 884F A   
cirrus_get_lfb_addr_3       0 885F A   cirrus_get_lfb_addr_4       0 8876 A   
cirrus_get_lfb_addr_5       0 8872 A   cirrus_get_lfb_addr_6       0 8886 A   
cirrus_get_line_offset      0 88DD A   cirrus_get_line_offset_ent+ 0 88FF A   
cirrus_get_modeentry        0 8832 A   cirrus_get_modeentry_nomas+ 0 8834 A   
cirrus_get_start_addr       0 896A A   cirrus_init                 0 8312 A   
cirrus_installed            0 82A5 A   cirrus_int10_handler        0 836E A   
cirrus_msgnotinstalled      0 8358 A   cirrus_not_installed        0 82CB A   
cirrus_pci_read             0 888D A   cirrus_return               0 8384 A   
cirrus_set_line_offset      0 88C1 A   cirrus_set_start_addr       0 8929 A   
cirrus_set_video_mode       0 8387 A   cirrus_set_video_mode_exte+ 0 83DE A   
cirrus_set_video_mode_exte+ 0 83EE A   cirrus_switch_mode          0 8422 A   
cirrus_switch_mode_setregs  0 848A A   cirrus_unhandled            0 837F A   
cirrus_vesa                 0 83C3 A   cirrus_vesa_00h             0 8526 A   
cirrus_vesa_01h             0 8598 A   cirrus_vesa_01h_1           0 85A8 A   
cirrus_vesa_01h_3           0 860E A   cirrus_vesa_01h_4           0 8648 A   
cirrus_vesa_01h_5           0 866B A   cirrus_vesa_01h_6           0 866A A   
cirrus_vesa_02h             0 866C A   cirrus_vesa_02h_1           0 868D A   
cirrus_vesa_02h_2           0 8684 A   cirrus_vesa_02h_3           0 869E A   
cirrus_vesa_02h_4           0 86AB A   cirrus_vesa_02h_legacy      0 8687 A   
cirrus_vesa_03h             0 86BE A   cirrus_vesa_03h_1           0 86D7 A   
cirrus_vesa_05h             0 86E0 A   cirrus_vesa_05h_1           0 86EF A   
cirrus_vesa_05h_farentry    0 86DC A   cirrus_vesa_05h_getmempage  0 8706 A   
cirrus_vesa_05h_setmempage  0 86F2 A   cirrus_vesa_06h             0 8718 A   
cirrus_vesa_06h_1           0 872A A   cirrus_vesa_06h_2           0 8735 A   
cirrus_vesa_06h_3           0 8738 A   cirrus_vesa_07h             0 875B A   
cirrus_vesa_07h_1           0 876B A   cirrus_vesa_07h_2           0 8798 A   
cirrus_vesa_07h_3           0 8784 A   cirrus_vesa_10h             0 87C5 A   
cirrus_vesa_10h_01          0 87D7 A   cirrus_vesa_10h_02          0 87E8 A   
cirrus_vesa_10h_done        0 87FA A   cirrus_vesa_10h_unimplemen+ 0 87F7 A   
cirrus_vesa_handlers        0 8A36 A   cirrus_vesa_not_handled     0 83D9 A   
cirrus_vesa_oemname         0 82F5 A   cirrus_vesa_pmbios_entry    0 83FF A   
cirrus_vesa_pmbios_init     0 83FE A   cirrus_vesa_pmbios_return   0 841F A   
cirrus_vesa_pmbios_unimple+ 0 841C A   cirrus_vesa_productname     0 82F5 A   
cirrus_vesa_productrevisio+ 0 830E A   cirrus_vesa_unimplemented   0 87FC A   
cirrus_vesa_vendorname      0 82F5 A   cirrus_vesamode_to_mode     0 8800 A   
csms_1                      0 848A A   csms_2                      0 8497 A   
cv00_1                      0 8558 A   cv00_2                      0 8586 A   
cvtm_1                      0 880B A   cvtm_2                      0 8818 A   
ef                          E 0000 R I get_dac_16_page             0 638D A   
get_palette_loop            0 6247 A   idiv_u                      0 64F3 A   
init_bios_area              0 359F A   init_vga_card               0 3540 A   
int10_end                   0 01D8 A   int10_group_10_unknown      0 6197 A   
int10_normal                0 01CA A   int10_test_0B               0 0166 A   
int10_test_1001             0 6137 A   int10_test_1002             0 613D A   
int10_test_1003             0 6143 A   int10_test_1007             0 614A A   
int10_test_1008             0 6151 A   int10_test_1009             0 6158 A   
int10_test_1010             0 615F A   int10_test_1012             0 6166 A   
int10_test_1013             0 616D A   int10_test_1015             0 6174 A   
int10_test_1017             0 617B A   int10_test_1018             0 6182 A   
int10_test_1019             0 6189 A   int10_test_101A             0 6190 A   
int10_test_101B             0 01BB A   int10_test_1103             0 0170 A   
int10_test_12               0 017A A   int10_test_1A               0 015C A   
int10_test_BL30             0 0189 A   int10_test_BL31             0 0193 A   
int10_test_BL32             0 019D A   int10_test_BL33             0 01A7 A   
int10_test_BL34             0 01B1 A   is_text_mode                0 8469 A   
memcpyb_end                 0 7A69 A   memcpyw_end                 0 7A99 A   
memsetb_end                 0 7A16 A   memsetw_end                 0 7A3B A   
mode_ega_color              0 6A7F A   msg_vga_init                0 355C A   
no_actl_reg1                0 61B1 A   no_actl_reg2                0 6230 A   
no_cirrus                   0 8348 A   offset_found1               0 890E A   
offset_found2               0 891F A   offset_loop1                0 8904 A   
offset_loop2                0 8915 A   read_dac_loop               0 6330 A   
set_actl_normal             0 62FD A   set_cga_palette_loop        0 58E1 A   
set_dac_16_page             0 62F7 A   set_dac_loop                0 62AA A   
set_dac_page                0 62E4 A   set_intensity_loop          0 58B3 A   
set_low_border              0 58AD A   set_palette_loop            0 61C9 A   
set_retcode                 0 6ACF A   set_vert_res                0 6AC5 A   
vert_res_200                0 6ABB A   vert_res_350                0 6AB1 A   
vert_res_400                0 6AA5 A   vgabios_copyright           0 0058 A   
vgabios_date                0 004A A   vgabios_end                 0 8A6A A   
vgabios_entry_point         0 0003 A   vgabios_init_func           0 0127 A   
vgabios_int10_handler       0 0151 A   vgabios_license             0 0084 A   
vgabios_name                0 0022 A   vgabios_pci_data            0 010F A   
vgabios_start               0 0000 A   vgabios_version             0 003E A   
vgabios_website             0 00B9 A   

00000 errors
00000 warnings
