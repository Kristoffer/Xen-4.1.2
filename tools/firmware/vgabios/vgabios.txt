00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios_.c"
00003                                           ! 1 # 5
00004                                           ! 5 typedef unsigned char Bit8u;
00005                                           !BCC_EOS
00006                                           ! 6 typedef unsigned short Bit16u;
00007                                           !BCC_EOS
00008                                           ! 7 typedef unsigned long Bit32u;
00009                                           !BCC_EOS
00010                                           ! 8 typedef unsigned short Boolean;
00011                                           !BCC_EOS
00012                                           ! 9 void dispi_set_enable(enable);
00013                                           !BCC_EOS
00014                                           ! 10 
00015                                           ! 11 
00016                                           ! 12 
00017                                           ! 13 Boolean vbe_has_vbe_display();
00018                                           !BCC_EOS
00019                                           ! 14 void vbe_biosfn_return_controller_information(AX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 15 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00022                                           !BCC_EOS
00023                                           ! 16 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00024                                           !BCC_EOS
00025                                           ! 17 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00026                                           !BCC_EOS
00027                                           ! 18 void vbe_biosfn_set_get_palette_data(AX);
00028                                           !BCC_EOS
00029                                           ! 19 void vbe_biosfn_return_protected_mode_interface(AX);
00030                                           !BCC_EOS
00031                                           ! 20 
00032                                           ! 21 
00033                                           ! 22 typedef struct VbeInfoBlock
00034                                           ! 23 {
00035                                           ! 24    Bit8u VbeSignature[4];
00036                                           !BCC_EOS
00037                                           ! 25    Bit16u VbeVersion;
00038                                           !BCC_EOS
00039                                           ! 26    Bit16u OemStringPtr_Off;
00040                                           !BCC_EOS
00041                                           ! 27    Bit16u OemStringPtr_Seg;
00042                                           !BCC_EOS
00043                                           ! 28    Bit8u Capabilities[4];
00044                                           !BCC_EOS
00045                                           ! 29    Bit16u VideoModePtr_Off;
00046                                           !BCC_EOS
00047                                           ! 30    Bit16u VideoModePtr_Seg;
00048                                           !BCC_EOS
00049                                           ! 31    Bit16u TotalMemory;
00050                                           !BCC_EOS
00051                                           ! 32    Bit16u OemSoftwareRev;
00052                                           !BCC_EOS
00053                                           ! 33    Bit16u OemVendorNamePtr_Off;
00054                                           !BCC_EOS
00055                                           ! 34    Bit16u OemVendorNamePtr_Seg;
00056                                           !BCC_EOS
00057                                           ! 35    Bit16u OemProductNamePtr_Off;
00058                                           !BCC_EOS
00059                                           ! 36    Bit16u OemProductNamePtr_Seg;
00060                                           !BCC_EOS
00061                                           ! 37    Bit16u OemProductRevPtr_Off;
00062                                           !BCC_EOS
00063                                           ! 38    Bit16u OemProductRevPtr_Seg;
00064                                           !BCC_EOS
00065                                           ! 39    Bit16u Reserved[111];
00066                                           !BCC_EOS
00067                                           ! 40    Bit8u OemData[256];
00068                                           !BCC_EOS
00069                                           ! 41 } VbeInfoBlock;
00070                                           !BCC_EOS
00071                                           ! 42 # 46
00072                                           ! 46 typedef struct ModeInfoBlockCompact
00073                                           ! 47 {
00074                                           ! 48 
00075                                           ! 49    Bit16u ModeAttributes;
00076                                           !BCC_EOS
00077                                           ! 50    Bit8u WinAAttributes;
00078                                           !BCC_EOS
00079                                           ! 51    Bit8u WinBAttributes;
00080                                           !BCC_EOS
00081                                           ! 52    Bit16u WinGranularity;
00082                                           !BCC_EOS
00083                                           ! 53    Bit16u WinSize;
00084                                           !BCC_EOS
00085                                           ! 54    Bit16u WinASegment;
00086                                           !BCC_EOS
00087                                           ! 55    Bit16u WinBSegment;
00088                                           !BCC_EOS
00089                                           ! 56    Bit32u WinFuncPtr;
00090                                           !BCC_EOS
00091                                           ! 57    Bit16u BytesPerScanLine;
00092                                           !BCC_EOS
00093                                           ! 58 
00094                                           ! 59    Bit16u XResolution;
00095                                           !BCC_EOS
00096                                           ! 60    Bit16u YResolution;
00097                                           !BCC_EOS
00098                                           ! 61    Bit8u XCharSize;
00099                                           !BCC_EOS
00100                                           ! 62    Bit8u YCharSize;
00101                                           !BCC_EOS
00102                                           ! 63    Bit8u NumberOfPlanes;
00103                                           !BCC_EOS
00104                                           ! 64    Bit8u BitsPerPixel;
00105                                           !BCC_EOS
00106                                           ! 65    Bit8u NumberOfBanks;
00107                                           !BCC_EOS
00108                                           ! 66    Bit8u MemoryModel;
00109                                           !BCC_EOS
00110                                           ! 67    Bit8u BankSize;
00111                                           !BCC_EOS
00112                                           ! 68    Bit8u NumberOfImagePages;
00113                                           !BCC_EOS
00114                                           ! 69    Bit8u Reserved_page;
00115                                           !BCC_EOS
00116                                           ! 70 
00117                                           ! 71    Bit8u RedMaskSize;
00118                                           !BCC_EOS
00119                                           ! 72    Bit8u RedFieldPosition;
00120                                           !BCC_EOS
00121                                           ! 73    Bit8u GreenMaskSize;
00122                                           !BCC_EOS
00123                                           ! 74    Bit8u GreenFieldPosition;
00124                                           !BCC_EOS
00125                                           ! 75    Bit8u BlueMaskSize;
00126                                           !BCC_EOS
00127                                           ! 76    Bit8u BlueFieldPosition;
00128                                           !BCC_EOS
00129                                           ! 77    Bit8u RsvdMaskSize;
00130                                           !BCC_EOS
00131                                           ! 78    Bit8u RsvdFieldPosition;
00132                                           !BCC_EOS
00133                                           ! 79    Bit8u DirectColorModeInfo;
00134                                           !BCC_EOS
00135                                           ! 80 
00136                                           ! 81    Bit32u PhysBasePtr;
00137                                           !BCC_EOS
00138                                           ! 82    Bit32u OffScreenMemOffset;
00139                                           !BCC_EOS
00140                                           ! 83    Bit16u OffScreenMemSize;
00141                                           !BCC_EOS
00142                                           ! 84 
00143                                           ! 85    Bit16u LinBytesPerScanLine;
00144                                           !BCC_EOS
00145                                           ! 86    Bit8u BnkNumberOfPages;
00146                                           !BCC_EOS
00147                                           ! 87    Bit8u LinNumberOfPages;
00148                                           !BCC_EOS
00149                                           ! 88    Bit8u LinRedMaskSize;
00150                                           !BCC_EOS
00151                                           ! 89    Bit8u LinRedFieldPosition;
00152                                           !BCC_EOS
00153                                           ! 90    Bit8u LinGreenMaskSize;
00154                                           !BCC_EOS
00155                                           ! 91    Bit
00156                                           ! 91 8u LinGreenFieldPosition;
00157                                           !BCC_EOS
00158                                           ! 92    Bit8u LinBlueMaskSize;
00159                                           !BCC_EOS
00160                                           ! 93    Bit8u LinBlueFieldPosition;
00161                                           !BCC_EOS
00162                                           ! 94    Bit8u LinRsvdMaskSize;
00163                                           !BCC_EOS
00164                                           ! 95    Bit8u LinRsvdFieldPosition;
00165                                           !BCC_EOS
00166                                           ! 96    Bit32u MaxPixelClock;
00167                                           !BCC_EOS
00168                                           ! 97 
00169                                           ! 98 } ModeInfoBlockCompact;
00170                                           !BCC_EOS
00171                                           ! 99 
00172                                           ! 100 typedef struct ModeInfoBlock
00173                                           ! 101 {
00174                                           ! 102 
00175                                           ! 103    Bit16u ModeAttributes;
00176                                           !BCC_EOS
00177                                           ! 104    Bit8u WinAAttributes;
00178                                           !BCC_EOS
00179                                           ! 105    Bit8u WinBAttributes;
00180                                           !BCC_EOS
00181                                           ! 106    Bit16u WinGranularity;
00182                                           !BCC_EOS
00183                                           ! 107    Bit16u WinSize;
00184                                           !BCC_EOS
00185                                           ! 108    Bit16u WinASegment;
00186                                           !BCC_EOS
00187                                           ! 109    Bit16u WinBSegment;
00188                                           !BCC_EOS
00189                                           ! 110    Bit32u WinFuncPtr;
00190                                           !BCC_EOS
00191                                           ! 111    Bit16u BytesPerScanLine;
00192                                           !BCC_EOS
00193                                           ! 112 
00194                                           ! 113    Bit16u XResolution;
00195                                           !BCC_EOS
00196                                           ! 114    Bit16u YResolution;
00197                                           !BCC_EOS
00198                                           ! 115    Bit8u XCharSize;
00199                                           !BCC_EOS
00200                                           ! 116    Bit8u YCharSize;
00201                                           !BCC_EOS
00202                                           ! 117    Bit8u NumberOfPlanes;
00203                                           !BCC_EOS
00204                                           ! 118    Bit8u BitsPerPixel;
00205                                           !BCC_EOS
00206                                           ! 119    Bit8u NumberOfBanks;
00207                                           !BCC_EOS
00208                                           ! 120    Bit8u MemoryModel;
00209                                           !BCC_EOS
00210                                           ! 121    Bit8u BankSize;
00211                                           !BCC_EOS
00212                                           ! 122    Bit8u NumberOfImagePages;
00213                                           !BCC_EOS
00214                                           ! 123    Bit8u Reserved_page;
00215                                           !BCC_EOS
00216                                           ! 124 
00217                                           ! 125    Bit8u RedMaskSize;
00218                                           !BCC_EOS
00219                                           ! 126    Bit8u RedFieldPosition;
00220                                           !BCC_EOS
00221                                           ! 127    Bit8u GreenMaskSize;
00222                                           !BCC_EOS
00223                                           ! 128    Bit8u GreenFieldPosition;
00224                                           !BCC_EOS
00225                                           ! 129    Bit8u BlueMaskSize;
00226                                           !BCC_EOS
00227                                           ! 130    Bit8u BlueFieldPosition;
00228                                           !BCC_EOS
00229                                           ! 131    Bit8u RsvdMaskSize;
00230                                           !BCC_EOS
00231                                           ! 132    Bit8u RsvdFieldPosition;
00232                                           !BCC_EOS
00233                                           ! 133    Bit8u DirectColorModeInfo;
00234                                           !BCC_EOS
00235                                           ! 134 
00236                                           ! 135    Bit32u PhysBasePtr;
00237                                           !BCC_EOS
00238                                           ! 136    Bit32u OffScreenMemOffset;
00239                                           !BCC_EOS
00240                                           ! 137    Bit16u OffScreenMemSize;
00241                                           !BCC_EOS
00242                                           ! 138 
00243                                           ! 139    Bit16u LinBytesPerScanLine;
00244                                           !BCC_EOS
00245                                           ! 140    Bit8u BnkNumberOfPages;
00246                                           !BCC_EOS
00247                                           ! 141    Bit8u LinNumberOfPages;
00248                                           !BCC_EOS
00249                                           ! 142    Bit8u LinRedMaskSize;
00250                                           !BCC_EOS
00251                                           ! 143    Bit8u LinRedFieldPosition;
00252                                           !BCC_EOS
00253                                           ! 144    Bit8u LinGreenMaskSize;
00254                                           !BCC_EOS
00255                                           ! 145    Bit8u LinGreenFieldPosition;
00256                                           !BCC_EOS
00257                                           ! 146    Bit8u LinBlueMaskSize;
00258                                           !BCC_EOS
00259                                           ! 147    Bit8u LinBlueFieldPosition;
00260                                           !BCC_EOS
00261                                           ! 148    Bit8u LinRsvdMaskSize;
00262                                           !BCC_EOS
00263                                           ! 149    Bit8u LinRsvdFieldPosition;
00264                                           !BCC_EOS
00265                                           ! 150    Bit32u MaxPixelClock;
00266                                           !BCC_EOS
00267                                           ! 151    Bit8u Reserved[189];
00268                                           !BCC_EOS
00269                                           ! 152 } ModeInfoBlock;
00270                                           !BCC_EOS
00271                                           ! 153 
00272                                           ! 154 typedef struct ModeInfoListItem
00273                                           ! 155 {
00274                                           ! 156   Bit16u mode;
00275                                           !BCC_EOS
00276                                           ! 157   ModeInfoBlockCompact info;
00277                                           !BCC_EOS
00278                                           ! 158 } ModeInfoListItem;
00279                                           !BCC_EOS
00280                                           ! 159 static Bit8u read_byte();
00281                                           !BCC_EOS
00282                                           ! 160 static Bit16u read_word();
00283                                           !BCC_EOS
00284                                           ! 161 static void write_byte();
00285                                           !BCC_EOS
00286                                           ! 162 static void write_word();
00287                                           !BCC_EOS
00288                                           ! 163 static Bit8u inb();
00289                                           !BCC_EOS
00290                                           ! 164 static Bit16u inw();
00291                                           !BCC_EOS
00292                                           ! 165 static void outb();
00293                                           !BCC_EOS
00294                                           ! 166 static void outw();
00295                                           !BCC_EOS
00296                                           ! 167 static Bit16u get_SS();
00297                                           !BCC_EOS
00298                                           ! 168 static void printf();
00299                                           !BCC_EOS
00300                                           ! 169 static void unimplemented();
00301                                           !BCC_EOS
00302                                           ! 170 static void unknown();
00303                                           !BCC_EOS
00304                                           ! 171 static Bit8u find_vga_entry();
00305                                           !BCC_EOS
00306                                           ! 172 static void memsetb();
00307                                           !BCC_EOS
00308                                           ! 173 static void memsetw();
00309                                           !BCC_EOS
00310                                           ! 174 static void memcpyb();
00311                                           !BCC_EOS
00312                                           ! 175 static void memcpyw();
00313                                           !BCC_EOS
00314                                           ! 176 static void biosfn_set_video_mode();
00315                                           !BCC_EOS
00316                                           ! 177 static void biosfn_set_cursor_shape();
00317                                           !BCC_EOS
00318                                           ! 178 static void biosfn_set_cursor_pos();
00319                                           !BCC_EOS
00320                                           ! 179 static void biosfn_get_cursor_pos();
00321                                           !BCC_EOS
00322                                           ! 180 st
00323                                           ! 180 atic void biosfn_set_active_page();
00324                                           !BCC_EOS
00325                                           ! 181 static void biosfn_scroll();
00326                                           !BCC_EOS
00327                                           ! 182 static void biosfn_read_char_attr();
00328                                           !BCC_EOS
00329                                           ! 183 static void biosfn_write_char_attr();
00330                                           !BCC_EOS
00331                                           ! 184 static void biosfn_write_char_only();
00332                                           !BCC_EOS
00333                                           ! 185 static void biosfn_write_pixel();
00334                                           !BCC_EOS
00335                                           ! 186 static void biosfn_read_pixel();
00336                                           !BCC_EOS
00337                                           ! 187 static void biosfn_write_teletype();
00338                                           !BCC_EOS
00339                                           ! 188 static void biosfn_perform_gray_scale_summing();
00340                                           !BCC_EOS
00341                                           ! 189 static void biosfn_load_text_user_pat();
00342                                           !BCC_EOS
00343                                           ! 190 static void biosfn_load_text_8_14_pat();
00344                                           !BCC_EOS
00345                                           ! 191 static void biosfn_load_text_8_8_pat();
00346                                           !BCC_EOS
00347                                           ! 192 static void biosfn_load_text_8_16_pat();
00348                                           !BCC_EOS
00349                                           ! 193 static void biosfn_load_gfx_8_8_chars();
00350                                           !BCC_EOS
00351                                           ! 194 static void biosfn_load_gfx_user_chars();
00352                                           !BCC_EOS
00353                                           ! 195 static void biosfn_load_gfx_8_14_chars();
00354                                           !BCC_EOS
00355                                           ! 196 static void biosfn_load_gfx_8_8_dd_chars();
00356                                           !BCC_EOS
00357                                           ! 197 static void biosfn_load_gfx_8_16_chars();
00358                                           !BCC_EOS
00359                                           ! 198 static void biosfn_get_font_info();
00360                                           !BCC_EOS
00361                                           ! 199 static void biosfn_alternate_prtsc();
00362                                           !BCC_EOS
00363                                           ! 200 static void biosfn_switch_video_interface();
00364                                           !BCC_EOS
00365                                           ! 201 static void biosfn_enable_video_refresh_control();
00366                                           !BCC_EOS
00367                                           ! 202 static void biosfn_write_string();
00368                                           !BCC_EOS
00369                                           ! 203 static void biosfn_read_state_info();
00370                                           !BCC_EOS
00371                                           ! 204 static void biosfn_read_video_state_size();
00372                                           !BCC_EOS
00373                                           ! 205 static Bit16u biosfn_save_video_state();
00374                                           !BCC_EOS
00375                                           ! 206 static Bit16u biosfn_restore_video_state();
00376                                           !BCC_EOS
00377                                           ! 207 extern Bit8u video_save_pointer_table[];
00378                                           !BCC_EOS
00379                                           ! 208 #asm
00380                                           !BCC_ASM
00381                                           MACRO SET_INT_VECTOR
00382                                             push ds
00383                                             xor ax, ax
00384                                             mov ds, ax
00385                                             mov ax, ?3
00386                                             mov ?1*4, ax
00387                                             mov ax, ?2
00388                                             mov ?1*4+2, ax
00389                                             pop ds
00390                                           MEND
00391                                           ! 219 endasm
00392                                           !BCC_ENDASM
00393                                           ! 220 #asm
00394                                           !BCC_ASM
00395                                           
00396 0000                                      .rom
00397 0000                                      .org 0
00398                                           use16 386
00399                       00000000            vgabios_start:
00400 0000                        55            .byte 0x55, 0xaa
00401 0002                        40            .byte 0x40
00402                       00000003            vgabios_entry_point:
00403 0003           E9         0103              jmp vgabios_init_func
00404 001E                                      .org 0x1e
00405 001E                        49            .ascii "IBM"
00406 0021                        00            .byte 0x00
00407                       00000022            vgabios_name:
00408 0022                        50            .ascii "Plex86/Bochs VGABios"
00409 0036                        20            .ascii " "
00410 0037                        00            .byte 0x00
00411                       00000038            vgabios_version:
00412 0038                        63            .ascii "current-cvs"
00413 0043                        20            .ascii " "
00414                       00000044            vgabios_date:
00415 0044                        31            .ascii "10 Feb 2012"
00416 004F                        0A            .byte 0x0a,0x0d
00417 0051                        00            .byte 0x00
00418                       00000052            vgabios_copyright:
00419 0052                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00420 007B                        0A            .byte 0x0a,0x0d
00421 007D                        00            .byte 0x00
00422                       0000007E            vgabios_license:
00423 007E                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00424 00AE                        0A            .byte 0x0a,0x0d
00425 00B0                        0A            .byte 0x0a,0x0d
00426 00B2                        00            .byte 0x00
00427                       000000B3            vgabios_website:
00428 00B3                        50            .ascii "Please visit :"
00429 00C1                        0A            .byte 0x0a,0x0d
00430                                           ;;.ascii " . http://www.plex86.org"
00431                                           ;;.byte 0x0a,0x0d
00432 00C3                        20            .ascii " . http://bochs.sourceforge.net"
00433 00E2                        0A            .byte 0x0a,0x0d
00434 00E4                        20            .ascii " . http://www.nongnu.org/vgabios"
00435 0104                        0A            .byte 0x0a,0x0d
00436 0106                        0A            .byte 0x0a,0x0d
00437 0108                        00            .byte 0x00
00438                                           ;; ============================================================================================
00439                                           ;;
00440                                           ;; Init Entry point
00441                                           ;;
00442                                           ;; ============================================================================================
00443                       00000109            vgabios_init_func:
00444                                           ;; init vga card
00445 0109           E8         3457              call init_vga_card
00446                                           ;; init basic bios vars
00447 010C           E8         34B3              call init_bios_area
00448                                           ;; init vbe functions
00449 010F           E8         920D              call vbe_init
00450                                           ;; set int10 vect
00451                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   0112           1E                           push ds
 +a   0113           31C0                         xor ax, ax
 +a   0115           8ED8                         mov ds, ax
 +a   0117           B8                   0133    mov ax,  #vgabios_int10_handler
 +a   011A           A3         0040              mov 0x10*4, ax
 +a   011D           B8                   C000    mov ax,  #0xC000
 +a   0120           A3         0042              mov 0x10*4+2, ax
 +a   0123           1F                           pop ds
00452                                           ;; display splash screen
00453 0124           E8         34EF              call _display_splash_screen
00454                                           ;; init video mode and clear the screen
00455 0127           B8                   0003    mov ax,#0x0003
00456 012A           CD                     10    int #0x10
00457                                           ;; show info
00458 012C           E8         34E8              call _display_info
00459                                           ;; show vbe info
00460 012F           E8         921B              call vbe_display_info
00461 0132           CB                           retf
00462                                           ! 288 endasm
00463                                           !BCC_ENDASM
00464                                           ! 289 #asm
00465                                           !BCC_ASM
00466                       00000133            vgabios_int10_handler:
00467 0133           9C                           pushf
00468                                           
00469 0134           80FC                   0F    cmp ah, #0x0f
00470 0137           75           06              jne int10_test_1A
00471 0139           E8         60BA              call biosfn_get_video_mode
00472 013C           E9         00BC              jmp int10_end
00473                       0000013F            int10_test_1A:
00474 013F           80FC                   1A    cmp ah, #0x1a
00475 0142           75           06              jne int10_test_0B
00476 0144           E8         6BDC              call biosfn_group_1A
00477 0147           E9         00B1              jmp int10_end
00478                       0000014A            int10_test_0B:
00479 014A           80FC                   0B    cmp ah, #0x0b
00480 014D           75           06              jne int10_test_1103
00481 014F           E8         5822              call biosfn_group_0B
00482 0152           E9         00A6              jmp int10_end
00483                       00000155            int10_test_1103:
00484 0155           3D                   1103    cmp ax, #0x1103
00485 0158           75           06              jne int10_test_12
00486 015A           E8         6794              call biosfn_set_text_block_specifier
00487 015D           E9         009B              jmp int10_end
00488                       00000160            int10_test_12:
00489 0160           80FC                   12    cmp ah, #0x12
00490 0163           75           3E              jne int10_test_101B
00491 0165           80FB                   10    cmp bl, #0x10
00492 0168           75           06              jne int10_test_BL30
00493 016A           E8         69DE              call biosfn_get_ega_info
00494 016D           E9         008B              jmp int10_end
00495                       00000170            int10_test_BL30:
00496 0170           80FB                   30    cmp bl, #0x30
00497 0173           75           06              jne int10_test_BL31
00498 0175           E8         69F7              call biosfn_select_vert_res
00499 0178           E9         0080              jmp int10_end
00500                       0000017B            int10_test_BL31:
00501 017B           80FB                   31    cmp bl, #0x31
00502 017E           75           05              jne int10_test_BL32
00503 0180           E8         6A3F              call biosfn_enable_default_palette_loading
00504 0183           EB           76              jmp int10_end
00505                       00000185            int10_test_BL32:
00506 0185           80FB                   32    cmp bl, #0x32
00507 0188           75           05              jne int10_test_BL33
00508 018A           E8         6A57              call biosfn_enable_video_addressing
00509 018D           EB           6C              jmp int10_end
00510                       0000018F            int10_test_BL33:
00511 018F           80FB                   33    cmp bl, #0x33
00512 0192           75           05              jne int10_test_BL34
00513 0194           E8         6A6B              call biosfn_enable_grayscale_summing
00514 0197           EB           62              jmp int10_end
00515                       00000199            int10_test_BL34:
00516 0199           80FB                   34    cmp bl, #0x34
00517 019C           75           4F              jne int10_normal
00518 019E           E8         6A85              call biosfn_enable_cursor_emulation
00519 01A1           EB           58              jmp int10_end
00520                       000001A3            int10_test_101B:
00521 01A3           3D                   101B    cmp ax, #0x101b
00522 01A6           74           45              je int10_normal
00523 01A8           80FC                   10    cmp ah, #0x10
00524                                           
00525                                           
00526                                           
00527 01AB           75           05              jne int10_test_4F
00528                                           
00529 01AD           E8         606D              call biosfn_group_10
00530 01B0           EB           49              jmp int10_end
00531                                           
00532                       000001B2            int10_test_4F:
00533 01B2           80FC                   4F    cmp ah, #0x4f
00534 01B5           75           36              jne int10_normal
00535 01B7           3C                     03    cmp al, #0x03
00536 01B9           75           05              jne int10_test_vbe_05
00537 01BB           E8         9666              call vbe_biosfn_return_current_mode
00538 01BE           EB           3B              jmp int10_end
00539                       000001C0            int10_test_vbe_05:
00540 01C0           3C                     05    cmp al, #0x05
00541 01C2           75           05              jne int10_test_vbe_06
00542 01C4           E8         9931              call vbe_biosfn_display_window_control
00543 01C7           EB           32              jmp int10_end
00544                       000001C9            int10_test_vbe_06:
00545 01C9           3C                     06    cmp al, #0x06
00546 01CB           75           05              jne int10_test_vbe_07
00547 01CD           E8         9955              call vbe_biosfn_set_get_logical_scan_line_length
00548 01D0           EB           29              jmp int10_end
00549                       000001D2            int10_test_vbe_07:
00550 01D2           3C                     07    cmp al, #0x07
00551 01D4           75           05              jne int10_test_vbe_08
00552 01D6           E8         9999              call vbe_biosfn_set_get_display_start
00553 01D9           EB           20              jmp int10_end
00554                       000001DB            int10_test_vbe_08:
00555 01DB           3C                     08    cmp al, #0x08
00556 01DD           75           05              jne int10_test_vbe_0A
00557 01DF           E8         99BE              call vbe_biosfn_set_get_dac_palette_format
00558 01E2           EB           17              jmp int10_end
00559                       000001E4            int10_test_vbe_0A:
00560 01E4           3C                     0A    cmp al, #0x0A
00561 01E6           75           05              jne int10_normal
00562 01E8           E8         99ED              call vbe_biosfn_return_protected_mode_interface
00563 01EB           EB           0E              jmp int10_end
00564                                           
00565                                           
00566                       000001ED            int10_normal:
00567 01ED           06                           push es
00568 01EE           1E                           push ds
00569 01EF           60                           pusha
00570                                           
00571                                           ;; We have to set ds to access the right data segment
00572 01F0           BB                   C000    mov bx, #0xc000
00573 01F3           8EDB                         mov ds, bx
00574 01F5           E8         3464              call _int10_func
00575                                           
00576 01F8           61                           popa
00577 01F9           1F                           pop ds
00578 01FA           07                           pop es
00579                       000001FB            int10_end:
00580 01FB           9D                           popf
00581 01FC           CF                           iret
00582                                           ! 406 endasm
00583                                           !BCC_ENDASM
00584                                           ! 407 typedef struct
00585                                           ! 408 {Bit8u svgamode;
00586                                           !BCC_EOS
00587                                           ! 409  Bit8u class;
00588                                           !BCC_EOS
00589                                           ! 410  Bit8u memmodel;
00590                                           !BCC_EOS
00591                                           ! 411  Bit8u pixbits;
00592                                           !BCC_EOS
00593                                           ! 412  Bit16u sstart;
00594                                           !BCC_EOS
00595                                           ! 413  Bit8u pelmask;
00596                                           !BCC_EOS
00597                                           ! 414  Bit8u dacmodel;
00598                                           !BCC_EOS
00599                                           ! 415 } VGAMODES;
00600                                           !BCC_EOS
00601                                           ! 416 static VGAMODES vga_modes[15 +1]=
00602                                           ! 417 {
00603                                           
00604                       000001FD            _vga_modes:
00605                                           ! 418  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00606 01FD                        00            .byte	0
00607 01FE                        00            .byte	0
00608 01FF                        00            .byte	0
00609 0200                        04            .byte	4
00610 0201                      B800            .word	$B800
00611 0203                        FF            .byte	$FF
00612 0204                        02            .byte	2
00613                                           ! 419  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00614 0205                        01            .byte	1
00615 0206                        00            .byte	0
00616 0207                        00            .byte	0
00617 0208                        04            .byte	4
00618 0209                      B800            .word	$B800
00619 020B                        FF            .byte	$FF
00620 020C                        02            .byte	2
00621                                           ! 420  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00622 020D                        02            .byte	2
00623 020E                        00            .byte	0
00624 020F                        00            .byte	0
00625 0210                        04            .byte	4
00626 0211                      B800            .word	$B800
00627 0213                        FF            .byte	$FF
00628 0214                        02            .byte	2
00629                                           ! 421  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00630 0215                        03            .byte	3
00631 0216                        00            .byte	0
00632 0217                        00            .byte	0
00633 0218                        04            .byte	4
00634 0219                      B800            .word	$B800
00635 021B                        FF            .byte	$FF
00636 021C                        02            .byte	2
00637                                           ! 422  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00638 021D                        04            .byte	4
00639 021E                        01            .byte	1
00640 021F                        02            .byte	2
00641 0220                        02            .byte	2
00642 0221                      B800            .word	$B800
00643 0223                        FF            .byte	$FF
00644 0224                        01            .byte	1
00645                                           ! 423  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00646 0225                        05            .byte	5
00647 0226                        01            .byte	1
00648 0227                        02            .byte	2
00649 0228                        02            .byte	2
00650 0229                      B800            .word	$B800
00651 022B                        FF            .byte	$FF
00652 022C                        01            .byte	1
00653                                           ! 424  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00654 022D                        06            .byte	6
00655 022E                        01            .byte	1
00656 022F                        02            .byte	2
00657 0230                        01            .byte	1
00658 0231                      B800            .word	$B800
00659 0233                        FF            .byte	$FF
00660 0234                        01            .byte	1
00661                                           ! 425  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00662 0235                        07            .byte	7
00663 0236                        00            .byte	0
00664 0237                        01            .byte	1
00665 0238                        04            .byte	4
00666 0239                      B000            .word	$B000
00667 023B                        FF            .byte	$FF
00668 023C                        00            .byte	0
00669                                           ! 426  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00670 023D                        0D            .byte	$D
00671 023E                        01            .byte	1
00672 023F                        04            .byte	4
00673 0240                        04            .byte	4
00674 0241                      A000            .word	$A000
00675 0243                        FF            .byte	$FF
00676 0244                        01            .byte	1
00677                                           ! 427  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00678 0245                        0E            .byte	$E
00679 0246                        01            .byte	1
00680 0247                        04            .byte	4
00681 0248                        04            .byte	4
00682 0249                      A000            .word	$A000
00683 024B                        FF            .byte	$FF
00684 024C                        01            .byte	1
00685                                           ! 428  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00686 024D                        0F            .byte	$F
00687 024E                        01            .byte	1
00688 024F                        03            .byte	3
00689 0250                        01            .byte	1
00690 0251                      A000            .word	$A000
00691 0253                        FF            .byte	$FF
00692 0254                        00            .byte	0
00693                                           ! 429  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00694 0255                        10            .byte	$10
00695 0256                        01            .byte	1
00696 0257                        04            .byte	4
00697 0258                        04            .byte	4
00698 0259                      A000            .word	$A000
00699 025B                        FF            .byte	$FF
00700 025C                        02            .byte	2
00701                                           ! 430  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00702 025D                        11            .byte	$11
00703 025E                        01            .byte	1
00704 025F                        03            .byte	3
00705 0260                        01            .byte	1
00706 0261                      A000            .word	$A000
00707 0263                        FF            .byte	$FF
00708 0264                        02            .byte	2
00709                                           ! 431  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00710 0265                        12            .byte	$12
00711 0266                        01            .byte	1
00712 0267                        04            .byte	4
00713 0268                        04            .byte	4
00714 0269                      A000            .word	$A000
00715 026B                        FF            .byte	$FF
00716 026C                        02            .byte	2
00717                                           ! 432  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00718 026D                        13            .byte	$13
00719 026E                        01            .byte	1
00720 026F                        05            .byte	5
00721 0270                        08            .byte	8
00722 0271                      A000            .word	$A000
00723 0273                        FF            .byte	$FF
00724 0274                        03            .byte	3
00725                                           ! 433  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00726 0275                        6A            .byte	$6A
00727 0276                        01            .byte	1
00728 0277                        04            .byte	4
00729 0278                        04            .byte	4
00730 0279                      A000            .word	$A000
00731 027B                        FF            .byte	$FF
00732 027C                        02            .byte	2
00733                                           ! 434 };
00734                                           !BCC_EOS
00735                                           ! 435 static Bit8u line_to_vpti[15 +1]={
00736                       0000027D            _line_to_vpti:
00737                                           ! 436     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00738 027D                        17            .byte	$17
00739 027E                        17            .byte	$17
00740 027F                        18            .byte	$18
00741 0280                        18            .byte	$18
00742 0281                        04            .byte	4
00743 0282                        05            .byte	5
00744 0283                        06            .byte	6
00745 0284                        07            .byte	7
00746                                           ! 437     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00747 0285                        0D            .byte	$D
00748 0286                        0E            .byte	$E
00749 0287                        11            .byte	$11
00750 0288                        12            .byte	$12
00751 0289                        1A            .byte	$1A
00752 028A                        1B            .byte	$1B
00753 028B                        1C            .byte	$1C
00754 028C                        1D            .byte	$1D
00755                                           ! 438 };
00756                                           !BCC_EOS
00757                                           ! 439 static Bit8u dac_regs[3 +1]=
00758                                           ! 440 {0x3f,0x3f,0x3f,0xff};
00759                       0000028D            _dac_regs:
00760 028D                        3F            .byte	$3F
00761 028E                        3F            .byte	$3F
00762 028F                        3F            .byte	$3F
00763 0290                        FF            .byte	$FF
00764                                           !BCC_EOS
00765                                           ! 441 typedef struct {
00766                                           ! 442     Bit8u twidth;
00767                                           !BCC_EOS
00768                                           ! 443     Bit8u theightm1;
00769                                           !BCC_EOS
00770                                           ! 444     Bit8u cheight;
00771                                           !BCC_EOS
00772                                           ! 445     Bit8u slength_l;
00773                                           !BCC_EOS
00774                                           ! 446     Bit8u slength_h;
00775                                           !BCC_EOS
00776                                           ! 447     Bit8u sequ_regs[4];
00777                                           !BCC_EOS
00778                                           ! 448     Bit8u miscreg;
00779                                           !BCC_EOS
00780                                           ! 449     Bit8u crtc_regs[25];
00781                                           !BCC_EOS
00782                                           ! 450     Bit8
00783                                           ! 450 u actl_regs[20];
00784                                           !BCC_EOS
00785                                           ! 451     Bit8u grdc_regs[9];
00786                                           !BCC_EOS
00787                                           ! 452 } VideoParamTableEntry;
00788                                           !BCC_EOS
00789                                           ! 453 static VideoParamTableEntry video_param_table[30] = {
00790                       00000291            _video_param_table:
00791                                           ! 454 {
00792                                           ! 455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00793 0291                        00            .byte	0
00794 0292                        00            .byte	0
00795 0293                        00            .byte	0
00796 0294                        00            .byte	0
00797 0295                        00            .byte	0
00798 0296                        00            .byte	0
00799 0297                        00            .byte	0
00800 0298                        00            .byte	0
00801                                           ! 456  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00802 0299                        00            .byte	0
00803 029A                        00            .byte	0
00804 029B                        00            .byte	0
00805 029C                        00            .byte	0
00806 029D                        00            .byte	0
00807 029E                        00            .byte	0
00808 029F                        00            .byte	0
00809 02A0                        00            .byte	0
00810                                           ! 457  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00811 02A1                        00            .byte	0
00812 02A2                        00            .byte	0
00813 02A3                        00            .byte	0
00814 02A4                        00            .byte	0
00815 02A5                        00            .byte	0
00816 02A6                        00            .byte	0
00817 02A7                        00            .byte	0
00818 02A8                        00            .byte	0
00819                                           ! 458  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00820 02A9                        00            .byte	0
00821 02AA                        00            .byte	0
00822 02AB                        00            .byte	0
00823 02AC                        00            .byte	0
00824 02AD                        00            .byte	0
00825 02AE                        00            .byte	0
00826 02AF                        00            .byte	0
00827 02B0                        00            .byte	0
00828                                           ! 459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00829 02B1                        00            .byte	0
00830 02B2                        00            .byte	0
00831 02B3                        00            .byte	0
00832 02B4                        00            .byte	0
00833 02B5                        00            .byte	0
00834 02B6                        00            .byte	0
00835 02B7                        00            .byte	0
00836 02B8                        00            .byte	0
00837                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00838 02B9                        00            .byte	0
00839 02BA                        00            .byte	0
00840 02BB                        00            .byte	0
00841 02BC                        00            .byte	0
00842 02BD                        00            .byte	0
00843 02BE                        00            .byte	0
00844 02BF                        00            .byte	0
00845 02C0                        00            .byte	0
00846                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00847 02C1                        00            .byte	0
00848 02C2                        00            .byte	0
00849 02C3                        00            .byte	0
00850 02C4                        00            .byte	0
00851 02C5                        00            .byte	0
00852 02C6                        00            .byte	0
00853 02C7                        00            .byte	0
00854 02C8                        00            .byte	0
00855                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00856 02C9                        00            .byte	0
00857 02CA                        00            .byte	0
00858 02CB                        00            .byte	0
00859 02CC                        00            .byte	0
00860 02CD                        00            .byte	0
00861 02CE                        00            .byte	0
00862 02CF                        00            .byte	0
00863 02D0                        00            .byte	0
00864                                           ! 463 },
00865                                           ! 464 {
00866                                           ! 465  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00867 02D1                        00            .byte	0
00868 02D2                        00            .byte	0
00869 02D3                        00            .byte	0
00870 02D4                        00            .byte	0
00871 02D5                        00            .byte	0
00872 02D6                        00            .byte	0
00873 02D7                        00            .byte	0
00874 02D8                        00            .byte	0
00875                                           ! 466  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00876 02D9                        00            .byte	0
00877 02DA                        00            .byte	0
00878 02DB                        00            .byte	0
00879 02DC                        00            .byte	0
00880 02DD                        00            .byte	0
00881 02DE                        00            .byte	0
00882 02DF                        00            .byte	0
00883 02E0                        00            .byte	0
00884                                           ! 467  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00885 02E1                        00            .byte	0
00886 02E2                        00            .byte	0
00887 02E3                        00            .byte	0
00888 02E4                        00            .byte	0
00889 02E5                        00            .byte	0
00890 02E6                        00            .byte	0
00891 02E7                        00            .byte	0
00892 02E8                        00            .byte	0
00893                                           ! 468  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00894 02E9                        00            .byte	0
00895 02EA                        00            .byte	0
00896 02EB                        00            .byte	0
00897 02EC                        00            .byte	0
00898 02ED                        00            .byte	0
00899 02EE                        00            .byte	0
00900 02EF                        00            .byte	0
00901 02F0                        00            .byte	0
00902                                           ! 469  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00903 02F1                        00            .byte	0
00904 02F2                        00            .byte	0
00905 02F3                        00            .byte	0
00906 02F4                        00            .byte	0
00907 02F5                        00            .byte	0
00908 02F6                        00            .byte	0
00909 02F7                        00            .byte	0
00910 02F8                        00            .byte	0
00911                                           ! 470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00912 02F9                        00            .byte	0
00913 02FA                        00            .byte	0
00914 02FB                        00            .byte	0
00915 02FC                        00            .byte	0
00916 02FD                        00            .byte	0
00917 02FE                        00            .byte	0
00918 02FF                        00            .byte	0
00919 0300                        00            .byte	0
00920                                           ! 471  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00921 0301                        00            .byte	0
00922 0302                        00            .byte	0
00923 0303                        00            .byte	0
00924 0304                        00            .byte	0
00925 0305                        00            .byte	0
00926 0306                        00            .byte	0
00927 0307                        00            .byte	0
00928 0308                        00            .byte	0
00929                                           ! 472  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00930 0309                        00            .byte	0
00931 030A                        00            .byte	0
00932 030B                        00            .byte	0
00933 030C                        00            .byte	0
00934 030D                        00            .byte	0
00935 030E                        00            .byte	0
00936 030F                        00            .byte	0
00937 0310                        00            .byte	0
00938                                           ! 473 },
00939                                           ! 474 {
00940                                           ! 475  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00941 0311                        00            .byte	0
00942 0312                        00            .byte	0
00943 0313                        00            .byte	0
00944 0314                        00            .byte	0
00945 0315                        00            .byte	0
00946 0316                        00            .byte	0
00947 0317                        00            .byte	0
00948 0318                        00            .byte	0
00949                                           ! 476  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00950 0319                        00            .byte	0
00951 031A                        00            .byte	0
00952 031B                        00            .byte	0
00953 031C                        00            .byte	0
00954 031D                        00            .byte	0
00955 031E                        00            .byte	0
00956 031F                        00            .byte	0
00957 0320                        00            .byte	0
00958                                           ! 477  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00959 0321                        00            .byte	0
00960 0322                        00            .byte	0
00961 0323                        00            .byte	0
00962 0324                        00            .byte	0
00963 0325                        00            .byte	0
00964 0326                        00            .byte	0
00965 0327                        00            .byte	0
00966 0328                        00            .byte	0
00967                                           ! 478  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00968 0329                        00            .byte	0
00969 032A                        00            .byte	0
00970 032B                        00            .byte	0
00971 032C                        00            .byte	0
00972 032D                        00            .byte	0
00973 032E                        00            .byte	0
00974 032F                        00            .byte	0
00975 0330                        00            .byte	0
00976                                           ! 479  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00977 0331                        00            .byte	0
00978 0332                        00            .byte	0
00979 0333                        00            .byte	0
00980 0334                        00            .byte	0
00981 0335                        00            .byte	0
00982 0336                        00            .byte	0
00983 0337                        00            .byte	0
00984 0338                        00            .byte	0
00985                                           ! 480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00986 0339                        00            .byte	0
00987 033A                        00            .byte	0
00988 033B                        00            .byte	0
00989 033C                        00            .byte	0
00990 033D                        00            .byte	0
00991 033E                        00            .byte	0
00992 033F                        00            .byte	0
00993 0340                        00            .byte	0
00994                                           ! 481  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00995 0341                        00            .byte	0
00996 0342                        00            .byte	0
00997 0343                        00            .byte	0
00998 0344                        00            .byte	0
00999 0345                        00            .byte	0
01000 0346                        00            .byte	0
01001 0347                        00            .byte	0
01002 0348                        00            .byte	0
01003                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01004 0349                        00            .byte	0
01005 034A                        00            .byte	0
01006 034B                        00            .byte	0
01007 034C                        00            .byte	0
01008 034D                        00            .byte	0
01009 034E                        00            .byte	0
01010 034F                        00            .byte	0
01011 0350                        00            .byte	0
01012                                           ! 483 },
01013                                           ! 484 {
01014                                           ! 485  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01015 0351                        00            .byte	0
01016 0352                        00            .byte	0
01017 0353                        00            .byte	0
01018 0354                        00            .byte	0
01019 0355                        00            .byte	0
01020 0356                        00            .byte	0
01021 0357                        00            .byte	0
01022 0358                        00            .byte	0
01023                                           ! 486  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01024 0359                        00            .byte	0
01025 035A                        00            .byte	0
01026 035B                        00            .byte	0
01027 035C                        00            .byte	0
01028 035D                        00            .byte	0
01029 035E                        00            .byte	0
01030 035F                        00            .byte	0
01031 0360                        00            .byte	0
01032                                           ! 487  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01033 0361                        00            .byte	0
01034 0362                        00            .byte	0
01035 0363                        00            .byte	0
01036 0364                        00            .byte	0
01037 0365                        00            .byte	0
01038 0366                        00            .byte	0
01039 0367                        00            .byte	0
01040 0368                        00            .byte	0
01041                                           ! 488  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01042 0369                        00            .byte	0
01043 036A                        00            .byte	0
01044 036B                        00            .byte	0
01045 036C                        00            .byte	0
01046 036D                        00            .byte	0
01047 036E                        00            .byte	0
01048 036F                        00            .byte	0
01049 0370                        00            .byte	0
01050                                           ! 489  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01051 0371                        00            .byte	0
01052 0372                        00            .byte	0
01053 0373                        00            .byte	0
01054 0374                        00            .byte	0
01055 0375                        00            .byte	0
01056 0376                        00            .byte	0
01057 0377                        00            .byte	0
01058 0378                        00            .byte	0
01059                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01060 0379                        00            .byte	0
01061 037A                        00            .byte	0
01062 037B                        00            .byte	0
01063 037C                        00            .byte	0
01064 037D                        00            .byte	0
01065 037E                        00            .byte	0
01066 037F                        00            .byte	0
01067 0380                        00            .byte	0
01068                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01069 0381                        00            .byte	0
01070 0382                        00            .byte	0
01071 0383                        00            .byte	0
01072 0384                        00            .byte	0
01073 0385                        00            .byte	0
01074 0386                        00            .byte	0
01075 0387                        00            .byte	0
01076 0388                        00            .byte	0
01077                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01078 0389                        00            .byte	0
01079 038A                        00            .byte	0
01080 038B                        00            .byte	0
01081 038C                        00            .byte	0
01082 038D                        00            .byte	0
01083 038E                        00            .byte	0
01084 038F                        00            .byte	0
01085 0390                        00            .byte	0
01086                                           ! 493 },
01087                                           ! 494 {
01088                                           ! 495  40, 24, 8, 0x00, 0x08,
01089 0391                        28            .byte	$28
01090 0392                        18            .byte	$18
01091 0393                        08            .byte	8
01092 0394                        00            .byte	0
01093 0395                        08            .byte	8
01094                                           ! 496  0x09, 0x03, 0x00, 0x02,
01095 0396                        09            .byte	9
01096 0397                        03            .byte	3
01097 0398                        00            .byte	0
01098 0399                        02            .byte	2
01099                                           ! 497  0x63,
01100 039A                        63            .byte	$63
01101                                           ! 498  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01102 039B                        2D            .byte	$2D
01103 039C                        27            .byte	$27
01104 039D                        28            .byte	$28
01105 039E                        90            .byte	$90
01106 039F                        2B            .byte	$2B
01107 03A0                        80            .byte	$80
01108 03A1                        BF            .byte	$BF
01109 03A2                        1F            .byte	$1F
01110                                           ! 499  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01111 03A3                        00            .byte	0
01112 03A4                        C1            .byte	$C1
01113 03A5                        00            .byte	0
01114 03A6                        00            .byte	0
01115 03A7                        00            .byte	0
01116 03A8                        00            .byte	0
01117 03A9                        00            .byte	0
01118 03AA                        00            .byte	0
01119                                           ! 500  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01120 03AB                        9C            .byte	$9C
01121 03AC                        8E            .byte	$8E
01122 03AD                        8F            .byte	$8F
01123 03AE                        14            .byte	$14
01124 03AF                        00            .byte	0
01125 03B0                        96            .byte	$96
01126 03B1                        B9            .byte	$B9
01127 03B2                        A2            .byte	$A2
01128                                           ! 501  0xff,
01129 03B3                        FF            .byte	$FF
01130                                           ! 502  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01131 03B4                        00            .byte	0
01132 03B5                        13            .byte	$13
01133 03B6                        15            .byte	$15
01134 03B7                        17            .byte	$17
01135 03B8                        02            .byte	2
01136 03B9                        04            .byte	4
01137 03BA                        06            .byte	6
01138 03BB                        07            .byte	7
01139                                           ! 503  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01140 03BC                        10            .byte	$10
01141 03BD                        11            .byte	$11
01142 03BE                        12            .byte	$12
01143 03BF                        13            .byte	$13
01144 03C0                        14            .byte	$14
01145 03C1                        15            .byte	$15
01146 03C2                        16            .byte	$16
01147 03C3                        17            .byte	$17
01148                                           ! 504  0x01, 0x00, 0x03, 0x00,
01149 03C4                        01            .byte	1
01150 03C5                        00            .byte	0
01151 03C6                        03            .byte	3
01152 03C7                        00            .byte	0
01153                                           ! 505  0x00,
01154                                           ! 505  0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01155 03C8                        00            .byte	0
01156 03C9                        00            .byte	0
01157 03CA                        00            .byte	0
01158 03CB                        00            .byte	0
01159 03CC                        00            .byte	0
01160 03CD                        30            .byte	$30
01161 03CE                        0F            .byte	$F
01162 03CF                        0F            .byte	$F
01163 03D0                        FF            .byte	$FF
01164                                           ! 506 },
01165                                           ! 507 {
01166                                           ! 508  40, 24, 8, 0x00, 0x08,
01167 03D1                        28            .byte	$28
01168 03D2                        18            .byte	$18
01169 03D3                        08            .byte	8
01170 03D4                        00            .byte	0
01171 03D5                        08            .byte	8
01172                                           ! 509  0x09, 0x03, 0x00, 0x02,
01173 03D6                        09            .byte	9
01174 03D7                        03            .byte	3
01175 03D8                        00            .byte	0
01176 03D9                        02            .byte	2
01177                                           ! 510  0x63,
01178 03DA                        63            .byte	$63
01179                                           ! 511  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01180 03DB                        2D            .byte	$2D
01181 03DC                        27            .byte	$27
01182 03DD                        28            .byte	$28
01183 03DE                        90            .byte	$90
01184 03DF                        2B            .byte	$2B
01185 03E0                        80            .byte	$80
01186 03E1                        BF            .byte	$BF
01187 03E2                        1F            .byte	$1F
01188                                           ! 512  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01189 03E3                        00            .byte	0
01190 03E4                        C1            .byte	$C1
01191 03E5                        00            .byte	0
01192 03E6                        00            .byte	0
01193 03E7                        00            .byte	0
01194 03E8                        00            .byte	0
01195 03E9                        00            .byte	0
01196 03EA                        00            .byte	0
01197                                           ! 513  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01198 03EB                        9C            .byte	$9C
01199 03EC                        8E            .byte	$8E
01200 03ED                        8F            .byte	$8F
01201 03EE                        14            .byte	$14
01202 03EF                        00            .byte	0
01203 03F0                        96            .byte	$96
01204 03F1                        B9            .byte	$B9
01205 03F2                        A2            .byte	$A2
01206                                           ! 514  0xff,
01207 03F3                        FF            .byte	$FF
01208                                           ! 515  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01209 03F4                        00            .byte	0
01210 03F5                        13            .byte	$13
01211 03F6                        15            .byte	$15
01212 03F7                        17            .byte	$17
01213 03F8                        02            .byte	2
01214 03F9                        04            .byte	4
01215 03FA                        06            .byte	6
01216 03FB                        07            .byte	7
01217                                           ! 516  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01218 03FC                        10            .byte	$10
01219 03FD                        11            .byte	$11
01220 03FE                        12            .byte	$12
01221 03FF                        13            .byte	$13
01222 0400                        14            .byte	$14
01223 0401                        15            .byte	$15
01224 0402                        16            .byte	$16
01225 0403                        17            .byte	$17
01226                                           ! 517  0x01, 0x00, 0x03, 0x00,
01227 0404                        01            .byte	1
01228 0405                        00            .byte	0
01229 0406                        03            .byte	3
01230 0407                        00            .byte	0
01231                                           ! 518  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01232 0408                        00            .byte	0
01233 0409                        00            .byte	0
01234 040A                        00            .byte	0
01235 040B                        00            .byte	0
01236 040C                        00            .byte	0
01237 040D                        30            .byte	$30
01238 040E                        0F            .byte	$F
01239 040F                        0F            .byte	$F
01240 0410                        FF            .byte	$FF
01241                                           ! 519 },
01242                                           ! 520 {
01243                                           ! 521  80, 24, 8, 0x00, 0x10,
01244 0411                        50            .byte	$50
01245 0412                        18            .byte	$18
01246 0413                        08            .byte	8
01247 0414                        00            .byte	0
01248 0415                        10            .byte	$10
01249                                           ! 522  0x01, 0x01, 0x00, 0x06,
01250 0416                        01            .byte	1
01251 0417                        01            .byte	1
01252 0418                        00            .byte	0
01253 0419                        06            .byte	6
01254                                           ! 523  0x63,
01255 041A                        63            .byte	$63
01256                                           ! 524  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01257 041B                        5F            .byte	$5F
01258 041C                        4F            .byte	$4F
01259 041D                        50            .byte	$50
01260 041E                        82            .byte	$82
01261 041F                        54            .byte	$54
01262 0420                        80            .byte	$80
01263 0421                        BF            .byte	$BF
01264 0422                        1F            .byte	$1F
01265                                           ! 525  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01266 0423                        00            .byte	0
01267 0424                        C1            .byte	$C1
01268 0425                        00            .byte	0
01269 0426                        00            .byte	0
01270 0427                        00            .byte	0
01271 0428                        00            .byte	0
01272 0429                        00            .byte	0
01273 042A                        00            .byte	0
01274                                           ! 526  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01275 042B                        9C            .byte	$9C
01276 042C                        8E            .byte	$8E
01277 042D                        8F            .byte	$8F
01278 042E                        28            .byte	$28
01279 042F                        00            .byte	0
01280 0430                        96            .byte	$96
01281 0431                        B9            .byte	$B9
01282 0432                        C2            .byte	$C2
01283                                           ! 527  0xff,
01284 0433                        FF            .byte	$FF
01285                                           ! 528  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01286 0434                        00            .byte	0
01287 0435                        17            .byte	$17
01288 0436                        17            .byte	$17
01289 0437                        17            .byte	$17
01290 0438                        17            .byte	$17
01291 0439                        17            .byte	$17
01292 043A                        17            .byte	$17
01293 043B                        17            .byte	$17
01294                                           ! 529  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01295 043C                        17            .byte	$17
01296 043D                        17            .byte	$17
01297 043E                        17            .byte	$17
01298 043F                        17            .byte	$17
01299 0440                        17            .byte	$17
01300 0441                        17            .byte	$17
01301 0442                        17            .byte	$17
01302 0443                        17            .byte	$17
01303                                           ! 530  0x01, 0x00, 0x01, 0x00,
01304 0444                        01            .byte	1
01305 0445                        00            .byte	0
01306 0446                        01            .byte	1
01307 0447                        00            .byte	0
01308                                           ! 531  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01309 0448                        00            .byte	0
01310 0449                        00            .byte	0
01311 044A                        00            .byte	0
01312 044B                        00            .byte	0
01313 044C                        00            .byte	0
01314 044D                        00            .byte	0
01315 044E                        0D            .byte	$D
01316 044F                        0F            .byte	$F
01317 0450                        FF            .byte	$FF
01318                                           ! 532 },
01319                                           ! 533 {
01320                                           ! 534  80, 24, 16, 0x00, 0x10,
01321 0451                        50            .byte	$50
01322 0452                        18            .byte	$18
01323 0453                        10            .byte	$10
01324 0454                        00            .byte	0
01325 0455                        10            .byte	$10
01326                                           ! 535  0x00, 0x03, 0x00, 0x02,
01327 0456                        00            .byte	0
01328 0457                        03            .byte	3
01329 0458                        00            .byte	0
01330 0459                        02            .byte	2
01331                                           ! 536  0x66,
01332 045A                        66            .byte	$66
01333                                           ! 537  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01334 045B                        5F            .byte	$5F
01335 045C                        4F            .byte	$4F
01336 045D                        50            .byte	$50
01337 045E                        82            .byte	$82
01338 045F                        55            .byte	$55
01339 0460                        81            .byte	$81
01340 0461                        BF            .byte	$BF
01341 0462                        1F            .byte	$1F
01342                                           ! 538  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01343 0463                        00            .byte	0
01344 0464                        4F            .byte	$4F
01345 0465                        0D            .byte	$D
01346 0466                        0E            .byte	$E
01347 0467                        00            .byte	0
01348 0468                        00            .byte	0
01349 0469                        00            .byte	0
01350 046A                        00            .byte	0
01351                                           ! 539  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01352 046B                        9C            .byte	$9C
01353 046C                        8E            .byte	$8E
01354 046D                        8F            .byte	$8F
01355 046E                        28            .byte	$28
01356 046F                        0F            .byte	$F
01357 0470                        96            .byte	$96
01358 0471                        B9            .byte	$B9
01359 0472                        A3            .byte	$A3
01360                                           ! 540  0xff,
01361 0473                        FF            .byte	$FF
01362                                           ! 541  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01363 0474                        00            .byte	0
01364 0475                        08            .byte	8
01365 0476                        08            .byte	8
01366 0477                        08            .byte	8
01367 0478                        08            .byte	8
01368 0479                        08            .byte	8
01369 047A                        08            .byte	8
01370 047B                        08            .byte	8
01371                                           ! 542  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01372 047C                        10            .byte	$10
01373 047D                        18            .byte	$18
01374 047E                        18            .byte	$18
01375 047F                        18            .byte	$18
01376 0480                        18            .byte	$18
01377 0481                        18            .byte	$18
01378 0482                        18            .byte	$18
01379 0483                        18            .byte	$18
01380                                           ! 543  0x0e, 0x00, 0x0f, 0x08,
01381 0484                        0E            .byte	$E
01382 0485                        00            .byte	0
01383 0486                        0F            .byte	$F
01384 0487                        08            .byte	8
01385                                           ! 544  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01386 0488                        00            .byte	0
01387 0489                        00            .byte	0
01388 048A                        00            .byte	0
01389 048B                        00            .byte	0
01390 048C                        00            .byte	0
01391 048D                        10            .byte	$10
01392 048E                        0A            .byte	$A
01393 048F                        0F            .byte	$F
01394 0490                        FF            .byte	$FF
01395                                           ! 545 },
01396                                           ! 546 {
01397                                           ! 547  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01398 0491                        00            .byte	0
01399 0492                        00            .byte	0
01400 0493                        00            .byte	0
01401 0494                        00            .byte	0
01402 0495                        00            .byte	0
01403 0496                        00            .byte	0
01404 0497                        00            .byte	0
01405 0498                        00            .byte	0
01406                                           ! 548  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01407 0499                        00            .byte	0
01408 049A                        00            .byte	0
01409 049B                        00            .byte	0
01410 049C                        00            .byte	0
01411 049D                        00            .byte	0
01412 049E                        00            .byte	0
01413 049F                        00            .byte	0
01414 04A0                        00            .byte	0
01415                                           ! 549  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01416 04A1                        00            .byte	0
01417 04A2                        00            .byte	0
01418 04A3                        00            .byte	0
01419 04A4                        00            .byte	0
01420 04A5                        00            .byte	0
01421 04A6                        00            .byte	0
01422 04A7                        00            .byte	0
01423 04A8                        00            .byte	0
01424                                           ! 550  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01425 04A9                        00            .byte	0
01426 04AA                        00            .byte	0
01427 04AB                        00            .byte	0
01428 04AC                        00            .byte	0
01429 04AD                        00            .byte	0
01430 04AE                        00            .byte	0
01431 04AF                        00            .byte	0
01432 04B0                        00            .byte	0
01433                                           ! 551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01434 04B1                        00            .byte	0
01435 04B2                        00            .byte	0
01436 04B3                        00            .byte	0
01437 04B4                        00            .byte	0
01438 04B5                        00            .byte	0
01439 04B6                        00            .byte	0
01440 04B7                        00            .byte	0
01441 04B8                        00            .byte	0
01442                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01443 04B9                        00            .byte	0
01444 04BA                        00            .byte	0
01445 04BB                        00            .byte	0
01446 04BC                        00            .byte	0
01447 04BD                        00            .byte	0
01448 04BE                        00            .byte	0
01449 04BF                        00            .byte	0
01450 04C0                        00            .byte	0
01451                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01452 04C1                        00            .byte	0
01453 04C2                        00            .byte	0
01454 04C3                        00            .byte	0
01455 04C4                        00            .byte	0
01456 04C5                        00            .byte	0
01457 04C6                        00            .byte	0
01458 04C7                        00            .byte	0
01459 04C8                        00            .byte	0
01460                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01461 04C9                        00            .byte	0
01462 04CA                        00            .byte	0
01463 04CB                        00            .byte	0
01464 04CC                        00            .byte	0
01465 04CD                        00            .byte	0
01466 04CE                        00            .byte	0
01467 04CF                        00            .byte	0
01468 04D0                        00            .byte	0
01469                                           ! 555 },
01470                                           ! 556 {
01471                                           ! 557  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01472 04D1                        00            .byte	0
01473 04D2                        00            .byte	0
01474 04D3                        00            .byte	0
01475 04D4                        00            .byte	0
01476 04D5                        00            .byte	0
01477 04D6                        00            .byte	0
01478 04D7                        00            .byte	0
01479 04D8                        00            .byte	0
01480                                           ! 558  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01481 04D9                        00            .byte	0
01482 04DA                        00            .byte	0
01483 04DB                        00            .byte	0
01484 04DC                        00            .byte	0
01485 04DD                        00            .byte	0
01486 04DE                        00            .byte	0
01487 04DF                        00            .byte	0
01488 04E0                        00            .byte	0
01489                                           ! 559  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01490 04E1                        00            .byte	0
01491 04E2                        00            .byte	0
01492 04E3                        00            .byte	0
01493 04E4                        00            .byte	0
01494 04E5                        00            .byte	0
01495 04E6                        00            .byte	0
01496 04E7                        00            .byte	0
01497 04E8                        00            .byte	0
01498                                           ! 560  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01499 04E9                        00            .byte	0
01500 04EA                        00            .byte	0
01501 04EB                        00            .byte	0
01502 04EC                        00            .byte	0
01503 04ED                        00            .byte	0
01504 04EE                        00            .byte	0
01505 04EF                        00            .byte	0
01506 04F0                        00            .byte	0
01507                                           ! 561  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01508 04F1                        00            .byte	0
01509 04F2                        00            .byte	0
01510 04F3                        00            .byte	0
01511 04F4                        00            .byte	0
01512 04F5                        00            .byte	0
01513 04F6                        00            .byte	0
01514 04F7                        00            .byte	0
01515 04F8                        00            .byte	0
01516                                           ! 562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01517 04F9                        00            .byte	0
01518 04FA                        00            .byte	0
01519 04FB                        00            .byte	0
01520 04FC                        00            .byte	0
01521 04FD                        00            .byte	0
01522 04FE                        00            .byte	0
01523 04FF                        00            .byte	0
01524 0500                        00            .byte	0
01525                                           ! 563  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01526 0501                        00            .byte	0
01527 0502                        00            .byte	0
01528 0503                        00            .byte	0
01529 0504                        00            .byte	0
01530 0505                        00            .byte	0
01531 0506                        00            .byte	0
01532 0507                        00            .byte	0
01533 0508                        00            .byte	0
01534                                           ! 564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01535 0509                        00            .byte	0
01536 050A                        00            .byte	0
01537 050B                        00            .byte	0
01538 050C                        00            .byte	0
01539 050D                        00            .byte	0
01540 050E                        00            .byte	0
01541 050F                        00            .byte	0
01542 0510                        00            .byte	0
01543                                           ! 565 },
01544                                           ! 566 {
01545                                           ! 567  0x00, 0x00, 0x00, 0
01546 0511                        00            .byte	0
01547 0512                        00            .byte	0
01548 0513                        00            .byte	0
01549                                           ! 567 x00, 0x00, 0x00, 0x00, 0x00,
01550 0514                        00            .byte	0
01551 0515                        00            .byte	0
01552 0516                        00            .byte	0
01553 0517                        00            .byte	0
01554 0518                        00            .byte	0
01555                                           ! 568  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01556 0519                        00            .byte	0
01557 051A                        00            .byte	0
01558 051B                        00            .byte	0
01559 051C                        00            .byte	0
01560 051D                        00            .byte	0
01561 051E                        00            .byte	0
01562 051F                        00            .byte	0
01563 0520                        00            .byte	0
01564                                           ! 569  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01565 0521                        00            .byte	0
01566 0522                        00            .byte	0
01567 0523                        00            .byte	0
01568 0524                        00            .byte	0
01569 0525                        00            .byte	0
01570 0526                        00            .byte	0
01571 0527                        00            .byte	0
01572 0528                        00            .byte	0
01573                                           ! 570  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01574 0529                        00            .byte	0
01575 052A                        00            .byte	0
01576 052B                        00            .byte	0
01577 052C                        00            .byte	0
01578 052D                        00            .byte	0
01579 052E                        00            .byte	0
01580 052F                        00            .byte	0
01581 0530                        00            .byte	0
01582                                           ! 571  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01583 0531                        00            .byte	0
01584 0532                        00            .byte	0
01585 0533                        00            .byte	0
01586 0534                        00            .byte	0
01587 0535                        00            .byte	0
01588 0536                        00            .byte	0
01589 0537                        00            .byte	0
01590 0538                        00            .byte	0
01591                                           ! 572  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01592 0539                        00            .byte	0
01593 053A                        00            .byte	0
01594 053B                        00            .byte	0
01595 053C                        00            .byte	0
01596 053D                        00            .byte	0
01597 053E                        00            .byte	0
01598 053F                        00            .byte	0
01599 0540                        00            .byte	0
01600                                           ! 573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01601 0541                        00            .byte	0
01602 0542                        00            .byte	0
01603 0543                        00            .byte	0
01604 0544                        00            .byte	0
01605 0545                        00            .byte	0
01606 0546                        00            .byte	0
01607 0547                        00            .byte	0
01608 0548                        00            .byte	0
01609                                           ! 574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01610 0549                        00            .byte	0
01611 054A                        00            .byte	0
01612 054B                        00            .byte	0
01613 054C                        00            .byte	0
01614 054D                        00            .byte	0
01615 054E                        00            .byte	0
01616 054F                        00            .byte	0
01617 0550                        00            .byte	0
01618                                           ! 575 },
01619                                           ! 576 {
01620                                           ! 577  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01621 0551                        00            .byte	0
01622 0552                        00            .byte	0
01623 0553                        00            .byte	0
01624 0554                        00            .byte	0
01625 0555                        00            .byte	0
01626 0556                        00            .byte	0
01627 0557                        00            .byte	0
01628 0558                        00            .byte	0
01629                                           ! 578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01630 0559                        00            .byte	0
01631 055A                        00            .byte	0
01632 055B                        00            .byte	0
01633 055C                        00            .byte	0
01634 055D                        00            .byte	0
01635 055E                        00            .byte	0
01636 055F                        00            .byte	0
01637 0560                        00            .byte	0
01638                                           ! 579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01639 0561                        00            .byte	0
01640 0562                        00            .byte	0
01641 0563                        00            .byte	0
01642 0564                        00            .byte	0
01643 0565                        00            .byte	0
01644 0566                        00            .byte	0
01645 0567                        00            .byte	0
01646 0568                        00            .byte	0
01647                                           ! 580  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01648 0569                        00            .byte	0
01649 056A                        00            .byte	0
01650 056B                        00            .byte	0
01651 056C                        00            .byte	0
01652 056D                        00            .byte	0
01653 056E                        00            .byte	0
01654 056F                        00            .byte	0
01655 0570                        00            .byte	0
01656                                           ! 581  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01657 0571                        00            .byte	0
01658 0572                        00            .byte	0
01659 0573                        00            .byte	0
01660 0574                        00            .byte	0
01661 0575                        00            .byte	0
01662 0576                        00            .byte	0
01663 0577                        00            .byte	0
01664 0578                        00            .byte	0
01665                                           ! 582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01666 0579                        00            .byte	0
01667 057A                        00            .byte	0
01668 057B                        00            .byte	0
01669 057C                        00            .byte	0
01670 057D                        00            .byte	0
01671 057E                        00            .byte	0
01672 057F                        00            .byte	0
01673 0580                        00            .byte	0
01674                                           ! 583  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01675 0581                        00            .byte	0
01676 0582                        00            .byte	0
01677 0583                        00            .byte	0
01678 0584                        00            .byte	0
01679 0585                        00            .byte	0
01680 0586                        00            .byte	0
01681 0587                        00            .byte	0
01682 0588                        00            .byte	0
01683                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01684 0589                        00            .byte	0
01685 058A                        00            .byte	0
01686 058B                        00            .byte	0
01687 058C                        00            .byte	0
01688 058D                        00            .byte	0
01689 058E                        00            .byte	0
01690 058F                        00            .byte	0
01691 0590                        00            .byte	0
01692                                           ! 585 },
01693                                           ! 586 {
01694                                           ! 587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01695 0591                        00            .byte	0
01696 0592                        00            .byte	0
01697 0593                        00            .byte	0
01698 0594                        00            .byte	0
01699 0595                        00            .byte	0
01700 0596                        00            .byte	0
01701 0597                        00            .byte	0
01702 0598                        00            .byte	0
01703                                           ! 588  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01704 0599                        00            .byte	0
01705 059A                        00            .byte	0
01706 059B                        00            .byte	0
01707 059C                        00            .byte	0
01708 059D                        00            .byte	0
01709 059E                        00            .byte	0
01710 059F                        00            .byte	0
01711 05A0                        00            .byte	0
01712                                           ! 589  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01713 05A1                        00            .byte	0
01714 05A2                        00            .byte	0
01715 05A3                        00            .byte	0
01716 05A4                        00            .byte	0
01717 05A5                        00            .byte	0
01718 05A6                        00            .byte	0
01719 05A7                        00            .byte	0
01720 05A8                        00            .byte	0
01721                                           ! 590  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01722 05A9                        00            .byte	0
01723 05AA                        00            .byte	0
01724 05AB                        00            .byte	0
01725 05AC                        00            .byte	0
01726 05AD                        00            .byte	0
01727 05AE                        00            .byte	0
01728 05AF                        00            .byte	0
01729 05B0                        00            .byte	0
01730                                           ! 591  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01731 05B1                        00            .byte	0
01732 05B2                        00            .byte	0
01733 05B3                        00            .byte	0
01734 05B4                        00            .byte	0
01735 05B5                        00            .byte	0
01736 05B6                        00            .byte	0
01737 05B7                        00            .byte	0
01738 05B8                        00            .byte	0
01739                                           ! 592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01740 05B9                        00            .byte	0
01741 05BA                        00            .byte	0
01742 05BB                        00            .byte	0
01743 05BC                        00            .byte	0
01744 05BD                        00            .byte	0
01745 05BE                        00            .byte	0
01746 05BF                        00            .byte	0
01747 05C0                        00            .byte	0
01748                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01749 05C1                        00            .byte	0
01750 05C2                        00            .byte	0
01751 05C3                        00            .byte	0
01752 05C4                        00            .byte	0
01753 05C5                        00            .byte	0
01754 05C6                        00            .byte	0
01755 05C7                        00            .byte	0
01756 05C8                        00            .byte	0
01757                                           ! 594  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01758 05C9                        00            .byte	0
01759 05CA                        00            .byte	0
01760 05CB                        00            .byte	0
01761 05CC                        00            .byte	0
01762 05CD                        00            .byte	0
01763 05CE                        00            .byte	0
01764 05CF                        00            .byte	0
01765 05D0                        00            .byte	0
01766                                           ! 595 },
01767                                           ! 596 {
01768                                           ! 597  40, 24, 8, 0x00, 0x20,
01769 05D1                        28            .byte	$28
01770 05D2                        18            .byte	$18
01771 05D3                        08            .byte	8
01772 05D4                        00            .byte	0
01773 05D5                        20            .byte	$20
01774                                           ! 598  0x09, 0x0f, 0x00, 0x06,
01775 05D6                        09            .byte	9
01776 05D7                        0F            .byte	$F
01777 05D8                        00            .byte	0
01778 05D9                        06            .byte	6
01779                                           ! 599  0x63,
01780 05DA                        63            .byte	$63
01781                                           ! 600  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01782 05DB                        2D            .byte	$2D
01783 05DC                        27            .byte	$27
01784 05DD                        28            .byte	$28
01785 05DE                        90            .byte	$90
01786 05DF                        2B            .byte	$2B
01787 05E0                        80            .byte	$80
01788 05E1                        BF            .byte	$BF
01789 05E2                        1F            .byte	$1F
01790                                           ! 601  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01791 05E3                        00            .byte	0
01792 05E4                        C0            .byte	$C0
01793 05E5                        00            .byte	0
01794 05E6                        00            .byte	0
01795 05E7                        00            .byte	0
01796 05E8                        00            .byte	0
01797 05E9                        00            .byte	0
01798 05EA                        00            .byte	0
01799                                           ! 602  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01800 05EB                        9C            .byte	$9C
01801 05EC                        8E            .byte	$8E
01802 05ED                        8F            .byte	$8F
01803 05EE                        14            .byte	$14
01804 05EF                        00            .byte	0
01805 05F0                        96            .byte	$96
01806 05F1                        B9            .byte	$B9
01807 05F2                        E3            .byte	$E3
01808                                           ! 603  0xff,
01809 05F3                        FF            .byte	$FF
01810                                           ! 604  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01811 05F4                        00            .byte	0
01812 05F5                        01            .byte	1
01813 05F6                        02            .byte	2
01814 05F7                        03            .byte	3
01815 05F8                        04            .byte	4
01816 05F9                        05            .byte	5
01817 05FA                        06            .byte	6
01818 05FB                        07            .byte	7
01819                                           ! 605  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01820 05FC                        10            .byte	$10
01821 05FD                        11            .byte	$11
01822 05FE                        12            .byte	$12
01823 05FF                        13            .byte	$13
01824 0600                        14            .byte	$14
01825 0601                        15            .byte	$15
01826 0602                        16            .byte	$16
01827 0603                        17            .byte	$17
01828                                           ! 606  0x01, 0x00, 0x0f, 0x00,
01829 0604                        01            .byte	1
01830 0605                        00            .byte	0
01831 0606                        0F            .byte	$F
01832 0607                        00            .byte	0
01833                                           ! 607  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01834 0608                        00            .byte	0
01835 0609                        00            .byte	0
01836 060A                        00            .byte	0
01837 060B                        00            .byte	0
01838 060C                        00            .byte	0
01839 060D                        00            .byte	0
01840 060E                        05            .byte	5
01841 060F                        0F            .byte	$F
01842 0610                        FF            .byte	$FF
01843                                           ! 608 },
01844                                           ! 609 {
01845                                           ! 610  80, 24, 8, 0x00, 0x40,
01846 0611                        50            .byte	$50
01847 0612                        18            .byte	$18
01848 0613                        08            .byte	8
01849 0614                        00            .byte	0
01850 0615                        40            .byte	$40
01851                                           ! 611  0x01, 0x0f, 0x00, 0x06,
01852 0616                        01            .byte	1
01853 0617                        0F            .byte	$F
01854 0618                        00            .byte	0
01855 0619                        06            .byte	6
01856                                           ! 612  0x63,
01857 061A                        63            .byte	$63
01858                                           ! 613  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01859 061B                        5F            .byte	$5F
01860 061C                        4F            .byte	$4F
01861 061D                        50            .byte	$50
01862 061E                        82            .byte	$82
01863 061F                        54            .byte	$54
01864 0620                        80            .byte	$80
01865 0621                        BF            .byte	$BF
01866 0622                        1F            .byte	$1F
01867                                           ! 614  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01868 0623                        00            .byte	0
01869 0624                        C0            .byte	$C0
01870 0625                        00            .byte	0
01871 0626                        00            .byte	0
01872 0627                        00            .byte	0
01873 0628                        00            .byte	0
01874 0629                        00            .byte	0
01875 062A                        00            .byte	0
01876                                           ! 615  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01877 062B                        9C            .byte	$9C
01878 062C                        8E            .byte	$8E
01879 062D                        8F            .byte	$8F
01880 062E                        28            .byte	$28
01881 062F                        00            .byte	0
01882 0630                        96            .byte	$96
01883 0631                        B9            .byte	$B9
01884 0632                        E3            .byte	$E3
01885                                           ! 616  0xff,
01886 0633                        FF            .byte	$FF
01887                                           ! 617  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01888 0634                        00            .byte	0
01889 0635                        01            .byte	1
01890 0636                        02            .byte	2
01891 0637                        03            .byte	3
01892 0638                        04            .byte	4
01893 0639                        05            .byte	5
01894 063A                        06            .byte	6
01895 063B                        07            .byte	7
01896                                           ! 618  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01897 063C                        10            .byte	$10
01898 063D                        11            .byte	$11
01899 063E                        12            .byte	$12
01900 063F                        13            .byte	$13
01901 0640                        14            .byte	$14
01902 0641                        15            .byte	$15
01903 0642                        16            .byte	$16
01904 0643                        17            .byte	$17
01905                                           ! 619  0x01, 0x00, 0x0f, 0x00,
01906 0644                        01            .byte	1
01907 0645                        00            .byte	0
01908 0646                        0F            .byte	$F
01909 0647                        00            .byte	0
01910                                           ! 620  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01911 0648                        00            .byte	0
01912 0649                        00            .byte	0
01913 064A                        00            .byte	0
01914 064B                        00            .byte	0
01915 064C                        00            .byte	0
01916 064D                        00            .byte	0
01917 064E                        05            .byte	5
01918 064F                        0F            .byte	$F
01919 0650                        FF            .byte	$FF
01920                                           ! 621 },
01921                                           ! 622 {
01922                                           ! 623  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01923 0651                        00            .byte	0
01924 0652                        00            .byte	0
01925 0653                        00            .byte	0
01926 0654                        00            .byte	0
01927 0655                        00            .byte	0
01928 0656                        00            .byte	0
01929 0657                        00            .byte	0
01930 0658                        00            .byte	0
01931                                           ! 624  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01932 0659                        00            .byte	0
01933 065A                        00            .byte	0
01934 065B                        00            .byte	0
01935 065C                        00            .byte	0
01936 065D                        00            .byte	0
01937 065E                        00            .byte	0
01938                                           ! 624  0x00,
01939 065F                        00            .byte	0
01940 0660                        00            .byte	0
01941                                           ! 625  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01942 0661                        00            .byte	0
01943 0662                        00            .byte	0
01944 0663                        00            .byte	0
01945 0664                        00            .byte	0
01946 0665                        00            .byte	0
01947 0666                        00            .byte	0
01948 0667                        00            .byte	0
01949 0668                        00            .byte	0
01950                                           ! 626  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01951 0669                        00            .byte	0
01952 066A                        00            .byte	0
01953 066B                        00            .byte	0
01954 066C                        00            .byte	0
01955 066D                        00            .byte	0
01956 066E                        00            .byte	0
01957 066F                        00            .byte	0
01958 0670                        00            .byte	0
01959                                           ! 627  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01960 0671                        00            .byte	0
01961 0672                        00            .byte	0
01962 0673                        00            .byte	0
01963 0674                        00            .byte	0
01964 0675                        00            .byte	0
01965 0676                        00            .byte	0
01966 0677                        00            .byte	0
01967 0678                        00            .byte	0
01968                                           ! 628  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01969 0679                        00            .byte	0
01970 067A                        00            .byte	0
01971 067B                        00            .byte	0
01972 067C                        00            .byte	0
01973 067D                        00            .byte	0
01974 067E                        00            .byte	0
01975 067F                        00            .byte	0
01976 0680                        00            .byte	0
01977                                           ! 629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01978 0681                        00            .byte	0
01979 0682                        00            .byte	0
01980 0683                        00            .byte	0
01981 0684                        00            .byte	0
01982 0685                        00            .byte	0
01983 0686                        00            .byte	0
01984 0687                        00            .byte	0
01985 0688                        00            .byte	0
01986                                           ! 630  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01987 0689                        00            .byte	0
01988 068A                        00            .byte	0
01989 068B                        00            .byte	0
01990 068C                        00            .byte	0
01991 068D                        00            .byte	0
01992 068E                        00            .byte	0
01993 068F                        00            .byte	0
01994 0690                        00            .byte	0
01995                                           ! 631 },
01996                                           ! 632 {
01997                                           ! 633  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01998 0691                        00            .byte	0
01999 0692                        00            .byte	0
02000 0693                        00            .byte	0
02001 0694                        00            .byte	0
02002 0695                        00            .byte	0
02003 0696                        00            .byte	0
02004 0697                        00            .byte	0
02005 0698                        00            .byte	0
02006                                           ! 634  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02007 0699                        00            .byte	0
02008 069A                        00            .byte	0
02009 069B                        00            .byte	0
02010 069C                        00            .byte	0
02011 069D                        00            .byte	0
02012 069E                        00            .byte	0
02013 069F                        00            .byte	0
02014 06A0                        00            .byte	0
02015                                           ! 635  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02016 06A1                        00            .byte	0
02017 06A2                        00            .byte	0
02018 06A3                        00            .byte	0
02019 06A4                        00            .byte	0
02020 06A5                        00            .byte	0
02021 06A6                        00            .byte	0
02022 06A7                        00            .byte	0
02023 06A8                        00            .byte	0
02024                                           ! 636  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02025 06A9                        00            .byte	0
02026 06AA                        00            .byte	0
02027 06AB                        00            .byte	0
02028 06AC                        00            .byte	0
02029 06AD                        00            .byte	0
02030 06AE                        00            .byte	0
02031 06AF                        00            .byte	0
02032 06B0                        00            .byte	0
02033                                           ! 637  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02034 06B1                        00            .byte	0
02035 06B2                        00            .byte	0
02036 06B3                        00            .byte	0
02037 06B4                        00            .byte	0
02038 06B5                        00            .byte	0
02039 06B6                        00            .byte	0
02040 06B7                        00            .byte	0
02041 06B8                        00            .byte	0
02042                                           ! 638  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02043 06B9                        00            .byte	0
02044 06BA                        00            .byte	0
02045 06BB                        00            .byte	0
02046 06BC                        00            .byte	0
02047 06BD                        00            .byte	0
02048 06BE                        00            .byte	0
02049 06BF                        00            .byte	0
02050 06C0                        00            .byte	0
02051                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02052 06C1                        00            .byte	0
02053 06C2                        00            .byte	0
02054 06C3                        00            .byte	0
02055 06C4                        00            .byte	0
02056 06C5                        00            .byte	0
02057 06C6                        00            .byte	0
02058 06C7                        00            .byte	0
02059 06C8                        00            .byte	0
02060                                           ! 640  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02061 06C9                        00            .byte	0
02062 06CA                        00            .byte	0
02063 06CB                        00            .byte	0
02064 06CC                        00            .byte	0
02065 06CD                        00            .byte	0
02066 06CE                        00            .byte	0
02067 06CF                        00            .byte	0
02068 06D0                        00            .byte	0
02069                                           ! 641 },
02070                                           ! 642 {
02071                                           ! 643  80, 24, 14, 0x00, 0x80,
02072 06D1                        50            .byte	$50
02073 06D2                        18            .byte	$18
02074 06D3                        0E            .byte	$E
02075 06D4                        00            .byte	0
02076 06D5                        80            .byte	$80
02077                                           ! 644  0x01, 0x0f, 0x00, 0x06,
02078 06D6                        01            .byte	1
02079 06D7                        0F            .byte	$F
02080 06D8                        00            .byte	0
02081 06D9                        06            .byte	6
02082                                           ! 645  0xa3,
02083 06DA                        A3            .byte	$A3
02084                                           ! 646  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02085 06DB                        5F            .byte	$5F
02086 06DC                        4F            .byte	$4F
02087 06DD                        50            .byte	$50
02088 06DE                        82            .byte	$82
02089 06DF                        54            .byte	$54
02090 06E0                        80            .byte	$80
02091 06E1                        BF            .byte	$BF
02092 06E2                        1F            .byte	$1F
02093                                           ! 647  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02094 06E3                        00            .byte	0
02095 06E4                        40            .byte	$40
02096 06E5                        00            .byte	0
02097 06E6                        00            .byte	0
02098 06E7                        00            .byte	0
02099 06E8                        00            .byte	0
02100 06E9                        00            .byte	0
02101 06EA                        00            .byte	0
02102                                           ! 648  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02103 06EB                        83            .byte	$83
02104 06EC                        85            .byte	$85
02105 06ED                        5D            .byte	$5D
02106 06EE                        28            .byte	$28
02107 06EF                        0F            .byte	$F
02108 06F0                        63            .byte	$63
02109 06F1                        BA            .byte	$BA
02110 06F2                        E3            .byte	$E3
02111                                           ! 649  0xff,
02112 06F3                        FF            .byte	$FF
02113                                           ! 650  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02114 06F4                        00            .byte	0
02115 06F5                        08            .byte	8
02116 06F6                        00            .byte	0
02117 06F7                        00            .byte	0
02118 06F8                        18            .byte	$18
02119 06F9                        18            .byte	$18
02120 06FA                        00            .byte	0
02121 06FB                        00            .byte	0
02122                                           ! 651  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02123 06FC                        00            .byte	0
02124 06FD                        08            .byte	8
02125 06FE                        00            .byte	0
02126 06FF                        00            .byte	0
02127 0700                        00            .byte	0
02128 0701                        18            .byte	$18
02129 0702                        00            .byte	0
02130 0703                        00            .byte	0
02131                                           ! 652  0x01, 0x00, 0x01, 0x00,
02132 0704                        01            .byte	1
02133 0705                        00            .byte	0
02134 0706                        01            .byte	1
02135 0707                        00            .byte	0
02136                                           ! 653  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02137 0708                        00            .byte	0
02138 0709                        00            .byte	0
02139 070A                        00            .byte	0
02140 070B                        00            .byte	0
02141 070C                        00            .byte	0
02142 070D                        00            .byte	0
02143 070E                        05            .byte	5
02144 070F                        0F            .byte	$F
02145 0710                        FF            .byte	$FF
02146                                           ! 654 },
02147                                           ! 655 {
02148                                           ! 656  80, 24, 14, 0x00, 0x80,
02149 0711                        50            .byte	$50
02150 0712                        18            .byte	$18
02151 0713                        0E            .byte	$E
02152 0714                        00            .byte	0
02153 0715                        80            .byte	$80
02154                                           ! 657  0x01, 0x0f, 0x00, 0x06,
02155 0716                        01            .byte	1
02156 0717                        0F            .byte	$F
02157 0718                        00            .byte	0
02158 0719                        06            .byte	6
02159                                           ! 658  0xa3,
02160 071A                        A3            .byte	$A3
02161                                           ! 659  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02162 071B                        5F            .byte	$5F
02163 071C                        4F            .byte	$4F
02164 071D                        50            .byte	$50
02165 071E                        82            .byte	$82
02166 071F                        54            .byte	$54
02167 0720                        80            .byte	$80
02168 0721                        BF            .byte	$BF
02169 0722                        1F            .byte	$1F
02170                                           ! 660  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02171 0723                        00            .byte	0
02172 0724                        40            .byte	$40
02173 0725                        00            .byte	0
02174 0726                        00            .byte	0
02175 0727                        00            .byte	0
02176 0728                        00            .byte	0
02177 0729                        00            .byte	0
02178 072A                        00            .byte	0
02179                                           ! 661  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02180 072B                        83            .byte	$83
02181 072C                        85            .byte	$85
02182 072D                        5D            .byte	$5D
02183 072E                        28            .byte	$28
02184 072F                        0F            .byte	$F
02185 0730                        63            .byte	$63
02186 0731                        BA            .byte	$BA
02187 0732                        E3            .byte	$E3
02188                                           ! 662  0xff,
02189 0733                        FF            .byte	$FF
02190                                           ! 663  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02191 0734                        00            .byte	0
02192 0735                        01            .byte	1
02193 0736                        02            .byte	2
02194 0737                        03            .byte	3
02195 0738                        04            .byte	4
02196 0739                        05            .byte	5
02197 073A                        14            .byte	$14
02198 073B                        07            .byte	7
02199                                           ! 664  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02200 073C                        38            .byte	$38
02201 073D                        39            .byte	$39
02202 073E                        3A            .byte	$3A
02203 073F                        3B            .byte	$3B
02204 0740                        3C            .byte	$3C
02205 0741                        3D            .byte	$3D
02206 0742                        3E            .byte	$3E
02207 0743                        3F            .byte	$3F
02208                                           ! 665  0x01, 0x00, 0x0f, 0x00,
02209 0744                        01            .byte	1
02210 0745                        00            .byte	0
02211 0746                        0F            .byte	$F
02212 0747                        00            .byte	0
02213                                           ! 666  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02214 0748                        00            .byte	0
02215 0749                        00            .byte	0
02216 074A                        00            .byte	0
02217 074B                        00            .byte	0
02218 074C                        00            .byte	0
02219 074D                        00            .byte	0
02220 074E                        05            .byte	5
02221 074F                        0F            .byte	$F
02222 0750                        FF            .byte	$FF
02223                                           ! 667 },
02224                                           ! 668 {
02225                                           ! 669  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02226 0751                        00            .byte	0
02227 0752                        00            .byte	0
02228 0753                        00            .byte	0
02229 0754                        00            .byte	0
02230 0755                        00            .byte	0
02231 0756                        00            .byte	0
02232 0757                        00            .byte	0
02233 0758                        00            .byte	0
02234                                           ! 670  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02235 0759                        00            .byte	0
02236 075A                        00            .byte	0
02237 075B                        00            .byte	0
02238 075C                        00            .byte	0
02239 075D                        00            .byte	0
02240 075E                        00            .byte	0
02241 075F                        00            .byte	0
02242 0760                        00            .byte	0
02243                                           ! 671  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02244 0761                        00            .byte	0
02245 0762                        00            .byte	0
02246 0763                        00            .byte	0
02247 0764                        00            .byte	0
02248 0765                        00            .byte	0
02249 0766                        00            .byte	0
02250 0767                        00            .byte	0
02251 0768                        00            .byte	0
02252                                           ! 672  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02253 0769                        00            .byte	0
02254 076A                        00            .byte	0
02255 076B                        00            .byte	0
02256 076C                        00            .byte	0
02257 076D                        00            .byte	0
02258 076E                        00            .byte	0
02259 076F                        00            .byte	0
02260 0770                        00            .byte	0
02261                                           ! 673  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02262 0771                        00            .byte	0
02263 0772                        00            .byte	0
02264 0773                        00            .byte	0
02265 0774                        00            .byte	0
02266 0775                        00            .byte	0
02267 0776                        00            .byte	0
02268 0777                        00            .byte	0
02269 0778                        00            .byte	0
02270                                           ! 674  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02271 0779                        00            .byte	0
02272 077A                        00            .byte	0
02273 077B                        00            .byte	0
02274 077C                        00            .byte	0
02275 077D                        00            .byte	0
02276 077E                        00            .byte	0
02277 077F                        00            .byte	0
02278 0780                        00            .byte	0
02279                                           ! 675  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02280 0781                        00            .byte	0
02281 0782                        00            .byte	0
02282 0783                        00            .byte	0
02283 0784                        00            .byte	0
02284 0785                        00            .byte	0
02285 0786                        00            .byte	0
02286 0787                        00            .byte	0
02287 0788                        00            .byte	0
02288                                           ! 676  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02289 0789                        00            .byte	0
02290 078A                        00            .byte	0
02291 078B                        00            .byte	0
02292 078C                        00            .byte	0
02293 078D                        00            .byte	0
02294 078E                        00            .byte	0
02295 078F                        00            .byte	0
02296 0790                        00            .byte	0
02297                                           ! 677 },
02298                                           ! 678 {
02299                                           ! 679  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02300 0791                        00            .byte	0
02301 0792                        00            .byte	0
02302 0793                        00            .byte	0
02303 0794                        00            .byte	0
02304 0795                        00            .byte	0
02305 0796                        00            .byte	0
02306 0797                        00            .byte	0
02307 0798                        00            .byte	0
02308                                           ! 680  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02309 0799                        00            .byte	0
02310 079A                        00            .byte	0
02311 079B                        00            .byte	0
02312 079C                        00            .byte	0
02313 079D                        00            .byte	0
02314 079E                        00            .byte	0
02315 079F                        00            .byte	0
02316 07A0                        00            .byte	0
02317                                           ! 681  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02318 07A1                        00            .byte	0
02319 07A2                        00            .byte	0
02320 07A3                        00            .byte	0
02321 07A4                        00            .byte	0
02322 07A5                        00            .byte	0
02323 07A6                        00            .byte	0
02324 07A7                        00            .byte	0
02325 07A8                        00            .byte	0
02326                                           ! 682  0x00, 0x00, 
02327 07A9                        00            .byte	0
02328 07AA                        00            .byte	0
02329                                           ! 682 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02330 07AB                        00            .byte	0
02331 07AC                        00            .byte	0
02332 07AD                        00            .byte	0
02333 07AE                        00            .byte	0
02334 07AF                        00            .byte	0
02335 07B0                        00            .byte	0
02336                                           ! 683  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02337 07B1                        00            .byte	0
02338 07B2                        00            .byte	0
02339 07B3                        00            .byte	0
02340 07B4                        00            .byte	0
02341 07B5                        00            .byte	0
02342 07B6                        00            .byte	0
02343 07B7                        00            .byte	0
02344 07B8                        00            .byte	0
02345                                           ! 684  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02346 07B9                        00            .byte	0
02347 07BA                        00            .byte	0
02348 07BB                        00            .byte	0
02349 07BC                        00            .byte	0
02350 07BD                        00            .byte	0
02351 07BE                        00            .byte	0
02352 07BF                        00            .byte	0
02353 07C0                        00            .byte	0
02354                                           ! 685  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02355 07C1                        00            .byte	0
02356 07C2                        00            .byte	0
02357 07C3                        00            .byte	0
02358 07C4                        00            .byte	0
02359 07C5                        00            .byte	0
02360 07C6                        00            .byte	0
02361 07C7                        00            .byte	0
02362 07C8                        00            .byte	0
02363                                           ! 686  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02364 07C9                        00            .byte	0
02365 07CA                        00            .byte	0
02366 07CB                        00            .byte	0
02367 07CC                        00            .byte	0
02368 07CD                        00            .byte	0
02369 07CE                        00            .byte	0
02370 07CF                        00            .byte	0
02371 07D0                        00            .byte	0
02372                                           ! 687 },
02373                                           ! 688 {
02374                                           ! 689  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02375 07D1                        00            .byte	0
02376 07D2                        00            .byte	0
02377 07D3                        00            .byte	0
02378 07D4                        00            .byte	0
02379 07D5                        00            .byte	0
02380 07D6                        00            .byte	0
02381 07D7                        00            .byte	0
02382 07D8                        00            .byte	0
02383                                           ! 690  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02384 07D9                        00            .byte	0
02385 07DA                        00            .byte	0
02386 07DB                        00            .byte	0
02387 07DC                        00            .byte	0
02388 07DD                        00            .byte	0
02389 07DE                        00            .byte	0
02390 07DF                        00            .byte	0
02391 07E0                        00            .byte	0
02392                                           ! 691  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02393 07E1                        00            .byte	0
02394 07E2                        00            .byte	0
02395 07E3                        00            .byte	0
02396 07E4                        00            .byte	0
02397 07E5                        00            .byte	0
02398 07E6                        00            .byte	0
02399 07E7                        00            .byte	0
02400 07E8                        00            .byte	0
02401                                           ! 692  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02402 07E9                        00            .byte	0
02403 07EA                        00            .byte	0
02404 07EB                        00            .byte	0
02405 07EC                        00            .byte	0
02406 07ED                        00            .byte	0
02407 07EE                        00            .byte	0
02408 07EF                        00            .byte	0
02409 07F0                        00            .byte	0
02410                                           ! 693  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02411 07F1                        00            .byte	0
02412 07F2                        00            .byte	0
02413 07F3                        00            .byte	0
02414 07F4                        00            .byte	0
02415 07F5                        00            .byte	0
02416 07F6                        00            .byte	0
02417 07F7                        00            .byte	0
02418 07F8                        00            .byte	0
02419                                           ! 694  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02420 07F9                        00            .byte	0
02421 07FA                        00            .byte	0
02422 07FB                        00            .byte	0
02423 07FC                        00            .byte	0
02424 07FD                        00            .byte	0
02425 07FE                        00            .byte	0
02426 07FF                        00            .byte	0
02427 0800                        00            .byte	0
02428                                           ! 695  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02429 0801                        00            .byte	0
02430 0802                        00            .byte	0
02431 0803                        00            .byte	0
02432 0804                        00            .byte	0
02433 0805                        00            .byte	0
02434 0806                        00            .byte	0
02435 0807                        00            .byte	0
02436 0808                        00            .byte	0
02437                                           ! 696  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02438 0809                        00            .byte	0
02439 080A                        00            .byte	0
02440 080B                        00            .byte	0
02441 080C                        00            .byte	0
02442 080D                        00            .byte	0
02443 080E                        00            .byte	0
02444 080F                        00            .byte	0
02445 0810                        00            .byte	0
02446                                           ! 697 },
02447                                           ! 698 {
02448                                           ! 699  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02449 0811                        00            .byte	0
02450 0812                        00            .byte	0
02451 0813                        00            .byte	0
02452 0814                        00            .byte	0
02453 0815                        00            .byte	0
02454 0816                        00            .byte	0
02455 0817                        00            .byte	0
02456 0818                        00            .byte	0
02457                                           ! 700  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02458 0819                        00            .byte	0
02459 081A                        00            .byte	0
02460 081B                        00            .byte	0
02461 081C                        00            .byte	0
02462 081D                        00            .byte	0
02463 081E                        00            .byte	0
02464 081F                        00            .byte	0
02465 0820                        00            .byte	0
02466                                           ! 701  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02467 0821                        00            .byte	0
02468 0822                        00            .byte	0
02469 0823                        00            .byte	0
02470 0824                        00            .byte	0
02471 0825                        00            .byte	0
02472 0826                        00            .byte	0
02473 0827                        00            .byte	0
02474 0828                        00            .byte	0
02475                                           ! 702  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02476 0829                        00            .byte	0
02477 082A                        00            .byte	0
02478 082B                        00            .byte	0
02479 082C                        00            .byte	0
02480 082D                        00            .byte	0
02481 082E                        00            .byte	0
02482 082F                        00            .byte	0
02483 0830                        00            .byte	0
02484                                           ! 703  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02485 0831                        00            .byte	0
02486 0832                        00            .byte	0
02487 0833                        00            .byte	0
02488 0834                        00            .byte	0
02489 0835                        00            .byte	0
02490 0836                        00            .byte	0
02491 0837                        00            .byte	0
02492 0838                        00            .byte	0
02493                                           ! 704  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02494 0839                        00            .byte	0
02495 083A                        00            .byte	0
02496 083B                        00            .byte	0
02497 083C                        00            .byte	0
02498 083D                        00            .byte	0
02499 083E                        00            .byte	0
02500 083F                        00            .byte	0
02501 0840                        00            .byte	0
02502                                           ! 705  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02503 0841                        00            .byte	0
02504 0842                        00            .byte	0
02505 0843                        00            .byte	0
02506 0844                        00            .byte	0
02507 0845                        00            .byte	0
02508 0846                        00            .byte	0
02509 0847                        00            .byte	0
02510 0848                        00            .byte	0
02511                                           ! 706  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02512 0849                        00            .byte	0
02513 084A                        00            .byte	0
02514 084B                        00            .byte	0
02515 084C                        00            .byte	0
02516 084D                        00            .byte	0
02517 084E                        00            .byte	0
02518 084F                        00            .byte	0
02519 0850                        00            .byte	0
02520                                           ! 707 },
02521                                           ! 708 {
02522                                           ! 709  40, 24, 16, 0x00, 0x08,
02523 0851                        28            .byte	$28
02524 0852                        18            .byte	$18
02525 0853                        10            .byte	$10
02526 0854                        00            .byte	0
02527 0855                        08            .byte	8
02528                                           ! 710  0x08, 0x03, 0x00, 0x02,
02529 0856                        08            .byte	8
02530 0857                        03            .byte	3
02531 0858                        00            .byte	0
02532 0859                        02            .byte	2
02533                                           ! 711  0x67,
02534 085A                        67            .byte	$67
02535                                           ! 712  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02536 085B                        2D            .byte	$2D
02537 085C                        27            .byte	$27
02538 085D                        28            .byte	$28
02539 085E                        90            .byte	$90
02540 085F                        2B            .byte	$2B
02541 0860                        A0            .byte	$A0
02542 0861                        BF            .byte	$BF
02543 0862                        1F            .byte	$1F
02544                                           ! 713  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02545 0863                        00            .byte	0
02546 0864                        4F            .byte	$4F
02547 0865                        0D            .byte	$D
02548 0866                        0E            .byte	$E
02549 0867                        00            .byte	0
02550 0868                        00            .byte	0
02551 0869                        00            .byte	0
02552 086A                        00            .byte	0
02553                                           ! 714  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02554 086B                        9C            .byte	$9C
02555 086C                        8E            .byte	$8E
02556 086D                        8F            .byte	$8F
02557 086E                        14            .byte	$14
02558 086F                        1F            .byte	$1F
02559 0870                        96            .byte	$96
02560 0871                        B9            .byte	$B9
02561 0872                        A3            .byte	$A3
02562                                           ! 715  0xff,
02563 0873                        FF            .byte	$FF
02564                                           ! 716  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02565 0874                        00            .byte	0
02566 0875                        01            .byte	1
02567 0876                        02            .byte	2
02568 0877                        03            .byte	3
02569 0878                        04            .byte	4
02570 0879                        05            .byte	5
02571 087A                        14            .byte	$14
02572 087B                        07            .byte	7
02573                                           ! 717  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02574 087C                        38            .byte	$38
02575 087D                        39            .byte	$39
02576 087E                        3A            .byte	$3A
02577 087F                        3B            .byte	$3B
02578 0880                        3C            .byte	$3C
02579 0881                        3D            .byte	$3D
02580 0882                        3E            .byte	$3E
02581 0883                        3F            .byte	$3F
02582                                           ! 718  0x0c, 0x00, 0x0f, 0x08,
02583 0884                        0C            .byte	$C
02584 0885                        00            .byte	0
02585 0886                        0F            .byte	$F
02586 0887                        08            .byte	8
02587                                           ! 719  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02588 0888                        00            .byte	0
02589 0889                        00            .byte	0
02590 088A                        00            .byte	0
02591 088B                        00            .byte	0
02592 088C                        00            .byte	0
02593 088D                        10            .byte	$10
02594 088E                        0E            .byte	$E
02595 088F                        0F            .byte	$F
02596 0890                        FF            .byte	$FF
02597                                           ! 720 },
02598                                           ! 721 {
02599                                           ! 722  80, 24, 16, 0x00, 0x10,
02600 0891                        50            .byte	$50
02601 0892                        18            .byte	$18
02602 0893                        10            .byte	$10
02603 0894                        00            .byte	0
02604 0895                        10            .byte	$10
02605                                           ! 723  0x00, 0x03, 0x00, 0x02,
02606 0896                        00            .byte	0
02607 0897                        03            .byte	3
02608 0898                        00            .byte	0
02609 0899                        02            .byte	2
02610                                           ! 724  0x67,
02611 089A                        67            .byte	$67
02612                                           ! 725  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02613 089B                        5F            .byte	$5F
02614 089C                        4F            .byte	$4F
02615 089D                        50            .byte	$50
02616 089E                        82            .byte	$82
02617 089F                        55            .byte	$55
02618 08A0                        81            .byte	$81
02619 08A1                        BF            .byte	$BF
02620 08A2                        1F            .byte	$1F
02621                                           ! 726  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02622 08A3                        00            .byte	0
02623 08A4                        4F            .byte	$4F
02624 08A5                        0D            .byte	$D
02625 08A6                        0E            .byte	$E
02626 08A7                        00            .byte	0
02627 08A8                        00            .byte	0
02628 08A9                        00            .byte	0
02629 08AA                        00            .byte	0
02630                                           ! 727  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02631 08AB                        9C            .byte	$9C
02632 08AC                        8E            .byte	$8E
02633 08AD                        8F            .byte	$8F
02634 08AE                        28            .byte	$28
02635 08AF                        1F            .byte	$1F
02636 08B0                        96            .byte	$96
02637 08B1                        B9            .byte	$B9
02638 08B2                        A3            .byte	$A3
02639                                           ! 728  0xff,
02640 08B3                        FF            .byte	$FF
02641                                           ! 729  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02642 08B4                        00            .byte	0
02643 08B5                        01            .byte	1
02644 08B6                        02            .byte	2
02645 08B7                        03            .byte	3
02646 08B8                        04            .byte	4
02647 08B9                        05            .byte	5
02648 08BA                        14            .byte	$14
02649 08BB                        07            .byte	7
02650                                           ! 730  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02651 08BC                        38            .byte	$38
02652 08BD                        39            .byte	$39
02653 08BE                        3A            .byte	$3A
02654 08BF                        3B            .byte	$3B
02655 08C0                        3C            .byte	$3C
02656 08C1                        3D            .byte	$3D
02657 08C2                        3E            .byte	$3E
02658 08C3                        3F            .byte	$3F
02659                                           ! 731  0x0c, 0x00, 0x0f, 0x08,
02660 08C4                        0C            .byte	$C
02661 08C5                        00            .byte	0
02662 08C6                        0F            .byte	$F
02663 08C7                        08            .byte	8
02664                                           ! 732  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02665 08C8                        00            .byte	0
02666 08C9                        00            .byte	0
02667 08CA                        00            .byte	0
02668 08CB                        00            .byte	0
02669 08CC                        00            .byte	0
02670 08CD                        10            .byte	$10
02671 08CE                        0E            .byte	$E
02672 08CF                        0F            .byte	$F
02673 08D0                        FF            .byte	$FF
02674                                           ! 733 },
02675                                           ! 734 {
02676                                           ! 735  80, 24, 16, 0x00, 0x10,
02677 08D1                        50            .byte	$50
02678 08D2                        18            .byte	$18
02679 08D3                        10            .byte	$10
02680 08D4                        00            .byte	0
02681 08D5                        10            .byte	$10
02682                                           ! 736  0x00, 0x03, 0x00, 0x02,
02683 08D6                        00            .byte	0
02684 08D7                        03            .byte	3
02685 08D8                        00            .byte	0
02686 08D9                        02            .byte	2
02687                                           ! 737  0x66,
02688 08DA                        66            .byte	$66
02689                                           ! 738  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02690 08DB                        5F            .byte	$5F
02691 08DC                        4F            .byte	$4F
02692 08DD                        50            .byte	$50
02693 08DE                        82            .byte	$82
02694 08DF                        55            .byte	$55
02695 08E0                        81            .byte	$81
02696 08E1                        BF            .byte	$BF
02697 08E2                        1F            .byte	$1F
02698                                           ! 739  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02699 08E3                        00            .byte	0
02700 08E4                        4F            .byte	$4F
02701 08E5                        0D            .byte	$D
02702 08E6                        0E            .byte	$E
02703 08E7                        00            .byte	0
02704 08E8                        00            .byte	0
02705 08E9                        00            .byte	0
02706 08EA                        00            .byte	0
02707                                           ! 740  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02708 08EB                        9C            .byte	$9C
02709 08EC                        8E            .byte	$8E
02710 08ED                        8F            .byte	$8F
02711 08EE                        28            .byte	$28
02712 08EF                        0F            .byte	$F
02713 08F0                        96            .byte	$96
02714 08F1                        B9            .byte	$B9
02715 08F2                        A3            .byte	$A3
02716                                           ! 741  0xff,
02717 08F3                        FF            .byte	$FF
02718                                           ! 742  0x00, 0x08, 0x08,
02719 08F4                        00            .byte	0
02720 08F5                        08            .byte	8
02721                                           ! 742  0x08, 0x08, 0x08, 0x08, 0x08,
02722 08F6                        08            .byte	8
02723 08F7                        08            .byte	8
02724 08F8                        08            .byte	8
02725 08F9                        08            .byte	8
02726 08FA                        08            .byte	8
02727 08FB                        08            .byte	8
02728                                           ! 743  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02729 08FC                        10            .byte	$10
02730 08FD                        18            .byte	$18
02731 08FE                        18            .byte	$18
02732 08FF                        18            .byte	$18
02733 0900                        18            .byte	$18
02734 0901                        18            .byte	$18
02735 0902                        18            .byte	$18
02736 0903                        18            .byte	$18
02737                                           ! 744  0x0e, 0x00, 0x0f, 0x08,
02738 0904                        0E            .byte	$E
02739 0905                        00            .byte	0
02740 0906                        0F            .byte	$F
02741 0907                        08            .byte	8
02742                                           ! 745  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02743 0908                        00            .byte	0
02744 0909                        00            .byte	0
02745 090A                        00            .byte	0
02746 090B                        00            .byte	0
02747 090C                        00            .byte	0
02748 090D                        10            .byte	$10
02749 090E                        0A            .byte	$A
02750 090F                        0F            .byte	$F
02751 0910                        FF            .byte	$FF
02752                                           ! 746 },
02753                                           ! 747 {
02754                                           ! 748  80, 29, 16, 0x00, 0x00,
02755 0911                        50            .byte	$50
02756 0912                        1D            .byte	$1D
02757 0913                        10            .byte	$10
02758 0914                        00            .byte	0
02759 0915                        00            .byte	0
02760                                           ! 749  0x01, 0x0f, 0x00, 0x06,
02761 0916                        01            .byte	1
02762 0917                        0F            .byte	$F
02763 0918                        00            .byte	0
02764 0919                        06            .byte	6
02765                                           ! 750  0xe3,
02766 091A                        E3            .byte	$E3
02767                                           ! 751  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02768 091B                        5F            .byte	$5F
02769 091C                        4F            .byte	$4F
02770 091D                        50            .byte	$50
02771 091E                        82            .byte	$82
02772 091F                        54            .byte	$54
02773 0920                        80            .byte	$80
02774 0921                        0B            .byte	$B
02775 0922                        3E            .byte	$3E
02776                                           ! 752  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02777 0923                        00            .byte	0
02778 0924                        40            .byte	$40
02779 0925                        00            .byte	0
02780 0926                        00            .byte	0
02781 0927                        00            .byte	0
02782 0928                        00            .byte	0
02783 0929                        00            .byte	0
02784 092A                        00            .byte	0
02785                                           ! 753  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02786 092B                        EA            .byte	$EA
02787 092C                        8C            .byte	$8C
02788 092D                        DF            .byte	$DF
02789 092E                        28            .byte	$28
02790 092F                        00            .byte	0
02791 0930                        E7            .byte	$E7
02792 0931                        04            .byte	4
02793 0932                        E3            .byte	$E3
02794                                           ! 754  0xff,
02795 0933                        FF            .byte	$FF
02796                                           ! 755  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02797 0934                        00            .byte	0
02798 0935                        3F            .byte	$3F
02799 0936                        00            .byte	0
02800 0937                        3F            .byte	$3F
02801 0938                        00            .byte	0
02802 0939                        3F            .byte	$3F
02803 093A                        00            .byte	0
02804 093B                        3F            .byte	$3F
02805                                           ! 756  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02806 093C                        00            .byte	0
02807 093D                        3F            .byte	$3F
02808 093E                        00            .byte	0
02809 093F                        3F            .byte	$3F
02810 0940                        00            .byte	0
02811 0941                        3F            .byte	$3F
02812 0942                        00            .byte	0
02813 0943                        3F            .byte	$3F
02814                                           ! 757  0x01, 0x00, 0x0f, 0x00,
02815 0944                        01            .byte	1
02816 0945                        00            .byte	0
02817 0946                        0F            .byte	$F
02818 0947                        00            .byte	0
02819                                           ! 758  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02820 0948                        00            .byte	0
02821 0949                        00            .byte	0
02822 094A                        00            .byte	0
02823 094B                        00            .byte	0
02824 094C                        00            .byte	0
02825 094D                        00            .byte	0
02826 094E                        05            .byte	5
02827 094F                        0F            .byte	$F
02828 0950                        FF            .byte	$FF
02829                                           ! 759 },
02830                                           ! 760 {
02831                                           ! 761  80, 29, 16, 0x00, 0x00,
02832 0951                        50            .byte	$50
02833 0952                        1D            .byte	$1D
02834 0953                        10            .byte	$10
02835 0954                        00            .byte	0
02836 0955                        00            .byte	0
02837                                           ! 762  0x01, 0x0f, 0x00, 0x06,
02838 0956                        01            .byte	1
02839 0957                        0F            .byte	$F
02840 0958                        00            .byte	0
02841 0959                        06            .byte	6
02842                                           ! 763  0xe3,
02843 095A                        E3            .byte	$E3
02844                                           ! 764  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02845 095B                        5F            .byte	$5F
02846 095C                        4F            .byte	$4F
02847 095D                        50            .byte	$50
02848 095E                        82            .byte	$82
02849 095F                        54            .byte	$54
02850 0960                        80            .byte	$80
02851 0961                        0B            .byte	$B
02852 0962                        3E            .byte	$3E
02853                                           ! 765  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02854 0963                        00            .byte	0
02855 0964                        40            .byte	$40
02856 0965                        00            .byte	0
02857 0966                        00            .byte	0
02858 0967                        00            .byte	0
02859 0968                        00            .byte	0
02860 0969                        00            .byte	0
02861 096A                        00            .byte	0
02862                                           ! 766  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02863 096B                        EA            .byte	$EA
02864 096C                        8C            .byte	$8C
02865 096D                        DF            .byte	$DF
02866 096E                        28            .byte	$28
02867 096F                        00            .byte	0
02868 0970                        E7            .byte	$E7
02869 0971                        04            .byte	4
02870 0972                        E3            .byte	$E3
02871                                           ! 767  0xff,
02872 0973                        FF            .byte	$FF
02873                                           ! 768  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02874 0974                        00            .byte	0
02875 0975                        01            .byte	1
02876 0976                        02            .byte	2
02877 0977                        03            .byte	3
02878 0978                        04            .byte	4
02879 0979                        05            .byte	5
02880 097A                        14            .byte	$14
02881 097B                        07            .byte	7
02882                                           ! 769  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02883 097C                        38            .byte	$38
02884 097D                        39            .byte	$39
02885 097E                        3A            .byte	$3A
02886 097F                        3B            .byte	$3B
02887 0980                        3C            .byte	$3C
02888 0981                        3D            .byte	$3D
02889 0982                        3E            .byte	$3E
02890 0983                        3F            .byte	$3F
02891                                           ! 770  0x01, 0x00, 0x0f, 0x00,
02892 0984                        01            .byte	1
02893 0985                        00            .byte	0
02894 0986                        0F            .byte	$F
02895 0987                        00            .byte	0
02896                                           ! 771  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02897 0988                        00            .byte	0
02898 0989                        00            .byte	0
02899 098A                        00            .byte	0
02900 098B                        00            .byte	0
02901 098C                        00            .byte	0
02902 098D                        00            .byte	0
02903 098E                        05            .byte	5
02904 098F                        0F            .byte	$F
02905 0990                        FF            .byte	$FF
02906                                           ! 772 },
02907                                           ! 773 {
02908                                           ! 774  40, 24, 8, 0x00, 0x00,
02909 0991                        28            .byte	$28
02910 0992                        18            .byte	$18
02911 0993                        08            .byte	8
02912 0994                        00            .byte	0
02913 0995                        00            .byte	0
02914                                           ! 775  0x01, 0x0f, 0x00, 0x0e,
02915 0996                        01            .byte	1
02916 0997                        0F            .byte	$F
02917 0998                        00            .byte	0
02918 0999                        0E            .byte	$E
02919                                           ! 776  0x63,
02920 099A                        63            .byte	$63
02921                                           ! 777  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02922 099B                        5F            .byte	$5F
02923 099C                        4F            .byte	$4F
02924 099D                        50            .byte	$50
02925 099E                        82            .byte	$82
02926 099F                        54            .byte	$54
02927 09A0                        80            .byte	$80
02928 09A1                        BF            .byte	$BF
02929 09A2                        1F            .byte	$1F
02930                                           ! 778  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02931 09A3                        00            .byte	0
02932 09A4                        41            .byte	$41
02933 09A5                        00            .byte	0
02934 09A6                        00            .byte	0
02935 09A7                        00            .byte	0
02936 09A8                        00            .byte	0
02937 09A9                        00            .byte	0
02938 09AA                        00            .byte	0
02939                                           ! 779  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02940 09AB                        9C            .byte	$9C
02941 09AC                        8E            .byte	$8E
02942 09AD                        8F            .byte	$8F
02943 09AE                        28            .byte	$28
02944 09AF                        40            .byte	$40
02945 09B0                        96            .byte	$96
02946 09B1                        B9            .byte	$B9
02947 09B2                        A3            .byte	$A3
02948                                           ! 780  0xff,
02949 09B3                        FF            .byte	$FF
02950                                           ! 781  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02951 09B4                        00            .byte	0
02952 09B5                        01            .byte	1
02953 09B6                        02            .byte	2
02954 09B7                        03            .byte	3
02955 09B8                        04            .byte	4
02956 09B9                        05            .byte	5
02957 09BA                        06            .byte	6
02958 09BB                        07            .byte	7
02959                                           ! 782  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02960 09BC                        08            .byte	8
02961 09BD                        09            .byte	9
02962 09BE                        0A            .byte	$A
02963 09BF                        0B            .byte	$B
02964 09C0                        0C            .byte	$C
02965 09C1                        0D            .byte	$D
02966 09C2                        0E            .byte	$E
02967 09C3                        0F            .byte	$F
02968                                           ! 783  0x41, 0x00, 0x0f, 0x00,
02969 09C4                        41            .byte	$41
02970 09C5                        00            .byte	0
02971 09C6                        0F            .byte	$F
02972 09C7                        00            .byte	0
02973                                           ! 784  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02974 09C8                        00            .byte	0
02975 09C9                        00            .byte	0
02976 09CA                        00            .byte	0
02977 09CB                        00            .byte	0
02978 09CC                        00            .byte	0
02979 09CD                        40            .byte	$40
02980 09CE                        05            .byte	5
02981 09CF                        0F            .byte	$F
02982 09D0                        FF            .byte	$FF
02983                                           ! 785 },
02984                                           ! 786 {
02985                                           ! 787  100, 36, 16, 0x00, 0x00,
02986 09D1                        64            .byte	$64
02987 09D2                        24            .byte	$24
02988 09D3                        10            .byte	$10
02989 09D4                        00            .byte	0
02990 09D5                        00            .byte	0
02991                                           ! 788  0x01, 0x0f, 0x00, 0x06,
02992 09D6                        01            .byte	1
02993 09D7                        0F            .byte	$F
02994 09D8                        00            .byte	0
02995 09D9                        06            .byte	6
02996                                           ! 789  0xe3,
02997 09DA                        E3            .byte	$E3
02998                                           ! 790  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02999 09DB                        7F            .byte	$7F
03000 09DC                        63            .byte	$63
03001 09DD                        63            .byte	$63
03002 09DE                        83            .byte	$83
03003 09DF                        6B            .byte	$6B
03004 09E0                        1B            .byte	$1B
03005 09E1                        72            .byte	$72
03006 09E2                        F0            .byte	$F0
03007                                           ! 791  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
03008 09E3                        00            .byte	0
03009 09E4                        60            .byte	$60
03010 09E5                        00            .byte	0
03011 09E6                        00            .byte	0
03012 09E7                        00            .byte	0
03013 09E8                        00            .byte	0
03014 09E9                        00            .byte	0
03015 09EA                        00            .byte	0
03016                                           ! 792  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
03017 09EB                        59            .byte	$59
03018 09EC                        8D            .byte	$8D
03019 09ED                        57            .byte	$57
03020 09EE                        32            .byte	$32
03021 09EF                        00            .byte	0
03022 09F0                        57            .byte	$57
03023 09F1                        73            .byte	$73
03024 09F2                        E3            .byte	$E3
03025                                           ! 793  0xff,
03026 09F3                        FF            .byte	$FF
03027                                           ! 794  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
03028 09F4                        00            .byte	0
03029 09F5                        01            .byte	1
03030 09F6                        02            .byte	2
03031 09F7                        03            .byte	3
03032 09F8                        04            .byte	4
03033 09F9                        05            .byte	5
03034 09FA                        14            .byte	$14
03035 09FB                        07            .byte	7
03036                                           ! 795  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03037 09FC                        38            .byte	$38
03038 09FD                        39            .byte	$39
03039 09FE                        3A            .byte	$3A
03040 09FF                        3B            .byte	$3B
03041 0A00                        3C            .byte	$3C
03042 0A01                        3D            .byte	$3D
03043 0A02                        3E            .byte	$3E
03044 0A03                        3F            .byte	$3F
03045                                           ! 796  0x01, 0x00, 0x0f, 0x00,
03046 0A04                        01            .byte	1
03047 0A05                        00            .byte	0
03048 0A06                        0F            .byte	$F
03049 0A07                        00            .byte	0
03050                                           ! 797  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03051 0A08                        00            .byte	0
03052 0A09                        00            .byte	0
03053 0A0A                        00            .byte	0
03054 0A0B                        00            .byte	0
03055 0A0C                        00            .byte	0
03056 0A0D                        00            .byte	0
03057 0A0E                        05            .byte	5
03058 0A0F                        0F            .byte	$F
03059 0A10                        FF            .byte	$FF
03060                                           ! 798 },
03061                                           ! 799 };
03062                                           !BCC_EOS
03063                                           ! 800 static Bit8u palette0[63+1][3]=
03064                                           ! 801 {
03065                       00000A11            _palette0:
03066                                           ! 802   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03067 0A11                        00            .byte	0
03068 0A12                        00            .byte	0
03069 0A13                        00            .byte	0
03070 0A14                        00            .byte	0
03071 0A15                        00            .byte	0
03072 0A16                        00            .byte	0
03073 0A17                        00            .byte	0
03074 0A18                        00            .byte	0
03075 0A19                        00            .byte	0
03076 0A1A                        00            .byte	0
03077 0A1B                        00            .byte	0
03078 0A1C                        00            .byte	0
03079 0A1D                        00            .byte	0
03080 0A1E                        00            .byte	0
03081 0A1F                        00            .byte	0
03082 0A20                        00            .byte	0
03083 0A21                        00            .byte	0
03084 0A22                        00            .byte	0
03085 0A23                        00            .byte	0
03086 0A24                        00            .byte	0
03087 0A25                        00            .byte	0
03088 0A26                        00            .byte	0
03089 0A27                        00            .byte	0
03090 0A28                        00            .byte	0
03091                                           ! 803   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03092 0A29                        2A            .byte	$2A
03093 0A2A                        2A            .byte	$2A
03094 0A2B                        2A            .byte	$2A
03095 0A2C                        2A            .byte	$2A
03096 0A2D                        2A            .byte	$2A
03097 0A2E                        2A            .byte	$2A
03098 0A2F                        2A            .byte	$2A
03099 0A30                        2A            .byte	$2A
03100 0A31                        2A            .byte	$2A
03101 0A32                        2A            .byte	$2A
03102 0A33                        2A            .byte	$2A
03103 0A34                        2A            .byte	$2A
03104 0A35                        2A            .byte	$2A
03105 0A36                        2A            .byte	$2A
03106 0A37                        2A            .byte	$2A
03107 0A38                        2A            .byte	$2A
03108 0A39                        2A            .byte	$2A
03109 0A3A                        2A            .byte	$2A
03110 0A3B                        2A            .byte	$2A
03111 0A3C                        2A            .byte	$2A
03112 0A3D                        2A            .byte	$2A
03113 0A3E                        2A            .byte	$2A
03114 0A3F                        2A            .byte	$2A
03115 0A40                        2A            .byte	$2A
03116                                           ! 804   0x2a,0x2a,
03117 0A41                        2A            .byte	$2A
03118                                           ! 804 0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03119 0A42                        2A            .byte	$2A
03120 0A43                        2A            .byte	$2A
03121 0A44                        2A            .byte	$2A
03122 0A45                        2A            .byte	$2A
03123 0A46                        2A            .byte	$2A
03124 0A47                        2A            .byte	$2A
03125 0A48                        2A            .byte	$2A
03126 0A49                        2A            .byte	$2A
03127 0A4A                        2A            .byte	$2A
03128 0A4B                        2A            .byte	$2A
03129 0A4C                        2A            .byte	$2A
03130 0A4D                        2A            .byte	$2A
03131 0A4E                        2A            .byte	$2A
03132 0A4F                        2A            .byte	$2A
03133 0A50                        2A            .byte	$2A
03134 0A51                        2A            .byte	$2A
03135 0A52                        2A            .byte	$2A
03136 0A53                        2A            .byte	$2A
03137 0A54                        2A            .byte	$2A
03138 0A55                        2A            .byte	$2A
03139 0A56                        2A            .byte	$2A
03140 0A57                        2A            .byte	$2A
03141 0A58                        2A            .byte	$2A
03142                                           ! 805   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03143 0A59                        3F            .byte	$3F
03144 0A5A                        3F            .byte	$3F
03145 0A5B                        3F            .byte	$3F
03146 0A5C                        3F            .byte	$3F
03147 0A5D                        3F            .byte	$3F
03148 0A5E                        3F            .byte	$3F
03149 0A5F                        3F            .byte	$3F
03150 0A60                        3F            .byte	$3F
03151 0A61                        3F            .byte	$3F
03152 0A62                        3F            .byte	$3F
03153 0A63                        3F            .byte	$3F
03154 0A64                        3F            .byte	$3F
03155 0A65                        3F            .byte	$3F
03156 0A66                        3F            .byte	$3F
03157 0A67                        3F            .byte	$3F
03158 0A68                        3F            .byte	$3F
03159 0A69                        3F            .byte	$3F
03160 0A6A                        3F            .byte	$3F
03161 0A6B                        3F            .byte	$3F
03162 0A6C                        3F            .byte	$3F
03163 0A6D                        3F            .byte	$3F
03164 0A6E                        3F            .byte	$3F
03165 0A6F                        3F            .byte	$3F
03166 0A70                        3F            .byte	$3F
03167                                           ! 806   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03168 0A71                        00            .byte	0
03169 0A72                        00            .byte	0
03170 0A73                        00            .byte	0
03171 0A74                        00            .byte	0
03172 0A75                        00            .byte	0
03173 0A76                        00            .byte	0
03174 0A77                        00            .byte	0
03175 0A78                        00            .byte	0
03176 0A79                        00            .byte	0
03177 0A7A                        00            .byte	0
03178 0A7B                        00            .byte	0
03179 0A7C                        00            .byte	0
03180 0A7D                        00            .byte	0
03181 0A7E                        00            .byte	0
03182 0A7F                        00            .byte	0
03183 0A80                        00            .byte	0
03184 0A81                        00            .byte	0
03185 0A82                        00            .byte	0
03186 0A83                        00            .byte	0
03187 0A84                        00            .byte	0
03188 0A85                        00            .byte	0
03189 0A86                        00            .byte	0
03190 0A87                        00            .byte	0
03191 0A88                        00            .byte	0
03192                                           ! 807   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03193 0A89                        2A            .byte	$2A
03194 0A8A                        2A            .byte	$2A
03195 0A8B                        2A            .byte	$2A
03196 0A8C                        2A            .byte	$2A
03197 0A8D                        2A            .byte	$2A
03198 0A8E                        2A            .byte	$2A
03199 0A8F                        2A            .byte	$2A
03200 0A90                        2A            .byte	$2A
03201 0A91                        2A            .byte	$2A
03202 0A92                        2A            .byte	$2A
03203 0A93                        2A            .byte	$2A
03204 0A94                        2A            .byte	$2A
03205 0A95                        2A            .byte	$2A
03206 0A96                        2A            .byte	$2A
03207 0A97                        2A            .byte	$2A
03208 0A98                        2A            .byte	$2A
03209 0A99                        2A            .byte	$2A
03210 0A9A                        2A            .byte	$2A
03211 0A9B                        2A            .byte	$2A
03212 0A9C                        2A            .byte	$2A
03213 0A9D                        2A            .byte	$2A
03214 0A9E                        2A            .byte	$2A
03215 0A9F                        2A            .byte	$2A
03216 0AA0                        2A            .byte	$2A
03217                                           ! 808   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03218 0AA1                        2A            .byte	$2A
03219 0AA2                        2A            .byte	$2A
03220 0AA3                        2A            .byte	$2A
03221 0AA4                        2A            .byte	$2A
03222 0AA5                        2A            .byte	$2A
03223 0AA6                        2A            .byte	$2A
03224 0AA7                        2A            .byte	$2A
03225 0AA8                        2A            .byte	$2A
03226 0AA9                        2A            .byte	$2A
03227 0AAA                        2A            .byte	$2A
03228 0AAB                        2A            .byte	$2A
03229 0AAC                        2A            .byte	$2A
03230 0AAD                        2A            .byte	$2A
03231 0AAE                        2A            .byte	$2A
03232 0AAF                        2A            .byte	$2A
03233 0AB0                        2A            .byte	$2A
03234 0AB1                        2A            .byte	$2A
03235 0AB2                        2A            .byte	$2A
03236 0AB3                        2A            .byte	$2A
03237 0AB4                        2A            .byte	$2A
03238 0AB5                        2A            .byte	$2A
03239 0AB6                        2A            .byte	$2A
03240 0AB7                        2A            .byte	$2A
03241 0AB8                        2A            .byte	$2A
03242                                           ! 809   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03243 0AB9                        3F            .byte	$3F
03244 0ABA                        3F            .byte	$3F
03245 0ABB                        3F            .byte	$3F
03246 0ABC                        3F            .byte	$3F
03247 0ABD                        3F            .byte	$3F
03248 0ABE                        3F            .byte	$3F
03249 0ABF                        3F            .byte	$3F
03250 0AC0                        3F            .byte	$3F
03251 0AC1                        3F            .byte	$3F
03252 0AC2                        3F            .byte	$3F
03253 0AC3                        3F            .byte	$3F
03254 0AC4                        3F            .byte	$3F
03255 0AC5                        3F            .byte	$3F
03256 0AC6                        3F            .byte	$3F
03257 0AC7                        3F            .byte	$3F
03258 0AC8                        3F            .byte	$3F
03259 0AC9                        3F            .byte	$3F
03260 0ACA                        3F            .byte	$3F
03261 0ACB                        3F            .byte	$3F
03262 0ACC                        3F            .byte	$3F
03263 0ACD                        3F            .byte	$3F
03264 0ACE                        3F            .byte	$3F
03265 0ACF                        3F            .byte	$3F
03266                                           ! 810 };
03267 0AD0                        3F            .byte	$3F
03268                                           !BCC_EOS
03269                                           ! 811 static Bit8u palette1[63+1][3]=
03270                                           ! 812 {
03271                       00000AD1            _palette1:
03272                                           ! 813   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03273 0AD1                        00            .byte	0
03274 0AD2                        00            .byte	0
03275 0AD3                        00            .byte	0
03276 0AD4                        00            .byte	0
03277 0AD5                        00            .byte	0
03278 0AD6                        2A            .byte	$2A
03279 0AD7                        00            .byte	0
03280 0AD8                        2A            .byte	$2A
03281 0AD9                        00            .byte	0
03282 0ADA                        00            .byte	0
03283 0ADB                        2A            .byte	$2A
03284 0ADC                        2A            .byte	$2A
03285 0ADD                        2A            .byte	$2A
03286 0ADE                        00            .byte	0
03287 0ADF                        00            .byte	0
03288 0AE0                        2A            .byte	$2A
03289 0AE1                        00            .byte	0
03290 0AE2                        2A            .byte	$2A
03291 0AE3                        2A            .byte	$2A
03292 0AE4                        15            .byte	$15
03293 0AE5                        00            .byte	0
03294 0AE6                        2A            .byte	$2A
03295 0AE7                        2A            .byte	$2A
03296 0AE8                        2A            .byte	$2A
03297                                           ! 814   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03298 0AE9                        00            .byte	0
03299 0AEA                        00            .byte	0
03300 0AEB                        00            .byte	0
03301 0AEC                        00            .byte	0
03302 0AED                        00            .byte	0
03303 0AEE                        2A            .byte	$2A
03304 0AEF                        00            .byte	0
03305 0AF0                        2A            .byte	$2A
03306 0AF1                        00            .byte	0
03307 0AF2                        00            .byte	0
03308 0AF3                        2A            .byte	$2A
03309 0AF4                        2A            .byte	$2A
03310 0AF5                        2A            .byte	$2A
03311 0AF6                        00            .byte	0
03312 0AF7                        00            .byte	0
03313 0AF8                        2A            .byte	$2A
03314 0AF9                        00            .byte	0
03315 0AFA                        2A            .byte	$2A
03316 0AFB                        2A            .byte	$2A
03317 0AFC                        15            .byte	$15
03318 0AFD                        00            .byte	0
03319 0AFE                        2A            .byte	$2A
03320 0AFF                        2A            .byte	$2A
03321 0B00                        2A            .byte	$2A
03322                                           ! 815   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03323 0B01                        15            .byte	$15
03324 0B02                        15            .byte	$15
03325 0B03                        15            .byte	$15
03326 0B04                        15            .byte	$15
03327 0B05                        15            .byte	$15
03328 0B06                        3F            .byte	$3F
03329 0B07                        15            .byte	$15
03330 0B08                        3F            .byte	$3F
03331 0B09                        15            .byte	$15
03332 0B0A                        15            .byte	$15
03333 0B0B                        3F            .byte	$3F
03334 0B0C                        3F            .byte	$3F
03335 0B0D                        3F            .byte	$3F
03336 0B0E                        15            .byte	$15
03337 0B0F                        15            .byte	$15
03338 0B10                        3F            .byte	$3F
03339 0B11                        15            .byte	$15
03340 0B12                        3F            .byte	$3F
03341 0B13                        3F            .byte	$3F
03342 0B14                        3F            .byte	$3F
03343 0B15                        15            .byte	$15
03344 0B16                        3F            .byte	$3F
03345 0B17                        3F            .byte	$3F
03346 0B18                        3F            .byte	$3F
03347                                           ! 816   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03348 0B19                        15            .byte	$15
03349 0B1A                        15            .byte	$15
03350 0B1B                        15            .byte	$15
03351 0B1C                        15            .byte	$15
03352 0B1D                        15            .byte	$15
03353 0B1E                        3F            .byte	$3F
03354 0B1F                        15            .byte	$15
03355 0B20                        3F            .byte	$3F
03356 0B21                        15            .byte	$15
03357 0B22                        15            .byte	$15
03358 0B23                        3F            .byte	$3F
03359 0B24                        3F            .byte	$3F
03360 0B25                        3F            .byte	$3F
03361 0B26                        15            .byte	$15
03362 0B27                        15            .byte	$15
03363 0B28                        3F            .byte	$3F
03364 0B29                        15            .byte	$15
03365 0B2A                        3F            .byte	$3F
03366 0B2B                        3F            .byte	$3F
03367 0B2C                        3F            .byte	$3F
03368 0B2D                        15            .byte	$15
03369 0B2E                        3F            .byte	$3F
03370 0B2F                        3F            .byte	$3F
03371 0B30                        3F            .byte	$3F
03372                                           ! 817   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03373 0B31                        00            .byte	0
03374 0B32                        00            .byte	0
03375 0B33                        00            .byte	0
03376 0B34                        00            .byte	0
03377 0B35                        00            .byte	0
03378 0B36                        2A            .byte	$2A
03379 0B37                        00            .byte	0
03380 0B38                        2A            .byte	$2A
03381 0B39                        00            .byte	0
03382 0B3A                        00            .byte	0
03383 0B3B                        2A            .byte	$2A
03384 0B3C                        2A            .byte	$2A
03385 0B3D                        2A            .byte	$2A
03386 0B3E                        00            .byte	0
03387 0B3F                        00            .byte	0
03388 0B40                        2A            .byte	$2A
03389 0B41                        00            .byte	0
03390 0B42                        2A            .byte	$2A
03391 0B43                        2A            .byte	$2A
03392 0B44                        15            .byte	$15
03393 0B45                        00            .byte	0
03394 0B46                        2A            .byte	$2A
03395 0B47                        2A            .byte	$2A
03396 0B48                        2A            .byte	$2A
03397                                           ! 818   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03398 0B49                        00            .byte	0
03399 0B4A                        00            .byte	0
03400 0B4B                        00            .byte	0
03401 0B4C                        00            .byte	0
03402 0B4D                        00            .byte	0
03403 0B4E                        2A            .byte	$2A
03404 0B4F                        00            .byte	0
03405 0B50                        2A            .byte	$2A
03406 0B51                        00            .byte	0
03407 0B52                        00            .byte	0
03408 0B53                        2A            .byte	$2A
03409 0B54                        2A            .byte	$2A
03410 0B55                        2A            .byte	$2A
03411 0B56                        00            .byte	0
03412 0B57                        00            .byte	0
03413 0B58                        2A            .byte	$2A
03414 0B59                        00            .byte	0
03415 0B5A                        2A            .byte	$2A
03416 0B5B                        2A            .byte	$2A
03417 0B5C                        15            .byte	$15
03418 0B5D                        00            .byte	0
03419 0B5E                        2A            .byte	$2A
03420 0B5F                        2A            .byte	$2A
03421 0B60                        2A            .byte	$2A
03422                                           ! 819   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03423 0B61                        15            .byte	$15
03424 0B62                        15            .byte	$15
03425 0B63                        15            .byte	$15
03426 0B64                        15            .byte	$15
03427 0B65                        15            .byte	$15
03428 0B66                        3F            .byte	$3F
03429 0B67                        15            .byte	$15
03430 0B68                        3F            .byte	$3F
03431 0B69                        15            .byte	$15
03432 0B6A                        15            .byte	$15
03433 0B6B                        3F            .byte	$3F
03434 0B6C                        3F            .byte	$3F
03435 0B6D                        3F            .byte	$3F
03436 0B6E                        15            .byte	$15
03437 0B6F                        15            .byte	$15
03438 0B70                        3F            .byte	$3F
03439 0B71                        15            .byte	$15
03440 0B72                        3F            .byte	$3F
03441 0B73                        3F            .byte	$3F
03442 0B74                        3F            .byte	$3F
03443 0B75                        15            .byte	$15
03444 0B76                        3F            .byte	$3F
03445 0B77                        3F            .byte	$3F
03446 0B78                        3F            .byte	$3F
03447                                           ! 820   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03448 0B79                        15            .byte	$15
03449 0B7A                        15            .byte	$15
03450 0B7B                        15            .byte	$15
03451 0B7C                        15            .byte	$15
03452 0B7D                        15            .byte	$15
03453 0B7E                        3F            .byte	$3F
03454 0B7F                        15            .byte	$15
03455 0B80                        3F            .byte	$3F
03456 0B81                        15            .byte	$15
03457 0B82                        15            .byte	$15
03458 0B83                        3F            .byte	$3F
03459 0B84                        3F            .byte	$3F
03460 0B85                        3F            .byte	$3F
03461 0B86                        15            .byte	$15
03462 0B87                        15            .byte	$15
03463 0B88                        3F            .byte	$3F
03464 0B89                        15            .byte	$15
03465 0B8A                        3F            .byte	$3F
03466 0B8B                        3F            .byte	$3F
03467 0B8C                        3F            .byte	$3F
03468 0B8D                        15            .byte	$15
03469 0B8E                        3F            .byte	$3F
03470 0B8F                        3F            .byte	$3F
03471                                           ! 821 };
03472 0B90                        3F            .byte	$3F
03473                                           !BCC_EOS
03474                                           ! 822 static Bit8u palette2[63+1][3]=
03475                                           ! 823 {
03476                       00000B91            _palette2:
03477                                           ! 824   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03478 0B91                        00            .byte	0
03479 0B92                        00            .byte	0
03480 0B93                        00            .byte	0
03481 0B94                        00            .byte	0
03482 0B95                        00            .byte	0
03483 0B96                        2A            .byte	$2A
03484 0B97                        00            .byte	0
03485 0B98                        2A            .byte	$2A
03486 0B99                        00            .byte	0
03487 0B9A                        00            .byte	0
03488 0B9B                        2A            .byte	$2A
03489 0B9C                        2A            .byte	$2A
03490 0B9D                        2A            .byte	$2A
03491 0B9E                        00            .byte	0
03492 0B9F                        00            .byte	0
03493 0BA0                        2A            .byte	$2A
03494 0BA1                        00            .byte	0
03495 0BA2                        2A            .byte	$2A
03496 0BA3                        2A            .byte	$2A
03497 0BA4                        2A            .byte	$2A
03498 0BA5                        00            .byte	0
03499 0BA6                        2A            .byte	$2A
03500 0BA7                        2A            .byte	$2A
03501 0BA8                        2A            .byte	$2A
03502                                           ! 825   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00
03503 0BA9                        00            .byte	0
03504 0BAA                        00            .byte	0
03505 0BAB                        15            .byte	$15
03506 0BAC                        00            .byte	0
03507 0BAD                        00            .byte	0
03508 0BAE                        3F            .byte	$3F
03509                                           ! 825 ,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03510 0BAF                        00            .byte	0
03511 0BB0                        2A            .byte	$2A
03512 0BB1                        15            .byte	$15
03513 0BB2                        00            .byte	0
03514 0BB3                        2A            .byte	$2A
03515 0BB4                        3F            .byte	$3F
03516 0BB5                        2A            .byte	$2A
03517 0BB6                        00            .byte	0
03518 0BB7                        15            .byte	$15
03519 0BB8                        2A            .byte	$2A
03520 0BB9                        00            .byte	0
03521 0BBA                        3F            .byte	$3F
03522 0BBB                        2A            .byte	$2A
03523 0BBC                        2A            .byte	$2A
03524 0BBD                        15            .byte	$15
03525 0BBE                        2A            .byte	$2A
03526 0BBF                        2A            .byte	$2A
03527 0BC0                        3F            .byte	$3F
03528                                           ! 826   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03529 0BC1                        00            .byte	0
03530 0BC2                        15            .byte	$15
03531 0BC3                        00            .byte	0
03532 0BC4                        00            .byte	0
03533 0BC5                        15            .byte	$15
03534 0BC6                        2A            .byte	$2A
03535 0BC7                        00            .byte	0
03536 0BC8                        3F            .byte	$3F
03537 0BC9                        00            .byte	0
03538 0BCA                        00            .byte	0
03539 0BCB                        3F            .byte	$3F
03540 0BCC                        2A            .byte	$2A
03541 0BCD                        2A            .byte	$2A
03542 0BCE                        15            .byte	$15
03543 0BCF                        00            .byte	0
03544 0BD0                        2A            .byte	$2A
03545 0BD1                        15            .byte	$15
03546 0BD2                        2A            .byte	$2A
03547 0BD3                        2A            .byte	$2A
03548 0BD4                        3F            .byte	$3F
03549 0BD5                        00            .byte	0
03550 0BD6                        2A            .byte	$2A
03551 0BD7                        3F            .byte	$3F
03552 0BD8                        2A            .byte	$2A
03553                                           ! 827   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03554 0BD9                        00            .byte	0
03555 0BDA                        15            .byte	$15
03556 0BDB                        15            .byte	$15
03557 0BDC                        00            .byte	0
03558 0BDD                        15            .byte	$15
03559 0BDE                        3F            .byte	$3F
03560 0BDF                        00            .byte	0
03561 0BE0                        3F            .byte	$3F
03562 0BE1                        15            .byte	$15
03563 0BE2                        00            .byte	0
03564 0BE3                        3F            .byte	$3F
03565 0BE4                        3F            .byte	$3F
03566 0BE5                        2A            .byte	$2A
03567 0BE6                        15            .byte	$15
03568 0BE7                        15            .byte	$15
03569 0BE8                        2A            .byte	$2A
03570 0BE9                        15            .byte	$15
03571 0BEA                        3F            .byte	$3F
03572 0BEB                        2A            .byte	$2A
03573 0BEC                        3F            .byte	$3F
03574 0BED                        15            .byte	$15
03575 0BEE                        2A            .byte	$2A
03576 0BEF                        3F            .byte	$3F
03577 0BF0                        3F            .byte	$3F
03578                                           ! 828   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03579 0BF1                        15            .byte	$15
03580 0BF2                        00            .byte	0
03581 0BF3                        00            .byte	0
03582 0BF4                        15            .byte	$15
03583 0BF5                        00            .byte	0
03584 0BF6                        2A            .byte	$2A
03585 0BF7                        15            .byte	$15
03586 0BF8                        2A            .byte	$2A
03587 0BF9                        00            .byte	0
03588 0BFA                        15            .byte	$15
03589 0BFB                        2A            .byte	$2A
03590 0BFC                        2A            .byte	$2A
03591 0BFD                        3F            .byte	$3F
03592 0BFE                        00            .byte	0
03593 0BFF                        00            .byte	0
03594 0C00                        3F            .byte	$3F
03595 0C01                        00            .byte	0
03596 0C02                        2A            .byte	$2A
03597 0C03                        3F            .byte	$3F
03598 0C04                        2A            .byte	$2A
03599 0C05                        00            .byte	0
03600 0C06                        3F            .byte	$3F
03601 0C07                        2A            .byte	$2A
03602 0C08                        2A            .byte	$2A
03603                                           ! 829   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03604 0C09                        15            .byte	$15
03605 0C0A                        00            .byte	0
03606 0C0B                        15            .byte	$15
03607 0C0C                        15            .byte	$15
03608 0C0D                        00            .byte	0
03609 0C0E                        3F            .byte	$3F
03610 0C0F                        15            .byte	$15
03611 0C10                        2A            .byte	$2A
03612 0C11                        15            .byte	$15
03613 0C12                        15            .byte	$15
03614 0C13                        2A            .byte	$2A
03615 0C14                        3F            .byte	$3F
03616 0C15                        3F            .byte	$3F
03617 0C16                        00            .byte	0
03618 0C17                        15            .byte	$15
03619 0C18                        3F            .byte	$3F
03620 0C19                        00            .byte	0
03621 0C1A                        3F            .byte	$3F
03622 0C1B                        3F            .byte	$3F
03623 0C1C                        2A            .byte	$2A
03624 0C1D                        15            .byte	$15
03625 0C1E                        3F            .byte	$3F
03626 0C1F                        2A            .byte	$2A
03627 0C20                        3F            .byte	$3F
03628                                           ! 830   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03629 0C21                        15            .byte	$15
03630 0C22                        15            .byte	$15
03631 0C23                        00            .byte	0
03632 0C24                        15            .byte	$15
03633 0C25                        15            .byte	$15
03634 0C26                        2A            .byte	$2A
03635 0C27                        15            .byte	$15
03636 0C28                        3F            .byte	$3F
03637 0C29                        00            .byte	0
03638 0C2A                        15            .byte	$15
03639 0C2B                        3F            .byte	$3F
03640 0C2C                        2A            .byte	$2A
03641 0C2D                        3F            .byte	$3F
03642 0C2E                        15            .byte	$15
03643 0C2F                        00            .byte	0
03644 0C30                        3F            .byte	$3F
03645 0C31                        15            .byte	$15
03646 0C32                        2A            .byte	$2A
03647 0C33                        3F            .byte	$3F
03648 0C34                        3F            .byte	$3F
03649 0C35                        00            .byte	0
03650 0C36                        3F            .byte	$3F
03651 0C37                        3F            .byte	$3F
03652 0C38                        2A            .byte	$2A
03653                                           ! 831   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03654 0C39                        15            .byte	$15
03655 0C3A                        15            .byte	$15
03656 0C3B                        15            .byte	$15
03657 0C3C                        15            .byte	$15
03658 0C3D                        15            .byte	$15
03659 0C3E                        3F            .byte	$3F
03660 0C3F                        15            .byte	$15
03661 0C40                        3F            .byte	$3F
03662 0C41                        15            .byte	$15
03663 0C42                        15            .byte	$15
03664 0C43                        3F            .byte	$3F
03665 0C44                        3F            .byte	$3F
03666 0C45                        3F            .byte	$3F
03667 0C46                        15            .byte	$15
03668 0C47                        15            .byte	$15
03669 0C48                        3F            .byte	$3F
03670 0C49                        15            .byte	$15
03671 0C4A                        3F            .byte	$3F
03672 0C4B                        3F            .byte	$3F
03673 0C4C                        3F            .byte	$3F
03674 0C4D                        15            .byte	$15
03675 0C4E                        3F            .byte	$3F
03676 0C4F                        3F            .byte	$3F
03677                                           ! 832 };
03678 0C50                        3F            .byte	$3F
03679                                           !BCC_EOS
03680                                           ! 833 static Bit8u palette3[256][3]=
03681                                           ! 834 {
03682                       00000C51            _palette3:
03683                                           ! 835   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03684 0C51                        00            .byte	0
03685 0C52                        00            .byte	0
03686 0C53                        00            .byte	0
03687 0C54                        00            .byte	0
03688 0C55                        00            .byte	0
03689 0C56                        2A            .byte	$2A
03690 0C57                        00            .byte	0
03691 0C58                        2A            .byte	$2A
03692 0C59                        00            .byte	0
03693 0C5A                        00            .byte	0
03694 0C5B                        2A            .byte	$2A
03695 0C5C                        2A            .byte	$2A
03696 0C5D                        2A            .byte	$2A
03697 0C5E                        00            .byte	0
03698 0C5F                        00            .byte	0
03699 0C60                        2A            .byte	$2A
03700 0C61                        00            .byte	0
03701 0C62                        2A            .byte	$2A
03702 0C63                        2A            .byte	$2A
03703 0C64                        15            .byte	$15
03704 0C65                        00            .byte	0
03705 0C66                        2A            .byte	$2A
03706 0C67                        2A            .byte	$2A
03707 0C68                        2A            .byte	$2A
03708                                           ! 836   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03709 0C69                        15            .byte	$15
03710 0C6A                        15            .byte	$15
03711 0C6B                        15            .byte	$15
03712 0C6C                        15            .byte	$15
03713 0C6D                        15            .byte	$15
03714 0C6E                        3F            .byte	$3F
03715 0C6F                        15            .byte	$15
03716 0C70                        3F            .byte	$3F
03717 0C71                        15            .byte	$15
03718 0C72                        15            .byte	$15
03719 0C73                        3F            .byte	$3F
03720 0C74                        3F            .byte	$3F
03721 0C75                        3F            .byte	$3F
03722 0C76                        15            .byte	$15
03723 0C77                        15            .byte	$15
03724 0C78                        3F            .byte	$3F
03725 0C79                        15            .byte	$15
03726 0C7A                        3F            .byte	$3F
03727 0C7B                        3F            .byte	$3F
03728 0C7C                        3F            .byte	$3F
03729 0C7D                        15            .byte	$15
03730 0C7E                        3F            .byte	$3F
03731 0C7F                        3F            .byte	$3F
03732 0C80                        3F            .byte	$3F
03733                                           ! 837   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03734 0C81                        00            .byte	0
03735 0C82                        00            .byte	0
03736 0C83                        00            .byte	0
03737 0C84                        05            .byte	5
03738 0C85                        05            .byte	5
03739 0C86                        05            .byte	5
03740 0C87                        08            .byte	8
03741 0C88                        08            .byte	8
03742 0C89                        08            .byte	8
03743 0C8A                        0B            .byte	$B
03744 0C8B                        0B            .byte	$B
03745 0C8C                        0B            .byte	$B
03746 0C8D                        0E            .byte	$E
03747 0C8E                        0E            .byte	$E
03748 0C8F                        0E            .byte	$E
03749 0C90                        11            .byte	$11
03750 0C91                        11            .byte	$11
03751 0C92                        11            .byte	$11
03752 0C93                        14            .byte	$14
03753 0C94                        14            .byte	$14
03754 0C95                        14            .byte	$14
03755 0C96                        18            .byte	$18
03756 0C97                        18            .byte	$18
03757 0C98                        18            .byte	$18
03758                                           ! 838   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03759 0C99                        1C            .byte	$1C
03760 0C9A                        1C            .byte	$1C
03761 0C9B                        1C            .byte	$1C
03762 0C9C                        20            .byte	$20
03763 0C9D                        20            .byte	$20
03764 0C9E                        20            .byte	$20
03765 0C9F                        24            .byte	$24
03766 0CA0                        24            .byte	$24
03767 0CA1                        24            .byte	$24
03768 0CA2                        28            .byte	$28
03769 0CA3                        28            .byte	$28
03770 0CA4                        28            .byte	$28
03771 0CA5                        2D            .byte	$2D
03772 0CA6                        2D            .byte	$2D
03773 0CA7                        2D            .byte	$2D
03774 0CA8                        32            .byte	$32
03775 0CA9                        32            .byte	$32
03776 0CAA                        32            .byte	$32
03777 0CAB                        38            .byte	$38
03778 0CAC                        38            .byte	$38
03779 0CAD                        38            .byte	$38
03780 0CAE                        3F            .byte	$3F
03781 0CAF                        3F            .byte	$3F
03782 0CB0                        3F            .byte	$3F
03783                                           ! 839   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03784 0CB1                        00            .byte	0
03785 0CB2                        00            .byte	0
03786 0CB3                        3F            .byte	$3F
03787 0CB4                        10            .byte	$10
03788 0CB5                        00            .byte	0
03789 0CB6                        3F            .byte	$3F
03790 0CB7                        1F            .byte	$1F
03791 0CB8                        00            .byte	0
03792 0CB9                        3F            .byte	$3F
03793 0CBA                        2F            .byte	$2F
03794 0CBB                        00            .byte	0
03795 0CBC                        3F            .byte	$3F
03796 0CBD                        3F            .byte	$3F
03797 0CBE                        00            .byte	0
03798 0CBF                        3F            .byte	$3F
03799 0CC0                        3F            .byte	$3F
03800 0CC1                        00            .byte	0
03801 0CC2                        2F            .byte	$2F
03802 0CC3                        3F            .byte	$3F
03803 0CC4                        00            .byte	0
03804 0CC5                        1F            .byte	$1F
03805 0CC6                        3F            .byte	$3F
03806 0CC7                        00            .byte	0
03807 0CC8                        10            .byte	$10
03808                                           ! 840   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03809 0CC9                        3F            .byte	$3F
03810 0CCA                        00            .byte	0
03811 0CCB                        00            .byte	0
03812 0CCC                        3F            .byte	$3F
03813 0CCD                        10            .byte	$10
03814 0CCE                        00            .byte	0
03815 0CCF                        3F            .byte	$3F
03816 0CD0                        1F            .byte	$1F
03817 0CD1                        00            .byte	0
03818 0CD2                        3F            .byte	$3F
03819 0CD3                        2F            .byte	$2F
03820 0CD4                        00            .byte	0
03821 0CD5                        3F            .byte	$3F
03822 0CD6                        3F            .byte	$3F
03823 0CD7                        00            .byte	0
03824 0CD8                        2F            .byte	$2F
03825 0CD9                        3F            .byte	$3F
03826 0CDA                        00            .byte	0
03827 0CDB                        1F            .byte	$1F
03828 0CDC                        3F            .byte	$3F
03829 0CDD                        00            .byte	0
03830 0CDE                        10            .byte	$10
03831 0CDF                        3F            .byte	$3F
03832 0CE0                        00            .byte	0
03833                                           ! 841   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03834 0CE1                        00            .byte	0
03835 0CE2                        3F            .byte	$3F
03836 0CE3                        00            .byte	0
03837 0CE4                        00            .byte	0
03838 0CE5                        3F            .byte	$3F
03839 0CE6                        10            .byte	$10
03840 0CE7                        00            .byte	0
03841 0CE8                        3F            .byte	$3F
03842 0CE9                        1F            .byte	$1F
03843 0CEA                        00            .byte	0
03844 0CEB                        3F            .byte	$3F
03845 0CEC                        2F            .byte	$2F
03846 0CED                        00            .byte	0
03847 0CEE                        3F            .byte	$3F
03848 0CEF                        3F            .byte	$3F
03849 0CF0                        00            .byte	0
03850 0CF1                        2F            .byte	$2F
03851 0CF2                        3F            .byte	$3F
03852 0CF3                        00            .byte	0
03853 0CF4                        1F            .byte	$1F
03854 0CF5                        3F            .byte	$3F
03855 0CF6                        00            .byte	0
03856 0CF7                        10            .byte	$10
03857 0CF8                        3F            .byte	$3F
03858                                           ! 842   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03859 0CF9                        1F            .byte	$1F
03860 0CFA                        1F            .byte	$1F
03861 0CFB                        3F            .byte	$3F
03862 0CFC                        27            .byte	$27
03863 0CFD                        1F            .byte	$1F
03864 0CFE                        3F            .byte	$3F
03865 0CFF                        2F            .byte	$2F
03866 0D00                        1F            .byte	$1F
03867 0D01                        3F            .byte	$3F
03868 0D02                        37            .byte	$37
03869 0D03                        1F            .byte	$1F
03870 0D04                        3F            .byte	$3F
03871 0D05                        3F            .byte	$3F
03872 0D06                        1F            .byte	$1F
03873 0D07                        3F            .byte	$3F
03874 0D08                        3F            .byte	$3F
03875 0D09                        1F            .byte	$1F
03876 0D0A                        37            .byte	$37
03877 0D0B                        3F            .byte	$3F
03878 0D0C                        1F            .byte	$1F
03879 0D0D                        2F            .byte	$2F
03880 0D0E                        3F            .byte	$3F
03881 0D0F                        1F            .byte	$1F
03882 0D10                        27            .byte	$27
03883                                           ! 843   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2
03884 0D11                        3F            .byte	$3F
03885 0D12                        1F            .byte	$1F
03886 0D13                        1F            .byte	$1F
03887 0D14                        3F            .byte	$3F
03888 0D15                        27            .byte	$27
03889 0D16                        1F            .byte	$1F
03890 0D17                        3F            .byte	$3F
03891 0D18                        2F            .byte	$2F
03892 0D19                        1F            .byte	$1F
03893 0D1A                        3F            .byte	$3F
03894 0D1B                        37            .byte	$37
03895 0D1C                        1F            .byte	$1F
03896 0D1D                        3F            .byte	$3F
03897 0D1E                        3F            .byte	$3F
03898 0D1F                        1F            .byte	$1F
03899 0D20                        37            .byte	$37
03900 0D21                        3F            .byte	$3F
03901 0D22                        1F            .byte	$1F
03902                                           ! 843 f,0x3f,0x1f, 0x27,0x3f,0x1f,
03903 0D23                        2F            .byte	$2F
03904 0D24                        3F            .byte	$3F
03905 0D25                        1F            .byte	$1F
03906 0D26                        27            .byte	$27
03907 0D27                        3F            .byte	$3F
03908 0D28                        1F            .byte	$1F
03909                                           ! 844   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03910 0D29                        1F            .byte	$1F
03911 0D2A                        3F            .byte	$3F
03912 0D2B                        1F            .byte	$1F
03913 0D2C                        1F            .byte	$1F
03914 0D2D                        3F            .byte	$3F
03915 0D2E                        27            .byte	$27
03916 0D2F                        1F            .byte	$1F
03917 0D30                        3F            .byte	$3F
03918 0D31                        2F            .byte	$2F
03919 0D32                        1F            .byte	$1F
03920 0D33                        3F            .byte	$3F
03921 0D34                        37            .byte	$37
03922 0D35                        1F            .byte	$1F
03923 0D36                        3F            .byte	$3F
03924 0D37                        3F            .byte	$3F
03925 0D38                        1F            .byte	$1F
03926 0D39                        37            .byte	$37
03927 0D3A                        3F            .byte	$3F
03928 0D3B                        1F            .byte	$1F
03929 0D3C                        2F            .byte	$2F
03930 0D3D                        3F            .byte	$3F
03931 0D3E                        1F            .byte	$1F
03932 0D3F                        27            .byte	$27
03933 0D40                        3F            .byte	$3F
03934                                           ! 845   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03935 0D41                        2D            .byte	$2D
03936 0D42                        2D            .byte	$2D
03937 0D43                        3F            .byte	$3F
03938 0D44                        31            .byte	$31
03939 0D45                        2D            .byte	$2D
03940 0D46                        3F            .byte	$3F
03941 0D47                        36            .byte	$36
03942 0D48                        2D            .byte	$2D
03943 0D49                        3F            .byte	$3F
03944 0D4A                        3A            .byte	$3A
03945 0D4B                        2D            .byte	$2D
03946 0D4C                        3F            .byte	$3F
03947 0D4D                        3F            .byte	$3F
03948 0D4E                        2D            .byte	$2D
03949 0D4F                        3F            .byte	$3F
03950 0D50                        3F            .byte	$3F
03951 0D51                        2D            .byte	$2D
03952 0D52                        3A            .byte	$3A
03953 0D53                        3F            .byte	$3F
03954 0D54                        2D            .byte	$2D
03955 0D55                        36            .byte	$36
03956 0D56                        3F            .byte	$3F
03957 0D57                        2D            .byte	$2D
03958 0D58                        31            .byte	$31
03959                                           ! 846   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03960 0D59                        3F            .byte	$3F
03961 0D5A                        2D            .byte	$2D
03962 0D5B                        2D            .byte	$2D
03963 0D5C                        3F            .byte	$3F
03964 0D5D                        31            .byte	$31
03965 0D5E                        2D            .byte	$2D
03966 0D5F                        3F            .byte	$3F
03967 0D60                        36            .byte	$36
03968 0D61                        2D            .byte	$2D
03969 0D62                        3F            .byte	$3F
03970 0D63                        3A            .byte	$3A
03971 0D64                        2D            .byte	$2D
03972 0D65                        3F            .byte	$3F
03973 0D66                        3F            .byte	$3F
03974 0D67                        2D            .byte	$2D
03975 0D68                        3A            .byte	$3A
03976 0D69                        3F            .byte	$3F
03977 0D6A                        2D            .byte	$2D
03978 0D6B                        36            .byte	$36
03979 0D6C                        3F            .byte	$3F
03980 0D6D                        2D            .byte	$2D
03981 0D6E                        31            .byte	$31
03982 0D6F                        3F            .byte	$3F
03983 0D70                        2D            .byte	$2D
03984                                           ! 847   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03985 0D71                        2D            .byte	$2D
03986 0D72                        3F            .byte	$3F
03987 0D73                        2D            .byte	$2D
03988 0D74                        2D            .byte	$2D
03989 0D75                        3F            .byte	$3F
03990 0D76                        31            .byte	$31
03991 0D77                        2D            .byte	$2D
03992 0D78                        3F            .byte	$3F
03993 0D79                        36            .byte	$36
03994 0D7A                        2D            .byte	$2D
03995 0D7B                        3F            .byte	$3F
03996 0D7C                        3A            .byte	$3A
03997 0D7D                        2D            .byte	$2D
03998 0D7E                        3F            .byte	$3F
03999 0D7F                        3F            .byte	$3F
04000 0D80                        2D            .byte	$2D
04001 0D81                        3A            .byte	$3A
04002 0D82                        3F            .byte	$3F
04003 0D83                        2D            .byte	$2D
04004 0D84                        36            .byte	$36
04005 0D85                        3F            .byte	$3F
04006 0D86                        2D            .byte	$2D
04007 0D87                        31            .byte	$31
04008 0D88                        3F            .byte	$3F
04009                                           ! 848   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
04010 0D89                        00            .byte	0
04011 0D8A                        00            .byte	0
04012 0D8B                        1C            .byte	$1C
04013 0D8C                        07            .byte	7
04014 0D8D                        00            .byte	0
04015 0D8E                        1C            .byte	$1C
04016 0D8F                        0E            .byte	$E
04017 0D90                        00            .byte	0
04018 0D91                        1C            .byte	$1C
04019 0D92                        15            .byte	$15
04020 0D93                        00            .byte	0
04021 0D94                        1C            .byte	$1C
04022 0D95                        1C            .byte	$1C
04023 0D96                        00            .byte	0
04024 0D97                        1C            .byte	$1C
04025 0D98                        1C            .byte	$1C
04026 0D99                        00            .byte	0
04027 0D9A                        15            .byte	$15
04028 0D9B                        1C            .byte	$1C
04029 0D9C                        00            .byte	0
04030 0D9D                        0E            .byte	$E
04031 0D9E                        1C            .byte	$1C
04032 0D9F                        00            .byte	0
04033 0DA0                        07            .byte	7
04034                                           ! 849   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04035 0DA1                        1C            .byte	$1C
04036 0DA2                        00            .byte	0
04037 0DA3                        00            .byte	0
04038 0DA4                        1C            .byte	$1C
04039 0DA5                        07            .byte	7
04040 0DA6                        00            .byte	0
04041 0DA7                        1C            .byte	$1C
04042 0DA8                        0E            .byte	$E
04043 0DA9                        00            .byte	0
04044 0DAA                        1C            .byte	$1C
04045 0DAB                        15            .byte	$15
04046 0DAC                        00            .byte	0
04047 0DAD                        1C            .byte	$1C
04048 0DAE                        1C            .byte	$1C
04049 0DAF                        00            .byte	0
04050 0DB0                        15            .byte	$15
04051 0DB1                        1C            .byte	$1C
04052 0DB2                        00            .byte	0
04053 0DB3                        0E            .byte	$E
04054 0DB4                        1C            .byte	$1C
04055 0DB5                        00            .byte	0
04056 0DB6                        07            .byte	7
04057 0DB7                        1C            .byte	$1C
04058 0DB8                        00            .byte	0
04059                                           ! 850   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04060 0DB9                        00            .byte	0
04061 0DBA                        1C            .byte	$1C
04062 0DBB                        00            .byte	0
04063 0DBC                        00            .byte	0
04064 0DBD                        1C            .byte	$1C
04065 0DBE                        07            .byte	7
04066 0DBF                        00            .byte	0
04067 0DC0                        1C            .byte	$1C
04068 0DC1                        0E            .byte	$E
04069 0DC2                        00            .byte	0
04070 0DC3                        1C            .byte	$1C
04071 0DC4                        15            .byte	$15
04072 0DC5                        00            .byte	0
04073 0DC6                        1C            .byte	$1C
04074 0DC7                        1C            .byte	$1C
04075 0DC8                        00            .byte	0
04076 0DC9                        15            .byte	$15
04077 0DCA                        1C            .byte	$1C
04078 0DCB                        00            .byte	0
04079 0DCC                        0E            .byte	$E
04080 0DCD                        1C            .byte	$1C
04081 0DCE                        00            .byte	0
04082 0DCF                        07            .byte	7
04083 0DD0                        1C            .byte	$1C
04084                                           ! 851   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04085 0DD1                        0E            .byte	$E
04086 0DD2                        0E            .byte	$E
04087 0DD3                        1C            .byte	$1C
04088 0DD4                        11            .byte	$11
04089 0DD5                        0E            .byte	$E
04090 0DD6                        1C            .byte	$1C
04091 0DD7                        15            .byte	$15
04092 0DD8                        0E            .byte	$E
04093 0DD9                        1C            .byte	$1C
04094 0DDA                        18            .byte	$18
04095 0DDB                        0E            .byte	$E
04096 0DDC                        1C            .byte	$1C
04097 0DDD                        1C            .byte	$1C
04098 0DDE                        0E            .byte	$E
04099 0DDF                        1C            .byte	$1C
04100 0DE0                        1C            .byte	$1C
04101 0DE1                        0E            .byte	$E
04102 0DE2                        18            .byte	$18
04103 0DE3                        1C            .byte	$1C
04104 0DE4                        0E            .byte	$E
04105 0DE5                        15            .byte	$15
04106 0DE6                        1C            .byte	$1C
04107 0DE7                        0E            .byte	$E
04108 0DE8                        11            .byte	$11
04109                                           ! 852   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04110 0DE9                        1C            .byte	$1C
04111 0DEA                        0E            .byte	$E
04112 0DEB                        0E            .byte	$E
04113 0DEC                        1C            .byte	$1C
04114 0DED                        11            .byte	$11
04115 0DEE                        0E            .byte	$E
04116 0DEF                        1C            .byte	$1C
04117 0DF0                        15            .byte	$15
04118 0DF1                        0E            .byte	$E
04119 0DF2                        1C            .byte	$1C
04120 0DF3                        18            .byte	$18
04121 0DF4                        0E            .byte	$E
04122 0DF5                        1C            .byte	$1C
04123 0DF6                        1C            .byte	$1C
04124 0DF7                        0E            .byte	$E
04125 0DF8                        18            .byte	$18
04126 0DF9                        1C            .byte	$1C
04127 0DFA                        0E            .byte	$E
04128 0DFB                        15            .byte	$15
04129 0DFC                        1C            .byte	$1C
04130 0DFD                        0E            .byte	$E
04131 0DFE                        11            .byte	$11
04132 0DFF                        1C            .byte	$1C
04133 0E00                        0E            .byte	$E
04134                                           ! 853   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04135 0E01                        0E            .byte	$E
04136 0E02                        1C            .byte	$1C
04137 0E03                        0E            .byte	$E
04138 0E04                        0E            .byte	$E
04139 0E05                        1C            .byte	$1C
04140 0E06                        11            .byte	$11
04141 0E07                        0E            .byte	$E
04142 0E08                        1C            .byte	$1C
04143 0E09                        15            .byte	$15
04144 0E0A                        0E            .byte	$E
04145 0E0B                        1C            .byte	$1C
04146 0E0C                        18            .byte	$18
04147 0E0D                        0E            .byte	$E
04148 0E0E                        1C            .byte	$1C
04149 0E0F                        1C            .byte	$1C
04150 0E10                        0E            .byte	$E
04151 0E11                        18            .byte	$18
04152 0E12                        1C            .byte	$1C
04153 0E13                        0E            .byte	$E
04154 0E14                        15            .byte	$15
04155 0E15                        1C            .byte	$1C
04156 0E16                        0E            .byte	$E
04157 0E17                        11            .byte	$11
04158 0E18                        1C            .byte	$1C
04159                                           ! 854   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04160 0E19                        14            .byte	$14
04161 0E1A                        14            .byte	$14
04162 0E1B                        1C            .byte	$1C
04163 0E1C                        16            .byte	$16
04164 0E1D                        14            .byte	$14
04165 0E1E                        1C            .byte	$1C
04166 0E1F                        18            .byte	$18
04167 0E20                        14            .byte	$14
04168 0E21                        1C            .byte	$1C
04169 0E22                        1A            .byte	$1A
04170 0E23                        14            .byte	$14
04171 0E24                        1C            .byte	$1C
04172 0E25                        1C            .byte	$1C
04173 0E26                        14            .byte	$14
04174 0E27                        1C            .byte	$1C
04175 0E28                        1C            .byte	$1C
04176 0E29                        14            .byte	$14
04177 0E2A                        1A            .byte	$1A
04178 0E2B                        1C            .byte	$1C
04179 0E2C                        14            .byte	$14
04180 0E2D                        18            .byte	$18
04181 0E2E                        1C            .byte	$1C
04182 0E2F                        14            .byte	$14
04183 0E30                        16            .byte	$16
04184                                           ! 855   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04185 0E31                        1C            .byte	$1C
04186 0E32                        14            .byte	$14
04187 0E33                        14            .byte	$14
04188 0E34                        1C            .byte	$1C
04189 0E35                        16            .byte	$16
04190 0E36                        14            .byte	$14
04191 0E37                        1C            .byte	$1C
04192 0E38                        18            .byte	$18
04193 0E39                        14            .byte	$14
04194 0E3A                        1C            .byte	$1C
04195 0E3B                        1A            .byte	$1A
04196 0E3C                        14            .byte	$14
04197 0E3D                        1C            .byte	$1C
04198 0E3E                        1C            .byte	$1C
04199 0E3F                        14            .byte	$14
04200 0E40                        1A            .byte	$1A
04201 0E41                        1C            .byte	$1C
04202 0E42                        14            .byte	$14
04203 0E43                        18            .byte	$18
04204 0E44                        1C            .byte	$1C
04205 0E45                        14            .byte	$14
04206 0E46                        16            .byte	$16
04207 0E47                        1C            .byte	$1C
04208 0E48                        14            .byte	$14
04209                                           ! 856   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04210 0E49                        14            .byte	$14
04211 0E4A                        1C            .byte	$1C
04212 0E4B                        14            .byte	$14
04213 0E4C                        14            .byte	$14
04214 0E4D                        1C            .byte	$1C
04215 0E4E                        16            .byte	$16
04216 0E4F                        14            .byte	$14
04217 0E50                        1C            .byte	$1C
04218 0E51                        18            .byte	$18
04219 0E52                        14            .byte	$14
04220 0E53                        1C            .byte	$1C
04221 0E54                        1A            .byte	$1A
04222 0E55                        14            .byte	$14
04223 0E56                        1C            .byte	$1C
04224 0E57                        1C            .byte	$1C
04225 0E58                        14            .byte	$14
04226 0E59                        1A            .byte	$1A
04227 0E5A                        1C            .byte	$1C
04228 0E5B                        14            .byte	$14
04229 0E5C                        18            .byte	$18
04230 0E5D                        1C            .byte	$1C
04231 0E5E                        14            .byte	$14
04232 0E5F                        16            .byte	$16
04233 0E60                        1C            .byte	$1C
04234                                           ! 857   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04235 0E61                        00            .byte	0
04236 0E62                        00            .byte	0
04237 0E63                        10            .byte	$10
04238 0E64                        04            .byte	4
04239 0E65                        00            .byte	0
04240 0E66                        10            .byte	$10
04241 0E67                        08            .byte	8
04242 0E68                        00            .byte	0
04243 0E69                        10            .byte	$10
04244 0E6A                        0C            .byte	$C
04245 0E6B                        00            .byte	0
04246 0E6C                        10            .byte	$10
04247 0E6D                        10            .byte	$10
04248 0E6E                        00            .byte	0
04249 0E6F                        10            .byte	$10
04250 0E70                        10            .byte	$10
04251 0E71                        00            .byte	0
04252 0E72                        0C            .byte	$C
04253 0E73                        10            .byte	$10
04254 0E74                        00            .byte	0
04255 0E75                        08            .byte	8
04256 0E76                        10            .byte	$10
04257 0E77                        00            .byte	0
04258 0E78                        04            .byte	4
04259                                           ! 858   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
04260 0E79                        10            .byte	$10
04261 0E7A                        00            .byte	0
04262 0E7B                        00            .byte	0
04263 0E7C                        10            .byte	$10
04264 0E7D                        04            .byte	4
04265 0E7E                        00            .byte	0
04266 0E7F                        10            .byte	$10
04267 0E80                        08            .byte	8
04268 0E81                        00            .byte	0
04269 0E82                        10            .byte	$10
04270 0E83                        0C            .byte	$C
04271 0E84                        00            .byte	0
04272 0E85                        10            .byte	$10
04273 0E86                        10            .byte	$10
04274 0E87                        00            .byte	0
04275 0E88                        0C            .byte	$C
04276 0E89                        10            .byte	$10
04277 0E8A                        00            .byte	0
04278 0E8B                        08            .byte	8
04279 0E8C                        10            .byte	$10
04280 0E8D                        00            .byte	0
04281 0E8E                        04            .byte	4
04282 0E8F                        10            .byte	$10
04283 0E90                        00            .byte	0
04284                                           ! 859   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x0
04285 0E91                        00            .byte	0
04286 0E92                        10            .byte	$10
04287 0E93                        00            .byte	0
04288 0E94                        00            .byte	0
04289 0E95                        10            .byte	$10
04290 0E96                        04            .byte	4
04291 0E97                        00            .byte	0
04292 0E98                        10            .byte	$10
04293 0E99                        08            .byte	8
04294 0E9A                        00            .byte	0
04295 0E9B                        10            .byte	$10
04296 0E9C                        0C            .byte	$C
04297                                           ! 859 0,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04298 0E9D                        00            .byte	0
04299 0E9E                        10            .byte	$10
04300 0E9F                        10            .byte	$10
04301 0EA0                        00            .byte	0
04302 0EA1                        0C            .byte	$C
04303 0EA2                        10            .byte	$10
04304 0EA3                        00            .byte	0
04305 0EA4                        08            .byte	8
04306 0EA5                        10            .byte	$10
04307 0EA6                        00            .byte	0
04308 0EA7                        04            .byte	4
04309 0EA8                        10            .byte	$10
04310                                           ! 860   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04311 0EA9                        08            .byte	8
04312 0EAA                        08            .byte	8
04313 0EAB                        10            .byte	$10
04314 0EAC                        0A            .byte	$A
04315 0EAD                        08            .byte	8
04316 0EAE                        10            .byte	$10
04317 0EAF                        0C            .byte	$C
04318 0EB0                        08            .byte	8
04319 0EB1                        10            .byte	$10
04320 0EB2                        0E            .byte	$E
04321 0EB3                        08            .byte	8
04322 0EB4                        10            .byte	$10
04323 0EB5                        10            .byte	$10
04324 0EB6                        08            .byte	8
04325 0EB7                        10            .byte	$10
04326 0EB8                        10            .byte	$10
04327 0EB9                        08            .byte	8
04328 0EBA                        0E            .byte	$E
04329 0EBB                        10            .byte	$10
04330 0EBC                        08            .byte	8
04331 0EBD                        0C            .byte	$C
04332 0EBE                        10            .byte	$10
04333 0EBF                        08            .byte	8
04334 0EC0                        0A            .byte	$A
04335                                           ! 861   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04336 0EC1                        10            .byte	$10
04337 0EC2                        08            .byte	8
04338 0EC3                        08            .byte	8
04339 0EC4                        10            .byte	$10
04340 0EC5                        0A            .byte	$A
04341 0EC6                        08            .byte	8
04342 0EC7                        10            .byte	$10
04343 0EC8                        0C            .byte	$C
04344 0EC9                        08            .byte	8
04345 0ECA                        10            .byte	$10
04346 0ECB                        0E            .byte	$E
04347 0ECC                        08            .byte	8
04348 0ECD                        10            .byte	$10
04349 0ECE                        10            .byte	$10
04350 0ECF                        08            .byte	8
04351 0ED0                        0E            .byte	$E
04352 0ED1                        10            .byte	$10
04353 0ED2                        08            .byte	8
04354 0ED3                        0C            .byte	$C
04355 0ED4                        10            .byte	$10
04356 0ED5                        08            .byte	8
04357 0ED6                        0A            .byte	$A
04358 0ED7                        10            .byte	$10
04359 0ED8                        08            .byte	8
04360                                           ! 862   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04361 0ED9                        08            .byte	8
04362 0EDA                        10            .byte	$10
04363 0EDB                        08            .byte	8
04364 0EDC                        08            .byte	8
04365 0EDD                        10            .byte	$10
04366 0EDE                        0A            .byte	$A
04367 0EDF                        08            .byte	8
04368 0EE0                        10            .byte	$10
04369 0EE1                        0C            .byte	$C
04370 0EE2                        08            .byte	8
04371 0EE3                        10            .byte	$10
04372 0EE4                        0E            .byte	$E
04373 0EE5                        08            .byte	8
04374 0EE6                        10            .byte	$10
04375 0EE7                        10            .byte	$10
04376 0EE8                        08            .byte	8
04377 0EE9                        0E            .byte	$E
04378 0EEA                        10            .byte	$10
04379 0EEB                        08            .byte	8
04380 0EEC                        0C            .byte	$C
04381 0EED                        10            .byte	$10
04382 0EEE                        08            .byte	8
04383 0EEF                        0A            .byte	$A
04384 0EF0                        10            .byte	$10
04385                                           ! 863   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04386 0EF1                        0B            .byte	$B
04387 0EF2                        0B            .byte	$B
04388 0EF3                        10            .byte	$10
04389 0EF4                        0C            .byte	$C
04390 0EF5                        0B            .byte	$B
04391 0EF6                        10            .byte	$10
04392 0EF7                        0D            .byte	$D
04393 0EF8                        0B            .byte	$B
04394 0EF9                        10            .byte	$10
04395 0EFA                        0F            .byte	$F
04396 0EFB                        0B            .byte	$B
04397 0EFC                        10            .byte	$10
04398 0EFD                        10            .byte	$10
04399 0EFE                        0B            .byte	$B
04400 0EFF                        10            .byte	$10
04401 0F00                        10            .byte	$10
04402 0F01                        0B            .byte	$B
04403 0F02                        0F            .byte	$F
04404 0F03                        10            .byte	$10
04405 0F04                        0B            .byte	$B
04406 0F05                        0D            .byte	$D
04407 0F06                        10            .byte	$10
04408 0F07                        0B            .byte	$B
04409 0F08                        0C            .byte	$C
04410                                           ! 864   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04411 0F09                        10            .byte	$10
04412 0F0A                        0B            .byte	$B
04413 0F0B                        0B            .byte	$B
04414 0F0C                        10            .byte	$10
04415 0F0D                        0C            .byte	$C
04416 0F0E                        0B            .byte	$B
04417 0F0F                        10            .byte	$10
04418 0F10                        0D            .byte	$D
04419 0F11                        0B            .byte	$B
04420 0F12                        10            .byte	$10
04421 0F13                        0F            .byte	$F
04422 0F14                        0B            .byte	$B
04423 0F15                        10            .byte	$10
04424 0F16                        10            .byte	$10
04425 0F17                        0B            .byte	$B
04426 0F18                        0F            .byte	$F
04427 0F19                        10            .byte	$10
04428 0F1A                        0B            .byte	$B
04429 0F1B                        0D            .byte	$D
04430 0F1C                        10            .byte	$10
04431 0F1D                        0B            .byte	$B
04432 0F1E                        0C            .byte	$C
04433 0F1F                        10            .byte	$10
04434 0F20                        0B            .byte	$B
04435                                           ! 865   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04436 0F21                        0B            .byte	$B
04437 0F22                        10            .byte	$10
04438 0F23                        0B            .byte	$B
04439 0F24                        0B            .byte	$B
04440 0F25                        10            .byte	$10
04441 0F26                        0C            .byte	$C
04442 0F27                        0B            .byte	$B
04443 0F28                        10            .byte	$10
04444 0F29                        0D            .byte	$D
04445 0F2A                        0B            .byte	$B
04446 0F2B                        10            .byte	$10
04447 0F2C                        0F            .byte	$F
04448 0F2D                        0B            .byte	$B
04449 0F2E                        10            .byte	$10
04450 0F2F                        10            .byte	$10
04451 0F30                        0B            .byte	$B
04452 0F31                        0F            .byte	$F
04453 0F32                        10            .byte	$10
04454 0F33                        0B            .byte	$B
04455 0F34                        0D            .byte	$D
04456 0F35                        10            .byte	$10
04457 0F36                        0B            .byte	$B
04458 0F37                        0C            .byte	$C
04459 0F38                        10            .byte	$10
04460                                           ! 866   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04461 0F39                        00            .byte	0
04462 0F3A                        00            .byte	0
04463 0F3B                        00            .byte	0
04464 0F3C                        00            .byte	0
04465 0F3D                        00            .byte	0
04466 0F3E                        00            .byte	0
04467 0F3F                        00            .byte	0
04468 0F40                        00            .byte	0
04469 0F41                        00            .byte	0
04470 0F42                        00            .byte	0
04471 0F43                        00            .byte	0
04472 0F44                        00            .byte	0
04473 0F45                        00            .byte	0
04474 0F46                        00            .byte	0
04475 0F47                        00            .byte	0
04476 0F48                        00            .byte	0
04477 0F49                        00            .byte	0
04478 0F4A                        00            .byte	0
04479 0F4B                        00            .byte	0
04480 0F4C                        00            .byte	0
04481 0F4D                        00            .byte	0
04482 0F4E                        00            .byte	0
04483 0F4F                        00            .byte	0
04484                                           ! 867 };
04485 0F50                        00            .byte	0
04486                                           !BCC_EOS
04487                                           ! 868 static Bit8u static_functionality[0x10]=
04488                                           ! 869 {
04489                       00000F51            _static_functionality:
04490                                           ! 870          0xff,
04491 0F51                        FF            .byte	$FF
04492                                           ! 871          0xe0,
04493 0F52                        E0            .byte	$E0
04494                                           ! 872          0x0f,
04495 0F53                        0F            .byte	$F
04496                                           ! 873          0x00, 0x00, 0x00, 0x00,
04497 0F54                        00            .byte	0
04498 0F55                        00            .byte	0
04499 0F56                        00            .byte	0
04500 0F57                        00            .byte	0
04501                                           ! 874          0x07,
04502 0F58                        07            .byte	7
04503                                           ! 875          0x02,
04504 0F59                        02            .byte	2
04505                                           ! 876          0x08,
04506 0F5A                        08            .byte	8
04507                                           ! 877          0xe7,
04508 0F5B                        E7            .byte	$E7
04509                                           ! 878          0x0c,
04510 0F5C                        0C            .byte	$C
04511                                           ! 879          0x00,
04512 0F5D                        00            .byte	0
04513                                           ! 880          0x00,
04514 0F5E                        00            .byte	0
04515                                           ! 881          0x00,
04516 0F5F                        00            .byte	0
04517                                           ! 882          0x00
04518                                           ! 883 };
04519 0F60                        00            .byte	0
04520                                           !BCC_EOS
04521                                           ! 884 static Bit8u vgafont8[256*8]=
04522                                           ! 885 {
04523                       00000F61            _vgafont8:
04524                                           ! 886  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04525 0F61                        00            .byte	0
04526 0F62                        00            .byte	0
04527 0F63                        00            .byte	0
04528 0F64                        00            .byte	0
04529 0F65                        00            .byte	0
04530 0F66                        00            .byte	0
04531 0F67                        00            .byte	0
04532 0F68                        00            .byte	0
04533                                           ! 887  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04534 0F69                        7E            .byte	$7E
04535 0F6A                        81            .byte	$81
04536 0F6B                        A5            .byte	$A5
04537 0F6C                        81            .byte	$81
04538 0F6D                        BD            .byte	$BD
04539 0F6E                        99            .byte	$99
04540 0F6F                        81            .byte	$81
04541 0F70                        7E            .byte	$7E
04542                                           ! 888  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04543 0F71                        7E            .byte	$7E
04544 0F72                        FF            .byte	$FF
04545 0F73                        DB            .byte	$DB
04546 0F74                        FF            .byte	$FF
04547 0F75                        C3            .byte	$C3
04548 0F76                        E7            .byte	$E7
04549 0F77                        FF            .byte	$FF
04550 0F78                        7E            .byte	$7E
04551                                           ! 889  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04552 0F79                        6C            .byte	$6C
04553 0F7A                        FE            .byte	$FE
04554 0F7B                        FE            .byte	$FE
04555 0F7C                        FE            .byte	$FE
04556 0F7D                        7C            .byte	$7C
04557 0F7E                        38            .byte	$38
04558 0F7F                        10            .byte	$10
04559 0F80                        00            .byte	0
04560                                           ! 890  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04561 0F81                        10            .byte	$10
04562 0F82                        38            .byte	$38
04563 0F83                        7C            .byte	$7C
04564 0F84                        FE            .byte	$FE
04565 0F85                        7C            .byte	$7C
04566 0F86                        38            .byte	$38
04567 0F87                        10            .byte	$10
04568 0F88                        00            .byte	0
04569                                           ! 891  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04570 0F89                        38            .byte	$38
04571 0F8A                        7C            .byte	$7C
04572 0F8B                        38            .byte	$38
04573 0F8C                        FE            .byte	$FE
04574 0F8D                        FE            .byte	$FE
04575 0F8E                        7C            .byte	$7C
04576 0F8F                        38            .byte	$38
04577 0F90                        7C            .byte	$7C
04578                                           ! 892  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04579 0F91                        10            .byte	$10
04580 0F92                        10            .byte	$10
04581 0F93                        38            .byte	$38
04582 0F94                        7C            .byte	$7C
04583 0F95                        FE            .byte	$FE
04584 0F96                        7C            .byte	$7C
04585 0F97                        38            .byte	$38
04586 0F98                        7C            .byte	$7C
04587                                           ! 893  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04588 0F99                        00            .byte	0
04589 0F9A                        00            .byte	0
04590 0F9B                        18            .byte	$18
04591 0F9C                        3C            .byte	$3C
04592 0F9D                        3C            .byte	$3C
04593 0F9E                        18            .byte	$18
04594 0F9F                        00            .byte	0
04595 0FA0                        00            .byte	0
04596                                           ! 894  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04597 0FA1                        FF            .byte	$FF
04598 0FA2                        FF            .byte	$FF
04599 0FA3                        E7            .byte	$E7
04600 0FA4                        C3            .byte	$C3
04601 0FA5                        C3            .byte	$C3
04602 0FA6                        E7            .byte	$E7
04603 0FA7                        FF            .byte	$FF
04604 0FA8                        FF            .byte	$FF
04605                                           ! 895  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04606 0FA9                        00            .byte	0
04607 0FAA                        3C            .byte	$3C
04608 0FAB                        66            .byte	$66
04609 0FAC                        42            .byte	$42
04610 0FAD                        42            .byte	$42
04611 0FAE                        66            .byte	$66
04612 0FAF                        3C            .byte	$3C
04613 0FB0                        00            .byte	0
04614                                           ! 896  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04615 0FB1                        FF            .byte	$FF
04616 0FB2                        C3            .byte	$C3
04617 0FB3                        99            .byte	$99
04618 0FB4                        BD            .byte	$BD
04619 0FB5                        BD            .byte	$BD
04620 0FB6                        99            .byte	$99
04621 0FB7                        C3            .byte	$C3
04622 0FB8                        FF            .byte	$FF
04623                                           ! 897  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04624 0FB9                        0F            .byte	$F
04625 0FBA                        07            .byte	7
04626 0FBB                        0F            .byte	$F
04627 0FBC                        7D            .byte	$7D
04628 0FBD                        CC            .byte	$CC
04629 0FBE                        CC            .byte	$CC
04630 0FBF                        CC            .byte	$CC
04631 0FC0                        78            .byte	$78
04632                                           ! 898  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04633 0FC1                        3C            .byte	$3C
04634 0FC2                        66            .byte	$66
04635 0FC3                        66            .byte	$66
04636 0FC4                        66            .byte	$66
04637 0FC5                        3C            .byte	$3C
04638 0FC6                        18            .byte	$18
04639 0FC7                        7E            .byte	$7E
04640 0FC8                        18            .byte	$18
04641                                           ! 899  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04642 0FC9                        3F            .byte	$3F
04643 0FCA                        33            .byte	$33
04644 0FCB                        3F            .byte	$3F
04645 0FCC                        30            .byte	$30
04646 0FCD                        30            .byte	$30
04647 0FCE                        70            .byte	$70
04648 0FCF                        F0            .byte	$F0
04649 0FD0                        E0            .byte	$E0
04650                                           ! 900  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04651 0FD1                        7F            .byte	$7F
04652 0FD2                        63            .byte	$63
04653 0FD3                        7F            .byte	$7F
04654 0FD4                        63            .byte	$63
04655 0FD5                        63            .byte	$63
04656 0FD6                        67            .byte	$67
04657 0FD7                        E6            .byte	$E6
04658 0FD8                        C0            .byte	$C0
04659                                           ! 901  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04660 0FD9                        99            .byte	$99
04661 0FDA                        5A            .byte	$5A
04662 0FDB                        3C            .byte	$3C
04663 0FDC                        E7            .byte	$E7
04664 0FDD                        E7            .byte	$E7
04665 0FDE                        3C            .byte	$3C
04666 0FDF                        5A            .byte	$5A
04667 0FE0                        99            .byte	$99
04668                                           ! 902  
04669                                           ! 902 0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04670 0FE1                        80            .byte	$80
04671 0FE2                        E0            .byte	$E0
04672 0FE3                        F8            .byte	$F8
04673 0FE4                        FE            .byte	$FE
04674 0FE5                        F8            .byte	$F8
04675 0FE6                        E0            .byte	$E0
04676 0FE7                        80            .byte	$80
04677 0FE8                        00            .byte	0
04678                                           ! 903  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04679 0FE9                        02            .byte	2
04680 0FEA                        0E            .byte	$E
04681 0FEB                        3E            .byte	$3E
04682 0FEC                        FE            .byte	$FE
04683 0FED                        3E            .byte	$3E
04684 0FEE                        0E            .byte	$E
04685 0FEF                        02            .byte	2
04686 0FF0                        00            .byte	0
04687                                           ! 904  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04688 0FF1                        18            .byte	$18
04689 0FF2                        3C            .byte	$3C
04690 0FF3                        7E            .byte	$7E
04691 0FF4                        18            .byte	$18
04692 0FF5                        18            .byte	$18
04693 0FF6                        7E            .byte	$7E
04694 0FF7                        3C            .byte	$3C
04695 0FF8                        18            .byte	$18
04696                                           ! 905  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04697 0FF9                        66            .byte	$66
04698 0FFA                        66            .byte	$66
04699 0FFB                        66            .byte	$66
04700 0FFC                        66            .byte	$66
04701 0FFD                        66            .byte	$66
04702 0FFE                        00            .byte	0
04703 0FFF                        66            .byte	$66
04704 1000                        00            .byte	0
04705                                           ! 906  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04706 1001                        7F            .byte	$7F
04707 1002                        DB            .byte	$DB
04708 1003                        DB            .byte	$DB
04709 1004                        7B            .byte	$7B
04710 1005                        1B            .byte	$1B
04711 1006                        1B            .byte	$1B
04712 1007                        1B            .byte	$1B
04713 1008                        00            .byte	0
04714                                           ! 907  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04715 1009                        3E            .byte	$3E
04716 100A                        63            .byte	$63
04717 100B                        38            .byte	$38
04718 100C                        6C            .byte	$6C
04719 100D                        6C            .byte	$6C
04720 100E                        38            .byte	$38
04721 100F                        CC            .byte	$CC
04722 1010                        78            .byte	$78
04723                                           ! 908  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04724 1011                        00            .byte	0
04725 1012                        00            .byte	0
04726 1013                        00            .byte	0
04727 1014                        00            .byte	0
04728 1015                        7E            .byte	$7E
04729 1016                        7E            .byte	$7E
04730 1017                        7E            .byte	$7E
04731 1018                        00            .byte	0
04732                                           ! 909  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04733 1019                        18            .byte	$18
04734 101A                        3C            .byte	$3C
04735 101B                        7E            .byte	$7E
04736 101C                        18            .byte	$18
04737 101D                        7E            .byte	$7E
04738 101E                        3C            .byte	$3C
04739 101F                        18            .byte	$18
04740 1020                        FF            .byte	$FF
04741                                           ! 910  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04742 1021                        18            .byte	$18
04743 1022                        3C            .byte	$3C
04744 1023                        7E            .byte	$7E
04745 1024                        18            .byte	$18
04746 1025                        18            .byte	$18
04747 1026                        18            .byte	$18
04748 1027                        18            .byte	$18
04749 1028                        00            .byte	0
04750                                           ! 911  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04751 1029                        18            .byte	$18
04752 102A                        18            .byte	$18
04753 102B                        18            .byte	$18
04754 102C                        18            .byte	$18
04755 102D                        7E            .byte	$7E
04756 102E                        3C            .byte	$3C
04757 102F                        18            .byte	$18
04758 1030                        00            .byte	0
04759                                           ! 912  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04760 1031                        00            .byte	0
04761 1032                        18            .byte	$18
04762 1033                        0C            .byte	$C
04763 1034                        FE            .byte	$FE
04764 1035                        0C            .byte	$C
04765 1036                        18            .byte	$18
04766 1037                        00            .byte	0
04767 1038                        00            .byte	0
04768                                           ! 913  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04769 1039                        00            .byte	0
04770 103A                        30            .byte	$30
04771 103B                        60            .byte	$60
04772 103C                        FE            .byte	$FE
04773 103D                        60            .byte	$60
04774 103E                        30            .byte	$30
04775 103F                        00            .byte	0
04776 1040                        00            .byte	0
04777                                           ! 914  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04778 1041                        00            .byte	0
04779 1042                        00            .byte	0
04780 1043                        C0            .byte	$C0
04781 1044                        C0            .byte	$C0
04782 1045                        C0            .byte	$C0
04783 1046                        FE            .byte	$FE
04784 1047                        00            .byte	0
04785 1048                        00            .byte	0
04786                                           ! 915  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04787 1049                        00            .byte	0
04788 104A                        24            .byte	$24
04789 104B                        66            .byte	$66
04790 104C                        FF            .byte	$FF
04791 104D                        66            .byte	$66
04792 104E                        24            .byte	$24
04793 104F                        00            .byte	0
04794 1050                        00            .byte	0
04795                                           ! 916  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04796 1051                        00            .byte	0
04797 1052                        18            .byte	$18
04798 1053                        3C            .byte	$3C
04799 1054                        7E            .byte	$7E
04800 1055                        FF            .byte	$FF
04801 1056                        FF            .byte	$FF
04802 1057                        00            .byte	0
04803 1058                        00            .byte	0
04804                                           ! 917  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04805 1059                        00            .byte	0
04806 105A                        FF            .byte	$FF
04807 105B                        FF            .byte	$FF
04808 105C                        7E            .byte	$7E
04809 105D                        3C            .byte	$3C
04810 105E                        18            .byte	$18
04811 105F                        00            .byte	0
04812 1060                        00            .byte	0
04813                                           ! 918  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04814 1061                        00            .byte	0
04815 1062                        00            .byte	0
04816 1063                        00            .byte	0
04817 1064                        00            .byte	0
04818 1065                        00            .byte	0
04819 1066                        00            .byte	0
04820 1067                        00            .byte	0
04821 1068                        00            .byte	0
04822                                           ! 919  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04823 1069                        30            .byte	$30
04824 106A                        78            .byte	$78
04825 106B                        78            .byte	$78
04826 106C                        30            .byte	$30
04827 106D                        30            .byte	$30
04828 106E                        00            .byte	0
04829 106F                        30            .byte	$30
04830 1070                        00            .byte	0
04831                                           ! 920  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04832 1071                        6C            .byte	$6C
04833 1072                        6C            .byte	$6C
04834 1073                        6C            .byte	$6C
04835 1074                        00            .byte	0
04836 1075                        00            .byte	0
04837 1076                        00            .byte	0
04838 1077                        00            .byte	0
04839 1078                        00            .byte	0
04840                                           ! 921  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04841 1079                        6C            .byte	$6C
04842 107A                        6C            .byte	$6C
04843 107B                        FE            .byte	$FE
04844 107C                        6C            .byte	$6C
04845 107D                        FE            .byte	$FE
04846 107E                        6C            .byte	$6C
04847 107F                        6C            .byte	$6C
04848 1080                        00            .byte	0
04849                                           ! 922  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04850 1081                        30            .byte	$30
04851 1082                        7C            .byte	$7C
04852 1083                        C0            .byte	$C0
04853 1084                        78            .byte	$78
04854 1085                        0C            .byte	$C
04855 1086                        F8            .byte	$F8
04856 1087                        30            .byte	$30
04857 1088                        00            .byte	0
04858                                           ! 923  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04859 1089                        00            .byte	0
04860 108A                        C6            .byte	$C6
04861 108B                        CC            .byte	$CC
04862 108C                        18            .byte	$18
04863 108D                        30            .byte	$30
04864 108E                        66            .byte	$66
04865 108F                        C6            .byte	$C6
04866 1090                        00            .byte	0
04867                                           ! 924  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04868 1091                        38            .byte	$38
04869 1092                        6C            .byte	$6C
04870 1093                        38            .byte	$38
04871 1094                        76            .byte	$76
04872 1095                        DC            .byte	$DC
04873 1096                        CC            .byte	$CC
04874 1097                        76            .byte	$76
04875 1098                        00            .byte	0
04876                                           ! 925  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04877 1099                        60            .byte	$60
04878 109A                        60            .byte	$60
04879 109B                        C0            .byte	$C0
04880 109C                        00            .byte	0
04881 109D                        00            .byte	0
04882 109E                        00            .byte	0
04883 109F                        00            .byte	0
04884 10A0                        00            .byte	0
04885                                           ! 926  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04886 10A1                        18            .byte	$18
04887 10A2                        30            .byte	$30
04888 10A3                        60            .byte	$60
04889 10A4                        60            .byte	$60
04890 10A5                        60            .byte	$60
04891 10A6                        30            .byte	$30
04892 10A7                        18            .byte	$18
04893 10A8                        00            .byte	0
04894                                           ! 927  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04895 10A9                        60            .byte	$60
04896 10AA                        30            .byte	$30
04897 10AB                        18            .byte	$18
04898 10AC                        18            .byte	$18
04899 10AD                        18            .byte	$18
04900 10AE                        30            .byte	$30
04901 10AF                        60            .byte	$60
04902 10B0                        00            .byte	0
04903                                           ! 928  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04904 10B1                        00            .byte	0
04905 10B2                        66            .byte	$66
04906 10B3                        3C            .byte	$3C
04907 10B4                        FF            .byte	$FF
04908 10B5                        3C            .byte	$3C
04909 10B6                        66            .byte	$66
04910 10B7                        00            .byte	0
04911 10B8                        00            .byte	0
04912                                           ! 929  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04913 10B9                        00            .byte	0
04914 10BA                        30            .byte	$30
04915 10BB                        30            .byte	$30
04916 10BC                        FC            .byte	$FC
04917 10BD                        30            .byte	$30
04918 10BE                        30            .byte	$30
04919 10BF                        00            .byte	0
04920 10C0                        00            .byte	0
04921                                           ! 930  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04922 10C1                        00            .byte	0
04923 10C2                        00            .byte	0
04924 10C3                        00            .byte	0
04925 10C4                        00            .byte	0
04926 10C5                        00            .byte	0
04927 10C6                        30            .byte	$30
04928 10C7                        30            .byte	$30
04929 10C8                        60            .byte	$60
04930                                           ! 931  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04931 10C9                        00            .byte	0
04932 10CA                        00            .byte	0
04933 10CB                        00            .byte	0
04934 10CC                        FC            .byte	$FC
04935 10CD                        00            .byte	0
04936 10CE                        00            .byte	0
04937 10CF                        00            .byte	0
04938 10D0                        00            .byte	0
04939                                           ! 932  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04940 10D1                        00            .byte	0
04941 10D2                        00            .byte	0
04942 10D3                        00            .byte	0
04943 10D4                        00            .byte	0
04944 10D5                        00            .byte	0
04945 10D6                        30            .byte	$30
04946 10D7                        30            .byte	$30
04947 10D8                        00            .byte	0
04948                                           ! 933  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04949 10D9                        06            .byte	6
04950 10DA                        0C            .byte	$C
04951 10DB                        18            .byte	$18
04952 10DC                        30            .byte	$30
04953 10DD                        60            .byte	$60
04954 10DE                        C0            .byte	$C0
04955 10DF                        80            .byte	$80
04956 10E0                        00            .byte	0
04957                                           ! 934  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04958 10E1                        7C            .byte	$7C
04959 10E2                        C6            .byte	$C6
04960 10E3                        CE            .byte	$CE
04961 10E4                        DE            .byte	$DE
04962 10E5                        F6            .byte	$F6
04963 10E6                        E6            .byte	$E6
04964 10E7                        7C            .byte	$7C
04965 10E8                        00            .byte	0
04966                                           ! 935  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04967 10E9                        30            .byte	$30
04968 10EA                        70            .byte	$70
04969 10EB                        30            .byte	$30
04970 10EC                        30            .byte	$30
04971 10ED                        30            .byte	$30
04972 10EE                        30            .byte	$30
04973 10EF                        FC            .byte	$FC
04974 10F0                        00            .byte	0
04975                                           ! 936  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04976 10F1                        78            .byte	$78
04977 10F2                        CC            .byte	$CC
04978 10F3                        0C            .byte	$C
04979 10F4                        38            .byte	$38
04980 10F5                        60            .byte	$60
04981 10F6                        CC            .byte	$CC
04982 10F7                        FC            .byte	$FC
04983 10F8                        00            .byte	0
04984                                           ! 937  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04985 10F9                        78            .byte	$78
04986 10FA                        CC            .byte	$CC
04987 10FB                        0C            .byte	$C
04988 10FC                        38            .byte	$38
04989 10FD                        0C            .byte	$C
04990 10FE                        CC            .byte	$CC
04991 10FF                        78            .byte	$78
04992 1100                        00            .byte	0
04993                                           ! 938  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04994 1101                        1C            .byte	$1C
04995 1102                        3C            .byte	$3C
04996 1103                        6C            .byte	$6C
04997 1104                        CC            .byte	$CC
04998 1105                        FE            .byte	$FE
04999 1106                        0C            .byte	$C
05000 1107                        1E            .byte	$1E
05001 1108                        00            .byte	0
05002                                           ! 939  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
05003 1109                        FC            .byte	$FC
05004 110A                        C0            .byte	$C0
05005 110B                        F8            .byte	$F8
05006 110C                        0C            .byte	$C
05007 110D                        0C            .byte	$C
05008 110E                        CC            .byte	$CC
05009 110F                        78            .byte	$78
05010 1110                        00            .byte	0
05011                                           ! 940  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
05012 1111                        38            .byte	$38
05013 1112                        60            .byte	$60
05014 1113                        C0            .byte	$C0
05015 1114                        F8            .byte	$F8
05016 1115                        CC            .byte	$CC
05017 1116                        CC            .byte	$CC
05018 1117                        78            .byte	$78
05019 1118                        00            .byte	0
05020                                           ! 941  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
05021 1119                        FC            .byte	$FC
05022 111A                        CC            .byte	$CC
05023 111B                        0C            .byte	$C
05024 111C                        18            .byte	$18
05025 111D                        30            .byte	$30
05026 111E                        30            .byte	$30
05027 111F                        30            .byte	$30
05028 1120                        00            .byte	0
05029                                           ! 942  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05030 1121                        78            .byte	$78
05031 1122                        CC            .byte	$CC
05032 1123                        CC            .byte	$CC
05033 1124                        78            .byte	$78
05034 1125                        CC            .byte	$CC
05035 1126                        CC            .byte	$CC
05036 1127                        78            .byte	$78
05037 1128                        00            .byte	0
05038                                           ! 943  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x7
05039 1129                        78            .byte	$78
05040 112A                        CC            .byte	$CC
05041 112B                        CC            .byte	$CC
05042 112C                        7C            .byte	$7C
05043 112D                        0C            .byte	$C
05044 112E                        18            .byte	$18
05045                                           ! 943 0, 0x00,
05046 112F                        70            .byte	$70
05047 1130                        00            .byte	0
05048                                           ! 944  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
05049 1131                        00            .byte	0
05050 1132                        30            .byte	$30
05051 1133                        30            .byte	$30
05052 1134                        00            .byte	0
05053 1135                        00            .byte	0
05054 1136                        30            .byte	$30
05055 1137                        30            .byte	$30
05056 1138                        00            .byte	0
05057                                           ! 945  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05058 1139                        00            .byte	0
05059 113A                        30            .byte	$30
05060 113B                        30            .byte	$30
05061 113C                        00            .byte	0
05062 113D                        00            .byte	0
05063 113E                        30            .byte	$30
05064 113F                        30            .byte	$30
05065 1140                        60            .byte	$60
05066                                           ! 946  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05067 1141                        18            .byte	$18
05068 1142                        30            .byte	$30
05069 1143                        60            .byte	$60
05070 1144                        C0            .byte	$C0
05071 1145                        60            .byte	$60
05072 1146                        30            .byte	$30
05073 1147                        18            .byte	$18
05074 1148                        00            .byte	0
05075                                           ! 947  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05076 1149                        00            .byte	0
05077 114A                        00            .byte	0
05078 114B                        FC            .byte	$FC
05079 114C                        00            .byte	0
05080 114D                        00            .byte	0
05081 114E                        FC            .byte	$FC
05082 114F                        00            .byte	0
05083 1150                        00            .byte	0
05084                                           ! 948  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05085 1151                        60            .byte	$60
05086 1152                        30            .byte	$30
05087 1153                        18            .byte	$18
05088 1154                        0C            .byte	$C
05089 1155                        18            .byte	$18
05090 1156                        30            .byte	$30
05091 1157                        60            .byte	$60
05092 1158                        00            .byte	0
05093                                           ! 949  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05094 1159                        78            .byte	$78
05095 115A                        CC            .byte	$CC
05096 115B                        0C            .byte	$C
05097 115C                        18            .byte	$18
05098 115D                        30            .byte	$30
05099 115E                        00            .byte	0
05100 115F                        30            .byte	$30
05101 1160                        00            .byte	0
05102                                           ! 950  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05103 1161                        7C            .byte	$7C
05104 1162                        C6            .byte	$C6
05105 1163                        DE            .byte	$DE
05106 1164                        DE            .byte	$DE
05107 1165                        DE            .byte	$DE
05108 1166                        C0            .byte	$C0
05109 1167                        78            .byte	$78
05110 1168                        00            .byte	0
05111                                           ! 951  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05112 1169                        30            .byte	$30
05113 116A                        78            .byte	$78
05114 116B                        CC            .byte	$CC
05115 116C                        CC            .byte	$CC
05116 116D                        FC            .byte	$FC
05117 116E                        CC            .byte	$CC
05118 116F                        CC            .byte	$CC
05119 1170                        00            .byte	0
05120                                           ! 952  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05121 1171                        FC            .byte	$FC
05122 1172                        66            .byte	$66
05123 1173                        66            .byte	$66
05124 1174                        7C            .byte	$7C
05125 1175                        66            .byte	$66
05126 1176                        66            .byte	$66
05127 1177                        FC            .byte	$FC
05128 1178                        00            .byte	0
05129                                           ! 953  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05130 1179                        3C            .byte	$3C
05131 117A                        66            .byte	$66
05132 117B                        C0            .byte	$C0
05133 117C                        C0            .byte	$C0
05134 117D                        C0            .byte	$C0
05135 117E                        66            .byte	$66
05136 117F                        3C            .byte	$3C
05137 1180                        00            .byte	0
05138                                           ! 954  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05139 1181                        F8            .byte	$F8
05140 1182                        6C            .byte	$6C
05141 1183                        66            .byte	$66
05142 1184                        66            .byte	$66
05143 1185                        66            .byte	$66
05144 1186                        6C            .byte	$6C
05145 1187                        F8            .byte	$F8
05146 1188                        00            .byte	0
05147                                           ! 955  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05148 1189                        FE            .byte	$FE
05149 118A                        62            .byte	$62
05150 118B                        68            .byte	$68
05151 118C                        78            .byte	$78
05152 118D                        68            .byte	$68
05153 118E                        62            .byte	$62
05154 118F                        FE            .byte	$FE
05155 1190                        00            .byte	0
05156                                           ! 956  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05157 1191                        FE            .byte	$FE
05158 1192                        62            .byte	$62
05159 1193                        68            .byte	$68
05160 1194                        78            .byte	$78
05161 1195                        68            .byte	$68
05162 1196                        60            .byte	$60
05163 1197                        F0            .byte	$F0
05164 1198                        00            .byte	0
05165                                           ! 957  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05166 1199                        3C            .byte	$3C
05167 119A                        66            .byte	$66
05168 119B                        C0            .byte	$C0
05169 119C                        C0            .byte	$C0
05170 119D                        CE            .byte	$CE
05171 119E                        66            .byte	$66
05172 119F                        3E            .byte	$3E
05173 11A0                        00            .byte	0
05174                                           ! 958  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05175 11A1                        CC            .byte	$CC
05176 11A2                        CC            .byte	$CC
05177 11A3                        CC            .byte	$CC
05178 11A4                        FC            .byte	$FC
05179 11A5                        CC            .byte	$CC
05180 11A6                        CC            .byte	$CC
05181 11A7                        CC            .byte	$CC
05182 11A8                        00            .byte	0
05183                                           ! 959  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05184 11A9                        78            .byte	$78
05185 11AA                        30            .byte	$30
05186 11AB                        30            .byte	$30
05187 11AC                        30            .byte	$30
05188 11AD                        30            .byte	$30
05189 11AE                        30            .byte	$30
05190 11AF                        78            .byte	$78
05191 11B0                        00            .byte	0
05192                                           ! 960  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05193 11B1                        1E            .byte	$1E
05194 11B2                        0C            .byte	$C
05195 11B3                        0C            .byte	$C
05196 11B4                        0C            .byte	$C
05197 11B5                        CC            .byte	$CC
05198 11B6                        CC            .byte	$CC
05199 11B7                        78            .byte	$78
05200 11B8                        00            .byte	0
05201                                           ! 961  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05202 11B9                        E6            .byte	$E6
05203 11BA                        66            .byte	$66
05204 11BB                        6C            .byte	$6C
05205 11BC                        78            .byte	$78
05206 11BD                        6C            .byte	$6C
05207 11BE                        66            .byte	$66
05208 11BF                        E6            .byte	$E6
05209 11C0                        00            .byte	0
05210                                           ! 962  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05211 11C1                        F0            .byte	$F0
05212 11C2                        60            .byte	$60
05213 11C3                        60            .byte	$60
05214 11C4                        60            .byte	$60
05215 11C5                        62            .byte	$62
05216 11C6                        66            .byte	$66
05217 11C7                        FE            .byte	$FE
05218 11C8                        00            .byte	0
05219                                           ! 963  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05220 11C9                        C6            .byte	$C6
05221 11CA                        EE            .byte	$EE
05222 11CB                        FE            .byte	$FE
05223 11CC                        FE            .byte	$FE
05224 11CD                        D6            .byte	$D6
05225 11CE                        C6            .byte	$C6
05226 11CF                        C6            .byte	$C6
05227 11D0                        00            .byte	0
05228                                           ! 964  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05229 11D1                        C6            .byte	$C6
05230 11D2                        E6            .byte	$E6
05231 11D3                        F6            .byte	$F6
05232 11D4                        DE            .byte	$DE
05233 11D5                        CE            .byte	$CE
05234 11D6                        C6            .byte	$C6
05235 11D7                        C6            .byte	$C6
05236 11D8                        00            .byte	0
05237                                           ! 965  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05238 11D9                        38            .byte	$38
05239 11DA                        6C            .byte	$6C
05240 11DB                        C6            .byte	$C6
05241 11DC                        C6            .byte	$C6
05242 11DD                        C6            .byte	$C6
05243 11DE                        6C            .byte	$6C
05244 11DF                        38            .byte	$38
05245 11E0                        00            .byte	0
05246                                           ! 966  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05247 11E1                        FC            .byte	$FC
05248 11E2                        66            .byte	$66
05249 11E3                        66            .byte	$66
05250 11E4                        7C            .byte	$7C
05251 11E5                        60            .byte	$60
05252 11E6                        60            .byte	$60
05253 11E7                        F0            .byte	$F0
05254 11E8                        00            .byte	0
05255                                           ! 967  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05256 11E9                        78            .byte	$78
05257 11EA                        CC            .byte	$CC
05258 11EB                        CC            .byte	$CC
05259 11EC                        CC            .byte	$CC
05260 11ED                        DC            .byte	$DC
05261 11EE                        78            .byte	$78
05262 11EF                        1C            .byte	$1C
05263 11F0                        00            .byte	0
05264                                           ! 968  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05265 11F1                        FC            .byte	$FC
05266 11F2                        66            .byte	$66
05267 11F3                        66            .byte	$66
05268 11F4                        7C            .byte	$7C
05269 11F5                        6C            .byte	$6C
05270 11F6                        66            .byte	$66
05271 11F7                        E6            .byte	$E6
05272 11F8                        00            .byte	0
05273                                           ! 969  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05274 11F9                        78            .byte	$78
05275 11FA                        CC            .byte	$CC
05276 11FB                        E0            .byte	$E0
05277 11FC                        70            .byte	$70
05278 11FD                        1C            .byte	$1C
05279 11FE                        CC            .byte	$CC
05280 11FF                        78            .byte	$78
05281 1200                        00            .byte	0
05282                                           ! 970  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05283 1201                        FC            .byte	$FC
05284 1202                        B4            .byte	$B4
05285 1203                        30            .byte	$30
05286 1204                        30            .byte	$30
05287 1205                        30            .byte	$30
05288 1206                        30            .byte	$30
05289 1207                        78            .byte	$78
05290 1208                        00            .byte	0
05291                                           ! 971  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05292 1209                        CC            .byte	$CC
05293 120A                        CC            .byte	$CC
05294 120B                        CC            .byte	$CC
05295 120C                        CC            .byte	$CC
05296 120D                        CC            .byte	$CC
05297 120E                        CC            .byte	$CC
05298 120F                        FC            .byte	$FC
05299 1210                        00            .byte	0
05300                                           ! 972  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05301 1211                        CC            .byte	$CC
05302 1212                        CC            .byte	$CC
05303 1213                        CC            .byte	$CC
05304 1214                        CC            .byte	$CC
05305 1215                        CC            .byte	$CC
05306 1216                        78            .byte	$78
05307 1217                        30            .byte	$30
05308 1218                        00            .byte	0
05309                                           ! 973  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05310 1219                        C6            .byte	$C6
05311 121A                        C6            .byte	$C6
05312 121B                        C6            .byte	$C6
05313 121C                        D6            .byte	$D6
05314 121D                        FE            .byte	$FE
05315 121E                        EE            .byte	$EE
05316 121F                        C6            .byte	$C6
05317 1220                        00            .byte	0
05318                                           ! 974  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05319 1221                        C6            .byte	$C6
05320 1222                        C6            .byte	$C6
05321 1223                        6C            .byte	$6C
05322 1224                        38            .byte	$38
05323 1225                        38            .byte	$38
05324 1226                        6C            .byte	$6C
05325 1227                        C6            .byte	$C6
05326 1228                        00            .byte	0
05327                                           ! 975  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05328 1229                        CC            .byte	$CC
05329 122A                        CC            .byte	$CC
05330 122B                        CC            .byte	$CC
05331 122C                        78            .byte	$78
05332 122D                        30            .byte	$30
05333 122E                        30            .byte	$30
05334 122F                        78            .byte	$78
05335 1230                        00            .byte	0
05336                                           ! 976  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05337 1231                        FE            .byte	$FE
05338 1232                        C6            .byte	$C6
05339 1233                        8C            .byte	$8C
05340 1234                        18            .byte	$18
05341 1235                        32            .byte	$32
05342 1236                        66            .byte	$66
05343 1237                        FE            .byte	$FE
05344 1238                        00            .byte	0
05345                                           ! 977  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05346 1239                        78            .byte	$78
05347 123A                        60            .byte	$60
05348 123B                        60            .byte	$60
05349 123C                        60            .byte	$60
05350 123D                        60            .byte	$60
05351 123E                        60            .byte	$60
05352 123F                        78            .byte	$78
05353 1240                        00            .byte	0
05354                                           ! 978  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05355 1241                        C0            .byte	$C0
05356 1242                        60            .byte	$60
05357 1243                        30            .byte	$30
05358 1244                        18            .byte	$18
05359 1245                        0C            .byte	$C
05360 1246                        06            .byte	6
05361 1247                        02            .byte	2
05362 1248                        00            .byte	0
05363                                           ! 979  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05364 1249                        78            .byte	$78
05365 124A                        18            .byte	$18
05366 124B                        18            .byte	$18
05367 124C                        18            .byte	$18
05368 124D                        18            .byte	$18
05369 124E                        18            .byte	$18
05370 124F                        78            .byte	$78
05371 1250                        00            .byte	0
05372                                           ! 980  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05373 1251                        10            .byte	$10
05374 1252                        38            .byte	$38
05375 1253                        6C            .byte	$6C
05376 1254                        C6            .byte	$C6
05377 1255                        00            .byte	0
05378 1256                        00            .byte	0
05379 1257                        00            .byte	0
05380 1258                        00            .byte	0
05381                                           ! 981  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05382 1259                        00            .byte	0
05383 125A                        00            .byte	0
05384 125B                        00            .byte	0
05385 125C                        00            .byte	0
05386 125D                        00            .byte	0
05387 125E                        00            .byte	0
05388 125F                        00            .byte	0
05389 1260                        FF            .byte	$FF
05390                                           ! 982  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05391 1261                        30            .byte	$30
05392 1262                        30            .byte	$30
05393 1263                        18            .byte	$18
05394 1264                        00            .byte	0
05395 1265                        00            .byte	0
05396 1266                        00            .byte	0
05397 1267                        00            .byte	0
05398 1268                        00            .byte	0
05399                                           ! 983  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05400 1269                        00            .byte	0
05401 126A                        00            .byte	0
05402 126B                        78            .byte	$78
05403 126C                        0C            .byte	$C
05404 126D                        7C            .byte	$7C
05405 126E                        CC            .byte	$CC
05406 126F                        76            .byte	$76
05407 1270                        00            .byte	0
05408                                           ! 984  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05409 1271                        E0            .byte	$E0
05410 1272                        60            .byte	$60
05411 1273                        60            .byte	$60
05412 1274                        7C            .byte	$7C
05413 1275                        66            .byte	$66
05414 1276                        66            .byte	$66
05415 1277                        DC            .byte	$DC
05416 1278                        00            .byte	0
05417                                           ! 985  0x00, 0x00, 0x78, 0xcc, 0xc0,
05418 1279                        00            .byte	0
05419 127A                        00            .byte	0
05420 127B                        78            .byte	$78
05421 127C                        CC            .byte	$CC
05422                                           ! 985  0xcc, 0x78, 0x00,
05423 127D                        C0            .byte	$C0
05424 127E                        CC            .byte	$CC
05425 127F                        78            .byte	$78
05426 1280                        00            .byte	0
05427                                           ! 986  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05428 1281                        1C            .byte	$1C
05429 1282                        0C            .byte	$C
05430 1283                        0C            .byte	$C
05431 1284                        7C            .byte	$7C
05432 1285                        CC            .byte	$CC
05433 1286                        CC            .byte	$CC
05434 1287                        76            .byte	$76
05435 1288                        00            .byte	0
05436                                           ! 987  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05437 1289                        00            .byte	0
05438 128A                        00            .byte	0
05439 128B                        78            .byte	$78
05440 128C                        CC            .byte	$CC
05441 128D                        FC            .byte	$FC
05442 128E                        C0            .byte	$C0
05443 128F                        78            .byte	$78
05444 1290                        00            .byte	0
05445                                           ! 988  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05446 1291                        38            .byte	$38
05447 1292                        6C            .byte	$6C
05448 1293                        60            .byte	$60
05449 1294                        F0            .byte	$F0
05450 1295                        60            .byte	$60
05451 1296                        60            .byte	$60
05452 1297                        F0            .byte	$F0
05453 1298                        00            .byte	0
05454                                           ! 989  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05455 1299                        00            .byte	0
05456 129A                        00            .byte	0
05457 129B                        76            .byte	$76
05458 129C                        CC            .byte	$CC
05459 129D                        CC            .byte	$CC
05460 129E                        7C            .byte	$7C
05461 129F                        0C            .byte	$C
05462 12A0                        F8            .byte	$F8
05463                                           ! 990  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05464 12A1                        E0            .byte	$E0
05465 12A2                        60            .byte	$60
05466 12A3                        6C            .byte	$6C
05467 12A4                        76            .byte	$76
05468 12A5                        66            .byte	$66
05469 12A6                        66            .byte	$66
05470 12A7                        E6            .byte	$E6
05471 12A8                        00            .byte	0
05472                                           ! 991  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05473 12A9                        30            .byte	$30
05474 12AA                        00            .byte	0
05475 12AB                        70            .byte	$70
05476 12AC                        30            .byte	$30
05477 12AD                        30            .byte	$30
05478 12AE                        30            .byte	$30
05479 12AF                        78            .byte	$78
05480 12B0                        00            .byte	0
05481                                           ! 992  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05482 12B1                        0C            .byte	$C
05483 12B2                        00            .byte	0
05484 12B3                        0C            .byte	$C
05485 12B4                        0C            .byte	$C
05486 12B5                        0C            .byte	$C
05487 12B6                        CC            .byte	$CC
05488 12B7                        CC            .byte	$CC
05489 12B8                        78            .byte	$78
05490                                           ! 993  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05491 12B9                        E0            .byte	$E0
05492 12BA                        60            .byte	$60
05493 12BB                        66            .byte	$66
05494 12BC                        6C            .byte	$6C
05495 12BD                        78            .byte	$78
05496 12BE                        6C            .byte	$6C
05497 12BF                        E6            .byte	$E6
05498 12C0                        00            .byte	0
05499                                           ! 994  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05500 12C1                        70            .byte	$70
05501 12C2                        30            .byte	$30
05502 12C3                        30            .byte	$30
05503 12C4                        30            .byte	$30
05504 12C5                        30            .byte	$30
05505 12C6                        30            .byte	$30
05506 12C7                        78            .byte	$78
05507 12C8                        00            .byte	0
05508                                           ! 995  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05509 12C9                        00            .byte	0
05510 12CA                        00            .byte	0
05511 12CB                        CC            .byte	$CC
05512 12CC                        FE            .byte	$FE
05513 12CD                        FE            .byte	$FE
05514 12CE                        D6            .byte	$D6
05515 12CF                        C6            .byte	$C6
05516 12D0                        00            .byte	0
05517                                           ! 996  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05518 12D1                        00            .byte	0
05519 12D2                        00            .byte	0
05520 12D3                        F8            .byte	$F8
05521 12D4                        CC            .byte	$CC
05522 12D5                        CC            .byte	$CC
05523 12D6                        CC            .byte	$CC
05524 12D7                        CC            .byte	$CC
05525 12D8                        00            .byte	0
05526                                           ! 997  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05527 12D9                        00            .byte	0
05528 12DA                        00            .byte	0
05529 12DB                        78            .byte	$78
05530 12DC                        CC            .byte	$CC
05531 12DD                        CC            .byte	$CC
05532 12DE                        CC            .byte	$CC
05533 12DF                        78            .byte	$78
05534 12E0                        00            .byte	0
05535                                           ! 998  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05536 12E1                        00            .byte	0
05537 12E2                        00            .byte	0
05538 12E3                        DC            .byte	$DC
05539 12E4                        66            .byte	$66
05540 12E5                        66            .byte	$66
05541 12E6                        7C            .byte	$7C
05542 12E7                        60            .byte	$60
05543 12E8                        F0            .byte	$F0
05544                                           ! 999  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05545 12E9                        00            .byte	0
05546 12EA                        00            .byte	0
05547 12EB                        76            .byte	$76
05548 12EC                        CC            .byte	$CC
05549 12ED                        CC            .byte	$CC
05550 12EE                        7C            .byte	$7C
05551 12EF                        0C            .byte	$C
05552 12F0                        1E            .byte	$1E
05553                                           ! 1000  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05554 12F1                        00            .byte	0
05555 12F2                        00            .byte	0
05556 12F3                        DC            .byte	$DC
05557 12F4                        76            .byte	$76
05558 12F5                        66            .byte	$66
05559 12F6                        60            .byte	$60
05560 12F7                        F0            .byte	$F0
05561 12F8                        00            .byte	0
05562                                           ! 1001  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05563 12F9                        00            .byte	0
05564 12FA                        00            .byte	0
05565 12FB                        7C            .byte	$7C
05566 12FC                        C0            .byte	$C0
05567 12FD                        78            .byte	$78
05568 12FE                        0C            .byte	$C
05569 12FF                        F8            .byte	$F8
05570 1300                        00            .byte	0
05571                                           ! 1002  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05572 1301                        10            .byte	$10
05573 1302                        30            .byte	$30
05574 1303                        7C            .byte	$7C
05575 1304                        30            .byte	$30
05576 1305                        30            .byte	$30
05577 1306                        34            .byte	$34
05578 1307                        18            .byte	$18
05579 1308                        00            .byte	0
05580                                           ! 1003  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05581 1309                        00            .byte	0
05582 130A                        00            .byte	0
05583 130B                        CC            .byte	$CC
05584 130C                        CC            .byte	$CC
05585 130D                        CC            .byte	$CC
05586 130E                        CC            .byte	$CC
05587 130F                        76            .byte	$76
05588 1310                        00            .byte	0
05589                                           ! 1004  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05590 1311                        00            .byte	0
05591 1312                        00            .byte	0
05592 1313                        CC            .byte	$CC
05593 1314                        CC            .byte	$CC
05594 1315                        CC            .byte	$CC
05595 1316                        78            .byte	$78
05596 1317                        30            .byte	$30
05597 1318                        00            .byte	0
05598                                           ! 1005  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05599 1319                        00            .byte	0
05600 131A                        00            .byte	0
05601 131B                        C6            .byte	$C6
05602 131C                        D6            .byte	$D6
05603 131D                        FE            .byte	$FE
05604 131E                        FE            .byte	$FE
05605 131F                        6C            .byte	$6C
05606 1320                        00            .byte	0
05607                                           ! 1006  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05608 1321                        00            .byte	0
05609 1322                        00            .byte	0
05610 1323                        C6            .byte	$C6
05611 1324                        6C            .byte	$6C
05612 1325                        38            .byte	$38
05613 1326                        6C            .byte	$6C
05614 1327                        C6            .byte	$C6
05615 1328                        00            .byte	0
05616                                           ! 1007  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05617 1329                        00            .byte	0
05618 132A                        00            .byte	0
05619 132B                        CC            .byte	$CC
05620 132C                        CC            .byte	$CC
05621 132D                        CC            .byte	$CC
05622 132E                        7C            .byte	$7C
05623 132F                        0C            .byte	$C
05624 1330                        F8            .byte	$F8
05625                                           ! 1008  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05626 1331                        00            .byte	0
05627 1332                        00            .byte	0
05628 1333                        FC            .byte	$FC
05629 1334                        98            .byte	$98
05630 1335                        30            .byte	$30
05631 1336                        64            .byte	$64
05632 1337                        FC            .byte	$FC
05633 1338                        00            .byte	0
05634                                           ! 1009  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05635 1339                        1C            .byte	$1C
05636 133A                        30            .byte	$30
05637 133B                        30            .byte	$30
05638 133C                        E0            .byte	$E0
05639 133D                        30            .byte	$30
05640 133E                        30            .byte	$30
05641 133F                        1C            .byte	$1C
05642 1340                        00            .byte	0
05643                                           ! 1010  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05644 1341                        18            .byte	$18
05645 1342                        18            .byte	$18
05646 1343                        18            .byte	$18
05647 1344                        00            .byte	0
05648 1345                        18            .byte	$18
05649 1346                        18            .byte	$18
05650 1347                        18            .byte	$18
05651 1348                        00            .byte	0
05652                                           ! 1011  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05653 1349                        E0            .byte	$E0
05654 134A                        30            .byte	$30
05655 134B                        30            .byte	$30
05656 134C                        1C            .byte	$1C
05657 134D                        30            .byte	$30
05658 134E                        30            .byte	$30
05659 134F                        E0            .byte	$E0
05660 1350                        00            .byte	0
05661                                           ! 1012  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05662 1351                        76            .byte	$76
05663 1352                        DC            .byte	$DC
05664 1353                        00            .byte	0
05665 1354                        00            .byte	0
05666 1355                        00            .byte	0
05667 1356                        00            .byte	0
05668 1357                        00            .byte	0
05669 1358                        00            .byte	0
05670                                           ! 1013  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05671 1359                        00            .byte	0
05672 135A                        10            .byte	$10
05673 135B                        38            .byte	$38
05674 135C                        6C            .byte	$6C
05675 135D                        C6            .byte	$C6
05676 135E                        C6            .byte	$C6
05677 135F                        FE            .byte	$FE
05678 1360                        00            .byte	0
05679                                           ! 1014  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05680 1361                        78            .byte	$78
05681 1362                        CC            .byte	$CC
05682 1363                        C0            .byte	$C0
05683 1364                        CC            .byte	$CC
05684 1365                        78            .byte	$78
05685 1366                        18            .byte	$18
05686 1367                        0C            .byte	$C
05687 1368                        78            .byte	$78
05688                                           ! 1015  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05689 1369                        00            .byte	0
05690 136A                        CC            .byte	$CC
05691 136B                        00            .byte	0
05692 136C                        CC            .byte	$CC
05693 136D                        CC            .byte	$CC
05694 136E                        CC            .byte	$CC
05695 136F                        7E            .byte	$7E
05696 1370                        00            .byte	0
05697                                           ! 1016  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05698 1371                        1C            .byte	$1C
05699 1372                        00            .byte	0
05700 1373                        78            .byte	$78
05701 1374                        CC            .byte	$CC
05702 1375                        FC            .byte	$FC
05703 1376                        C0            .byte	$C0
05704 1377                        78            .byte	$78
05705 1378                        00            .byte	0
05706                                           ! 1017  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05707 1379                        7E            .byte	$7E
05708 137A                        C3            .byte	$C3
05709 137B                        3C            .byte	$3C
05710 137C                        06            .byte	6
05711 137D                        3E            .byte	$3E
05712 137E                        66            .byte	$66
05713 137F                        3F            .byte	$3F
05714 1380                        00            .byte	0
05715                                           ! 1018  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05716 1381                        CC            .byte	$CC
05717 1382                        00            .byte	0
05718 1383                        78            .byte	$78
05719 1384                        0C            .byte	$C
05720 1385                        7C            .byte	$7C
05721 1386                        CC            .byte	$CC
05722 1387                        7E            .byte	$7E
05723 1388                        00            .byte	0
05724                                           ! 1019  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05725 1389                        E0            .byte	$E0
05726 138A                        00            .byte	0
05727 138B                        78            .byte	$78
05728 138C                        0C            .byte	$C
05729 138D                        7C            .byte	$7C
05730 138E                        CC            .byte	$CC
05731 138F                        7E            .byte	$7E
05732 1390                        00            .byte	0
05733                                           ! 1020  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05734 1391                        30            .byte	$30
05735 1392                        30            .byte	$30
05736 1393                        78            .byte	$78
05737 1394                        0C            .byte	$C
05738 1395                        7C            .byte	$7C
05739 1396                        CC            .byte	$CC
05740 1397                        7E            .byte	$7E
05741 1398                        00            .byte	0
05742                                           ! 1021  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05743 1399                        00            .byte	0
05744 139A                        00            .byte	0
05745 139B                        78            .byte	$78
05746 139C                        C0            .byte	$C0
05747 139D                        C0            .byte	$C0
05748 139E                        78            .byte	$78
05749 139F                        0C            .byte	$C
05750 13A0                        38            .byte	$38
05751                                           ! 1022  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05752 13A1                        7E            .byte	$7E
05753 13A2                        C3            .byte	$C3
05754 13A3                        3C            .byte	$3C
05755 13A4                        66            .byte	$66
05756 13A5                        7E            .byte	$7E
05757 13A6                        60            .byte	$60
05758 13A7                        3C            .byte	$3C
05759 13A8                        00            .byte	0
05760                                           ! 1023  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05761 13A9                        CC            .byte	$CC
05762 13AA                        00            .byte	0
05763 13AB                        78            .byte	$78
05764 13AC                        CC            .byte	$CC
05765 13AD                        FC            .byte	$FC
05766 13AE                        C0            .byte	$C0
05767 13AF                        78            .byte	$78
05768 13B0                        00            .byte	0
05769                                           ! 1024  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05770 13B1                        E0            .byte	$E0
05771 13B2                        00            .byte	0
05772 13B3                        78            .byte	$78
05773 13B4                        CC            .byte	$CC
05774 13B5                        FC            .byte	$FC
05775 13B6                        C0            .byte	$C0
05776 13B7                        78            .byte	$78
05777 13B8                        00            .byte	0
05778                                           ! 1025  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05779 13B9                        CC            .byte	$CC
05780 13BA                        00            .byte	0
05781 13BB                        70            .byte	$70
05782 13BC                        30            .byte	$30
05783 13BD                        30            .byte	$30
05784 13BE                        30            .byte	$30
05785 13BF                        78            .byte	$78
05786 13C0                        00            .byte	0
05787                                           ! 1026  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05788 13C1                        7C            .byte	$7C
05789 13C2                        C6            .byte	$C6
05790 13C3                        38            .byte	$38
05791 13C4                        18            .byte	$18
05792 13C5                        18            .byte	$18
05793 13C6                        18            .byte	$18
05794 13C7                        3C            .byte	$3C
05795 13C8                        00            .byte	0
05796                                           ! 1027  0xe0, 0x00, 0x70, 0
05797 13C9                        E0            .byte	$E0
05798 13CA                        00            .byte	0
05799 13CB                        70            .byte	$70
05800                                           ! 1027 x30, 0x30, 0x30, 0x78, 0x00,
05801 13CC                        30            .byte	$30
05802 13CD                        30            .byte	$30
05803 13CE                        30            .byte	$30
05804 13CF                        78            .byte	$78
05805 13D0                        00            .byte	0
05806                                           ! 1028  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05807 13D1                        C6            .byte	$C6
05808 13D2                        38            .byte	$38
05809 13D3                        6C            .byte	$6C
05810 13D4                        C6            .byte	$C6
05811 13D5                        FE            .byte	$FE
05812 13D6                        C6            .byte	$C6
05813 13D7                        C6            .byte	$C6
05814 13D8                        00            .byte	0
05815                                           ! 1029  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05816 13D9                        30            .byte	$30
05817 13DA                        30            .byte	$30
05818 13DB                        00            .byte	0
05819 13DC                        78            .byte	$78
05820 13DD                        CC            .byte	$CC
05821 13DE                        FC            .byte	$FC
05822 13DF                        CC            .byte	$CC
05823 13E0                        00            .byte	0
05824                                           ! 1030  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05825 13E1                        1C            .byte	$1C
05826 13E2                        00            .byte	0
05827 13E3                        FC            .byte	$FC
05828 13E4                        60            .byte	$60
05829 13E5                        78            .byte	$78
05830 13E6                        60            .byte	$60
05831 13E7                        FC            .byte	$FC
05832 13E8                        00            .byte	0
05833                                           ! 1031  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05834 13E9                        00            .byte	0
05835 13EA                        00            .byte	0
05836 13EB                        7F            .byte	$7F
05837 13EC                        0C            .byte	$C
05838 13ED                        7F            .byte	$7F
05839 13EE                        CC            .byte	$CC
05840 13EF                        7F            .byte	$7F
05841 13F0                        00            .byte	0
05842                                           ! 1032  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05843 13F1                        3E            .byte	$3E
05844 13F2                        6C            .byte	$6C
05845 13F3                        CC            .byte	$CC
05846 13F4                        FE            .byte	$FE
05847 13F5                        CC            .byte	$CC
05848 13F6                        CC            .byte	$CC
05849 13F7                        CE            .byte	$CE
05850 13F8                        00            .byte	0
05851                                           ! 1033  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05852 13F9                        78            .byte	$78
05853 13FA                        CC            .byte	$CC
05854 13FB                        00            .byte	0
05855 13FC                        78            .byte	$78
05856 13FD                        CC            .byte	$CC
05857 13FE                        CC            .byte	$CC
05858 13FF                        78            .byte	$78
05859 1400                        00            .byte	0
05860                                           ! 1034  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05861 1401                        00            .byte	0
05862 1402                        CC            .byte	$CC
05863 1403                        00            .byte	0
05864 1404                        78            .byte	$78
05865 1405                        CC            .byte	$CC
05866 1406                        CC            .byte	$CC
05867 1407                        78            .byte	$78
05868 1408                        00            .byte	0
05869                                           ! 1035  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05870 1409                        00            .byte	0
05871 140A                        E0            .byte	$E0
05872 140B                        00            .byte	0
05873 140C                        78            .byte	$78
05874 140D                        CC            .byte	$CC
05875 140E                        CC            .byte	$CC
05876 140F                        78            .byte	$78
05877 1410                        00            .byte	0
05878                                           ! 1036  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05879 1411                        78            .byte	$78
05880 1412                        CC            .byte	$CC
05881 1413                        00            .byte	0
05882 1414                        CC            .byte	$CC
05883 1415                        CC            .byte	$CC
05884 1416                        CC            .byte	$CC
05885 1417                        7E            .byte	$7E
05886 1418                        00            .byte	0
05887                                           ! 1037  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05888 1419                        00            .byte	0
05889 141A                        E0            .byte	$E0
05890 141B                        00            .byte	0
05891 141C                        CC            .byte	$CC
05892 141D                        CC            .byte	$CC
05893 141E                        CC            .byte	$CC
05894 141F                        7E            .byte	$7E
05895 1420                        00            .byte	0
05896                                           ! 1038  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05897 1421                        00            .byte	0
05898 1422                        CC            .byte	$CC
05899 1423                        00            .byte	0
05900 1424                        CC            .byte	$CC
05901 1425                        CC            .byte	$CC
05902 1426                        7C            .byte	$7C
05903 1427                        0C            .byte	$C
05904 1428                        F8            .byte	$F8
05905                                           ! 1039  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05906 1429                        C3            .byte	$C3
05907 142A                        18            .byte	$18
05908 142B                        3C            .byte	$3C
05909 142C                        66            .byte	$66
05910 142D                        66            .byte	$66
05911 142E                        3C            .byte	$3C
05912 142F                        18            .byte	$18
05913 1430                        00            .byte	0
05914                                           ! 1040  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05915 1431                        CC            .byte	$CC
05916 1432                        00            .byte	0
05917 1433                        CC            .byte	$CC
05918 1434                        CC            .byte	$CC
05919 1435                        CC            .byte	$CC
05920 1436                        CC            .byte	$CC
05921 1437                        78            .byte	$78
05922 1438                        00            .byte	0
05923                                           ! 1041  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05924 1439                        18            .byte	$18
05925 143A                        18            .byte	$18
05926 143B                        7E            .byte	$7E
05927 143C                        C0            .byte	$C0
05928 143D                        C0            .byte	$C0
05929 143E                        7E            .byte	$7E
05930 143F                        18            .byte	$18
05931 1440                        18            .byte	$18
05932                                           ! 1042  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05933 1441                        38            .byte	$38
05934 1442                        6C            .byte	$6C
05935 1443                        64            .byte	$64
05936 1444                        F0            .byte	$F0
05937 1445                        60            .byte	$60
05938 1446                        E6            .byte	$E6
05939 1447                        FC            .byte	$FC
05940 1448                        00            .byte	0
05941                                           ! 1043  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05942 1449                        CC            .byte	$CC
05943 144A                        CC            .byte	$CC
05944 144B                        78            .byte	$78
05945 144C                        FC            .byte	$FC
05946 144D                        30            .byte	$30
05947 144E                        FC            .byte	$FC
05948 144F                        30            .byte	$30
05949 1450                        30            .byte	$30
05950                                           ! 1044  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05951 1451                        F8            .byte	$F8
05952 1452                        CC            .byte	$CC
05953 1453                        CC            .byte	$CC
05954 1454                        FA            .byte	$FA
05955 1455                        C6            .byte	$C6
05956 1456                        CF            .byte	$CF
05957 1457                        C6            .byte	$C6
05958 1458                        C7            .byte	$C7
05959                                           ! 1045  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05960 1459                        0E            .byte	$E
05961 145A                        1B            .byte	$1B
05962 145B                        18            .byte	$18
05963 145C                        3C            .byte	$3C
05964 145D                        18            .byte	$18
05965 145E                        18            .byte	$18
05966 145F                        D8            .byte	$D8
05967 1460                        70            .byte	$70
05968                                           ! 1046  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05969 1461                        1C            .byte	$1C
05970 1462                        00            .byte	0
05971 1463                        78            .byte	$78
05972 1464                        0C            .byte	$C
05973 1465                        7C            .byte	$7C
05974 1466                        CC            .byte	$CC
05975 1467                        7E            .byte	$7E
05976 1468                        00            .byte	0
05977                                           ! 1047  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05978 1469                        38            .byte	$38
05979 146A                        00            .byte	0
05980 146B                        70            .byte	$70
05981 146C                        30            .byte	$30
05982 146D                        30            .byte	$30
05983 146E                        30            .byte	$30
05984 146F                        78            .byte	$78
05985 1470                        00            .byte	0
05986                                           ! 1048  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05987 1471                        00            .byte	0
05988 1472                        1C            .byte	$1C
05989 1473                        00            .byte	0
05990 1474                        78            .byte	$78
05991 1475                        CC            .byte	$CC
05992 1476                        CC            .byte	$CC
05993 1477                        78            .byte	$78
05994 1478                        00            .byte	0
05995                                           ! 1049  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05996 1479                        00            .byte	0
05997 147A                        1C            .byte	$1C
05998 147B                        00            .byte	0
05999 147C                        CC            .byte	$CC
06000 147D                        CC            .byte	$CC
06001 147E                        CC            .byte	$CC
06002 147F                        7E            .byte	$7E
06003 1480                        00            .byte	0
06004                                           ! 1050  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
06005 1481                        00            .byte	0
06006 1482                        F8            .byte	$F8
06007 1483                        00            .byte	0
06008 1484                        F8            .byte	$F8
06009 1485                        CC            .byte	$CC
06010 1486                        CC            .byte	$CC
06011 1487                        CC            .byte	$CC
06012 1488                        00            .byte	0
06013                                           ! 1051  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
06014 1489                        FC            .byte	$FC
06015 148A                        00            .byte	0
06016 148B                        CC            .byte	$CC
06017 148C                        EC            .byte	$EC
06018 148D                        FC            .byte	$FC
06019 148E                        DC            .byte	$DC
06020 148F                        CC            .byte	$CC
06021 1490                        00            .byte	0
06022                                           ! 1052  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
06023 1491                        3C            .byte	$3C
06024 1492                        6C            .byte	$6C
06025 1493                        6C            .byte	$6C
06026 1494                        3E            .byte	$3E
06027 1495                        00            .byte	0
06028 1496                        7E            .byte	$7E
06029 1497                        00            .byte	0
06030 1498                        00            .byte	0
06031                                           ! 1053  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06032 1499                        38            .byte	$38
06033 149A                        6C            .byte	$6C
06034 149B                        6C            .byte	$6C
06035 149C                        38            .byte	$38
06036 149D                        00            .byte	0
06037 149E                        7C            .byte	$7C
06038 149F                        00            .byte	0
06039 14A0                        00            .byte	0
06040                                           ! 1054  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06041 14A1                        30            .byte	$30
06042 14A2                        00            .byte	0
06043 14A3                        30            .byte	$30
06044 14A4                        60            .byte	$60
06045 14A5                        C0            .byte	$C0
06046 14A6                        CC            .byte	$CC
06047 14A7                        78            .byte	$78
06048 14A8                        00            .byte	0
06049                                           ! 1055  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06050 14A9                        00            .byte	0
06051 14AA                        00            .byte	0
06052 14AB                        00            .byte	0
06053 14AC                        FC            .byte	$FC
06054 14AD                        C0            .byte	$C0
06055 14AE                        C0            .byte	$C0
06056 14AF                        00            .byte	0
06057 14B0                        00            .byte	0
06058                                           ! 1056  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06059 14B1                        00            .byte	0
06060 14B2                        00            .byte	0
06061 14B3                        00            .byte	0
06062 14B4                        FC            .byte	$FC
06063 14B5                        0C            .byte	$C
06064 14B6                        0C            .byte	$C
06065 14B7                        00            .byte	0
06066 14B8                        00            .byte	0
06067                                           ! 1057  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06068 14B9                        C3            .byte	$C3
06069 14BA                        C6            .byte	$C6
06070 14BB                        CC            .byte	$CC
06071 14BC                        DE            .byte	$DE
06072 14BD                        33            .byte	$33
06073 14BE                        66            .byte	$66
06074 14BF                        CC            .byte	$CC
06075 14C0                        0F            .byte	$F
06076                                           ! 1058  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06077 14C1                        C3            .byte	$C3
06078 14C2                        C6            .byte	$C6
06079 14C3                        CC            .byte	$CC
06080 14C4                        DB            .byte	$DB
06081 14C5                        37            .byte	$37
06082 14C6                        6F            .byte	$6F
06083 14C7                        CF            .byte	$CF
06084 14C8                        03            .byte	3
06085                                           ! 1059  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06086 14C9                        18            .byte	$18
06087 14CA                        18            .byte	$18
06088 14CB                        00            .byte	0
06089 14CC                        18            .byte	$18
06090 14CD                        18            .byte	$18
06091 14CE                        18            .byte	$18
06092 14CF                        18            .byte	$18
06093 14D0                        00            .byte	0
06094                                           ! 1060  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06095 14D1                        00            .byte	0
06096 14D2                        33            .byte	$33
06097 14D3                        66            .byte	$66
06098 14D4                        CC            .byte	$CC
06099 14D5                        66            .byte	$66
06100 14D6                        33            .byte	$33
06101 14D7                        00            .byte	0
06102 14D8                        00            .byte	0
06103                                           ! 1061  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06104 14D9                        00            .byte	0
06105 14DA                        CC            .byte	$CC
06106 14DB                        66            .byte	$66
06107 14DC                        33            .byte	$33
06108 14DD                        66            .byte	$66
06109 14DE                        CC            .byte	$CC
06110 14DF                        00            .byte	0
06111 14E0                        00            .byte	0
06112                                           ! 1062  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06113 14E1                        22            .byte	$22
06114 14E2                        88            .byte	$88
06115 14E3                        22            .byte	$22
06116 14E4                        88            .byte	$88
06117 14E5                        22            .byte	$22
06118 14E6                        88            .byte	$88
06119 14E7                        22            .byte	$22
06120 14E8                        88            .byte	$88
06121                                           ! 1063  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06122 14E9                        55            .byte	$55
06123 14EA                        AA            .byte	$AA
06124 14EB                        55            .byte	$55
06125 14EC                        AA            .byte	$AA
06126 14ED                        55            .byte	$55
06127 14EE                        AA            .byte	$AA
06128 14EF                        55            .byte	$55
06129 14F0                        AA            .byte	$AA
06130                                           ! 1064  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06131 14F1                        DB            .byte	$DB
06132 14F2                        77            .byte	$77
06133 14F3                        DB            .byte	$DB
06134 14F4                        EE            .byte	$EE
06135 14F5                        DB            .byte	$DB
06136 14F6                        77            .byte	$77
06137 14F7                        DB            .byte	$DB
06138 14F8                        EE            .byte	$EE
06139                                           ! 1065  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06140 14F9                        18            .byte	$18
06141 14FA                        18            .byte	$18
06142 14FB                        18            .byte	$18
06143 14FC                        18            .byte	$18
06144 14FD                        18            .byte	$18
06145 14FE                        18            .byte	$18
06146 14FF                        18            .byte	$18
06147 1500                        18            .byte	$18
06148                                           ! 1066  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06149 1501                        18            .byte	$18
06150 1502                        18            .byte	$18
06151 1503                        18            .byte	$18
06152 1504                        18            .byte	$18
06153 1505                        F8            .byte	$F8
06154 1506                        18            .byte	$18
06155 1507                        18            .byte	$18
06156 1508                        18            .byte	$18
06157                                           ! 1067  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06158 1509                        18            .byte	$18
06159 150A                        18            .byte	$18
06160 150B                        F8            .byte	$F8
06161 150C                        18            .byte	$18
06162 150D                        F8            .byte	$F8
06163 150E                        18            .byte	$18
06164 150F                        18            .byte	$18
06165 1510                        18            .byte	$18
06166                                           ! 1068  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06167 1511                        36            .byte	$36
06168 1512                        36            .byte	$36
06169 1513                        36            .byte	$36
06170 1514                        36            .byte	$36
06171 1515                        F6            .byte	$F6
06172 1516                        36            .byte	$36
06173 1517                        36            .byte	$36
06174 1518                        36            .byte	$36
06175                                           ! 1069  0x00, 0x0
06176 1519                        00            .byte	0
06177                                           ! 1069 0, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
06178 151A                        00            .byte	0
06179 151B                        00            .byte	0
06180 151C                        00            .byte	0
06181 151D                        FE            .byte	$FE
06182 151E                        36            .byte	$36
06183 151F                        36            .byte	$36
06184 1520                        36            .byte	$36
06185                                           ! 1070  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06186 1521                        00            .byte	0
06187 1522                        00            .byte	0
06188 1523                        F8            .byte	$F8
06189 1524                        18            .byte	$18
06190 1525                        F8            .byte	$F8
06191 1526                        18            .byte	$18
06192 1527                        18            .byte	$18
06193 1528                        18            .byte	$18
06194                                           ! 1071  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06195 1529                        36            .byte	$36
06196 152A                        36            .byte	$36
06197 152B                        F6            .byte	$F6
06198 152C                        06            .byte	6
06199 152D                        F6            .byte	$F6
06200 152E                        36            .byte	$36
06201 152F                        36            .byte	$36
06202 1530                        36            .byte	$36
06203                                           ! 1072  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06204 1531                        36            .byte	$36
06205 1532                        36            .byte	$36
06206 1533                        36            .byte	$36
06207 1534                        36            .byte	$36
06208 1535                        36            .byte	$36
06209 1536                        36            .byte	$36
06210 1537                        36            .byte	$36
06211 1538                        36            .byte	$36
06212                                           ! 1073  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06213 1539                        00            .byte	0
06214 153A                        00            .byte	0
06215 153B                        FE            .byte	$FE
06216 153C                        06            .byte	6
06217 153D                        F6            .byte	$F6
06218 153E                        36            .byte	$36
06219 153F                        36            .byte	$36
06220 1540                        36            .byte	$36
06221                                           ! 1074  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06222 1541                        36            .byte	$36
06223 1542                        36            .byte	$36
06224 1543                        F6            .byte	$F6
06225 1544                        06            .byte	6
06226 1545                        FE            .byte	$FE
06227 1546                        00            .byte	0
06228 1547                        00            .byte	0
06229 1548                        00            .byte	0
06230                                           ! 1075  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06231 1549                        36            .byte	$36
06232 154A                        36            .byte	$36
06233 154B                        36            .byte	$36
06234 154C                        36            .byte	$36
06235 154D                        FE            .byte	$FE
06236 154E                        00            .byte	0
06237 154F                        00            .byte	0
06238 1550                        00            .byte	0
06239                                           ! 1076  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06240 1551                        18            .byte	$18
06241 1552                        18            .byte	$18
06242 1553                        F8            .byte	$F8
06243 1554                        18            .byte	$18
06244 1555                        F8            .byte	$F8
06245 1556                        00            .byte	0
06246 1557                        00            .byte	0
06247 1558                        00            .byte	0
06248                                           ! 1077  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06249 1559                        00            .byte	0
06250 155A                        00            .byte	0
06251 155B                        00            .byte	0
06252 155C                        00            .byte	0
06253 155D                        F8            .byte	$F8
06254 155E                        18            .byte	$18
06255 155F                        18            .byte	$18
06256 1560                        18            .byte	$18
06257                                           ! 1078  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06258 1561                        18            .byte	$18
06259 1562                        18            .byte	$18
06260 1563                        18            .byte	$18
06261 1564                        18            .byte	$18
06262 1565                        1F            .byte	$1F
06263 1566                        00            .byte	0
06264 1567                        00            .byte	0
06265 1568                        00            .byte	0
06266                                           ! 1079  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06267 1569                        18            .byte	$18
06268 156A                        18            .byte	$18
06269 156B                        18            .byte	$18
06270 156C                        18            .byte	$18
06271 156D                        FF            .byte	$FF
06272 156E                        00            .byte	0
06273 156F                        00            .byte	0
06274 1570                        00            .byte	0
06275                                           ! 1080  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06276 1571                        00            .byte	0
06277 1572                        00            .byte	0
06278 1573                        00            .byte	0
06279 1574                        00            .byte	0
06280 1575                        FF            .byte	$FF
06281 1576                        18            .byte	$18
06282 1577                        18            .byte	$18
06283 1578                        18            .byte	$18
06284                                           ! 1081  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06285 1579                        18            .byte	$18
06286 157A                        18            .byte	$18
06287 157B                        18            .byte	$18
06288 157C                        18            .byte	$18
06289 157D                        1F            .byte	$1F
06290 157E                        18            .byte	$18
06291 157F                        18            .byte	$18
06292 1580                        18            .byte	$18
06293                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06294 1581                        00            .byte	0
06295 1582                        00            .byte	0
06296 1583                        00            .byte	0
06297 1584                        00            .byte	0
06298 1585                        FF            .byte	$FF
06299 1586                        00            .byte	0
06300 1587                        00            .byte	0
06301 1588                        00            .byte	0
06302                                           ! 1083  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06303 1589                        18            .byte	$18
06304 158A                        18            .byte	$18
06305 158B                        18            .byte	$18
06306 158C                        18            .byte	$18
06307 158D                        FF            .byte	$FF
06308 158E                        18            .byte	$18
06309 158F                        18            .byte	$18
06310 1590                        18            .byte	$18
06311                                           ! 1084  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06312 1591                        18            .byte	$18
06313 1592                        18            .byte	$18
06314 1593                        1F            .byte	$1F
06315 1594                        18            .byte	$18
06316 1595                        1F            .byte	$1F
06317 1596                        18            .byte	$18
06318 1597                        18            .byte	$18
06319 1598                        18            .byte	$18
06320                                           ! 1085  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06321 1599                        36            .byte	$36
06322 159A                        36            .byte	$36
06323 159B                        36            .byte	$36
06324 159C                        36            .byte	$36
06325 159D                        37            .byte	$37
06326 159E                        36            .byte	$36
06327 159F                        36            .byte	$36
06328 15A0                        36            .byte	$36
06329                                           ! 1086  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06330 15A1                        36            .byte	$36
06331 15A2                        36            .byte	$36
06332 15A3                        37            .byte	$37
06333 15A4                        30            .byte	$30
06334 15A5                        3F            .byte	$3F
06335 15A6                        00            .byte	0
06336 15A7                        00            .byte	0
06337 15A8                        00            .byte	0
06338                                           ! 1087  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06339 15A9                        00            .byte	0
06340 15AA                        00            .byte	0
06341 15AB                        3F            .byte	$3F
06342 15AC                        30            .byte	$30
06343 15AD                        37            .byte	$37
06344 15AE                        36            .byte	$36
06345 15AF                        36            .byte	$36
06346 15B0                        36            .byte	$36
06347                                           ! 1088  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06348 15B1                        36            .byte	$36
06349 15B2                        36            .byte	$36
06350 15B3                        F7            .byte	$F7
06351 15B4                        00            .byte	0
06352 15B5                        FF            .byte	$FF
06353 15B6                        00            .byte	0
06354 15B7                        00            .byte	0
06355 15B8                        00            .byte	0
06356                                           ! 1089  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06357 15B9                        00            .byte	0
06358 15BA                        00            .byte	0
06359 15BB                        FF            .byte	$FF
06360 15BC                        00            .byte	0
06361 15BD                        F7            .byte	$F7
06362 15BE                        36            .byte	$36
06363 15BF                        36            .byte	$36
06364 15C0                        36            .byte	$36
06365                                           ! 1090  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06366 15C1                        36            .byte	$36
06367 15C2                        36            .byte	$36
06368 15C3                        37            .byte	$37
06369 15C4                        30            .byte	$30
06370 15C5                        37            .byte	$37
06371 15C6                        36            .byte	$36
06372 15C7                        36            .byte	$36
06373 15C8                        36            .byte	$36
06374                                           ! 1091  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06375 15C9                        00            .byte	0
06376 15CA                        00            .byte	0
06377 15CB                        FF            .byte	$FF
06378 15CC                        00            .byte	0
06379 15CD                        FF            .byte	$FF
06380 15CE                        00            .byte	0
06381 15CF                        00            .byte	0
06382 15D0                        00            .byte	0
06383                                           ! 1092  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06384 15D1                        36            .byte	$36
06385 15D2                        36            .byte	$36
06386 15D3                        F7            .byte	$F7
06387 15D4                        00            .byte	0
06388 15D5                        F7            .byte	$F7
06389 15D6                        36            .byte	$36
06390 15D7                        36            .byte	$36
06391 15D8                        36            .byte	$36
06392                                           ! 1093  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06393 15D9                        18            .byte	$18
06394 15DA                        18            .byte	$18
06395 15DB                        FF            .byte	$FF
06396 15DC                        00            .byte	0
06397 15DD                        FF            .byte	$FF
06398 15DE                        00            .byte	0
06399 15DF                        00            .byte	0
06400 15E0                        00            .byte	0
06401                                           ! 1094  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06402 15E1                        36            .byte	$36
06403 15E2                        36            .byte	$36
06404 15E3                        36            .byte	$36
06405 15E4                        36            .byte	$36
06406 15E5                        FF            .byte	$FF
06407 15E6                        00            .byte	0
06408 15E7                        00            .byte	0
06409 15E8                        00            .byte	0
06410                                           ! 1095  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06411 15E9                        00            .byte	0
06412 15EA                        00            .byte	0
06413 15EB                        FF            .byte	$FF
06414 15EC                        00            .byte	0
06415 15ED                        FF            .byte	$FF
06416 15EE                        18            .byte	$18
06417 15EF                        18            .byte	$18
06418 15F0                        18            .byte	$18
06419                                           ! 1096  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06420 15F1                        00            .byte	0
06421 15F2                        00            .byte	0
06422 15F3                        00            .byte	0
06423 15F4                        00            .byte	0
06424 15F5                        FF            .byte	$FF
06425 15F6                        36            .byte	$36
06426 15F7                        36            .byte	$36
06427 15F8                        36            .byte	$36
06428                                           ! 1097  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06429 15F9                        36            .byte	$36
06430 15FA                        36            .byte	$36
06431 15FB                        36            .byte	$36
06432 15FC                        36            .byte	$36
06433 15FD                        3F            .byte	$3F
06434 15FE                        00            .byte	0
06435 15FF                        00            .byte	0
06436 1600                        00            .byte	0
06437                                           ! 1098  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06438 1601                        18            .byte	$18
06439 1602                        18            .byte	$18
06440 1603                        1F            .byte	$1F
06441 1604                        18            .byte	$18
06442 1605                        1F            .byte	$1F
06443 1606                        00            .byte	0
06444 1607                        00            .byte	0
06445 1608                        00            .byte	0
06446                                           ! 1099  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06447 1609                        00            .byte	0
06448 160A                        00            .byte	0
06449 160B                        1F            .byte	$1F
06450 160C                        18            .byte	$18
06451 160D                        1F            .byte	$1F
06452 160E                        18            .byte	$18
06453 160F                        18            .byte	$18
06454 1610                        18            .byte	$18
06455                                           ! 1100  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06456 1611                        00            .byte	0
06457 1612                        00            .byte	0
06458 1613                        00            .byte	0
06459 1614                        00            .byte	0
06460 1615                        3F            .byte	$3F
06461 1616                        36            .byte	$36
06462 1617                        36            .byte	$36
06463 1618                        36            .byte	$36
06464                                           ! 1101  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06465 1619                        36            .byte	$36
06466 161A                        36            .byte	$36
06467 161B                        36            .byte	$36
06468 161C                        36            .byte	$36
06469 161D                        FF            .byte	$FF
06470 161E                        36            .byte	$36
06471 161F                        36            .byte	$36
06472 1620                        36            .byte	$36
06473                                           ! 1102  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06474 1621                        18            .byte	$18
06475 1622                        18            .byte	$18
06476 1623                        FF            .byte	$FF
06477 1624                        18            .byte	$18
06478 1625                        FF            .byte	$FF
06479 1626                        18            .byte	$18
06480 1627                        18            .byte	$18
06481 1628                        18            .byte	$18
06482                                           ! 1103  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06483 1629                        18            .byte	$18
06484 162A                        18            .byte	$18
06485 162B                        18            .byte	$18
06486 162C                        18            .byte	$18
06487 162D                        F8            .byte	$F8
06488 162E                        00            .byte	0
06489 162F                        00            .byte	0
06490 1630                        00            .byte	0
06491                                           ! 1104  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06492 1631                        00            .byte	0
06493 1632                        00            .byte	0
06494 1633                        00            .byte	0
06495 1634                        00            .byte	0
06496 1635                        1F            .byte	$1F
06497 1636                        18            .byte	$18
06498 1637                        18            .byte	$18
06499 1638                        18            .byte	$18
06500                                           ! 1105  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06501 1639                        FF            .byte	$FF
06502 163A                        FF            .byte	$FF
06503 163B                        FF            .byte	$FF
06504 163C                        FF            .byte	$FF
06505 163D                        FF            .byte	$FF
06506 163E                        FF            .byte	$FF
06507 163F                        FF            .byte	$FF
06508 1640                        FF            .byte	$FF
06509                                           ! 1106  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06510 1641                        00            .byte	0
06511 1642                        00            .byte	0
06512 1643                        00            .byte	0
06513 1644                        00            .byte	0
06514 1645                        FF            .byte	$FF
06515 1646                        FF            .byte	$FF
06516 1647                        FF            .byte	$FF
06517 1648                        FF            .byte	$FF
06518                                           ! 1107  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06519 1649                        F0            .byte	$F0
06520 164A                        F0            .byte	$F0
06521 164B                        F0            .byte	$F0
06522 164C                        F0            .byte	$F0
06523 164D                        F0            .byte	$F0
06524 164E                        F0            .byte	$F0
06525 164F                        F0            .byte	$F0
06526 1650                        F0            .byte	$F0
06527                                           ! 1108  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06528 1651                        0F            .byte	$F
06529 1652                        0F            .byte	$F
06530 1653                        0F            .byte	$F
06531 1654                        0F            .byte	$F
06532 1655                        0F            .byte	$F
06533 1656                        0F            .byte	$F
06534 1657                        0F            .byte	$F
06535 1658                        0F            .byte	$F
06536                                           ! 1109  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06537 1659                        FF            .byte	$FF
06538 165A                        FF            .byte	$FF
06539 165B                        FF            .byte	$FF
06540 165C                        FF            .byte	$FF
06541 165D                        00            .byte	0
06542 165E                        00            .byte	0
06543 165F                        00            .byte	0
06544 1660                        00            .byte	0
06545                                           ! 1110  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06546 1661                        00            .byte	0
06547 1662                        00            .byte	0
06548 1663                        76            .byte	$76
06549 1664                        DC            .byte	$DC
06550 1665                        C8            .byte	$C8
06551 1666                        DC            .byte	$DC
06552 1667                        76            .byte	$76
06553 1668                        00            .byte	0
06554                                           ! 1111 
06555                                           ! 1111  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06556 1669                        00            .byte	0
06557 166A                        78            .byte	$78
06558 166B                        CC            .byte	$CC
06559 166C                        F8            .byte	$F8
06560 166D                        CC            .byte	$CC
06561 166E                        F8            .byte	$F8
06562 166F                        C0            .byte	$C0
06563 1670                        C0            .byte	$C0
06564                                           ! 1112  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06565 1671                        00            .byte	0
06566 1672                        FC            .byte	$FC
06567 1673                        CC            .byte	$CC
06568 1674                        C0            .byte	$C0
06569 1675                        C0            .byte	$C0
06570 1676                        C0            .byte	$C0
06571 1677                        C0            .byte	$C0
06572 1678                        00            .byte	0
06573                                           ! 1113  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06574 1679                        00            .byte	0
06575 167A                        FE            .byte	$FE
06576 167B                        6C            .byte	$6C
06577 167C                        6C            .byte	$6C
06578 167D                        6C            .byte	$6C
06579 167E                        6C            .byte	$6C
06580 167F                        6C            .byte	$6C
06581 1680                        00            .byte	0
06582                                           ! 1114  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06583 1681                        FC            .byte	$FC
06584 1682                        CC            .byte	$CC
06585 1683                        60            .byte	$60
06586 1684                        30            .byte	$30
06587 1685                        60            .byte	$60
06588 1686                        CC            .byte	$CC
06589 1687                        FC            .byte	$FC
06590 1688                        00            .byte	0
06591                                           ! 1115  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06592 1689                        00            .byte	0
06593 168A                        00            .byte	0
06594 168B                        7E            .byte	$7E
06595 168C                        D8            .byte	$D8
06596 168D                        D8            .byte	$D8
06597 168E                        D8            .byte	$D8
06598 168F                        70            .byte	$70
06599 1690                        00            .byte	0
06600                                           ! 1116  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06601 1691                        00            .byte	0
06602 1692                        66            .byte	$66
06603 1693                        66            .byte	$66
06604 1694                        66            .byte	$66
06605 1695                        66            .byte	$66
06606 1696                        7C            .byte	$7C
06607 1697                        60            .byte	$60
06608 1698                        C0            .byte	$C0
06609                                           ! 1117  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06610 1699                        00            .byte	0
06611 169A                        76            .byte	$76
06612 169B                        DC            .byte	$DC
06613 169C                        18            .byte	$18
06614 169D                        18            .byte	$18
06615 169E                        18            .byte	$18
06616 169F                        18            .byte	$18
06617 16A0                        00            .byte	0
06618                                           ! 1118  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06619 16A1                        FC            .byte	$FC
06620 16A2                        30            .byte	$30
06621 16A3                        78            .byte	$78
06622 16A4                        CC            .byte	$CC
06623 16A5                        CC            .byte	$CC
06624 16A6                        78            .byte	$78
06625 16A7                        30            .byte	$30
06626 16A8                        FC            .byte	$FC
06627                                           ! 1119  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06628 16A9                        38            .byte	$38
06629 16AA                        6C            .byte	$6C
06630 16AB                        C6            .byte	$C6
06631 16AC                        FE            .byte	$FE
06632 16AD                        C6            .byte	$C6
06633 16AE                        6C            .byte	$6C
06634 16AF                        38            .byte	$38
06635 16B0                        00            .byte	0
06636                                           ! 1120  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06637 16B1                        38            .byte	$38
06638 16B2                        6C            .byte	$6C
06639 16B3                        C6            .byte	$C6
06640 16B4                        C6            .byte	$C6
06641 16B5                        6C            .byte	$6C
06642 16B6                        6C            .byte	$6C
06643 16B7                        EE            .byte	$EE
06644 16B8                        00            .byte	0
06645                                           ! 1121  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06646 16B9                        1C            .byte	$1C
06647 16BA                        30            .byte	$30
06648 16BB                        18            .byte	$18
06649 16BC                        7C            .byte	$7C
06650 16BD                        CC            .byte	$CC
06651 16BE                        CC            .byte	$CC
06652 16BF                        78            .byte	$78
06653 16C0                        00            .byte	0
06654                                           ! 1122  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06655 16C1                        00            .byte	0
06656 16C2                        00            .byte	0
06657 16C3                        7E            .byte	$7E
06658 16C4                        DB            .byte	$DB
06659 16C5                        DB            .byte	$DB
06660 16C6                        7E            .byte	$7E
06661 16C7                        00            .byte	0
06662 16C8                        00            .byte	0
06663                                           ! 1123  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06664 16C9                        06            .byte	6
06665 16CA                        0C            .byte	$C
06666 16CB                        7E            .byte	$7E
06667 16CC                        DB            .byte	$DB
06668 16CD                        DB            .byte	$DB
06669 16CE                        7E            .byte	$7E
06670 16CF                        60            .byte	$60
06671 16D0                        C0            .byte	$C0
06672                                           ! 1124  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06673 16D1                        38            .byte	$38
06674 16D2                        60            .byte	$60
06675 16D3                        C0            .byte	$C0
06676 16D4                        F8            .byte	$F8
06677 16D5                        C0            .byte	$C0
06678 16D6                        60            .byte	$60
06679 16D7                        38            .byte	$38
06680 16D8                        00            .byte	0
06681                                           ! 1125  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06682 16D9                        78            .byte	$78
06683 16DA                        CC            .byte	$CC
06684 16DB                        CC            .byte	$CC
06685 16DC                        CC            .byte	$CC
06686 16DD                        CC            .byte	$CC
06687 16DE                        CC            .byte	$CC
06688 16DF                        CC            .byte	$CC
06689 16E0                        00            .byte	0
06690                                           ! 1126  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06691 16E1                        00            .byte	0
06692 16E2                        FC            .byte	$FC
06693 16E3                        00            .byte	0
06694 16E4                        FC            .byte	$FC
06695 16E5                        00            .byte	0
06696 16E6                        FC            .byte	$FC
06697 16E7                        00            .byte	0
06698 16E8                        00            .byte	0
06699                                           ! 1127  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06700 16E9                        30            .byte	$30
06701 16EA                        30            .byte	$30
06702 16EB                        FC            .byte	$FC
06703 16EC                        30            .byte	$30
06704 16ED                        30            .byte	$30
06705 16EE                        00            .byte	0
06706 16EF                        FC            .byte	$FC
06707 16F0                        00            .byte	0
06708                                           ! 1128  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06709 16F1                        60            .byte	$60
06710 16F2                        30            .byte	$30
06711 16F3                        18            .byte	$18
06712 16F4                        30            .byte	$30
06713 16F5                        60            .byte	$60
06714 16F6                        00            .byte	0
06715 16F7                        FC            .byte	$FC
06716 16F8                        00            .byte	0
06717                                           ! 1129  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06718 16F9                        18            .byte	$18
06719 16FA                        30            .byte	$30
06720 16FB                        60            .byte	$60
06721 16FC                        30            .byte	$30
06722 16FD                        18            .byte	$18
06723 16FE                        00            .byte	0
06724 16FF                        FC            .byte	$FC
06725 1700                        00            .byte	0
06726                                           ! 1130  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06727 1701                        0E            .byte	$E
06728 1702                        1B            .byte	$1B
06729 1703                        1B            .byte	$1B
06730 1704                        18            .byte	$18
06731 1705                        18            .byte	$18
06732 1706                        18            .byte	$18
06733 1707                        18            .byte	$18
06734 1708                        18            .byte	$18
06735                                           ! 1131  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06736 1709                        18            .byte	$18
06737 170A                        18            .byte	$18
06738 170B                        18            .byte	$18
06739 170C                        18            .byte	$18
06740 170D                        18            .byte	$18
06741 170E                        D8            .byte	$D8
06742 170F                        D8            .byte	$D8
06743 1710                        70            .byte	$70
06744                                           ! 1132  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06745 1711                        30            .byte	$30
06746 1712                        30            .byte	$30
06747 1713                        00            .byte	0
06748 1714                        FC            .byte	$FC
06749 1715                        00            .byte	0
06750 1716                        30            .byte	$30
06751 1717                        30            .byte	$30
06752 1718                        00            .byte	0
06753                                           ! 1133  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06754 1719                        00            .byte	0
06755 171A                        76            .byte	$76
06756 171B                        DC            .byte	$DC
06757 171C                        00            .byte	0
06758 171D                        76            .byte	$76
06759 171E                        DC            .byte	$DC
06760 171F                        00            .byte	0
06761 1720                        00            .byte	0
06762                                           ! 1134  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06763 1721                        38            .byte	$38
06764 1722                        6C            .byte	$6C
06765 1723                        6C            .byte	$6C
06766 1724                        38            .byte	$38
06767 1725                        00            .byte	0
06768 1726                        00            .byte	0
06769 1727                        00            .byte	0
06770 1728                        00            .byte	0
06771                                           ! 1135  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06772 1729                        00            .byte	0
06773 172A                        00            .byte	0
06774 172B                        00            .byte	0
06775 172C                        18            .byte	$18
06776 172D                        18            .byte	$18
06777 172E                        00            .byte	0
06778 172F                        00            .byte	0
06779 1730                        00            .byte	0
06780                                           ! 1136  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06781 1731                        00            .byte	0
06782 1732                        00            .byte	0
06783 1733                        00            .byte	0
06784 1734                        00            .byte	0
06785 1735                        18            .byte	$18
06786 1736                        00            .byte	0
06787 1737                        00            .byte	0
06788 1738                        00            .byte	0
06789                                           ! 1137  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06790 1739                        0F            .byte	$F
06791 173A                        0C            .byte	$C
06792 173B                        0C            .byte	$C
06793 173C                        0C            .byte	$C
06794 173D                        EC            .byte	$EC
06795 173E                        6C            .byte	$6C
06796 173F                        3C            .byte	$3C
06797 1740                        1C            .byte	$1C
06798                                           ! 1138  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06799 1741                        78            .byte	$78
06800 1742                        6C            .byte	$6C
06801 1743                        6C            .byte	$6C
06802 1744                        6C            .byte	$6C
06803 1745                        6C            .byte	$6C
06804 1746                        00            .byte	0
06805 1747                        00            .byte	0
06806 1748                        00            .byte	0
06807                                           ! 1139  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06808 1749                        70            .byte	$70
06809 174A                        18            .byte	$18
06810 174B                        30            .byte	$30
06811 174C                        60            .byte	$60
06812 174D                        78            .byte	$78
06813 174E                        00            .byte	0
06814 174F                        00            .byte	0
06815 1750                        00            .byte	0
06816                                           ! 1140  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06817 1751                        00            .byte	0
06818 1752                        00            .byte	0
06819 1753                        3C            .byte	$3C
06820 1754                        3C            .byte	$3C
06821 1755                        3C            .byte	$3C
06822 1756                        3C            .byte	$3C
06823 1757                        00            .byte	0
06824 1758                        00            .byte	0
06825                                           ! 1141  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06826 1759                        00            .byte	0
06827 175A                        00            .byte	0
06828 175B                        00            .byte	0
06829 175C                        00            .byte	0
06830 175D                        00            .byte	0
06831 175E                        00            .byte	0
06832 175F                        00            .byte	0
06833                                           ! 1142 };
06834 1760                        00            .byte	0
06835                                           !BCC_EOS
06836                                           ! 1143 static Bit8u vgafont14[256*14]=
06837                                           ! 1144 {
06838                       00001761            _vgafont14:
06839                                           ! 1145  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06840 1761                        00            .byte	0
06841 1762                        00            .byte	0
06842 1763                        00            .byte	0
06843 1764                        00            .byte	0
06844 1765                        00            .byte	0
06845 1766                        00            .byte	0
06846 1767                        00            .byte	0
06847 1768                        00            .byte	0
06848 1769                        00            .byte	0
06849 176A                        00            .byte	0
06850 176B                        00            .byte	0
06851 176C                        00            .byte	0
06852 176D                        00            .byte	0
06853 176E                        00            .byte	0
06854                                           ! 1146  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06855 176F                        00            .byte	0
06856 1770                        00            .byte	0
06857 1771                        7E            .byte	$7E
06858 1772                        81            .byte	$81
06859 1773                        A5            .byte	$A5
06860 1774                        81            .byte	$81
06861 1775                        81            .byte	$81
06862 1776                        BD            .byte	$BD
06863 1777                        99            .byte	$99
06864 1778                        81            .byte	$81
06865 1779                        7E            .byte	$7E
06866 177A                        00            .byte	0
06867 177B                        00            .byte	0
06868 177C                        00            .byte	0
06869                                           ! 1147  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06870 177D                        00            .byte	0
06871 177E                        00            .byte	0
06872 177F                        7E            .byte	$7E
06873 1780                        FF            .byte	$FF
06874 1781                        DB            .byte	$DB
06875 1782                        FF            .byte	$FF
06876 1783                        FF            .byte	$FF
06877 1784                        C3            .byte	$C3
06878 1785                        E7            .byte	$E7
06879 1786                        FF            .byte	$FF
06880 1787                        7E            .byte	$7E
06881 1788                        00            .byte	0
06882 1789                        00            .byte	0
06883 178A                        00            .byte	0
06884                                           ! 1148  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06885 178B                        00            .byte	0
06886 178C                        00            .byte	0
06887 178D                        00            .byte	0
06888 178E                        6C            .byte	$6C
06889 178F                        FE            .byte	$FE
06890 1790                        FE            .byte	$FE
06891 1791                        FE            .byte	$FE
06892 1792                        FE            .byte	$FE
06893 1793                        7C            .byte	$7C
06894 1794                        38            .byte	$38
06895 1795                        10            .byte	$10
06896 1796                        00            .byte	0
06897 1797                        00            .byte	0
06898 1798                        00            .byte	0
06899                                           ! 1149  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06900 1799                        00            .byte	0
06901 179A                        00            .byte	0
06902 179B                        00            .byte	0
06903 179C                        10            .byte	$10
06904 179D                        38            .byte	$38
06905 179E                        7C            .byte	$7C
06906 179F                        FE            .byte	$FE
06907 17A0                        7C            .byte	$7C
06908 17A1                        38            .byte	$38
06909 17A2                        10            .byte	$10
06910 17A3                        00            .byte	0
06911 17A4                        00            .byte	0
06912 17A5                        00            .byte	0
06913 17A6                        00            .byte	0
06914                                           ! 1150  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0
06915 17A7                        00            .byte	0
06916 17A8                        00            .byte	0
06917 17A9                        18            .byte	$18
06918 17AA                        3C            .byte	$3C
06919 17AB                        3C            .byte	$3C
06920 17AC                        E7            .byte	$E7
06921 17AD                        E7            .byte	$E7
06922 17AE                        E7            .byte	$E7
06923 17AF                        18            .byte	$18
06924 17B0                        18            .byte	$18
06925 17B1                        3C            .byte	$3C
06926                                           ! 1150 x00, 0x00, 0x00,
06927 17B2                        00            .byte	0
06928 17B3                        00            .byte	0
06929 17B4                        00            .byte	0
06930                                           ! 1151  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06931 17B5                        00            .byte	0
06932 17B6                        00            .byte	0
06933 17B7                        18            .byte	$18
06934 17B8                        3C            .byte	$3C
06935 17B9                        7E            .byte	$7E
06936 17BA                        FF            .byte	$FF
06937 17BB                        FF            .byte	$FF
06938 17BC                        7E            .byte	$7E
06939 17BD                        18            .byte	$18
06940 17BE                        18            .byte	$18
06941 17BF                        3C            .byte	$3C
06942 17C0                        00            .byte	0
06943 17C1                        00            .byte	0
06944 17C2                        00            .byte	0
06945                                           ! 1152  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06946 17C3                        00            .byte	0
06947 17C4                        00            .byte	0
06948 17C5                        00            .byte	0
06949 17C6                        00            .byte	0
06950 17C7                        00            .byte	0
06951 17C8                        18            .byte	$18
06952 17C9                        3C            .byte	$3C
06953 17CA                        3C            .byte	$3C
06954 17CB                        18            .byte	$18
06955 17CC                        00            .byte	0
06956 17CD                        00            .byte	0
06957 17CE                        00            .byte	0
06958 17CF                        00            .byte	0
06959 17D0                        00            .byte	0
06960                                           ! 1153  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06961 17D1                        FF            .byte	$FF
06962 17D2                        FF            .byte	$FF
06963 17D3                        FF            .byte	$FF
06964 17D4                        FF            .byte	$FF
06965 17D5                        FF            .byte	$FF
06966 17D6                        E7            .byte	$E7
06967 17D7                        C3            .byte	$C3
06968 17D8                        C3            .byte	$C3
06969 17D9                        E7            .byte	$E7
06970 17DA                        FF            .byte	$FF
06971 17DB                        FF            .byte	$FF
06972 17DC                        FF            .byte	$FF
06973 17DD                        FF            .byte	$FF
06974 17DE                        FF            .byte	$FF
06975                                           ! 1154  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06976 17DF                        00            .byte	0
06977 17E0                        00            .byte	0
06978 17E1                        00            .byte	0
06979 17E2                        00            .byte	0
06980 17E3                        3C            .byte	$3C
06981 17E4                        66            .byte	$66
06982 17E5                        42            .byte	$42
06983 17E6                        42            .byte	$42
06984 17E7                        66            .byte	$66
06985 17E8                        3C            .byte	$3C
06986 17E9                        00            .byte	0
06987 17EA                        00            .byte	0
06988 17EB                        00            .byte	0
06989 17EC                        00            .byte	0
06990                                           ! 1155  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06991 17ED                        FF            .byte	$FF
06992 17EE                        FF            .byte	$FF
06993 17EF                        FF            .byte	$FF
06994 17F0                        FF            .byte	$FF
06995 17F1                        C3            .byte	$C3
06996 17F2                        99            .byte	$99
06997 17F3                        BD            .byte	$BD
06998 17F4                        BD            .byte	$BD
06999 17F5                        99            .byte	$99
07000 17F6                        C3            .byte	$C3
07001 17F7                        FF            .byte	$FF
07002 17F8                        FF            .byte	$FF
07003 17F9                        FF            .byte	$FF
07004 17FA                        FF            .byte	$FF
07005                                           ! 1156  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07006 17FB                        00            .byte	0
07007 17FC                        00            .byte	0
07008 17FD                        1E            .byte	$1E
07009 17FE                        0E            .byte	$E
07010 17FF                        1A            .byte	$1A
07011 1800                        32            .byte	$32
07012 1801                        78            .byte	$78
07013 1802                        CC            .byte	$CC
07014 1803                        CC            .byte	$CC
07015 1804                        CC            .byte	$CC
07016 1805                        78            .byte	$78
07017 1806                        00            .byte	0
07018 1807                        00            .byte	0
07019 1808                        00            .byte	0
07020                                           ! 1157  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
07021 1809                        00            .byte	0
07022 180A                        00            .byte	0
07023 180B                        3C            .byte	$3C
07024 180C                        66            .byte	$66
07025 180D                        66            .byte	$66
07026 180E                        66            .byte	$66
07027 180F                        3C            .byte	$3C
07028 1810                        18            .byte	$18
07029 1811                        7E            .byte	$7E
07030 1812                        18            .byte	$18
07031 1813                        18            .byte	$18
07032 1814                        00            .byte	0
07033 1815                        00            .byte	0
07034 1816                        00            .byte	0
07035                                           ! 1158  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07036 1817                        00            .byte	0
07037 1818                        00            .byte	0
07038 1819                        3F            .byte	$3F
07039 181A                        33            .byte	$33
07040 181B                        3F            .byte	$3F
07041 181C                        30            .byte	$30
07042 181D                        30            .byte	$30
07043 181E                        30            .byte	$30
07044 181F                        70            .byte	$70
07045 1820                        F0            .byte	$F0
07046 1821                        E0            .byte	$E0
07047 1822                        00            .byte	0
07048 1823                        00            .byte	0
07049 1824                        00            .byte	0
07050                                           ! 1159  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07051 1825                        00            .byte	0
07052 1826                        00            .byte	0
07053 1827                        7F            .byte	$7F
07054 1828                        63            .byte	$63
07055 1829                        7F            .byte	$7F
07056 182A                        63            .byte	$63
07057 182B                        63            .byte	$63
07058 182C                        63            .byte	$63
07059 182D                        67            .byte	$67
07060 182E                        E7            .byte	$E7
07061 182F                        E6            .byte	$E6
07062 1830                        C0            .byte	$C0
07063 1831                        00            .byte	0
07064 1832                        00            .byte	0
07065                                           ! 1160  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07066 1833                        00            .byte	0
07067 1834                        00            .byte	0
07068 1835                        18            .byte	$18
07069 1836                        18            .byte	$18
07070 1837                        DB            .byte	$DB
07071 1838                        3C            .byte	$3C
07072 1839                        E7            .byte	$E7
07073 183A                        3C            .byte	$3C
07074 183B                        DB            .byte	$DB
07075 183C                        18            .byte	$18
07076 183D                        18            .byte	$18
07077 183E                        00            .byte	0
07078 183F                        00            .byte	0
07079 1840                        00            .byte	0
07080                                           ! 1161  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07081 1841                        00            .byte	0
07082 1842                        00            .byte	0
07083 1843                        80            .byte	$80
07084 1844                        C0            .byte	$C0
07085 1845                        E0            .byte	$E0
07086 1846                        F8            .byte	$F8
07087 1847                        FE            .byte	$FE
07088 1848                        F8            .byte	$F8
07089 1849                        E0            .byte	$E0
07090 184A                        C0            .byte	$C0
07091 184B                        80            .byte	$80
07092 184C                        00            .byte	0
07093 184D                        00            .byte	0
07094 184E                        00            .byte	0
07095                                           ! 1162  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07096 184F                        00            .byte	0
07097 1850                        00            .byte	0
07098 1851                        02            .byte	2
07099 1852                        06            .byte	6
07100 1853                        0E            .byte	$E
07101 1854                        3E            .byte	$3E
07102 1855                        FE            .byte	$FE
07103 1856                        3E            .byte	$3E
07104 1857                        0E            .byte	$E
07105 1858                        06            .byte	6
07106 1859                        02            .byte	2
07107 185A                        00            .byte	0
07108 185B                        00            .byte	0
07109 185C                        00            .byte	0
07110                                           ! 1163  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07111 185D                        00            .byte	0
07112 185E                        00            .byte	0
07113 185F                        18            .byte	$18
07114 1860                        3C            .byte	$3C
07115 1861                        7E            .byte	$7E
07116 1862                        18            .byte	$18
07117 1863                        18            .byte	$18
07118 1864                        18            .byte	$18
07119 1865                        7E            .byte	$7E
07120 1866                        3C            .byte	$3C
07121 1867                        18            .byte	$18
07122 1868                        00            .byte	0
07123 1869                        00            .byte	0
07124 186A                        00            .byte	0
07125                                           ! 1164  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07126 186B                        00            .byte	0
07127 186C                        00            .byte	0
07128 186D                        66            .byte	$66
07129 186E                        66            .byte	$66
07130 186F                        66            .byte	$66
07131 1870                        66            .byte	$66
07132 1871                        66            .byte	$66
07133 1872                        66            .byte	$66
07134 1873                        00            .byte	0
07135 1874                        66            .byte	$66
07136 1875                        66            .byte	$66
07137 1876                        00            .byte	0
07138 1877                        00            .byte	0
07139 1878                        00            .byte	0
07140                                           ! 1165  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07141 1879                        00            .byte	0
07142 187A                        00            .byte	0
07143 187B                        7F            .byte	$7F
07144 187C                        DB            .byte	$DB
07145 187D                        DB            .byte	$DB
07146 187E                        DB            .byte	$DB
07147 187F                        7B            .byte	$7B
07148 1880                        1B            .byte	$1B
07149 1881                        1B            .byte	$1B
07150 1882                        1B            .byte	$1B
07151 1883                        1B            .byte	$1B
07152 1884                        00            .byte	0
07153 1885                        00            .byte	0
07154 1886                        00            .byte	0
07155                                           ! 1166  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07156 1887                        00            .byte	0
07157 1888                        7C            .byte	$7C
07158 1889                        C6            .byte	$C6
07159 188A                        60            .byte	$60
07160 188B                        38            .byte	$38
07161 188C                        6C            .byte	$6C
07162 188D                        C6            .byte	$C6
07163 188E                        C6            .byte	$C6
07164 188F                        6C            .byte	$6C
07165 1890                        38            .byte	$38
07166 1891                        0C            .byte	$C
07167 1892                        C6            .byte	$C6
07168 1893                        7C            .byte	$7C
07169 1894                        00            .byte	0
07170                                           ! 1167  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07171 1895                        00            .byte	0
07172 1896                        00            .byte	0
07173 1897                        00            .byte	0
07174 1898                        00            .byte	0
07175 1899                        00            .byte	0
07176 189A                        00            .byte	0
07177 189B                        00            .byte	0
07178 189C                        00            .byte	0
07179 189D                        FE            .byte	$FE
07180 189E                        FE            .byte	$FE
07181 189F                        FE            .byte	$FE
07182 18A0                        00            .byte	0
07183 18A1                        00            .byte	0
07184 18A2                        00            .byte	0
07185                                           ! 1168  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07186 18A3                        00            .byte	0
07187 18A4                        00            .byte	0
07188 18A5                        18            .byte	$18
07189 18A6                        3C            .byte	$3C
07190 18A7                        7E            .byte	$7E
07191 18A8                        18            .byte	$18
07192 18A9                        18            .byte	$18
07193 18AA                        18            .byte	$18
07194 18AB                        7E            .byte	$7E
07195 18AC                        3C            .byte	$3C
07196 18AD                        18            .byte	$18
07197 18AE                        7E            .byte	$7E
07198 18AF                        00            .byte	0
07199 18B0                        00            .byte	0
07200                                           ! 1169  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07201 18B1                        00            .byte	0
07202 18B2                        00            .byte	0
07203 18B3                        18            .byte	$18
07204 18B4                        3C            .byte	$3C
07205 18B5                        7E            .byte	$7E
07206 18B6                        18            .byte	$18
07207 18B7                        18            .byte	$18
07208 18B8                        18            .byte	$18
07209 18B9                        18            .byte	$18
07210 18BA                        18            .byte	$18
07211 18BB                        18            .byte	$18
07212 18BC                        00            .byte	0
07213 18BD                        00            .byte	0
07214 18BE                        00            .byte	0
07215                                           ! 1170  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07216 18BF                        00            .byte	0
07217 18C0                        00            .byte	0
07218 18C1                        18            .byte	$18
07219 18C2                        18            .byte	$18
07220 18C3                        18            .byte	$18
07221 18C4                        18            .byte	$18
07222 18C5                        18            .byte	$18
07223 18C6                        18            .byte	$18
07224 18C7                        7E            .byte	$7E
07225 18C8                        3C            .byte	$3C
07226 18C9                        18            .byte	$18
07227 18CA                        00            .byte	0
07228 18CB                        00            .byte	0
07229 18CC                        00            .byte	0
07230                                           ! 1171  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07231 18CD                        00            .byte	0
07232 18CE                        00            .byte	0
07233 18CF                        00            .byte	0
07234 18D0                        00            .byte	0
07235 18D1                        18            .byte	$18
07236 18D2                        0C            .byte	$C
07237 18D3                        FE            .byte	$FE
07238 18D4                        0C            .byte	$C
07239 18D5                        18            .byte	$18
07240 18D6                        00            .byte	0
07241 18D7                        00            .byte	0
07242 18D8                        00            .byte	0
07243 18D9                        00            .byte	0
07244 18DA                        00            .byte	0
07245                                           ! 1172  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07246 18DB                        00            .byte	0
07247 18DC                        00            .byte	0
07248 18DD                        00            .byte	0
07249 18DE                        00            .byte	0
07250 18DF                        30            .byte	$30
07251 18E0                        60            .byte	$60
07252 18E1                        FE            .byte	$FE
07253 18E2                        60            .byte	$60
07254 18E3                        30            .byte	$30
07255 18E4                        00            .byte	0
07256 18E5                        00            .byte	0
07257 18E6                        00            .byte	0
07258 18E7                        00            .byte	0
07259 18E8                        00            .byte	0
07260                                           ! 1173  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
07261 18E9                        00            .byte	0
07262 18EA                        00            .byte	0
07263 18EB                        00            .byte	0
07264 18EC                        00            .byte	0
07265 18ED                        00            .byte	0
07266 18EE                        C0            .byte	$C0
07267 18EF                        C0            .byte	$C0
07268 18F0                        C0            .byte	$C0
07269 18F1                        FE            .byte	$FE
07270 18F2                        00            .byte	0
07271 18F3                        00            .byte	0
07272 18F4                        00            .byte	0
07273 18F5                        00            .byte	0
07274 18F6                        00            .byte	0
07275                                           ! 1174  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x0
07276 18F7                        00            .byte	0
07277 18F8                        00            .byte	0
07278 18F9                        00            .byte	0
07279 18FA                        00            .byte	0
07280 18FB                        28            .byte	$28
07281 18FC                        6C            .byte	$6C
07282 18FD                        FE            .byte	$FE
07283 18FE                        6C            .byte	$6C
07284 18FF                        28            .byte	$28
07285 1900                        00            .byte	0
07286 1901                        00            .byte	0
07287 1902                        00            .byte	0
07288                                           ! 1174 0, 0x00,
07289 1903                        00            .byte	0
07290 1904                        00            .byte	0
07291                                           ! 1175  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07292 1905                        00            .byte	0
07293 1906                        00            .byte	0
07294 1907                        00            .byte	0
07295 1908                        10            .byte	$10
07296 1909                        38            .byte	$38
07297 190A                        38            .byte	$38
07298 190B                        7C            .byte	$7C
07299 190C                        7C            .byte	$7C
07300 190D                        FE            .byte	$FE
07301 190E                        FE            .byte	$FE
07302 190F                        00            .byte	0
07303 1910                        00            .byte	0
07304 1911                        00            .byte	0
07305 1912                        00            .byte	0
07306                                           ! 1176  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07307 1913                        00            .byte	0
07308 1914                        00            .byte	0
07309 1915                        00            .byte	0
07310 1916                        FE            .byte	$FE
07311 1917                        FE            .byte	$FE
07312 1918                        7C            .byte	$7C
07313 1919                        7C            .byte	$7C
07314 191A                        38            .byte	$38
07315 191B                        38            .byte	$38
07316 191C                        10            .byte	$10
07317 191D                        00            .byte	0
07318 191E                        00            .byte	0
07319 191F                        00            .byte	0
07320 1920                        00            .byte	0
07321                                           ! 1177  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07322 1921                        00            .byte	0
07323 1922                        00            .byte	0
07324 1923                        00            .byte	0
07325 1924                        00            .byte	0
07326 1925                        00            .byte	0
07327 1926                        00            .byte	0
07328 1927                        00            .byte	0
07329 1928                        00            .byte	0
07330 1929                        00            .byte	0
07331 192A                        00            .byte	0
07332 192B                        00            .byte	0
07333 192C                        00            .byte	0
07334 192D                        00            .byte	0
07335 192E                        00            .byte	0
07336                                           ! 1178  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07337 192F                        00            .byte	0
07338 1930                        00            .byte	0
07339 1931                        18            .byte	$18
07340 1932                        3C            .byte	$3C
07341 1933                        3C            .byte	$3C
07342 1934                        3C            .byte	$3C
07343 1935                        18            .byte	$18
07344 1936                        18            .byte	$18
07345 1937                        00            .byte	0
07346 1938                        18            .byte	$18
07347 1939                        18            .byte	$18
07348 193A                        00            .byte	0
07349 193B                        00            .byte	0
07350 193C                        00            .byte	0
07351                                           ! 1179  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07352 193D                        00            .byte	0
07353 193E                        66            .byte	$66
07354 193F                        66            .byte	$66
07355 1940                        66            .byte	$66
07356 1941                        24            .byte	$24
07357 1942                        00            .byte	0
07358 1943                        00            .byte	0
07359 1944                        00            .byte	0
07360 1945                        00            .byte	0
07361 1946                        00            .byte	0
07362 1947                        00            .byte	0
07363 1948                        00            .byte	0
07364 1949                        00            .byte	0
07365 194A                        00            .byte	0
07366                                           ! 1180  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07367 194B                        00            .byte	0
07368 194C                        00            .byte	0
07369 194D                        6C            .byte	$6C
07370 194E                        6C            .byte	$6C
07371 194F                        FE            .byte	$FE
07372 1950                        6C            .byte	$6C
07373 1951                        6C            .byte	$6C
07374 1952                        6C            .byte	$6C
07375 1953                        FE            .byte	$FE
07376 1954                        6C            .byte	$6C
07377 1955                        6C            .byte	$6C
07378 1956                        00            .byte	0
07379 1957                        00            .byte	0
07380 1958                        00            .byte	0
07381                                           ! 1181  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07382 1959                        18            .byte	$18
07383 195A                        18            .byte	$18
07384 195B                        7C            .byte	$7C
07385 195C                        C6            .byte	$C6
07386 195D                        C2            .byte	$C2
07387 195E                        C0            .byte	$C0
07388 195F                        7C            .byte	$7C
07389 1960                        06            .byte	6
07390 1961                        86            .byte	$86
07391 1962                        C6            .byte	$C6
07392 1963                        7C            .byte	$7C
07393 1964                        18            .byte	$18
07394 1965                        18            .byte	$18
07395 1966                        00            .byte	0
07396                                           ! 1182  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07397 1967                        00            .byte	0
07398 1968                        00            .byte	0
07399 1969                        00            .byte	0
07400 196A                        00            .byte	0
07401 196B                        C2            .byte	$C2
07402 196C                        C6            .byte	$C6
07403 196D                        0C            .byte	$C
07404 196E                        18            .byte	$18
07405 196F                        30            .byte	$30
07406 1970                        66            .byte	$66
07407 1971                        C6            .byte	$C6
07408 1972                        00            .byte	0
07409 1973                        00            .byte	0
07410 1974                        00            .byte	0
07411                                           ! 1183  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07412 1975                        00            .byte	0
07413 1976                        00            .byte	0
07414 1977                        38            .byte	$38
07415 1978                        6C            .byte	$6C
07416 1979                        6C            .byte	$6C
07417 197A                        38            .byte	$38
07418 197B                        76            .byte	$76
07419 197C                        DC            .byte	$DC
07420 197D                        CC            .byte	$CC
07421 197E                        CC            .byte	$CC
07422 197F                        76            .byte	$76
07423 1980                        00            .byte	0
07424 1981                        00            .byte	0
07425 1982                        00            .byte	0
07426                                           ! 1184  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07427 1983                        00            .byte	0
07428 1984                        30            .byte	$30
07429 1985                        30            .byte	$30
07430 1986                        30            .byte	$30
07431 1987                        60            .byte	$60
07432 1988                        00            .byte	0
07433 1989                        00            .byte	0
07434 198A                        00            .byte	0
07435 198B                        00            .byte	0
07436 198C                        00            .byte	0
07437 198D                        00            .byte	0
07438 198E                        00            .byte	0
07439 198F                        00            .byte	0
07440 1990                        00            .byte	0
07441                                           ! 1185  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07442 1991                        00            .byte	0
07443 1992                        00            .byte	0
07444 1993                        0C            .byte	$C
07445 1994                        18            .byte	$18
07446 1995                        30            .byte	$30
07447 1996                        30            .byte	$30
07448 1997                        30            .byte	$30
07449 1998                        30            .byte	$30
07450 1999                        30            .byte	$30
07451 199A                        18            .byte	$18
07452 199B                        0C            .byte	$C
07453 199C                        00            .byte	0
07454 199D                        00            .byte	0
07455 199E                        00            .byte	0
07456                                           ! 1186  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07457 199F                        00            .byte	0
07458 19A0                        00            .byte	0
07459 19A1                        30            .byte	$30
07460 19A2                        18            .byte	$18
07461 19A3                        0C            .byte	$C
07462 19A4                        0C            .byte	$C
07463 19A5                        0C            .byte	$C
07464 19A6                        0C            .byte	$C
07465 19A7                        0C            .byte	$C
07466 19A8                        18            .byte	$18
07467 19A9                        30            .byte	$30
07468 19AA                        00            .byte	0
07469 19AB                        00            .byte	0
07470 19AC                        00            .byte	0
07471                                           ! 1187  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07472 19AD                        00            .byte	0
07473 19AE                        00            .byte	0
07474 19AF                        00            .byte	0
07475 19B0                        00            .byte	0
07476 19B1                        66            .byte	$66
07477 19B2                        3C            .byte	$3C
07478 19B3                        FF            .byte	$FF
07479 19B4                        3C            .byte	$3C
07480 19B5                        66            .byte	$66
07481 19B6                        00            .byte	0
07482 19B7                        00            .byte	0
07483 19B8                        00            .byte	0
07484 19B9                        00            .byte	0
07485 19BA                        00            .byte	0
07486                                           ! 1188  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07487 19BB                        00            .byte	0
07488 19BC                        00            .byte	0
07489 19BD                        00            .byte	0
07490 19BE                        00            .byte	0
07491 19BF                        18            .byte	$18
07492 19C0                        18            .byte	$18
07493 19C1                        7E            .byte	$7E
07494 19C2                        18            .byte	$18
07495 19C3                        18            .byte	$18
07496 19C4                        00            .byte	0
07497 19C5                        00            .byte	0
07498 19C6                        00            .byte	0
07499 19C7                        00            .byte	0
07500 19C8                        00            .byte	0
07501                                           ! 1189  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07502 19C9                        00            .byte	0
07503 19CA                        00            .byte	0
07504 19CB                        00            .byte	0
07505 19CC                        00            .byte	0
07506 19CD                        00            .byte	0
07507 19CE                        00            .byte	0
07508 19CF                        00            .byte	0
07509 19D0                        00            .byte	0
07510 19D1                        18            .byte	$18
07511 19D2                        18            .byte	$18
07512 19D3                        18            .byte	$18
07513 19D4                        30            .byte	$30
07514 19D5                        00            .byte	0
07515 19D6                        00            .byte	0
07516                                           ! 1190  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07517 19D7                        00            .byte	0
07518 19D8                        00            .byte	0
07519 19D9                        00            .byte	0
07520 19DA                        00            .byte	0
07521 19DB                        00            .byte	0
07522 19DC                        00            .byte	0
07523 19DD                        FE            .byte	$FE
07524 19DE                        00            .byte	0
07525 19DF                        00            .byte	0
07526 19E0                        00            .byte	0
07527 19E1                        00            .byte	0
07528 19E2                        00            .byte	0
07529 19E3                        00            .byte	0
07530 19E4                        00            .byte	0
07531                                           ! 1191  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07532 19E5                        00            .byte	0
07533 19E6                        00            .byte	0
07534 19E7                        00            .byte	0
07535 19E8                        00            .byte	0
07536 19E9                        00            .byte	0
07537 19EA                        00            .byte	0
07538 19EB                        00            .byte	0
07539 19EC                        00            .byte	0
07540 19ED                        00            .byte	0
07541 19EE                        18            .byte	$18
07542 19EF                        18            .byte	$18
07543 19F0                        00            .byte	0
07544 19F1                        00            .byte	0
07545 19F2                        00            .byte	0
07546                                           ! 1192  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07547 19F3                        00            .byte	0
07548 19F4                        00            .byte	0
07549 19F5                        02            .byte	2
07550 19F6                        06            .byte	6
07551 19F7                        0C            .byte	$C
07552 19F8                        18            .byte	$18
07553 19F9                        30            .byte	$30
07554 19FA                        60            .byte	$60
07555 19FB                        C0            .byte	$C0
07556 19FC                        80            .byte	$80
07557 19FD                        00            .byte	0
07558 19FE                        00            .byte	0
07559 19FF                        00            .byte	0
07560 1A00                        00            .byte	0
07561                                           ! 1193  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07562 1A01                        00            .byte	0
07563 1A02                        00            .byte	0
07564 1A03                        7C            .byte	$7C
07565 1A04                        C6            .byte	$C6
07566 1A05                        CE            .byte	$CE
07567 1A06                        DE            .byte	$DE
07568 1A07                        F6            .byte	$F6
07569 1A08                        E6            .byte	$E6
07570 1A09                        C6            .byte	$C6
07571 1A0A                        C6            .byte	$C6
07572 1A0B                        7C            .byte	$7C
07573 1A0C                        00            .byte	0
07574 1A0D                        00            .byte	0
07575 1A0E                        00            .byte	0
07576                                           ! 1194  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07577 1A0F                        00            .byte	0
07578 1A10                        00            .byte	0
07579 1A11                        18            .byte	$18
07580 1A12                        38            .byte	$38
07581 1A13                        78            .byte	$78
07582 1A14                        18            .byte	$18
07583 1A15                        18            .byte	$18
07584 1A16                        18            .byte	$18
07585 1A17                        18            .byte	$18
07586 1A18                        18            .byte	$18
07587 1A19                        7E            .byte	$7E
07588 1A1A                        00            .byte	0
07589 1A1B                        00            .byte	0
07590 1A1C                        00            .byte	0
07591                                           ! 1195  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07592 1A1D                        00            .byte	0
07593 1A1E                        00            .byte	0
07594 1A1F                        7C            .byte	$7C
07595 1A20                        C6            .byte	$C6
07596 1A21                        06            .byte	6
07597 1A22                        0C            .byte	$C
07598 1A23                        18            .byte	$18
07599 1A24                        30            .byte	$30
07600 1A25                        60            .byte	$60
07601 1A26                        C6            .byte	$C6
07602 1A27                        FE            .byte	$FE
07603 1A28                        00            .byte	0
07604 1A29                        00            .byte	0
07605 1A2A                        00            .byte	0
07606                                           ! 1196  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07607 1A2B                        00            .byte	0
07608 1A2C                        00            .byte	0
07609 1A2D                        7C            .byte	$7C
07610 1A2E                        C6            .byte	$C6
07611 1A2F                        06            .byte	6
07612 1A30                        06            .byte	6
07613 1A31                        3C            .byte	$3C
07614 1A32                        06            .byte	6
07615 1A33                        06            .byte	6
07616 1A34                        C6            .byte	$C6
07617 1A35                        7C            .byte	$7C
07618 1A36                        00            .byte	0
07619 1A37                        00            .byte	0
07620 1A38                        00            .byte	0
07621                                           ! 1197  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07622 1A39                        00            .byte	0
07623 1A3A                        00            .byte	0
07624 1A3B                        0C            .byte	$C
07625 1A3C                        1C            .byte	$1C
07626 1A3D                        3C            .byte	$3C
07627 1A3E                        6C            .byte	$6C
07628 1A3F                        CC            .byte	$CC
07629 1A40                        FE            .byte	$FE
07630 1A41                        0C            .byte	$C
07631 1A42                        0C            .byte	$C
07632 1A43                        1E            .byte	$1E
07633 1A44                        00            .byte	0
07634 1A45                        00            .byte	0
07635 1A46                        00            .byte	0
07636                                           ! 1198  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07637 1A47                        00            .byte	0
07638 1A48                        00            .byte	0
07639 1A49                        FE            .byte	$FE
07640 1A4A                        C0            .byte	$C0
07641 1A4B                        C0            .byte	$C0
07642 1A4C                        C0            .byte	$C0
07643 1A4D                        FC            .byte	$FC
07644 1A4E                        06            .byte	6
07645 1A4F                        06            .byte	6
07646 1A50                        C6            .byte	$C6
07647 1A51                        7C            .byte	$7C
07648 1A52                        00            .byte	0
07649 1A53                        00            .byte	0
07650                                           ! 1198 
07651 1A54                        00            .byte	0
07652                                           ! 1199  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07653 1A55                        00            .byte	0
07654 1A56                        00            .byte	0
07655 1A57                        38            .byte	$38
07656 1A58                        60            .byte	$60
07657 1A59                        C0            .byte	$C0
07658 1A5A                        C0            .byte	$C0
07659 1A5B                        FC            .byte	$FC
07660 1A5C                        C6            .byte	$C6
07661 1A5D                        C6            .byte	$C6
07662 1A5E                        C6            .byte	$C6
07663 1A5F                        7C            .byte	$7C
07664 1A60                        00            .byte	0
07665 1A61                        00            .byte	0
07666 1A62                        00            .byte	0
07667                                           ! 1200  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07668 1A63                        00            .byte	0
07669 1A64                        00            .byte	0
07670 1A65                        FE            .byte	$FE
07671 1A66                        C6            .byte	$C6
07672 1A67                        06            .byte	6
07673 1A68                        0C            .byte	$C
07674 1A69                        18            .byte	$18
07675 1A6A                        30            .byte	$30
07676 1A6B                        30            .byte	$30
07677 1A6C                        30            .byte	$30
07678 1A6D                        30            .byte	$30
07679 1A6E                        00            .byte	0
07680 1A6F                        00            .byte	0
07681 1A70                        00            .byte	0
07682                                           ! 1201  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07683 1A71                        00            .byte	0
07684 1A72                        00            .byte	0
07685 1A73                        7C            .byte	$7C
07686 1A74                        C6            .byte	$C6
07687 1A75                        C6            .byte	$C6
07688 1A76                        C6            .byte	$C6
07689 1A77                        7C            .byte	$7C
07690 1A78                        C6            .byte	$C6
07691 1A79                        C6            .byte	$C6
07692 1A7A                        C6            .byte	$C6
07693 1A7B                        7C            .byte	$7C
07694 1A7C                        00            .byte	0
07695 1A7D                        00            .byte	0
07696 1A7E                        00            .byte	0
07697                                           ! 1202  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07698 1A7F                        00            .byte	0
07699 1A80                        00            .byte	0
07700 1A81                        7C            .byte	$7C
07701 1A82                        C6            .byte	$C6
07702 1A83                        C6            .byte	$C6
07703 1A84                        C6            .byte	$C6
07704 1A85                        7E            .byte	$7E
07705 1A86                        06            .byte	6
07706 1A87                        06            .byte	6
07707 1A88                        0C            .byte	$C
07708 1A89                        78            .byte	$78
07709 1A8A                        00            .byte	0
07710 1A8B                        00            .byte	0
07711 1A8C                        00            .byte	0
07712                                           ! 1203  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07713 1A8D                        00            .byte	0
07714 1A8E                        00            .byte	0
07715 1A8F                        00            .byte	0
07716 1A90                        18            .byte	$18
07717 1A91                        18            .byte	$18
07718 1A92                        00            .byte	0
07719 1A93                        00            .byte	0
07720 1A94                        00            .byte	0
07721 1A95                        18            .byte	$18
07722 1A96                        18            .byte	$18
07723 1A97                        00            .byte	0
07724 1A98                        00            .byte	0
07725 1A99                        00            .byte	0
07726 1A9A                        00            .byte	0
07727                                           ! 1204  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07728 1A9B                        00            .byte	0
07729 1A9C                        00            .byte	0
07730 1A9D                        00            .byte	0
07731 1A9E                        18            .byte	$18
07732 1A9F                        18            .byte	$18
07733 1AA0                        00            .byte	0
07734 1AA1                        00            .byte	0
07735 1AA2                        00            .byte	0
07736 1AA3                        18            .byte	$18
07737 1AA4                        18            .byte	$18
07738 1AA5                        30            .byte	$30
07739 1AA6                        00            .byte	0
07740 1AA7                        00            .byte	0
07741 1AA8                        00            .byte	0
07742                                           ! 1205  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07743 1AA9                        00            .byte	0
07744 1AAA                        00            .byte	0
07745 1AAB                        06            .byte	6
07746 1AAC                        0C            .byte	$C
07747 1AAD                        18            .byte	$18
07748 1AAE                        30            .byte	$30
07749 1AAF                        60            .byte	$60
07750 1AB0                        30            .byte	$30
07751 1AB1                        18            .byte	$18
07752 1AB2                        0C            .byte	$C
07753 1AB3                        06            .byte	6
07754 1AB4                        00            .byte	0
07755 1AB5                        00            .byte	0
07756 1AB6                        00            .byte	0
07757                                           ! 1206  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07758 1AB7                        00            .byte	0
07759 1AB8                        00            .byte	0
07760 1AB9                        00            .byte	0
07761 1ABA                        00            .byte	0
07762 1ABB                        00            .byte	0
07763 1ABC                        7E            .byte	$7E
07764 1ABD                        00            .byte	0
07765 1ABE                        00            .byte	0
07766 1ABF                        7E            .byte	$7E
07767 1AC0                        00            .byte	0
07768 1AC1                        00            .byte	0
07769 1AC2                        00            .byte	0
07770 1AC3                        00            .byte	0
07771 1AC4                        00            .byte	0
07772                                           ! 1207  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07773 1AC5                        00            .byte	0
07774 1AC6                        00            .byte	0
07775 1AC7                        60            .byte	$60
07776 1AC8                        30            .byte	$30
07777 1AC9                        18            .byte	$18
07778 1ACA                        0C            .byte	$C
07779 1ACB                        06            .byte	6
07780 1ACC                        0C            .byte	$C
07781 1ACD                        18            .byte	$18
07782 1ACE                        30            .byte	$30
07783 1ACF                        60            .byte	$60
07784 1AD0                        00            .byte	0
07785 1AD1                        00            .byte	0
07786 1AD2                        00            .byte	0
07787                                           ! 1208  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07788 1AD3                        00            .byte	0
07789 1AD4                        00            .byte	0
07790 1AD5                        7C            .byte	$7C
07791 1AD6                        C6            .byte	$C6
07792 1AD7                        C6            .byte	$C6
07793 1AD8                        0C            .byte	$C
07794 1AD9                        18            .byte	$18
07795 1ADA                        18            .byte	$18
07796 1ADB                        00            .byte	0
07797 1ADC                        18            .byte	$18
07798 1ADD                        18            .byte	$18
07799 1ADE                        00            .byte	0
07800 1ADF                        00            .byte	0
07801 1AE0                        00            .byte	0
07802                                           ! 1209  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07803 1AE1                        00            .byte	0
07804 1AE2                        00            .byte	0
07805 1AE3                        7C            .byte	$7C
07806 1AE4                        C6            .byte	$C6
07807 1AE5                        C6            .byte	$C6
07808 1AE6                        DE            .byte	$DE
07809 1AE7                        DE            .byte	$DE
07810 1AE8                        DE            .byte	$DE
07811 1AE9                        DC            .byte	$DC
07812 1AEA                        C0            .byte	$C0
07813 1AEB                        7C            .byte	$7C
07814 1AEC                        00            .byte	0
07815 1AED                        00            .byte	0
07816 1AEE                        00            .byte	0
07817                                           ! 1210  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07818 1AEF                        00            .byte	0
07819 1AF0                        00            .byte	0
07820 1AF1                        10            .byte	$10
07821 1AF2                        38            .byte	$38
07822 1AF3                        6C            .byte	$6C
07823 1AF4                        C6            .byte	$C6
07824 1AF5                        C6            .byte	$C6
07825 1AF6                        FE            .byte	$FE
07826 1AF7                        C6            .byte	$C6
07827 1AF8                        C6            .byte	$C6
07828 1AF9                        C6            .byte	$C6
07829 1AFA                        00            .byte	0
07830 1AFB                        00            .byte	0
07831 1AFC                        00            .byte	0
07832                                           ! 1211  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07833 1AFD                        00            .byte	0
07834 1AFE                        00            .byte	0
07835 1AFF                        FC            .byte	$FC
07836 1B00                        66            .byte	$66
07837 1B01                        66            .byte	$66
07838 1B02                        66            .byte	$66
07839 1B03                        7C            .byte	$7C
07840 1B04                        66            .byte	$66
07841 1B05                        66            .byte	$66
07842 1B06                        66            .byte	$66
07843 1B07                        FC            .byte	$FC
07844 1B08                        00            .byte	0
07845 1B09                        00            .byte	0
07846 1B0A                        00            .byte	0
07847                                           ! 1212  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07848 1B0B                        00            .byte	0
07849 1B0C                        00            .byte	0
07850 1B0D                        3C            .byte	$3C
07851 1B0E                        66            .byte	$66
07852 1B0F                        C2            .byte	$C2
07853 1B10                        C0            .byte	$C0
07854 1B11                        C0            .byte	$C0
07855 1B12                        C0            .byte	$C0
07856 1B13                        C2            .byte	$C2
07857 1B14                        66            .byte	$66
07858 1B15                        3C            .byte	$3C
07859 1B16                        00            .byte	0
07860 1B17                        00            .byte	0
07861 1B18                        00            .byte	0
07862                                           ! 1213  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07863 1B19                        00            .byte	0
07864 1B1A                        00            .byte	0
07865 1B1B                        F8            .byte	$F8
07866 1B1C                        6C            .byte	$6C
07867 1B1D                        66            .byte	$66
07868 1B1E                        66            .byte	$66
07869 1B1F                        66            .byte	$66
07870 1B20                        66            .byte	$66
07871 1B21                        66            .byte	$66
07872 1B22                        6C            .byte	$6C
07873 1B23                        F8            .byte	$F8
07874 1B24                        00            .byte	0
07875 1B25                        00            .byte	0
07876 1B26                        00            .byte	0
07877                                           ! 1214  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07878 1B27                        00            .byte	0
07879 1B28                        00            .byte	0
07880 1B29                        FE            .byte	$FE
07881 1B2A                        66            .byte	$66
07882 1B2B                        62            .byte	$62
07883 1B2C                        68            .byte	$68
07884 1B2D                        78            .byte	$78
07885 1B2E                        68            .byte	$68
07886 1B2F                        62            .byte	$62
07887 1B30                        66            .byte	$66
07888 1B31                        FE            .byte	$FE
07889 1B32                        00            .byte	0
07890 1B33                        00            .byte	0
07891 1B34                        00            .byte	0
07892                                           ! 1215  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07893 1B35                        00            .byte	0
07894 1B36                        00            .byte	0
07895 1B37                        FE            .byte	$FE
07896 1B38                        66            .byte	$66
07897 1B39                        62            .byte	$62
07898 1B3A                        68            .byte	$68
07899 1B3B                        78            .byte	$78
07900 1B3C                        68            .byte	$68
07901 1B3D                        60            .byte	$60
07902 1B3E                        60            .byte	$60
07903 1B3F                        F0            .byte	$F0
07904 1B40                        00            .byte	0
07905 1B41                        00            .byte	0
07906 1B42                        00            .byte	0
07907                                           ! 1216  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07908 1B43                        00            .byte	0
07909 1B44                        00            .byte	0
07910 1B45                        3C            .byte	$3C
07911 1B46                        66            .byte	$66
07912 1B47                        C2            .byte	$C2
07913 1B48                        C0            .byte	$C0
07914 1B49                        C0            .byte	$C0
07915 1B4A                        DE            .byte	$DE
07916 1B4B                        C6            .byte	$C6
07917 1B4C                        66            .byte	$66
07918 1B4D                        3A            .byte	$3A
07919 1B4E                        00            .byte	0
07920 1B4F                        00            .byte	0
07921 1B50                        00            .byte	0
07922                                           ! 1217  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07923 1B51                        00            .byte	0
07924 1B52                        00            .byte	0
07925 1B53                        C6            .byte	$C6
07926 1B54                        C6            .byte	$C6
07927 1B55                        C6            .byte	$C6
07928 1B56                        C6            .byte	$C6
07929 1B57                        FE            .byte	$FE
07930 1B58                        C6            .byte	$C6
07931 1B59                        C6            .byte	$C6
07932 1B5A                        C6            .byte	$C6
07933 1B5B                        C6            .byte	$C6
07934 1B5C                        00            .byte	0
07935 1B5D                        00            .byte	0
07936 1B5E                        00            .byte	0
07937                                           ! 1218  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07938 1B5F                        00            .byte	0
07939 1B60                        00            .byte	0
07940 1B61                        3C            .byte	$3C
07941 1B62                        18            .byte	$18
07942 1B63                        18            .byte	$18
07943 1B64                        18            .byte	$18
07944 1B65                        18            .byte	$18
07945 1B66                        18            .byte	$18
07946 1B67                        18            .byte	$18
07947 1B68                        18            .byte	$18
07948 1B69                        3C            .byte	$3C
07949 1B6A                        00            .byte	0
07950 1B6B                        00            .byte	0
07951 1B6C                        00            .byte	0
07952                                           ! 1219  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07953 1B6D                        00            .byte	0
07954 1B6E                        00            .byte	0
07955 1B6F                        1E            .byte	$1E
07956 1B70                        0C            .byte	$C
07957 1B71                        0C            .byte	$C
07958 1B72                        0C            .byte	$C
07959 1B73                        0C            .byte	$C
07960 1B74                        0C            .byte	$C
07961 1B75                        CC            .byte	$CC
07962 1B76                        CC            .byte	$CC
07963 1B77                        78            .byte	$78
07964 1B78                        00            .byte	0
07965 1B79                        00            .byte	0
07966 1B7A                        00            .byte	0
07967                                           ! 1220  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07968 1B7B                        00            .byte	0
07969 1B7C                        00            .byte	0
07970 1B7D                        E6            .byte	$E6
07971 1B7E                        66            .byte	$66
07972 1B7F                        6C            .byte	$6C
07973 1B80                        6C            .byte	$6C
07974 1B81                        78            .byte	$78
07975 1B82                        6C            .byte	$6C
07976 1B83                        6C            .byte	$6C
07977 1B84                        66            .byte	$66
07978 1B85                        E6            .byte	$E6
07979 1B86                        00            .byte	0
07980 1B87                        00            .byte	0
07981 1B88                        00            .byte	0
07982                                           ! 1221  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07983 1B89                        00            .byte	0
07984 1B8A                        00            .byte	0
07985 1B8B                        F0            .byte	$F0
07986 1B8C                        60            .byte	$60
07987 1B8D                        60            .byte	$60
07988 1B8E                        60            .byte	$60
07989 1B8F                        60            .byte	$60
07990 1B90                        60            .byte	$60
07991 1B91                        62            .byte	$62
07992 1B92                        66            .byte	$66
07993 1B93                        FE            .byte	$FE
07994 1B94                        00            .byte	0
07995 1B95                        00            .byte	0
07996 1B96                        00            .byte	0
07997                                           ! 1222  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07998 1B97                        00            .byte	0
07999 1B98                        00            .byte	0
08000 1B99                        C6            .byte	$C6
08001 1B9A                        EE            .byte	$EE
08002 1B9B                        FE            .byte	$FE
08003 1B9C                        FE            .byte	$FE
08004 1B9D                        D6            .byte	$D6
08005 1B9E                        C6            .byte	$C6
08006 1B9F                        C6            .byte	$C6
08007 1BA0                        C6            .byte	$C6
08008 1BA1                        C6            .byte	$C6
08009 1BA2                        00            .byte	0
08010 1BA3                        00            .byte	0
08011 1BA4                        00            .byte	0
08012                                           ! 1223  0x00, 
08013 1BA5                        00            .byte	0
08014                                           ! 1223 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08015 1BA6                        00            .byte	0
08016 1BA7                        C6            .byte	$C6
08017 1BA8                        E6            .byte	$E6
08018 1BA9                        F6            .byte	$F6
08019 1BAA                        FE            .byte	$FE
08020 1BAB                        DE            .byte	$DE
08021 1BAC                        CE            .byte	$CE
08022 1BAD                        C6            .byte	$C6
08023 1BAE                        C6            .byte	$C6
08024 1BAF                        C6            .byte	$C6
08025 1BB0                        00            .byte	0
08026 1BB1                        00            .byte	0
08027 1BB2                        00            .byte	0
08028                                           ! 1224  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08029 1BB3                        00            .byte	0
08030 1BB4                        00            .byte	0
08031 1BB5                        38            .byte	$38
08032 1BB6                        6C            .byte	$6C
08033 1BB7                        C6            .byte	$C6
08034 1BB8                        C6            .byte	$C6
08035 1BB9                        C6            .byte	$C6
08036 1BBA                        C6            .byte	$C6
08037 1BBB                        C6            .byte	$C6
08038 1BBC                        6C            .byte	$6C
08039 1BBD                        38            .byte	$38
08040 1BBE                        00            .byte	0
08041 1BBF                        00            .byte	0
08042 1BC0                        00            .byte	0
08043                                           ! 1225  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08044 1BC1                        00            .byte	0
08045 1BC2                        00            .byte	0
08046 1BC3                        FC            .byte	$FC
08047 1BC4                        66            .byte	$66
08048 1BC5                        66            .byte	$66
08049 1BC6                        66            .byte	$66
08050 1BC7                        7C            .byte	$7C
08051 1BC8                        60            .byte	$60
08052 1BC9                        60            .byte	$60
08053 1BCA                        60            .byte	$60
08054 1BCB                        F0            .byte	$F0
08055 1BCC                        00            .byte	0
08056 1BCD                        00            .byte	0
08057 1BCE                        00            .byte	0
08058                                           ! 1226  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08059 1BCF                        00            .byte	0
08060 1BD0                        00            .byte	0
08061 1BD1                        7C            .byte	$7C
08062 1BD2                        C6            .byte	$C6
08063 1BD3                        C6            .byte	$C6
08064 1BD4                        C6            .byte	$C6
08065 1BD5                        C6            .byte	$C6
08066 1BD6                        D6            .byte	$D6
08067 1BD7                        DE            .byte	$DE
08068 1BD8                        7C            .byte	$7C
08069 1BD9                        0C            .byte	$C
08070 1BDA                        0E            .byte	$E
08071 1BDB                        00            .byte	0
08072 1BDC                        00            .byte	0
08073                                           ! 1227  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08074 1BDD                        00            .byte	0
08075 1BDE                        00            .byte	0
08076 1BDF                        FC            .byte	$FC
08077 1BE0                        66            .byte	$66
08078 1BE1                        66            .byte	$66
08079 1BE2                        66            .byte	$66
08080 1BE3                        7C            .byte	$7C
08081 1BE4                        6C            .byte	$6C
08082 1BE5                        66            .byte	$66
08083 1BE6                        66            .byte	$66
08084 1BE7                        E6            .byte	$E6
08085 1BE8                        00            .byte	0
08086 1BE9                        00            .byte	0
08087 1BEA                        00            .byte	0
08088                                           ! 1228  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08089 1BEB                        00            .byte	0
08090 1BEC                        00            .byte	0
08091 1BED                        7C            .byte	$7C
08092 1BEE                        C6            .byte	$C6
08093 1BEF                        C6            .byte	$C6
08094 1BF0                        60            .byte	$60
08095 1BF1                        38            .byte	$38
08096 1BF2                        0C            .byte	$C
08097 1BF3                        C6            .byte	$C6
08098 1BF4                        C6            .byte	$C6
08099 1BF5                        7C            .byte	$7C
08100 1BF6                        00            .byte	0
08101 1BF7                        00            .byte	0
08102 1BF8                        00            .byte	0
08103                                           ! 1229  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08104 1BF9                        00            .byte	0
08105 1BFA                        00            .byte	0
08106 1BFB                        7E            .byte	$7E
08107 1BFC                        7E            .byte	$7E
08108 1BFD                        5A            .byte	$5A
08109 1BFE                        18            .byte	$18
08110 1BFF                        18            .byte	$18
08111 1C00                        18            .byte	$18
08112 1C01                        18            .byte	$18
08113 1C02                        18            .byte	$18
08114 1C03                        3C            .byte	$3C
08115 1C04                        00            .byte	0
08116 1C05                        00            .byte	0
08117 1C06                        00            .byte	0
08118                                           ! 1230  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08119 1C07                        00            .byte	0
08120 1C08                        00            .byte	0
08121 1C09                        C6            .byte	$C6
08122 1C0A                        C6            .byte	$C6
08123 1C0B                        C6            .byte	$C6
08124 1C0C                        C6            .byte	$C6
08125 1C0D                        C6            .byte	$C6
08126 1C0E                        C6            .byte	$C6
08127 1C0F                        C6            .byte	$C6
08128 1C10                        C6            .byte	$C6
08129 1C11                        7C            .byte	$7C
08130 1C12                        00            .byte	0
08131 1C13                        00            .byte	0
08132 1C14                        00            .byte	0
08133                                           ! 1231  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08134 1C15                        00            .byte	0
08135 1C16                        00            .byte	0
08136 1C17                        C6            .byte	$C6
08137 1C18                        C6            .byte	$C6
08138 1C19                        C6            .byte	$C6
08139 1C1A                        C6            .byte	$C6
08140 1C1B                        C6            .byte	$C6
08141 1C1C                        C6            .byte	$C6
08142 1C1D                        6C            .byte	$6C
08143 1C1E                        38            .byte	$38
08144 1C1F                        10            .byte	$10
08145 1C20                        00            .byte	0
08146 1C21                        00            .byte	0
08147 1C22                        00            .byte	0
08148                                           ! 1232  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08149 1C23                        00            .byte	0
08150 1C24                        00            .byte	0
08151 1C25                        C6            .byte	$C6
08152 1C26                        C6            .byte	$C6
08153 1C27                        C6            .byte	$C6
08154 1C28                        C6            .byte	$C6
08155 1C29                        D6            .byte	$D6
08156 1C2A                        D6            .byte	$D6
08157 1C2B                        FE            .byte	$FE
08158 1C2C                        7C            .byte	$7C
08159 1C2D                        6C            .byte	$6C
08160 1C2E                        00            .byte	0
08161 1C2F                        00            .byte	0
08162 1C30                        00            .byte	0
08163                                           ! 1233  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08164 1C31                        00            .byte	0
08165 1C32                        00            .byte	0
08166 1C33                        C6            .byte	$C6
08167 1C34                        C6            .byte	$C6
08168 1C35                        6C            .byte	$6C
08169 1C36                        38            .byte	$38
08170 1C37                        38            .byte	$38
08171 1C38                        38            .byte	$38
08172 1C39                        6C            .byte	$6C
08173 1C3A                        C6            .byte	$C6
08174 1C3B                        C6            .byte	$C6
08175 1C3C                        00            .byte	0
08176 1C3D                        00            .byte	0
08177 1C3E                        00            .byte	0
08178                                           ! 1234  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08179 1C3F                        00            .byte	0
08180 1C40                        00            .byte	0
08181 1C41                        66            .byte	$66
08182 1C42                        66            .byte	$66
08183 1C43                        66            .byte	$66
08184 1C44                        66            .byte	$66
08185 1C45                        3C            .byte	$3C
08186 1C46                        18            .byte	$18
08187 1C47                        18            .byte	$18
08188 1C48                        18            .byte	$18
08189 1C49                        3C            .byte	$3C
08190 1C4A                        00            .byte	0
08191 1C4B                        00            .byte	0
08192 1C4C                        00            .byte	0
08193                                           ! 1235  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08194 1C4D                        00            .byte	0
08195 1C4E                        00            .byte	0
08196 1C4F                        FE            .byte	$FE
08197 1C50                        C6            .byte	$C6
08198 1C51                        8C            .byte	$8C
08199 1C52                        18            .byte	$18
08200 1C53                        30            .byte	$30
08201 1C54                        60            .byte	$60
08202 1C55                        C2            .byte	$C2
08203 1C56                        C6            .byte	$C6
08204 1C57                        FE            .byte	$FE
08205 1C58                        00            .byte	0
08206 1C59                        00            .byte	0
08207 1C5A                        00            .byte	0
08208                                           ! 1236  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08209 1C5B                        00            .byte	0
08210 1C5C                        00            .byte	0
08211 1C5D                        3C            .byte	$3C
08212 1C5E                        30            .byte	$30
08213 1C5F                        30            .byte	$30
08214 1C60                        30            .byte	$30
08215 1C61                        30            .byte	$30
08216 1C62                        30            .byte	$30
08217 1C63                        30            .byte	$30
08218 1C64                        30            .byte	$30
08219 1C65                        3C            .byte	$3C
08220 1C66                        00            .byte	0
08221 1C67                        00            .byte	0
08222 1C68                        00            .byte	0
08223                                           ! 1237  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08224 1C69                        00            .byte	0
08225 1C6A                        00            .byte	0
08226 1C6B                        80            .byte	$80
08227 1C6C                        C0            .byte	$C0
08228 1C6D                        E0            .byte	$E0
08229 1C6E                        70            .byte	$70
08230 1C6F                        38            .byte	$38
08231 1C70                        1C            .byte	$1C
08232 1C71                        0E            .byte	$E
08233 1C72                        06            .byte	6
08234 1C73                        02            .byte	2
08235 1C74                        00            .byte	0
08236 1C75                        00            .byte	0
08237 1C76                        00            .byte	0
08238                                           ! 1238  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08239 1C77                        00            .byte	0
08240 1C78                        00            .byte	0
08241 1C79                        3C            .byte	$3C
08242 1C7A                        0C            .byte	$C
08243 1C7B                        0C            .byte	$C
08244 1C7C                        0C            .byte	$C
08245 1C7D                        0C            .byte	$C
08246 1C7E                        0C            .byte	$C
08247 1C7F                        0C            .byte	$C
08248 1C80                        0C            .byte	$C
08249 1C81                        3C            .byte	$3C
08250 1C82                        00            .byte	0
08251 1C83                        00            .byte	0
08252 1C84                        00            .byte	0
08253                                           ! 1239  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08254 1C85                        10            .byte	$10
08255 1C86                        38            .byte	$38
08256 1C87                        6C            .byte	$6C
08257 1C88                        C6            .byte	$C6
08258 1C89                        00            .byte	0
08259 1C8A                        00            .byte	0
08260 1C8B                        00            .byte	0
08261 1C8C                        00            .byte	0
08262 1C8D                        00            .byte	0
08263 1C8E                        00            .byte	0
08264 1C8F                        00            .byte	0
08265 1C90                        00            .byte	0
08266 1C91                        00            .byte	0
08267 1C92                        00            .byte	0
08268                                           ! 1240  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08269 1C93                        00            .byte	0
08270 1C94                        00            .byte	0
08271 1C95                        00            .byte	0
08272 1C96                        00            .byte	0
08273 1C97                        00            .byte	0
08274 1C98                        00            .byte	0
08275 1C99                        00            .byte	0
08276 1C9A                        00            .byte	0
08277 1C9B                        00            .byte	0
08278 1C9C                        00            .byte	0
08279 1C9D                        00            .byte	0
08280 1C9E                        00            .byte	0
08281 1C9F                        FF            .byte	$FF
08282 1CA0                        00            .byte	0
08283                                           ! 1241  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08284 1CA1                        30            .byte	$30
08285 1CA2                        30            .byte	$30
08286 1CA3                        18            .byte	$18
08287 1CA4                        00            .byte	0
08288 1CA5                        00            .byte	0
08289 1CA6                        00            .byte	0
08290 1CA7                        00            .byte	0
08291 1CA8                        00            .byte	0
08292 1CA9                        00            .byte	0
08293 1CAA                        00            .byte	0
08294 1CAB                        00            .byte	0
08295 1CAC                        00            .byte	0
08296 1CAD                        00            .byte	0
08297 1CAE                        00            .byte	0
08298                                           ! 1242  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08299 1CAF                        00            .byte	0
08300 1CB0                        00            .byte	0
08301 1CB1                        00            .byte	0
08302 1CB2                        00            .byte	0
08303 1CB3                        00            .byte	0
08304 1CB4                        78            .byte	$78
08305 1CB5                        0C            .byte	$C
08306 1CB6                        7C            .byte	$7C
08307 1CB7                        CC            .byte	$CC
08308 1CB8                        CC            .byte	$CC
08309 1CB9                        76            .byte	$76
08310 1CBA                        00            .byte	0
08311 1CBB                        00            .byte	0
08312 1CBC                        00            .byte	0
08313                                           ! 1243  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08314 1CBD                        00            .byte	0
08315 1CBE                        00            .byte	0
08316 1CBF                        E0            .byte	$E0
08317 1CC0                        60            .byte	$60
08318 1CC1                        60            .byte	$60
08319 1CC2                        78            .byte	$78
08320 1CC3                        6C            .byte	$6C
08321 1CC4                        66            .byte	$66
08322 1CC5                        66            .byte	$66
08323 1CC6                        66            .byte	$66
08324 1CC7                        7C            .byte	$7C
08325 1CC8                        00            .byte	0
08326 1CC9                        00            .byte	0
08327 1CCA                        00            .byte	0
08328                                           ! 1244  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08329 1CCB                        00            .byte	0
08330 1CCC                        00            .byte	0
08331 1CCD                        00            .byte	0
08332 1CCE                        00            .byte	0
08333 1CCF                        00            .byte	0
08334 1CD0                        7C            .byte	$7C
08335 1CD1                        C6            .byte	$C6
08336 1CD2                        C0            .byte	$C0
08337 1CD3                        C0            .byte	$C0
08338 1CD4                        C6            .byte	$C6
08339 1CD5                        7C            .byte	$7C
08340 1CD6                        00            .byte	0
08341 1CD7                        00            .byte	0
08342 1CD8                        00            .byte	0
08343                                           ! 1245  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08344 1CD9                        00            .byte	0
08345 1CDA                        00            .byte	0
08346 1CDB                        1C            .byte	$1C
08347 1CDC                        0C            .byte	$C
08348 1CDD                        0C            .byte	$C
08349 1CDE                        3C            .byte	$3C
08350 1CDF                        6C            .byte	$6C
08351 1CE0                        CC            .byte	$CC
08352 1CE1                        CC            .byte	$CC
08353 1CE2                        CC            .byte	$CC
08354 1CE3                        76            .byte	$76
08355 1CE4                        00            .byte	0
08356 1CE5                        00            .byte	0
08357 1CE6                        00            .byte	0
08358                                           ! 1246  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08359 1CE7                        00            .byte	0
08360 1CE8                        00            .byte	0
08361 1CE9                        00            .byte	0
08362 1CEA                        00            .byte	0
08363 1CEB                        00            .byte	0
08364 1CEC                        7C            .byte	$7C
08365 1CED                        C6            .byte	$C6
08366 1CEE                        FE            .byte	$FE
08367 1CEF                        C0            .byte	$C0
08368 1CF0                        C6            .byte	$C6
08369 1CF1                        7C            .byte	$7C
08370 1CF2                        00            .byte	0
08371 1CF3                        00            .byte	0
08372 1CF4                        00            .byte	0
08373                                           ! 1247  0x00, 0x00, 0x
08374 1CF5                        00            .byte	0
08375 1CF6                        00            .byte	0
08376                                           ! 1247 38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08377 1CF7                        38            .byte	$38
08378 1CF8                        6C            .byte	$6C
08379 1CF9                        64            .byte	$64
08380 1CFA                        60            .byte	$60
08381 1CFB                        F0            .byte	$F0
08382 1CFC                        60            .byte	$60
08383 1CFD                        60            .byte	$60
08384 1CFE                        60            .byte	$60
08385 1CFF                        F0            .byte	$F0
08386 1D00                        00            .byte	0
08387 1D01                        00            .byte	0
08388 1D02                        00            .byte	0
08389                                           ! 1248  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08390 1D03                        00            .byte	0
08391 1D04                        00            .byte	0
08392 1D05                        00            .byte	0
08393 1D06                        00            .byte	0
08394 1D07                        00            .byte	0
08395 1D08                        76            .byte	$76
08396 1D09                        CC            .byte	$CC
08397 1D0A                        CC            .byte	$CC
08398 1D0B                        CC            .byte	$CC
08399 1D0C                        7C            .byte	$7C
08400 1D0D                        0C            .byte	$C
08401 1D0E                        CC            .byte	$CC
08402 1D0F                        78            .byte	$78
08403 1D10                        00            .byte	0
08404                                           ! 1249  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08405 1D11                        00            .byte	0
08406 1D12                        00            .byte	0
08407 1D13                        E0            .byte	$E0
08408 1D14                        60            .byte	$60
08409 1D15                        60            .byte	$60
08410 1D16                        6C            .byte	$6C
08411 1D17                        76            .byte	$76
08412 1D18                        66            .byte	$66
08413 1D19                        66            .byte	$66
08414 1D1A                        66            .byte	$66
08415 1D1B                        E6            .byte	$E6
08416 1D1C                        00            .byte	0
08417 1D1D                        00            .byte	0
08418 1D1E                        00            .byte	0
08419                                           ! 1250  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08420 1D1F                        00            .byte	0
08421 1D20                        00            .byte	0
08422 1D21                        18            .byte	$18
08423 1D22                        18            .byte	$18
08424 1D23                        00            .byte	0
08425 1D24                        38            .byte	$38
08426 1D25                        18            .byte	$18
08427 1D26                        18            .byte	$18
08428 1D27                        18            .byte	$18
08429 1D28                        18            .byte	$18
08430 1D29                        3C            .byte	$3C
08431 1D2A                        00            .byte	0
08432 1D2B                        00            .byte	0
08433 1D2C                        00            .byte	0
08434                                           ! 1251  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08435 1D2D                        00            .byte	0
08436 1D2E                        00            .byte	0
08437 1D2F                        06            .byte	6
08438 1D30                        06            .byte	6
08439 1D31                        00            .byte	0
08440 1D32                        0E            .byte	$E
08441 1D33                        06            .byte	6
08442 1D34                        06            .byte	6
08443 1D35                        06            .byte	6
08444 1D36                        06            .byte	6
08445 1D37                        66            .byte	$66
08446 1D38                        66            .byte	$66
08447 1D39                        3C            .byte	$3C
08448 1D3A                        00            .byte	0
08449                                           ! 1252  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08450 1D3B                        00            .byte	0
08451 1D3C                        00            .byte	0
08452 1D3D                        E0            .byte	$E0
08453 1D3E                        60            .byte	$60
08454 1D3F                        60            .byte	$60
08455 1D40                        66            .byte	$66
08456 1D41                        6C            .byte	$6C
08457 1D42                        78            .byte	$78
08458 1D43                        6C            .byte	$6C
08459 1D44                        66            .byte	$66
08460 1D45                        E6            .byte	$E6
08461 1D46                        00            .byte	0
08462 1D47                        00            .byte	0
08463 1D48                        00            .byte	0
08464                                           ! 1253  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08465 1D49                        00            .byte	0
08466 1D4A                        00            .byte	0
08467 1D4B                        38            .byte	$38
08468 1D4C                        18            .byte	$18
08469 1D4D                        18            .byte	$18
08470 1D4E                        18            .byte	$18
08471 1D4F                        18            .byte	$18
08472 1D50                        18            .byte	$18
08473 1D51                        18            .byte	$18
08474 1D52                        18            .byte	$18
08475 1D53                        3C            .byte	$3C
08476 1D54                        00            .byte	0
08477 1D55                        00            .byte	0
08478 1D56                        00            .byte	0
08479                                           ! 1254  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08480 1D57                        00            .byte	0
08481 1D58                        00            .byte	0
08482 1D59                        00            .byte	0
08483 1D5A                        00            .byte	0
08484 1D5B                        00            .byte	0
08485 1D5C                        EC            .byte	$EC
08486 1D5D                        FE            .byte	$FE
08487 1D5E                        D6            .byte	$D6
08488 1D5F                        D6            .byte	$D6
08489 1D60                        D6            .byte	$D6
08490 1D61                        C6            .byte	$C6
08491 1D62                        00            .byte	0
08492 1D63                        00            .byte	0
08493 1D64                        00            .byte	0
08494                                           ! 1255  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08495 1D65                        00            .byte	0
08496 1D66                        00            .byte	0
08497 1D67                        00            .byte	0
08498 1D68                        00            .byte	0
08499 1D69                        00            .byte	0
08500 1D6A                        DC            .byte	$DC
08501 1D6B                        66            .byte	$66
08502 1D6C                        66            .byte	$66
08503 1D6D                        66            .byte	$66
08504 1D6E                        66            .byte	$66
08505 1D6F                        66            .byte	$66
08506 1D70                        00            .byte	0
08507 1D71                        00            .byte	0
08508 1D72                        00            .byte	0
08509                                           ! 1256  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08510 1D73                        00            .byte	0
08511 1D74                        00            .byte	0
08512 1D75                        00            .byte	0
08513 1D76                        00            .byte	0
08514 1D77                        00            .byte	0
08515 1D78                        7C            .byte	$7C
08516 1D79                        C6            .byte	$C6
08517 1D7A                        C6            .byte	$C6
08518 1D7B                        C6            .byte	$C6
08519 1D7C                        C6            .byte	$C6
08520 1D7D                        7C            .byte	$7C
08521 1D7E                        00            .byte	0
08522 1D7F                        00            .byte	0
08523 1D80                        00            .byte	0
08524                                           ! 1257  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08525 1D81                        00            .byte	0
08526 1D82                        00            .byte	0
08527 1D83                        00            .byte	0
08528 1D84                        00            .byte	0
08529 1D85                        00            .byte	0
08530 1D86                        DC            .byte	$DC
08531 1D87                        66            .byte	$66
08532 1D88                        66            .byte	$66
08533 1D89                        66            .byte	$66
08534 1D8A                        7C            .byte	$7C
08535 1D8B                        60            .byte	$60
08536 1D8C                        60            .byte	$60
08537 1D8D                        F0            .byte	$F0
08538 1D8E                        00            .byte	0
08539                                           ! 1258  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08540 1D8F                        00            .byte	0
08541 1D90                        00            .byte	0
08542 1D91                        00            .byte	0
08543 1D92                        00            .byte	0
08544 1D93                        00            .byte	0
08545 1D94                        76            .byte	$76
08546 1D95                        CC            .byte	$CC
08547 1D96                        CC            .byte	$CC
08548 1D97                        CC            .byte	$CC
08549 1D98                        7C            .byte	$7C
08550 1D99                        0C            .byte	$C
08551 1D9A                        0C            .byte	$C
08552 1D9B                        1E            .byte	$1E
08553 1D9C                        00            .byte	0
08554                                           ! 1259  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08555 1D9D                        00            .byte	0
08556 1D9E                        00            .byte	0
08557 1D9F                        00            .byte	0
08558 1DA0                        00            .byte	0
08559 1DA1                        00            .byte	0
08560 1DA2                        DC            .byte	$DC
08561 1DA3                        76            .byte	$76
08562 1DA4                        66            .byte	$66
08563 1DA5                        60            .byte	$60
08564 1DA6                        60            .byte	$60
08565 1DA7                        F0            .byte	$F0
08566 1DA8                        00            .byte	0
08567 1DA9                        00            .byte	0
08568 1DAA                        00            .byte	0
08569                                           ! 1260  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08570 1DAB                        00            .byte	0
08571 1DAC                        00            .byte	0
08572 1DAD                        00            .byte	0
08573 1DAE                        00            .byte	0
08574 1DAF                        00            .byte	0
08575 1DB0                        7C            .byte	$7C
08576 1DB1                        C6            .byte	$C6
08577 1DB2                        70            .byte	$70
08578 1DB3                        1C            .byte	$1C
08579 1DB4                        C6            .byte	$C6
08580 1DB5                        7C            .byte	$7C
08581 1DB6                        00            .byte	0
08582 1DB7                        00            .byte	0
08583 1DB8                        00            .byte	0
08584                                           ! 1261  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08585 1DB9                        00            .byte	0
08586 1DBA                        00            .byte	0
08587 1DBB                        10            .byte	$10
08588 1DBC                        30            .byte	$30
08589 1DBD                        30            .byte	$30
08590 1DBE                        FC            .byte	$FC
08591 1DBF                        30            .byte	$30
08592 1DC0                        30            .byte	$30
08593 1DC1                        30            .byte	$30
08594 1DC2                        36            .byte	$36
08595 1DC3                        1C            .byte	$1C
08596 1DC4                        00            .byte	0
08597 1DC5                        00            .byte	0
08598 1DC6                        00            .byte	0
08599                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08600 1DC7                        00            .byte	0
08601 1DC8                        00            .byte	0
08602 1DC9                        00            .byte	0
08603 1DCA                        00            .byte	0
08604 1DCB                        00            .byte	0
08605 1DCC                        CC            .byte	$CC
08606 1DCD                        CC            .byte	$CC
08607 1DCE                        CC            .byte	$CC
08608 1DCF                        CC            .byte	$CC
08609 1DD0                        CC            .byte	$CC
08610 1DD1                        76            .byte	$76
08611 1DD2                        00            .byte	0
08612 1DD3                        00            .byte	0
08613 1DD4                        00            .byte	0
08614                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08615 1DD5                        00            .byte	0
08616 1DD6                        00            .byte	0
08617 1DD7                        00            .byte	0
08618 1DD8                        00            .byte	0
08619 1DD9                        00            .byte	0
08620 1DDA                        66            .byte	$66
08621 1DDB                        66            .byte	$66
08622 1DDC                        66            .byte	$66
08623 1DDD                        66            .byte	$66
08624 1DDE                        3C            .byte	$3C
08625 1DDF                        18            .byte	$18
08626 1DE0                        00            .byte	0
08627 1DE1                        00            .byte	0
08628 1DE2                        00            .byte	0
08629                                           ! 1264  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08630 1DE3                        00            .byte	0
08631 1DE4                        00            .byte	0
08632 1DE5                        00            .byte	0
08633 1DE6                        00            .byte	0
08634 1DE7                        00            .byte	0
08635 1DE8                        C6            .byte	$C6
08636 1DE9                        C6            .byte	$C6
08637 1DEA                        D6            .byte	$D6
08638 1DEB                        D6            .byte	$D6
08639 1DEC                        FE            .byte	$FE
08640 1DED                        6C            .byte	$6C
08641 1DEE                        00            .byte	0
08642 1DEF                        00            .byte	0
08643 1DF0                        00            .byte	0
08644                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08645 1DF1                        00            .byte	0
08646 1DF2                        00            .byte	0
08647 1DF3                        00            .byte	0
08648 1DF4                        00            .byte	0
08649 1DF5                        00            .byte	0
08650 1DF6                        C6            .byte	$C6
08651 1DF7                        6C            .byte	$6C
08652 1DF8                        38            .byte	$38
08653 1DF9                        38            .byte	$38
08654 1DFA                        6C            .byte	$6C
08655 1DFB                        C6            .byte	$C6
08656 1DFC                        00            .byte	0
08657 1DFD                        00            .byte	0
08658 1DFE                        00            .byte	0
08659                                           ! 1266  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08660 1DFF                        00            .byte	0
08661 1E00                        00            .byte	0
08662 1E01                        00            .byte	0
08663 1E02                        00            .byte	0
08664 1E03                        00            .byte	0
08665 1E04                        C6            .byte	$C6
08666 1E05                        C6            .byte	$C6
08667 1E06                        C6            .byte	$C6
08668 1E07                        C6            .byte	$C6
08669 1E08                        7E            .byte	$7E
08670 1E09                        06            .byte	6
08671 1E0A                        0C            .byte	$C
08672 1E0B                        F8            .byte	$F8
08673 1E0C                        00            .byte	0
08674                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08675 1E0D                        00            .byte	0
08676 1E0E                        00            .byte	0
08677 1E0F                        00            .byte	0
08678 1E10                        00            .byte	0
08679 1E11                        00            .byte	0
08680 1E12                        FE            .byte	$FE
08681 1E13                        CC            .byte	$CC
08682 1E14                        18            .byte	$18
08683 1E15                        30            .byte	$30
08684 1E16                        66            .byte	$66
08685 1E17                        FE            .byte	$FE
08686 1E18                        00            .byte	0
08687 1E19                        00            .byte	0
08688 1E1A                        00            .byte	0
08689                                           ! 1268  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08690 1E1B                        00            .byte	0
08691 1E1C                        00            .byte	0
08692 1E1D                        0E            .byte	$E
08693 1E1E                        18            .byte	$18
08694 1E1F                        18            .byte	$18
08695 1E20                        18            .byte	$18
08696 1E21                        70            .byte	$70
08697 1E22                        18            .byte	$18
08698 1E23                        18            .byte	$18
08699 1E24                        18            .byte	$18
08700 1E25                        0E            .byte	$E
08701 1E26                        00            .byte	0
08702 1E27                        00            .byte	0
08703 1E28                        00            .byte	0
08704                                           ! 1269  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08705 1E29                        00            .byte	0
08706 1E2A                        00            .byte	0
08707 1E2B                        18            .byte	$18
08708 1E2C                        18            .byte	$18
08709 1E2D                        18            .byte	$18
08710 1E2E                        18            .byte	$18
08711 1E2F                        00            .byte	0
08712 1E30                        18            .byte	$18
08713 1E31                        18            .byte	$18
08714 1E32                        18            .byte	$18
08715 1E33                        18            .byte	$18
08716 1E34                        00            .byte	0
08717 1E35                        00            .byte	0
08718 1E36                        00            .byte	0
08719                                           ! 1270  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08720 1E37                        00            .byte	0
08721 1E38                        00            .byte	0
08722 1E39                        70            .byte	$70
08723 1E3A                        18            .byte	$18
08724 1E3B                        18            .byte	$18
08725 1E3C                        18            .byte	$18
08726 1E3D                        0E            .byte	$E
08727 1E3E                        18            .byte	$18
08728 1E3F                        18            .byte	$18
08729 1E40                        18            .byte	$18
08730 1E41                        70            .byte	$70
08731 1E42                        00            .byte	0
08732 1E43                        00            .byte	0
08733 1E44                        00            .byte	0
08734                                           ! 1271  0x00, 0x00, 0x76, 0xdc
08735 1E45                        00            .byte	0
08736 1E46                        00            .byte	0
08737 1E47                        76            .byte	$76
08738                                           ! 1271 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08739 1E48                        DC            .byte	$DC
08740 1E49                        00            .byte	0
08741 1E4A                        00            .byte	0
08742 1E4B                        00            .byte	0
08743 1E4C                        00            .byte	0
08744 1E4D                        00            .byte	0
08745 1E4E                        00            .byte	0
08746 1E4F                        00            .byte	0
08747 1E50                        00            .byte	0
08748 1E51                        00            .byte	0
08749 1E52                        00            .byte	0
08750                                           ! 1272  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08751 1E53                        00            .byte	0
08752 1E54                        00            .byte	0
08753 1E55                        00            .byte	0
08754 1E56                        00            .byte	0
08755 1E57                        10            .byte	$10
08756 1E58                        38            .byte	$38
08757 1E59                        6C            .byte	$6C
08758 1E5A                        C6            .byte	$C6
08759 1E5B                        C6            .byte	$C6
08760 1E5C                        FE            .byte	$FE
08761 1E5D                        00            .byte	0
08762 1E5E                        00            .byte	0
08763 1E5F                        00            .byte	0
08764 1E60                        00            .byte	0
08765                                           ! 1273  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08766 1E61                        00            .byte	0
08767 1E62                        00            .byte	0
08768 1E63                        3C            .byte	$3C
08769 1E64                        66            .byte	$66
08770 1E65                        C2            .byte	$C2
08771 1E66                        C0            .byte	$C0
08772 1E67                        C0            .byte	$C0
08773 1E68                        C2            .byte	$C2
08774 1E69                        66            .byte	$66
08775 1E6A                        3C            .byte	$3C
08776 1E6B                        0C            .byte	$C
08777 1E6C                        06            .byte	6
08778 1E6D                        7C            .byte	$7C
08779 1E6E                        00            .byte	0
08780                                           ! 1274  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08781 1E6F                        00            .byte	0
08782 1E70                        00            .byte	0
08783 1E71                        CC            .byte	$CC
08784 1E72                        CC            .byte	$CC
08785 1E73                        00            .byte	0
08786 1E74                        CC            .byte	$CC
08787 1E75                        CC            .byte	$CC
08788 1E76                        CC            .byte	$CC
08789 1E77                        CC            .byte	$CC
08790 1E78                        CC            .byte	$CC
08791 1E79                        76            .byte	$76
08792 1E7A                        00            .byte	0
08793 1E7B                        00            .byte	0
08794 1E7C                        00            .byte	0
08795                                           ! 1275  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08796 1E7D                        00            .byte	0
08797 1E7E                        0C            .byte	$C
08798 1E7F                        18            .byte	$18
08799 1E80                        30            .byte	$30
08800 1E81                        00            .byte	0
08801 1E82                        7C            .byte	$7C
08802 1E83                        C6            .byte	$C6
08803 1E84                        FE            .byte	$FE
08804 1E85                        C0            .byte	$C0
08805 1E86                        C6            .byte	$C6
08806 1E87                        7C            .byte	$7C
08807 1E88                        00            .byte	0
08808 1E89                        00            .byte	0
08809 1E8A                        00            .byte	0
08810                                           ! 1276  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08811 1E8B                        00            .byte	0
08812 1E8C                        10            .byte	$10
08813 1E8D                        38            .byte	$38
08814 1E8E                        6C            .byte	$6C
08815 1E8F                        00            .byte	0
08816 1E90                        78            .byte	$78
08817 1E91                        0C            .byte	$C
08818 1E92                        7C            .byte	$7C
08819 1E93                        CC            .byte	$CC
08820 1E94                        CC            .byte	$CC
08821 1E95                        76            .byte	$76
08822 1E96                        00            .byte	0
08823 1E97                        00            .byte	0
08824 1E98                        00            .byte	0
08825                                           ! 1277  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08826 1E99                        00            .byte	0
08827 1E9A                        00            .byte	0
08828 1E9B                        CC            .byte	$CC
08829 1E9C                        CC            .byte	$CC
08830 1E9D                        00            .byte	0
08831 1E9E                        78            .byte	$78
08832 1E9F                        0C            .byte	$C
08833 1EA0                        7C            .byte	$7C
08834 1EA1                        CC            .byte	$CC
08835 1EA2                        CC            .byte	$CC
08836 1EA3                        76            .byte	$76
08837 1EA4                        00            .byte	0
08838 1EA5                        00            .byte	0
08839 1EA6                        00            .byte	0
08840                                           ! 1278  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08841 1EA7                        00            .byte	0
08842 1EA8                        60            .byte	$60
08843 1EA9                        30            .byte	$30
08844 1EAA                        18            .byte	$18
08845 1EAB                        00            .byte	0
08846 1EAC                        78            .byte	$78
08847 1EAD                        0C            .byte	$C
08848 1EAE                        7C            .byte	$7C
08849 1EAF                        CC            .byte	$CC
08850 1EB0                        CC            .byte	$CC
08851 1EB1                        76            .byte	$76
08852 1EB2                        00            .byte	0
08853 1EB3                        00            .byte	0
08854 1EB4                        00            .byte	0
08855                                           ! 1279  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08856 1EB5                        00            .byte	0
08857 1EB6                        38            .byte	$38
08858 1EB7                        6C            .byte	$6C
08859 1EB8                        38            .byte	$38
08860 1EB9                        00            .byte	0
08861 1EBA                        78            .byte	$78
08862 1EBB                        0C            .byte	$C
08863 1EBC                        7C            .byte	$7C
08864 1EBD                        CC            .byte	$CC
08865 1EBE                        CC            .byte	$CC
08866 1EBF                        76            .byte	$76
08867 1EC0                        00            .byte	0
08868 1EC1                        00            .byte	0
08869 1EC2                        00            .byte	0
08870                                           ! 1280  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08871 1EC3                        00            .byte	0
08872 1EC4                        00            .byte	0
08873 1EC5                        00            .byte	0
08874 1EC6                        00            .byte	0
08875 1EC7                        3C            .byte	$3C
08876 1EC8                        66            .byte	$66
08877 1EC9                        60            .byte	$60
08878 1ECA                        66            .byte	$66
08879 1ECB                        3C            .byte	$3C
08880 1ECC                        0C            .byte	$C
08881 1ECD                        06            .byte	6
08882 1ECE                        3C            .byte	$3C
08883 1ECF                        00            .byte	0
08884 1ED0                        00            .byte	0
08885                                           ! 1281  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08886 1ED1                        00            .byte	0
08887 1ED2                        10            .byte	$10
08888 1ED3                        38            .byte	$38
08889 1ED4                        6C            .byte	$6C
08890 1ED5                        00            .byte	0
08891 1ED6                        7C            .byte	$7C
08892 1ED7                        C6            .byte	$C6
08893 1ED8                        FE            .byte	$FE
08894 1ED9                        C0            .byte	$C0
08895 1EDA                        C6            .byte	$C6
08896 1EDB                        7C            .byte	$7C
08897 1EDC                        00            .byte	0
08898 1EDD                        00            .byte	0
08899 1EDE                        00            .byte	0
08900                                           ! 1282  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08901 1EDF                        00            .byte	0
08902 1EE0                        00            .byte	0
08903 1EE1                        CC            .byte	$CC
08904 1EE2                        CC            .byte	$CC
08905 1EE3                        00            .byte	0
08906 1EE4                        7C            .byte	$7C
08907 1EE5                        C6            .byte	$C6
08908 1EE6                        FE            .byte	$FE
08909 1EE7                        C0            .byte	$C0
08910 1EE8                        C6            .byte	$C6
08911 1EE9                        7C            .byte	$7C
08912 1EEA                        00            .byte	0
08913 1EEB                        00            .byte	0
08914 1EEC                        00            .byte	0
08915                                           ! 1283  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08916 1EED                        00            .byte	0
08917 1EEE                        60            .byte	$60
08918 1EEF                        30            .byte	$30
08919 1EF0                        18            .byte	$18
08920 1EF1                        00            .byte	0
08921 1EF2                        7C            .byte	$7C
08922 1EF3                        C6            .byte	$C6
08923 1EF4                        FE            .byte	$FE
08924 1EF5                        C0            .byte	$C0
08925 1EF6                        C6            .byte	$C6
08926 1EF7                        7C            .byte	$7C
08927 1EF8                        00            .byte	0
08928 1EF9                        00            .byte	0
08929 1EFA                        00            .byte	0
08930                                           ! 1284  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08931 1EFB                        00            .byte	0
08932 1EFC                        00            .byte	0
08933 1EFD                        66            .byte	$66
08934 1EFE                        66            .byte	$66
08935 1EFF                        00            .byte	0
08936 1F00                        38            .byte	$38
08937 1F01                        18            .byte	$18
08938 1F02                        18            .byte	$18
08939 1F03                        18            .byte	$18
08940 1F04                        18            .byte	$18
08941 1F05                        3C            .byte	$3C
08942 1F06                        00            .byte	0
08943 1F07                        00            .byte	0
08944 1F08                        00            .byte	0
08945                                           ! 1285  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08946 1F09                        00            .byte	0
08947 1F0A                        18            .byte	$18
08948 1F0B                        3C            .byte	$3C
08949 1F0C                        66            .byte	$66
08950 1F0D                        00            .byte	0
08951 1F0E                        38            .byte	$38
08952 1F0F                        18            .byte	$18
08953 1F10                        18            .byte	$18
08954 1F11                        18            .byte	$18
08955 1F12                        18            .byte	$18
08956 1F13                        3C            .byte	$3C
08957 1F14                        00            .byte	0
08958 1F15                        00            .byte	0
08959 1F16                        00            .byte	0
08960                                           ! 1286  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08961 1F17                        00            .byte	0
08962 1F18                        60            .byte	$60
08963 1F19                        30            .byte	$30
08964 1F1A                        18            .byte	$18
08965 1F1B                        00            .byte	0
08966 1F1C                        38            .byte	$38
08967 1F1D                        18            .byte	$18
08968 1F1E                        18            .byte	$18
08969 1F1F                        18            .byte	$18
08970 1F20                        18            .byte	$18
08971 1F21                        3C            .byte	$3C
08972 1F22                        00            .byte	0
08973 1F23                        00            .byte	0
08974 1F24                        00            .byte	0
08975                                           ! 1287  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08976 1F25                        00            .byte	0
08977 1F26                        C6            .byte	$C6
08978 1F27                        C6            .byte	$C6
08979 1F28                        10            .byte	$10
08980 1F29                        38            .byte	$38
08981 1F2A                        6C            .byte	$6C
08982 1F2B                        C6            .byte	$C6
08983 1F2C                        C6            .byte	$C6
08984 1F2D                        FE            .byte	$FE
08985 1F2E                        C6            .byte	$C6
08986 1F2F                        C6            .byte	$C6
08987 1F30                        00            .byte	0
08988 1F31                        00            .byte	0
08989 1F32                        00            .byte	0
08990                                           ! 1288  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08991 1F33                        38            .byte	$38
08992 1F34                        6C            .byte	$6C
08993 1F35                        38            .byte	$38
08994 1F36                        00            .byte	0
08995 1F37                        38            .byte	$38
08996 1F38                        6C            .byte	$6C
08997 1F39                        C6            .byte	$C6
08998 1F3A                        C6            .byte	$C6
08999 1F3B                        FE            .byte	$FE
09000 1F3C                        C6            .byte	$C6
09001 1F3D                        C6            .byte	$C6
09002 1F3E                        00            .byte	0
09003 1F3F                        00            .byte	0
09004 1F40                        00            .byte	0
09005                                           ! 1289  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
09006 1F41                        18            .byte	$18
09007 1F42                        30            .byte	$30
09008 1F43                        60            .byte	$60
09009 1F44                        00            .byte	0
09010 1F45                        FE            .byte	$FE
09011 1F46                        66            .byte	$66
09012 1F47                        60            .byte	$60
09013 1F48                        7C            .byte	$7C
09014 1F49                        60            .byte	$60
09015 1F4A                        66            .byte	$66
09016 1F4B                        FE            .byte	$FE
09017 1F4C                        00            .byte	0
09018 1F4D                        00            .byte	0
09019 1F4E                        00            .byte	0
09020                                           ! 1290  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
09021 1F4F                        00            .byte	0
09022 1F50                        00            .byte	0
09023 1F51                        00            .byte	0
09024 1F52                        00            .byte	0
09025 1F53                        CC            .byte	$CC
09026 1F54                        76            .byte	$76
09027 1F55                        36            .byte	$36
09028 1F56                        7E            .byte	$7E
09029 1F57                        D8            .byte	$D8
09030 1F58                        D8            .byte	$D8
09031 1F59                        6E            .byte	$6E
09032 1F5A                        00            .byte	0
09033 1F5B                        00            .byte	0
09034 1F5C                        00            .byte	0
09035                                           ! 1291  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09036 1F5D                        00            .byte	0
09037 1F5E                        00            .byte	0
09038 1F5F                        3E            .byte	$3E
09039 1F60                        6C            .byte	$6C
09040 1F61                        CC            .byte	$CC
09041 1F62                        CC            .byte	$CC
09042 1F63                        FE            .byte	$FE
09043 1F64                        CC            .byte	$CC
09044 1F65                        CC            .byte	$CC
09045 1F66                        CC            .byte	$CC
09046 1F67                        CE            .byte	$CE
09047 1F68                        00            .byte	0
09048 1F69                        00            .byte	0
09049 1F6A                        00            .byte	0
09050                                           ! 1292  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09051 1F6B                        00            .byte	0
09052 1F6C                        10            .byte	$10
09053 1F6D                        38            .byte	$38
09054 1F6E                        6C            .byte	$6C
09055 1F6F                        00            .byte	0
09056 1F70                        7C            .byte	$7C
09057 1F71                        C6            .byte	$C6
09058 1F72                        C6            .byte	$C6
09059 1F73                        C6            .byte	$C6
09060 1F74                        C6            .byte	$C6
09061 1F75                        7C            .byte	$7C
09062 1F76                        00            .byte	0
09063 1F77                        00            .byte	0
09064 1F78                        00            .byte	0
09065                                           ! 1293  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09066 1F79                        00            .byte	0
09067 1F7A                        00            .byte	0
09068 1F7B                        C6            .byte	$C6
09069 1F7C                        C6            .byte	$C6
09070 1F7D                        00            .byte	0
09071 1F7E                        7C            .byte	$7C
09072 1F7F                        C6            .byte	$C6
09073 1F80                        C6            .byte	$C6
09074 1F81                        C6            .byte	$C6
09075 1F82                        C6            .byte	$C6
09076 1F83                        7C            .byte	$7C
09077 1F84                        00            .byte	0
09078 1F85                        00            .byte	0
09079 1F86                        00            .byte	0
09080                                           ! 1294  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09081 1F87                        00            .byte	0
09082 1F88                        60            .byte	$60
09083 1F89                        30            .byte	$30
09084 1F8A                        18            .byte	$18
09085 1F8B                        00            .byte	0
09086 1F8C                        7C            .byte	$7C
09087 1F8D                        C6            .byte	$C6
09088 1F8E                        C6            .byte	$C6
09089 1F8F                        C6            .byte	$C6
09090 1F90                        C6            .byte	$C6
09091 1F91                        7C            .byte	$7C
09092 1F92                        00            .byte	0
09093 1F93                        00            .byte	0
09094 1F94                        00            .byte	0
09095                                           ! 1295  0x00, 0x30, 0x78, 0xcc, 0x00, 
09096 1F95                        00            .byte	0
09097 1F96                        30            .byte	$30
09098 1F97                        78            .byte	$78
09099 1F98                        CC            .byte	$CC
09100 1F99                        00            .byte	0
09101                                           ! 1295 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09102 1F9A                        CC            .byte	$CC
09103 1F9B                        CC            .byte	$CC
09104 1F9C                        CC            .byte	$CC
09105 1F9D                        CC            .byte	$CC
09106 1F9E                        CC            .byte	$CC
09107 1F9F                        76            .byte	$76
09108 1FA0                        00            .byte	0
09109 1FA1                        00            .byte	0
09110 1FA2                        00            .byte	0
09111                                           ! 1296  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09112 1FA3                        00            .byte	0
09113 1FA4                        60            .byte	$60
09114 1FA5                        30            .byte	$30
09115 1FA6                        18            .byte	$18
09116 1FA7                        00            .byte	0
09117 1FA8                        CC            .byte	$CC
09118 1FA9                        CC            .byte	$CC
09119 1FAA                        CC            .byte	$CC
09120 1FAB                        CC            .byte	$CC
09121 1FAC                        CC            .byte	$CC
09122 1FAD                        76            .byte	$76
09123 1FAE                        00            .byte	0
09124 1FAF                        00            .byte	0
09125 1FB0                        00            .byte	0
09126                                           ! 1297  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09127 1FB1                        00            .byte	0
09128 1FB2                        00            .byte	0
09129 1FB3                        C6            .byte	$C6
09130 1FB4                        C6            .byte	$C6
09131 1FB5                        00            .byte	0
09132 1FB6                        C6            .byte	$C6
09133 1FB7                        C6            .byte	$C6
09134 1FB8                        C6            .byte	$C6
09135 1FB9                        C6            .byte	$C6
09136 1FBA                        7E            .byte	$7E
09137 1FBB                        06            .byte	6
09138 1FBC                        0C            .byte	$C
09139 1FBD                        78            .byte	$78
09140 1FBE                        00            .byte	0
09141                                           ! 1298  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09142 1FBF                        00            .byte	0
09143 1FC0                        C6            .byte	$C6
09144 1FC1                        C6            .byte	$C6
09145 1FC2                        38            .byte	$38
09146 1FC3                        6C            .byte	$6C
09147 1FC4                        C6            .byte	$C6
09148 1FC5                        C6            .byte	$C6
09149 1FC6                        C6            .byte	$C6
09150 1FC7                        C6            .byte	$C6
09151 1FC8                        6C            .byte	$6C
09152 1FC9                        38            .byte	$38
09153 1FCA                        00            .byte	0
09154 1FCB                        00            .byte	0
09155 1FCC                        00            .byte	0
09156                                           ! 1299  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09157 1FCD                        00            .byte	0
09158 1FCE                        C6            .byte	$C6
09159 1FCF                        C6            .byte	$C6
09160 1FD0                        00            .byte	0
09161 1FD1                        C6            .byte	$C6
09162 1FD2                        C6            .byte	$C6
09163 1FD3                        C6            .byte	$C6
09164 1FD4                        C6            .byte	$C6
09165 1FD5                        C6            .byte	$C6
09166 1FD6                        C6            .byte	$C6
09167 1FD7                        7C            .byte	$7C
09168 1FD8                        00            .byte	0
09169 1FD9                        00            .byte	0
09170 1FDA                        00            .byte	0
09171                                           ! 1300  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09172 1FDB                        00            .byte	0
09173 1FDC                        18            .byte	$18
09174 1FDD                        18            .byte	$18
09175 1FDE                        3C            .byte	$3C
09176 1FDF                        66            .byte	$66
09177 1FE0                        60            .byte	$60
09178 1FE1                        60            .byte	$60
09179 1FE2                        66            .byte	$66
09180 1FE3                        3C            .byte	$3C
09181 1FE4                        18            .byte	$18
09182 1FE5                        18            .byte	$18
09183 1FE6                        00            .byte	0
09184 1FE7                        00            .byte	0
09185 1FE8                        00            .byte	0
09186                                           ! 1301  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09187 1FE9                        00            .byte	0
09188 1FEA                        38            .byte	$38
09189 1FEB                        6C            .byte	$6C
09190 1FEC                        64            .byte	$64
09191 1FED                        60            .byte	$60
09192 1FEE                        F0            .byte	$F0
09193 1FEF                        60            .byte	$60
09194 1FF0                        60            .byte	$60
09195 1FF1                        60            .byte	$60
09196 1FF2                        E6            .byte	$E6
09197 1FF3                        FC            .byte	$FC
09198 1FF4                        00            .byte	0
09199 1FF5                        00            .byte	0
09200 1FF6                        00            .byte	0
09201                                           ! 1302  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09202 1FF7                        00            .byte	0
09203 1FF8                        00            .byte	0
09204 1FF9                        66            .byte	$66
09205 1FFA                        66            .byte	$66
09206 1FFB                        3C            .byte	$3C
09207 1FFC                        18            .byte	$18
09208 1FFD                        7E            .byte	$7E
09209 1FFE                        18            .byte	$18
09210 1FFF                        7E            .byte	$7E
09211 2000                        18            .byte	$18
09212 2001                        18            .byte	$18
09213 2002                        00            .byte	0
09214 2003                        00            .byte	0
09215 2004                        00            .byte	0
09216                                           ! 1303  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09217 2005                        00            .byte	0
09218 2006                        F8            .byte	$F8
09219 2007                        CC            .byte	$CC
09220 2008                        CC            .byte	$CC
09221 2009                        F8            .byte	$F8
09222 200A                        C4            .byte	$C4
09223 200B                        CC            .byte	$CC
09224 200C                        DE            .byte	$DE
09225 200D                        CC            .byte	$CC
09226 200E                        CC            .byte	$CC
09227 200F                        C6            .byte	$C6
09228 2010                        00            .byte	0
09229 2011                        00            .byte	0
09230 2012                        00            .byte	0
09231                                           ! 1304  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09232 2013                        00            .byte	0
09233 2014                        0E            .byte	$E
09234 2015                        1B            .byte	$1B
09235 2016                        18            .byte	$18
09236 2017                        18            .byte	$18
09237 2018                        18            .byte	$18
09238 2019                        7E            .byte	$7E
09239 201A                        18            .byte	$18
09240 201B                        18            .byte	$18
09241 201C                        18            .byte	$18
09242 201D                        18            .byte	$18
09243 201E                        D8            .byte	$D8
09244 201F                        70            .byte	$70
09245 2020                        00            .byte	0
09246                                           ! 1305  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09247 2021                        00            .byte	0
09248 2022                        18            .byte	$18
09249 2023                        30            .byte	$30
09250 2024                        60            .byte	$60
09251 2025                        00            .byte	0
09252 2026                        78            .byte	$78
09253 2027                        0C            .byte	$C
09254 2028                        7C            .byte	$7C
09255 2029                        CC            .byte	$CC
09256 202A                        CC            .byte	$CC
09257 202B                        76            .byte	$76
09258 202C                        00            .byte	0
09259 202D                        00            .byte	0
09260 202E                        00            .byte	0
09261                                           ! 1306  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09262 202F                        00            .byte	0
09263 2030                        0C            .byte	$C
09264 2031                        18            .byte	$18
09265 2032                        30            .byte	$30
09266 2033                        00            .byte	0
09267 2034                        38            .byte	$38
09268 2035                        18            .byte	$18
09269 2036                        18            .byte	$18
09270 2037                        18            .byte	$18
09271 2038                        18            .byte	$18
09272 2039                        3C            .byte	$3C
09273 203A                        00            .byte	0
09274 203B                        00            .byte	0
09275 203C                        00            .byte	0
09276                                           ! 1307  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09277 203D                        00            .byte	0
09278 203E                        18            .byte	$18
09279 203F                        30            .byte	$30
09280 2040                        60            .byte	$60
09281 2041                        00            .byte	0
09282 2042                        7C            .byte	$7C
09283 2043                        C6            .byte	$C6
09284 2044                        C6            .byte	$C6
09285 2045                        C6            .byte	$C6
09286 2046                        C6            .byte	$C6
09287 2047                        7C            .byte	$7C
09288 2048                        00            .byte	0
09289 2049                        00            .byte	0
09290 204A                        00            .byte	0
09291                                           ! 1308  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09292 204B                        00            .byte	0
09293 204C                        18            .byte	$18
09294 204D                        30            .byte	$30
09295 204E                        60            .byte	$60
09296 204F                        00            .byte	0
09297 2050                        CC            .byte	$CC
09298 2051                        CC            .byte	$CC
09299 2052                        CC            .byte	$CC
09300 2053                        CC            .byte	$CC
09301 2054                        CC            .byte	$CC
09302 2055                        76            .byte	$76
09303 2056                        00            .byte	0
09304 2057                        00            .byte	0
09305 2058                        00            .byte	0
09306                                           ! 1309  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09307 2059                        00            .byte	0
09308 205A                        00            .byte	0
09309 205B                        76            .byte	$76
09310 205C                        DC            .byte	$DC
09311 205D                        00            .byte	0
09312 205E                        DC            .byte	$DC
09313 205F                        66            .byte	$66
09314 2060                        66            .byte	$66
09315 2061                        66            .byte	$66
09316 2062                        66            .byte	$66
09317 2063                        66            .byte	$66
09318 2064                        00            .byte	0
09319 2065                        00            .byte	0
09320 2066                        00            .byte	0
09321                                           ! 1310  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09322 2067                        76            .byte	$76
09323 2068                        DC            .byte	$DC
09324 2069                        00            .byte	0
09325 206A                        C6            .byte	$C6
09326 206B                        E6            .byte	$E6
09327 206C                        F6            .byte	$F6
09328 206D                        FE            .byte	$FE
09329 206E                        DE            .byte	$DE
09330 206F                        CE            .byte	$CE
09331 2070                        C6            .byte	$C6
09332 2071                        C6            .byte	$C6
09333 2072                        00            .byte	0
09334 2073                        00            .byte	0
09335 2074                        00            .byte	0
09336                                           ! 1311  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09337 2075                        00            .byte	0
09338 2076                        3C            .byte	$3C
09339 2077                        6C            .byte	$6C
09340 2078                        6C            .byte	$6C
09341 2079                        3E            .byte	$3E
09342 207A                        00            .byte	0
09343 207B                        7E            .byte	$7E
09344 207C                        00            .byte	0
09345 207D                        00            .byte	0
09346 207E                        00            .byte	0
09347 207F                        00            .byte	0
09348 2080                        00            .byte	0
09349 2081                        00            .byte	0
09350 2082                        00            .byte	0
09351                                           ! 1312  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09352 2083                        00            .byte	0
09353 2084                        38            .byte	$38
09354 2085                        6C            .byte	$6C
09355 2086                        6C            .byte	$6C
09356 2087                        38            .byte	$38
09357 2088                        00            .byte	0
09358 2089                        7C            .byte	$7C
09359 208A                        00            .byte	0
09360 208B                        00            .byte	0
09361 208C                        00            .byte	0
09362 208D                        00            .byte	0
09363 208E                        00            .byte	0
09364 208F                        00            .byte	0
09365 2090                        00            .byte	0
09366                                           ! 1313  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09367 2091                        00            .byte	0
09368 2092                        00            .byte	0
09369 2093                        30            .byte	$30
09370 2094                        30            .byte	$30
09371 2095                        00            .byte	0
09372 2096                        30            .byte	$30
09373 2097                        30            .byte	$30
09374 2098                        60            .byte	$60
09375 2099                        C6            .byte	$C6
09376 209A                        C6            .byte	$C6
09377 209B                        7C            .byte	$7C
09378 209C                        00            .byte	0
09379 209D                        00            .byte	0
09380 209E                        00            .byte	0
09381                                           ! 1314  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09382 209F                        00            .byte	0
09383 20A0                        00            .byte	0
09384 20A1                        00            .byte	0
09385 20A2                        00            .byte	0
09386 20A3                        00            .byte	0
09387 20A4                        00            .byte	0
09388 20A5                        FE            .byte	$FE
09389 20A6                        C0            .byte	$C0
09390 20A7                        C0            .byte	$C0
09391 20A8                        C0            .byte	$C0
09392 20A9                        00            .byte	0
09393 20AA                        00            .byte	0
09394 20AB                        00            .byte	0
09395 20AC                        00            .byte	0
09396                                           ! 1315  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09397 20AD                        00            .byte	0
09398 20AE                        00            .byte	0
09399 20AF                        00            .byte	0
09400 20B0                        00            .byte	0
09401 20B1                        00            .byte	0
09402 20B2                        00            .byte	0
09403 20B3                        FE            .byte	$FE
09404 20B4                        06            .byte	6
09405 20B5                        06            .byte	6
09406 20B6                        06            .byte	6
09407 20B7                        00            .byte	0
09408 20B8                        00            .byte	0
09409 20B9                        00            .byte	0
09410 20BA                        00            .byte	0
09411                                           ! 1316  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09412 20BB                        00            .byte	0
09413 20BC                        C0            .byte	$C0
09414 20BD                        C0            .byte	$C0
09415 20BE                        C6            .byte	$C6
09416 20BF                        CC            .byte	$CC
09417 20C0                        D8            .byte	$D8
09418 20C1                        30            .byte	$30
09419 20C2                        60            .byte	$60
09420 20C3                        DC            .byte	$DC
09421 20C4                        86            .byte	$86
09422 20C5                        0C            .byte	$C
09423 20C6                        18            .byte	$18
09424 20C7                        3E            .byte	$3E
09425 20C8                        00            .byte	0
09426                                           ! 1317  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09427 20C9                        00            .byte	0
09428 20CA                        C0            .byte	$C0
09429 20CB                        C0            .byte	$C0
09430 20CC                        C6            .byte	$C6
09431 20CD                        CC            .byte	$CC
09432 20CE                        D8            .byte	$D8
09433 20CF                        30            .byte	$30
09434 20D0                        66            .byte	$66
09435 20D1                        CE            .byte	$CE
09436 20D2                        9E            .byte	$9E
09437 20D3                        3E            .byte	$3E
09438 20D4                        06            .byte	6
09439 20D5                        06            .byte	6
09440 20D6                        00            .byte	0
09441                                           ! 1318  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09442 20D7                        00            .byte	0
09443 20D8                        00            .byte	0
09444 20D9                        18            .byte	$18
09445 20DA                        18            .byte	$18
09446 20DB                        00            .byte	0
09447 20DC                        18            .byte	$18
09448 20DD                        18            .byte	$18
09449 20DE                        3C            .byte	$3C
09450 20DF                        3C            .byte	$3C
09451 20E0                        3C            .byte	$3C
09452 20E1                        18            .byte	$18
09453 20E2                        00            .byte	0
09454 20E3                        00            .byte	0
09455 20E4                        00            .byte	0
09456                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0x
09457 20E5                        00            .byte	0
09458 20E6                        00            .byte	0
09459 20E7                        00            .byte	0
09460 20E8                        00            .byte	0
09461 20E9                        36            .byte	$36
09462 20EA                        6C            .byte	$6C
09463                                           ! 1319 d8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09464 20EB                        D8            .byte	$D8
09465 20EC                        6C            .byte	$6C
09466 20ED                        36            .byte	$36
09467 20EE                        00            .byte	0
09468 20EF                        00            .byte	0
09469 20F0                        00            .byte	0
09470 20F1                        00            .byte	0
09471 20F2                        00            .byte	0
09472                                           ! 1320  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09473 20F3                        00            .byte	0
09474 20F4                        00            .byte	0
09475 20F5                        00            .byte	0
09476 20F6                        00            .byte	0
09477 20F7                        D8            .byte	$D8
09478 20F8                        6C            .byte	$6C
09479 20F9                        36            .byte	$36
09480 20FA                        6C            .byte	$6C
09481 20FB                        D8            .byte	$D8
09482 20FC                        00            .byte	0
09483 20FD                        00            .byte	0
09484 20FE                        00            .byte	0
09485 20FF                        00            .byte	0
09486 2100                        00            .byte	0
09487                                           ! 1321  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09488 2101                        11            .byte	$11
09489 2102                        44            .byte	$44
09490 2103                        11            .byte	$11
09491 2104                        44            .byte	$44
09492 2105                        11            .byte	$11
09493 2106                        44            .byte	$44
09494 2107                        11            .byte	$11
09495 2108                        44            .byte	$44
09496 2109                        11            .byte	$11
09497 210A                        44            .byte	$44
09498 210B                        11            .byte	$11
09499 210C                        44            .byte	$44
09500 210D                        11            .byte	$11
09501 210E                        44            .byte	$44
09502                                           ! 1322  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09503 210F                        55            .byte	$55
09504 2110                        AA            .byte	$AA
09505 2111                        55            .byte	$55
09506 2112                        AA            .byte	$AA
09507 2113                        55            .byte	$55
09508 2114                        AA            .byte	$AA
09509 2115                        55            .byte	$55
09510 2116                        AA            .byte	$AA
09511 2117                        55            .byte	$55
09512 2118                        AA            .byte	$AA
09513 2119                        55            .byte	$55
09514 211A                        AA            .byte	$AA
09515 211B                        55            .byte	$55
09516 211C                        AA            .byte	$AA
09517                                           ! 1323  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09518 211D                        DD            .byte	$DD
09519 211E                        77            .byte	$77
09520 211F                        DD            .byte	$DD
09521 2120                        77            .byte	$77
09522 2121                        DD            .byte	$DD
09523 2122                        77            .byte	$77
09524 2123                        DD            .byte	$DD
09525 2124                        77            .byte	$77
09526 2125                        DD            .byte	$DD
09527 2126                        77            .byte	$77
09528 2127                        DD            .byte	$DD
09529 2128                        77            .byte	$77
09530 2129                        DD            .byte	$DD
09531 212A                        77            .byte	$77
09532                                           ! 1324  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09533 212B                        18            .byte	$18
09534 212C                        18            .byte	$18
09535 212D                        18            .byte	$18
09536 212E                        18            .byte	$18
09537 212F                        18            .byte	$18
09538 2130                        18            .byte	$18
09539 2131                        18            .byte	$18
09540 2132                        18            .byte	$18
09541 2133                        18            .byte	$18
09542 2134                        18            .byte	$18
09543 2135                        18            .byte	$18
09544 2136                        18            .byte	$18
09545 2137                        18            .byte	$18
09546 2138                        18            .byte	$18
09547                                           ! 1325  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09548 2139                        18            .byte	$18
09549 213A                        18            .byte	$18
09550 213B                        18            .byte	$18
09551 213C                        18            .byte	$18
09552 213D                        18            .byte	$18
09553 213E                        18            .byte	$18
09554 213F                        18            .byte	$18
09555 2140                        F8            .byte	$F8
09556 2141                        18            .byte	$18
09557 2142                        18            .byte	$18
09558 2143                        18            .byte	$18
09559 2144                        18            .byte	$18
09560 2145                        18            .byte	$18
09561 2146                        18            .byte	$18
09562                                           ! 1326  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09563 2147                        18            .byte	$18
09564 2148                        18            .byte	$18
09565 2149                        18            .byte	$18
09566 214A                        18            .byte	$18
09567 214B                        18            .byte	$18
09568 214C                        F8            .byte	$F8
09569 214D                        18            .byte	$18
09570 214E                        F8            .byte	$F8
09571 214F                        18            .byte	$18
09572 2150                        18            .byte	$18
09573 2151                        18            .byte	$18
09574 2152                        18            .byte	$18
09575 2153                        18            .byte	$18
09576 2154                        18            .byte	$18
09577                                           ! 1327  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09578 2155                        36            .byte	$36
09579 2156                        36            .byte	$36
09580 2157                        36            .byte	$36
09581 2158                        36            .byte	$36
09582 2159                        36            .byte	$36
09583 215A                        36            .byte	$36
09584 215B                        36            .byte	$36
09585 215C                        F6            .byte	$F6
09586 215D                        36            .byte	$36
09587 215E                        36            .byte	$36
09588 215F                        36            .byte	$36
09589 2160                        36            .byte	$36
09590 2161                        36            .byte	$36
09591 2162                        36            .byte	$36
09592                                           ! 1328  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09593 2163                        00            .byte	0
09594 2164                        00            .byte	0
09595 2165                        00            .byte	0
09596 2166                        00            .byte	0
09597 2167                        00            .byte	0
09598 2168                        00            .byte	0
09599 2169                        00            .byte	0
09600 216A                        FE            .byte	$FE
09601 216B                        36            .byte	$36
09602 216C                        36            .byte	$36
09603 216D                        36            .byte	$36
09604 216E                        36            .byte	$36
09605 216F                        36            .byte	$36
09606 2170                        36            .byte	$36
09607                                           ! 1329  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09608 2171                        00            .byte	0
09609 2172                        00            .byte	0
09610 2173                        00            .byte	0
09611 2174                        00            .byte	0
09612 2175                        00            .byte	0
09613 2176                        F8            .byte	$F8
09614 2177                        18            .byte	$18
09615 2178                        F8            .byte	$F8
09616 2179                        18            .byte	$18
09617 217A                        18            .byte	$18
09618 217B                        18            .byte	$18
09619 217C                        18            .byte	$18
09620 217D                        18            .byte	$18
09621 217E                        18            .byte	$18
09622                                           ! 1330  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09623 217F                        36            .byte	$36
09624 2180                        36            .byte	$36
09625 2181                        36            .byte	$36
09626 2182                        36            .byte	$36
09627 2183                        36            .byte	$36
09628 2184                        F6            .byte	$F6
09629 2185                        06            .byte	6
09630 2186                        F6            .byte	$F6
09631 2187                        36            .byte	$36
09632 2188                        36            .byte	$36
09633 2189                        36            .byte	$36
09634 218A                        36            .byte	$36
09635 218B                        36            .byte	$36
09636 218C                        36            .byte	$36
09637                                           ! 1331  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09638 218D                        36            .byte	$36
09639 218E                        36            .byte	$36
09640 218F                        36            .byte	$36
09641 2190                        36            .byte	$36
09642 2191                        36            .byte	$36
09643 2192                        36            .byte	$36
09644 2193                        36            .byte	$36
09645 2194                        36            .byte	$36
09646 2195                        36            .byte	$36
09647 2196                        36            .byte	$36
09648 2197                        36            .byte	$36
09649 2198                        36            .byte	$36
09650 2199                        36            .byte	$36
09651 219A                        36            .byte	$36
09652                                           ! 1332  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09653 219B                        00            .byte	0
09654 219C                        00            .byte	0
09655 219D                        00            .byte	0
09656 219E                        00            .byte	0
09657 219F                        00            .byte	0
09658 21A0                        FE            .byte	$FE
09659 21A1                        06            .byte	6
09660 21A2                        F6            .byte	$F6
09661 21A3                        36            .byte	$36
09662 21A4                        36            .byte	$36
09663 21A5                        36            .byte	$36
09664 21A6                        36            .byte	$36
09665 21A7                        36            .byte	$36
09666 21A8                        36            .byte	$36
09667                                           ! 1333  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09668 21A9                        36            .byte	$36
09669 21AA                        36            .byte	$36
09670 21AB                        36            .byte	$36
09671 21AC                        36            .byte	$36
09672 21AD                        36            .byte	$36
09673 21AE                        F6            .byte	$F6
09674 21AF                        06            .byte	6
09675 21B0                        FE            .byte	$FE
09676 21B1                        00            .byte	0
09677 21B2                        00            .byte	0
09678 21B3                        00            .byte	0
09679 21B4                        00            .byte	0
09680 21B5                        00            .byte	0
09681 21B6                        00            .byte	0
09682                                           ! 1334  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09683 21B7                        36            .byte	$36
09684 21B8                        36            .byte	$36
09685 21B9                        36            .byte	$36
09686 21BA                        36            .byte	$36
09687 21BB                        36            .byte	$36
09688 21BC                        36            .byte	$36
09689 21BD                        36            .byte	$36
09690 21BE                        FE            .byte	$FE
09691 21BF                        00            .byte	0
09692 21C0                        00            .byte	0
09693 21C1                        00            .byte	0
09694 21C2                        00            .byte	0
09695 21C3                        00            .byte	0
09696 21C4                        00            .byte	0
09697                                           ! 1335  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09698 21C5                        18            .byte	$18
09699 21C6                        18            .byte	$18
09700 21C7                        18            .byte	$18
09701 21C8                        18            .byte	$18
09702 21C9                        18            .byte	$18
09703 21CA                        F8            .byte	$F8
09704 21CB                        18            .byte	$18
09705 21CC                        F8            .byte	$F8
09706 21CD                        00            .byte	0
09707 21CE                        00            .byte	0
09708 21CF                        00            .byte	0
09709 21D0                        00            .byte	0
09710 21D1                        00            .byte	0
09711 21D2                        00            .byte	0
09712                                           ! 1336  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09713 21D3                        00            .byte	0
09714 21D4                        00            .byte	0
09715 21D5                        00            .byte	0
09716 21D6                        00            .byte	0
09717 21D7                        00            .byte	0
09718 21D8                        00            .byte	0
09719 21D9                        00            .byte	0
09720 21DA                        F8            .byte	$F8
09721 21DB                        18            .byte	$18
09722 21DC                        18            .byte	$18
09723 21DD                        18            .byte	$18
09724 21DE                        18            .byte	$18
09725 21DF                        18            .byte	$18
09726 21E0                        18            .byte	$18
09727                                           ! 1337  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09728 21E1                        18            .byte	$18
09729 21E2                        18            .byte	$18
09730 21E3                        18            .byte	$18
09731 21E4                        18            .byte	$18
09732 21E5                        18            .byte	$18
09733 21E6                        18            .byte	$18
09734 21E7                        18            .byte	$18
09735 21E8                        1F            .byte	$1F
09736 21E9                        00            .byte	0
09737 21EA                        00            .byte	0
09738 21EB                        00            .byte	0
09739 21EC                        00            .byte	0
09740 21ED                        00            .byte	0
09741 21EE                        00            .byte	0
09742                                           ! 1338  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09743 21EF                        18            .byte	$18
09744 21F0                        18            .byte	$18
09745 21F1                        18            .byte	$18
09746 21F2                        18            .byte	$18
09747 21F3                        18            .byte	$18
09748 21F4                        18            .byte	$18
09749 21F5                        18            .byte	$18
09750 21F6                        FF            .byte	$FF
09751 21F7                        00            .byte	0
09752 21F8                        00            .byte	0
09753 21F9                        00            .byte	0
09754 21FA                        00            .byte	0
09755 21FB                        00            .byte	0
09756 21FC                        00            .byte	0
09757                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09758 21FD                        00            .byte	0
09759 21FE                        00            .byte	0
09760 21FF                        00            .byte	0
09761 2200                        00            .byte	0
09762 2201                        00            .byte	0
09763 2202                        00            .byte	0
09764 2203                        00            .byte	0
09765 2204                        FF            .byte	$FF
09766 2205                        18            .byte	$18
09767 2206                        18            .byte	$18
09768 2207                        18            .byte	$18
09769 2208                        18            .byte	$18
09770 2209                        18            .byte	$18
09771 220A                        18            .byte	$18
09772                                           ! 1340  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09773 220B                        18            .byte	$18
09774 220C                        18            .byte	$18
09775 220D                        18            .byte	$18
09776 220E                        18            .byte	$18
09777 220F                        18            .byte	$18
09778 2210                        18            .byte	$18
09779 2211                        18            .byte	$18
09780 2212                        1F            .byte	$1F
09781 2213                        18            .byte	$18
09782 2214                        18            .byte	$18
09783 2215                        18            .byte	$18
09784 2216                        18            .byte	$18
09785 2217                        18            .byte	$18
09786 2218                        18            .byte	$18
09787                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09788 2219                        00            .byte	0
09789 221A                        00            .byte	0
09790 221B                        00            .byte	0
09791 221C                        00            .byte	0
09792 221D                        00            .byte	0
09793 221E                        00            .byte	0
09794 221F                        00            .byte	0
09795 2220                        FF            .byte	$FF
09796 2221                        00            .byte	0
09797 2222                        00            .byte	0
09798 2223                        00            .byte	0
09799 2224                        00            .byte	0
09800 2225                        00            .byte	0
09801 2226                        00            .byte	0
09802                                           ! 1342  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09803 2227                        18            .byte	$18
09804 2228                        18            .byte	$18
09805 2229                        18            .byte	$18
09806 222A                        18            .byte	$18
09807 222B                        18            .byte	$18
09808 222C                        18            .byte	$18
09809 222D                        18            .byte	$18
09810 222E                        FF            .byte	$FF
09811 222F                        18            .byte	$18
09812 2230                        18            .byte	$18
09813 2231                        18            .byte	$18
09814 2232                        18            .byte	$18
09815 2233                        18            .byte	$18
09816 2234                        18            .byte	$18
09817                                           ! 1343  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f
09818 2235                        18            .byte	$18
09819 2236                        18            .byte	$18
09820 2237                        18            .byte	$18
09821 2238                        18            .byte	$18
09822 2239                        18            .byte	$18
09823 223A                        1F            .byte	$1F
09824 223B                        18            .byte	$18
09825                                           ! 1343 , 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09826 223C                        1F            .byte	$1F
09827 223D                        18            .byte	$18
09828 223E                        18            .byte	$18
09829 223F                        18            .byte	$18
09830 2240                        18            .byte	$18
09831 2241                        18            .byte	$18
09832 2242                        18            .byte	$18
09833                                           ! 1344  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09834 2243                        36            .byte	$36
09835 2244                        36            .byte	$36
09836 2245                        36            .byte	$36
09837 2246                        36            .byte	$36
09838 2247                        36            .byte	$36
09839 2248                        36            .byte	$36
09840 2249                        36            .byte	$36
09841 224A                        37            .byte	$37
09842 224B                        36            .byte	$36
09843 224C                        36            .byte	$36
09844 224D                        36            .byte	$36
09845 224E                        36            .byte	$36
09846 224F                        36            .byte	$36
09847 2250                        36            .byte	$36
09848                                           ! 1345  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09849 2251                        36            .byte	$36
09850 2252                        36            .byte	$36
09851 2253                        36            .byte	$36
09852 2254                        36            .byte	$36
09853 2255                        36            .byte	$36
09854 2256                        37            .byte	$37
09855 2257                        30            .byte	$30
09856 2258                        3F            .byte	$3F
09857 2259                        00            .byte	0
09858 225A                        00            .byte	0
09859 225B                        00            .byte	0
09860 225C                        00            .byte	0
09861 225D                        00            .byte	0
09862 225E                        00            .byte	0
09863                                           ! 1346  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09864 225F                        00            .byte	0
09865 2260                        00            .byte	0
09866 2261                        00            .byte	0
09867 2262                        00            .byte	0
09868 2263                        00            .byte	0
09869 2264                        3F            .byte	$3F
09870 2265                        30            .byte	$30
09871 2266                        37            .byte	$37
09872 2267                        36            .byte	$36
09873 2268                        36            .byte	$36
09874 2269                        36            .byte	$36
09875 226A                        36            .byte	$36
09876 226B                        36            .byte	$36
09877 226C                        36            .byte	$36
09878                                           ! 1347  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09879 226D                        36            .byte	$36
09880 226E                        36            .byte	$36
09881 226F                        36            .byte	$36
09882 2270                        36            .byte	$36
09883 2271                        36            .byte	$36
09884 2272                        F7            .byte	$F7
09885 2273                        00            .byte	0
09886 2274                        FF            .byte	$FF
09887 2275                        00            .byte	0
09888 2276                        00            .byte	0
09889 2277                        00            .byte	0
09890 2278                        00            .byte	0
09891 2279                        00            .byte	0
09892 227A                        00            .byte	0
09893                                           ! 1348  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09894 227B                        00            .byte	0
09895 227C                        00            .byte	0
09896 227D                        00            .byte	0
09897 227E                        00            .byte	0
09898 227F                        00            .byte	0
09899 2280                        FF            .byte	$FF
09900 2281                        00            .byte	0
09901 2282                        F7            .byte	$F7
09902 2283                        36            .byte	$36
09903 2284                        36            .byte	$36
09904 2285                        36            .byte	$36
09905 2286                        36            .byte	$36
09906 2287                        36            .byte	$36
09907 2288                        36            .byte	$36
09908                                           ! 1349  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09909 2289                        36            .byte	$36
09910 228A                        36            .byte	$36
09911 228B                        36            .byte	$36
09912 228C                        36            .byte	$36
09913 228D                        36            .byte	$36
09914 228E                        37            .byte	$37
09915 228F                        30            .byte	$30
09916 2290                        37            .byte	$37
09917 2291                        36            .byte	$36
09918 2292                        36            .byte	$36
09919 2293                        36            .byte	$36
09920 2294                        36            .byte	$36
09921 2295                        36            .byte	$36
09922 2296                        36            .byte	$36
09923                                           ! 1350  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09924 2297                        00            .byte	0
09925 2298                        00            .byte	0
09926 2299                        00            .byte	0
09927 229A                        00            .byte	0
09928 229B                        00            .byte	0
09929 229C                        FF            .byte	$FF
09930 229D                        00            .byte	0
09931 229E                        FF            .byte	$FF
09932 229F                        00            .byte	0
09933 22A0                        00            .byte	0
09934 22A1                        00            .byte	0
09935 22A2                        00            .byte	0
09936 22A3                        00            .byte	0
09937 22A4                        00            .byte	0
09938                                           ! 1351  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09939 22A5                        36            .byte	$36
09940 22A6                        36            .byte	$36
09941 22A7                        36            .byte	$36
09942 22A8                        36            .byte	$36
09943 22A9                        36            .byte	$36
09944 22AA                        F7            .byte	$F7
09945 22AB                        00            .byte	0
09946 22AC                        F7            .byte	$F7
09947 22AD                        36            .byte	$36
09948 22AE                        36            .byte	$36
09949 22AF                        36            .byte	$36
09950 22B0                        36            .byte	$36
09951 22B1                        36            .byte	$36
09952 22B2                        36            .byte	$36
09953                                           ! 1352  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09954 22B3                        18            .byte	$18
09955 22B4                        18            .byte	$18
09956 22B5                        18            .byte	$18
09957 22B6                        18            .byte	$18
09958 22B7                        18            .byte	$18
09959 22B8                        FF            .byte	$FF
09960 22B9                        00            .byte	0
09961 22BA                        FF            .byte	$FF
09962 22BB                        00            .byte	0
09963 22BC                        00            .byte	0
09964 22BD                        00            .byte	0
09965 22BE                        00            .byte	0
09966 22BF                        00            .byte	0
09967 22C0                        00            .byte	0
09968                                           ! 1353  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09969 22C1                        36            .byte	$36
09970 22C2                        36            .byte	$36
09971 22C3                        36            .byte	$36
09972 22C4                        36            .byte	$36
09973 22C5                        36            .byte	$36
09974 22C6                        36            .byte	$36
09975 22C7                        36            .byte	$36
09976 22C8                        FF            .byte	$FF
09977 22C9                        00            .byte	0
09978 22CA                        00            .byte	0
09979 22CB                        00            .byte	0
09980 22CC                        00            .byte	0
09981 22CD                        00            .byte	0
09982 22CE                        00            .byte	0
09983                                           ! 1354  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09984 22CF                        00            .byte	0
09985 22D0                        00            .byte	0
09986 22D1                        00            .byte	0
09987 22D2                        00            .byte	0
09988 22D3                        00            .byte	0
09989 22D4                        FF            .byte	$FF
09990 22D5                        00            .byte	0
09991 22D6                        FF            .byte	$FF
09992 22D7                        18            .byte	$18
09993 22D8                        18            .byte	$18
09994 22D9                        18            .byte	$18
09995 22DA                        18            .byte	$18
09996 22DB                        18            .byte	$18
09997 22DC                        18            .byte	$18
09998                                           ! 1355  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09999 22DD                        00            .byte	0
10000 22DE                        00            .byte	0
10001 22DF                        00            .byte	0
10002 22E0                        00            .byte	0
10003 22E1                        00            .byte	0
10004 22E2                        00            .byte	0
10005 22E3                        00            .byte	0
10006 22E4                        FF            .byte	$FF
10007 22E5                        36            .byte	$36
10008 22E6                        36            .byte	$36
10009 22E7                        36            .byte	$36
10010 22E8                        36            .byte	$36
10011 22E9                        36            .byte	$36
10012 22EA                        36            .byte	$36
10013                                           ! 1356  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10014 22EB                        36            .byte	$36
10015 22EC                        36            .byte	$36
10016 22ED                        36            .byte	$36
10017 22EE                        36            .byte	$36
10018 22EF                        36            .byte	$36
10019 22F0                        36            .byte	$36
10020 22F1                        36            .byte	$36
10021 22F2                        3F            .byte	$3F
10022 22F3                        00            .byte	0
10023 22F4                        00            .byte	0
10024 22F5                        00            .byte	0
10025 22F6                        00            .byte	0
10026 22F7                        00            .byte	0
10027 22F8                        00            .byte	0
10028                                           ! 1357  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10029 22F9                        18            .byte	$18
10030 22FA                        18            .byte	$18
10031 22FB                        18            .byte	$18
10032 22FC                        18            .byte	$18
10033 22FD                        18            .byte	$18
10034 22FE                        1F            .byte	$1F
10035 22FF                        18            .byte	$18
10036 2300                        1F            .byte	$1F
10037 2301                        00            .byte	0
10038 2302                        00            .byte	0
10039 2303                        00            .byte	0
10040 2304                        00            .byte	0
10041 2305                        00            .byte	0
10042 2306                        00            .byte	0
10043                                           ! 1358  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10044 2307                        00            .byte	0
10045 2308                        00            .byte	0
10046 2309                        00            .byte	0
10047 230A                        00            .byte	0
10048 230B                        00            .byte	0
10049 230C                        1F            .byte	$1F
10050 230D                        18            .byte	$18
10051 230E                        1F            .byte	$1F
10052 230F                        18            .byte	$18
10053 2310                        18            .byte	$18
10054 2311                        18            .byte	$18
10055 2312                        18            .byte	$18
10056 2313                        18            .byte	$18
10057 2314                        18            .byte	$18
10058                                           ! 1359  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10059 2315                        00            .byte	0
10060 2316                        00            .byte	0
10061 2317                        00            .byte	0
10062 2318                        00            .byte	0
10063 2319                        00            .byte	0
10064 231A                        00            .byte	0
10065 231B                        00            .byte	0
10066 231C                        3F            .byte	$3F
10067 231D                        36            .byte	$36
10068 231E                        36            .byte	$36
10069 231F                        36            .byte	$36
10070 2320                        36            .byte	$36
10071 2321                        36            .byte	$36
10072 2322                        36            .byte	$36
10073                                           ! 1360  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10074 2323                        36            .byte	$36
10075 2324                        36            .byte	$36
10076 2325                        36            .byte	$36
10077 2326                        36            .byte	$36
10078 2327                        36            .byte	$36
10079 2328                        36            .byte	$36
10080 2329                        36            .byte	$36
10081 232A                        FF            .byte	$FF
10082 232B                        36            .byte	$36
10083 232C                        36            .byte	$36
10084 232D                        36            .byte	$36
10085 232E                        36            .byte	$36
10086 232F                        36            .byte	$36
10087 2330                        36            .byte	$36
10088                                           ! 1361  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10089 2331                        18            .byte	$18
10090 2332                        18            .byte	$18
10091 2333                        18            .byte	$18
10092 2334                        18            .byte	$18
10093 2335                        18            .byte	$18
10094 2336                        FF            .byte	$FF
10095 2337                        18            .byte	$18
10096 2338                        FF            .byte	$FF
10097 2339                        18            .byte	$18
10098 233A                        18            .byte	$18
10099 233B                        18            .byte	$18
10100 233C                        18            .byte	$18
10101 233D                        18            .byte	$18
10102 233E                        18            .byte	$18
10103                                           ! 1362  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10104 233F                        18            .byte	$18
10105 2340                        18            .byte	$18
10106 2341                        18            .byte	$18
10107 2342                        18            .byte	$18
10108 2343                        18            .byte	$18
10109 2344                        18            .byte	$18
10110 2345                        18            .byte	$18
10111 2346                        F8            .byte	$F8
10112 2347                        00            .byte	0
10113 2348                        00            .byte	0
10114 2349                        00            .byte	0
10115 234A                        00            .byte	0
10116 234B                        00            .byte	0
10117 234C                        00            .byte	0
10118                                           ! 1363  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10119 234D                        00            .byte	0
10120 234E                        00            .byte	0
10121 234F                        00            .byte	0
10122 2350                        00            .byte	0
10123 2351                        00            .byte	0
10124 2352                        00            .byte	0
10125 2353                        00            .byte	0
10126 2354                        1F            .byte	$1F
10127 2355                        18            .byte	$18
10128 2356                        18            .byte	$18
10129 2357                        18            .byte	$18
10130 2358                        18            .byte	$18
10131 2359                        18            .byte	$18
10132 235A                        18            .byte	$18
10133                                           ! 1364  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10134 235B                        FF            .byte	$FF
10135 235C                        FF            .byte	$FF
10136 235D                        FF            .byte	$FF
10137 235E                        FF            .byte	$FF
10138 235F                        FF            .byte	$FF
10139 2360                        FF            .byte	$FF
10140 2361                        FF            .byte	$FF
10141 2362                        FF            .byte	$FF
10142 2363                        FF            .byte	$FF
10143 2364                        FF            .byte	$FF
10144 2365                        FF            .byte	$FF
10145 2366                        FF            .byte	$FF
10146 2367                        FF            .byte	$FF
10147 2368                        FF            .byte	$FF
10148                                           ! 1365  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10149 2369                        00            .byte	0
10150 236A                        00            .byte	0
10151 236B                        00            .byte	0
10152 236C                        00            .byte	0
10153 236D                        00            .byte	0
10154 236E                        00            .byte	0
10155 236F                        00            .byte	0
10156 2370                        FF            .byte	$FF
10157 2371                        FF            .byte	$FF
10158 2372                        FF            .byte	$FF
10159 2373                        FF            .byte	$FF
10160 2374                        FF            .byte	$FF
10161 2375                        FF            .byte	$FF
10162 2376                        FF            .byte	$FF
10163                                           ! 1366  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10164 2377                        F0            .byte	$F0
10165 2378                        F0            .byte	$F0
10166 2379                        F0            .byte	$F0
10167 237A                        F0            .byte	$F0
10168 237B                        F0            .byte	$F0
10169 237C                        F0            .byte	$F0
10170 237D                        F0            .byte	$F0
10171 237E                        F0            .byte	$F0
10172 237F                        F0            .byte	$F0
10173 2380                        F0            .byte	$F0
10174 2381                        F0            .byte	$F0
10175 2382                        F0            .byte	$F0
10176 2383                        F0            .byte	$F0
10177 2384                        F0            .byte	$F0
10178                                           ! 1367  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
10179 2385                        0F            .byte	$F
10180 2386                        0F            .byte	$F
10181 2387                        0F            .byte	$F
10182 2388                        0F            .byte	$F
10183 2389                        0F            .byte	$F
10184 238A                        0F            .byte	$F
10185 238B                        0F            .byte	$F
10186 238C                        0F            .byte	$F
10187 238D                        0F            .byte	$F
10188                                           ! 1367 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10189 238E                        0F            .byte	$F
10190 238F                        0F            .byte	$F
10191 2390                        0F            .byte	$F
10192 2391                        0F            .byte	$F
10193 2392                        0F            .byte	$F
10194                                           ! 1368  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10195 2393                        FF            .byte	$FF
10196 2394                        FF            .byte	$FF
10197 2395                        FF            .byte	$FF
10198 2396                        FF            .byte	$FF
10199 2397                        FF            .byte	$FF
10200 2398                        FF            .byte	$FF
10201 2399                        FF            .byte	$FF
10202 239A                        00            .byte	0
10203 239B                        00            .byte	0
10204 239C                        00            .byte	0
10205 239D                        00            .byte	0
10206 239E                        00            .byte	0
10207 239F                        00            .byte	0
10208 23A0                        00            .byte	0
10209                                           ! 1369  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10210 23A1                        00            .byte	0
10211 23A2                        00            .byte	0
10212 23A3                        00            .byte	0
10213 23A4                        00            .byte	0
10214 23A5                        00            .byte	0
10215 23A6                        76            .byte	$76
10216 23A7                        DC            .byte	$DC
10217 23A8                        D8            .byte	$D8
10218 23A9                        D8            .byte	$D8
10219 23AA                        DC            .byte	$DC
10220 23AB                        76            .byte	$76
10221 23AC                        00            .byte	0
10222 23AD                        00            .byte	0
10223 23AE                        00            .byte	0
10224                                           ! 1370  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10225 23AF                        00            .byte	0
10226 23B0                        00            .byte	0
10227 23B1                        00            .byte	0
10228 23B2                        00            .byte	0
10229 23B3                        7C            .byte	$7C
10230 23B4                        C6            .byte	$C6
10231 23B5                        FC            .byte	$FC
10232 23B6                        C6            .byte	$C6
10233 23B7                        C6            .byte	$C6
10234 23B8                        FC            .byte	$FC
10235 23B9                        C0            .byte	$C0
10236 23BA                        C0            .byte	$C0
10237 23BB                        40            .byte	$40
10238 23BC                        00            .byte	0
10239                                           ! 1371  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10240 23BD                        00            .byte	0
10241 23BE                        00            .byte	0
10242 23BF                        FE            .byte	$FE
10243 23C0                        C6            .byte	$C6
10244 23C1                        C6            .byte	$C6
10245 23C2                        C0            .byte	$C0
10246 23C3                        C0            .byte	$C0
10247 23C4                        C0            .byte	$C0
10248 23C5                        C0            .byte	$C0
10249 23C6                        C0            .byte	$C0
10250 23C7                        C0            .byte	$C0
10251 23C8                        00            .byte	0
10252 23C9                        00            .byte	0
10253 23CA                        00            .byte	0
10254                                           ! 1372  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10255 23CB                        00            .byte	0
10256 23CC                        00            .byte	0
10257 23CD                        00            .byte	0
10258 23CE                        00            .byte	0
10259 23CF                        FE            .byte	$FE
10260 23D0                        6C            .byte	$6C
10261 23D1                        6C            .byte	$6C
10262 23D2                        6C            .byte	$6C
10263 23D3                        6C            .byte	$6C
10264 23D4                        6C            .byte	$6C
10265 23D5                        6C            .byte	$6C
10266 23D6                        00            .byte	0
10267 23D7                        00            .byte	0
10268 23D8                        00            .byte	0
10269                                           ! 1373  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10270 23D9                        00            .byte	0
10271 23DA                        00            .byte	0
10272 23DB                        FE            .byte	$FE
10273 23DC                        C6            .byte	$C6
10274 23DD                        60            .byte	$60
10275 23DE                        30            .byte	$30
10276 23DF                        18            .byte	$18
10277 23E0                        30            .byte	$30
10278 23E1                        60            .byte	$60
10279 23E2                        C6            .byte	$C6
10280 23E3                        FE            .byte	$FE
10281 23E4                        00            .byte	0
10282 23E5                        00            .byte	0
10283 23E6                        00            .byte	0
10284                                           ! 1374  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10285 23E7                        00            .byte	0
10286 23E8                        00            .byte	0
10287 23E9                        00            .byte	0
10288 23EA                        00            .byte	0
10289 23EB                        00            .byte	0
10290 23EC                        7E            .byte	$7E
10291 23ED                        D8            .byte	$D8
10292 23EE                        D8            .byte	$D8
10293 23EF                        D8            .byte	$D8
10294 23F0                        D8            .byte	$D8
10295 23F1                        70            .byte	$70
10296 23F2                        00            .byte	0
10297 23F3                        00            .byte	0
10298 23F4                        00            .byte	0
10299                                           ! 1375  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10300 23F5                        00            .byte	0
10301 23F6                        00            .byte	0
10302 23F7                        00            .byte	0
10303 23F8                        00            .byte	0
10304 23F9                        66            .byte	$66
10305 23FA                        66            .byte	$66
10306 23FB                        66            .byte	$66
10307 23FC                        66            .byte	$66
10308 23FD                        7C            .byte	$7C
10309 23FE                        60            .byte	$60
10310 23FF                        60            .byte	$60
10311 2400                        C0            .byte	$C0
10312 2401                        00            .byte	0
10313 2402                        00            .byte	0
10314                                           ! 1376  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10315 2403                        00            .byte	0
10316 2404                        00            .byte	0
10317 2405                        00            .byte	0
10318 2406                        00            .byte	0
10319 2407                        76            .byte	$76
10320 2408                        DC            .byte	$DC
10321 2409                        18            .byte	$18
10322 240A                        18            .byte	$18
10323 240B                        18            .byte	$18
10324 240C                        18            .byte	$18
10325 240D                        18            .byte	$18
10326 240E                        00            .byte	0
10327 240F                        00            .byte	0
10328 2410                        00            .byte	0
10329                                           ! 1377  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10330 2411                        00            .byte	0
10331 2412                        00            .byte	0
10332 2413                        7E            .byte	$7E
10333 2414                        18            .byte	$18
10334 2415                        3C            .byte	$3C
10335 2416                        66            .byte	$66
10336 2417                        66            .byte	$66
10337 2418                        66            .byte	$66
10338 2419                        3C            .byte	$3C
10339 241A                        18            .byte	$18
10340 241B                        7E            .byte	$7E
10341 241C                        00            .byte	0
10342 241D                        00            .byte	0
10343 241E                        00            .byte	0
10344                                           ! 1378  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10345 241F                        00            .byte	0
10346 2420                        00            .byte	0
10347 2421                        38            .byte	$38
10348 2422                        6C            .byte	$6C
10349 2423                        C6            .byte	$C6
10350 2424                        C6            .byte	$C6
10351 2425                        FE            .byte	$FE
10352 2426                        C6            .byte	$C6
10353 2427                        C6            .byte	$C6
10354 2428                        6C            .byte	$6C
10355 2429                        38            .byte	$38
10356 242A                        00            .byte	0
10357 242B                        00            .byte	0
10358 242C                        00            .byte	0
10359                                           ! 1379  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10360 242D                        00            .byte	0
10361 242E                        00            .byte	0
10362 242F                        38            .byte	$38
10363 2430                        6C            .byte	$6C
10364 2431                        C6            .byte	$C6
10365 2432                        C6            .byte	$C6
10366 2433                        C6            .byte	$C6
10367 2434                        6C            .byte	$6C
10368 2435                        6C            .byte	$6C
10369 2436                        6C            .byte	$6C
10370 2437                        EE            .byte	$EE
10371 2438                        00            .byte	0
10372 2439                        00            .byte	0
10373 243A                        00            .byte	0
10374                                           ! 1380  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10375 243B                        00            .byte	0
10376 243C                        00            .byte	0
10377 243D                        1E            .byte	$1E
10378 243E                        30            .byte	$30
10379 243F                        18            .byte	$18
10380 2440                        0C            .byte	$C
10381 2441                        3E            .byte	$3E
10382 2442                        66            .byte	$66
10383 2443                        66            .byte	$66
10384 2444                        66            .byte	$66
10385 2445                        3C            .byte	$3C
10386 2446                        00            .byte	0
10387 2447                        00            .byte	0
10388 2448                        00            .byte	0
10389                                           ! 1381  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10390 2449                        00            .byte	0
10391 244A                        00            .byte	0
10392 244B                        00            .byte	0
10393 244C                        00            .byte	0
10394 244D                        00            .byte	0
10395 244E                        7E            .byte	$7E
10396 244F                        DB            .byte	$DB
10397 2450                        DB            .byte	$DB
10398 2451                        7E            .byte	$7E
10399 2452                        00            .byte	0
10400 2453                        00            .byte	0
10401 2454                        00            .byte	0
10402 2455                        00            .byte	0
10403 2456                        00            .byte	0
10404                                           ! 1382  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10405 2457                        00            .byte	0
10406 2458                        00            .byte	0
10407 2459                        03            .byte	3
10408 245A                        06            .byte	6
10409 245B                        7E            .byte	$7E
10410 245C                        DB            .byte	$DB
10411 245D                        DB            .byte	$DB
10412 245E                        F3            .byte	$F3
10413 245F                        7E            .byte	$7E
10414 2460                        60            .byte	$60
10415 2461                        C0            .byte	$C0
10416 2462                        00            .byte	0
10417 2463                        00            .byte	0
10418 2464                        00            .byte	0
10419                                           ! 1383  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10420 2465                        00            .byte	0
10421 2466                        00            .byte	0
10422 2467                        1C            .byte	$1C
10423 2468                        30            .byte	$30
10424 2469                        60            .byte	$60
10425 246A                        60            .byte	$60
10426 246B                        7C            .byte	$7C
10427 246C                        60            .byte	$60
10428 246D                        60            .byte	$60
10429 246E                        30            .byte	$30
10430 246F                        1C            .byte	$1C
10431 2470                        00            .byte	0
10432 2471                        00            .byte	0
10433 2472                        00            .byte	0
10434                                           ! 1384  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10435 2473                        00            .byte	0
10436 2474                        00            .byte	0
10437 2475                        00            .byte	0
10438 2476                        7C            .byte	$7C
10439 2477                        C6            .byte	$C6
10440 2478                        C6            .byte	$C6
10441 2479                        C6            .byte	$C6
10442 247A                        C6            .byte	$C6
10443 247B                        C6            .byte	$C6
10444 247C                        C6            .byte	$C6
10445 247D                        C6            .byte	$C6
10446 247E                        00            .byte	0
10447 247F                        00            .byte	0
10448 2480                        00            .byte	0
10449                                           ! 1385  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10450 2481                        00            .byte	0
10451 2482                        00            .byte	0
10452 2483                        00            .byte	0
10453 2484                        FE            .byte	$FE
10454 2485                        00            .byte	0
10455 2486                        00            .byte	0
10456 2487                        FE            .byte	$FE
10457 2488                        00            .byte	0
10458 2489                        00            .byte	0
10459 248A                        FE            .byte	$FE
10460 248B                        00            .byte	0
10461 248C                        00            .byte	0
10462 248D                        00            .byte	0
10463 248E                        00            .byte	0
10464                                           ! 1386  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10465 248F                        00            .byte	0
10466 2490                        00            .byte	0
10467 2491                        00            .byte	0
10468 2492                        18            .byte	$18
10469 2493                        18            .byte	$18
10470 2494                        7E            .byte	$7E
10471 2495                        18            .byte	$18
10472 2496                        18            .byte	$18
10473 2497                        00            .byte	0
10474 2498                        00            .byte	0
10475 2499                        FF            .byte	$FF
10476 249A                        00            .byte	0
10477 249B                        00            .byte	0
10478 249C                        00            .byte	0
10479                                           ! 1387  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10480 249D                        00            .byte	0
10481 249E                        00            .byte	0
10482 249F                        30            .byte	$30
10483 24A0                        18            .byte	$18
10484 24A1                        0C            .byte	$C
10485 24A2                        06            .byte	6
10486 24A3                        0C            .byte	$C
10487 24A4                        18            .byte	$18
10488 24A5                        30            .byte	$30
10489 24A6                        00            .byte	0
10490 24A7                        7E            .byte	$7E
10491 24A8                        00            .byte	0
10492 24A9                        00            .byte	0
10493 24AA                        00            .byte	0
10494                                           ! 1388  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10495 24AB                        00            .byte	0
10496 24AC                        00            .byte	0
10497 24AD                        0C            .byte	$C
10498 24AE                        18            .byte	$18
10499 24AF                        30            .byte	$30
10500 24B0                        60            .byte	$60
10501 24B1                        30            .byte	$30
10502 24B2                        18            .byte	$18
10503 24B3                        0C            .byte	$C
10504 24B4                        00            .byte	0
10505 24B5                        7E            .byte	$7E
10506 24B6                        00            .byte	0
10507 24B7                        00            .byte	0
10508 24B8                        00            .byte	0
10509                                           ! 1389  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10510 24B9                        00            .byte	0
10511 24BA                        00            .byte	0
10512 24BB                        0E            .byte	$E
10513 24BC                        1B            .byte	$1B
10514 24BD                        1B            .byte	$1B
10515 24BE                        18            .byte	$18
10516 24BF                        18            .byte	$18
10517 24C0                        18            .byte	$18
10518 24C1                        18            .byte	$18
10519 24C2                        18            .byte	$18
10520 24C3                        18            .byte	$18
10521 24C4                        18            .byte	$18
10522 24C5                        18            .byte	$18
10523 24C6                        18            .byte	$18
10524                                           ! 1390  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10525 24C7                        18            .byte	$18
10526 24C8                        18            .byte	$18
10527 24C9                        18            .byte	$18
10528 24CA                        18            .byte	$18
10529 24CB                        18            .byte	$18
10530 24CC                        18            .byte	$18
10531 24CD                        18            .byte	$18
10532 24CE                        18            .byte	$18
10533 24CF                        D8            .byte	$D8
10534 24D0                        D8            .byte	$D8
10535 24D1                        70            .byte	$70
10536 24D2                        00            .byte	0
10537 24D3                        00            .byte	0
10538 24D4                        00            .byte	0
10539                                           ! 1391  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x
10540 24D5                        00            .byte	0
10541 24D6                        00            .byte	0
10542 24D7                        00            .byte	0
10543 24D8                        18            .byte	$18
10544 24D9                        18            .byte	$18
10545 24DA                        00            .byte	0
10546 24DB                        7E            .byte	$7E
10547 24DC                        00            .byte	0
10548 24DD                        18            .byte	$18
10549 24DE                        18            .byte	$18
10550                                           ! 1391 00, 0x00, 0x00, 0x00,
10551 24DF                        00            .byte	0
10552 24E0                        00            .byte	0
10553 24E1                        00            .byte	0
10554 24E2                        00            .byte	0
10555                                           ! 1392  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10556 24E3                        00            .byte	0
10557 24E4                        00            .byte	0
10558 24E5                        00            .byte	0
10559 24E6                        00            .byte	0
10560 24E7                        76            .byte	$76
10561 24E8                        DC            .byte	$DC
10562 24E9                        00            .byte	0
10563 24EA                        76            .byte	$76
10564 24EB                        DC            .byte	$DC
10565 24EC                        00            .byte	0
10566 24ED                        00            .byte	0
10567 24EE                        00            .byte	0
10568 24EF                        00            .byte	0
10569 24F0                        00            .byte	0
10570                                           ! 1393  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10571 24F1                        00            .byte	0
10572 24F2                        38            .byte	$38
10573 24F3                        6C            .byte	$6C
10574 24F4                        6C            .byte	$6C
10575 24F5                        38            .byte	$38
10576 24F6                        00            .byte	0
10577 24F7                        00            .byte	0
10578 24F8                        00            .byte	0
10579 24F9                        00            .byte	0
10580 24FA                        00            .byte	0
10581 24FB                        00            .byte	0
10582 24FC                        00            .byte	0
10583 24FD                        00            .byte	0
10584 24FE                        00            .byte	0
10585                                           ! 1394  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10586 24FF                        00            .byte	0
10587 2500                        00            .byte	0
10588 2501                        00            .byte	0
10589 2502                        00            .byte	0
10590 2503                        00            .byte	0
10591 2504                        00            .byte	0
10592 2505                        18            .byte	$18
10593 2506                        18            .byte	$18
10594 2507                        00            .byte	0
10595 2508                        00            .byte	0
10596 2509                        00            .byte	0
10597 250A                        00            .byte	0
10598 250B                        00            .byte	0
10599 250C                        00            .byte	0
10600                                           ! 1395  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10601 250D                        00            .byte	0
10602 250E                        00            .byte	0
10603 250F                        00            .byte	0
10604 2510                        00            .byte	0
10605 2511                        00            .byte	0
10606 2512                        00            .byte	0
10607 2513                        00            .byte	0
10608 2514                        18            .byte	$18
10609 2515                        00            .byte	0
10610 2516                        00            .byte	0
10611 2517                        00            .byte	0
10612 2518                        00            .byte	0
10613 2519                        00            .byte	0
10614 251A                        00            .byte	0
10615                                           ! 1396  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10616 251B                        00            .byte	0
10617 251C                        0F            .byte	$F
10618 251D                        0C            .byte	$C
10619 251E                        0C            .byte	$C
10620 251F                        0C            .byte	$C
10621 2520                        0C            .byte	$C
10622 2521                        0C            .byte	$C
10623 2522                        EC            .byte	$EC
10624 2523                        6C            .byte	$6C
10625 2524                        3C            .byte	$3C
10626 2525                        1C            .byte	$1C
10627 2526                        00            .byte	0
10628 2527                        00            .byte	0
10629 2528                        00            .byte	0
10630                                           ! 1397  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10631 2529                        00            .byte	0
10632 252A                        D8            .byte	$D8
10633 252B                        6C            .byte	$6C
10634 252C                        6C            .byte	$6C
10635 252D                        6C            .byte	$6C
10636 252E                        6C            .byte	$6C
10637 252F                        6C            .byte	$6C
10638 2530                        00            .byte	0
10639 2531                        00            .byte	0
10640 2532                        00            .byte	0
10641 2533                        00            .byte	0
10642 2534                        00            .byte	0
10643 2535                        00            .byte	0
10644 2536                        00            .byte	0
10645                                           ! 1398  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10646 2537                        00            .byte	0
10647 2538                        70            .byte	$70
10648 2539                        D8            .byte	$D8
10649 253A                        30            .byte	$30
10650 253B                        60            .byte	$60
10651 253C                        C8            .byte	$C8
10652 253D                        F8            .byte	$F8
10653 253E                        00            .byte	0
10654 253F                        00            .byte	0
10655 2540                        00            .byte	0
10656 2541                        00            .byte	0
10657 2542                        00            .byte	0
10658 2543                        00            .byte	0
10659 2544                        00            .byte	0
10660                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10661 2545                        00            .byte	0
10662 2546                        00            .byte	0
10663 2547                        00            .byte	0
10664 2548                        00            .byte	0
10665 2549                        7C            .byte	$7C
10666 254A                        7C            .byte	$7C
10667 254B                        7C            .byte	$7C
10668 254C                        7C            .byte	$7C
10669 254D                        7C            .byte	$7C
10670 254E                        7C            .byte	$7C
10671 254F                        00            .byte	0
10672 2550                        00            .byte	0
10673 2551                        00            .byte	0
10674 2552                        00            .byte	0
10675                                           ! 1400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10676 2553                        00            .byte	0
10677 2554                        00            .byte	0
10678 2555                        00            .byte	0
10679 2556                        00            .byte	0
10680 2557                        00            .byte	0
10681 2558                        00            .byte	0
10682 2559                        00            .byte	0
10683 255A                        00            .byte	0
10684 255B                        00            .byte	0
10685 255C                        00            .byte	0
10686 255D                        00            .byte	0
10687 255E                        00            .byte	0
10688 255F                        00            .byte	0
10689                                           ! 1401 };
10690 2560                        00            .byte	0
10691                                           !BCC_EOS
10692                                           ! 1402 static Bit8u vgafont16[256*16]=
10693                                           ! 1403 {
10694                       00002561            _vgafont16:
10695                                           ! 1404  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10696 2561                        00            .byte	0
10697 2562                        00            .byte	0
10698 2563                        00            .byte	0
10699 2564                        00            .byte	0
10700 2565                        00            .byte	0
10701 2566                        00            .byte	0
10702 2567                        00            .byte	0
10703 2568                        00            .byte	0
10704 2569                        00            .byte	0
10705 256A                        00            .byte	0
10706 256B                        00            .byte	0
10707 256C                        00            .byte	0
10708 256D                        00            .byte	0
10709 256E                        00            .byte	0
10710 256F                        00            .byte	0
10711 2570                        00            .byte	0
10712                                           ! 1405  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10713 2571                        00            .byte	0
10714 2572                        00            .byte	0
10715 2573                        7E            .byte	$7E
10716 2574                        81            .byte	$81
10717 2575                        A5            .byte	$A5
10718 2576                        81            .byte	$81
10719 2577                        81            .byte	$81
10720 2578                        BD            .byte	$BD
10721 2579                        99            .byte	$99
10722 257A                        81            .byte	$81
10723 257B                        81            .byte	$81
10724 257C                        7E            .byte	$7E
10725 257D                        00            .byte	0
10726 257E                        00            .byte	0
10727 257F                        00            .byte	0
10728 2580                        00            .byte	0
10729                                           ! 1406  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10730 2581                        00            .byte	0
10731 2582                        00            .byte	0
10732 2583                        7E            .byte	$7E
10733 2584                        FF            .byte	$FF
10734 2585                        DB            .byte	$DB
10735 2586                        FF            .byte	$FF
10736 2587                        FF            .byte	$FF
10737 2588                        C3            .byte	$C3
10738 2589                        E7            .byte	$E7
10739 258A                        FF            .byte	$FF
10740 258B                        FF            .byte	$FF
10741 258C                        7E            .byte	$7E
10742 258D                        00            .byte	0
10743 258E                        00            .byte	0
10744 258F                        00            .byte	0
10745 2590                        00            .byte	0
10746                                           ! 1407  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10747 2591                        00            .byte	0
10748 2592                        00            .byte	0
10749 2593                        00            .byte	0
10750 2594                        00            .byte	0
10751 2595                        6C            .byte	$6C
10752 2596                        FE            .byte	$FE
10753 2597                        FE            .byte	$FE
10754 2598                        FE            .byte	$FE
10755 2599                        FE            .byte	$FE
10756 259A                        7C            .byte	$7C
10757 259B                        38            .byte	$38
10758 259C                        10            .byte	$10
10759 259D                        00            .byte	0
10760 259E                        00            .byte	0
10761 259F                        00            .byte	0
10762 25A0                        00            .byte	0
10763                                           ! 1408  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10764 25A1                        00            .byte	0
10765 25A2                        00            .byte	0
10766 25A3                        00            .byte	0
10767 25A4                        00            .byte	0
10768 25A5                        10            .byte	$10
10769 25A6                        38            .byte	$38
10770 25A7                        7C            .byte	$7C
10771 25A8                        FE            .byte	$FE
10772 25A9                        7C            .byte	$7C
10773 25AA                        38            .byte	$38
10774 25AB                        10            .byte	$10
10775 25AC                        00            .byte	0
10776 25AD                        00            .byte	0
10777 25AE                        00            .byte	0
10778 25AF                        00            .byte	0
10779 25B0                        00            .byte	0
10780                                           ! 1409  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10781 25B1                        00            .byte	0
10782 25B2                        00            .byte	0
10783 25B3                        00            .byte	0
10784 25B4                        18            .byte	$18
10785 25B5                        3C            .byte	$3C
10786 25B6                        3C            .byte	$3C
10787 25B7                        E7            .byte	$E7
10788 25B8                        E7            .byte	$E7
10789 25B9                        E7            .byte	$E7
10790 25BA                        18            .byte	$18
10791 25BB                        18            .byte	$18
10792 25BC                        3C            .byte	$3C
10793 25BD                        00            .byte	0
10794 25BE                        00            .byte	0
10795 25BF                        00            .byte	0
10796 25C0                        00            .byte	0
10797                                           ! 1410  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10798 25C1                        00            .byte	0
10799 25C2                        00            .byte	0
10800 25C3                        00            .byte	0
10801 25C4                        18            .byte	$18
10802 25C5                        3C            .byte	$3C
10803 25C6                        7E            .byte	$7E
10804 25C7                        FF            .byte	$FF
10805 25C8                        FF            .byte	$FF
10806 25C9                        7E            .byte	$7E
10807 25CA                        18            .byte	$18
10808 25CB                        18            .byte	$18
10809 25CC                        3C            .byte	$3C
10810 25CD                        00            .byte	0
10811 25CE                        00            .byte	0
10812 25CF                        00            .byte	0
10813 25D0                        00            .byte	0
10814                                           ! 1411  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10815 25D1                        00            .byte	0
10816 25D2                        00            .byte	0
10817 25D3                        00            .byte	0
10818 25D4                        00            .byte	0
10819 25D5                        00            .byte	0
10820 25D6                        00            .byte	0
10821 25D7                        18            .byte	$18
10822 25D8                        3C            .byte	$3C
10823 25D9                        3C            .byte	$3C
10824 25DA                        18            .byte	$18
10825 25DB                        00            .byte	0
10826 25DC                        00            .byte	0
10827 25DD                        00            .byte	0
10828 25DE                        00            .byte	0
10829 25DF                        00            .byte	0
10830 25E0                        00            .byte	0
10831                                           ! 1412  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10832 25E1                        FF            .byte	$FF
10833 25E2                        FF            .byte	$FF
10834 25E3                        FF            .byte	$FF
10835 25E4                        FF            .byte	$FF
10836 25E5                        FF            .byte	$FF
10837 25E6                        FF            .byte	$FF
10838 25E7                        E7            .byte	$E7
10839 25E8                        C3            .byte	$C3
10840 25E9                        C3            .byte	$C3
10841 25EA                        E7            .byte	$E7
10842 25EB                        FF            .byte	$FF
10843 25EC                        FF            .byte	$FF
10844 25ED                        FF            .byte	$FF
10845 25EE                        FF            .byte	$FF
10846 25EF                        FF            .byte	$FF
10847 25F0                        FF            .byte	$FF
10848                                           ! 1413  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10849 25F1                        00            .byte	0
10850 25F2                        00            .byte	0
10851 25F3                        00            .byte	0
10852 25F4                        00            .byte	0
10853 25F5                        00            .byte	0
10854 25F6                        3C            .byte	$3C
10855 25F7                        66            .byte	$66
10856 25F8                        42            .byte	$42
10857 25F9                        42            .byte	$42
10858 25FA                        66            .byte	$66
10859 25FB                        3C            .byte	$3C
10860 25FC                        00            .byte	0
10861 25FD                        00            .byte	0
10862 25FE                        00            .byte	0
10863 25FF                        00            .byte	0
10864 2600                        00            .byte	0
10865                                           ! 1414  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10866 2601                        FF            .byte	$FF
10867 2602                        FF            .byte	$FF
10868 2603                        FF            .byte	$FF
10869 2604                        FF            .byte	$FF
10870 2605                        FF            .byte	$FF
10871 2606                        C3            .byte	$C3
10872 2607                        99            .byte	$99
10873 2608                        BD            .byte	$BD
10874 2609                        BD            .byte	$BD
10875 260A                        99            .byte	$99
10876 260B                        C3            .byte	$C3
10877 260C                        FF            .byte	$FF
10878 260D                        FF            .byte	$FF
10879 260E                        FF            .byte	$FF
10880 260F                        FF            .byte	$FF
10881 2610                        FF            .byte	$FF
10882                                           ! 1415  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10883 2611                        00            .byte	0
10884 2612                        00            .byte	0
10885 2613                        1E            .byte	$1E
10886 2614                        0E            .byte	$E
10887 2615                        1A            .byte	$1A
10888 2616                        32            .byte	$32
10889 2617                        78            .byte	$78
10890 2618                        CC            .byte	$CC
10891 2619                        CC            .byte	$CC
10892 261A                        CC            .byte	$CC
10893 261B                        CC            .byte	$CC
10894 261C                        78            .byte	$78
10895 261D                        00            .byte	0
10896 261E                        00            .byte	0
10897 261F                        00            .byte	0
10898 2620                        00            .byte	0
10899                                           ! 1416  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 
10900 2621                        00            .byte	0
10901 2622                        00            .byte	0
10902 2623                        3C            .byte	$3C
10903 2624                        66            .byte	$66
10904 2625                        66            .byte	$66
10905 2626                        66            .byte	$66
10906 2627                        66            .byte	$66
10907 2628                        3C            .byte	$3C
10908 2629                        18            .byte	$18
10909 262A                        7E            .byte	$7E
10910                                           ! 1416 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10911 262B                        18            .byte	$18
10912 262C                        18            .byte	$18
10913 262D                        00            .byte	0
10914 262E                        00            .byte	0
10915 262F                        00            .byte	0
10916 2630                        00            .byte	0
10917                                           ! 1417  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10918 2631                        00            .byte	0
10919 2632                        00            .byte	0
10920 2633                        3F            .byte	$3F
10921 2634                        33            .byte	$33
10922 2635                        3F            .byte	$3F
10923 2636                        30            .byte	$30
10924 2637                        30            .byte	$30
10925 2638                        30            .byte	$30
10926 2639                        30            .byte	$30
10927 263A                        70            .byte	$70
10928 263B                        F0            .byte	$F0
10929 263C                        E0            .byte	$E0
10930 263D                        00            .byte	0
10931 263E                        00            .byte	0
10932 263F                        00            .byte	0
10933 2640                        00            .byte	0
10934                                           ! 1418  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10935 2641                        00            .byte	0
10936 2642                        00            .byte	0
10937 2643                        7F            .byte	$7F
10938 2644                        63            .byte	$63
10939 2645                        7F            .byte	$7F
10940 2646                        63            .byte	$63
10941 2647                        63            .byte	$63
10942 2648                        63            .byte	$63
10943 2649                        63            .byte	$63
10944 264A                        67            .byte	$67
10945 264B                        E7            .byte	$E7
10946 264C                        E6            .byte	$E6
10947 264D                        C0            .byte	$C0
10948 264E                        00            .byte	0
10949 264F                        00            .byte	0
10950 2650                        00            .byte	0
10951                                           ! 1419  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10952 2651                        00            .byte	0
10953 2652                        00            .byte	0
10954 2653                        00            .byte	0
10955 2654                        18            .byte	$18
10956 2655                        18            .byte	$18
10957 2656                        DB            .byte	$DB
10958 2657                        3C            .byte	$3C
10959 2658                        E7            .byte	$E7
10960 2659                        3C            .byte	$3C
10961 265A                        DB            .byte	$DB
10962 265B                        18            .byte	$18
10963 265C                        18            .byte	$18
10964 265D                        00            .byte	0
10965 265E                        00            .byte	0
10966 265F                        00            .byte	0
10967 2660                        00            .byte	0
10968                                           ! 1420  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10969 2661                        00            .byte	0
10970 2662                        80            .byte	$80
10971 2663                        C0            .byte	$C0
10972 2664                        E0            .byte	$E0
10973 2665                        F0            .byte	$F0
10974 2666                        F8            .byte	$F8
10975 2667                        FE            .byte	$FE
10976 2668                        F8            .byte	$F8
10977 2669                        F0            .byte	$F0
10978 266A                        E0            .byte	$E0
10979 266B                        C0            .byte	$C0
10980 266C                        80            .byte	$80
10981 266D                        00            .byte	0
10982 266E                        00            .byte	0
10983 266F                        00            .byte	0
10984 2670                        00            .byte	0
10985                                           ! 1421  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10986 2671                        00            .byte	0
10987 2672                        02            .byte	2
10988 2673                        06            .byte	6
10989 2674                        0E            .byte	$E
10990 2675                        1E            .byte	$1E
10991 2676                        3E            .byte	$3E
10992 2677                        FE            .byte	$FE
10993 2678                        3E            .byte	$3E
10994 2679                        1E            .byte	$1E
10995 267A                        0E            .byte	$E
10996 267B                        06            .byte	6
10997 267C                        02            .byte	2
10998 267D                        00            .byte	0
10999 267E                        00            .byte	0
11000 267F                        00            .byte	0
11001 2680                        00            .byte	0
11002                                           ! 1422  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11003 2681                        00            .byte	0
11004 2682                        00            .byte	0
11005 2683                        18            .byte	$18
11006 2684                        3C            .byte	$3C
11007 2685                        7E            .byte	$7E
11008 2686                        18            .byte	$18
11009 2687                        18            .byte	$18
11010 2688                        18            .byte	$18
11011 2689                        7E            .byte	$7E
11012 268A                        3C            .byte	$3C
11013 268B                        18            .byte	$18
11014 268C                        00            .byte	0
11015 268D                        00            .byte	0
11016 268E                        00            .byte	0
11017 268F                        00            .byte	0
11018 2690                        00            .byte	0
11019                                           ! 1423  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11020 2691                        00            .byte	0
11021 2692                        00            .byte	0
11022 2693                        66            .byte	$66
11023 2694                        66            .byte	$66
11024 2695                        66            .byte	$66
11025 2696                        66            .byte	$66
11026 2697                        66            .byte	$66
11027 2698                        66            .byte	$66
11028 2699                        66            .byte	$66
11029 269A                        00            .byte	0
11030 269B                        66            .byte	$66
11031 269C                        66            .byte	$66
11032 269D                        00            .byte	0
11033 269E                        00            .byte	0
11034 269F                        00            .byte	0
11035 26A0                        00            .byte	0
11036                                           ! 1424  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11037 26A1                        00            .byte	0
11038 26A2                        00            .byte	0
11039 26A3                        7F            .byte	$7F
11040 26A4                        DB            .byte	$DB
11041 26A5                        DB            .byte	$DB
11042 26A6                        DB            .byte	$DB
11043 26A7                        7B            .byte	$7B
11044 26A8                        1B            .byte	$1B
11045 26A9                        1B            .byte	$1B
11046 26AA                        1B            .byte	$1B
11047 26AB                        1B            .byte	$1B
11048 26AC                        1B            .byte	$1B
11049 26AD                        00            .byte	0
11050 26AE                        00            .byte	0
11051 26AF                        00            .byte	0
11052 26B0                        00            .byte	0
11053                                           ! 1425  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11054 26B1                        00            .byte	0
11055 26B2                        7C            .byte	$7C
11056 26B3                        C6            .byte	$C6
11057 26B4                        60            .byte	$60
11058 26B5                        38            .byte	$38
11059 26B6                        6C            .byte	$6C
11060 26B7                        C6            .byte	$C6
11061 26B8                        C6            .byte	$C6
11062 26B9                        6C            .byte	$6C
11063 26BA                        38            .byte	$38
11064 26BB                        0C            .byte	$C
11065 26BC                        C6            .byte	$C6
11066 26BD                        7C            .byte	$7C
11067 26BE                        00            .byte	0
11068 26BF                        00            .byte	0
11069 26C0                        00            .byte	0
11070                                           ! 1426  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11071 26C1                        00            .byte	0
11072 26C2                        00            .byte	0
11073 26C3                        00            .byte	0
11074 26C4                        00            .byte	0
11075 26C5                        00            .byte	0
11076 26C6                        00            .byte	0
11077 26C7                        00            .byte	0
11078 26C8                        00            .byte	0
11079 26C9                        FE            .byte	$FE
11080 26CA                        FE            .byte	$FE
11081 26CB                        FE            .byte	$FE
11082 26CC                        FE            .byte	$FE
11083 26CD                        00            .byte	0
11084 26CE                        00            .byte	0
11085 26CF                        00            .byte	0
11086 26D0                        00            .byte	0
11087                                           ! 1427  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11088 26D1                        00            .byte	0
11089 26D2                        00            .byte	0
11090 26D3                        18            .byte	$18
11091 26D4                        3C            .byte	$3C
11092 26D5                        7E            .byte	$7E
11093 26D6                        18            .byte	$18
11094 26D7                        18            .byte	$18
11095 26D8                        18            .byte	$18
11096 26D9                        7E            .byte	$7E
11097 26DA                        3C            .byte	$3C
11098 26DB                        18            .byte	$18
11099 26DC                        7E            .byte	$7E
11100 26DD                        00            .byte	0
11101 26DE                        00            .byte	0
11102 26DF                        00            .byte	0
11103 26E0                        00            .byte	0
11104                                           ! 1428  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11105 26E1                        00            .byte	0
11106 26E2                        00            .byte	0
11107 26E3                        18            .byte	$18
11108 26E4                        3C            .byte	$3C
11109 26E5                        7E            .byte	$7E
11110 26E6                        18            .byte	$18
11111 26E7                        18            .byte	$18
11112 26E8                        18            .byte	$18
11113 26E9                        18            .byte	$18
11114 26EA                        18            .byte	$18
11115 26EB                        18            .byte	$18
11116 26EC                        18            .byte	$18
11117 26ED                        00            .byte	0
11118 26EE                        00            .byte	0
11119 26EF                        00            .byte	0
11120 26F0                        00            .byte	0
11121                                           ! 1429  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11122 26F1                        00            .byte	0
11123 26F2                        00            .byte	0
11124 26F3                        18            .byte	$18
11125 26F4                        18            .byte	$18
11126 26F5                        18            .byte	$18
11127 26F6                        18            .byte	$18
11128 26F7                        18            .byte	$18
11129 26F8                        18            .byte	$18
11130 26F9                        18            .byte	$18
11131 26FA                        7E            .byte	$7E
11132 26FB                        3C            .byte	$3C
11133 26FC                        18            .byte	$18
11134 26FD                        00            .byte	0
11135 26FE                        00            .byte	0
11136 26FF                        00            .byte	0
11137 2700                        00            .byte	0
11138                                           ! 1430  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11139 2701                        00            .byte	0
11140 2702                        00            .byte	0
11141 2703                        00            .byte	0
11142 2704                        00            .byte	0
11143 2705                        00            .byte	0
11144 2706                        18            .byte	$18
11145 2707                        0C            .byte	$C
11146 2708                        FE            .byte	$FE
11147 2709                        0C            .byte	$C
11148 270A                        18            .byte	$18
11149 270B                        00            .byte	0
11150 270C                        00            .byte	0
11151 270D                        00            .byte	0
11152 270E                        00            .byte	0
11153 270F                        00            .byte	0
11154 2710                        00            .byte	0
11155                                           ! 1431  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11156 2711                        00            .byte	0
11157 2712                        00            .byte	0
11158 2713                        00            .byte	0
11159 2714                        00            .byte	0
11160 2715                        00            .byte	0
11161 2716                        30            .byte	$30
11162 2717                        60            .byte	$60
11163 2718                        FE            .byte	$FE
11164 2719                        60            .byte	$60
11165 271A                        30            .byte	$30
11166 271B                        00            .byte	0
11167 271C                        00            .byte	0
11168 271D                        00            .byte	0
11169 271E                        00            .byte	0
11170 271F                        00            .byte	0
11171 2720                        00            .byte	0
11172                                           ! 1432  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11173 2721                        00            .byte	0
11174 2722                        00            .byte	0
11175 2723                        00            .byte	0
11176 2724                        00            .byte	0
11177 2725                        00            .byte	0
11178 2726                        00            .byte	0
11179 2727                        C0            .byte	$C0
11180 2728                        C0            .byte	$C0
11181 2729                        C0            .byte	$C0
11182 272A                        FE            .byte	$FE
11183 272B                        00            .byte	0
11184 272C                        00            .byte	0
11185 272D                        00            .byte	0
11186 272E                        00            .byte	0
11187 272F                        00            .byte	0
11188 2730                        00            .byte	0
11189                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11190 2731                        00            .byte	0
11191 2732                        00            .byte	0
11192 2733                        00            .byte	0
11193 2734                        00            .byte	0
11194 2735                        00            .byte	0
11195 2736                        24            .byte	$24
11196 2737                        66            .byte	$66
11197 2738                        FF            .byte	$FF
11198 2739                        66            .byte	$66
11199 273A                        24            .byte	$24
11200 273B                        00            .byte	0
11201 273C                        00            .byte	0
11202 273D                        00            .byte	0
11203 273E                        00            .byte	0
11204 273F                        00            .byte	0
11205 2740                        00            .byte	0
11206                                           ! 1434  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11207 2741                        00            .byte	0
11208 2742                        00            .byte	0
11209 2743                        00            .byte	0
11210 2744                        00            .byte	0
11211 2745                        10            .byte	$10
11212 2746                        38            .byte	$38
11213 2747                        38            .byte	$38
11214 2748                        7C            .byte	$7C
11215 2749                        7C            .byte	$7C
11216 274A                        FE            .byte	$FE
11217 274B                        FE            .byte	$FE
11218 274C                        00            .byte	0
11219 274D                        00            .byte	0
11220 274E                        00            .byte	0
11221 274F                        00            .byte	0
11222 2750                        00            .byte	0
11223                                           ! 1435  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11224 2751                        00            .byte	0
11225 2752                        00            .byte	0
11226 2753                        00            .byte	0
11227 2754                        00            .byte	0
11228 2755                        FE            .byte	$FE
11229 2756                        FE            .byte	$FE
11230 2757                        7C            .byte	$7C
11231 2758                        7C            .byte	$7C
11232 2759                        38            .byte	$38
11233 275A                        38            .byte	$38
11234 275B                        10            .byte	$10
11235 275C                        00            .byte	0
11236 275D                        00            .byte	0
11237 275E                        00            .byte	0
11238 275F                        00            .byte	0
11239 2760                        00            .byte	0
11240                                           ! 1436  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11241 2761                        00            .byte	0
11242 2762                        00            .byte	0
11243 2763                        00            .byte	0
11244 2764                        00            .byte	0
11245 2765                        00            .byte	0
11246 2766                        00            .byte	0
11247 2767                        00            .byte	0
11248 2768                        00            .byte	0
11249 2769                        00            .byte	0
11250 276A                        00            .byte	0
11251 276B                        00            .byte	0
11252 276C                        00            .byte	0
11253 276D                        00            .byte	0
11254 276E                        00            .byte	0
11255 276F                        00            .byte	0
11256 2770                        00            .byte	0
11257                                           ! 1437  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18,
11258 2771                        00            .byte	0
11259 2772                        00            .byte	0
11260 2773                        18            .byte	$18
11261 2774                        3C            .byte	$3C
11262 2775                        3C            .byte	$3C
11263 2776                        3C            .byte	$3C
11264 2777                        18            .byte	$18
11265 2778                        18            .byte	$18
11266 2779                        18            .byte	$18
11267 277A                        00            .byte	0
11268 277B                        18            .byte	$18
11269                                           ! 1437  0x00, 0x00, 0x00, 0x00,
11270 277C                        18            .byte	$18
11271 277D                        00            .byte	0
11272 277E                        00            .byte	0
11273 277F                        00            .byte	0
11274 2780                        00            .byte	0
11275                                           ! 1438  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11276 2781                        00            .byte	0
11277 2782                        66            .byte	$66
11278 2783                        66            .byte	$66
11279 2784                        66            .byte	$66
11280 2785                        24            .byte	$24
11281 2786                        00            .byte	0
11282 2787                        00            .byte	0
11283 2788                        00            .byte	0
11284 2789                        00            .byte	0
11285 278A                        00            .byte	0
11286 278B                        00            .byte	0
11287 278C                        00            .byte	0
11288 278D                        00            .byte	0
11289 278E                        00            .byte	0
11290 278F                        00            .byte	0
11291 2790                        00            .byte	0
11292                                           ! 1439  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11293 2791                        00            .byte	0
11294 2792                        00            .byte	0
11295 2793                        00            .byte	0
11296 2794                        6C            .byte	$6C
11297 2795                        6C            .byte	$6C
11298 2796                        FE            .byte	$FE
11299 2797                        6C            .byte	$6C
11300 2798                        6C            .byte	$6C
11301 2799                        6C            .byte	$6C
11302 279A                        FE            .byte	$FE
11303 279B                        6C            .byte	$6C
11304 279C                        6C            .byte	$6C
11305 279D                        00            .byte	0
11306 279E                        00            .byte	0
11307 279F                        00            .byte	0
11308 27A0                        00            .byte	0
11309                                           ! 1440  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11310 27A1                        18            .byte	$18
11311 27A2                        18            .byte	$18
11312 27A3                        7C            .byte	$7C
11313 27A4                        C6            .byte	$C6
11314 27A5                        C2            .byte	$C2
11315 27A6                        C0            .byte	$C0
11316 27A7                        7C            .byte	$7C
11317 27A8                        06            .byte	6
11318 27A9                        06            .byte	6
11319 27AA                        86            .byte	$86
11320 27AB                        C6            .byte	$C6
11321 27AC                        7C            .byte	$7C
11322 27AD                        18            .byte	$18
11323 27AE                        18            .byte	$18
11324 27AF                        00            .byte	0
11325 27B0                        00            .byte	0
11326                                           ! 1441  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11327 27B1                        00            .byte	0
11328 27B2                        00            .byte	0
11329 27B3                        00            .byte	0
11330 27B4                        00            .byte	0
11331 27B5                        C2            .byte	$C2
11332 27B6                        C6            .byte	$C6
11333 27B7                        0C            .byte	$C
11334 27B8                        18            .byte	$18
11335 27B9                        30            .byte	$30
11336 27BA                        60            .byte	$60
11337 27BB                        C6            .byte	$C6
11338 27BC                        86            .byte	$86
11339 27BD                        00            .byte	0
11340 27BE                        00            .byte	0
11341 27BF                        00            .byte	0
11342 27C0                        00            .byte	0
11343                                           ! 1442  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11344 27C1                        00            .byte	0
11345 27C2                        00            .byte	0
11346 27C3                        38            .byte	$38
11347 27C4                        6C            .byte	$6C
11348 27C5                        6C            .byte	$6C
11349 27C6                        38            .byte	$38
11350 27C7                        76            .byte	$76
11351 27C8                        DC            .byte	$DC
11352 27C9                        CC            .byte	$CC
11353 27CA                        CC            .byte	$CC
11354 27CB                        CC            .byte	$CC
11355 27CC                        76            .byte	$76
11356 27CD                        00            .byte	0
11357 27CE                        00            .byte	0
11358 27CF                        00            .byte	0
11359 27D0                        00            .byte	0
11360                                           ! 1443  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11361 27D1                        00            .byte	0
11362 27D2                        30            .byte	$30
11363 27D3                        30            .byte	$30
11364 27D4                        30            .byte	$30
11365 27D5                        60            .byte	$60
11366 27D6                        00            .byte	0
11367 27D7                        00            .byte	0
11368 27D8                        00            .byte	0
11369 27D9                        00            .byte	0
11370 27DA                        00            .byte	0
11371 27DB                        00            .byte	0
11372 27DC                        00            .byte	0
11373 27DD                        00            .byte	0
11374 27DE                        00            .byte	0
11375 27DF                        00            .byte	0
11376 27E0                        00            .byte	0
11377                                           ! 1444  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11378 27E1                        00            .byte	0
11379 27E2                        00            .byte	0
11380 27E3                        0C            .byte	$C
11381 27E4                        18            .byte	$18
11382 27E5                        30            .byte	$30
11383 27E6                        30            .byte	$30
11384 27E7                        30            .byte	$30
11385 27E8                        30            .byte	$30
11386 27E9                        30            .byte	$30
11387 27EA                        30            .byte	$30
11388 27EB                        18            .byte	$18
11389 27EC                        0C            .byte	$C
11390 27ED                        00            .byte	0
11391 27EE                        00            .byte	0
11392 27EF                        00            .byte	0
11393 27F0                        00            .byte	0
11394                                           ! 1445  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11395 27F1                        00            .byte	0
11396 27F2                        00            .byte	0
11397 27F3                        30            .byte	$30
11398 27F4                        18            .byte	$18
11399 27F5                        0C            .byte	$C
11400 27F6                        0C            .byte	$C
11401 27F7                        0C            .byte	$C
11402 27F8                        0C            .byte	$C
11403 27F9                        0C            .byte	$C
11404 27FA                        0C            .byte	$C
11405 27FB                        18            .byte	$18
11406 27FC                        30            .byte	$30
11407 27FD                        00            .byte	0
11408 27FE                        00            .byte	0
11409 27FF                        00            .byte	0
11410 2800                        00            .byte	0
11411                                           ! 1446  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11412 2801                        00            .byte	0
11413 2802                        00            .byte	0
11414 2803                        00            .byte	0
11415 2804                        00            .byte	0
11416 2805                        00            .byte	0
11417 2806                        66            .byte	$66
11418 2807                        3C            .byte	$3C
11419 2808                        FF            .byte	$FF
11420 2809                        3C            .byte	$3C
11421 280A                        66            .byte	$66
11422 280B                        00            .byte	0
11423 280C                        00            .byte	0
11424 280D                        00            .byte	0
11425 280E                        00            .byte	0
11426 280F                        00            .byte	0
11427 2810                        00            .byte	0
11428                                           ! 1447  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11429 2811                        00            .byte	0
11430 2812                        00            .byte	0
11431 2813                        00            .byte	0
11432 2814                        00            .byte	0
11433 2815                        00            .byte	0
11434 2816                        18            .byte	$18
11435 2817                        18            .byte	$18
11436 2818                        7E            .byte	$7E
11437 2819                        18            .byte	$18
11438 281A                        18            .byte	$18
11439 281B                        00            .byte	0
11440 281C                        00            .byte	0
11441 281D                        00            .byte	0
11442 281E                        00            .byte	0
11443 281F                        00            .byte	0
11444 2820                        00            .byte	0
11445                                           ! 1448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11446 2821                        00            .byte	0
11447 2822                        00            .byte	0
11448 2823                        00            .byte	0
11449 2824                        00            .byte	0
11450 2825                        00            .byte	0
11451 2826                        00            .byte	0
11452 2827                        00            .byte	0
11453 2828                        00            .byte	0
11454 2829                        00            .byte	0
11455 282A                        18            .byte	$18
11456 282B                        18            .byte	$18
11457 282C                        18            .byte	$18
11458 282D                        30            .byte	$30
11459 282E                        00            .byte	0
11460 282F                        00            .byte	0
11461 2830                        00            .byte	0
11462                                           ! 1449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11463 2831                        00            .byte	0
11464 2832                        00            .byte	0
11465 2833                        00            .byte	0
11466 2834                        00            .byte	0
11467 2835                        00            .byte	0
11468 2836                        00            .byte	0
11469 2837                        00            .byte	0
11470 2838                        FE            .byte	$FE
11471 2839                        00            .byte	0
11472 283A                        00            .byte	0
11473 283B                        00            .byte	0
11474 283C                        00            .byte	0
11475 283D                        00            .byte	0
11476 283E                        00            .byte	0
11477 283F                        00            .byte	0
11478 2840                        00            .byte	0
11479                                           ! 1450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11480 2841                        00            .byte	0
11481 2842                        00            .byte	0
11482 2843                        00            .byte	0
11483 2844                        00            .byte	0
11484 2845                        00            .byte	0
11485 2846                        00            .byte	0
11486 2847                        00            .byte	0
11487 2848                        00            .byte	0
11488 2849                        00            .byte	0
11489 284A                        00            .byte	0
11490 284B                        18            .byte	$18
11491 284C                        18            .byte	$18
11492 284D                        00            .byte	0
11493 284E                        00            .byte	0
11494 284F                        00            .byte	0
11495 2850                        00            .byte	0
11496                                           ! 1451  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11497 2851                        00            .byte	0
11498 2852                        00            .byte	0
11499 2853                        00            .byte	0
11500 2854                        00            .byte	0
11501 2855                        02            .byte	2
11502 2856                        06            .byte	6
11503 2857                        0C            .byte	$C
11504 2858                        18            .byte	$18
11505 2859                        30            .byte	$30
11506 285A                        60            .byte	$60
11507 285B                        C0            .byte	$C0
11508 285C                        80            .byte	$80
11509 285D                        00            .byte	0
11510 285E                        00            .byte	0
11511 285F                        00            .byte	0
11512 2860                        00            .byte	0
11513                                           ! 1452  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11514 2861                        00            .byte	0
11515 2862                        00            .byte	0
11516 2863                        3C            .byte	$3C
11517 2864                        66            .byte	$66
11518 2865                        C3            .byte	$C3
11519 2866                        C3            .byte	$C3
11520 2867                        DB            .byte	$DB
11521 2868                        DB            .byte	$DB
11522 2869                        C3            .byte	$C3
11523 286A                        C3            .byte	$C3
11524 286B                        66            .byte	$66
11525 286C                        3C            .byte	$3C
11526 286D                        00            .byte	0
11527 286E                        00            .byte	0
11528 286F                        00            .byte	0
11529 2870                        00            .byte	0
11530                                           ! 1453  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11531 2871                        00            .byte	0
11532 2872                        00            .byte	0
11533 2873                        18            .byte	$18
11534 2874                        38            .byte	$38
11535 2875                        78            .byte	$78
11536 2876                        18            .byte	$18
11537 2877                        18            .byte	$18
11538 2878                        18            .byte	$18
11539 2879                        18            .byte	$18
11540 287A                        18            .byte	$18
11541 287B                        18            .byte	$18
11542 287C                        7E            .byte	$7E
11543 287D                        00            .byte	0
11544 287E                        00            .byte	0
11545 287F                        00            .byte	0
11546 2880                        00            .byte	0
11547                                           ! 1454  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11548 2881                        00            .byte	0
11549 2882                        00            .byte	0
11550 2883                        7C            .byte	$7C
11551 2884                        C6            .byte	$C6
11552 2885                        06            .byte	6
11553 2886                        0C            .byte	$C
11554 2887                        18            .byte	$18
11555 2888                        30            .byte	$30
11556 2889                        60            .byte	$60
11557 288A                        C0            .byte	$C0
11558 288B                        C6            .byte	$C6
11559 288C                        FE            .byte	$FE
11560 288D                        00            .byte	0
11561 288E                        00            .byte	0
11562 288F                        00            .byte	0
11563 2890                        00            .byte	0
11564                                           ! 1455  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11565 2891                        00            .byte	0
11566 2892                        00            .byte	0
11567 2893                        7C            .byte	$7C
11568 2894                        C6            .byte	$C6
11569 2895                        06            .byte	6
11570 2896                        06            .byte	6
11571 2897                        3C            .byte	$3C
11572 2898                        06            .byte	6
11573 2899                        06            .byte	6
11574 289A                        06            .byte	6
11575 289B                        C6            .byte	$C6
11576 289C                        7C            .byte	$7C
11577 289D                        00            .byte	0
11578 289E                        00            .byte	0
11579 289F                        00            .byte	0
11580 28A0                        00            .byte	0
11581                                           ! 1456  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11582 28A1                        00            .byte	0
11583 28A2                        00            .byte	0
11584 28A3                        0C            .byte	$C
11585 28A4                        1C            .byte	$1C
11586 28A5                        3C            .byte	$3C
11587 28A6                        6C            .byte	$6C
11588 28A7                        CC            .byte	$CC
11589 28A8                        FE            .byte	$FE
11590 28A9                        0C            .byte	$C
11591 28AA                        0C            .byte	$C
11592 28AB                        0C            .byte	$C
11593 28AC                        1E            .byte	$1E
11594 28AD                        00            .byte	0
11595 28AE                        00            .byte	0
11596 28AF                        00            .byte	0
11597 28B0                        00            .byte	0
11598                                           ! 1457  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11599 28B1                        00            .byte	0
11600 28B2                        00            .byte	0
11601 28B3                        FE            .byte	$FE
11602 28B4                        C0            .byte	$C0
11603 28B5                        C0            .byte	$C0
11604 28B6                        C0            .byte	$C0
11605 28B7                        FC            .byte	$FC
11606 28B8                        06            .byte	6
11607 28B9                        06            .byte	6
11608 28BA                        06            .byte	6
11609 28BB                        C6            .byte	$C6
11610 28BC                        7C            .byte	$7C
11611 28BD                        00            .byte	0
11612 28BE                        00            .byte	0
11613 28BF                        00            .byte	0
11614 28C0                        00            .byte	0
11615                                           ! 1458  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00
11616 28C1                        00            .byte	0
11617 28C2                        00            .byte	0
11618 28C3                        38            .byte	$38
11619 28C4                        60            .byte	$60
11620 28C5                        C0            .byte	$C0
11621 28C6                        C0            .byte	$C0
11622 28C7                        FC            .byte	$FC
11623 28C8                        C6            .byte	$C6
11624 28C9                        C6            .byte	$C6
11625 28CA                        C6            .byte	$C6
11626 28CB                        C6            .byte	$C6
11627 28CC                        7C            .byte	$7C
11628 28CD                        00            .byte	0
11629                                           ! 1458 , 0x00, 0x00,
11630 28CE                        00            .byte	0
11631 28CF                        00            .byte	0
11632 28D0                        00            .byte	0
11633                                           ! 1459  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11634 28D1                        00            .byte	0
11635 28D2                        00            .byte	0
11636 28D3                        FE            .byte	$FE
11637 28D4                        C6            .byte	$C6
11638 28D5                        06            .byte	6
11639 28D6                        06            .byte	6
11640 28D7                        0C            .byte	$C
11641 28D8                        18            .byte	$18
11642 28D9                        30            .byte	$30
11643 28DA                        30            .byte	$30
11644 28DB                        30            .byte	$30
11645 28DC                        30            .byte	$30
11646 28DD                        00            .byte	0
11647 28DE                        00            .byte	0
11648 28DF                        00            .byte	0
11649 28E0                        00            .byte	0
11650                                           ! 1460  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11651 28E1                        00            .byte	0
11652 28E2                        00            .byte	0
11653 28E3                        7C            .byte	$7C
11654 28E4                        C6            .byte	$C6
11655 28E5                        C6            .byte	$C6
11656 28E6                        C6            .byte	$C6
11657 28E7                        7C            .byte	$7C
11658 28E8                        C6            .byte	$C6
11659 28E9                        C6            .byte	$C6
11660 28EA                        C6            .byte	$C6
11661 28EB                        C6            .byte	$C6
11662 28EC                        7C            .byte	$7C
11663 28ED                        00            .byte	0
11664 28EE                        00            .byte	0
11665 28EF                        00            .byte	0
11666 28F0                        00            .byte	0
11667                                           ! 1461  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11668 28F1                        00            .byte	0
11669 28F2                        00            .byte	0
11670 28F3                        7C            .byte	$7C
11671 28F4                        C6            .byte	$C6
11672 28F5                        C6            .byte	$C6
11673 28F6                        C6            .byte	$C6
11674 28F7                        7E            .byte	$7E
11675 28F8                        06            .byte	6
11676 28F9                        06            .byte	6
11677 28FA                        06            .byte	6
11678 28FB                        0C            .byte	$C
11679 28FC                        78            .byte	$78
11680 28FD                        00            .byte	0
11681 28FE                        00            .byte	0
11682 28FF                        00            .byte	0
11683 2900                        00            .byte	0
11684                                           ! 1462  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11685 2901                        00            .byte	0
11686 2902                        00            .byte	0
11687 2903                        00            .byte	0
11688 2904                        00            .byte	0
11689 2905                        18            .byte	$18
11690 2906                        18            .byte	$18
11691 2907                        00            .byte	0
11692 2908                        00            .byte	0
11693 2909                        00            .byte	0
11694 290A                        18            .byte	$18
11695 290B                        18            .byte	$18
11696 290C                        00            .byte	0
11697 290D                        00            .byte	0
11698 290E                        00            .byte	0
11699 290F                        00            .byte	0
11700 2910                        00            .byte	0
11701                                           ! 1463  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11702 2911                        00            .byte	0
11703 2912                        00            .byte	0
11704 2913                        00            .byte	0
11705 2914                        00            .byte	0
11706 2915                        18            .byte	$18
11707 2916                        18            .byte	$18
11708 2917                        00            .byte	0
11709 2918                        00            .byte	0
11710 2919                        00            .byte	0
11711 291A                        18            .byte	$18
11712 291B                        18            .byte	$18
11713 291C                        30            .byte	$30
11714 291D                        00            .byte	0
11715 291E                        00            .byte	0
11716 291F                        00            .byte	0
11717 2920                        00            .byte	0
11718                                           ! 1464  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11719 2921                        00            .byte	0
11720 2922                        00            .byte	0
11721 2923                        00            .byte	0
11722 2924                        06            .byte	6
11723 2925                        0C            .byte	$C
11724 2926                        18            .byte	$18
11725 2927                        30            .byte	$30
11726 2928                        60            .byte	$60
11727 2929                        30            .byte	$30
11728 292A                        18            .byte	$18
11729 292B                        0C            .byte	$C
11730 292C                        06            .byte	6
11731 292D                        00            .byte	0
11732 292E                        00            .byte	0
11733 292F                        00            .byte	0
11734 2930                        00            .byte	0
11735                                           ! 1465  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11736 2931                        00            .byte	0
11737 2932                        00            .byte	0
11738 2933                        00            .byte	0
11739 2934                        00            .byte	0
11740 2935                        00            .byte	0
11741 2936                        7E            .byte	$7E
11742 2937                        00            .byte	0
11743 2938                        00            .byte	0
11744 2939                        7E            .byte	$7E
11745 293A                        00            .byte	0
11746 293B                        00            .byte	0
11747 293C                        00            .byte	0
11748 293D                        00            .byte	0
11749 293E                        00            .byte	0
11750 293F                        00            .byte	0
11751 2940                        00            .byte	0
11752                                           ! 1466  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11753 2941                        00            .byte	0
11754 2942                        00            .byte	0
11755 2943                        00            .byte	0
11756 2944                        60            .byte	$60
11757 2945                        30            .byte	$30
11758 2946                        18            .byte	$18
11759 2947                        0C            .byte	$C
11760 2948                        06            .byte	6
11761 2949                        0C            .byte	$C
11762 294A                        18            .byte	$18
11763 294B                        30            .byte	$30
11764 294C                        60            .byte	$60
11765 294D                        00            .byte	0
11766 294E                        00            .byte	0
11767 294F                        00            .byte	0
11768 2950                        00            .byte	0
11769                                           ! 1467  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11770 2951                        00            .byte	0
11771 2952                        00            .byte	0
11772 2953                        7C            .byte	$7C
11773 2954                        C6            .byte	$C6
11774 2955                        C6            .byte	$C6
11775 2956                        0C            .byte	$C
11776 2957                        18            .byte	$18
11777 2958                        18            .byte	$18
11778 2959                        18            .byte	$18
11779 295A                        00            .byte	0
11780 295B                        18            .byte	$18
11781 295C                        18            .byte	$18
11782 295D                        00            .byte	0
11783 295E                        00            .byte	0
11784 295F                        00            .byte	0
11785 2960                        00            .byte	0
11786                                           ! 1468  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11787 2961                        00            .byte	0
11788 2962                        00            .byte	0
11789 2963                        00            .byte	0
11790 2964                        7C            .byte	$7C
11791 2965                        C6            .byte	$C6
11792 2966                        C6            .byte	$C6
11793 2967                        DE            .byte	$DE
11794 2968                        DE            .byte	$DE
11795 2969                        DE            .byte	$DE
11796 296A                        DC            .byte	$DC
11797 296B                        C0            .byte	$C0
11798 296C                        7C            .byte	$7C
11799 296D                        00            .byte	0
11800 296E                        00            .byte	0
11801 296F                        00            .byte	0
11802 2970                        00            .byte	0
11803                                           ! 1469  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11804 2971                        00            .byte	0
11805 2972                        00            .byte	0
11806 2973                        10            .byte	$10
11807 2974                        38            .byte	$38
11808 2975                        6C            .byte	$6C
11809 2976                        C6            .byte	$C6
11810 2977                        C6            .byte	$C6
11811 2978                        FE            .byte	$FE
11812 2979                        C6            .byte	$C6
11813 297A                        C6            .byte	$C6
11814 297B                        C6            .byte	$C6
11815 297C                        C6            .byte	$C6
11816 297D                        00            .byte	0
11817 297E                        00            .byte	0
11818 297F                        00            .byte	0
11819 2980                        00            .byte	0
11820                                           ! 1470  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11821 2981                        00            .byte	0
11822 2982                        00            .byte	0
11823 2983                        FC            .byte	$FC
11824 2984                        66            .byte	$66
11825 2985                        66            .byte	$66
11826 2986                        66            .byte	$66
11827 2987                        7C            .byte	$7C
11828 2988                        66            .byte	$66
11829 2989                        66            .byte	$66
11830 298A                        66            .byte	$66
11831 298B                        66            .byte	$66
11832 298C                        FC            .byte	$FC
11833 298D                        00            .byte	0
11834 298E                        00            .byte	0
11835 298F                        00            .byte	0
11836 2990                        00            .byte	0
11837                                           ! 1471  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11838 2991                        00            .byte	0
11839 2992                        00            .byte	0
11840 2993                        3C            .byte	$3C
11841 2994                        66            .byte	$66
11842 2995                        C2            .byte	$C2
11843 2996                        C0            .byte	$C0
11844 2997                        C0            .byte	$C0
11845 2998                        C0            .byte	$C0
11846 2999                        C0            .byte	$C0
11847 299A                        C2            .byte	$C2
11848 299B                        66            .byte	$66
11849 299C                        3C            .byte	$3C
11850 299D                        00            .byte	0
11851 299E                        00            .byte	0
11852 299F                        00            .byte	0
11853 29A0                        00            .byte	0
11854                                           ! 1472  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11855 29A1                        00            .byte	0
11856 29A2                        00            .byte	0
11857 29A3                        F8            .byte	$F8
11858 29A4                        6C            .byte	$6C
11859 29A5                        66            .byte	$66
11860 29A6                        66            .byte	$66
11861 29A7                        66            .byte	$66
11862 29A8                        66            .byte	$66
11863 29A9                        66            .byte	$66
11864 29AA                        66            .byte	$66
11865 29AB                        6C            .byte	$6C
11866 29AC                        F8            .byte	$F8
11867 29AD                        00            .byte	0
11868 29AE                        00            .byte	0
11869 29AF                        00            .byte	0
11870 29B0                        00            .byte	0
11871                                           ! 1473  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11872 29B1                        00            .byte	0
11873 29B2                        00            .byte	0
11874 29B3                        FE            .byte	$FE
11875 29B4                        66            .byte	$66
11876 29B5                        62            .byte	$62
11877 29B6                        68            .byte	$68
11878 29B7                        78            .byte	$78
11879 29B8                        68            .byte	$68
11880 29B9                        60            .byte	$60
11881 29BA                        62            .byte	$62
11882 29BB                        66            .byte	$66
11883 29BC                        FE            .byte	$FE
11884 29BD                        00            .byte	0
11885 29BE                        00            .byte	0
11886 29BF                        00            .byte	0
11887 29C0                        00            .byte	0
11888                                           ! 1474  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11889 29C1                        00            .byte	0
11890 29C2                        00            .byte	0
11891 29C3                        FE            .byte	$FE
11892 29C4                        66            .byte	$66
11893 29C5                        62            .byte	$62
11894 29C6                        68            .byte	$68
11895 29C7                        78            .byte	$78
11896 29C8                        68            .byte	$68
11897 29C9                        60            .byte	$60
11898 29CA                        60            .byte	$60
11899 29CB                        60            .byte	$60
11900 29CC                        F0            .byte	$F0
11901 29CD                        00            .byte	0
11902 29CE                        00            .byte	0
11903 29CF                        00            .byte	0
11904 29D0                        00            .byte	0
11905                                           ! 1475  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11906 29D1                        00            .byte	0
11907 29D2                        00            .byte	0
11908 29D3                        3C            .byte	$3C
11909 29D4                        66            .byte	$66
11910 29D5                        C2            .byte	$C2
11911 29D6                        C0            .byte	$C0
11912 29D7                        C0            .byte	$C0
11913 29D8                        DE            .byte	$DE
11914 29D9                        C6            .byte	$C6
11915 29DA                        C6            .byte	$C6
11916 29DB                        66            .byte	$66
11917 29DC                        3A            .byte	$3A
11918 29DD                        00            .byte	0
11919 29DE                        00            .byte	0
11920 29DF                        00            .byte	0
11921 29E0                        00            .byte	0
11922                                           ! 1476  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11923 29E1                        00            .byte	0
11924 29E2                        00            .byte	0
11925 29E3                        C6            .byte	$C6
11926 29E4                        C6            .byte	$C6
11927 29E5                        C6            .byte	$C6
11928 29E6                        C6            .byte	$C6
11929 29E7                        FE            .byte	$FE
11930 29E8                        C6            .byte	$C6
11931 29E9                        C6            .byte	$C6
11932 29EA                        C6            .byte	$C6
11933 29EB                        C6            .byte	$C6
11934 29EC                        C6            .byte	$C6
11935 29ED                        00            .byte	0
11936 29EE                        00            .byte	0
11937 29EF                        00            .byte	0
11938 29F0                        00            .byte	0
11939                                           ! 1477  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11940 29F1                        00            .byte	0
11941 29F2                        00            .byte	0
11942 29F3                        3C            .byte	$3C
11943 29F4                        18            .byte	$18
11944 29F5                        18            .byte	$18
11945 29F6                        18            .byte	$18
11946 29F7                        18            .byte	$18
11947 29F8                        18            .byte	$18
11948 29F9                        18            .byte	$18
11949 29FA                        18            .byte	$18
11950 29FB                        18            .byte	$18
11951 29FC                        3C            .byte	$3C
11952 29FD                        00            .byte	0
11953 29FE                        00            .byte	0
11954 29FF                        00            .byte	0
11955 2A00                        00            .byte	0
11956                                           ! 1478  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11957 2A01                        00            .byte	0
11958 2A02                        00            .byte	0
11959 2A03                        1E            .byte	$1E
11960 2A04                        0C            .byte	$C
11961 2A05                        0C            .byte	$C
11962 2A06                        0C            .byte	$C
11963 2A07                        0C            .byte	$C
11964 2A08                        0C            .byte	$C
11965 2A09                        CC            .byte	$CC
11966 2A0A                        CC            .byte	$CC
11967 2A0B                        CC            .byte	$CC
11968 2A0C                        78            .byte	$78
11969 2A0D                        00            .byte	0
11970 2A0E                        00            .byte	0
11971 2A0F                        00            .byte	0
11972 2A10                        00            .byte	0
11973                                           ! 1479  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x0
11974 2A11                        00            .byte	0
11975 2A12                        00            .byte	0
11976 2A13                        E6            .byte	$E6
11977 2A14                        66            .byte	$66
11978 2A15                        66            .byte	$66
11979 2A16                        6C            .byte	$6C
11980 2A17                        78            .byte	$78
11981 2A18                        78            .byte	$78
11982 2A19                        6C            .byte	$6C
11983 2A1A                        66            .byte	$66
11984 2A1B                        66            .byte	$66
11985 2A1C                        E6            .byte	$E6
11986 2A1D                        00            .byte	0
11987 2A1E                        00            .byte	0
11988 2A1F                        00            .byte	0
11989                                           ! 1479 0,
11990 2A20                        00            .byte	0
11991                                           ! 1480  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11992 2A21                        00            .byte	0
11993 2A22                        00            .byte	0
11994 2A23                        F0            .byte	$F0
11995 2A24                        60            .byte	$60
11996 2A25                        60            .byte	$60
11997 2A26                        60            .byte	$60
11998 2A27                        60            .byte	$60
11999 2A28                        60            .byte	$60
12000 2A29                        60            .byte	$60
12001 2A2A                        62            .byte	$62
12002 2A2B                        66            .byte	$66
12003 2A2C                        FE            .byte	$FE
12004 2A2D                        00            .byte	0
12005 2A2E                        00            .byte	0
12006 2A2F                        00            .byte	0
12007 2A30                        00            .byte	0
12008                                           ! 1481  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12009 2A31                        00            .byte	0
12010 2A32                        00            .byte	0
12011 2A33                        C3            .byte	$C3
12012 2A34                        E7            .byte	$E7
12013 2A35                        FF            .byte	$FF
12014 2A36                        FF            .byte	$FF
12015 2A37                        DB            .byte	$DB
12016 2A38                        C3            .byte	$C3
12017 2A39                        C3            .byte	$C3
12018 2A3A                        C3            .byte	$C3
12019 2A3B                        C3            .byte	$C3
12020 2A3C                        C3            .byte	$C3
12021 2A3D                        00            .byte	0
12022 2A3E                        00            .byte	0
12023 2A3F                        00            .byte	0
12024 2A40                        00            .byte	0
12025                                           ! 1482  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12026 2A41                        00            .byte	0
12027 2A42                        00            .byte	0
12028 2A43                        C6            .byte	$C6
12029 2A44                        E6            .byte	$E6
12030 2A45                        F6            .byte	$F6
12031 2A46                        FE            .byte	$FE
12032 2A47                        DE            .byte	$DE
12033 2A48                        CE            .byte	$CE
12034 2A49                        C6            .byte	$C6
12035 2A4A                        C6            .byte	$C6
12036 2A4B                        C6            .byte	$C6
12037 2A4C                        C6            .byte	$C6
12038 2A4D                        00            .byte	0
12039 2A4E                        00            .byte	0
12040 2A4F                        00            .byte	0
12041 2A50                        00            .byte	0
12042                                           ! 1483  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12043 2A51                        00            .byte	0
12044 2A52                        00            .byte	0
12045 2A53                        7C            .byte	$7C
12046 2A54                        C6            .byte	$C6
12047 2A55                        C6            .byte	$C6
12048 2A56                        C6            .byte	$C6
12049 2A57                        C6            .byte	$C6
12050 2A58                        C6            .byte	$C6
12051 2A59                        C6            .byte	$C6
12052 2A5A                        C6            .byte	$C6
12053 2A5B                        C6            .byte	$C6
12054 2A5C                        7C            .byte	$7C
12055 2A5D                        00            .byte	0
12056 2A5E                        00            .byte	0
12057 2A5F                        00            .byte	0
12058 2A60                        00            .byte	0
12059                                           ! 1484  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12060 2A61                        00            .byte	0
12061 2A62                        00            .byte	0
12062 2A63                        FC            .byte	$FC
12063 2A64                        66            .byte	$66
12064 2A65                        66            .byte	$66
12065 2A66                        66            .byte	$66
12066 2A67                        7C            .byte	$7C
12067 2A68                        60            .byte	$60
12068 2A69                        60            .byte	$60
12069 2A6A                        60            .byte	$60
12070 2A6B                        60            .byte	$60
12071 2A6C                        F0            .byte	$F0
12072 2A6D                        00            .byte	0
12073 2A6E                        00            .byte	0
12074 2A6F                        00            .byte	0
12075 2A70                        00            .byte	0
12076                                           ! 1485  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12077 2A71                        00            .byte	0
12078 2A72                        00            .byte	0
12079 2A73                        7C            .byte	$7C
12080 2A74                        C6            .byte	$C6
12081 2A75                        C6            .byte	$C6
12082 2A76                        C6            .byte	$C6
12083 2A77                        C6            .byte	$C6
12084 2A78                        C6            .byte	$C6
12085 2A79                        C6            .byte	$C6
12086 2A7A                        D6            .byte	$D6
12087 2A7B                        DE            .byte	$DE
12088 2A7C                        7C            .byte	$7C
12089 2A7D                        0C            .byte	$C
12090 2A7E                        0E            .byte	$E
12091 2A7F                        00            .byte	0
12092 2A80                        00            .byte	0
12093                                           ! 1486  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12094 2A81                        00            .byte	0
12095 2A82                        00            .byte	0
12096 2A83                        FC            .byte	$FC
12097 2A84                        66            .byte	$66
12098 2A85                        66            .byte	$66
12099 2A86                        66            .byte	$66
12100 2A87                        7C            .byte	$7C
12101 2A88                        6C            .byte	$6C
12102 2A89                        66            .byte	$66
12103 2A8A                        66            .byte	$66
12104 2A8B                        66            .byte	$66
12105 2A8C                        E6            .byte	$E6
12106 2A8D                        00            .byte	0
12107 2A8E                        00            .byte	0
12108 2A8F                        00            .byte	0
12109 2A90                        00            .byte	0
12110                                           ! 1487  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12111 2A91                        00            .byte	0
12112 2A92                        00            .byte	0
12113 2A93                        7C            .byte	$7C
12114 2A94                        C6            .byte	$C6
12115 2A95                        C6            .byte	$C6
12116 2A96                        60            .byte	$60
12117 2A97                        38            .byte	$38
12118 2A98                        0C            .byte	$C
12119 2A99                        06            .byte	6
12120 2A9A                        C6            .byte	$C6
12121 2A9B                        C6            .byte	$C6
12122 2A9C                        7C            .byte	$7C
12123 2A9D                        00            .byte	0
12124 2A9E                        00            .byte	0
12125 2A9F                        00            .byte	0
12126 2AA0                        00            .byte	0
12127                                           ! 1488  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12128 2AA1                        00            .byte	0
12129 2AA2                        00            .byte	0
12130 2AA3                        FF            .byte	$FF
12131 2AA4                        DB            .byte	$DB
12132 2AA5                        99            .byte	$99
12133 2AA6                        18            .byte	$18
12134 2AA7                        18            .byte	$18
12135 2AA8                        18            .byte	$18
12136 2AA9                        18            .byte	$18
12137 2AAA                        18            .byte	$18
12138 2AAB                        18            .byte	$18
12139 2AAC                        3C            .byte	$3C
12140 2AAD                        00            .byte	0
12141 2AAE                        00            .byte	0
12142 2AAF                        00            .byte	0
12143 2AB0                        00            .byte	0
12144                                           ! 1489  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12145 2AB1                        00            .byte	0
12146 2AB2                        00            .byte	0
12147 2AB3                        C6            .byte	$C6
12148 2AB4                        C6            .byte	$C6
12149 2AB5                        C6            .byte	$C6
12150 2AB6                        C6            .byte	$C6
12151 2AB7                        C6            .byte	$C6
12152 2AB8                        C6            .byte	$C6
12153 2AB9                        C6            .byte	$C6
12154 2ABA                        C6            .byte	$C6
12155 2ABB                        C6            .byte	$C6
12156 2ABC                        7C            .byte	$7C
12157 2ABD                        00            .byte	0
12158 2ABE                        00            .byte	0
12159 2ABF                        00            .byte	0
12160 2AC0                        00            .byte	0
12161                                           ! 1490  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12162 2AC1                        00            .byte	0
12163 2AC2                        00            .byte	0
12164 2AC3                        C3            .byte	$C3
12165 2AC4                        C3            .byte	$C3
12166 2AC5                        C3            .byte	$C3
12167 2AC6                        C3            .byte	$C3
12168 2AC7                        C3            .byte	$C3
12169 2AC8                        C3            .byte	$C3
12170 2AC9                        C3            .byte	$C3
12171 2ACA                        66            .byte	$66
12172 2ACB                        3C            .byte	$3C
12173 2ACC                        18            .byte	$18
12174 2ACD                        00            .byte	0
12175 2ACE                        00            .byte	0
12176 2ACF                        00            .byte	0
12177 2AD0                        00            .byte	0
12178                                           ! 1491  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12179 2AD1                        00            .byte	0
12180 2AD2                        00            .byte	0
12181 2AD3                        C3            .byte	$C3
12182 2AD4                        C3            .byte	$C3
12183 2AD5                        C3            .byte	$C3
12184 2AD6                        C3            .byte	$C3
12185 2AD7                        C3            .byte	$C3
12186 2AD8                        DB            .byte	$DB
12187 2AD9                        DB            .byte	$DB
12188 2ADA                        FF            .byte	$FF
12189 2ADB                        66            .byte	$66
12190 2ADC                        66            .byte	$66
12191 2ADD                        00            .byte	0
12192 2ADE                        00            .byte	0
12193 2ADF                        00            .byte	0
12194 2AE0                        00            .byte	0
12195                                           ! 1492  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12196 2AE1                        00            .byte	0
12197 2AE2                        00            .byte	0
12198 2AE3                        C3            .byte	$C3
12199 2AE4                        C3            .byte	$C3
12200 2AE5                        66            .byte	$66
12201 2AE6                        3C            .byte	$3C
12202 2AE7                        18            .byte	$18
12203 2AE8                        18            .byte	$18
12204 2AE9                        3C            .byte	$3C
12205 2AEA                        66            .byte	$66
12206 2AEB                        C3            .byte	$C3
12207 2AEC                        C3            .byte	$C3
12208 2AED                        00            .byte	0
12209 2AEE                        00            .byte	0
12210 2AEF                        00            .byte	0
12211 2AF0                        00            .byte	0
12212                                           ! 1493  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12213 2AF1                        00            .byte	0
12214 2AF2                        00            .byte	0
12215 2AF3                        C3            .byte	$C3
12216 2AF4                        C3            .byte	$C3
12217 2AF5                        C3            .byte	$C3
12218 2AF6                        66            .byte	$66
12219 2AF7                        3C            .byte	$3C
12220 2AF8                        18            .byte	$18
12221 2AF9                        18            .byte	$18
12222 2AFA                        18            .byte	$18
12223 2AFB                        18            .byte	$18
12224 2AFC                        3C            .byte	$3C
12225 2AFD                        00            .byte	0
12226 2AFE                        00            .byte	0
12227 2AFF                        00            .byte	0
12228 2B00                        00            .byte	0
12229                                           ! 1494  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12230 2B01                        00            .byte	0
12231 2B02                        00            .byte	0
12232 2B03                        FF            .byte	$FF
12233 2B04                        C3            .byte	$C3
12234 2B05                        86            .byte	$86
12235 2B06                        0C            .byte	$C
12236 2B07                        18            .byte	$18
12237 2B08                        30            .byte	$30
12238 2B09                        60            .byte	$60
12239 2B0A                        C1            .byte	$C1
12240 2B0B                        C3            .byte	$C3
12241 2B0C                        FF            .byte	$FF
12242 2B0D                        00            .byte	0
12243 2B0E                        00            .byte	0
12244 2B0F                        00            .byte	0
12245 2B10                        00            .byte	0
12246                                           ! 1495  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12247 2B11                        00            .byte	0
12248 2B12                        00            .byte	0
12249 2B13                        3C            .byte	$3C
12250 2B14                        30            .byte	$30
12251 2B15                        30            .byte	$30
12252 2B16                        30            .byte	$30
12253 2B17                        30            .byte	$30
12254 2B18                        30            .byte	$30
12255 2B19                        30            .byte	$30
12256 2B1A                        30            .byte	$30
12257 2B1B                        30            .byte	$30
12258 2B1C                        3C            .byte	$3C
12259 2B1D                        00            .byte	0
12260 2B1E                        00            .byte	0
12261 2B1F                        00            .byte	0
12262 2B20                        00            .byte	0
12263                                           ! 1496  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12264 2B21                        00            .byte	0
12265 2B22                        00            .byte	0
12266 2B23                        00            .byte	0
12267 2B24                        80            .byte	$80
12268 2B25                        C0            .byte	$C0
12269 2B26                        E0            .byte	$E0
12270 2B27                        70            .byte	$70
12271 2B28                        38            .byte	$38
12272 2B29                        1C            .byte	$1C
12273 2B2A                        0E            .byte	$E
12274 2B2B                        06            .byte	6
12275 2B2C                        02            .byte	2
12276 2B2D                        00            .byte	0
12277 2B2E                        00            .byte	0
12278 2B2F                        00            .byte	0
12279 2B30                        00            .byte	0
12280                                           ! 1497  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12281 2B31                        00            .byte	0
12282 2B32                        00            .byte	0
12283 2B33                        3C            .byte	$3C
12284 2B34                        0C            .byte	$C
12285 2B35                        0C            .byte	$C
12286 2B36                        0C            .byte	$C
12287 2B37                        0C            .byte	$C
12288 2B38                        0C            .byte	$C
12289 2B39                        0C            .byte	$C
12290 2B3A                        0C            .byte	$C
12291 2B3B                        0C            .byte	$C
12292 2B3C                        3C            .byte	$3C
12293 2B3D                        00            .byte	0
12294 2B3E                        00            .byte	0
12295 2B3F                        00            .byte	0
12296 2B40                        00            .byte	0
12297                                           ! 1498  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12298 2B41                        10            .byte	$10
12299 2B42                        38            .byte	$38
12300 2B43                        6C            .byte	$6C
12301 2B44                        C6            .byte	$C6
12302 2B45                        00            .byte	0
12303 2B46                        00            .byte	0
12304 2B47                        00            .byte	0
12305 2B48                        00            .byte	0
12306 2B49                        00            .byte	0
12307 2B4A                        00            .byte	0
12308 2B4B                        00            .byte	0
12309 2B4C                        00            .byte	0
12310 2B4D                        00            .byte	0
12311 2B4E                        00            .byte	0
12312 2B4F                        00            .byte	0
12313 2B50                        00            .byte	0
12314                                           ! 1499  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12315 2B51                        00            .byte	0
12316 2B52                        00            .byte	0
12317 2B53                        00            .byte	0
12318 2B54                        00            .byte	0
12319 2B55                        00            .byte	0
12320 2B56                        00            .byte	0
12321 2B57                        00            .byte	0
12322 2B58                        00            .byte	0
12323 2B59                        00            .byte	0
12324 2B5A                        00            .byte	0
12325 2B5B                        00            .byte	0
12326 2B5C                        00            .byte	0
12327 2B5D                        00            .byte	0
12328 2B5E                        FF            .byte	$FF
12329 2B5F                        00            .byte	0
12330 2B60                        00            .byte	0
12331                                           ! 1500  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12332 2B61                        30            .byte	$30
12333 2B62                        30            .byte	$30
12334 2B63                        18            .byte	$18
12335 2B64                        00            .byte	0
12336 2B65                        00            .byte	0
12337 2B66                        00            .byte	0
12338 2B67                        00            .byte	0
12339 2B68                        00            .byte	0
12340 2B69                        00            .byte	0
12341 2B6A                        00            .byte	0
12342 2B6B                        00            .byte	0
12343 2B6C                        00            .byte	0
12344 2B6D                        00            .byte	0
12345 2B6E                        00            .byte	0
12346 2B6F                        00            .byte	0
12347 2B70                        00            .byte	0
12348                                           ! 1501  0x00, 0
12349 2B71                        00            .byte	0
12350                                           ! 1501 x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12351 2B72                        00            .byte	0
12352 2B73                        00            .byte	0
12353 2B74                        00            .byte	0
12354 2B75                        00            .byte	0
12355 2B76                        78            .byte	$78
12356 2B77                        0C            .byte	$C
12357 2B78                        7C            .byte	$7C
12358 2B79                        CC            .byte	$CC
12359 2B7A                        CC            .byte	$CC
12360 2B7B                        CC            .byte	$CC
12361 2B7C                        76            .byte	$76
12362 2B7D                        00            .byte	0
12363 2B7E                        00            .byte	0
12364 2B7F                        00            .byte	0
12365 2B80                        00            .byte	0
12366                                           ! 1502  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12367 2B81                        00            .byte	0
12368 2B82                        00            .byte	0
12369 2B83                        E0            .byte	$E0
12370 2B84                        60            .byte	$60
12371 2B85                        60            .byte	$60
12372 2B86                        78            .byte	$78
12373 2B87                        6C            .byte	$6C
12374 2B88                        66            .byte	$66
12375 2B89                        66            .byte	$66
12376 2B8A                        66            .byte	$66
12377 2B8B                        66            .byte	$66
12378 2B8C                        7C            .byte	$7C
12379 2B8D                        00            .byte	0
12380 2B8E                        00            .byte	0
12381 2B8F                        00            .byte	0
12382 2B90                        00            .byte	0
12383                                           ! 1503  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12384 2B91                        00            .byte	0
12385 2B92                        00            .byte	0
12386 2B93                        00            .byte	0
12387 2B94                        00            .byte	0
12388 2B95                        00            .byte	0
12389 2B96                        7C            .byte	$7C
12390 2B97                        C6            .byte	$C6
12391 2B98                        C0            .byte	$C0
12392 2B99                        C0            .byte	$C0
12393 2B9A                        C0            .byte	$C0
12394 2B9B                        C6            .byte	$C6
12395 2B9C                        7C            .byte	$7C
12396 2B9D                        00            .byte	0
12397 2B9E                        00            .byte	0
12398 2B9F                        00            .byte	0
12399 2BA0                        00            .byte	0
12400                                           ! 1504  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12401 2BA1                        00            .byte	0
12402 2BA2                        00            .byte	0
12403 2BA3                        1C            .byte	$1C
12404 2BA4                        0C            .byte	$C
12405 2BA5                        0C            .byte	$C
12406 2BA6                        3C            .byte	$3C
12407 2BA7                        6C            .byte	$6C
12408 2BA8                        CC            .byte	$CC
12409 2BA9                        CC            .byte	$CC
12410 2BAA                        CC            .byte	$CC
12411 2BAB                        CC            .byte	$CC
12412 2BAC                        76            .byte	$76
12413 2BAD                        00            .byte	0
12414 2BAE                        00            .byte	0
12415 2BAF                        00            .byte	0
12416 2BB0                        00            .byte	0
12417                                           ! 1505  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12418 2BB1                        00            .byte	0
12419 2BB2                        00            .byte	0
12420 2BB3                        00            .byte	0
12421 2BB4                        00            .byte	0
12422 2BB5                        00            .byte	0
12423 2BB6                        7C            .byte	$7C
12424 2BB7                        C6            .byte	$C6
12425 2BB8                        FE            .byte	$FE
12426 2BB9                        C0            .byte	$C0
12427 2BBA                        C0            .byte	$C0
12428 2BBB                        C6            .byte	$C6
12429 2BBC                        7C            .byte	$7C
12430 2BBD                        00            .byte	0
12431 2BBE                        00            .byte	0
12432 2BBF                        00            .byte	0
12433 2BC0                        00            .byte	0
12434                                           ! 1506  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12435 2BC1                        00            .byte	0
12436 2BC2                        00            .byte	0
12437 2BC3                        38            .byte	$38
12438 2BC4                        6C            .byte	$6C
12439 2BC5                        64            .byte	$64
12440 2BC6                        60            .byte	$60
12441 2BC7                        F0            .byte	$F0
12442 2BC8                        60            .byte	$60
12443 2BC9                        60            .byte	$60
12444 2BCA                        60            .byte	$60
12445 2BCB                        60            .byte	$60
12446 2BCC                        F0            .byte	$F0
12447 2BCD                        00            .byte	0
12448 2BCE                        00            .byte	0
12449 2BCF                        00            .byte	0
12450 2BD0                        00            .byte	0
12451                                           ! 1507  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12452 2BD1                        00            .byte	0
12453 2BD2                        00            .byte	0
12454 2BD3                        00            .byte	0
12455 2BD4                        00            .byte	0
12456 2BD5                        00            .byte	0
12457 2BD6                        76            .byte	$76
12458 2BD7                        CC            .byte	$CC
12459 2BD8                        CC            .byte	$CC
12460 2BD9                        CC            .byte	$CC
12461 2BDA                        CC            .byte	$CC
12462 2BDB                        CC            .byte	$CC
12463 2BDC                        7C            .byte	$7C
12464 2BDD                        0C            .byte	$C
12465 2BDE                        CC            .byte	$CC
12466 2BDF                        78            .byte	$78
12467 2BE0                        00            .byte	0
12468                                           ! 1508  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12469 2BE1                        00            .byte	0
12470 2BE2                        00            .byte	0
12471 2BE3                        E0            .byte	$E0
12472 2BE4                        60            .byte	$60
12473 2BE5                        60            .byte	$60
12474 2BE6                        6C            .byte	$6C
12475 2BE7                        76            .byte	$76
12476 2BE8                        66            .byte	$66
12477 2BE9                        66            .byte	$66
12478 2BEA                        66            .byte	$66
12479 2BEB                        66            .byte	$66
12480 2BEC                        E6            .byte	$E6
12481 2BED                        00            .byte	0
12482 2BEE                        00            .byte	0
12483 2BEF                        00            .byte	0
12484 2BF0                        00            .byte	0
12485                                           ! 1509  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12486 2BF1                        00            .byte	0
12487 2BF2                        00            .byte	0
12488 2BF3                        18            .byte	$18
12489 2BF4                        18            .byte	$18
12490 2BF5                        00            .byte	0
12491 2BF6                        38            .byte	$38
12492 2BF7                        18            .byte	$18
12493 2BF8                        18            .byte	$18
12494 2BF9                        18            .byte	$18
12495 2BFA                        18            .byte	$18
12496 2BFB                        18            .byte	$18
12497 2BFC                        3C            .byte	$3C
12498 2BFD                        00            .byte	0
12499 2BFE                        00            .byte	0
12500 2BFF                        00            .byte	0
12501 2C00                        00            .byte	0
12502                                           ! 1510  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12503 2C01                        00            .byte	0
12504 2C02                        00            .byte	0
12505 2C03                        06            .byte	6
12506 2C04                        06            .byte	6
12507 2C05                        00            .byte	0
12508 2C06                        0E            .byte	$E
12509 2C07                        06            .byte	6
12510 2C08                        06            .byte	6
12511 2C09                        06            .byte	6
12512 2C0A                        06            .byte	6
12513 2C0B                        06            .byte	6
12514 2C0C                        06            .byte	6
12515 2C0D                        66            .byte	$66
12516 2C0E                        66            .byte	$66
12517 2C0F                        3C            .byte	$3C
12518 2C10                        00            .byte	0
12519                                           ! 1511  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12520 2C11                        00            .byte	0
12521 2C12                        00            .byte	0
12522 2C13                        E0            .byte	$E0
12523 2C14                        60            .byte	$60
12524 2C15                        60            .byte	$60
12525 2C16                        66            .byte	$66
12526 2C17                        6C            .byte	$6C
12527 2C18                        78            .byte	$78
12528 2C19                        78            .byte	$78
12529 2C1A                        6C            .byte	$6C
12530 2C1B                        66            .byte	$66
12531 2C1C                        E6            .byte	$E6
12532 2C1D                        00            .byte	0
12533 2C1E                        00            .byte	0
12534 2C1F                        00            .byte	0
12535 2C20                        00            .byte	0
12536                                           ! 1512  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12537 2C21                        00            .byte	0
12538 2C22                        00            .byte	0
12539 2C23                        38            .byte	$38
12540 2C24                        18            .byte	$18
12541 2C25                        18            .byte	$18
12542 2C26                        18            .byte	$18
12543 2C27                        18            .byte	$18
12544 2C28                        18            .byte	$18
12545 2C29                        18            .byte	$18
12546 2C2A                        18            .byte	$18
12547 2C2B                        18            .byte	$18
12548 2C2C                        3C            .byte	$3C
12549 2C2D                        00            .byte	0
12550 2C2E                        00            .byte	0
12551 2C2F                        00            .byte	0
12552 2C30                        00            .byte	0
12553                                           ! 1513  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12554 2C31                        00            .byte	0
12555 2C32                        00            .byte	0
12556 2C33                        00            .byte	0
12557 2C34                        00            .byte	0
12558 2C35                        00            .byte	0
12559 2C36                        E6            .byte	$E6
12560 2C37                        FF            .byte	$FF
12561 2C38                        DB            .byte	$DB
12562 2C39                        DB            .byte	$DB
12563 2C3A                        DB            .byte	$DB
12564 2C3B                        DB            .byte	$DB
12565 2C3C                        DB            .byte	$DB
12566 2C3D                        00            .byte	0
12567 2C3E                        00            .byte	0
12568 2C3F                        00            .byte	0
12569 2C40                        00            .byte	0
12570                                           ! 1514  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12571 2C41                        00            .byte	0
12572 2C42                        00            .byte	0
12573 2C43                        00            .byte	0
12574 2C44                        00            .byte	0
12575 2C45                        00            .byte	0
12576 2C46                        DC            .byte	$DC
12577 2C47                        66            .byte	$66
12578 2C48                        66            .byte	$66
12579 2C49                        66            .byte	$66
12580 2C4A                        66            .byte	$66
12581 2C4B                        66            .byte	$66
12582 2C4C                        66            .byte	$66
12583 2C4D                        00            .byte	0
12584 2C4E                        00            .byte	0
12585 2C4F                        00            .byte	0
12586 2C50                        00            .byte	0
12587                                           ! 1515  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12588 2C51                        00            .byte	0
12589 2C52                        00            .byte	0
12590 2C53                        00            .byte	0
12591 2C54                        00            .byte	0
12592 2C55                        00            .byte	0
12593 2C56                        7C            .byte	$7C
12594 2C57                        C6            .byte	$C6
12595 2C58                        C6            .byte	$C6
12596 2C59                        C6            .byte	$C6
12597 2C5A                        C6            .byte	$C6
12598 2C5B                        C6            .byte	$C6
12599 2C5C                        7C            .byte	$7C
12600 2C5D                        00            .byte	0
12601 2C5E                        00            .byte	0
12602 2C5F                        00            .byte	0
12603 2C60                        00            .byte	0
12604                                           ! 1516  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12605 2C61                        00            .byte	0
12606 2C62                        00            .byte	0
12607 2C63                        00            .byte	0
12608 2C64                        00            .byte	0
12609 2C65                        00            .byte	0
12610 2C66                        DC            .byte	$DC
12611 2C67                        66            .byte	$66
12612 2C68                        66            .byte	$66
12613 2C69                        66            .byte	$66
12614 2C6A                        66            .byte	$66
12615 2C6B                        66            .byte	$66
12616 2C6C                        7C            .byte	$7C
12617 2C6D                        60            .byte	$60
12618 2C6E                        60            .byte	$60
12619 2C6F                        F0            .byte	$F0
12620 2C70                        00            .byte	0
12621                                           ! 1517  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12622 2C71                        00            .byte	0
12623 2C72                        00            .byte	0
12624 2C73                        00            .byte	0
12625 2C74                        00            .byte	0
12626 2C75                        00            .byte	0
12627 2C76                        76            .byte	$76
12628 2C77                        CC            .byte	$CC
12629 2C78                        CC            .byte	$CC
12630 2C79                        CC            .byte	$CC
12631 2C7A                        CC            .byte	$CC
12632 2C7B                        CC            .byte	$CC
12633 2C7C                        7C            .byte	$7C
12634 2C7D                        0C            .byte	$C
12635 2C7E                        0C            .byte	$C
12636 2C7F                        1E            .byte	$1E
12637 2C80                        00            .byte	0
12638                                           ! 1518  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12639 2C81                        00            .byte	0
12640 2C82                        00            .byte	0
12641 2C83                        00            .byte	0
12642 2C84                        00            .byte	0
12643 2C85                        00            .byte	0
12644 2C86                        DC            .byte	$DC
12645 2C87                        76            .byte	$76
12646 2C88                        66            .byte	$66
12647 2C89                        60            .byte	$60
12648 2C8A                        60            .byte	$60
12649 2C8B                        60            .byte	$60
12650 2C8C                        F0            .byte	$F0
12651 2C8D                        00            .byte	0
12652 2C8E                        00            .byte	0
12653 2C8F                        00            .byte	0
12654 2C90                        00            .byte	0
12655                                           ! 1519  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12656 2C91                        00            .byte	0
12657 2C92                        00            .byte	0
12658 2C93                        00            .byte	0
12659 2C94                        00            .byte	0
12660 2C95                        00            .byte	0
12661 2C96                        7C            .byte	$7C
12662 2C97                        C6            .byte	$C6
12663 2C98                        60            .byte	$60
12664 2C99                        38            .byte	$38
12665 2C9A                        0C            .byte	$C
12666 2C9B                        C6            .byte	$C6
12667 2C9C                        7C            .byte	$7C
12668 2C9D                        00            .byte	0
12669 2C9E                        00            .byte	0
12670 2C9F                        00            .byte	0
12671 2CA0                        00            .byte	0
12672                                           ! 1520  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12673 2CA1                        00            .byte	0
12674 2CA2                        00            .byte	0
12675 2CA3                        10            .byte	$10
12676 2CA4                        30            .byte	$30
12677 2CA5                        30            .byte	$30
12678 2CA6                        FC            .byte	$FC
12679 2CA7                        30            .byte	$30
12680 2CA8                        30            .byte	$30
12681 2CA9                        30            .byte	$30
12682 2CAA                        30            .byte	$30
12683 2CAB                        36            .byte	$36
12684 2CAC                        1C            .byte	$1C
12685 2CAD                        00            .byte	0
12686 2CAE                        00            .byte	0
12687 2CAF                        00            .byte	0
12688 2CB0                        00            .byte	0
12689                                           ! 1521  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12690 2CB1                        00            .byte	0
12691 2CB2                        00            .byte	0
12692 2CB3                        00            .byte	0
12693 2CB4                        00            .byte	0
12694 2CB5                        00            .byte	0
12695 2CB6                        CC            .byte	$CC
12696 2CB7                        CC            .byte	$CC
12697 2CB8                        CC            .byte	$CC
12698 2CB9                        CC            .byte	$CC
12699 2CBA                        CC            .byte	$CC
12700 2CBB                        CC            .byte	$CC
12701 2CBC                        76            .byte	$76
12702 2CBD                        00            .byte	0
12703 2CBE                        00            .byte	0
12704 2CBF                        00            .byte	0
12705 2CC0                        00            .byte	0
12706                                           ! 1522  0x00, 0x00, 0x00, 
12707 2CC1                        00            .byte	0
12708 2CC2                        00            .byte	0
12709 2CC3                        00            .byte	0
12710                                           ! 1522 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12711 2CC4                        00            .byte	0
12712 2CC5                        00            .byte	0
12713 2CC6                        C3            .byte	$C3
12714 2CC7                        C3            .byte	$C3
12715 2CC8                        C3            .byte	$C3
12716 2CC9                        C3            .byte	$C3
12717 2CCA                        66            .byte	$66
12718 2CCB                        3C            .byte	$3C
12719 2CCC                        18            .byte	$18
12720 2CCD                        00            .byte	0
12721 2CCE                        00            .byte	0
12722 2CCF                        00            .byte	0
12723 2CD0                        00            .byte	0
12724                                           ! 1523  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12725 2CD1                        00            .byte	0
12726 2CD2                        00            .byte	0
12727 2CD3                        00            .byte	0
12728 2CD4                        00            .byte	0
12729 2CD5                        00            .byte	0
12730 2CD6                        C3            .byte	$C3
12731 2CD7                        C3            .byte	$C3
12732 2CD8                        C3            .byte	$C3
12733 2CD9                        DB            .byte	$DB
12734 2CDA                        DB            .byte	$DB
12735 2CDB                        FF            .byte	$FF
12736 2CDC                        66            .byte	$66
12737 2CDD                        00            .byte	0
12738 2CDE                        00            .byte	0
12739 2CDF                        00            .byte	0
12740 2CE0                        00            .byte	0
12741                                           ! 1524  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12742 2CE1                        00            .byte	0
12743 2CE2                        00            .byte	0
12744 2CE3                        00            .byte	0
12745 2CE4                        00            .byte	0
12746 2CE5                        00            .byte	0
12747 2CE6                        C3            .byte	$C3
12748 2CE7                        66            .byte	$66
12749 2CE8                        3C            .byte	$3C
12750 2CE9                        18            .byte	$18
12751 2CEA                        3C            .byte	$3C
12752 2CEB                        66            .byte	$66
12753 2CEC                        C3            .byte	$C3
12754 2CED                        00            .byte	0
12755 2CEE                        00            .byte	0
12756 2CEF                        00            .byte	0
12757 2CF0                        00            .byte	0
12758                                           ! 1525  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12759 2CF1                        00            .byte	0
12760 2CF2                        00            .byte	0
12761 2CF3                        00            .byte	0
12762 2CF4                        00            .byte	0
12763 2CF5                        00            .byte	0
12764 2CF6                        C6            .byte	$C6
12765 2CF7                        C6            .byte	$C6
12766 2CF8                        C6            .byte	$C6
12767 2CF9                        C6            .byte	$C6
12768 2CFA                        C6            .byte	$C6
12769 2CFB                        C6            .byte	$C6
12770 2CFC                        7E            .byte	$7E
12771 2CFD                        06            .byte	6
12772 2CFE                        0C            .byte	$C
12773 2CFF                        F8            .byte	$F8
12774 2D00                        00            .byte	0
12775                                           ! 1526  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12776 2D01                        00            .byte	0
12777 2D02                        00            .byte	0
12778 2D03                        00            .byte	0
12779 2D04                        00            .byte	0
12780 2D05                        00            .byte	0
12781 2D06                        FE            .byte	$FE
12782 2D07                        CC            .byte	$CC
12783 2D08                        18            .byte	$18
12784 2D09                        30            .byte	$30
12785 2D0A                        60            .byte	$60
12786 2D0B                        C6            .byte	$C6
12787 2D0C                        FE            .byte	$FE
12788 2D0D                        00            .byte	0
12789 2D0E                        00            .byte	0
12790 2D0F                        00            .byte	0
12791 2D10                        00            .byte	0
12792                                           ! 1527  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12793 2D11                        00            .byte	0
12794 2D12                        00            .byte	0
12795 2D13                        0E            .byte	$E
12796 2D14                        18            .byte	$18
12797 2D15                        18            .byte	$18
12798 2D16                        18            .byte	$18
12799 2D17                        70            .byte	$70
12800 2D18                        18            .byte	$18
12801 2D19                        18            .byte	$18
12802 2D1A                        18            .byte	$18
12803 2D1B                        18            .byte	$18
12804 2D1C                        0E            .byte	$E
12805 2D1D                        00            .byte	0
12806 2D1E                        00            .byte	0
12807 2D1F                        00            .byte	0
12808 2D20                        00            .byte	0
12809                                           ! 1528  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12810 2D21                        00            .byte	0
12811 2D22                        00            .byte	0
12812 2D23                        18            .byte	$18
12813 2D24                        18            .byte	$18
12814 2D25                        18            .byte	$18
12815 2D26                        18            .byte	$18
12816 2D27                        00            .byte	0
12817 2D28                        18            .byte	$18
12818 2D29                        18            .byte	$18
12819 2D2A                        18            .byte	$18
12820 2D2B                        18            .byte	$18
12821 2D2C                        18            .byte	$18
12822 2D2D                        00            .byte	0
12823 2D2E                        00            .byte	0
12824 2D2F                        00            .byte	0
12825 2D30                        00            .byte	0
12826                                           ! 1529  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12827 2D31                        00            .byte	0
12828 2D32                        00            .byte	0
12829 2D33                        70            .byte	$70
12830 2D34                        18            .byte	$18
12831 2D35                        18            .byte	$18
12832 2D36                        18            .byte	$18
12833 2D37                        0E            .byte	$E
12834 2D38                        18            .byte	$18
12835 2D39                        18            .byte	$18
12836 2D3A                        18            .byte	$18
12837 2D3B                        18            .byte	$18
12838 2D3C                        70            .byte	$70
12839 2D3D                        00            .byte	0
12840 2D3E                        00            .byte	0
12841 2D3F                        00            .byte	0
12842 2D40                        00            .byte	0
12843                                           ! 1530  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12844 2D41                        00            .byte	0
12845 2D42                        00            .byte	0
12846 2D43                        76            .byte	$76
12847 2D44                        DC            .byte	$DC
12848 2D45                        00            .byte	0
12849 2D46                        00            .byte	0
12850 2D47                        00            .byte	0
12851 2D48                        00            .byte	0
12852 2D49                        00            .byte	0
12853 2D4A                        00            .byte	0
12854 2D4B                        00            .byte	0
12855 2D4C                        00            .byte	0
12856 2D4D                        00            .byte	0
12857 2D4E                        00            .byte	0
12858 2D4F                        00            .byte	0
12859 2D50                        00            .byte	0
12860                                           ! 1531  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12861 2D51                        00            .byte	0
12862 2D52                        00            .byte	0
12863 2D53                        00            .byte	0
12864 2D54                        00            .byte	0
12865 2D55                        10            .byte	$10
12866 2D56                        38            .byte	$38
12867 2D57                        6C            .byte	$6C
12868 2D58                        C6            .byte	$C6
12869 2D59                        C6            .byte	$C6
12870 2D5A                        C6            .byte	$C6
12871 2D5B                        FE            .byte	$FE
12872 2D5C                        00            .byte	0
12873 2D5D                        00            .byte	0
12874 2D5E                        00            .byte	0
12875 2D5F                        00            .byte	0
12876 2D60                        00            .byte	0
12877                                           ! 1532  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12878 2D61                        00            .byte	0
12879 2D62                        00            .byte	0
12880 2D63                        3C            .byte	$3C
12881 2D64                        66            .byte	$66
12882 2D65                        C2            .byte	$C2
12883 2D66                        C0            .byte	$C0
12884 2D67                        C0            .byte	$C0
12885 2D68                        C0            .byte	$C0
12886 2D69                        C2            .byte	$C2
12887 2D6A                        66            .byte	$66
12888 2D6B                        3C            .byte	$3C
12889 2D6C                        0C            .byte	$C
12890 2D6D                        06            .byte	6
12891 2D6E                        7C            .byte	$7C
12892 2D6F                        00            .byte	0
12893 2D70                        00            .byte	0
12894                                           ! 1533  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12895 2D71                        00            .byte	0
12896 2D72                        00            .byte	0
12897 2D73                        CC            .byte	$CC
12898 2D74                        00            .byte	0
12899 2D75                        00            .byte	0
12900 2D76                        CC            .byte	$CC
12901 2D77                        CC            .byte	$CC
12902 2D78                        CC            .byte	$CC
12903 2D79                        CC            .byte	$CC
12904 2D7A                        CC            .byte	$CC
12905 2D7B                        CC            .byte	$CC
12906 2D7C                        76            .byte	$76
12907 2D7D                        00            .byte	0
12908 2D7E                        00            .byte	0
12909 2D7F                        00            .byte	0
12910 2D80                        00            .byte	0
12911                                           ! 1534  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12912 2D81                        00            .byte	0
12913 2D82                        0C            .byte	$C
12914 2D83                        18            .byte	$18
12915 2D84                        30            .byte	$30
12916 2D85                        00            .byte	0
12917 2D86                        7C            .byte	$7C
12918 2D87                        C6            .byte	$C6
12919 2D88                        FE            .byte	$FE
12920 2D89                        C0            .byte	$C0
12921 2D8A                        C0            .byte	$C0
12922 2D8B                        C6            .byte	$C6
12923 2D8C                        7C            .byte	$7C
12924 2D8D                        00            .byte	0
12925 2D8E                        00            .byte	0
12926 2D8F                        00            .byte	0
12927 2D90                        00            .byte	0
12928                                           ! 1535  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12929 2D91                        00            .byte	0
12930 2D92                        10            .byte	$10
12931 2D93                        38            .byte	$38
12932 2D94                        6C            .byte	$6C
12933 2D95                        00            .byte	0
12934 2D96                        78            .byte	$78
12935 2D97                        0C            .byte	$C
12936 2D98                        7C            .byte	$7C
12937 2D99                        CC            .byte	$CC
12938 2D9A                        CC            .byte	$CC
12939 2D9B                        CC            .byte	$CC
12940 2D9C                        76            .byte	$76
12941 2D9D                        00            .byte	0
12942 2D9E                        00            .byte	0
12943 2D9F                        00            .byte	0
12944 2DA0                        00            .byte	0
12945                                           ! 1536  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12946 2DA1                        00            .byte	0
12947 2DA2                        00            .byte	0
12948 2DA3                        CC            .byte	$CC
12949 2DA4                        00            .byte	0
12950 2DA5                        00            .byte	0
12951 2DA6                        78            .byte	$78
12952 2DA7                        0C            .byte	$C
12953 2DA8                        7C            .byte	$7C
12954 2DA9                        CC            .byte	$CC
12955 2DAA                        CC            .byte	$CC
12956 2DAB                        CC            .byte	$CC
12957 2DAC                        76            .byte	$76
12958 2DAD                        00            .byte	0
12959 2DAE                        00            .byte	0
12960 2DAF                        00            .byte	0
12961 2DB0                        00            .byte	0
12962                                           ! 1537  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12963 2DB1                        00            .byte	0
12964 2DB2                        60            .byte	$60
12965 2DB3                        30            .byte	$30
12966 2DB4                        18            .byte	$18
12967 2DB5                        00            .byte	0
12968 2DB6                        78            .byte	$78
12969 2DB7                        0C            .byte	$C
12970 2DB8                        7C            .byte	$7C
12971 2DB9                        CC            .byte	$CC
12972 2DBA                        CC            .byte	$CC
12973 2DBB                        CC            .byte	$CC
12974 2DBC                        76            .byte	$76
12975 2DBD                        00            .byte	0
12976 2DBE                        00            .byte	0
12977 2DBF                        00            .byte	0
12978 2DC0                        00            .byte	0
12979                                           ! 1538  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12980 2DC1                        00            .byte	0
12981 2DC2                        38            .byte	$38
12982 2DC3                        6C            .byte	$6C
12983 2DC4                        38            .byte	$38
12984 2DC5                        00            .byte	0
12985 2DC6                        78            .byte	$78
12986 2DC7                        0C            .byte	$C
12987 2DC8                        7C            .byte	$7C
12988 2DC9                        CC            .byte	$CC
12989 2DCA                        CC            .byte	$CC
12990 2DCB                        CC            .byte	$CC
12991 2DCC                        76            .byte	$76
12992 2DCD                        00            .byte	0
12993 2DCE                        00            .byte	0
12994 2DCF                        00            .byte	0
12995 2DD0                        00            .byte	0
12996                                           ! 1539  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12997 2DD1                        00            .byte	0
12998 2DD2                        00            .byte	0
12999 2DD3                        00            .byte	0
13000 2DD4                        00            .byte	0
13001 2DD5                        3C            .byte	$3C
13002 2DD6                        66            .byte	$66
13003 2DD7                        60            .byte	$60
13004 2DD8                        60            .byte	$60
13005 2DD9                        66            .byte	$66
13006 2DDA                        3C            .byte	$3C
13007 2DDB                        0C            .byte	$C
13008 2DDC                        06            .byte	6
13009 2DDD                        3C            .byte	$3C
13010 2DDE                        00            .byte	0
13011 2DDF                        00            .byte	0
13012 2DE0                        00            .byte	0
13013                                           ! 1540  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13014 2DE1                        00            .byte	0
13015 2DE2                        10            .byte	$10
13016 2DE3                        38            .byte	$38
13017 2DE4                        6C            .byte	$6C
13018 2DE5                        00            .byte	0
13019 2DE6                        7C            .byte	$7C
13020 2DE7                        C6            .byte	$C6
13021 2DE8                        FE            .byte	$FE
13022 2DE9                        C0            .byte	$C0
13023 2DEA                        C0            .byte	$C0
13024 2DEB                        C6            .byte	$C6
13025 2DEC                        7C            .byte	$7C
13026 2DED                        00            .byte	0
13027 2DEE                        00            .byte	0
13028 2DEF                        00            .byte	0
13029 2DF0                        00            .byte	0
13030                                           ! 1541  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13031 2DF1                        00            .byte	0
13032 2DF2                        00            .byte	0
13033 2DF3                        C6            .byte	$C6
13034 2DF4                        00            .byte	0
13035 2DF5                        00            .byte	0
13036 2DF6                        7C            .byte	$7C
13037 2DF7                        C6            .byte	$C6
13038 2DF8                        FE            .byte	$FE
13039 2DF9                        C0            .byte	$C0
13040 2DFA                        C0            .byte	$C0
13041 2DFB                        C6            .byte	$C6
13042 2DFC                        7C            .byte	$7C
13043 2DFD                        00            .byte	0
13044 2DFE                        00            .byte	0
13045 2DFF                        00            .byte	0
13046 2E00                        00            .byte	0
13047                                           ! 1542  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13048 2E01                        00            .byte	0
13049 2E02                        60            .byte	$60
13050 2E03                        30            .byte	$30
13051 2E04                        18            .byte	$18
13052 2E05                        00            .byte	0
13053 2E06                        7C            .byte	$7C
13054 2E07                        C6            .byte	$C6
13055 2E08                        FE            .byte	$FE
13056 2E09                        C0            .byte	$C0
13057 2E0A                        C0            .byte	$C0
13058 2E0B                        C6            .byte	$C6
13059 2E0C                        7C            .byte	$7C
13060 2E0D                        00            .byte	0
13061 2E0E                        00            .byte	0
13062 2E0F                        00            .byte	0
13063 2E10                        00            .byte	0
13064                                           ! 1543  0x00, 0x00, 0x66, 0x00, 0x00,
13065 2E11                        00            .byte	0
13066 2E12                        00            .byte	0
13067 2E13                        66            .byte	$66
13068 2E14                        00            .byte	0
13069                                           ! 1543  0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13070 2E15                        00            .byte	0
13071 2E16                        38            .byte	$38
13072 2E17                        18            .byte	$18
13073 2E18                        18            .byte	$18
13074 2E19                        18            .byte	$18
13075 2E1A                        18            .byte	$18
13076 2E1B                        18            .byte	$18
13077 2E1C                        3C            .byte	$3C
13078 2E1D                        00            .byte	0
13079 2E1E                        00            .byte	0
13080 2E1F                        00            .byte	0
13081 2E20                        00            .byte	0
13082                                           ! 1544  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13083 2E21                        00            .byte	0
13084 2E22                        18            .byte	$18
13085 2E23                        3C            .byte	$3C
13086 2E24                        66            .byte	$66
13087 2E25                        00            .byte	0
13088 2E26                        38            .byte	$38
13089 2E27                        18            .byte	$18
13090 2E28                        18            .byte	$18
13091 2E29                        18            .byte	$18
13092 2E2A                        18            .byte	$18
13093 2E2B                        18            .byte	$18
13094 2E2C                        3C            .byte	$3C
13095 2E2D                        00            .byte	0
13096 2E2E                        00            .byte	0
13097 2E2F                        00            .byte	0
13098 2E30                        00            .byte	0
13099                                           ! 1545  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13100 2E31                        00            .byte	0
13101 2E32                        60            .byte	$60
13102 2E33                        30            .byte	$30
13103 2E34                        18            .byte	$18
13104 2E35                        00            .byte	0
13105 2E36                        38            .byte	$38
13106 2E37                        18            .byte	$18
13107 2E38                        18            .byte	$18
13108 2E39                        18            .byte	$18
13109 2E3A                        18            .byte	$18
13110 2E3B                        18            .byte	$18
13111 2E3C                        3C            .byte	$3C
13112 2E3D                        00            .byte	0
13113 2E3E                        00            .byte	0
13114 2E3F                        00            .byte	0
13115 2E40                        00            .byte	0
13116                                           ! 1546  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13117 2E41                        00            .byte	0
13118 2E42                        C6            .byte	$C6
13119 2E43                        00            .byte	0
13120 2E44                        10            .byte	$10
13121 2E45                        38            .byte	$38
13122 2E46                        6C            .byte	$6C
13123 2E47                        C6            .byte	$C6
13124 2E48                        C6            .byte	$C6
13125 2E49                        FE            .byte	$FE
13126 2E4A                        C6            .byte	$C6
13127 2E4B                        C6            .byte	$C6
13128 2E4C                        C6            .byte	$C6
13129 2E4D                        00            .byte	0
13130 2E4E                        00            .byte	0
13131 2E4F                        00            .byte	0
13132 2E50                        00            .byte	0
13133                                           ! 1547  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13134 2E51                        38            .byte	$38
13135 2E52                        6C            .byte	$6C
13136 2E53                        38            .byte	$38
13137 2E54                        00            .byte	0
13138 2E55                        38            .byte	$38
13139 2E56                        6C            .byte	$6C
13140 2E57                        C6            .byte	$C6
13141 2E58                        C6            .byte	$C6
13142 2E59                        FE            .byte	$FE
13143 2E5A                        C6            .byte	$C6
13144 2E5B                        C6            .byte	$C6
13145 2E5C                        C6            .byte	$C6
13146 2E5D                        00            .byte	0
13147 2E5E                        00            .byte	0
13148 2E5F                        00            .byte	0
13149 2E60                        00            .byte	0
13150                                           ! 1548  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13151 2E61                        18            .byte	$18
13152 2E62                        30            .byte	$30
13153 2E63                        60            .byte	$60
13154 2E64                        00            .byte	0
13155 2E65                        FE            .byte	$FE
13156 2E66                        66            .byte	$66
13157 2E67                        60            .byte	$60
13158 2E68                        7C            .byte	$7C
13159 2E69                        60            .byte	$60
13160 2E6A                        60            .byte	$60
13161 2E6B                        66            .byte	$66
13162 2E6C                        FE            .byte	$FE
13163 2E6D                        00            .byte	0
13164 2E6E                        00            .byte	0
13165 2E6F                        00            .byte	0
13166 2E70                        00            .byte	0
13167                                           ! 1549  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13168 2E71                        00            .byte	0
13169 2E72                        00            .byte	0
13170 2E73                        00            .byte	0
13171 2E74                        00            .byte	0
13172 2E75                        00            .byte	0
13173 2E76                        6E            .byte	$6E
13174 2E77                        3B            .byte	$3B
13175 2E78                        1B            .byte	$1B
13176 2E79                        7E            .byte	$7E
13177 2E7A                        D8            .byte	$D8
13178 2E7B                        DC            .byte	$DC
13179 2E7C                        77            .byte	$77
13180 2E7D                        00            .byte	0
13181 2E7E                        00            .byte	0
13182 2E7F                        00            .byte	0
13183 2E80                        00            .byte	0
13184                                           ! 1550  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13185 2E81                        00            .byte	0
13186 2E82                        00            .byte	0
13187 2E83                        3E            .byte	$3E
13188 2E84                        6C            .byte	$6C
13189 2E85                        CC            .byte	$CC
13190 2E86                        CC            .byte	$CC
13191 2E87                        FE            .byte	$FE
13192 2E88                        CC            .byte	$CC
13193 2E89                        CC            .byte	$CC
13194 2E8A                        CC            .byte	$CC
13195 2E8B                        CC            .byte	$CC
13196 2E8C                        CE            .byte	$CE
13197 2E8D                        00            .byte	0
13198 2E8E                        00            .byte	0
13199 2E8F                        00            .byte	0
13200 2E90                        00            .byte	0
13201                                           ! 1551  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13202 2E91                        00            .byte	0
13203 2E92                        10            .byte	$10
13204 2E93                        38            .byte	$38
13205 2E94                        6C            .byte	$6C
13206 2E95                        00            .byte	0
13207 2E96                        7C            .byte	$7C
13208 2E97                        C6            .byte	$C6
13209 2E98                        C6            .byte	$C6
13210 2E99                        C6            .byte	$C6
13211 2E9A                        C6            .byte	$C6
13212 2E9B                        C6            .byte	$C6
13213 2E9C                        7C            .byte	$7C
13214 2E9D                        00            .byte	0
13215 2E9E                        00            .byte	0
13216 2E9F                        00            .byte	0
13217 2EA0                        00            .byte	0
13218                                           ! 1552  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13219 2EA1                        00            .byte	0
13220 2EA2                        00            .byte	0
13221 2EA3                        C6            .byte	$C6
13222 2EA4                        00            .byte	0
13223 2EA5                        00            .byte	0
13224 2EA6                        7C            .byte	$7C
13225 2EA7                        C6            .byte	$C6
13226 2EA8                        C6            .byte	$C6
13227 2EA9                        C6            .byte	$C6
13228 2EAA                        C6            .byte	$C6
13229 2EAB                        C6            .byte	$C6
13230 2EAC                        7C            .byte	$7C
13231 2EAD                        00            .byte	0
13232 2EAE                        00            .byte	0
13233 2EAF                        00            .byte	0
13234 2EB0                        00            .byte	0
13235                                           ! 1553  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13236 2EB1                        00            .byte	0
13237 2EB2                        60            .byte	$60
13238 2EB3                        30            .byte	$30
13239 2EB4                        18            .byte	$18
13240 2EB5                        00            .byte	0
13241 2EB6                        7C            .byte	$7C
13242 2EB7                        C6            .byte	$C6
13243 2EB8                        C6            .byte	$C6
13244 2EB9                        C6            .byte	$C6
13245 2EBA                        C6            .byte	$C6
13246 2EBB                        C6            .byte	$C6
13247 2EBC                        7C            .byte	$7C
13248 2EBD                        00            .byte	0
13249 2EBE                        00            .byte	0
13250 2EBF                        00            .byte	0
13251 2EC0                        00            .byte	0
13252                                           ! 1554  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13253 2EC1                        00            .byte	0
13254 2EC2                        30            .byte	$30
13255 2EC3                        78            .byte	$78
13256 2EC4                        CC            .byte	$CC
13257 2EC5                        00            .byte	0
13258 2EC6                        CC            .byte	$CC
13259 2EC7                        CC            .byte	$CC
13260 2EC8                        CC            .byte	$CC
13261 2EC9                        CC            .byte	$CC
13262 2ECA                        CC            .byte	$CC
13263 2ECB                        CC            .byte	$CC
13264 2ECC                        76            .byte	$76
13265 2ECD                        00            .byte	0
13266 2ECE                        00            .byte	0
13267 2ECF                        00            .byte	0
13268 2ED0                        00            .byte	0
13269                                           ! 1555  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13270 2ED1                        00            .byte	0
13271 2ED2                        60            .byte	$60
13272 2ED3                        30            .byte	$30
13273 2ED4                        18            .byte	$18
13274 2ED5                        00            .byte	0
13275 2ED6                        CC            .byte	$CC
13276 2ED7                        CC            .byte	$CC
13277 2ED8                        CC            .byte	$CC
13278 2ED9                        CC            .byte	$CC
13279 2EDA                        CC            .byte	$CC
13280 2EDB                        CC            .byte	$CC
13281 2EDC                        76            .byte	$76
13282 2EDD                        00            .byte	0
13283 2EDE                        00            .byte	0
13284 2EDF                        00            .byte	0
13285 2EE0                        00            .byte	0
13286                                           ! 1556  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13287 2EE1                        00            .byte	0
13288 2EE2                        00            .byte	0
13289 2EE3                        C6            .byte	$C6
13290 2EE4                        00            .byte	0
13291 2EE5                        00            .byte	0
13292 2EE6                        C6            .byte	$C6
13293 2EE7                        C6            .byte	$C6
13294 2EE8                        C6            .byte	$C6
13295 2EE9                        C6            .byte	$C6
13296 2EEA                        C6            .byte	$C6
13297 2EEB                        C6            .byte	$C6
13298 2EEC                        7E            .byte	$7E
13299 2EED                        06            .byte	6
13300 2EEE                        0C            .byte	$C
13301 2EEF                        78            .byte	$78
13302 2EF0                        00            .byte	0
13303                                           ! 1557  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13304 2EF1                        00            .byte	0
13305 2EF2                        C6            .byte	$C6
13306 2EF3                        00            .byte	0
13307 2EF4                        7C            .byte	$7C
13308 2EF5                        C6            .byte	$C6
13309 2EF6                        C6            .byte	$C6
13310 2EF7                        C6            .byte	$C6
13311 2EF8                        C6            .byte	$C6
13312 2EF9                        C6            .byte	$C6
13313 2EFA                        C6            .byte	$C6
13314 2EFB                        C6            .byte	$C6
13315 2EFC                        7C            .byte	$7C
13316 2EFD                        00            .byte	0
13317 2EFE                        00            .byte	0
13318 2EFF                        00            .byte	0
13319 2F00                        00            .byte	0
13320                                           ! 1558  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13321 2F01                        00            .byte	0
13322 2F02                        C6            .byte	$C6
13323 2F03                        00            .byte	0
13324 2F04                        C6            .byte	$C6
13325 2F05                        C6            .byte	$C6
13326 2F06                        C6            .byte	$C6
13327 2F07                        C6            .byte	$C6
13328 2F08                        C6            .byte	$C6
13329 2F09                        C6            .byte	$C6
13330 2F0A                        C6            .byte	$C6
13331 2F0B                        C6            .byte	$C6
13332 2F0C                        7C            .byte	$7C
13333 2F0D                        00            .byte	0
13334 2F0E                        00            .byte	0
13335 2F0F                        00            .byte	0
13336 2F10                        00            .byte	0
13337                                           ! 1559  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13338 2F11                        00            .byte	0
13339 2F12                        18            .byte	$18
13340 2F13                        18            .byte	$18
13341 2F14                        7E            .byte	$7E
13342 2F15                        C3            .byte	$C3
13343 2F16                        C0            .byte	$C0
13344 2F17                        C0            .byte	$C0
13345 2F18                        C0            .byte	$C0
13346 2F19                        C3            .byte	$C3
13347 2F1A                        7E            .byte	$7E
13348 2F1B                        18            .byte	$18
13349 2F1C                        18            .byte	$18
13350 2F1D                        00            .byte	0
13351 2F1E                        00            .byte	0
13352 2F1F                        00            .byte	0
13353 2F20                        00            .byte	0
13354                                           ! 1560  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13355 2F21                        00            .byte	0
13356 2F22                        38            .byte	$38
13357 2F23                        6C            .byte	$6C
13358 2F24                        64            .byte	$64
13359 2F25                        60            .byte	$60
13360 2F26                        F0            .byte	$F0
13361 2F27                        60            .byte	$60
13362 2F28                        60            .byte	$60
13363 2F29                        60            .byte	$60
13364 2F2A                        60            .byte	$60
13365 2F2B                        E6            .byte	$E6
13366 2F2C                        FC            .byte	$FC
13367 2F2D                        00            .byte	0
13368 2F2E                        00            .byte	0
13369 2F2F                        00            .byte	0
13370 2F30                        00            .byte	0
13371                                           ! 1561  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13372 2F31                        00            .byte	0
13373 2F32                        00            .byte	0
13374 2F33                        C3            .byte	$C3
13375 2F34                        66            .byte	$66
13376 2F35                        3C            .byte	$3C
13377 2F36                        18            .byte	$18
13378 2F37                        FF            .byte	$FF
13379 2F38                        18            .byte	$18
13380 2F39                        FF            .byte	$FF
13381 2F3A                        18            .byte	$18
13382 2F3B                        18            .byte	$18
13383 2F3C                        18            .byte	$18
13384 2F3D                        00            .byte	0
13385 2F3E                        00            .byte	0
13386 2F3F                        00            .byte	0
13387 2F40                        00            .byte	0
13388                                           ! 1562  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13389 2F41                        00            .byte	0
13390 2F42                        FC            .byte	$FC
13391 2F43                        66            .byte	$66
13392 2F44                        66            .byte	$66
13393 2F45                        7C            .byte	$7C
13394 2F46                        62            .byte	$62
13395 2F47                        66            .byte	$66
13396 2F48                        6F            .byte	$6F
13397 2F49                        66            .byte	$66
13398 2F4A                        66            .byte	$66
13399 2F4B                        66            .byte	$66
13400 2F4C                        F3            .byte	$F3
13401 2F4D                        00            .byte	0
13402 2F4E                        00            .byte	0
13403 2F4F                        00            .byte	0
13404 2F50                        00            .byte	0
13405                                           ! 1563  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13406 2F51                        00            .byte	0
13407 2F52                        0E            .byte	$E
13408 2F53                        1B            .byte	$1B
13409 2F54                        18            .byte	$18
13410 2F55                        18            .byte	$18
13411 2F56                        18            .byte	$18
13412 2F57                        7E            .byte	$7E
13413 2F58                        18            .byte	$18
13414 2F59                        18            .byte	$18
13415 2F5A                        18            .byte	$18
13416 2F5B                        18            .byte	$18
13417 2F5C                        18            .byte	$18
13418 2F5D                        D8            .byte	$D8
13419 2F5E                        70            .byte	$70
13420 2F5F                        00            .byte	0
13421 2F60                        00            .byte	0
13422                                           ! 1564  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c
13423 2F61                        00            .byte	0
13424 2F62                        18            .byte	$18
13425 2F63                        30            .byte	$30
13426 2F64                        60            .byte	$60
13427 2F65                        00            .byte	0
13428 2F66                        78            .byte	$78
13429                                           ! 1564 , 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13430 2F67                        0C            .byte	$C
13431 2F68                        7C            .byte	$7C
13432 2F69                        CC            .byte	$CC
13433 2F6A                        CC            .byte	$CC
13434 2F6B                        CC            .byte	$CC
13435 2F6C                        76            .byte	$76
13436 2F6D                        00            .byte	0
13437 2F6E                        00            .byte	0
13438 2F6F                        00            .byte	0
13439 2F70                        00            .byte	0
13440                                           ! 1565  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13441 2F71                        00            .byte	0
13442 2F72                        0C            .byte	$C
13443 2F73                        18            .byte	$18
13444 2F74                        30            .byte	$30
13445 2F75                        00            .byte	0
13446 2F76                        38            .byte	$38
13447 2F77                        18            .byte	$18
13448 2F78                        18            .byte	$18
13449 2F79                        18            .byte	$18
13450 2F7A                        18            .byte	$18
13451 2F7B                        18            .byte	$18
13452 2F7C                        3C            .byte	$3C
13453 2F7D                        00            .byte	0
13454 2F7E                        00            .byte	0
13455 2F7F                        00            .byte	0
13456 2F80                        00            .byte	0
13457                                           ! 1566  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13458 2F81                        00            .byte	0
13459 2F82                        18            .byte	$18
13460 2F83                        30            .byte	$30
13461 2F84                        60            .byte	$60
13462 2F85                        00            .byte	0
13463 2F86                        7C            .byte	$7C
13464 2F87                        C6            .byte	$C6
13465 2F88                        C6            .byte	$C6
13466 2F89                        C6            .byte	$C6
13467 2F8A                        C6            .byte	$C6
13468 2F8B                        C6            .byte	$C6
13469 2F8C                        7C            .byte	$7C
13470 2F8D                        00            .byte	0
13471 2F8E                        00            .byte	0
13472 2F8F                        00            .byte	0
13473 2F90                        00            .byte	0
13474                                           ! 1567  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13475 2F91                        00            .byte	0
13476 2F92                        18            .byte	$18
13477 2F93                        30            .byte	$30
13478 2F94                        60            .byte	$60
13479 2F95                        00            .byte	0
13480 2F96                        CC            .byte	$CC
13481 2F97                        CC            .byte	$CC
13482 2F98                        CC            .byte	$CC
13483 2F99                        CC            .byte	$CC
13484 2F9A                        CC            .byte	$CC
13485 2F9B                        CC            .byte	$CC
13486 2F9C                        76            .byte	$76
13487 2F9D                        00            .byte	0
13488 2F9E                        00            .byte	0
13489 2F9F                        00            .byte	0
13490 2FA0                        00            .byte	0
13491                                           ! 1568  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13492 2FA1                        00            .byte	0
13493 2FA2                        00            .byte	0
13494 2FA3                        76            .byte	$76
13495 2FA4                        DC            .byte	$DC
13496 2FA5                        00            .byte	0
13497 2FA6                        DC            .byte	$DC
13498 2FA7                        66            .byte	$66
13499 2FA8                        66            .byte	$66
13500 2FA9                        66            .byte	$66
13501 2FAA                        66            .byte	$66
13502 2FAB                        66            .byte	$66
13503 2FAC                        66            .byte	$66
13504 2FAD                        00            .byte	0
13505 2FAE                        00            .byte	0
13506 2FAF                        00            .byte	0
13507 2FB0                        00            .byte	0
13508                                           ! 1569  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13509 2FB1                        76            .byte	$76
13510 2FB2                        DC            .byte	$DC
13511 2FB3                        00            .byte	0
13512 2FB4                        C6            .byte	$C6
13513 2FB5                        E6            .byte	$E6
13514 2FB6                        F6            .byte	$F6
13515 2FB7                        FE            .byte	$FE
13516 2FB8                        DE            .byte	$DE
13517 2FB9                        CE            .byte	$CE
13518 2FBA                        C6            .byte	$C6
13519 2FBB                        C6            .byte	$C6
13520 2FBC                        C6            .byte	$C6
13521 2FBD                        00            .byte	0
13522 2FBE                        00            .byte	0
13523 2FBF                        00            .byte	0
13524 2FC0                        00            .byte	0
13525                                           ! 1570  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13526 2FC1                        00            .byte	0
13527 2FC2                        3C            .byte	$3C
13528 2FC3                        6C            .byte	$6C
13529 2FC4                        6C            .byte	$6C
13530 2FC5                        3E            .byte	$3E
13531 2FC6                        00            .byte	0
13532 2FC7                        7E            .byte	$7E
13533 2FC8                        00            .byte	0
13534 2FC9                        00            .byte	0
13535 2FCA                        00            .byte	0
13536 2FCB                        00            .byte	0
13537 2FCC                        00            .byte	0
13538 2FCD                        00            .byte	0
13539 2FCE                        00            .byte	0
13540 2FCF                        00            .byte	0
13541 2FD0                        00            .byte	0
13542                                           ! 1571  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13543 2FD1                        00            .byte	0
13544 2FD2                        38            .byte	$38
13545 2FD3                        6C            .byte	$6C
13546 2FD4                        6C            .byte	$6C
13547 2FD5                        38            .byte	$38
13548 2FD6                        00            .byte	0
13549 2FD7                        7C            .byte	$7C
13550 2FD8                        00            .byte	0
13551 2FD9                        00            .byte	0
13552 2FDA                        00            .byte	0
13553 2FDB                        00            .byte	0
13554 2FDC                        00            .byte	0
13555 2FDD                        00            .byte	0
13556 2FDE                        00            .byte	0
13557 2FDF                        00            .byte	0
13558 2FE0                        00            .byte	0
13559                                           ! 1572  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13560 2FE1                        00            .byte	0
13561 2FE2                        00            .byte	0
13562 2FE3                        30            .byte	$30
13563 2FE4                        30            .byte	$30
13564 2FE5                        00            .byte	0
13565 2FE6                        30            .byte	$30
13566 2FE7                        30            .byte	$30
13567 2FE8                        60            .byte	$60
13568 2FE9                        C0            .byte	$C0
13569 2FEA                        C6            .byte	$C6
13570 2FEB                        C6            .byte	$C6
13571 2FEC                        7C            .byte	$7C
13572 2FED                        00            .byte	0
13573 2FEE                        00            .byte	0
13574 2FEF                        00            .byte	0
13575 2FF0                        00            .byte	0
13576                                           ! 1573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13577 2FF1                        00            .byte	0
13578 2FF2                        00            .byte	0
13579 2FF3                        00            .byte	0
13580 2FF4                        00            .byte	0
13581 2FF5                        00            .byte	0
13582 2FF6                        00            .byte	0
13583 2FF7                        FE            .byte	$FE
13584 2FF8                        C0            .byte	$C0
13585 2FF9                        C0            .byte	$C0
13586 2FFA                        C0            .byte	$C0
13587 2FFB                        C0            .byte	$C0
13588 2FFC                        00            .byte	0
13589 2FFD                        00            .byte	0
13590 2FFE                        00            .byte	0
13591 2FFF                        00            .byte	0
13592 3000                        00            .byte	0
13593                                           ! 1574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13594 3001                        00            .byte	0
13595 3002                        00            .byte	0
13596 3003                        00            .byte	0
13597 3004                        00            .byte	0
13598 3005                        00            .byte	0
13599 3006                        00            .byte	0
13600 3007                        FE            .byte	$FE
13601 3008                        06            .byte	6
13602 3009                        06            .byte	6
13603 300A                        06            .byte	6
13604 300B                        06            .byte	6
13605 300C                        00            .byte	0
13606 300D                        00            .byte	0
13607 300E                        00            .byte	0
13608 300F                        00            .byte	0
13609 3010                        00            .byte	0
13610                                           ! 1575  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13611 3011                        00            .byte	0
13612 3012                        C0            .byte	$C0
13613 3013                        C0            .byte	$C0
13614 3014                        C2            .byte	$C2
13615 3015                        C6            .byte	$C6
13616 3016                        CC            .byte	$CC
13617 3017                        18            .byte	$18
13618 3018                        30            .byte	$30
13619 3019                        60            .byte	$60
13620 301A                        CE            .byte	$CE
13621 301B                        9B            .byte	$9B
13622 301C                        06            .byte	6
13623 301D                        0C            .byte	$C
13624 301E                        1F            .byte	$1F
13625 301F                        00            .byte	0
13626 3020                        00            .byte	0
13627                                           ! 1576  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13628 3021                        00            .byte	0
13629 3022                        C0            .byte	$C0
13630 3023                        C0            .byte	$C0
13631 3024                        C2            .byte	$C2
13632 3025                        C6            .byte	$C6
13633 3026                        CC            .byte	$CC
13634 3027                        18            .byte	$18
13635 3028                        30            .byte	$30
13636 3029                        66            .byte	$66
13637 302A                        CE            .byte	$CE
13638 302B                        96            .byte	$96
13639 302C                        3E            .byte	$3E
13640 302D                        06            .byte	6
13641 302E                        06            .byte	6
13642 302F                        00            .byte	0
13643 3030                        00            .byte	0
13644                                           ! 1577  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13645 3031                        00            .byte	0
13646 3032                        00            .byte	0
13647 3033                        18            .byte	$18
13648 3034                        18            .byte	$18
13649 3035                        00            .byte	0
13650 3036                        18            .byte	$18
13651 3037                        18            .byte	$18
13652 3038                        18            .byte	$18
13653 3039                        3C            .byte	$3C
13654 303A                        3C            .byte	$3C
13655 303B                        3C            .byte	$3C
13656 303C                        18            .byte	$18
13657 303D                        00            .byte	0
13658 303E                        00            .byte	0
13659 303F                        00            .byte	0
13660 3040                        00            .byte	0
13661                                           ! 1578  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13662 3041                        00            .byte	0
13663 3042                        00            .byte	0
13664 3043                        00            .byte	0
13665 3044                        00            .byte	0
13666 3045                        00            .byte	0
13667 3046                        36            .byte	$36
13668 3047                        6C            .byte	$6C
13669 3048                        D8            .byte	$D8
13670 3049                        6C            .byte	$6C
13671 304A                        36            .byte	$36
13672 304B                        00            .byte	0
13673 304C                        00            .byte	0
13674 304D                        00            .byte	0
13675 304E                        00            .byte	0
13676 304F                        00            .byte	0
13677 3050                        00            .byte	0
13678                                           ! 1579  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13679 3051                        00            .byte	0
13680 3052                        00            .byte	0
13681 3053                        00            .byte	0
13682 3054                        00            .byte	0
13683 3055                        00            .byte	0
13684 3056                        D8            .byte	$D8
13685 3057                        6C            .byte	$6C
13686 3058                        36            .byte	$36
13687 3059                        6C            .byte	$6C
13688 305A                        D8            .byte	$D8
13689 305B                        00            .byte	0
13690 305C                        00            .byte	0
13691 305D                        00            .byte	0
13692 305E                        00            .byte	0
13693 305F                        00            .byte	0
13694 3060                        00            .byte	0
13695                                           ! 1580  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13696 3061                        11            .byte	$11
13697 3062                        44            .byte	$44
13698 3063                        11            .byte	$11
13699 3064                        44            .byte	$44
13700 3065                        11            .byte	$11
13701 3066                        44            .byte	$44
13702 3067                        11            .byte	$11
13703 3068                        44            .byte	$44
13704 3069                        11            .byte	$11
13705 306A                        44            .byte	$44
13706 306B                        11            .byte	$11
13707 306C                        44            .byte	$44
13708 306D                        11            .byte	$11
13709 306E                        44            .byte	$44
13710 306F                        11            .byte	$11
13711 3070                        44            .byte	$44
13712                                           ! 1581  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13713 3071                        55            .byte	$55
13714 3072                        AA            .byte	$AA
13715 3073                        55            .byte	$55
13716 3074                        AA            .byte	$AA
13717 3075                        55            .byte	$55
13718 3076                        AA            .byte	$AA
13719 3077                        55            .byte	$55
13720 3078                        AA            .byte	$AA
13721 3079                        55            .byte	$55
13722 307A                        AA            .byte	$AA
13723 307B                        55            .byte	$55
13724 307C                        AA            .byte	$AA
13725 307D                        55            .byte	$55
13726 307E                        AA            .byte	$AA
13727 307F                        55            .byte	$55
13728 3080                        AA            .byte	$AA
13729                                           ! 1582  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13730 3081                        DD            .byte	$DD
13731 3082                        77            .byte	$77
13732 3083                        DD            .byte	$DD
13733 3084                        77            .byte	$77
13734 3085                        DD            .byte	$DD
13735 3086                        77            .byte	$77
13736 3087                        DD            .byte	$DD
13737 3088                        77            .byte	$77
13738 3089                        DD            .byte	$DD
13739 308A                        77            .byte	$77
13740 308B                        DD            .byte	$DD
13741 308C                        77            .byte	$77
13742 308D                        DD            .byte	$DD
13743 308E                        77            .byte	$77
13744 308F                        DD            .byte	$DD
13745 3090                        77            .byte	$77
13746                                           ! 1583  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13747 3091                        18            .byte	$18
13748 3092                        18            .byte	$18
13749 3093                        18            .byte	$18
13750 3094                        18            .byte	$18
13751 3095                        18            .byte	$18
13752 3096                        18            .byte	$18
13753 3097                        18            .byte	$18
13754 3098                        18            .byte	$18
13755 3099                        18            .byte	$18
13756 309A                        18            .byte	$18
13757 309B                        18            .byte	$18
13758 309C                        18            .byte	$18
13759 309D                        18            .byte	$18
13760 309E                        18            .byte	$18
13761 309F                        18            .byte	$18
13762 30A0                        18            .byte	$18
13763                                           ! 1584  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13764 30A1                        18            .byte	$18
13765 30A2                        18            .byte	$18
13766 30A3                        18            .byte	$18
13767 30A4                        18            .byte	$18
13768 30A5                        18            .byte	$18
13769 30A6                        18            .byte	$18
13770 30A7                        18            .byte	$18
13771 30A8                        F8            .byte	$F8
13772 30A9                        18            .byte	$18
13773 30AA                        18            .byte	$18
13774 30AB                        18            .byte	$18
13775 30AC                        18            .byte	$18
13776 30AD                        18            .byte	$18
13777 30AE                        18            .byte	$18
13778 30AF                        18            .byte	$18
13779 30B0                        18            .byte	$18
13780                                           ! 1585  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x1
13781 30B1                        18            .byte	$18
13782 30B2                        18            .byte	$18
13783 30B3                        18            .byte	$18
13784 30B4                        18            .byte	$18
13785 30B5                        18            .byte	$18
13786 30B6                        F8            .byte	$F8
13787 30B7                        18            .byte	$18
13788 30B8                        F8            .byte	$F8
13789                                           ! 1585 8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13790 30B9                        18            .byte	$18
13791 30BA                        18            .byte	$18
13792 30BB                        18            .byte	$18
13793 30BC                        18            .byte	$18
13794 30BD                        18            .byte	$18
13795 30BE                        18            .byte	$18
13796 30BF                        18            .byte	$18
13797 30C0                        18            .byte	$18
13798                                           ! 1586  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13799 30C1                        36            .byte	$36
13800 30C2                        36            .byte	$36
13801 30C3                        36            .byte	$36
13802 30C4                        36            .byte	$36
13803 30C5                        36            .byte	$36
13804 30C6                        36            .byte	$36
13805 30C7                        36            .byte	$36
13806 30C8                        F6            .byte	$F6
13807 30C9                        36            .byte	$36
13808 30CA                        36            .byte	$36
13809 30CB                        36            .byte	$36
13810 30CC                        36            .byte	$36
13811 30CD                        36            .byte	$36
13812 30CE                        36            .byte	$36
13813 30CF                        36            .byte	$36
13814 30D0                        36            .byte	$36
13815                                           ! 1587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13816 30D1                        00            .byte	0
13817 30D2                        00            .byte	0
13818 30D3                        00            .byte	0
13819 30D4                        00            .byte	0
13820 30D5                        00            .byte	0
13821 30D6                        00            .byte	0
13822 30D7                        00            .byte	0
13823 30D8                        FE            .byte	$FE
13824 30D9                        36            .byte	$36
13825 30DA                        36            .byte	$36
13826 30DB                        36            .byte	$36
13827 30DC                        36            .byte	$36
13828 30DD                        36            .byte	$36
13829 30DE                        36            .byte	$36
13830 30DF                        36            .byte	$36
13831 30E0                        36            .byte	$36
13832                                           ! 1588  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13833 30E1                        00            .byte	0
13834 30E2                        00            .byte	0
13835 30E3                        00            .byte	0
13836 30E4                        00            .byte	0
13837 30E5                        00            .byte	0
13838 30E6                        F8            .byte	$F8
13839 30E7                        18            .byte	$18
13840 30E8                        F8            .byte	$F8
13841 30E9                        18            .byte	$18
13842 30EA                        18            .byte	$18
13843 30EB                        18            .byte	$18
13844 30EC                        18            .byte	$18
13845 30ED                        18            .byte	$18
13846 30EE                        18            .byte	$18
13847 30EF                        18            .byte	$18
13848 30F0                        18            .byte	$18
13849                                           ! 1589  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13850 30F1                        36            .byte	$36
13851 30F2                        36            .byte	$36
13852 30F3                        36            .byte	$36
13853 30F4                        36            .byte	$36
13854 30F5                        36            .byte	$36
13855 30F6                        F6            .byte	$F6
13856 30F7                        06            .byte	6
13857 30F8                        F6            .byte	$F6
13858 30F9                        36            .byte	$36
13859 30FA                        36            .byte	$36
13860 30FB                        36            .byte	$36
13861 30FC                        36            .byte	$36
13862 30FD                        36            .byte	$36
13863 30FE                        36            .byte	$36
13864 30FF                        36            .byte	$36
13865 3100                        36            .byte	$36
13866                                           ! 1590  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13867 3101                        36            .byte	$36
13868 3102                        36            .byte	$36
13869 3103                        36            .byte	$36
13870 3104                        36            .byte	$36
13871 3105                        36            .byte	$36
13872 3106                        36            .byte	$36
13873 3107                        36            .byte	$36
13874 3108                        36            .byte	$36
13875 3109                        36            .byte	$36
13876 310A                        36            .byte	$36
13877 310B                        36            .byte	$36
13878 310C                        36            .byte	$36
13879 310D                        36            .byte	$36
13880 310E                        36            .byte	$36
13881 310F                        36            .byte	$36
13882 3110                        36            .byte	$36
13883                                           ! 1591  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13884 3111                        00            .byte	0
13885 3112                        00            .byte	0
13886 3113                        00            .byte	0
13887 3114                        00            .byte	0
13888 3115                        00            .byte	0
13889 3116                        FE            .byte	$FE
13890 3117                        06            .byte	6
13891 3118                        F6            .byte	$F6
13892 3119                        36            .byte	$36
13893 311A                        36            .byte	$36
13894 311B                        36            .byte	$36
13895 311C                        36            .byte	$36
13896 311D                        36            .byte	$36
13897 311E                        36            .byte	$36
13898 311F                        36            .byte	$36
13899 3120                        36            .byte	$36
13900                                           ! 1592  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13901 3121                        36            .byte	$36
13902 3122                        36            .byte	$36
13903 3123                        36            .byte	$36
13904 3124                        36            .byte	$36
13905 3125                        36            .byte	$36
13906 3126                        F6            .byte	$F6
13907 3127                        06            .byte	6
13908 3128                        FE            .byte	$FE
13909 3129                        00            .byte	0
13910 312A                        00            .byte	0
13911 312B                        00            .byte	0
13912 312C                        00            .byte	0
13913 312D                        00            .byte	0
13914 312E                        00            .byte	0
13915 312F                        00            .byte	0
13916 3130                        00            .byte	0
13917                                           ! 1593  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13918 3131                        36            .byte	$36
13919 3132                        36            .byte	$36
13920 3133                        36            .byte	$36
13921 3134                        36            .byte	$36
13922 3135                        36            .byte	$36
13923 3136                        36            .byte	$36
13924 3137                        36            .byte	$36
13925 3138                        FE            .byte	$FE
13926 3139                        00            .byte	0
13927 313A                        00            .byte	0
13928 313B                        00            .byte	0
13929 313C                        00            .byte	0
13930 313D                        00            .byte	0
13931 313E                        00            .byte	0
13932 313F                        00            .byte	0
13933 3140                        00            .byte	0
13934                                           ! 1594  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13935 3141                        18            .byte	$18
13936 3142                        18            .byte	$18
13937 3143                        18            .byte	$18
13938 3144                        18            .byte	$18
13939 3145                        18            .byte	$18
13940 3146                        F8            .byte	$F8
13941 3147                        18            .byte	$18
13942 3148                        F8            .byte	$F8
13943 3149                        00            .byte	0
13944 314A                        00            .byte	0
13945 314B                        00            .byte	0
13946 314C                        00            .byte	0
13947 314D                        00            .byte	0
13948 314E                        00            .byte	0
13949 314F                        00            .byte	0
13950 3150                        00            .byte	0
13951                                           ! 1595  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13952 3151                        00            .byte	0
13953 3152                        00            .byte	0
13954 3153                        00            .byte	0
13955 3154                        00            .byte	0
13956 3155                        00            .byte	0
13957 3156                        00            .byte	0
13958 3157                        00            .byte	0
13959 3158                        F8            .byte	$F8
13960 3159                        18            .byte	$18
13961 315A                        18            .byte	$18
13962 315B                        18            .byte	$18
13963 315C                        18            .byte	$18
13964 315D                        18            .byte	$18
13965 315E                        18            .byte	$18
13966 315F                        18            .byte	$18
13967 3160                        18            .byte	$18
13968                                           ! 1596  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13969 3161                        18            .byte	$18
13970 3162                        18            .byte	$18
13971 3163                        18            .byte	$18
13972 3164                        18            .byte	$18
13973 3165                        18            .byte	$18
13974 3166                        18            .byte	$18
13975 3167                        18            .byte	$18
13976 3168                        1F            .byte	$1F
13977 3169                        00            .byte	0
13978 316A                        00            .byte	0
13979 316B                        00            .byte	0
13980 316C                        00            .byte	0
13981 316D                        00            .byte	0
13982 316E                        00            .byte	0
13983 316F                        00            .byte	0
13984 3170                        00            .byte	0
13985                                           ! 1597  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13986 3171                        18            .byte	$18
13987 3172                        18            .byte	$18
13988 3173                        18            .byte	$18
13989 3174                        18            .byte	$18
13990 3175                        18            .byte	$18
13991 3176                        18            .byte	$18
13992 3177                        18            .byte	$18
13993 3178                        FF            .byte	$FF
13994 3179                        00            .byte	0
13995 317A                        00            .byte	0
13996 317B                        00            .byte	0
13997 317C                        00            .byte	0
13998 317D                        00            .byte	0
13999 317E                        00            .byte	0
14000 317F                        00            .byte	0
14001 3180                        00            .byte	0
14002                                           ! 1598  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14003 3181                        00            .byte	0
14004 3182                        00            .byte	0
14005 3183                        00            .byte	0
14006 3184                        00            .byte	0
14007 3185                        00            .byte	0
14008 3186                        00            .byte	0
14009 3187                        00            .byte	0
14010 3188                        FF            .byte	$FF
14011 3189                        18            .byte	$18
14012 318A                        18            .byte	$18
14013 318B                        18            .byte	$18
14014 318C                        18            .byte	$18
14015 318D                        18            .byte	$18
14016 318E                        18            .byte	$18
14017 318F                        18            .byte	$18
14018 3190                        18            .byte	$18
14019                                           ! 1599  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14020 3191                        18            .byte	$18
14021 3192                        18            .byte	$18
14022 3193                        18            .byte	$18
14023 3194                        18            .byte	$18
14024 3195                        18            .byte	$18
14025 3196                        18            .byte	$18
14026 3197                        18            .byte	$18
14027 3198                        1F            .byte	$1F
14028 3199                        18            .byte	$18
14029 319A                        18            .byte	$18
14030 319B                        18            .byte	$18
14031 319C                        18            .byte	$18
14032 319D                        18            .byte	$18
14033 319E                        18            .byte	$18
14034 319F                        18            .byte	$18
14035 31A0                        18            .byte	$18
14036                                           ! 1600  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14037 31A1                        00            .byte	0
14038 31A2                        00            .byte	0
14039 31A3                        00            .byte	0
14040 31A4                        00            .byte	0
14041 31A5                        00            .byte	0
14042 31A6                        00            .byte	0
14043 31A7                        00            .byte	0
14044 31A8                        FF            .byte	$FF
14045 31A9                        00            .byte	0
14046 31AA                        00            .byte	0
14047 31AB                        00            .byte	0
14048 31AC                        00            .byte	0
14049 31AD                        00            .byte	0
14050 31AE                        00            .byte	0
14051 31AF                        00            .byte	0
14052 31B0                        00            .byte	0
14053                                           ! 1601  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14054 31B1                        18            .byte	$18
14055 31B2                        18            .byte	$18
14056 31B3                        18            .byte	$18
14057 31B4                        18            .byte	$18
14058 31B5                        18            .byte	$18
14059 31B6                        18            .byte	$18
14060 31B7                        18            .byte	$18
14061 31B8                        FF            .byte	$FF
14062 31B9                        18            .byte	$18
14063 31BA                        18            .byte	$18
14064 31BB                        18            .byte	$18
14065 31BC                        18            .byte	$18
14066 31BD                        18            .byte	$18
14067 31BE                        18            .byte	$18
14068 31BF                        18            .byte	$18
14069 31C0                        18            .byte	$18
14070                                           ! 1602  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14071 31C1                        18            .byte	$18
14072 31C2                        18            .byte	$18
14073 31C3                        18            .byte	$18
14074 31C4                        18            .byte	$18
14075 31C5                        18            .byte	$18
14076 31C6                        1F            .byte	$1F
14077 31C7                        18            .byte	$18
14078 31C8                        1F            .byte	$1F
14079 31C9                        18            .byte	$18
14080 31CA                        18            .byte	$18
14081 31CB                        18            .byte	$18
14082 31CC                        18            .byte	$18
14083 31CD                        18            .byte	$18
14084 31CE                        18            .byte	$18
14085 31CF                        18            .byte	$18
14086 31D0                        18            .byte	$18
14087                                           ! 1603  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14088 31D1                        36            .byte	$36
14089 31D2                        36            .byte	$36
14090 31D3                        36            .byte	$36
14091 31D4                        36            .byte	$36
14092 31D5                        36            .byte	$36
14093 31D6                        36            .byte	$36
14094 31D7                        36            .byte	$36
14095 31D8                        37            .byte	$37
14096 31D9                        36            .byte	$36
14097 31DA                        36            .byte	$36
14098 31DB                        36            .byte	$36
14099 31DC                        36            .byte	$36
14100 31DD                        36            .byte	$36
14101 31DE                        36            .byte	$36
14102 31DF                        36            .byte	$36
14103 31E0                        36            .byte	$36
14104                                           ! 1604  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14105 31E1                        36            .byte	$36
14106 31E2                        36            .byte	$36
14107 31E3                        36            .byte	$36
14108 31E4                        36            .byte	$36
14109 31E5                        36            .byte	$36
14110 31E6                        37            .byte	$37
14111 31E7                        30            .byte	$30
14112 31E8                        3F            .byte	$3F
14113 31E9                        00            .byte	0
14114 31EA                        00            .byte	0
14115 31EB                        00            .byte	0
14116 31EC                        00            .byte	0
14117 31ED                        00            .byte	0
14118 31EE                        00            .byte	0
14119 31EF                        00            .byte	0
14120 31F0                        00            .byte	0
14121                                           ! 1605  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14122 31F1                        00            .byte	0
14123 31F2                        00            .byte	0
14124 31F3                        00            .byte	0
14125 31F4                        00            .byte	0
14126 31F5                        00            .byte	0
14127 31F6                        3F            .byte	$3F
14128 31F7                        30            .byte	$30
14129 31F8                        37            .byte	$37
14130 31F9                        36            .byte	$36
14131 31FA                        36            .byte	$36
14132 31FB                        36            .byte	$36
14133 31FC                        36            .byte	$36
14134 31FD                        36            .byte	$36
14135 31FE                        36            .byte	$36
14136 31FF                        36            .byte	$36
14137 3200                        36            .byte	$36
14138                                           ! 1606  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x
14139 3201                        36            .byte	$36
14140 3202                        36            .byte	$36
14141 3203                        36            .byte	$36
14142 3204                        36            .byte	$36
14143 3205                        36            .byte	$36
14144 3206                        F7            .byte	$F7
14145 3207                        00            .byte	0
14146 3208                        FF            .byte	$FF
14147 3209                        00            .byte	0
14148 320A                        00            .byte	0
14149                                           ! 1606 00, 0x00, 0x00, 0x00, 0x00, 0x00,
14150 320B                        00            .byte	0
14151 320C                        00            .byte	0
14152 320D                        00            .byte	0
14153 320E                        00            .byte	0
14154 320F                        00            .byte	0
14155 3210                        00            .byte	0
14156                                           ! 1607  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14157 3211                        00            .byte	0
14158 3212                        00            .byte	0
14159 3213                        00            .byte	0
14160 3214                        00            .byte	0
14161 3215                        00            .byte	0
14162 3216                        FF            .byte	$FF
14163 3217                        00            .byte	0
14164 3218                        F7            .byte	$F7
14165 3219                        36            .byte	$36
14166 321A                        36            .byte	$36
14167 321B                        36            .byte	$36
14168 321C                        36            .byte	$36
14169 321D                        36            .byte	$36
14170 321E                        36            .byte	$36
14171 321F                        36            .byte	$36
14172 3220                        36            .byte	$36
14173                                           ! 1608  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14174 3221                        36            .byte	$36
14175 3222                        36            .byte	$36
14176 3223                        36            .byte	$36
14177 3224                        36            .byte	$36
14178 3225                        36            .byte	$36
14179 3226                        37            .byte	$37
14180 3227                        30            .byte	$30
14181 3228                        37            .byte	$37
14182 3229                        36            .byte	$36
14183 322A                        36            .byte	$36
14184 322B                        36            .byte	$36
14185 322C                        36            .byte	$36
14186 322D                        36            .byte	$36
14187 322E                        36            .byte	$36
14188 322F                        36            .byte	$36
14189 3230                        36            .byte	$36
14190                                           ! 1609  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14191 3231                        00            .byte	0
14192 3232                        00            .byte	0
14193 3233                        00            .byte	0
14194 3234                        00            .byte	0
14195 3235                        00            .byte	0
14196 3236                        FF            .byte	$FF
14197 3237                        00            .byte	0
14198 3238                        FF            .byte	$FF
14199 3239                        00            .byte	0
14200 323A                        00            .byte	0
14201 323B                        00            .byte	0
14202 323C                        00            .byte	0
14203 323D                        00            .byte	0
14204 323E                        00            .byte	0
14205 323F                        00            .byte	0
14206 3240                        00            .byte	0
14207                                           ! 1610  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14208 3241                        36            .byte	$36
14209 3242                        36            .byte	$36
14210 3243                        36            .byte	$36
14211 3244                        36            .byte	$36
14212 3245                        36            .byte	$36
14213 3246                        F7            .byte	$F7
14214 3247                        00            .byte	0
14215 3248                        F7            .byte	$F7
14216 3249                        36            .byte	$36
14217 324A                        36            .byte	$36
14218 324B                        36            .byte	$36
14219 324C                        36            .byte	$36
14220 324D                        36            .byte	$36
14221 324E                        36            .byte	$36
14222 324F                        36            .byte	$36
14223 3250                        36            .byte	$36
14224                                           ! 1611  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14225 3251                        18            .byte	$18
14226 3252                        18            .byte	$18
14227 3253                        18            .byte	$18
14228 3254                        18            .byte	$18
14229 3255                        18            .byte	$18
14230 3256                        FF            .byte	$FF
14231 3257                        00            .byte	0
14232 3258                        FF            .byte	$FF
14233 3259                        00            .byte	0
14234 325A                        00            .byte	0
14235 325B                        00            .byte	0
14236 325C                        00            .byte	0
14237 325D                        00            .byte	0
14238 325E                        00            .byte	0
14239 325F                        00            .byte	0
14240 3260                        00            .byte	0
14241                                           ! 1612  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14242 3261                        36            .byte	$36
14243 3262                        36            .byte	$36
14244 3263                        36            .byte	$36
14245 3264                        36            .byte	$36
14246 3265                        36            .byte	$36
14247 3266                        36            .byte	$36
14248 3267                        36            .byte	$36
14249 3268                        FF            .byte	$FF
14250 3269                        00            .byte	0
14251 326A                        00            .byte	0
14252 326B                        00            .byte	0
14253 326C                        00            .byte	0
14254 326D                        00            .byte	0
14255 326E                        00            .byte	0
14256 326F                        00            .byte	0
14257 3270                        00            .byte	0
14258                                           ! 1613  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14259 3271                        00            .byte	0
14260 3272                        00            .byte	0
14261 3273                        00            .byte	0
14262 3274                        00            .byte	0
14263 3275                        00            .byte	0
14264 3276                        FF            .byte	$FF
14265 3277                        00            .byte	0
14266 3278                        FF            .byte	$FF
14267 3279                        18            .byte	$18
14268 327A                        18            .byte	$18
14269 327B                        18            .byte	$18
14270 327C                        18            .byte	$18
14271 327D                        18            .byte	$18
14272 327E                        18            .byte	$18
14273 327F                        18            .byte	$18
14274 3280                        18            .byte	$18
14275                                           ! 1614  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14276 3281                        00            .byte	0
14277 3282                        00            .byte	0
14278 3283                        00            .byte	0
14279 3284                        00            .byte	0
14280 3285                        00            .byte	0
14281 3286                        00            .byte	0
14282 3287                        00            .byte	0
14283 3288                        FF            .byte	$FF
14284 3289                        36            .byte	$36
14285 328A                        36            .byte	$36
14286 328B                        36            .byte	$36
14287 328C                        36            .byte	$36
14288 328D                        36            .byte	$36
14289 328E                        36            .byte	$36
14290 328F                        36            .byte	$36
14291 3290                        36            .byte	$36
14292                                           ! 1615  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14293 3291                        36            .byte	$36
14294 3292                        36            .byte	$36
14295 3293                        36            .byte	$36
14296 3294                        36            .byte	$36
14297 3295                        36            .byte	$36
14298 3296                        36            .byte	$36
14299 3297                        36            .byte	$36
14300 3298                        3F            .byte	$3F
14301 3299                        00            .byte	0
14302 329A                        00            .byte	0
14303 329B                        00            .byte	0
14304 329C                        00            .byte	0
14305 329D                        00            .byte	0
14306 329E                        00            .byte	0
14307 329F                        00            .byte	0
14308 32A0                        00            .byte	0
14309                                           ! 1616  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14310 32A1                        18            .byte	$18
14311 32A2                        18            .byte	$18
14312 32A3                        18            .byte	$18
14313 32A4                        18            .byte	$18
14314 32A5                        18            .byte	$18
14315 32A6                        1F            .byte	$1F
14316 32A7                        18            .byte	$18
14317 32A8                        1F            .byte	$1F
14318 32A9                        00            .byte	0
14319 32AA                        00            .byte	0
14320 32AB                        00            .byte	0
14321 32AC                        00            .byte	0
14322 32AD                        00            .byte	0
14323 32AE                        00            .byte	0
14324 32AF                        00            .byte	0
14325 32B0                        00            .byte	0
14326                                           ! 1617  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14327 32B1                        00            .byte	0
14328 32B2                        00            .byte	0
14329 32B3                        00            .byte	0
14330 32B4                        00            .byte	0
14331 32B5                        00            .byte	0
14332 32B6                        1F            .byte	$1F
14333 32B7                        18            .byte	$18
14334 32B8                        1F            .byte	$1F
14335 32B9                        18            .byte	$18
14336 32BA                        18            .byte	$18
14337 32BB                        18            .byte	$18
14338 32BC                        18            .byte	$18
14339 32BD                        18            .byte	$18
14340 32BE                        18            .byte	$18
14341 32BF                        18            .byte	$18
14342 32C0                        18            .byte	$18
14343                                           ! 1618  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14344 32C1                        00            .byte	0
14345 32C2                        00            .byte	0
14346 32C3                        00            .byte	0
14347 32C4                        00            .byte	0
14348 32C5                        00            .byte	0
14349 32C6                        00            .byte	0
14350 32C7                        00            .byte	0
14351 32C8                        3F            .byte	$3F
14352 32C9                        36            .byte	$36
14353 32CA                        36            .byte	$36
14354 32CB                        36            .byte	$36
14355 32CC                        36            .byte	$36
14356 32CD                        36            .byte	$36
14357 32CE                        36            .byte	$36
14358 32CF                        36            .byte	$36
14359 32D0                        36            .byte	$36
14360                                           ! 1619  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14361 32D1                        36            .byte	$36
14362 32D2                        36            .byte	$36
14363 32D3                        36            .byte	$36
14364 32D4                        36            .byte	$36
14365 32D5                        36            .byte	$36
14366 32D6                        36            .byte	$36
14367 32D7                        36            .byte	$36
14368 32D8                        FF            .byte	$FF
14369 32D9                        36            .byte	$36
14370 32DA                        36            .byte	$36
14371 32DB                        36            .byte	$36
14372 32DC                        36            .byte	$36
14373 32DD                        36            .byte	$36
14374 32DE                        36            .byte	$36
14375 32DF                        36            .byte	$36
14376 32E0                        36            .byte	$36
14377                                           ! 1620  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14378 32E1                        18            .byte	$18
14379 32E2                        18            .byte	$18
14380 32E3                        18            .byte	$18
14381 32E4                        18            .byte	$18
14382 32E5                        18            .byte	$18
14383 32E6                        FF            .byte	$FF
14384 32E7                        18            .byte	$18
14385 32E8                        FF            .byte	$FF
14386 32E9                        18            .byte	$18
14387 32EA                        18            .byte	$18
14388 32EB                        18            .byte	$18
14389 32EC                        18            .byte	$18
14390 32ED                        18            .byte	$18
14391 32EE                        18            .byte	$18
14392 32EF                        18            .byte	$18
14393 32F0                        18            .byte	$18
14394                                           ! 1621  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14395 32F1                        18            .byte	$18
14396 32F2                        18            .byte	$18
14397 32F3                        18            .byte	$18
14398 32F4                        18            .byte	$18
14399 32F5                        18            .byte	$18
14400 32F6                        18            .byte	$18
14401 32F7                        18            .byte	$18
14402 32F8                        F8            .byte	$F8
14403 32F9                        00            .byte	0
14404 32FA                        00            .byte	0
14405 32FB                        00            .byte	0
14406 32FC                        00            .byte	0
14407 32FD                        00            .byte	0
14408 32FE                        00            .byte	0
14409 32FF                        00            .byte	0
14410 3300                        00            .byte	0
14411                                           ! 1622  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14412 3301                        00            .byte	0
14413 3302                        00            .byte	0
14414 3303                        00            .byte	0
14415 3304                        00            .byte	0
14416 3305                        00            .byte	0
14417 3306                        00            .byte	0
14418 3307                        00            .byte	0
14419 3308                        1F            .byte	$1F
14420 3309                        18            .byte	$18
14421 330A                        18            .byte	$18
14422 330B                        18            .byte	$18
14423 330C                        18            .byte	$18
14424 330D                        18            .byte	$18
14425 330E                        18            .byte	$18
14426 330F                        18            .byte	$18
14427 3310                        18            .byte	$18
14428                                           ! 1623  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14429 3311                        FF            .byte	$FF
14430 3312                        FF            .byte	$FF
14431 3313                        FF            .byte	$FF
14432 3314                        FF            .byte	$FF
14433 3315                        FF            .byte	$FF
14434 3316                        FF            .byte	$FF
14435 3317                        FF            .byte	$FF
14436 3318                        FF            .byte	$FF
14437 3319                        FF            .byte	$FF
14438 331A                        FF            .byte	$FF
14439 331B                        FF            .byte	$FF
14440 331C                        FF            .byte	$FF
14441 331D                        FF            .byte	$FF
14442 331E                        FF            .byte	$FF
14443 331F                        FF            .byte	$FF
14444 3320                        FF            .byte	$FF
14445                                           ! 1624  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14446 3321                        00            .byte	0
14447 3322                        00            .byte	0
14448 3323                        00            .byte	0
14449 3324                        00            .byte	0
14450 3325                        00            .byte	0
14451 3326                        00            .byte	0
14452 3327                        00            .byte	0
14453 3328                        FF            .byte	$FF
14454 3329                        FF            .byte	$FF
14455 332A                        FF            .byte	$FF
14456 332B                        FF            .byte	$FF
14457 332C                        FF            .byte	$FF
14458 332D                        FF            .byte	$FF
14459 332E                        FF            .byte	$FF
14460 332F                        FF            .byte	$FF
14461 3330                        FF            .byte	$FF
14462                                           ! 1625  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14463 3331                        F0            .byte	$F0
14464 3332                        F0            .byte	$F0
14465 3333                        F0            .byte	$F0
14466 3334                        F0            .byte	$F0
14467 3335                        F0            .byte	$F0
14468 3336                        F0            .byte	$F0
14469 3337                        F0            .byte	$F0
14470 3338                        F0            .byte	$F0
14471 3339                        F0            .byte	$F0
14472 333A                        F0            .byte	$F0
14473 333B                        F0            .byte	$F0
14474 333C                        F0            .byte	$F0
14475 333D                        F0            .byte	$F0
14476 333E                        F0            .byte	$F0
14477 333F                        F0            .byte	$F0
14478 3340                        F0            .byte	$F0
14479                                           ! 1626  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14480 3341                        0F            .byte	$F
14481 3342                        0F            .byte	$F
14482 3343                        0F            .byte	$F
14483 3344                        0F            .byte	$F
14484 3345                        0F            .byte	$F
14485 3346                        0F            .byte	$F
14486 3347                        0F            .byte	$F
14487 3348                        0F            .byte	$F
14488 3349                        0F            .byte	$F
14489 334A                        0F            .byte	$F
14490 334B                        0F            .byte	$F
14491 334C                        0F            .byte	$F
14492 334D                        0F            .byte	$F
14493 334E                        0F            .byte	$F
14494 334F                        0F            .byte	$F
14495 3350                        0F            .byte	$F
14496                                           ! 1627  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0
14497 3351                        FF            .byte	$FF
14498 3352                        FF            .byte	$FF
14499 3353                        FF            .byte	$FF
14500 3354                        FF            .byte	$FF
14501 3355                        FF            .byte	$FF
14502 3356                        FF            .byte	$FF
14503 3357                        FF            .byte	$FF
14504 3358                        00            .byte	0
14505 3359                        00            .byte	0
14506 335A                        00            .byte	0
14507 335B                        00            .byte	0
14508 335C                        00            .byte	0
14509                                           ! 1627 x00, 0x00, 0x00, 0x00,
14510 335D                        00            .byte	0
14511 335E                        00            .byte	0
14512 335F                        00            .byte	0
14513 3360                        00            .byte	0
14514                                           ! 1628  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14515 3361                        00            .byte	0
14516 3362                        00            .byte	0
14517 3363                        00            .byte	0
14518 3364                        00            .byte	0
14519 3365                        00            .byte	0
14520 3366                        76            .byte	$76
14521 3367                        DC            .byte	$DC
14522 3368                        D8            .byte	$D8
14523 3369                        D8            .byte	$D8
14524 336A                        D8            .byte	$D8
14525 336B                        DC            .byte	$DC
14526 336C                        76            .byte	$76
14527 336D                        00            .byte	0
14528 336E                        00            .byte	0
14529 336F                        00            .byte	0
14530 3370                        00            .byte	0
14531                                           ! 1629  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14532 3371                        00            .byte	0
14533 3372                        00            .byte	0
14534 3373                        78            .byte	$78
14535 3374                        CC            .byte	$CC
14536 3375                        CC            .byte	$CC
14537 3376                        CC            .byte	$CC
14538 3377                        D8            .byte	$D8
14539 3378                        CC            .byte	$CC
14540 3379                        C6            .byte	$C6
14541 337A                        C6            .byte	$C6
14542 337B                        C6            .byte	$C6
14543 337C                        CC            .byte	$CC
14544 337D                        00            .byte	0
14545 337E                        00            .byte	0
14546 337F                        00            .byte	0
14547 3380                        00            .byte	0
14548                                           ! 1630  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14549 3381                        00            .byte	0
14550 3382                        00            .byte	0
14551 3383                        FE            .byte	$FE
14552 3384                        C6            .byte	$C6
14553 3385                        C6            .byte	$C6
14554 3386                        C0            .byte	$C0
14555 3387                        C0            .byte	$C0
14556 3388                        C0            .byte	$C0
14557 3389                        C0            .byte	$C0
14558 338A                        C0            .byte	$C0
14559 338B                        C0            .byte	$C0
14560 338C                        C0            .byte	$C0
14561 338D                        00            .byte	0
14562 338E                        00            .byte	0
14563 338F                        00            .byte	0
14564 3390                        00            .byte	0
14565                                           ! 1631  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14566 3391                        00            .byte	0
14567 3392                        00            .byte	0
14568 3393                        00            .byte	0
14569 3394                        00            .byte	0
14570 3395                        FE            .byte	$FE
14571 3396                        6C            .byte	$6C
14572 3397                        6C            .byte	$6C
14573 3398                        6C            .byte	$6C
14574 3399                        6C            .byte	$6C
14575 339A                        6C            .byte	$6C
14576 339B                        6C            .byte	$6C
14577 339C                        6C            .byte	$6C
14578 339D                        00            .byte	0
14579 339E                        00            .byte	0
14580 339F                        00            .byte	0
14581 33A0                        00            .byte	0
14582                                           ! 1632  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14583 33A1                        00            .byte	0
14584 33A2                        00            .byte	0
14585 33A3                        00            .byte	0
14586 33A4                        FE            .byte	$FE
14587 33A5                        C6            .byte	$C6
14588 33A6                        60            .byte	$60
14589 33A7                        30            .byte	$30
14590 33A8                        18            .byte	$18
14591 33A9                        30            .byte	$30
14592 33AA                        60            .byte	$60
14593 33AB                        C6            .byte	$C6
14594 33AC                        FE            .byte	$FE
14595 33AD                        00            .byte	0
14596 33AE                        00            .byte	0
14597 33AF                        00            .byte	0
14598 33B0                        00            .byte	0
14599                                           ! 1633  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14600 33B1                        00            .byte	0
14601 33B2                        00            .byte	0
14602 33B3                        00            .byte	0
14603 33B4                        00            .byte	0
14604 33B5                        00            .byte	0
14605 33B6                        7E            .byte	$7E
14606 33B7                        D8            .byte	$D8
14607 33B8                        D8            .byte	$D8
14608 33B9                        D8            .byte	$D8
14609 33BA                        D8            .byte	$D8
14610 33BB                        D8            .byte	$D8
14611 33BC                        70            .byte	$70
14612 33BD                        00            .byte	0
14613 33BE                        00            .byte	0
14614 33BF                        00            .byte	0
14615 33C0                        00            .byte	0
14616                                           ! 1634  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14617 33C1                        00            .byte	0
14618 33C2                        00            .byte	0
14619 33C3                        00            .byte	0
14620 33C4                        00            .byte	0
14621 33C5                        66            .byte	$66
14622 33C6                        66            .byte	$66
14623 33C7                        66            .byte	$66
14624 33C8                        66            .byte	$66
14625 33C9                        66            .byte	$66
14626 33CA                        7C            .byte	$7C
14627 33CB                        60            .byte	$60
14628 33CC                        60            .byte	$60
14629 33CD                        C0            .byte	$C0
14630 33CE                        00            .byte	0
14631 33CF                        00            .byte	0
14632 33D0                        00            .byte	0
14633                                           ! 1635  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14634 33D1                        00            .byte	0
14635 33D2                        00            .byte	0
14636 33D3                        00            .byte	0
14637 33D4                        00            .byte	0
14638 33D5                        76            .byte	$76
14639 33D6                        DC            .byte	$DC
14640 33D7                        18            .byte	$18
14641 33D8                        18            .byte	$18
14642 33D9                        18            .byte	$18
14643 33DA                        18            .byte	$18
14644 33DB                        18            .byte	$18
14645 33DC                        18            .byte	$18
14646 33DD                        00            .byte	0
14647 33DE                        00            .byte	0
14648 33DF                        00            .byte	0
14649 33E0                        00            .byte	0
14650                                           ! 1636  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14651 33E1                        00            .byte	0
14652 33E2                        00            .byte	0
14653 33E3                        00            .byte	0
14654 33E4                        7E            .byte	$7E
14655 33E5                        18            .byte	$18
14656 33E6                        3C            .byte	$3C
14657 33E7                        66            .byte	$66
14658 33E8                        66            .byte	$66
14659 33E9                        66            .byte	$66
14660 33EA                        3C            .byte	$3C
14661 33EB                        18            .byte	$18
14662 33EC                        7E            .byte	$7E
14663 33ED                        00            .byte	0
14664 33EE                        00            .byte	0
14665 33EF                        00            .byte	0
14666 33F0                        00            .byte	0
14667                                           ! 1637  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14668 33F1                        00            .byte	0
14669 33F2                        00            .byte	0
14670 33F3                        00            .byte	0
14671 33F4                        38            .byte	$38
14672 33F5                        6C            .byte	$6C
14673 33F6                        C6            .byte	$C6
14674 33F7                        C6            .byte	$C6
14675 33F8                        FE            .byte	$FE
14676 33F9                        C6            .byte	$C6
14677 33FA                        C6            .byte	$C6
14678 33FB                        6C            .byte	$6C
14679 33FC                        38            .byte	$38
14680 33FD                        00            .byte	0
14681 33FE                        00            .byte	0
14682 33FF                        00            .byte	0
14683 3400                        00            .byte	0
14684                                           ! 1638  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14685 3401                        00            .byte	0
14686 3402                        00            .byte	0
14687 3403                        38            .byte	$38
14688 3404                        6C            .byte	$6C
14689 3405                        C6            .byte	$C6
14690 3406                        C6            .byte	$C6
14691 3407                        C6            .byte	$C6
14692 3408                        6C            .byte	$6C
14693 3409                        6C            .byte	$6C
14694 340A                        6C            .byte	$6C
14695 340B                        6C            .byte	$6C
14696 340C                        EE            .byte	$EE
14697 340D                        00            .byte	0
14698 340E                        00            .byte	0
14699 340F                        00            .byte	0
14700 3410                        00            .byte	0
14701                                           ! 1639  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14702 3411                        00            .byte	0
14703 3412                        00            .byte	0
14704 3413                        1E            .byte	$1E
14705 3414                        30            .byte	$30
14706 3415                        18            .byte	$18
14707 3416                        0C            .byte	$C
14708 3417                        3E            .byte	$3E
14709 3418                        66            .byte	$66
14710 3419                        66            .byte	$66
14711 341A                        66            .byte	$66
14712 341B                        66            .byte	$66
14713 341C                        3C            .byte	$3C
14714 341D                        00            .byte	0
14715 341E                        00            .byte	0
14716 341F                        00            .byte	0
14717 3420                        00            .byte	0
14718                                           ! 1640  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14719 3421                        00            .byte	0
14720 3422                        00            .byte	0
14721 3423                        00            .byte	0
14722 3424                        00            .byte	0
14723 3425                        00            .byte	0
14724 3426                        7E            .byte	$7E
14725 3427                        DB            .byte	$DB
14726 3428                        DB            .byte	$DB
14727 3429                        DB            .byte	$DB
14728 342A                        7E            .byte	$7E
14729 342B                        00            .byte	0
14730 342C                        00            .byte	0
14731 342D                        00            .byte	0
14732 342E                        00            .byte	0
14733 342F                        00            .byte	0
14734 3430                        00            .byte	0
14735                                           ! 1641  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14736 3431                        00            .byte	0
14737 3432                        00            .byte	0
14738 3433                        00            .byte	0
14739 3434                        03            .byte	3
14740 3435                        06            .byte	6
14741 3436                        7E            .byte	$7E
14742 3437                        DB            .byte	$DB
14743 3438                        DB            .byte	$DB
14744 3439                        F3            .byte	$F3
14745 343A                        7E            .byte	$7E
14746 343B                        60            .byte	$60
14747 343C                        C0            .byte	$C0
14748 343D                        00            .byte	0
14749 343E                        00            .byte	0
14750 343F                        00            .byte	0
14751 3440                        00            .byte	0
14752                                           ! 1642  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14753 3441                        00            .byte	0
14754 3442                        00            .byte	0
14755 3443                        1C            .byte	$1C
14756 3444                        30            .byte	$30
14757 3445                        60            .byte	$60
14758 3446                        60            .byte	$60
14759 3447                        7C            .byte	$7C
14760 3448                        60            .byte	$60
14761 3449                        60            .byte	$60
14762 344A                        60            .byte	$60
14763 344B                        30            .byte	$30
14764 344C                        1C            .byte	$1C
14765 344D                        00            .byte	0
14766 344E                        00            .byte	0
14767 344F                        00            .byte	0
14768 3450                        00            .byte	0
14769                                           ! 1643  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14770 3451                        00            .byte	0
14771 3452                        00            .byte	0
14772 3453                        00            .byte	0
14773 3454                        7C            .byte	$7C
14774 3455                        C6            .byte	$C6
14775 3456                        C6            .byte	$C6
14776 3457                        C6            .byte	$C6
14777 3458                        C6            .byte	$C6
14778 3459                        C6            .byte	$C6
14779 345A                        C6            .byte	$C6
14780 345B                        C6            .byte	$C6
14781 345C                        C6            .byte	$C6
14782 345D                        00            .byte	0
14783 345E                        00            .byte	0
14784 345F                        00            .byte	0
14785 3460                        00            .byte	0
14786                                           ! 1644  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14787 3461                        00            .byte	0
14788 3462                        00            .byte	0
14789 3463                        00            .byte	0
14790 3464                        00            .byte	0
14791 3465                        FE            .byte	$FE
14792 3466                        00            .byte	0
14793 3467                        00            .byte	0
14794 3468                        FE            .byte	$FE
14795 3469                        00            .byte	0
14796 346A                        00            .byte	0
14797 346B                        FE            .byte	$FE
14798 346C                        00            .byte	0
14799 346D                        00            .byte	0
14800 346E                        00            .byte	0
14801 346F                        00            .byte	0
14802 3470                        00            .byte	0
14803                                           ! 1645  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14804 3471                        00            .byte	0
14805 3472                        00            .byte	0
14806 3473                        00            .byte	0
14807 3474                        00            .byte	0
14808 3475                        18            .byte	$18
14809 3476                        18            .byte	$18
14810 3477                        7E            .byte	$7E
14811 3478                        18            .byte	$18
14812 3479                        18            .byte	$18
14813 347A                        00            .byte	0
14814 347B                        00            .byte	0
14815 347C                        FF            .byte	$FF
14816 347D                        00            .byte	0
14817 347E                        00            .byte	0
14818 347F                        00            .byte	0
14819 3480                        00            .byte	0
14820                                           ! 1646  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14821 3481                        00            .byte	0
14822 3482                        00            .byte	0
14823 3483                        00            .byte	0
14824 3484                        30            .byte	$30
14825 3485                        18            .byte	$18
14826 3486                        0C            .byte	$C
14827 3487                        06            .byte	6
14828 3488                        0C            .byte	$C
14829 3489                        18            .byte	$18
14830 348A                        30            .byte	$30
14831 348B                        00            .byte	0
14832 348C                        7E            .byte	$7E
14833 348D                        00            .byte	0
14834 348E                        00            .byte	0
14835 348F                        00            .byte	0
14836 3490                        00            .byte	0
14837                                           ! 1647  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14838 3491                        00            .byte	0
14839 3492                        00            .byte	0
14840 3493                        00            .byte	0
14841 3494                        0C            .byte	$C
14842 3495                        18            .byte	$18
14843 3496                        30            .byte	$30
14844 3497                        60            .byte	$60
14845 3498                        30            .byte	$30
14846 3499                        18            .byte	$18
14847 349A                        0C            .byte	$C
14848 349B                        00            .byte	0
14849 349C                        7E            .byte	$7E
14850 349D                        00            .byte	0
14851 349E                        00            .byte	0
14852 349F                        00            .byte	0
14853 34A0                        00            .byte	0
14854                                           ! 1648  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
14855 34A1                        00            .byte	0
14856 34A2                        00            .byte	0
14857 34A3                        0E            .byte	$E
14858 34A4                        1B            .byte	$1B
14859 34A5                        1B            .byte	$1B
14860 34A6                        18            .byte	$18
14861 34A7                        18            .byte	$18
14862 34A8                        18            .byte	$18
14863 34A9                        18            .byte	$18
14864 34AA                        18            .byte	$18
14865 34AB                        18            .byte	$18
14866 34AC                        18            .byte	$18
14867 34AD                        18            .byte	$18
14868 34AE                        18            .byte	$18
14869                                           ! 1648 0x18, 0x18,
14870 34AF                        18            .byte	$18
14871 34B0                        18            .byte	$18
14872                                           ! 1649  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14873 34B1                        18            .byte	$18
14874 34B2                        18            .byte	$18
14875 34B3                        18            .byte	$18
14876 34B4                        18            .byte	$18
14877 34B5                        18            .byte	$18
14878 34B6                        18            .byte	$18
14879 34B7                        18            .byte	$18
14880 34B8                        18            .byte	$18
14881 34B9                        D8            .byte	$D8
14882 34BA                        D8            .byte	$D8
14883 34BB                        D8            .byte	$D8
14884 34BC                        70            .byte	$70
14885 34BD                        00            .byte	0
14886 34BE                        00            .byte	0
14887 34BF                        00            .byte	0
14888 34C0                        00            .byte	0
14889                                           ! 1650  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14890 34C1                        00            .byte	0
14891 34C2                        00            .byte	0
14892 34C3                        00            .byte	0
14893 34C4                        00            .byte	0
14894 34C5                        18            .byte	$18
14895 34C6                        18            .byte	$18
14896 34C7                        00            .byte	0
14897 34C8                        7E            .byte	$7E
14898 34C9                        00            .byte	0
14899 34CA                        18            .byte	$18
14900 34CB                        18            .byte	$18
14901 34CC                        00            .byte	0
14902 34CD                        00            .byte	0
14903 34CE                        00            .byte	0
14904 34CF                        00            .byte	0
14905 34D0                        00            .byte	0
14906                                           ! 1651  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14907 34D1                        00            .byte	0
14908 34D2                        00            .byte	0
14909 34D3                        00            .byte	0
14910 34D4                        00            .byte	0
14911 34D5                        00            .byte	0
14912 34D6                        76            .byte	$76
14913 34D7                        DC            .byte	$DC
14914 34D8                        00            .byte	0
14915 34D9                        76            .byte	$76
14916 34DA                        DC            .byte	$DC
14917 34DB                        00            .byte	0
14918 34DC                        00            .byte	0
14919 34DD                        00            .byte	0
14920 34DE                        00            .byte	0
14921 34DF                        00            .byte	0
14922 34E0                        00            .byte	0
14923                                           ! 1652  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14924 34E1                        00            .byte	0
14925 34E2                        38            .byte	$38
14926 34E3                        6C            .byte	$6C
14927 34E4                        6C            .byte	$6C
14928 34E5                        38            .byte	$38
14929 34E6                        00            .byte	0
14930 34E7                        00            .byte	0
14931 34E8                        00            .byte	0
14932 34E9                        00            .byte	0
14933 34EA                        00            .byte	0
14934 34EB                        00            .byte	0
14935 34EC                        00            .byte	0
14936 34ED                        00            .byte	0
14937 34EE                        00            .byte	0
14938 34EF                        00            .byte	0
14939 34F0                        00            .byte	0
14940                                           ! 1653  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14941 34F1                        00            .byte	0
14942 34F2                        00            .byte	0
14943 34F3                        00            .byte	0
14944 34F4                        00            .byte	0
14945 34F5                        00            .byte	0
14946 34F6                        00            .byte	0
14947 34F7                        00            .byte	0
14948 34F8                        18            .byte	$18
14949 34F9                        18            .byte	$18
14950 34FA                        00            .byte	0
14951 34FB                        00            .byte	0
14952 34FC                        00            .byte	0
14953 34FD                        00            .byte	0
14954 34FE                        00            .byte	0
14955 34FF                        00            .byte	0
14956 3500                        00            .byte	0
14957                                           ! 1654  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14958 3501                        00            .byte	0
14959 3502                        00            .byte	0
14960 3503                        00            .byte	0
14961 3504                        00            .byte	0
14962 3505                        00            .byte	0
14963 3506                        00            .byte	0
14964 3507                        00            .byte	0
14965 3508                        00            .byte	0
14966 3509                        18            .byte	$18
14967 350A                        00            .byte	0
14968 350B                        00            .byte	0
14969 350C                        00            .byte	0
14970 350D                        00            .byte	0
14971 350E                        00            .byte	0
14972 350F                        00            .byte	0
14973 3510                        00            .byte	0
14974                                           ! 1655  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14975 3511                        00            .byte	0
14976 3512                        0F            .byte	$F
14977 3513                        0C            .byte	$C
14978 3514                        0C            .byte	$C
14979 3515                        0C            .byte	$C
14980 3516                        0C            .byte	$C
14981 3517                        0C            .byte	$C
14982 3518                        EC            .byte	$EC
14983 3519                        6C            .byte	$6C
14984 351A                        6C            .byte	$6C
14985 351B                        3C            .byte	$3C
14986 351C                        1C            .byte	$1C
14987 351D                        00            .byte	0
14988 351E                        00            .byte	0
14989 351F                        00            .byte	0
14990 3520                        00            .byte	0
14991                                           ! 1656  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14992 3521                        00            .byte	0
14993 3522                        D8            .byte	$D8
14994 3523                        6C            .byte	$6C
14995 3524                        6C            .byte	$6C
14996 3525                        6C            .byte	$6C
14997 3526                        6C            .byte	$6C
14998 3527                        6C            .byte	$6C
14999 3528                        00            .byte	0
15000 3529                        00            .byte	0
15001 352A                        00            .byte	0
15002 352B                        00            .byte	0
15003 352C                        00            .byte	0
15004 352D                        00            .byte	0
15005 352E                        00            .byte	0
15006 352F                        00            .byte	0
15007 3530                        00            .byte	0
15008                                           ! 1657  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
15009 3531                        00            .byte	0
15010 3532                        70            .byte	$70
15011 3533                        D8            .byte	$D8
15012 3534                        30            .byte	$30
15013 3535                        60            .byte	$60
15014 3536                        C8            .byte	$C8
15015 3537                        F8            .byte	$F8
15016 3538                        00            .byte	0
15017 3539                        00            .byte	0
15018 353A                        00            .byte	0
15019 353B                        00            .byte	0
15020 353C                        00            .byte	0
15021 353D                        00            .byte	0
15022 353E                        00            .byte	0
15023 353F                        00            .byte	0
15024 3540                        00            .byte	0
15025                                           ! 1658  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
15026 3541                        00            .byte	0
15027 3542                        00            .byte	0
15028 3543                        00            .byte	0
15029 3544                        00            .byte	0
15030 3545                        7C            .byte	$7C
15031 3546                        7C            .byte	$7C
15032 3547                        7C            .byte	$7C
15033 3548                        7C            .byte	$7C
15034 3549                        7C            .byte	$7C
15035 354A                        7C            .byte	$7C
15036 354B                        7C            .byte	$7C
15037 354C                        00            .byte	0
15038 354D                        00            .byte	0
15039 354E                        00            .byte	0
15040 354F                        00            .byte	0
15041 3550                        00            .byte	0
15042                                           ! 1659  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15043 3551                        00            .byte	0
15044 3552                        00            .byte	0
15045 3553                        00            .byte	0
15046 3554                        00            .byte	0
15047 3555                        00            .byte	0
15048 3556                        00            .byte	0
15049 3557                        00            .byte	0
15050 3558                        00            .byte	0
15051 3559                        00            .byte	0
15052 355A                        00            .byte	0
15053 355B                        00            .byte	0
15054 355C                        00            .byte	0
15055 355D                        00            .byte	0
15056 355E                        00            .byte	0
15057 355F                        00            .byte	0
15058                                           ! 1660 };
15059 3560                        00            .byte	0
15060                                           !BCC_EOS
15061                                           ! 1661 static Bit8u vgafont14alt[1]={0x00};
15062                       00003561            _vgafont14alt:
15063 3561                        00            .byte	0
15064                                           !BCC_EOS
15065                                           ! 1662 static Bit8u vgafont16alt[1]={0x00};
15066                       00003562            _vgafont16alt:
15067 3562                        00            .byte	0
15068                                           !BCC_EOS
15069                                           ! 1663 #asm
15070                                           !BCC_ASM
15071                       00003563            init_vga_card:
15072                                           ;; switch to color mode and enable CPU access 480 lines
15073 3563           BA                   03C2    mov dx, #0x3C2
15074 3566           B0                     C3    mov al, #0xC3
15075 3568           EE                           outb dx,al
15076                                           ;; more than 64k 3C4/04
15077 3569           BA                   03C4    mov dx, #0x3C4
15078 356C           B0                     04    mov al, #0x04
15079 356E           EE                           outb dx,al
15080 356F           BA                   03C5    mov dx, #0x3C5
15081 3572           B0                     02    mov al, #0x02
15082 3574           EE                           outb dx,al
15083 3575           BB                   357F    mov bx, #msg_vga_init
15084 3578           53                           push bx
15085 3579           E8         46A0              call _printf
15086 357C           44                           inc sp
15087 357D           44                           inc sp
15088 357E           C3                           ret
15089                       0000357F            msg_vga_init:
15090 357F                        56            .ascii "VGABios $Id: vgabios.c,v 1.67 2008/01/27 09:44:12 vruppert Exp $"
15091 35BF                        0D            .byte 0x0d,0x0a,0x00
15092                                           ! 1685 endasm
15093                                           !BCC_ENDASM
15094                                           ! 1686 #asm
15095                                           !BCC_ASM
15096                       000035C2            init_bios_area:
15097 35C2           1E                           push ds
15098 35C3           B8                   0040    mov ax, # 0x40
15099 35C6           8ED8                         mov ds, ax
15100                                           ;; init detected hardware BIOS Area
15101 35C8           BB                   0010    mov bx, # 0x10
15102 35CB           8B07                         mov ax, [bx]
15103 35CD           25                   FFCF    and ax, #0xffcf
15104                                           ;; set 80x25 color (not clear from RBIL but usual)
15105 35D0           0D                   0020    or ax, #0x0020
15106 35D3           8907                         mov [bx], ax
15107                                           ;; Just for the first int10 find its children
15108                                           ;; the default char height
15109 35D5           BB                   0085    mov bx, # 0x85
15110 35D8           B0                     10    mov al, #0x10
15111 35DA           8807                         mov [bx], al
15112                                           ;; Clear the screen
15113 35DC           BB                   0087    mov bx, # 0x87
15114 35DF           B0                     60    mov al, #0x60
15115 35E1           8807                         mov [bx], al
15116                                           ;; Set the basic screen we have
15117 35E3           BB                   0088    mov bx, # 0x88
15118 35E6           B0                     F9    mov al, #0xf9
15119 35E8           8807                         mov [bx], al
15120                                           ;; Set the basic modeset options
15121 35EA           BB                   0089    mov bx, # 0x89
15122 35ED           B0                     51    mov al, #0x51
15123 35EF           8807                         mov [bx], al
15124                                           ;; Set the default MSR
15125 35F1           BB                   0065    mov bx, # 0x65
15126 35F4           B0                     09    mov al, #0x09
15127 35F6           8807                         mov [bx], al
15128 35F8           1F                           pop ds
15129 35F9           C3                           ret
15130                       000035FA            _video_save_pointer_table:
15131 35FA                      0291              .word _video_param_table
15132 35FC                      C000              .word 0xc000
15133 35FE                      0000              .word 0
15134 3600                      0000              .word 0
15135 3602                      0000              .word 0
15136 3604                      0000              .word 0
15137 3606                      0000              .word 0
15138 3608                      0000              .word 0
15139 360A                      0000              .word 0
15140 360C                      0000              .word 0
15141 360E                      0000              .word 0
15142 3610                      0000              .word 0
15143 3612                      0000              .word 0
15144 3614                      0000              .word 0
15145                                           ! 1736 endasm
15146                                           !BCC_ENDASM
15147                                           ! 1737 static void display_splash_screen()
15148                                           ! 1738 {
15149                                           
15150                       00003616            _display_splash_screen:
15151                                           ! 1739 }
15152 3616           C3                         ret
15153                                           ! 1740 static void display_info()
15154                                           ! 1741 {
15155                       00003617            _display_info:
15156                                           ! 1742 #asm
15157                                           !BCC_ASM
15158 3617           B8                   C000   mov ax,#0xc000
15159 361A           8ED8                        mov ds,ax
15160 361C           BE                   0022   mov si,#vgabios_name
15161 361F           E8         0013             call _display_string
15162 3622           BE                   0038   mov si,#vgabios_version
15163 3625           E8         000D             call _display_string
15164                                            ;;mov si,#vgabios_copyright
15165                                            ;;call _display_string
15166                                            ;;mov si,#crlf
15167                                            ;;call _display_string
15168 3628           BE                   007E   mov si,#vgabios_license
15169 362B           E8         0007             call _display_string
15170 362E           BE                   00B3   mov si,#vgabios_website
15171 3631           E8         0001             call _display_string
15172                                           ! 1757 endasm
15173                                           !BCC_ENDASM
15174                                           ! 1758 }
15175 3634           C3                         ret
15176                                           ! 1759 static void display_string()
15177                                           ! 1760 {
15178                       00003635            _display_string:
15179                                           ! 1761 #asm
15180                                           !BCC_ASM
15181 3635           8CD8                        mov ax,ds
15182 3637           8EC0                        mov es,ax
15183 3639           89F7                        mov di,si
15184 363B           31C9                        xor cx,cx
15185 363D           F7D1                        not cx
15186 363F           30C0                        xor al,al
15187 3641           FC                          cld
15188 3642           F2                          repne
15189 3643           AE                           scasb
15190 3644           F7D1                        not cx
15191 3646           49                          dec cx
15192 3647           51                          push cx
15193 3648           B8                   0300   mov ax,#0x0300
15194 364B           BB                   0000   mov bx,#0x0000
15195 364E           CD                     10   int #0x10
15196 3650           59                          pop cx
15197 3651           B8                   1301   mov ax,#0x1301
15198 3654           BB                   000B   mov bx,#0x000b
15199 3657           89F5                        mov bp,si
15200 3659           CD                     10   int #0x10
15201                                           ! 1782 endasm
15202                                           !BCC_ENDASM
15203                                           ! 1783 }
15204 365B           C3                         ret
15205                                           ! 1784 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15206                                           ! 1785   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15207                       0000365C            _int10_func:
15208                                           !BCC_EOS
15209                                           ! 1786 {
15210                                           ! 1787  switch(( AX >> 8 ))
15211 365C           55                         push	bp
15212 365D           89E5                       mov	bp,sp
15213                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15214 365F           8B46         12            mov	ax,$12[bp]
15215 3662           88E0                       mov	al,ah
15216 3664           30E4                       xor	ah,ah
15217                                           ! 1788   {
15218 3666           E9         04D7            br 	.3
15219                                           ! 1789    case 0x00:
15220                                           ! 1790      biosfn_set_video_mode(( AX & 0x00ff ));
15221                       00003669            .4:
15222                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15223 3669           8A46         12            mov	al,$12[bp]
15224                                           ! Debug: list unsigned char = al+0 (used reg = )
15225 366C           30E4                       xor	ah,ah
15226 366E           50                         push	ax
15227                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15228 366F           E8         0524            call	_biosfn_set_video_mode
15229 3672           44                         inc	sp
15230 3673           44                         inc	sp
15231                                           !BCC_EOS
15232                                           ! 1791      switch(( AX & 0x00ff )&0x7F)
15233                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15234 3674           8A46         12            mov	al,$12[bp]
15235                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15236 3677           24                     7F  and	al,*$7F
15237                                           ! 1792       {case 6:
15238 3679           EB           24            jmp .7
15239                                           ! 1793         AX = ((AX & 0xff00) | (0x3F));
15240                       0000367B            .8:
15241                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15242 367B           8B46         12            mov	ax,$12[bp]
15243 367E           30C0                       xor	al,al
15244                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15245 3680           0C                     3F  or	al,*$3F
15246                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15247 3682           8946         12            mov	$12[bp],ax
15248                                           !BCC_EOS
15249                                           ! 1794         break;
15250 3685           EB           3D            jmp .5
15251                                           !BCC_EOS
15252                                           ! 1795        case 0:
15253                                           ! 1796        case 1:
15254                       00003687            .9:
15255                                           ! 1797        case 2:
15256                       00003687            .A:
15257                                           ! 1798        case 3:
15258                       00003687            .B:
15259                                           ! 1799        case 4:
15260                       00003687            .C:
15261                                           ! 1800        case 5:
15262                       00003687            .D:
15263                                           ! 1801        case 7:
15264                       00003687            .E:
15265                                           ! 1802         AX = ((AX & 0xff00) | (0x30));
15266                       00003687            .F:
15267                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15268 3687           8B46         12            mov	ax,$12[bp]
15269 368A           30C0                       xor	al,al
15270                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15271 368C           0C                     30  or	al,*$30
15272                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15273 368E           8946         12            mov	$12[bp],ax
15274                                           !BCC_EOS
15275                                           ! 1803         break;
15276 3691           EB           31            jmp .5
15277                                           !BCC_EOS
15278                                           ! 1804       default:
15279                                           ! 1805         AX = ((AX & 0xff00) | (0x20));
15280                       00003693            .10:
15281                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15282 3693           8B46         12            mov	ax,$12[bp]
15283 3696           30C0                       xor	al,al
15284                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15285 3698           0C                     20  or	al,*$20
15286                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15287 369A           8946         12            mov	$12[bp],ax
15288                                           !BCC_EOS
15289                                           ! 1806       }
15290                                           ! 1807      break;
15291 369D           EB           25            jmp .5
15292                       0000369F            .7:
15293 369F           2C                     00  sub	al,*0
15294 36A1           72           F0            jb 	.10
15295 36A3           3C                     07  cmp	al,*7
15296 36A5           77           1B            ja  	.11
15297 36A7           30E4                       xor	ah,ah
15298 36A9           D1E0                       shl	ax,*1
15299 36AB           89C3                       mov	bx,ax
15300 36AD           2E                         seg	cs
15301 36AE           FFA7       36B2            br	.12[bx]
15302                       000036B2            .12:
15303 36B2                      3687            .word	.9
15304 36B4                      3687            .word	.A
15305 36B6                      3687            .word	.B
15306 36B8                      3687            .word	.C
15307 36BA                      3687            .word	.D
15308 36BC                      3687            .word	.E
15309 36BE                      367B            .word	.8
15310 36C0                      3687            .word	.F
15311                       000036C2            .11:
15312 36C2           EB           CF            jmp	.10
15313                       000036C4            .5:
15314 36C4           E9         04CD            br 	.1
15315                                           !BCC_EOS
15316                                           ! 1808    case 0x01:
15317                                           ! 1809      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15318                       000036C7            .13:
15319                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15320 36C7           8A46         10            mov	al,$10[bp]
15321                                           ! Debug: list unsigned char = al+0 (used reg = )
15322 36CA           30E4                       xor	ah,ah
15323 36CC           50                         push	ax
15324                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15325 36CD           8B46         10            mov	ax,$10[bp]
15326 36D0           88E0                       mov	al,ah
15327 36D2           30E4                       xor	ah,ah
15328                                           ! Debug: list unsigned int = ax+0 (used reg = )
15329 36D4           50                         push	ax
15330                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15331 36D5           E8         0B56            call	_biosfn_set_cursor_shape
15332 36D8           83C4                   04  add	sp,*4
15333                                           !BCC_EOS
15334                                           ! 1810      break;
15335 36DB           E9         04B6            br 	.1
15336                                           !BCC_EOS
15337                                           ! 1811    case 0x02:
15338                                           ! 1812      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15339                       000036DE            .14:
15340                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15341 36DE           FF76         0E            push	$E[bp]
15342                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15343 36E1           8B46         0C            mov	ax,$C[bp]
15344 36E4           88E0                       mov	al,ah
15345 36E6           30E4                       xor	ah,ah
15346                                           ! Debug: list unsigned int = ax+0 (used reg = )
15347 36E8           50                         push	ax
15348                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15349 36E9           E8         0C5D            call	_biosfn_set_cursor_pos
15350 36EC           83C4                   04  add	sp,*4
15351                                           !BCC_EOS
15352                                           ! 1813      break;
15353 36EF           E9         04A2            br 	.1
15354                                           !BCC_EOS
15355                                           ! 1814    case 0x03:
15356                                           ! 1815      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15357                       000036F2            .15:
15358                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15359 36F2           8D5E         0E            lea	bx,$E[bp]
15360 36F5           53                         push	bx
15361                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15362 36F6           8D5E         10            lea	bx,$10[bp]
15363 36F9           53                         push	bx
15364                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15365 36FA           8B46         0C            mov	ax,$C[bp]
15366 36FD           88E0                       mov	al,ah
15367 36FF           30E4                       xor	ah,ah
15368                                           ! Debug: list unsigned int = ax+0 (used reg = )
15369 3701           50                         push	ax
15370                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15371 3702           E8         0D44            call	_biosfn_get_cursor_pos
15372 3705           83C4                   06  add	sp,*6
15373                                           !BCC_EOS
15374                                           ! 1816      break;
15375 3708           E9         0489            br 	.1
15376                                           !BCC_EOS
15377                                           ! 1817    case 0x04:
15378                                           ! 1818      AX=0x00;
15379                       0000370B            .16:
15380                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15381 370B           31C0                       xor	ax,ax
15382 370D           8946         12            mov	$12[bp],ax
15383                                           !BCC_EOS
15384                                           ! 1819      BX=0x00;
15385                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15386 3710           31C0                       xor	ax,ax
15387 3712           8946         0C            mov	$C[bp],ax
15388                                           !BCC_EOS
15389                                           ! 1820      CX=0x00;
15390                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15391 3715           31C0                       xor	ax,ax
15392 3717           8946         10            mov	$10[bp],ax
15393                                           !BCC_EOS
15394                                           ! 1821      DX=0x00;
15395                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15396 371A           31C0                       xor	ax,ax
15397 371C           8946         0E            mov	$E[bp],ax
15398                                           !BCC_EOS
15399                                           ! 1822      break;
15400 371F           E9         0472            br 	.1
15401                                           !BCC_EOS
15402                                           ! 1823    case 0x05:
15403                                           ! 1824      biosfn_set_active_page(( AX & 0x00ff ));
15404                       00003722            .17:
15405                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15406 3722           8A46         12            mov	al,$12[bp]
15407                                           ! Debug: list unsigned char = al+0 (used reg = )
15408 3725           30E4                       xor	ah,ah
15409 3727           50                         push	ax
15410                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15411 3728           E8         0D93            call	_biosfn_set_active_page
15412 372B           44                         inc	sp
15413 372C           44                         inc	sp
15414                                           !BCC_EOS
15415                                           ! 1825      break;
15416 372D           E9         0464            br 	.1
15417                                           !BCC_EOS
15418                                           ! 1826    case 0x06:
15419                                           ! 1827      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8
15420                       00003730            .18:
15421                                           ! 1827  ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15422                                           ! Debug: list int = const 1 (used reg = )
15423 3730           B8                   0001  mov	ax,*1
15424 3733           50                         push	ax
15425                                           ! Debug: list int = const $FF (used reg = )
15426 3734           B8                   00FF  mov	ax,#$FF
15427 3737           50                         push	ax
15428                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15429 3738           8A46         0E            mov	al,$E[bp]
15430                                           ! Debug: list unsigned char = al+0 (used reg = )
15431 373B           30E4                       xor	ah,ah
15432 373D           50                         push	ax
15433                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15434 373E           8B46         0E            mov	ax,$E[bp]
15435 3741           88E0                       mov	al,ah
15436 3743           30E4                       xor	ah,ah
15437                                           ! Debug: list unsigned int = ax+0 (used reg = )
15438 3745           50                         push	ax
15439                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15440 3746           8A46         10            mov	al,$10[bp]
15441                                           ! Debug: list unsigned char = al+0 (used reg = )
15442 3749           30E4                       xor	ah,ah
15443 374B           50                         push	ax
15444                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15445 374C           8B46         10            mov	ax,$10[bp]
15446 374F           88E0                       mov	al,ah
15447 3751           30E4                       xor	ah,ah
15448                                           ! Debug: list unsigned int = ax+0 (used reg = )
15449 3753           50                         push	ax
15450                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15451 3754           8B46         0C            mov	ax,$C[bp]
15452 3757           88E0                       mov	al,ah
15453 3759           30E4                       xor	ah,ah
15454                                           ! Debug: list unsigned int = ax+0 (used reg = )
15455 375B           50                         push	ax
15456                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15457 375C           8A46         12            mov	al,$12[bp]
15458                                           ! Debug: list unsigned char = al+0 (used reg = )
15459 375F           30E4                       xor	ah,ah
15460 3761           50                         push	ax
15461                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15462 3762           E8         11DC            call	_biosfn_scroll
15463 3765           83C4                   10  add	sp,*$10
15464                                           !BCC_EOS
15465                                           ! 1828      break;
15466 3768           E9         0429            br 	.1
15467                                           !BCC_EOS
15468                                           ! 1829    case 0x07:
15469                                           ! 1830      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15470                       0000376B            .19:
15471                                           ! Debug: list int = const 0 (used reg = )
15472 376B           31C0                       xor	ax,ax
15473 376D           50                         push	ax
15474                                           ! Debug: list int = const $FF (used reg = )
15475 376E           B8                   00FF  mov	ax,#$FF
15476 3771           50                         push	ax
15477                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15478 3772           8A46         0E            mov	al,$E[bp]
15479                                           ! Debug: list unsigned char = al+0 (used reg = )
15480 3775           30E4                       xor	ah,ah
15481 3777           50                         push	ax
15482                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15483 3778           8B46         0E            mov	ax,$E[bp]
15484 377B           88E0                       mov	al,ah
15485 377D           30E4                       xor	ah,ah
15486                                           ! Debug: list unsigned int = ax+0 (used reg = )
15487 377F           50                         push	ax
15488                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15489 3780           8A46         10            mov	al,$10[bp]
15490                                           ! Debug: list unsigned char = al+0 (used reg = )
15491 3783           30E4                       xor	ah,ah
15492 3785           50                         push	ax
15493                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15494 3786           8B46         10            mov	ax,$10[bp]
15495 3789           88E0                       mov	al,ah
15496 378B           30E4                       xor	ah,ah
15497                                           ! Debug: list unsigned int = ax+0 (used reg = )
15498 378D           50                         push	ax
15499                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15500 378E           8B46         0C            mov	ax,$C[bp]
15501 3791           88E0                       mov	al,ah
15502 3793           30E4                       xor	ah,ah
15503                                           ! Debug: list unsigned int = ax+0 (used reg = )
15504 3795           50                         push	ax
15505                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15506 3796           8A46         12            mov	al,$12[bp]
15507                                           ! Debug: list unsigned char = al+0 (used reg = )
15508 3799           30E4                       xor	ah,ah
15509 379B           50                         push	ax
15510                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15511 379C           E8         11A2            call	_biosfn_scroll
15512 379F           83C4                   10  add	sp,*$10
15513                                           !BCC_EOS
15514                                           ! 1831      break;
15515 37A2           E9         03EF            br 	.1
15516                                           !BCC_EOS
15517                                           ! 1832    case 0x08:
15518                                           ! 1833      biosfn_read_char_attr(( BX >> 8 ),&AX);
15519                       000037A5            .1A:
15520                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15521 37A5           8D5E         12            lea	bx,$12[bp]
15522 37A8           53                         push	bx
15523                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15524 37A9           8B46         0C            mov	ax,$C[bp]
15525 37AC           88E0                       mov	al,ah
15526 37AE           30E4                       xor	ah,ah
15527                                           ! Debug: list unsigned int = ax+0 (used reg = )
15528 37B0           50                         push	ax
15529                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15530 37B1           E8         1893            call	_biosfn_read_char_attr
15531 37B4           83C4                   04  add	sp,*4
15532                                           !BCC_EOS
15533                                           ! 1834      break;
15534 37B7           E9         03DA            br 	.1
15535                                           !BCC_EOS
15536                                           ! 1835    case 0x09:
15537                                           ! 1836      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15538                       000037BA            .1B:
15539                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15540 37BA           FF76         10            push	$10[bp]
15541                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15542 37BD           8A46         0C            mov	al,$C[bp]
15543                                           ! Debug: list unsigned char = al+0 (used reg = )
15544 37C0           30E4                       xor	ah,ah
15545 37C2           50                         push	ax
15546                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15547 37C3           8B46         0C            mov	ax,$C[bp]
15548 37C6           88E0                       mov	al,ah
15549 37C8           30E4                       xor	ah,ah
15550                                           ! Debug: list unsigned int = ax+0 (used reg = )
15551 37CA           50                         push	ax
15552                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15553 37CB           8A46         12            mov	al,$12[bp]
15554                                           ! Debug: list unsigned char = al+0 (used reg = )
15555 37CE           30E4                       xor	ah,ah
15556 37D0           50                         push	ax
15557                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15558 37D1           E8         1DB8            call	_biosfn_write_char_attr
15559 37D4           83C4                   08  add	sp,*8
15560                                           !BCC_EOS
15561                                           ! 1837      break;
15562 37D7           E9         03BA            br 	.1
15563                                           !BCC_EOS
15564                                           ! 1838    case 0x0A:
15565                                           ! 1839      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15566                       000037DA            .1C:
15567                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15568 37DA           FF76         10            push	$10[bp]
15569                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15570 37DD           8A46         0C            mov	al,$C[bp]
15571                                           ! Debug: list unsigned char = al+0 (used reg = )
15572 37E0           30E4                       xor	ah,ah
15573 37E2           50                         push	ax
15574                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15575 37E3           8B46         0C            mov	ax,$C[bp]
15576 37E6           88E0                       mov	al,ah
15577 37E8           30E4                       xor	ah,ah
15578                                           ! Debug: list unsigned int = ax+0 (used reg = )
15579 37EA           50                         push	ax
15580                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15581 37EB           8A46         12            mov	al,$12[bp]
15582                                           ! Debug: list unsigned char = al+0 (used reg = )
15583 37EE           30E4                       xor	ah,ah
15584 37F0           50                         push	ax
15585                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15586 37F1           E8         1F8A            call	_biosfn_write_char_only
15587 37F4           83C4                   08  add	sp,*8
15588                                           !BCC_EOS
15589                                           ! 1840      break;
15590 37F7           E9         039A            br 	.1
15591                                           !BCC_EOS
15592                                           ! 1841    case 0x0C:
15593                                           ! 1842      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15594                       000037FA            .1D:
15595                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15596 37FA           FF76         0E            push	$E[bp]
15597                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15598 37FD           FF76         10            push	$10[bp]
15599                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15600 3800           8A46         12            mov	al,$12[bp]
15601                                           ! Debug: list unsigned char = al+0 (used reg = )
15602 3803           30E4                       xor	ah,ah
15603 3805           50                         push	ax
15604                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15605 3806           8B46         0C            mov	ax,$C[bp]
15606 3809           88E0                       mov	al,ah
15607 380B           30E4                       xor	ah,ah
15608                                           ! Debug: list unsigned int = ax+0 (used reg = )
15609 380D           50                         push	ax
15610                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15611 380E           E8         21DB            call	_biosfn_write_pixel
15612 3811           83C4                   08  add	sp,*8
15613                                           !BCC_EOS
15614                                           ! 1843      break;
15615 3814           E9         037D            br 	.1
15616                                           !BCC_EOS
15617                                           ! 1844    case 0x0D:
15618                                           ! 1845      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15619                       00003817            .1E:
15620                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15621 3817           8D5E         12            lea	bx,$12[bp]
15622 381A           53                         push	bx
15623                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15624 381B           FF76         0E            push	$E[bp]
15625                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15626 381E           FF76         10            push	$10[bp]
15627                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15628 3821           8B46         0C            mov	ax,$C[bp]
15629 3824           88E0                       mov	al,ah
15630 3826           30E4                       xor	ah,ah
15631                                           ! Debug: list unsigned int = ax+0 (used reg = )
15632 3828           50                         push	ax
15633                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15634 3829           E8         245C            call	_biosfn_read_pixel
15635 382C           83C4                   08  add	sp,*8
15636                                           !BCC_EOS
15637                                           ! 1846      break;
15638 382F           E9         0362            br 	.1
15639                                           !BCC_EOS
15640                                           ! 1847    case 0x0E:
15641                                           ! 1848      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15642                       00003832            .1F:
15643                                           ! Debug: list int = const 2 (used reg = )
15644 3832           B8                   0002  mov	ax,*2
15645 3835           50                         push	ax
15646                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15647 3836           8A46         0C            mov	al,$C[bp]
15648                                           ! Debug: list unsigned char = al+0 (used reg = )
15649 3839           30E4                       xor	ah,ah
15650 383B           50                         push	ax
15651                                           ! Debug: list int = const $FF (used reg = )
15652 383C           B8                   00FF  mov	ax,#$FF
15653 383F           50                         push	ax
15654                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15655 3840           8A46         12            mov	al,$12[bp]
15656                                           ! Debug: list unsigned char = al+0 (used reg = )
15657 3843           30E4                       xor	ah,ah
15658 3845           50                         push	ax
15659                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15660 3846           E8         2645            call	_biosfn_write_teletype
15661 3849           83C4                   08  add	sp,*8
15662                                           !BCC_EOS
15663                                           ! 1849      break;
15664 384C           E9         0345            br 	.1
15665                                           !BCC_EOS
15666                                           ! 1850    case 0x10:
15667                                           ! 1851      biosfn_perform_gray_scale_summing(BX,CX);
15668                       0000384F            .20:
15669                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15670 384F           FF76         10            push	$10[bp]
15671                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15672 3852           FF76         0C            push	$C[bp]
15673                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15674 3855           E8         2C2E            call	_biosfn_perform_gray_scale_summing
15675 3858           83C4                   04  add	sp,*4
15676                                           !BCC_EOS
15677                                           ! 1852      break;
15678 385B           E9         0336            br 	.1
15679                                           !BCC_EOS
15680                                           ! 1853    case 0x11:
15681                                           ! 1854      switch(( AX & 0x00ff ))
15682                       0000385E            .21:
15683                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15684 385E           8A46         12            mov	al,$12[bp]
15685                                           ! 1855       {
15686 3861           E9         00E1            br 	.24
15687                                           ! 1856        case 0x00:
15688                                           ! 1857        case 0x10:
15689                       00003864            .25:
15690                                           ! 1858         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15691                       00003864            .26:
15692                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15693 3864           8B46         0C            mov	ax,$C[bp]
15694 3867           88E0                       mov	al,ah
15695 3869           30E4                       xor	ah,ah
15696                                           ! Debug: list unsigned int = ax+0 (used reg = )
15697 386B           50                         push	ax
15698                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15699 386C           8A46         0C            mov	al,$C[bp]
15700                                           ! Debug: list unsigned char = al+0 (used reg = )
15701 386F           30E4                       xor	ah,ah
15702 3871           50                         push	ax
15703                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15704 3872           FF76         0E            push	$E[bp]
15705                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15706 3875           FF76         10            push	$10[bp]
15707                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15708 3878           FF76         08            push	8[bp]
15709                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15710 387B           FF76         16            push	$16[bp]
15711                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15712 387E           8A46         12            mov	al,$12[bp]
15713                                           ! Debug: list unsigned char = al+0 (used reg = )
15714 3881           30E4                       xor	ah,ah
15715 3883           50                         push	ax
15716                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15717 3884           E8         2EA6            call	_biosfn_load_text_user_pat
15718 3887           83C4                   0E  add	sp,*$E
15719                                           !BCC_EOS
15720                                           ! 1859         break;
15721 388A           E9         010C            br 	.22
15722                                           !BCC_EOS
15723                                           ! 1860        case 0x01:
15724                                           ! 1861        case 0x11:
15725                       0000388D            .27:
15726                                           ! 1862         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15727                       0000388D            .28:
15728                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15729 388D           8A46         0C            mov	al,$C[bp]
15730                                           ! Debug: list unsigned char = al+0 (used reg = )
15731 3890           30E4                       xor	ah,ah
15732 3892           50                         push	ax
15733                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15734 3893           8A46         12            mov	al,$12[bp]
15735                                           ! Debug: list unsigned char = al+0 (used reg = )
15736 3896           30E4                       xor	ah,ah
15737 3898           50                         push	ax
15738                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15739 3899           E8         2F2D            call	_biosfn_load_text_8_14_pat
15740 389C           83C4                   04  add	sp,*4
15741                                           !BCC_EOS
15742                                           ! 1863         break;
15743 389F           E9         00F7            br 	.22
15744                                           !BCC_EOS
15745                                           ! 1864        case 0x02:
15746                                           ! 1865        case 0x12:
15747                       000038A2            .29:
15748                                           ! 1866         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15749                       000038A2            .2A:
15750                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15751 38A2           8A46         0C            mov	al,$C[bp]
15752                                           ! Debug: list unsigned char = al+0 (used reg = )
15753 38A5           30E4                       xor	ah,ah
15754 38A7           50                         push	ax
15755                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15756 38A8           8A46         12            mov	al,$12[bp]
15757                                           ! Debug: list unsigned char = al+0 (used reg = )
15758 38AB           30E4                       xor	ah,ah
15759 38AD           50                         push	ax
15760                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15761 38AE           E8         2FAF            call	_biosfn_load_text_8_8_pat
15762 38B1           83C4                   04  add	sp,*4
15763                                           !BCC_EOS
15764                                           ! 1867         break;
15765 38B4           E9         00E2            br 	.22
15766                                           !BCC_EOS
15767                                           ! 1868        case 0x04:
15768                                           ! 1869        case 0x14:
15769                       000038B7            .2B:
15770                                           ! 1870         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15771                       000038B7            .2C:
15772                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15773 38B7           8A46         0C            mov	al,$C[bp]
15774                                           ! Debug: list unsigned char = al+0 (used reg = )
15775 38BA           30E4                       xor	ah,ah
15776 38BC           50                         push	ax
15777                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15778 38BD           8A46         12            mov	al,$12[bp]
15779                                           ! Debug: list unsigned char = al+0 (used reg = )
15780 38C0           30E4                       xor	ah,ah
15781 38C2           50                         push	ax
15782                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15783 38C3           E8         3038            call	_biosfn_load_text_8_16_pat
15784 38C6           83C4                   04  add	sp,*4
15785                                           !BCC_EOS
15786                                           ! 1871         break;
15787 38C9           E9         00CD            br 	.22
15788                                           !BCC_EOS
15789                                           ! 1872        case 0x20:
15790                                           ! 1873         biosfn_load_gfx_8_8_chars(ES,BP);
15791                       000038CC            .2D:
15792                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15793 38CC           FF76         08            push	8[bp]
15794                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15795 38CF           FF76         16            push	$16[bp]
15796                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15797 38D2           E8         30BA            call	_biosfn_load_gfx_8_8_chars
15798 38D5           83C4                   04  add	sp,*4
15799                                           !BCC_EOS
15800                                           ! 1874         break;
15801 38D8           E9         00BE            br 	.22
15802                                           !BCC_EOS
15803                                           ! 1875        case 0x21:
15804                                           ! 1876         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15805                       000038DB            .2E:
15806                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15807 38DB           8A46         0E            mov	al,$E[bp]
15808                                           ! Debug: list unsigned char = al+0 (used reg = )
15809 38DE           30E4                       xor	ah,ah
15810 38E0           50                         push	ax
15811                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15812 38E1           8A46         0C            mov	al,$C[bp]
15813                                           ! Debug: list unsigned char = al+0 (used reg = )
15814 38E4           30E4                       xor	ah,ah
15815 38E6           50                         push	ax
15816                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15817 38E7           FF76         10            push	$10[bp]
15818                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15819 38EA           FF76         08            push	8[bp]
15820                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15821 38ED           FF76         16            push	$16[bp]
15822                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15823 38F0           E8         309D            call	_biosfn_load_gfx_user_chars
15824 38F3           83C4                   0A  add	sp,*$A
15825                                           !BCC_EOS
15826                                           ! 1877         break;
15827 38F6           E9         00A0            br 	.22
15828                                           !BCC_EOS
15829                                           ! 1878        case 0x22:
15830                                           ! 1879         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15831                       000038F9            .2F:
15832                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15833 38F9           8A46         0C            mov	al,$C[bp]
15834                                           ! Debug: list unsigned char = al+0 (used reg = )
15835 38FC           30E4                       xor	ah,ah
15836 38FE           50                         push	ax
15837                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15838 38FF           E8         308F            call	_biosfn_load_gfx_8_14_chars
15839 3902           44                         inc	sp
15840 3903           44                         inc	sp
15841                                           !BCC_EOS
15842                                           ! 1880         break;
15843 3904           E9         0092            br 	.22
15844                                           !BCC_EOS
15845                                           ! 1881        case 0x23:
15846                                           ! 1882         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15847                       00003907            .30:
15848                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15849 3907           8A46         0C            mov	al,$C[bp]
15850                                           ! Debug: list unsigned char = al+0 (used reg = )
15851 390A           30E4                       xor	ah,ah
15852 390C           50                         push	ax
15853                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15854 390D           E8         3082            call	_biosfn_load_gfx_8_8_dd_chars
15855 3910           44                         inc	sp
15856 3911           44                         inc	sp
15857                                           !BCC_EOS
15858                                           ! 1883         break;
15859 3912           E9         0084            br 	.22
15860                                           !BCC_EOS
15861                                           ! 1884        case 0x24:
15862                                           ! 1885         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15863                       00003915            .31:
15864                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15865 3915           8A46         0C            mov	al,$C[bp]
15866                                           ! Debug: list unsigned char = al+0 (used reg = )
15867 3918           30E4                       xor	ah,ah
15868 391A           50                         push	ax
15869                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15870 391B           E8         3075            call	_biosfn_load_gfx_8_16_chars
15871 391E           44                         inc	sp
15872 391F           44                         inc	sp
15873                                           !BCC_EOS
15874                                           ! 1886         break;
15875 3920           E9         0076            br 	.22
15876                                           !BCC_EOS
15877                                           ! 1887        case 0x30:
15878                                           ! 1888         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15879                       00003923            .32:
15880                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15881 3923           8D5E         0E            lea	bx,$E[bp]
15882 3926           53                         push	bx
15883                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15884 3927           8D5E         10            lea	bx,$10[bp]
15885 392A           53                         push	bx
15886                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15887 392B           8D5E         08            lea	bx,8[bp]
15888 392E           53                         push	bx
15889                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15890 392F           8D5E         16            lea	bx,$16[bp]
15891 3932           53                         push	bx
15892                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15893 3933           8B46         0C            mov	ax,$C[bp]
15894 3936           88E0                       mov	al,ah
15895 3938           30E4                       xor	ah,ah
15896                                           ! Debug: list unsigned int = ax+0 (used reg = )
15897 393A           50                         push	ax
15898                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15899 393B           E8         3056            call	_biosfn_get_font_info
15900 393E           83C4                   0A  add	sp,*$A
15901                                           !BCC_EOS
15902                                           ! 1889         break;
15903 3941           EB           56            jmp .22
15904                                           !BCC_EOS
15905                                           ! 1890       }
15906                                           ! 1891      break;
15907 3943           EB           54            jmp .22
15908                       00003945            .24:
15909 3945           2C                     00  sub	al,*0
15910 3947         0F84         FF19            beq 	.25
15911 394B           2C                     01  sub	al,*1
15912 394D         0F84         FF3C            beq 	.27
15913 3951           2C                     01  sub	al,*1
15914 3953         0F84         FF4B            beq 	.29
15915 3957           2C                     02  sub	al,*2
15916 3959         0F84         FF5A            beq 	.2B
15917 395D           2C                     0C  sub	al,*$C
15918 395F         0F84         FF01            beq 	.26
15919 3963           2C                     01  sub	al,*1
15920 3965         0F84         FF24            beq 	.28
15921 3969           2C                     01  sub	al,*1
15922 396B         0F84         FF33            beq 	.2A
15923 396F           2C                     02  sub	al,*2
15924 3971         0F84         FF42            beq 	.2C
15925 3975           2C                     0C  sub	al,*$C
15926 3977         0F84         FF51            beq 	.2D
15927 397B           2C                     01  sub	al,*1
15928 397D         0F84         FF5A            beq 	.2E
15929 3981           2C                     01  sub	al,*1
15930 3983         0F84         FF72            beq 	.2F
15931 3987           2C                     01  sub	al,*1
15932 3989         0F84         FF7A            beq 	.30
15933 398D           2C                     01  sub	al,*1
15934 398F         0F84         FF82            beq 	.31
15935 3993           2C                     0C  sub	al,*$C
15936 3995         0F84         FF8A            beq 	.32
15937                       00003999            .22:
15938 3999           E9         01F8            br 	.1
15939                                           !BCC_EOS
15940                                           ! 1892    case 0x12:
15941                                           ! 1893      switch(( BX & 0x00ff ))
15942                       0000399C            .33:
15943                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15944 399C           8A46         0C            mov	al,$C[bp]
15945                                           ! 1894       {
15946 399F           EB           3C            jmp .36
15947                                           ! 1895        case 0x20:
15948                                           ! 1896         biosfn_alternate_prtsc();
15949                       000039A1            .37:
15950                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15951 39A1           E8         31CA            call	_biosfn_alternate_prtsc
15952                                           !BCC_EOS
15953                                           ! 1897         break;
15954 39A4           EB           43            jmp .34
15955                                           !BCC_EOS
15956                                           ! 1898        case 0
15957                                           ! 1898 x35:
15958                                           ! 1899         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15959                       000039A6            .38:
15960                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15961 39A6           FF76         0E            push	$E[bp]
15962                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15963 39A9           FF76         16            push	$16[bp]
15964                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15965 39AC           8A46         12            mov	al,$12[bp]
15966                                           ! Debug: list unsigned char = al+0 (used reg = )
15967 39AF           30E4                       xor	ah,ah
15968 39B1           50                         push	ax
15969                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15970 39B2           E8         3293            call	_biosfn_switch_video_interface
15971 39B5           83C4                   06  add	sp,*6
15972                                           !BCC_EOS
15973                                           ! 1900         AX = ((AX & 0xff00) | (0x12));
15974                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15975 39B8           8B46         12            mov	ax,$12[bp]
15976 39BB           30C0                       xor	al,al
15977                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15978 39BD           0C                     12  or	al,*$12
15979                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15980 39BF           8946         12            mov	$12[bp],ax
15981                                           !BCC_EOS
15982                                           ! 1901         break;
15983 39C2           EB           25            jmp .34
15984                                           !BCC_EOS
15985                                           ! 1902        case 0x36:
15986                                           ! 1903         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15987                       000039C4            .39:
15988                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15989 39C4           8A46         12            mov	al,$12[bp]
15990                                           ! Debug: list unsigned char = al+0 (used reg = )
15991 39C7           30E4                       xor	ah,ah
15992 39C9           50                         push	ax
15993                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15994 39CA           E8         327C            call	_biosfn_enable_video_refresh_control
15995 39CD           44                         inc	sp
15996 39CE           44                         inc	sp
15997                                           !BCC_EOS
15998                                           ! 1904         AX = ((AX & 0xff00) | (0x12));
15999                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16000 39CF           8B46         12            mov	ax,$12[bp]
16001 39D2           30C0                       xor	al,al
16002                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16003 39D4           0C                     12  or	al,*$12
16004                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16005 39D6           8946         12            mov	$12[bp],ax
16006                                           !BCC_EOS
16007                                           ! 1905         break;
16008 39D9           EB           0E            jmp .34
16009                                           !BCC_EOS
16010                                           ! 1906       }
16011                                           ! 1907      break;
16012 39DB           EB           0C            jmp .34
16013                       000039DD            .36:
16014 39DD           2C                     20  sub	al,*$20
16015 39DF           74           C0            je 	.37
16016 39E1           2C                     15  sub	al,*$15
16017 39E3           74           C1            je 	.38
16018 39E5           2C                     01  sub	al,*1
16019 39E7           74           DB            je 	.39
16020                       000039E9            .34:
16021 39E9           E9         01A8            br 	.1
16022                                           !BCC_EOS
16023                                           ! 1908    case 0x13:
16024                                           ! 1909      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
16025                       000039EC            .3A:
16026                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
16027 39EC           FF76         08            push	8[bp]
16028                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16029 39EF           FF76         16            push	$16[bp]
16030                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16031 39F2           8A46         0E            mov	al,$E[bp]
16032                                           ! Debug: list unsigned char = al+0 (used reg = )
16033 39F5           30E4                       xor	ah,ah
16034 39F7           50                         push	ax
16035                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16036 39F8           8B46         0E            mov	ax,$E[bp]
16037 39FB           88E0                       mov	al,ah
16038 39FD           30E4                       xor	ah,ah
16039                                           ! Debug: list unsigned int = ax+0 (used reg = )
16040 39FF           50                         push	ax
16041                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16042 3A00           FF76         10            push	$10[bp]
16043                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16044 3A03           8A46         0C            mov	al,$C[bp]
16045                                           ! Debug: list unsigned char = al+0 (used reg = )
16046 3A06           30E4                       xor	ah,ah
16047 3A08           50                         push	ax
16048                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16049 3A09           8B46         0C            mov	ax,$C[bp]
16050 3A0C           88E0                       mov	al,ah
16051 3A0E           30E4                       xor	ah,ah
16052                                           ! Debug: list unsigned int = ax+0 (used reg = )
16053 3A10           50                         push	ax
16054                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16055 3A11           8A46         12            mov	al,$12[bp]
16056                                           ! Debug: list unsigned char = al+0 (used reg = )
16057 3A14           30E4                       xor	ah,ah
16058 3A16           50                         push	ax
16059                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16060 3A17           E8         3230            call	_biosfn_write_string
16061 3A1A           83C4                   10  add	sp,*$10
16062                                           !BCC_EOS
16063                                           ! 1910      break;
16064 3A1D           E9         0174            br 	.1
16065                                           !BCC_EOS
16066                                           ! 1911    case 0x1B:
16067                                           ! 1912      biosfn_read_state_info(BX,ES,DI);
16068                       00003A20            .3B:
16069                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16070 3A20           FF76         04            push	4[bp]
16071                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16072 3A23           FF76         16            push	$16[bp]
16073                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16074 3A26           FF76         0C            push	$C[bp]
16075                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16076 3A29           E8         332A            call	_biosfn_read_state_info
16077 3A2C           83C4                   06  add	sp,*6
16078                                           !BCC_EOS
16079                                           ! 1913      AX = ((AX & 0xff00) | (0x1B));
16080                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16081 3A2F           8B46         12            mov	ax,$12[bp]
16082 3A32           30C0                       xor	al,al
16083                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16084 3A34           0C                     1B  or	al,*$1B
16085                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16086 3A36           8946         12            mov	$12[bp],ax
16087                                           !BCC_EOS
16088                                           ! 1914      break;
16089 3A39           E9         0158            br 	.1
16090                                           !BCC_EOS
16091                                           ! 1915    case 0x1C:
16092                                           ! 1916      switch(( AX & 0x00ff ))
16093                       00003A3C            .3C:
16094                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16095 3A3C           8A46         12            mov	al,$12[bp]
16096                                           ! 1917       {
16097 3A3F           EB           33            jmp .3F
16098                                           ! 1918        case 0x00:
16099                                           ! 1919         biosfn_read_video_state_size(CX,&BX);
16100                       00003A41            .40:
16101                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16102 3A41           8D5E         0C            lea	bx,$C[bp]
16103 3A44           53                         push	bx
16104                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16105 3A45           FF76         10            push	$10[bp]
16106                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16107 3A48           E8         348A            call	_biosfn_read_video_state_size
16108 3A4B           83C4                   04  add	sp,*4
16109                                           !BCC_EOS
16110                                           ! 1920         break;
16111 3A4E           EB           30            jmp .3D
16112                                           !BCC_EOS
16113                                           ! 1921        case 0x01:
16114                                           ! 1922         biosfn_save_video_state(CX,ES,BX);
16115                       00003A50            .41:
16116                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16117 3A50           FF76         0C            push	$C[bp]
16118                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16119 3A53           FF76         16            push	$16[bp]
16120                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16121 3A56           FF76         10            push	$10[bp]
16122                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16123 3A59           E8         349D            call	_biosfn_save_video_state
16124 3A5C           83C4                   06  add	sp,*6
16125                                           !BCC_EOS
16126                                           ! 1923         break;
16127 3A5F           EB           1F            jmp .3D
16128                                           !BCC_EOS
16129                                           ! 1924        case 0x02:
16130                                           ! 1925         biosfn_restore_video_state(CX,ES,BX);
16131                       00003A61            .42:
16132                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16133 3A61           FF76         0C            push	$C[bp]
16134                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16135 3A64           FF76         16            push	$16[bp]
16136                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16137 3A67           FF76         10            push	$10[bp]
16138                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16139 3A6A           E8         3A56            call	_biosfn_restore_video_state
16140 3A6D           83C4                   06  add	sp,*6
16141                                           !BCC_EOS
16142                                           ! 1926         break;
16143 3A70           EB           0E            jmp .3D
16144                                           !BCC_EOS
16145                                           ! 1927       }
16146                                           ! 1928      AX = ((AX & 0xff00) | (0x1C));
16147 3A72           EB           0C            jmp .3D
16148                       00003A74            .3F:
16149 3A74           2C                     00  sub	al,*0
16150 3A76           74           C9            je 	.40
16151 3A78           2C                     01  sub	al,*1
16152 3A7A           74           D4            je 	.41
16153 3A7C           2C                     01  sub	al,*1
16154 3A7E           74           E1            je 	.42
16155                       00003A80            .3D:
16156                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16157 3A80           8B46         12            mov	ax,$12[bp]
16158 3A83           30C0                       xor	al,al
16159                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16160 3A85           0C                     1C  or	al,*$1C
16161                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16162 3A87           8946         12            mov	$12[bp],ax
16163                                           !BCC_EOS
16164                                           ! 1929      break;
16165 3A8A           E9         0107            br 	.1
16166                                           !BCC_EOS
16167                                           ! 1930    case 0x4f:
16168                                           ! 1931      if (vbe_has_vbe_display()) {
16169                       00003A8D            .43:
16170                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16171 3A8D           E8         587C            call	_vbe_has_vbe_display
16172 3A90           85C0                       test	ax,ax
16173 3A92         0F84         00A0            beq 	.44
16174                       00003A96            .45:
16175                                           ! 1932        switch(( AX & 0x00ff ))
16176                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16177 3A96           8A46         12            mov	al,$12[bp]
16178                                           ! 1933        {
16179 3A99           EB           6E            jmp .48
16180                                           ! 1934          case 0x00:
16181                                           ! 1935           vbe_biosfn_return_controller_information(&AX,ES,DI);
16182                       00003A9B            .49:
16183                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16184 3A9B           FF76         04            push	4[bp]
16185                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16186 3A9E           FF76         16            push	$16[bp]
16187                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16188 3AA1           8D5E         12            lea	bx,$12[bp]
16189 3AA4           53                         push	bx
16190                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16191 3AA5           E8         58C2            call	_vbe_biosfn_return_controller_information
16192 3AA8           83C4                   06  add	sp,*6
16193                                           !BCC_EOS
16194                                           ! 1936           break;
16195 3AAB           E9         0086            br 	.46
16196                                           !BCC_EOS
16197                                           ! 1937          case 0x01:
16198                                           ! 1938           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16199                       00003AAE            .4A:
16200                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16201 3AAE           FF76         04            push	4[bp]
16202                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16203 3AB1           FF76         16            push	$16[bp]
16204                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16205 3AB4           FF76         10            push	$10[bp]
16206                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16207 3AB7           8D5E         12            lea	bx,$12[bp]
16208 3ABA           53                         push	bx
16209                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16210 3ABB           E8         5AF4            call	_vbe_biosfn_return_mode_information
16211 3ABE           83C4                   08  add	sp,*8
16212                                           !BCC_EOS
16213                                           ! 1939           break;
16214 3AC1           EB           71            jmp .46
16215                                           !BCC_EOS
16216                                           ! 1940          case 0x02:
16217                                           ! 1941           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16218                       00003AC3            .4B:
16219                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16220 3AC3           FF76         04            push	4[bp]
16221                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16222 3AC6           FF76         16            push	$16[bp]
16223                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16224 3AC9           FF76         0C            push	$C[bp]
16225                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16226 3ACC           8D5E         12            lea	bx,$12[bp]
16227 3ACF           53                         push	bx
16228                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16229 3AD0           E8         5C09            call	_vbe_biosfn_set_mode
16230 3AD3           83C4                   08  add	sp,*8
16231                                           !BCC_EOS
16232                                           ! 1942           break;
16233 3AD6           EB           5C            jmp .46
16234                                           !BCC_EOS
16235                                           ! 1943          case 0x04:
16236                                           ! 1944           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16237                       00003AD8            .4C:
16238                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16239 3AD8           8D5E         0C            lea	bx,$C[bp]
16240 3ADB           53                         push	bx
16241                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16242 3ADC           FF76         16            push	$16[bp]
16243                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16244 3ADF           FF76         0E            push	$E[bp]
16245                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16246 3AE2           FF76         10            push	$10[bp]
16247                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16248 3AE5           8D5E         12            lea	bx,$12[bp]
16249 3AE8           53                         push	bx
16250                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16251 3AE9           E8         5F24            call	_vbe_biosfn_save_restore_state
16252 3AEC           83C4                   0A  add	sp,*$A
16253                                           !BCC_EOS
16254                                           ! 1945           break;
16255 3AEF           EB           43            jmp .46
16256                                           !BCC_EOS
16257                                           ! 1946          case 0x09:
16258                                           ! 1947           AX=0x100;
16259                       00003AF1            .4D:
16260                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16261 3AF1           B8                   0100  mov	ax,#$100
16262 3AF4           8946         12            mov	$12[bp],ax
16263                                           !BCC_EOS
16264                                           ! 1948           break;
16265 3AF7           EB           3B            jmp .46
16266                                           !BCC_EOS
16267                                           ! 1949          case 0x0A:
16268                                           ! 1950           AX=0x100;
16269                       00003AF9            .4E:
16270                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16271 3AF9           B8                   0100  mov	ax,#$100
16272 3AFC           8946         12            mov	$12[bp],ax
16273                                           !BCC_EOS
16274                                           ! 1951           break;
16275 3AFF           EB           33            jmp .46
16276                                           !BCC_EOS
16277                                           ! 1952          default:
16278                                           ! 1953           AX=0x100;
16279                       00003B01            .4F:
16280                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16281 3B01           B8                   0100  mov	ax,#$100
16282 3B04           8946         12            mov	$12[bp],ax
16283                                           !BCC_EOS
16284                                           ! 1954           }
16285                                           ! 1955         }
16286 3B07           EB           2B            jmp .46
16287                       00003B09            .48:
16288 3B09           2C                     00  sub	al,*0
16289 3B0B           72           F4            jb 	.4F
16290 3B0D           3C                     0A  cmp	al,*$A
16291 3B0F           77           21            ja  	.50
16292 3B11           30E4                       xor	ah,ah
16293 3B13           D1E0                       shl	ax,*1
16294 3B15           89C3                       mov	bx,ax
16295 3B17           2E                         seg	cs
16296 3B18           FFA7       3B1C            br	.51[bx]
16297                       00003B1C            .51:
16298 3B1C                      3A9B            .word	.49
16299 3B1E                      3AAE            .word	.4A
16300 3B20                      3AC3            .word	.4B
16301 3B22                      3B01            .word	.4F
16302 3B24                      3AD8            .word	.4C
16303 3B26                      3B01            .word	.4F
16304 3B28                      3B01            .word	.4F
16305 3B2A                      3B01            .word	.4F
16306 3B2C                      3B01            .word	.4F
16307 3B2E                      3AF1            .word	.4D
16308 3B30                      3AF9            .word	.4E
16309                       00003B32            .50:
16310 3B32           EB           CD            jmp	.4F
16311                       00003B34            .46:
16312                                           ! 1956         else {
16313 3B34           EB           06            jmp .52
16314                       00003B36            .44:
16315                                           ! 1957           AX=0x0100;
16316                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16317 3B36           B8                   0100  mov	ax,#$100
16318 3B39           8946         12            mov	$12[bp],ax
16319                                           !BCC_EOS
16320                                           ! 1958           }
16321                                           ! 1959         break;
16322                       00003B3C            .52:
16323 3B3C           EB           56            jmp .1
16324                                           !BCC_EOS
16325                                           ! 1960   }
16326                                           ! 1961 }
16327 3B3E           EB           54            jmp .1
16328                       00003B40            .3:
16329 3B40           2D                   0000  sub	ax,*0
16330 3B43           7C           4F            jl  	.1
16331 3B45           3D                   001C  cmp	ax,*$1C
16332 3B48           77           43            ja  	.53
16333 3B4A           D1E0                       shl	ax,*1
16334 3B4C           89C3                       mov	bx,ax
16335 3B4E           2E                         seg	cs
16336 3B4F           FFA7       3B53            br	.54[bx]
16337                       00003B53            .54:
16338 3B53                      3669            .word	.4
16339 3B55                      36C7            .word	.13
16340 3B57                      36DE            .word	.14
16341 3B59                      36F2            .word	.15
16342 3B5B                      370B            .word	.16
16343 3B5D                      3722            .word	.17
16344 3B5F                      3730            .word	.18
16345 3B61                      376B            .word	.19
16346 3B63                      37A5            .word	.1A
16347 3B65                      37BA            .word	.1B
16348 3B67                      37DA            .word	.1C
16349 3B69                      3B94            .word	.1
16350 3B6B                      37FA            .word	.1D
16351 3B6D                      3817            .word	.1E
16352 3B6F                      3832            .word	.1F
16353 3B71                      3B94            .word	.1
16354 3B73                      384F            .word	.20
16355 3B75                      385E            .word	.21
16356 3B77                      399C            .word	.33
16357 3B79                      39EC            .word	.3A
16358 3B7B                      3B94            .word	.1
16359 3B7D                      3B94            .word	.1
16360 3B7F                      3B94            .word	.1
16361 3B81                      3B94            .word	.1
16362 3B83                      3B94            .word	.1
16363 3B85                      3B94            .word	.1
16364 3B87                      3B94            .word	.1
16365 3B89                      3A20            .word	.3B
16366 3B8B                      3A3C            .word	.3C
16367                       00003B8D            .53:
16368 3B8D           2D                   004F  sub	ax,*$4F
16369 3B90         0F84         FEF9            beq 	.43
16370                       00003B94            .1:
16371                       FFFFFFFE            ..FFFF	=	-2
16372 3B94           5D                         pop	bp
16373 3B95           C3                         ret
16374                                           ! 1962 static void biosfn_set_video_mode(mode) Bit8u mode;
16375                                           ! Register BX used in function int10_func
16376                       00003B96            _biosfn_set_video_mode:
16377                                           !BCC_EOS
16378                                           ! 1963 {
16379                                           ! 1964  Bit8u noclearmem=mode&0x80;
16380 3B96           55                         push	bp
16381 3B97           89E5                       mov	bp,sp
16382 3B99           4C                         dec	sp
16383                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16384 3B9A           8A46         04            mov	al,4[bp]
16385 3B9D           24                     80  and	al,#$80
16386                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16387 3B9F           8846         FF            mov	-1[bp],al
16388                                           !BCC_EOS
16389                                           ! 1965  Bit8u line,mmask,*palette,vpti;
16390                                           !BCC_EOS
16391                                           ! 1966  Bit16u i,twidth,theightm1,cheight;
16392                                           !BCC_EOS
16393                                           ! 1967  Bit8u modeset_ctl,video_ctl,vga_switches;
16394                                           !BCC_EOS
16395                                           ! 1968  Bit16u crtc_addr;
16396                                           !BCC_EOS
16397                                           ! 1969  if (vbe_has_vbe_display()) {
16398 3BA2           83C4                   EB  add	sp,*-$15
16399                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16400 3BA5           E8         5764            call	_vbe_has_vbe_display
16401 3BA8           85C0                       test	ax,ax
16402 3BAA           74           08            je  	.55
16403                       00003BAC            .56:
16404                                           ! 1970    dispi_set_enable(0x00);
16405                                           ! Debug: list int = const 0 (used reg = )
16406 3BAC           31C0                       xor	ax,ax
16407 3BAE           50                         push	ax
16408                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16409 3BAF           E8         5527            call	_dispi_set_enable
16410 3BB2           44                         inc	sp
16411 3BB3           44                         inc	sp
16412                                           !BCC_EOS
16413                                           ! 1971   }
16414                                           ! 1972  mode=mode&0x7f;
16415                       00003BB4            .55:
16416                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16417 3BB4           8A46         04            mov	al,4[bp]
16418 3BB7           24                     7F  and	al,*$7F
16419                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16420 3BB9           8846         04            mov	4[bp],al
16421                                           !BCC_EOS
16422                                           ! 1973  line=find_vga_entry(mode);
16423                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16424 3BBC           8A46         04            mov	al,4[bp]
16425 3BBF           30E4                       xor	ah,ah
16426 3BC1           50                         push	ax
16427                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16428 3BC2           E8         3EDC            call	_find_vga_entry
16429 3BC5           44                         inc	sp
16430 3BC6           44                         inc	sp
16431                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16432 3BC7           8846         FE            mov	-2[bp],al
16433                                           !BCC_EOS
16434                                           ! 1974  if(line==0xFF)
16435                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16436 3BCA           8A46         FE            mov	al,-2[bp]
16437 3BCD           3C                     FF  cmp	al,#$FF
16438 3BCF           75           04            jne 	.57
16439                       00003BD1            .58:
16440                                           ! 1975   return;
16441 3BD1           89EC                       mov	sp,bp
16442 3BD3           5D                         pop	bp
16443 3BD4           C3                         ret
16444                                           !BCC_EOS
16445                                           ! 1976  vpti=line_to_vpti[line];
16446                       00003BD5            .57:
16447                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16448 3BD5           8A46         FE            mov	al,-2[bp]
16449 3BD8           30E4                       xor	ah,ah
16450 3BDA           89C3                       mov	bx,ax
16451                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16452 3BDC           8A87       027D            mov	al,_line_to_vpti[bx]
16453 3BE0           8846         F9            mov	-7[bp],al
16454                                           !BCC_EOS
16455                                           ! 1977  twidth=video_param_table[vpti].twidth;
16456                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16457 3BE3           8A46         F9            mov	al,-7[bp]
16458 3BE6           30E4                       xor	ah,ah
16459 3BE8           B1                     06  mov	cl,*6
16460 3BEA           D3E0                       shl	ax,cl
16461 3BEC           89C3                       mov	bx,ax
16462                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16463 3BEE           8A87       0291            mov	al,_video_param_table[bx]
16464 3BF2           30E4                       xor	ah,ah
16465 3BF4           8946         F4            mov	-$C[bp],ax
16466                                           !BCC_EOS
16467                                           ! 1978  theightm1=video_param_table[vpti].theightm1;
16468                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16469 3BF7           8A46         F9            mov	al,-7[bp]
16470 3BFA           30E4                       xor	ah,ah
16471 3BFC           B1                     06  mov	cl,*6
16472 3BFE           D3E0                       shl	ax,cl
16473 3C00           89C3                       mov	bx,ax
16474 3C02           81C3                 0291  add	bx,#_video_param_table
16475                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16476 3C06           8A47         01            mov	al,1[bx]
16477 3C09           30E4                       xor	ah,ah
16478 3C0B           8946         F2            mov	-$E[bp],ax
16479                                           !BCC_EOS
16480                                           ! 1979  cheight=video_param_table[vp
16481                                           ! 1979 ti].cheight;
16482                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16483 3C0E           8A46         F9            mov	al,-7[bp]
16484 3C11           30E4                       xor	ah,ah
16485 3C13           B1                     06  mov	cl,*6
16486 3C15           D3E0                       shl	ax,cl
16487 3C17           89C3                       mov	bx,ax
16488 3C19           81C3                 0291  add	bx,#_video_param_table
16489                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16490 3C1D           8A47         02            mov	al,2[bx]
16491 3C20           30E4                       xor	ah,ah
16492 3C22           8946         F0            mov	-$10[bp],ax
16493                                           !BCC_EOS
16494                                           ! 1980  video_ctl=read_byte(0x40,0x87);
16495                                           ! Debug: list int = const $87 (used reg = )
16496 3C25           B8                   0087  mov	ax,#$87
16497 3C28           50                         push	ax
16498                                           ! Debug: list int = const $40 (used reg = )
16499 3C29           B8                   0040  mov	ax,*$40
16500 3C2C           50                         push	ax
16501                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16502 3C2D           E8         3F5D            call	_read_byte
16503 3C30           83C4                   04  add	sp,*4
16504                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16505 3C33           8846         EE            mov	-$12[bp],al
16506                                           !BCC_EOS
16507                                           ! 1981  vga_switches=read_byte(0x40,0x88);
16508                                           ! Debug: list int = const $88 (used reg = )
16509 3C36           B8                   0088  mov	ax,#$88
16510 3C39           50                         push	ax
16511                                           ! Debug: list int = const $40 (used reg = )
16512 3C3A           B8                   0040  mov	ax,*$40
16513 3C3D           50                         push	ax
16514                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16515 3C3E           E8         3F4C            call	_read_byte
16516 3C41           83C4                   04  add	sp,*4
16517                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16518 3C44           8846         ED            mov	-$13[bp],al
16519                                           !BCC_EOS
16520                                           ! 1982  modeset_ctl=read_byte(0x40,0x89);
16521                                           ! Debug: list int = const $89 (used reg = )
16522 3C47           B8                   0089  mov	ax,#$89
16523 3C4A           50                         push	ax
16524                                           ! Debug: list int = const $40 (used reg = )
16525 3C4B           B8                   0040  mov	ax,*$40
16526 3C4E           50                         push	ax
16527                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16528 3C4F           E8         3F3B            call	_read_byte
16529 3C52           83C4                   04  add	sp,*4
16530                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16531 3C55           8846         EF            mov	-$11[bp],al
16532                                           !BCC_EOS
16533                                           ! 1983  if((modeset_ctl&0x08)==0)
16534                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16535 3C58           8A46         EF            mov	al,-$11[bp]
16536 3C5B           24                     08  and	al,*8
16537                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16538 3C5D           84C0                       test	al,al
16539 3C5F         0F85         0145            bne 	.59
16540                       00003C63            .5A:
16541                                           ! 1984   {
16542                                           ! 1985    outb(0x3c6,vga_modes[line].pelmask);
16543                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16544 3C63           8A46         FE            mov	al,-2[bp]
16545 3C66           30E4                       xor	ah,ah
16546 3C68           B1                     03  mov	cl,*3
16547 3C6A           D3E0                       shl	ax,cl
16548 3C6C           89C3                       mov	bx,ax
16549 3C6E           81C3                 01FD  add	bx,#_vga_modes
16550                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16551 3C72           8A47         06            mov	al,6[bx]
16552 3C75           30E4                       xor	ah,ah
16553 3C77           50                         push	ax
16554                                           ! Debug: list int = const $3C6 (used reg = )
16555 3C78           B8                   03C6  mov	ax,#$3C6
16556 3C7B           50                         push	ax
16557                                           ! Debug: func () void = outb+0 (used reg = )
16558 3C7C           E8         3F7A            call	_outb
16559 3C7F           83C4                   04  add	sp,*4
16560                                           !BCC_EOS
16561                                           ! 1986    outb(0x3c8,0x00);
16562                                           ! Debug: list int = const 0 (used reg = )
16563 3C82           31C0                       xor	ax,ax
16564 3C84           50                         push	ax
16565                                           ! Debug: list int = const $3C8 (used reg = )
16566 3C85           B8                   03C8  mov	ax,#$3C8
16567 3C88           50                         push	ax
16568                                           ! Debug: func () void = outb+0 (used reg = )
16569 3C89           E8         3F6D            call	_outb
16570 3C8C           83C4                   04  add	sp,*4
16571                                           !BCC_EOS
16572                                           ! 1987    switch(vga_modes[line].dacmodel)
16573                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16574 3C8F           8A46         FE            mov	al,-2[bp]
16575 3C92           30E4                       xor	ah,ah
16576 3C94           B1                     03  mov	cl,*3
16577 3C96           D3E0                       shl	ax,cl
16578 3C98           89C3                       mov	bx,ax
16579 3C9A           81C3                 01FD  add	bx,#_vga_modes
16580 3C9E           8A47         07            mov	al,7[bx]
16581                                           ! 1988     {case 0:
16582 3CA1           EB           22            jmp .5D
16583                                           ! 1989       palette=&palette0;
16584                       00003CA3            .5E:
16585                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16586 3CA3           BB                   0A11  mov	bx,#_palette0
16587 3CA6           895E         FA            mov	-6[bp],bx
16588                                           !BCC_EOS
16589                                           ! 1990       break;
16590 3CA9           EB           2A            jmp .5B
16591                                           !BCC_EOS
16592                                           ! 1991      case 1:
16593                                           ! 1992       palette=&palette1;
16594                       00003CAB            .5F:
16595                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16596 3CAB           BB                   0AD1  mov	bx,#_palette1
16597 3CAE           895E         FA            mov	-6[bp],bx
16598                                           !BCC_EOS
16599                                           ! 1993       break;
16600 3CB1           EB           22            jmp .5B
16601                                           !BCC_EOS
16602                                           ! 1994      case 2:
16603                                           ! 1995       palette=&palette2;
16604                       00003CB3            .60:
16605                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16606 3CB3           BB                   0B91  mov	bx,#_palette2
16607 3CB6           895E         FA            mov	-6[bp],bx
16608                                           !BCC_EOS
16609                                           ! 1996       break;
16610 3CB9           EB           1A            jmp .5B
16611                                           !BCC_EOS
16612                                           ! 1997      case 3:
16613                                           ! 1998       palette=&palette3;
16614                       00003CBB            .61:
16615                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16616 3CBB           BB                   0C51  mov	bx,#_palette3
16617 3CBE           895E         FA            mov	-6[bp],bx
16618                                           !BCC_EOS
16619                                           ! 1999       break;
16620 3CC1           EB           12            jmp .5B
16621                                           !BCC_EOS
16622                                           ! 2000     }
16623                                           ! 2001    for(i=0;i<0x0100;i++)
16624 3CC3           EB           10            jmp .5B
16625                       00003CC5            .5D:
16626 3CC5           2C                     00  sub	al,*0
16627 3CC7           74           DA            je 	.5E
16628 3CC9           2C                     01  sub	al,*1
16629 3CCB           74           DE            je 	.5F
16630 3CCD           2C                     01  sub	al,*1
16631 3CCF           74           E2            je 	.60
16632 3CD1           2C                     01  sub	al,*1
16633 3CD3           74           E6            je 	.61
16634                       00003CD5            .5B:
16635                       FFFFFFE8            ..FFFE	=	-$18
16636                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16637 3CD5           31C0                       xor	ax,ax
16638 3CD7           8946         F6            mov	-$A[bp],ax
16639                                           !BCC_EOS
16640                                           !BCC_EOS
16641                                           ! 2002     {if(i<=dac_regs[vga_modes[line].dacmodel])
16642 3CDA           E9         00AB            br 	.64
16643                       00003CDD            .65:
16644                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16645 3CDD           8A46         FE            mov	al,-2[bp]
16646 3CE0           30E4                       xor	ah,ah
16647 3CE2           B1                     03  mov	cl,*3
16648 3CE4           D3E0                       shl	ax,cl
16649 3CE6           89C3                       mov	bx,ax
16650 3CE8           81C3                 01FD  add	bx,#_vga_modes
16651                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16652 3CEC           8A47         07            mov	al,7[bx]
16653 3CEF           30E4                       xor	ah,ah
16654 3CF1           89C3                       mov	bx,ax
16655                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16656 3CF3           8A87       028D            mov	al,_dac_regs[bx]
16657 3CF7           30E4                       xor	ah,ah
16658 3CF9           3B46         F6            cmp	ax,-$A[bp]
16659 3CFC           72           5C            jb  	.66
16660                       00003CFE            .67:
16661                                           ! 2003       {outb(0x3c9,palette[(i*3)+0]);
16662                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16663 3CFE           8B46         F6            mov	ax,-$A[bp]
16664 3D01           89C2                       mov	dx,ax
16665 3D03           D1E0                       shl	ax,*1
16666 3D05           01D0                       add	ax,dx
16667                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16668                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16669 3D07           0346         FA            add	ax,-6[bp]
16670 3D0A           89C3                       mov	bx,ax
16671                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16672 3D0C           8A07                       mov	al,[bx]
16673 3D0E           30E4                       xor	ah,ah
16674 3D10           50                         push	ax
16675                                           ! Debug: list int = const $3C9 (used reg = )
16676 3D11           B8                   03C9  mov	ax,#$3C9
16677 3D14           50                         push	ax
16678                                           ! Debug: func () void = outb+0 (used reg = )
16679 3D15           E8         3EE1            call	_outb
16680 3D18           83C4                   04  add	sp,*4
16681                                           !BCC_EOS
16682                                           ! 2004        outb(0x3c9,palette[(i*3)+1]);
16683                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16684 3D1B           8B46         F6            mov	ax,-$A[bp]
16685 3D1E           89C2                       mov	dx,ax
16686 3D20           D1E0                       shl	ax,*1
16687 3D22           01D0                       add	ax,dx
16688                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16689                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16690 3D24           40                         inc	ax
16691 3D25           0346         FA            add	ax,-6[bp]
16692 3D28           89C3                       mov	bx,ax
16693                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16694 3D2A           8A07                       mov	al,[bx]
16695 3D2C           30E4                       xor	ah,ah
16696 3D2E           50                         push	ax
16697                                           ! Debug: list int = const $3C9 (used reg = )
16698 3D2F           B8                   03C9  mov	ax,#$3C9
16699 3D32           50                         push	ax
16700                                           ! Debug: func () void = outb+0 (used reg = )
16701 3D33           E8         3EC3            call	_outb
16702 3D36           83C4                   04  add	sp,*4
16703                                           !BCC_EOS
16704                                           ! 2005        outb(0x3c9,palette[(i*3)+2]);
16705                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16706 3D39           8B46         F6            mov	ax,-$A[bp]
16707 3D3C           89C2                       mov	dx,ax
16708 3D3E           D1E0                       shl	ax,*1
16709 3D40           01D0                       add	ax,dx
16710                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16711                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16712 3D42           40                         inc	ax
16713 3D43           40                         inc	ax
16714 3D44           0346         FA            add	ax,-6[bp]
16715 3D47           89C3                       mov	bx,ax
16716                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16717 3D49           8A07                       mov	al,[bx]
16718 3D4B           30E4                       xor	ah,ah
16719 3D4D           50                         push	ax
16720                                           ! Debug: list int = const $3C9 (used reg = )
16721 3D4E           B8                   03C9  mov	ax,#$3C9
16722 3D51           50                         push	ax
16723                                           ! Debug: func () void = outb+0 (used reg = )
16724 3D52           E8         3EA4            call	_outb
16725 3D55           83C4                   04  add	sp,*4
16726                                           !BCC_EOS
16727                                           ! 2006       }
16728                                           ! 2007      else
16729                                           ! 2008       {outb(0x3c9,0);
16730 3D58           EB           27            jmp .68
16731                       00003D5A            .66:
16732                                           ! Debug: list int = const 0 (used reg = )
16733 3D5A           31C0                       xor	ax,ax
16734 3D5C           50                         push	ax
16735                                           ! Debug: list int = const $3C9 (used reg = )
16736 3D5D           B8                   03C9  mov	ax,#$3C9
16737 3D60           50                         push	ax
16738                                           ! Debug: func () void = outb+0 (used reg = )
16739 3D61           E8         3E95            call	_outb
16740 3D64           83C4                   04  add	sp,*4
16741                                           !BCC_EOS
16742                                           ! 2009        outb(0x3c9,0);
16743                                           ! Debug: list int = const 0 (used reg = )
16744 3D67           31C0                       xor	ax,ax
16745 3D69           50                         push	ax
16746                                           ! Debug: list int = const $3C9 (used reg = )
16747 3D6A           B8                   03C9  mov	ax,#$3C9
16748 3D6D           50                         push	ax
16749                                           ! Debug: func () void = outb+0 (used reg = )
16750 3D6E           E8         3E88            call	_outb
16751 3D71           83C4                   04  add	sp,*4
16752                                           !BCC_EOS
16753                                           ! 2010        outb(0x3c9,0);
16754                                           ! Debug: list int = const 0 (used reg = )
16755 3D74           31C0                       xor	ax,ax
16756 3D76           50                         push	ax
16757                                           ! Debug: list int = const $3C9 (used reg = )
16758 3D77           B8                   03C9  mov	ax,#$3C9
16759 3D7A           50                         push	ax
16760                                           ! Debug: func () void = outb+0 (used reg = )
16761 3D7B           E8         3E7B            call	_outb
16762 3D7E           83C4                   04  add	sp,*4
16763                                           !BCC_EOS
16764                                           ! 2011       }
16765                                           ! 2012     }
16766                       00003D81            .68:
16767                                           ! 2013    if((modeset_ctl&0x02)==0x02)
16768                       00003D81            .63:
16769                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16770 3D81           8B46         F6            mov	ax,-$A[bp]
16771 3D84           40                         inc	ax
16772 3D85           8946         F6            mov	-$A[bp],ax
16773                       00003D88            .64:
16774                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16775 3D88           8B46         F6            mov	ax,-$A[bp]
16776 3D8B           3D                   0100  cmp	ax,#$100
16777 3D8E         0F82         FF4B            blo 	.65
16778                       00003D92            .69:
16779                       00003D92            .62:
16780                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16781 3D92           8A46         EF            mov	al,-$11[bp]
16782 3D95           24                     02  and	al,*2
16783                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16784 3D97           3C                     02  cmp	al,*2
16785 3D99           75           0D            jne 	.6A
16786                       00003D9B            .6B:
16787                                           ! 2014     {
16788                                           ! 2015      biosfn_perform_gray_scale_summing(0x00, 0x100);
16789                                           ! Debug: list int = const $100 (used reg = )
16790 3D9B           B8                   0100  mov	ax,#$100
16791 3D9E           50                         push	ax
16792                                           ! Debug: list int = const 0 (used reg = )
16793 3D9F           31C0                       xor	ax,ax
16794 3DA1           50                         push	ax
16795                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16796 3DA2           E8         26E1            call	_biosfn_perform_gray_scale_summing
16797 3DA5           83C4                   04  add	sp,*4
16798                                           !BCC_EOS
16799                                           ! 2016     }
16800                                           ! 2017   }
16801                       00003DA8            .6A:
16802                                           ! 2018  inb(0x3da);
16803                       00003DA8            .59:
16804                                           ! Debug: list int = const $3DA (used reg = )
16805 3DA8           B8                   03DA  mov	ax,#$3DA
16806 3DAB           50                         push	ax
16807                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16808 3DAC           E8         3E34            call	_inb
16809 3DAF           44                         inc	sp
16810 3DB0           44                         inc	sp
16811                                           !BCC_EOS
16812                                           ! 2019  for(i=0;i<=0x13;i++)
16813                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16814 3DB1           31C0                       xor	ax,ax
16815 3DB3           8946         F6            mov	-$A[bp],ax
16816                                           !BCC_EOS
16817                                           !BCC_EOS
16818                                           ! 2020   {outb(0x3c0,i);
16819 3DB6           EB           38            jmp .6E
16820                       00003DB8            .6F:
16821                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16822 3DB8           FF76         F6            push	-$A[bp]
16823                                           ! Debug: list int = const $3C0 (used reg = )
16824 3DBB           B8                   03C0  mov	ax,#$3C0
16825 3DBE           50                         push	ax
16826                                           ! Debug: func () void = outb+0 (used reg = )
16827 3DBF           E8         3E37            call	_outb
16828 3DC2           83C4                   04  add	sp,*4
16829                                           !BCC_EOS
16830                                           ! 2021    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16831                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16832 3DC5           8A46         F9            mov	al,-7[bp]
16833 3DC8           30E4                       xor	ah,ah
16834 3DCA           B1                     06  mov	cl,*6
16835 3DCC           D3E0                       shl	ax,cl
16836 3DCE           89C3                       mov	bx,ax
16837 3DD0           81C3                 0291  add	bx,#_video_param_table
16838                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16839 3DD4           8B46         F6            mov	ax,-$A[bp]
16840 3DD7           01C3                       add	bx,ax
16841                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16842 3DD9           8A47         23            mov	al,$23[bx]
16843 3DDC           30E4                       xor	ah,ah
16844 3DDE           50                         push	ax
16845                                           ! Debug: list int = const $3C0 (used reg = )
16846 3DDF           B8                   03C0  mov	ax,#$3C0
16847 3DE2           50                         push	ax
16848                                           ! Debug: func () void = outb+0 (used reg = )
16849 3DE3           E8         3E13            call	_outb
16850 3DE6           83C4                   04  add	sp,*4
16851                                           !BCC_EOS
16852                                           ! 2022   }
16853                                           ! 2023  outb(0x3c0,0x14);
16854                       00003DE9            .6D:
16855                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16856 3DE9           8B46         F6            mov	ax,-$A[bp]
16857 3DEC           40                         inc	ax
16858 3DED           8946         F6            mov	-$A[bp],ax
16859                       00003DF0            .6E:
16860                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16861 3DF0           8B46         F6            mov	ax,-$A[bp]
16862 3DF3           3D                   0013  cmp	ax,*$13
16863 3DF6           76           C0            jbe	.6F
16864                       00003DF8            .70:
16865                       00003DF8            .6C:
16866                                           ! Debug: list int = const $14 (used reg = )
16867 3DF8           B8                   0014  mov	ax,*$14
16868 3DFB           50                         push	ax
16869                                           ! Debug: list int = const $3C0 (used reg = )
16870 3DFC           B8                   03C0  mov	ax,#$3C0
16871 3DFF           50                         push	ax
16872                                           ! Debug: func () void = outb+0 (used reg = )
16873 3E00           E8         3DF6            call	_outb
16874 3E03           83C4                   04  add	sp,*4
16875                                           !BCC_EOS
16876                                           ! 2024  outb(0x3c0,0x00);
16877                                           ! Debug: list int = const 0 (used reg = )
16878 3E06           31C0                       xor	ax,ax
16879 3E08           50                         push	ax
16880                                           ! Debug: list int = const $3C0 (used reg = )
16881 3E09           B8                   03C0  mov	ax,#$3C0
16882 3E0C           50                         push	ax
16883                                           ! Debug: func () void = outb+0 (used reg = )
16884 3E0D           E8         3DE9            call	_outb
16885 3E10           83C4                   04  add	sp,*4
16886                                           !BCC_EOS
16887                                           ! 2025  outb(0x3c4,0);
16888                                           ! Debug: list int = const 0 (used reg = )
16889 3E13           31C0                       xor	ax,ax
16890 3E15           50                         push	ax
16891                                           ! Debug: list int = const $3C4 (used reg = )
16892 3E16           B8                   03C4  mov	ax,#$3C4
16893 3E19           50                         push	ax
16894                                           ! Debug: func () void = outb+0 (used reg = )
16895 3E1A           E8         3DDC            call	_outb
16896 3E1D           83C4                   04  add	sp,*4
16897                                           !BCC_EOS
16898                                           ! 2026  outb(0x3c5,0x03);
16899                                           ! Debug: list int = const 3 (used reg = )
16900 3E20           B8                   0003  mov	ax,*3
16901 3E23           50                         push	ax
16902                                           ! Debug: list int = const $3C5 (used reg = )
16903 3E24           B8                   03C5  mov	ax,#$3C5
16904 3E27           50                         push	ax
16905                                           ! Debug: func () void = outb+0 (used reg = )
16906 3E28           E8         3DCE            call	_outb
16907 3E2B           83C4                   04  add	sp,*4
16908                                           !BCC_EOS
16909                                           ! 2027  for(i=1;i<=4;i++)
16910                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16911 3E2E           B8                   0001  mov	ax,*1
16912 3E31           8946         F6            mov	-$A[bp],ax
16913                                           !BCC_EOS
16914                                           !BCC_EOS
16915                                           ! 2028   {outb(0x3c4,i);
16916 3E34           EB           3F            jmp .73
16917                       00003E36            .74:
16918                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16919 3E36           FF76         F6            push	-$A[bp]
16920                                           ! Debug: list int = const $3C4 (used reg = )
16921 3E39           B8                   03C4  mov	ax,#$3C4
16922 3E3C           50                         push	ax
16923                                           ! Debug: func () void = outb+0 (used reg = )
16924 3E3D           E8         3DB9            call	_outb
16925 3E40           83C4                   04  add	sp,*4
16926                                           !BCC_EOS
16927                                           ! 2029    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16928                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16929 3E43           8B46         F6            mov	ax,-$A[bp]
16930 3E46           48                         dec	ax
16931 3E47           50                         push	ax
16932                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16933 3E48           8A46         F9            mov	al,-7[bp]
16934 3E4B           30E4                       xor	ah,ah
16935 3E4D           B1                     06  mov	cl,*6
16936 3E4F           D3E0                       shl	ax,cl
16937 3E51           89C3                       mov	bx,ax
16938 3E53           81C3                 0291  add	bx,#_video_param_table
16939                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16940 3E57           8B46         E8            mov	ax,-$18[bp]
16941 3E5A           01C3                       add	bx,ax
16942 3E5C           44                         inc	sp
16943 3E5D           44                         inc	sp
16944                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16945 3E5E           8A47         05            mov	al,5[bx]
16946 3E61           30E4                       xor	ah,ah
16947 3E63           50                         push	ax
16948                                           ! Debug: list int = const $3C5 (used reg = )
16949 3E64           B8                   03C5  mov	ax,#$3C5
16950 3E67           50                         push	ax
16951                                           ! Debug: func () void = outb+0 (used reg = )
16952 3E68           E8         3D8E            call	_outb
16953 3E6B           83C4                   04  add	sp,*4
16954                                           !BCC_EOS
16955                                           ! 2030   }
16956                                           ! 2031  for(i=0;i<=8;i++)
16957                       00003E6E            .72:
16958                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16959 3E6E           8B46         F6            mov	ax,-$A[bp]
16960 3E71           40                         inc	ax
16961 3E72           8946         F6            mov	-$A[bp],ax
16962                       00003E75            .73:
16963                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16964 3E75           8B46         F6            mov	ax,-$A[bp]
16965 3E78           3D                   0004  cmp	ax,*4
16966 3E7B           76           B9            jbe	.74
16967                       00003E7D            .75:
16968                       00003E7D            .71:
16969                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16970 3E7D           31C0                       xor	ax,ax
16971 3E7F           8946         F6            mov	-$A[bp],ax
16972                                           !BCC_EOS
16973                                           !BCC_EOS
16974                                           ! 2032   {outb(0x3ce,i);
16975 3E82           EB           38            jmp .78
16976                       00003E84            .79:
16977                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16978 3E84           FF76         F6            push	-$A[bp]
16979                                           ! Debug: list int = const $3CE (used reg = )
16980 3E87           B8                   03CE  mov	ax,#$3CE
16981 3E8A           50                         push	ax
16982                                           ! Debug: func () void = outb+0 (used reg = )
16983 3E8B           E8         3D6B            call	_outb
16984 3E8E           83C4                   04  add	sp,*4
16985                                           !BCC_EOS
16986                                           ! 2033    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16987                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16988 3E91           8A46         F9            mov	al,-7[bp]
16989 3E94           30E4                       xor	ah,ah
16990 3E96           B1                     06  mov	cl,*6
16991 3E98           D3E0                       shl	ax,cl
16992 3E9A           89C3                       mov	bx,ax
16993 3E9C           81C3                 0291  add	bx,#_video_param_table
16994                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16995 3EA0           8B46         F6            mov	ax,-$A[bp]
16996 3EA3           01C3                       add	bx,ax
16997                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16998 3EA5           8A47         37            mov	al,$37[bx]
16999 3EA8           30E4                       xor	ah,ah
17000 3EAA           50                         push	ax
17001                                           ! Debug: list int = const $3CF (used reg = )
17002 3EAB           B8                   03CF  mov	ax,#$3CF
17003 3EAE           50                         push	ax
17004                                           ! Debug: func () void = outb+0 (used reg = )
17005 3EAF           E8         3D47            call	_outb
17006 3EB2           83C4                   04  add	sp,*4
17007                                           !BCC_EOS
17008                                           ! 2034   }
17009                                           ! 2035  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
17010                       00003EB5            .77:
17011                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17012 3EB5           8B46         F6            mov	ax,-$A[bp]
17013 3EB8           40                         inc	ax
17014 3EB9           8946         F6            mov	-$A[bp],ax
17015                       00003EBC            .78:
17016                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17017 3EBC           8B46         F6            mov	ax,-$A[bp]
17018 3EBF           3D                   0008  cmp	ax,*8
17019 3EC2           76           C0            jbe	.79
17020                       00003EC4            .7A:
17021                       00003EC4            .76:
17022                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17023 3EC4           8A46         FE            mov	al,-2[bp]
17024 3EC7           30E4                       xor	ah,ah
17025 3EC9           B1                     03  mov	cl,*3
17026 3ECB           D3E0                       shl	ax,cl
17027 3ECD           89C3                       mov	bx,ax
17028 3ECF           81C3                 01FD  add	bx,#_vga_modes
17029                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17030 3ED3           8A47         02            mov	al,2[bx]
17031 3ED6           3C                     01  cmp	al,*1
17032 3ED8           75           05            jne 	.7B
17033                       00003EDA            .7C:
17034 3EDA           B8                   03B4  mov	ax,#$3B4
17035 3EDD           EB           03            jmp .7D
17036                       00003EDF            .7B:
17037 3EDF           B8                   03D4  mov	ax,#$3D4
17038                       00003EE2            .7D:
17039                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17040 3EE2           8946         EA            mov	-$16[bp],ax
17041                                           !BCC_EOS
17042                                           ! 2036  outw(crtc_addr,0x0011);
17043                                           ! Debug: list int = const $11 (used reg = )
17044 3EE5           B8                   0011  mov	ax,*$11
17045 3EE8           50                         push	ax
17046                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17047 3EE9           FF76         EA            push	-$16[bp]
17048                                           ! Debug: func () void = outw+0 (used reg = )
17049 3EEC           E8         3D1A            call	_outw
17050 3EEF           83C4                   04  add	sp,*4
17051                                           !BCC_EOS
17052                                           ! 2037  for(i=0;i<=0x18;i++)
17053                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17054 3EF2           31C0                       xor	ax,ax
17055 3EF4           8946         F6            mov	-$A[bp],ax
17056                                           !BCC_EOS
17057                                           !BCC_EOS
17058                                           ! 2038   {outb(crtc_addr,i);
17059 3EF7           EB           38            jmp .80
17060                       00003EF9            .81:
17061                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17062 3EF9           FF76         F6            push	-$A[bp]
17063                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17064 3EFC           FF76         EA            push	-$16[bp]
17065                                           ! Debug: func () void = outb+0 (used reg = )
17066 3EFF           E8         3CF7            call	_outb
17067 3F02           83C4                   04  add	sp,*4
17068                                           !BCC_EOS
17069                                           ! 2039    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17070                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17071 3F05           8A46         F9            mov	al,-7[bp]
17072 3F08           30E4                       xor	ah,ah
17073 3F0A           B1                     06  mov	cl,*6
17074 3F0C           D3E0                       shl	ax,cl
17075 3F0E           89C3                       mov	bx,ax
17076 3F10           81C3                 0291  add	bx,#_video_param_table
17077                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17078 3F14           8B46         F6            mov	ax,-$A[bp]
17079 3F17           01C3                       add	bx,ax
17080                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17081 3F19           8A47         0A            mov	al,$A[bx]
17082 3F1C           30E4                       xor	ah,ah
17083 3F1E           50                         push	ax
17084                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17085 3F1F           8B46         EA            mov	ax,-$16[bp]
17086                                           ! Debug: list unsigned int = ax+1 (used reg = )
17087 3F22           40                         inc	ax
17088 3F23           50                         push	ax
17089                                           ! Debug: func () void = outb+0 (used reg = )
17090 3F24           E8         3CD2            call	_outb
17091 3F27           83C4                   04  add	sp,*4
17092                                           !BCC_EOS
17093                                           ! 2040   }
17094                                           ! 2041  outb(0x3c2,video_param_table[vpti].miscreg);
17095                       00003F2A            .7F:
17096                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17097 3F2A           8B46         F6            mov	ax,-$A[bp]
17098 3F2D           40                         inc	ax
17099 3F2E           8946         F6            mov	-$A[bp],ax
17100                       00003F31            .80:
17101                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17102 3F31           8B46         F6            mov	ax,-$A[bp]
17103 3F34           3D                   0018  cmp	ax,*$18
17104 3F37           76           C0            jbe	.81
17105                       00003F39            .82:
17106                       00003F39            .7E:
17107                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17108 3F39           8A46         F9            mov	al,-7[bp]
17109 3F3C           30E4                       xor	ah,ah
17110 3F3E           B1                     06  mov	cl,*6
17111 3F40           D3E0                       shl	ax,cl
17112 3F42           89C3                       mov	bx,ax
17113 3F44           81C3                 0291  add	bx,#_video_param_table
17114                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17115 3F48           8A47         09            mov	al,9[bx]
17116 3F4B           30E4                       xor	ah,ah
17117 3F4D           50                         push	ax
17118                                           ! Debug: list int = const $3C2 (used reg = )
17119 3F4E           B8                   03C2  mov	ax,#$3C2
17120 3F51           50                         push	ax
17121                                           ! Debug: func () void = outb+0 (used reg = )
17122 3F52           E8         3CA4            call	_outb
17123 3F55           83C4                   04  add	sp,*4
17124                                           !BCC_EOS
17125                                           ! 2042  outb(0x3c0,0x20);
17126                                           ! Debug: list int = const $20 (used reg = )
17127 3F58           B8                   0020  mov	ax,*$20
17128 3F5B           50                         push	ax
17129                                           ! Debug: list int = const $3C0 (used reg = )
17130 3F5C           B8                   03C0  mov	ax,#$3C0
17131 3F5F           50                         push	ax
17132                                           ! Debug: func () void = outb+0 (used reg = )
17133 3F60           E8         3C96            call	_outb
17134 3F63           83C4                   04  add	sp,*4
17135                                           !BCC_EOS
17136                                           ! 2043  inb(0x3da);
17137                                           ! Debug: list int = const $3DA (used reg = )
17138 3F66           B8                   03DA  mov	ax,#$3DA
17139 3F69           50                         push	ax
17140                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17141 3F6A           E8         3C76            call	_inb
17142 3F6D           44                         inc	sp
17143 3F6E           44                         inc	sp
17144                                           !BCC_EOS
17145                                           ! 2044  if(noclearmem==0x00)
17146                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17147 3F6F           8A46         FF            mov	al,-1[bp]
17148 3F72           84C0                       test	al,al
17149 3F74         0F85         00C1            bne 	.83
17150                       00003F78            .84:
17151                                           ! 2045   {
17152                                           ! 2046    if(vga_modes[line].class==0x00)
17153                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17154 3F78           8A46         FE            mov	al,-2[bp]
17155 3F7B           30E4                       xor	ah,ah
17156 3F7D           B1                     03  mov	cl,*3
17157 3F7F           D3E0                       shl	ax,cl
17158 3F81           89C3                       mov	bx,ax
17159 3F83           81C3                 01FD  add	bx,#_vga_modes
17160                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17161 3F87           8A47         01            mov	al,1[bx]
17162 3F8A           84C0                       test	al,al
17163 3F8C           75           26            jne 	.85
17164                       00003F8E            .86:
17165                                           ! 2047     {
17166                                           ! 2048      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17167                                           ! Debug: list int = const $4000 (used reg = )
17168 3F8E           B8                   4000  mov	ax,#$4000
17169 3F91           50                         push	ax
17170                                           ! Debug: list int = const $720 (used reg = )
17171 3F92           B8                   0720  mov	ax,#$720
17172 3F95           50                         push	ax
17173                                           ! Debug: list int = const 0 (used reg = )
17174 3F96           31C0                       xor	ax,ax
17175 3F98           50                         push	ax
17176                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17177 3F99           8A46         FE            mov	al,-2[bp]
17178 3F9C           30E4                       xor	ah,ah
17179 3F9E           B1                     03  mov	cl,*3
17180 3FA0           D3E0                       shl	ax,cl
17181 3FA2           89C3                       mov	bx,ax
17182 3FA4           81C3                 01FD  add	bx,#_vga_modes
17183                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17184 3FA8           FF77         04            push	4[bx]
17185                                           ! Debug: func () void = memsetw+0 (used reg = )
17186 3FAB           E8         3B5A            call	_memsetw
17187 3FAE           83C4                   08  add	sp,*8
17188                                           !BCC_EOS
17189                                           ! 2049     }
17190                                           ! 2050    else
17191                                           ! 2051     {
17192 3FB1           E9         0085            br 	.87
17193                       00003FB4            .85:
17194                                           ! 2052      if(mode<0x0d)
17195                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17196 3FB4           8A46         04            mov	al,4[bp]
17197 3FB7           3C                     0D  cmp	al,*$D
17198 3FB9           73           24            jae 	.88
17199                       00003FBB            .89:
17200                                           ! 2053       {
17201                                           ! 2054        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17202                                           ! Debug: list int = const $4000 (used reg = )
17203 3FBB           B8                   4000  mov	ax,#$4000
17204 3FBE           50                         push	ax
17205                                           ! Debug: list int = const 0 (used reg = )
17206 3FBF           31C0                       xor	ax,ax
17207 3FC1           50                         push	ax
17208                                           ! Debug: list int = const 0 (used reg = )
17209 3FC2           31C0                       xor	ax,ax
17210 3FC4           50                         push	ax
17211                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17212 3FC5           8A46         FE            mov	al,-2[bp]
17213 3FC8           30E4                       xor	ah,ah
17214 3FCA           B1                     03  mov	cl,*3
17215 3FCC           D3E0                       shl	ax,cl
17216 3FCE           89C3                       mov	bx,ax
17217 3FD0           81C3                 01FD  add	bx,#_vga_modes
17218                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17219 3FD4           FF77         04            push	4[bx]
17220                                           ! Debug: func () void = memsetw+0 (used reg = )
17221 3FD7           E8         3B2E            call	_memsetw
17222 3FDA           83C4                   08  add	sp,*8
17223                                           !BCC_EOS
17224                                           ! 2055       }
17225                                           ! 2056      else
17226                                           ! 2057       {
17227 3FDD           EB           5A            jmp .8A
17228                       00003FDF            .88:
17229                                           ! 2058        outb( 0x3c4, 0x02 );
17230                                           ! Debug: list int = const 2 (used reg = )
17231 3FDF           B8                   0002  mov	ax,*2
17232 3FE2           50                         push	ax
17233                                           ! Debug: list int = const $3C4 (used reg = )
17234 3FE3           B8                   03C4  mov	ax,#$3C4
17235 3FE6           50                         push	ax
17236                                           ! Debug: func () void = outb+0 (used reg = )
17237 3FE7           E8         3C0F            call	_outb
17238 3FEA           83C4                   04  add	sp,*4
17239                                           !BCC_EOS
17240                                           ! 2059        mmask = inb( 0x3c5 );
17241                                           ! Debug: list int = const $3C5 (used reg = )
17242 3FED           B8                   03C5  mov	ax,#$3C5
17243 3FF0           50                         push	ax
17244                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17245 3FF1           E8         3BEF            call	_inb
17246 3FF4           44                         inc	sp
17247 3FF5           44                         inc	sp
17248                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17249 3FF6           8846         FD            mov	-3[bp],al
17250                                           !BCC_EOS
17251                                           ! 2060        outb( 0x3c5, 0x0f );
17252                                           ! Debug: list int = const $F (used reg = )
17253 3FF9           B8                   000F  mov	ax,*$F
17254 3FFC           50                         push	ax
17255                                           ! Debug: list int = const $3C5 (used reg = )
17256 3FFD           B8                   03C5  mov	ax,#$3C5
17257 4000           50                         push	ax
17258                                           ! Debug: func () void = outb+0 (used reg = )
17259 4001           E8         3BF5            call	_outb
17260 4004           83C4                   04  add	sp,*4
17261                                           !BCC_EOS
17262                                           ! 2061        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17263                                           ! Debug: list unsigned int = const $8000 (used reg = )
17264 4007           B8                   8000  mov	ax,#$8000
17265 400A           50                         push	ax
17266                                           ! Debug: list int = const 0 (used reg = )
17267 400B           31C0                       xor	ax,ax
17268 400D           50                         push	ax
17269                                           ! Debug: list int = const 0 (used reg = )
17270 400E           31C0                       xor	ax,ax
17271 4010           50                         push	ax
17272                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17273 4011           8A46         FE            mov	al,-2[bp]
17274 4014           30E4                       xor	ah,ah
17275 4016           B1                     03  mov	cl,*3
17276 4018           D3E0                       shl	ax,cl
17277 401A           89C3                       mov	bx,ax
17278 401C           81C3                 01FD  add	bx,#_vga_modes
17279                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17280 4020           FF77         04            push	4[bx]
17281                                           ! Debug: func () void = memsetw+0 (used reg = )
17282 4023           E8         3AE2            call	_memsetw
17283 4026           83C4                   08  add	sp,*8
17284                                           !BCC_EOS
17285                                           ! 2062        outb( 0x3c5, mmask );
17286                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17287 4029           8A46         FD            mov	al,-3[bp]
17288 402C           30E4                       xor	ah,ah
17289 402E           50                         push	ax
17290                                           ! Debug: list int = const $3C5 (used reg = )
17291 402F           B8                   03C5  mov	ax,#$3C5
17292 4032           50                         push	ax
17293                                           ! Debug: func () void = outb+0 (used reg = )
17294 4033           E8         3BC3            call	_outb
17295 4036           83C4                   04  add	sp,*4
17296                                           !BCC_EOS
17297                                           ! 2063       }
17298                                           ! 2064     }
17299                       00004039            .8A:
17300                                           ! 2065   }
17301                       00004039            .87:
17302                                           ! 2066  write_byte(0x40,0x49,mode);
17303                       00004039            .83:
17304                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17305 4039           8A46         04            mov	al,4[bp]
17306 403C           30E4                       xor	ah,ah
17307 403E           50                         push	ax
17308                                           ! Debug: list int = const $49 (used reg = )
17309 403F           B8                   0049  mov	ax,*$49
17310 4042           50                         push	ax
17311                                           ! Debug: list int = const $40 (used reg = )
17312 4043           B8                   0040  mov	ax,*$40
17313 4046           50                         push	ax
17314                                           ! Debug: func () void = write_byte+0 (used reg = )
17315 4047           E8         3B69            call	_write_byte
17316 404A           83C4                   06  add	sp,*6
17317                                           !BCC_EOS
17318                                           ! 2067  write_word(0x40,0x4A,twidth);
17319                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17320 404D           FF76         F4            push	-$C[bp]
17321                                           ! Debug: list int = const $4A (used reg = )
17322 4050           B8                   004A  mov	ax,*$4A
17323 4053           50                         push	ax
17324                                           ! Debug: list int = const $40 (used reg = )
17325 4054           B8                   0040  mov	ax,*$40
17326 4057           50                         push	ax
17327                                           ! Debug: func () void = write_word+0 (used reg = )
17328 4058           E8         3B70            call	_write_word
17329 405B           83C4                   06  add	sp,*6
17330                                           !BCC_EOS
17331                                           ! 2068  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17332                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17333 405E           8A46         F9            mov	al,-7[bp]
17334 4061           30E4                       xor	ah,ah
17335 4063           B1                     06  mov	cl,*6
17336 4065           D3E0                       shl	ax,cl
17337 4067           89C3                       mov	bx,ax
17338 4069           81C3                 0291  add	bx,#_video_param_table
17339                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17340                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17341                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17342 406D           FF77         03            push	3[bx]
17343                                           ! Debug: list int = const $4C (used reg = )
17344 4070           B8                   004C  mov	ax,*$4C
17345 4073           50                         push	ax
17346                                           ! Debug: list int = const $40 (used reg = )
17347 4074           B8                   0040  mov	ax,*$40
17348 4077           50                         push	ax
17349                                           ! Debug: func () void = write_word+0 (used reg = )
17350 4078           E8         3B50            call	_write_word
17351 407B           83C4                   06  add	sp,*6
17352                                           !BCC_EOS
17353                                           ! 2069  wr
17354                                           ! 2069 ite_word(0x40,0x63,crtc_addr);
17355                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17356 407E           FF76         EA            push	-$16[bp]
17357                                           ! Debug: list int = const $63 (used reg = )
17358 4081           B8                   0063  mov	ax,*$63
17359 4084           50                         push	ax
17360                                           ! Debug: list int = const $40 (used reg = )
17361 4085           B8                   0040  mov	ax,*$40
17362 4088           50                         push	ax
17363                                           ! Debug: func () void = write_word+0 (used reg = )
17364 4089           E8         3B3F            call	_write_word
17365 408C           83C4                   06  add	sp,*6
17366                                           !BCC_EOS
17367                                           ! 2070  write_byte(0x40,0x84,theightm1);
17368                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17369 408F           FF76         F2            push	-$E[bp]
17370                                           ! Debug: list int = const $84 (used reg = )
17371 4092           B8                   0084  mov	ax,#$84
17372 4095           50                         push	ax
17373                                           ! Debug: list int = const $40 (used reg = )
17374 4096           B8                   0040  mov	ax,*$40
17375 4099           50                         push	ax
17376                                           ! Debug: func () void = write_byte+0 (used reg = )
17377 409A           E8         3B16            call	_write_byte
17378 409D           83C4                   06  add	sp,*6
17379                                           !BCC_EOS
17380                                           ! 2071  write_word(0x40,0x85,cheight);
17381                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17382 40A0           FF76         F0            push	-$10[bp]
17383                                           ! Debug: list int = const $85 (used reg = )
17384 40A3           B8                   0085  mov	ax,#$85
17385 40A6           50                         push	ax
17386                                           ! Debug: list int = const $40 (used reg = )
17387 40A7           B8                   0040  mov	ax,*$40
17388 40AA           50                         push	ax
17389                                           ! Debug: func () void = write_word+0 (used reg = )
17390 40AB           E8         3B1D            call	_write_word
17391 40AE           83C4                   06  add	sp,*6
17392                                           !BCC_EOS
17393                                           ! 2072  write_byte(0x40,0x87,(0x60|noclearmem));
17394                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17395                                           ! Debug: expression subtree swapping
17396 40B1           8A46         FF            mov	al,-1[bp]
17397 40B4           0C                     60  or	al,*$60
17398                                           ! Debug: list unsigned char = al+0 (used reg = )
17399 40B6           30E4                       xor	ah,ah
17400 40B8           50                         push	ax
17401                                           ! Debug: list int = const $87 (used reg = )
17402 40B9           B8                   0087  mov	ax,#$87
17403 40BC           50                         push	ax
17404                                           ! Debug: list int = const $40 (used reg = )
17405 40BD           B8                   0040  mov	ax,*$40
17406 40C0           50                         push	ax
17407                                           ! Debug: func () void = write_byte+0 (used reg = )
17408 40C1           E8         3AEF            call	_write_byte
17409 40C4           83C4                   06  add	sp,*6
17410                                           !BCC_EOS
17411                                           ! 2073  write_byte(0x40,0x88,0xF9);
17412                                           ! Debug: list int = const $F9 (used reg = )
17413 40C7           B8                   00F9  mov	ax,#$F9
17414 40CA           50                         push	ax
17415                                           ! Debug: list int = const $88 (used reg = )
17416 40CB           B8                   0088  mov	ax,#$88
17417 40CE           50                         push	ax
17418                                           ! Debug: list int = const $40 (used reg = )
17419 40CF           B8                   0040  mov	ax,*$40
17420 40D2           50                         push	ax
17421                                           ! Debug: func () void = write_byte+0 (used reg = )
17422 40D3           E8         3ADD            call	_write_byte
17423 40D6           83C4                   06  add	sp,*6
17424                                           !BCC_EOS
17425                                           ! 2074  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17426                                           ! Debug: list int = const $89 (used reg = )
17427 40D9           B8                   0089  mov	ax,#$89
17428 40DC           50                         push	ax
17429                                           ! Debug: list int = const $40 (used reg = )
17430 40DD           B8                   0040  mov	ax,*$40
17431 40E0           50                         push	ax
17432                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17433 40E1           E8         3AA9            call	_read_byte
17434 40E4           83C4                   04  add	sp,*4
17435                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17436 40E7           24                     7F  and	al,*$7F
17437                                           ! Debug: list unsigned char = al+0 (used reg = )
17438 40E9           30E4                       xor	ah,ah
17439 40EB           50                         push	ax
17440                                           ! Debug: list int = const $89 (used reg = )
17441 40EC           B8                   0089  mov	ax,#$89
17442 40EF           50                         push	ax
17443                                           ! Debug: list int = const $40 (used reg = )
17444 40F0           B8                   0040  mov	ax,*$40
17445 40F3           50                         push	ax
17446                                           ! Debug: func () void = write_byte+0 (used reg = )
17447 40F4           E8         3ABC            call	_write_byte
17448 40F7           83C4                   06  add	sp,*6
17449                                           !BCC_EOS
17450                                           ! 2075  write_byte(0x40,0x8A,0x08);
17451                                           ! Debug: list int = const 8 (used reg = )
17452 40FA           B8                   0008  mov	ax,*8
17453 40FD           50                         push	ax
17454                                           ! Debug: list int = const $8A (used reg = )
17455 40FE           B8                   008A  mov	ax,#$8A
17456 4101           50                         push	ax
17457                                           ! Debug: list int = const $40 (used reg = )
17458 4102           B8                   0040  mov	ax,*$40
17459 4105           50                         push	ax
17460                                           ! Debug: func () void = write_byte+0 (used reg = )
17461 4106           E8         3AAA            call	_write_byte
17462 4109           83C4                   06  add	sp,*6
17463                                           !BCC_EOS
17464                                           ! 2076  write_word(0x40,0xA8, video_save_pointer_table);
17465                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17466 410C           BB                   35FA  mov	bx,#_video_save_pointer_table
17467 410F           53                         push	bx
17468                                           ! Debug: list int = const $A8 (used reg = )
17469 4110           B8                   00A8  mov	ax,#$A8
17470 4113           50                         push	ax
17471                                           ! Debug: list int = const $40 (used reg = )
17472 4114           B8                   0040  mov	ax,*$40
17473 4117           50                         push	ax
17474                                           ! Debug: func () void = write_word+0 (used reg = )
17475 4118           E8         3AB0            call	_write_word
17476 411B           83C4                   06  add	sp,*6
17477                                           !BCC_EOS
17478                                           ! 2077  write_word(0x40,0xA8 +2, 0xc000);
17479                                           ! Debug: list unsigned int = const $C000 (used reg = )
17480 411E           B8                   C000  mov	ax,#$C000
17481 4121           50                         push	ax
17482                                           ! Debug: list int = const $AA (used reg = )
17483 4122           B8                   00AA  mov	ax,#$AA
17484 4125           50                         push	ax
17485                                           ! Debug: list int = const $40 (used reg = )
17486 4126           B8                   0040  mov	ax,*$40
17487 4129           50                         push	ax
17488                                           ! Debug: func () void = write_word+0 (used reg = )
17489 412A           E8         3A9E            call	_write_word
17490 412D           83C4                   06  add	sp,*6
17491                                           !BCC_EOS
17492                                           ! 2078  write_byte(0x40,0x65,0x00);
17493                                           ! Debug: list int = const 0 (used reg = )
17494 4130           31C0                       xor	ax,ax
17495 4132           50                         push	ax
17496                                           ! Debug: list int = const $65 (used reg = )
17497 4133           B8                   0065  mov	ax,*$65
17498 4136           50                         push	ax
17499                                           ! Debug: list int = const $40 (used reg = )
17500 4137           B8                   0040  mov	ax,*$40
17501 413A           50                         push	ax
17502                                           ! Debug: func () void = write_byte+0 (used reg = )
17503 413B           E8         3A75            call	_write_byte
17504 413E           83C4                   06  add	sp,*6
17505                                           !BCC_EOS
17506                                           ! 2079  write_byte(0x40,0x66,0x00);
17507                                           ! Debug: list int = const 0 (used reg = )
17508 4141           31C0                       xor	ax,ax
17509 4143           50                         push	ax
17510                                           ! Debug: list int = const $66 (used reg = )
17511 4144           B8                   0066  mov	ax,*$66
17512 4147           50                         push	ax
17513                                           ! Debug: list int = const $40 (used reg = )
17514 4148           B8                   0040  mov	ax,*$40
17515 414B           50                         push	ax
17516                                           ! Debug: func () void = write_byte+0 (used reg = )
17517 414C           E8         3A64            call	_write_byte
17518 414F           83C4                   06  add	sp,*6
17519                                           !BCC_EOS
17520                                           ! 2080  if(vga_modes[line].class==0x00)
17521                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17522 4152           8A46         FE            mov	al,-2[bp]
17523 4155           30E4                       xor	ah,ah
17524 4157           B1                     03  mov	cl,*3
17525 4159           D3E0                       shl	ax,cl
17526 415B           89C3                       mov	bx,ax
17527 415D           81C3                 01FD  add	bx,#_vga_modes
17528                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17529 4161           8A47         01            mov	al,1[bx]
17530 4164           84C0                       test	al,al
17531 4166           75           0E            jne 	.8B
17532                       00004168            .8C:
17533                                           ! 2081   {
17534                                           ! 2082    biosfn_set_cursor_shape(0x06,0x07);
17535                                           ! Debug: list int = const 7 (used reg = )
17536 4168           B8                   0007  mov	ax,*7
17537 416B           50                         push	ax
17538                                           ! Debug: list int = const 6 (used reg = )
17539 416C           B8                   0006  mov	ax,*6
17540 416F           50                         push	ax
17541                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17542 4170           E8         00BB            call	_biosfn_set_cursor_shape
17543 4173           83C4                   04  add	sp,*4
17544                                           !BCC_EOS
17545                                           ! 2083   }
17546                                           ! 2084  for(i=0;i<8;i++)
17547                       00004176            .8B:
17548                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17549 4176           31C0                       xor	ax,ax
17550 4178           8946         F6            mov	-$A[bp],ax
17551                                           !BCC_EOS
17552                                           !BCC_EOS
17553                                           ! 2085   biosfn_set_cursor_pos(i,0x0000);
17554 417B           EB           13            jmp .8F
17555                       0000417D            .90:
17556                                           ! Debug: list int = const 0 (used reg = )
17557 417D           31C0                       xor	ax,ax
17558 417F           50                         push	ax
17559                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17560 4180           FF76         F6            push	-$A[bp]
17561                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17562 4183           E8         01C3            call	_biosfn_set_cursor_pos
17563 4186           83C4                   04  add	sp,*4
17564                                           !BCC_EOS
17565                                           ! 2086  biosfn_set_active_page(0x00);
17566                       00004189            .8E:
17567                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17568 4189           8B46         F6            mov	ax,-$A[bp]
17569 418C           40                         inc	ax
17570 418D           8946         F6            mov	-$A[bp],ax
17571                       00004190            .8F:
17572                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17573 4190           8B46         F6            mov	ax,-$A[bp]
17574 4193           3D                   0008  cmp	ax,*8
17575 4196           72           E5            jb 	.90
17576                       00004198            .91:
17577                       00004198            .8D:
17578                                           ! Debug: list int = const 0 (used reg = )
17579 4198           31C0                       xor	ax,ax
17580 419A           50                         push	ax
17581                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17582 419B           E8         0320            call	_biosfn_set_active_page
17583 419E           44                         inc	sp
17584 419F           44                         inc	sp
17585                                           !BCC_EOS
17586                                           ! 2087  if(vga_modes[line].class==0x00)
17587                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17588 41A0           8A46         FE            mov	al,-2[bp]
17589 41A3           30E4                       xor	ah,ah
17590 41A5           B1                     03  mov	cl,*3
17591 41A7           D3E0                       shl	ax,cl
17592 41A9           89C3                       mov	bx,ax
17593 41AB           81C3                 01FD  add	bx,#_vga_modes
17594                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17595 41AF           8A47         01            mov	al,1[bx]
17596 41B2           84C0                       test	al,al
17597 41B4           75           0E            jne 	.92
17598                       000041B6            .93:
17599                                           ! 2088   {
17600                                           ! 2089 #asm
17601                                           !BCC_EOS
17602                                           !BCC_ASM
17603                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17604                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17605                       00000008            _biosfn_set_video_mode.theightm1	set	8
17606                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17607                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17608                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17609                       00000014            _biosfn_set_video_mode.line	set	$14
17610                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17611                       00000006            _biosfn_set_video_mode.cheight	set	6
17612                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17613                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17614                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17615                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17616                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17617                       0000000C            _biosfn_set_video_mode.i	set	$C
17618                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17619                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17620                       00000004            .biosfn_set_video_mode.mode	set	4
17621                       00000010            _biosfn_set_video_mode.palette	set	$10
17622                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17623                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17624                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17625                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17626                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17627                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17628                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17629                       00000013            _biosfn_set_video_mode.mmask	set	$13
17630                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17631                                             ;; copy and activate 8x16 font
17632 41B6           B8                   1104    mov ax, #0x1104
17633 41B9           B3                     00    mov bl, #0x00
17634 41BB           CD                     10    int #0x10
17635 41BD           B8                   1103    mov ax, #0x1103
17636 41C0           B3                     00    mov bl, #0x00
17637 41C2           CD                     10    int #0x10
17638                                           ! 2097 endasm
17639                                           !BCC_ENDASM
17640                                           !BCC_EOS
17641                                           ! 2098   }
17642                                           ! 2099 #asm
17643                       000041C4            .92:
17644                                           !BCC_EOS
17645                                           !BCC_ASM
17646                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17647                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17648                       00000008            _biosfn_set_video_mode.theightm1	set	8
17649                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17650                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17651                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17652                       00000014            _biosfn_set_video_mode.line	set	$14
17653                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17654                       00000006            _biosfn_set_video_mode.cheight	set	6
17655                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17656                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17657                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17658                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17659                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17660                       0000000C            _biosfn_set_video_mode.i	set	$C
17661                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17662                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17663                       00000004            .biosfn_set_video_mode.mode	set	4
17664                       00000010            _biosfn_set_video_mode.palette	set	$10
17665                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17666                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17667                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17668                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17669                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17670                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17671                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17672                       00000013            _biosfn_set_video_mode.mmask	set	$13
17673                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17674                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   41C4           1E                           push ds
 +a   41C5           31C0                         xor ax, ax
 +a   41C7           8ED8                         mov ds, ax
 +a   41C9           B8                   1361    mov ax,  #_vgafont8+128*8
 +a   41CC           A3         007C              mov 0x1f*4, ax
 +a   41CF           B8                   C000    mov ax,  #0xC000
 +a   41D2           A3         007E              mov 0x1f*4+2, ax
 +a   41D5           1F                           pop ds
17675                                           ! 2101 endasm
17676                                           !BCC_ENDASM
17677                                           !BCC_EOS
17678                                           ! 2102   switch(cheight)
17679 41D6           8B46         F0            mov	ax,-$10[bp]
17680                                           ! 2103    {case 8:
17681 41D9           E9         003F            br 	.96
17682                                           ! 2104 #asm
17683                       000041DC            .97:
17684                                           !BCC_EOS
17685                                           !BCC_ASM
17686                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17687                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17688                       00000008            _biosfn_set_video_mode.theightm1	set	8
17689                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17690                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17691                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17692                       00000014            _biosfn_set_video_mode.line	set	$14
17693                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17694                       00000006            _biosfn_set_video_mode.cheight	set	6
17695                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17696                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17697                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17698                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17699                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17700                       0000000C            _biosfn_set_video_mode.i	set	$C
17701                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17702                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17703                       00000004            .biosfn_set_video_mode.mode	set	4
17704                       00000010            _biosfn_set_video_mode.palette	set	$10
17705                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17706                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17707                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17708                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17709                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17710                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17711                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17712                       00000013            _biosfn_set_video_mode.mmask	set	$13
17713                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17714                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   41DC           1E                           push ds
 +a   41DD           31C0                         xor ax, ax
 +a   41DF           8ED8                         mov ds, ax
 +a   41E1           B8                   0F61    mov ax,  #_vgafont8
 +a   41E4           A3         010C              mov 0x43*4, ax
 +a   41E7           B8                   C000    mov ax,  #0xC000
 +a   41EA           A3         010E              mov 0x43*4+2, ax
 +a   41ED           1F                           pop ds
17715                                           ! 2106 endasm
17716                                           !BCC_ENDASM
17717                                           !BCC_EOS
17718                                           ! 2107      break;
17719 41EE           E9         0039            br 	.94
17720                                           !BCC_EOS
17721                                           ! 2108     case 14:
17722                                           ! 2109 #asm
17723                       000041F1            .98:
17724                                           !BCC_EOS
17725                                           !BCC_ASM
17726                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17727                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17728                       00000008            _biosfn_set_video_mode.theightm1	set	8
17729                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17730                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17731                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17732                       00000014            _biosfn_set_video_mode.line	set	$14
17733                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17734                       00000006            _biosfn_set_video_mode.cheight	set	6
17735                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17736                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17737                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17738                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17739                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17740                       0000000C            _biosfn_set_video_mode.i	set	$C
17741                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17742                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17743                       00000004            .biosfn_set_video_mode.mode	set	4
17744                       00000010            _biosfn_set_video_mode.palette	set	$10
17745                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17746                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17747                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17748                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17749                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17750                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17751                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17752                       00000013            _biosfn_set_video_mode.mmask	set	$13
17753                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17754                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   41F1           1E                           push ds
 +a   41F2           31C0                         xor ax, ax
 +a   41F4           8ED8                         mov ds, ax
 +a   41F6           B8                   1761    mov ax,  #_vgafont14
 +a   41F9           A3         010C              mov 0x43*4, ax
 +a   41FC           B8                   C000    mov ax,  #0xC000
 +a   41FF           A3         010E              mov 0x43*4+2, ax
 +a   4202           1F                           pop ds
17755                                           ! 2111 endasm
17756                                           !BCC_ENDASM
17757                                           !BCC_EOS
17758                                           ! 2112      break;
17759 4203           EB           25            jmp .94
17760                                           !BCC_EOS
17761                                           ! 2113     case 16:
17762                                           ! 2114 #asm
17763                       00004205            .99:
17764                                           !BCC_EOS
17765                                           !BCC_ASM
17766                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17767                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17768                       00000008            _biosfn_set_video_mode.theightm1	set	8
17769                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17770                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17771                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17772                       00000014            _biosfn_set_video_mode.line	set	$14
17773                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17774                       00000006            _biosfn_set_video_mode.cheight	set	6
17775                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17776                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17777                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17778                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17779                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17780                       0000000C            _biosfn_set_video_mode.i	set	$C
17781                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17782                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17783                       00000004            .biosfn_set_video_mode.mode	set	4
17784                       00000010            _biosfn_set_video_mode.palette	set	$10
17785                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17786                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17787                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17788                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17789                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17790                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17791                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17792                       00000013            _biosfn_set_video_mode.mmask	set	$13
17793                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17794                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4205           1E                           push ds
 +a   4206           31C0                         xor ax, ax
 +a   4208           8ED8                         mov ds, ax
 +a   420A           B8                   2561    mov ax,  #_vgafont16
 +a   420D           A3         010C              mov 0x43*4, ax
 +a   4210           B8                   C000    mov ax,  #0xC000
 +a   4213           A3         010E              mov 0x43*4+2, ax
 +a   4216           1F                           pop ds
17795                                           ! 2116 endasm
17796                                           !BCC_ENDASM
17797                                           !BCC_EOS
17798                                           ! 2117      break;
17799 4217           EB           11            jmp .94
17800                                           !BCC_EOS
17801                                           ! 2118    }
17802                                           ! 2119 }
17803 4219           EB           0F            jmp .94
17804                       0000421B            .96:
17805 421B           2D                   0008  sub	ax,*8
17806 421E           74           BC            je 	.97
17807 4220           2D                   0006  sub	ax,*6
17808 4223           74           CC            je 	.98
17809 4225           2D                   0002  sub	ax,*2
17810 4228           74           DB            je 	.99
17811                       0000422A            .94:
17812                       FFFFFFE8            ..FFFD	=	-$18
17813 422A           89EC                       mov	sp,bp
17814 422C           5D                         pop	bp
17815 422D           C3                         ret
17816                                           ! 2120 static void biosfn_set_cursor_shape (CH,CL)
17817                                           ! Register BX used in function biosfn_set_video_mode
17818                                           ! 2121 Bit8u CH;Bit8u CL;
17819                       0000422E            _biosfn_set_cursor_shape:
17820                                           !BCC_EOS
17821                                           !BCC_EOS
17822                                           ! 2122 {Bit16u cheight,curs,crtc_addr;
17823                                           !BCC_EOS
17824                                           ! 2123  Bit8u modeset_ctl;
17825                                           !BCC_EOS
17826                                           ! 2124  CH&=0x3f;
17827 422E           55                         push	bp
17828 422F           89E5                       mov	bp,sp
17829 4231           83C4                   F8  add	sp,*-8
17830                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17831 4234           8A46         04            mov	al,4[bp]
17832 4237           24                     3F  and	al,*$3F
17833 4239           8846         04            mov	4[bp],al
17834                                           !BCC_EOS
17835                                           ! 2125  CL&=0x1f;
17836                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17837 423C           8A46         06            mov	al,6[bp]
17838 423F           24                     1F  and	al,*$1F
17839 4241           8846         06            mov	6[bp],al
17840                                           !BCC_EOS
17841                                           ! 2126  curs=(CH<<8)+CL;
17842                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17843 4244           8A46         04            mov	al,4[bp]
17844 4247           30E4                       xor	ah,ah
17845 4249           88C4                       mov	ah,al
17846 424B           30C0                       xor	al,al
17847                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17848 424D           0246         06            add	al,6[bp]
17849 4250           80D4                   00  adc	ah,*0
17850                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17851 4253           8946         FC            mov	-4[bp],ax
17852                                           !BCC_EOS
17853                                           ! 2127  write_word(0x40,0x60,curs);
17854                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17855 4256           FF76         FC            push	-4[bp]
17856                                           ! Debug: list int = const $60 (used reg = )
17857 4259           B8                   0060  mov	ax,*$60
17858 425C           50                         push	ax
17859                                           ! Debug: list int = const $40 (used reg = )
17860 425D           B8                   0040  mov	ax,*$40
17861 4260           50                         push	ax
17862                                           ! Debug: func () void = write_word+0 (used reg = )
17863 4261           E8         3967            call	_write_word
17864 4264           83C4                   06  add	sp,*6
17865                                           !BCC_EOS
17866                                           ! 2128  modeset_ctl=read_byte(0x40,0x89);
17867                                           ! Debug: list int = const $89 (used reg = )
17868 4267           B8                   0089  mov	ax,#$89
17869 426A           50                         push	ax
17870                                           ! Debug: list int = const $40 (used reg = )
17871 426B           B8                   0040  mov	ax,*$40
17872 426E           50                         push	ax
17873                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17874 426F           E8         391B            call	_read_byte
17875 4272           83C4                   04  add	sp,*4
17876                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17877 4275           8846         F9            mov	-7[bp],al
17878                                           !BCC_EOS
17879                                           ! 2129  cheight = read_word(0x40,0x85);
17880                                           ! Debug: list int = const $85 (used reg = )
17881 4278           B8                   0085  mov	ax,#$85
17882 427B           50                         push	ax
17883                                           ! Debug: list int = const $40 (used reg = )
17884 427C           B8                   0040  mov	ax,*$40
17885 427F           50                         push	ax
17886                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17887 4280           E8         391D            call	_read_word
17888 4283           83C4                   04  add	sp,*4
17889                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17890 4286           8946         FE            mov	-2[bp],ax
17891                                           !BCC_EOS
17892                                           ! 2130  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17893                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17894 4289           8A46         F9            mov	al,-7[bp]
17895 428C           24                     01  and	al,*1
17896 428E           84C0                       test	al,al
17897 4290           74           66            je  	.9A
17898                       00004292            .9E:
17899                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17900 4292           8B46         FE            mov	ax,-2[bp]
17901 4295           3D                   0008  cmp	ax,*8
17902 4298           76           5E            jbe 	.9A
17903                       0000429A            .9D:
17904                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17905 429A           8A46         06            mov	al,6[bp]
17906 429D           3C                     08  cmp	al,*8
17907 429F           73           57            jae 	.9A
17908                       000042A1            .9C:
17909                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17910 42A1           8A46         04            mov	al,4[bp]
17911 42A4           3C                     20  cmp	al,*$20
17912 42A6           73           50            jae 	.9A
17913                       000042A8            .9B:
17914                                           ! 2131   {
17915                                           ! 2132    if(CL!=(CH+1))
17916                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17917 42A8           8A46         04            mov	al,4[bp]
17918 42AB           30E4                       xor	ah,ah
17919                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17920                                           ! Debug: expression subtree swapping
17921 42AD           40                         inc	ax
17922 42AE           50                         push	ax
17923 42AF           8A46         06            mov	al,6[bp]
17924 42B2           30E4                       xor	ah,ah
17925 42B4           3B46         F6            cmp	ax,-$A[bp]
17926 42B7           8D66         F8            lea	sp,-8[bp]
17927 42BA           74           15            je  	.9F
17928                       000042BC            .A0:
17929                                           ! 2133     {
17930                                           ! 2134      CH = ((CH+1) * cheight / 8) -1;
17931                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17932 42BC           8A46         04            mov	al,4[bp]
17933 42BF           30E4                       xor	ah,ah
17934                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17935 42C1           40                         inc	ax
17936 42C2           8B4E         FE            mov	cx,-2[bp]
17937 42C5           F7E9                       imul	cx
17938                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17939 42C7           B1                     03  mov	cl,*3
17940 42C9           D3E8                       shr	ax,cl
17941                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17942                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17943 42CB           48                         dec	ax
17944 42CC           8846         04            mov	4[bp],al
17945                                           !BCC_EOS
17946                                           ! 2135     }
17947                                           ! 2136    else
17948                                           ! 2137     {
17949 42CF           EB           14            jmp .A1
17950                       000042D1            .9F:
17951                                           ! 2138      CH = ((CL+1) * cheight / 8) - 2;
17952                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17953 42D1           8A46         06            mov	al,6[bp]
17954 42D4           30E4                       xor	ah,ah
17955                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17956 42D6           40                         inc	ax
17957 42D7           8B4E         FE            mov	cx,-2[bp]
17958 42DA           F7E9                       imul	cx
17959                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17960 42DC           B1                     03  mov	cl,*3
17961 42DE           D3E8                       shr	ax,cl
17962                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17963                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17964 42E0           48                         dec	ax
17965 42E1           48                         dec	ax
17966 42E2           8846         04            mov	4[bp],al
17967                                           !BCC_EOS
17968                                           ! 2139     }
17969                                           ! 2140    CL = ((CL+1) * cheight / 8) - 1;
17970                       000042E5            .A1:
17971                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17972 42E5           8A46         06            mov	al,6[bp]
17973 42E8           30E4                       xor	ah,ah
17974                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17975 42EA           40                         inc	ax
17976 42EB           8B4E         FE            mov	cx,-2[bp]
17977 42EE           F7E9                       imul	cx
17978                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17979 42F0           B1                     03  mov	cl,*3
17980 42F2           D3E8                       shr	ax,cl
17981                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17982                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17983 42F4           48                         dec	ax
17984 42F5           8846         06            mov	6[bp],al
17985                                           !BCC_EOS
17986                                           ! 2141   }
17987                                           ! 2142  crtc_addr=read_word(0x40,0x63);
17988                       000042F8            .9A:
17989                                           ! Debug: list int = const $63 (used reg = )
17990 42F8           B8                   0063  mov	ax,*$63
17991 42FB           50                         push	ax
17992                                           ! Debug: list int = const $40 (used reg = )
17993 42FC           B8                   0040  mov	ax,*$40
17994 42FF           50                         push	ax
17995                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17996 4300           E8         389D            call	_read_word
17997 4303           83C4                   04  add	sp,*4
17998                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17999 4306           8946         FA            mov	-6[bp],ax
18000                                           !BCC_EOS
18001                                           ! 2143  outb(crtc_addr,0x0a);
18002                                           ! Debug: list int = const $A (used reg = )
18003 4309           B8                   000A  mov	ax,*$A
18004 430C           50                         push	ax
18005                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18006 430D           FF76         FA            push	-6[bp]
18007                                           ! Debug: func () void = outb+0 (used reg = )
18008 4310           E8         38E6            call	_outb
18009 4313           83C4                   04  add	sp,*4
18010                                           !BCC_EOS
18011                                           ! 2144  outb(crtc_addr+1,CH);
18012                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
18013 4316           8A46         04            mov	al,4[bp]
18014 4319           30E4                       xor	ah,ah
18015 431B           50                         push	ax
18016                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18017 431C           8B46         FA            mov	ax,-6[bp]
18018                                           ! Debug: list unsigned int = ax+1 (used reg = )
18019 431F           40                         inc	ax
18020 4320           50                         push	ax
18021                                           ! Debug: func () void = outb+0 (used reg = )
18022 4321           E8         38D5            call	_outb
18023 4324           83C4                   04  add	sp,*4
18024                                           !BCC_EOS
18025                                           ! 2145  outb(crtc_addr,0x0b);
18026                                           ! Debug: list int = const $B (used reg = )
18027 4327           B8                   000B  mov	ax,*$B
18028 432A           50                         push	ax
18029                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18030 432B           FF76         FA            push	-6[bp]
18031                                           ! Debug: func () void = outb+0 (used reg = )
18032 432E           E8         38C8            call	_outb
18033 4331           83C4                   04  add	sp,*4
18034                                           !BCC_EOS
18035                                           ! 2146  outb(crtc_addr+1,CL);
18036                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18037 4334           8A46         06            mov	al,6[bp]
18038 4337           30E4                       xor	ah,ah
18039 4339           50                         push	ax
18040                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18041 433A           8B46         FA            mov	ax,-6[bp]
18042                                           ! Debug: list unsigned int = ax+1 (used reg = )
18043 433D           40                         inc	ax
18044 433E           50                         push	ax
18045                                           ! Debug: func () void = outb+0 (used reg = )
18046 433F           E8         38B7            call	_outb
18047 4342           83C4                   04  add	sp,*4
18048                                           !BCC_EOS
18049                                           ! 2147 }
18050 4345           89EC                       mov	sp,bp
18051 4347           5D                         pop	bp
18052 4348           C3                         ret
18053                                           ! 2148 static void biosfn_set_cursor_pos (page, cursor)
18054                                           ! 2149 Bit8u page;Bit16u cursor;
18055                       00004349            _biosfn_set_cursor_pos:
18056                                           !BCC_EOS
18057                                           !BCC_EOS
18058                                           ! 2150 {
18059                                           ! 2151  Bit8u xcurs,ycurs,current;
18060                                           !BCC_EOS
18061                                           ! 2152  Bit16u nbcols,nbrows,address,crtc_addr;
18062                                           !BCC_EOS
18063                                           ! 2153  if(page>7)return;
18064 4349           55                         push	bp
18065 434A           89E5                       mov	bp,sp
18066 434C           83C4                   F4  add	sp,*-$C
18067                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18068 434F           8A46         04            mov	al,4[bp]
18069 4352           3C                     07  cmp	al,*7
18070 4354           76           04            jbe 	.A2
18071                       00004356            .A3:
18072 4356           89EC                       mov	sp,bp
18073 4358           5D                         pop	bp
18074 4359           C3                         ret
18075                                           !BCC_EOS
18076                                           ! 2154  write_word(0x40, 0x50 +2*page, cursor);
18077                       0000435A            .A2:
18078                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18079 435A           FF76         06            push	6[bp]
18080                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18081                                           ! Debug: expression subtree swapping
18082 435D           8A46         04            mov	al,4[bp]
18083 4360           30E4                       xor	ah,ah
18084 4362           D1E0                       shl	ax,*1
18085                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18086                                           ! Debug: expression subtree swapping
18087                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18088 4364           05                   0050  add	ax,*$50
18089 4367           50                         push	ax
18090                                           ! Debug: list int = const $40 (used reg = )
18091 4368           B8                   0040  mov	ax,*$40
18092 436B           50                         push	ax
18093                                           ! Debug: func () void = write_word+0 (used reg = )
18094 436C           E8         385C            call	_write_word
18095 436F           83C4                   06  add	sp,*6
18096                                           !BCC_EOS
18097                                           ! 2155  current=read_byte(0x40,0x62);
18098                                           ! Debug: list int = const $62 (used reg = )
18099 4372           B8                   0062  mov	ax,*$62
18100 4375           50                         push	ax
18101                                           ! Debug: list int = const $40 (used reg = )
18102 4376           B8                   0040  mov	ax,*$40
18103 4379           50                         push	ax
18104                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18105 437A           E8         3810            call	_read_byte
18106 437D           83C4                   04  add	sp,*4
18107                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18108 4380           8846         FD            mov	-3[bp],al
18109                                           !BCC_EOS
18110                                           ! 2156  if(page==current)
18111                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18112 4383           8A46         04            mov	al,4[bp]
18113 4386           3A46         FD            cmp	al,-3[bp]
18114 4389         0F85         00B8            bne 	.A4
18115                       0000438D            .A5:
18116                                           ! 2157   {
18117                                           ! 2158    nbcols=read_word(0x40,0x4A);
18118                                           ! Debug: list int = const $4A (used reg = )
18119 438D           B8                   004A  mov	ax,*$4A
18120 4390           50                         push	ax
18121                                           ! Debug: list int = const $40 (used reg = )
18122 4391           B8                   0040  mov	ax,*$40
18123 4394           50                         push	ax
18124                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18125 4395           E8         3808            call	_read_word
18126 4398           83C4                   04  add	sp,*4
18127                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18128 439B           8946         FA            mov	-6[bp],ax
18129                                           !BCC_EOS
18130                                           ! 2159    nbrows=read_byte(0x40,0x84)+1;
18131                                           ! Debug: list int = const $84 (used reg = )
18132 439E           B8                   0084  mov	ax,#$84
18133 43A1           50                         push	ax
18134                                           ! Debug: list int = const $40 (used reg = )
18135 43A2           B8                   0040  mov	ax,*$40
18136 43A5           50                         push	ax
18137                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18138 43A6           E8         37E4            call	_read_byte
18139 43A9           83C4                   04  add	sp,*4
18140                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18141 43AC           30E4                       xor	ah,ah
18142                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18143 43AE           40                         inc	ax
18144 43AF           8946         F8            mov	-8[bp],ax
18145                                           !BCC_EOS
18146                                           ! 2160    xcurs=cursor&0x00ff;ycurs=(cursor
18147                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18148 43B2           8A46         06            mov	al,6[bp]
18149                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18150 43B5           8846         FF            mov	-1[bp],al
18151                                           !BCC_EOS
18152                                           ! 2160 &0xff00)>>8;
18153                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18154 43B8           8B46         06            mov	ax,6[bp]
18155 43BB           30C0                       xor	al,al
18156                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18157 43BD           88E0                       mov	al,ah
18158 43BF           30E4                       xor	ah,ah
18159                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18160 43C1           8846         FE            mov	-2[bp],al
18161                                           !BCC_EOS
18162                                           ! 2161    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
18163                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18164 43C4           8A46         FE            mov	al,-2[bp]
18165 43C7           30E4                       xor	ah,ah
18166 43C9           8B4E         FA            mov	cx,-6[bp]
18167 43CC           F7E9                       imul	cx
18168 43CE           50                         push	ax
18169                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18170 43CF           8B46         FA            mov	ax,-6[bp]
18171 43D2           8B4E         F8            mov	cx,-8[bp]
18172 43D5           F7E9                       imul	cx
18173                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18174 43D7           0C                     FF  or	al,#$FF
18175                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18176                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18177 43D9           89C3                       mov	bx,ax
18178 43DB           8A46         04            mov	al,4[bp]
18179 43DE           30E4                       xor	ah,ah
18180 43E0           93                         xchg	ax,bx
18181 43E1           40                         inc	ax
18182 43E2           89D9                       mov	cx,bx
18183 43E4           F7E9                       imul	cx
18184                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18185 43E6           0246         FF            add	al,-1[bp]
18186 43E9           80D4                   00  adc	ah,*0
18187                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18188 43EC           0346         F2            add	ax,-$E[bp]
18189 43EF           44                         inc	sp
18190 43F0           44                         inc	sp
18191                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18192 43F1           8946         F6            mov	-$A[bp],ax
18193                                           !BCC_EOS
18194                                           ! 2162    crtc_addr=read_word(0x40,0x63);
18195                                           ! Debug: list int = const $63 (used reg = )
18196 43F4           B8                   0063  mov	ax,*$63
18197 43F7           50                         push	ax
18198                                           ! Debug: list int = const $40 (used reg = )
18199 43F8           B8                   0040  mov	ax,*$40
18200 43FB           50                         push	ax
18201                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18202 43FC           E8         37A1            call	_read_word
18203 43FF           83C4                   04  add	sp,*4
18204                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18205 4402           8946         F4            mov	-$C[bp],ax
18206                                           !BCC_EOS
18207                                           ! 2163    outb(crtc_addr,0x0e);
18208                                           ! Debug: list int = const $E (used reg = )
18209 4405           B8                   000E  mov	ax,*$E
18210 4408           50                         push	ax
18211                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18212 4409           FF76         F4            push	-$C[bp]
18213                                           ! Debug: func () void = outb+0 (used reg = )
18214 440C           E8         37EA            call	_outb
18215 440F           83C4                   04  add	sp,*4
18216                                           !BCC_EOS
18217                                           ! 2164    outb(crtc_addr+1,(address&0xff00)>>8);
18218                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18219 4412           8B46         F6            mov	ax,-$A[bp]
18220 4415           30C0                       xor	al,al
18221                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18222 4417           88E0                       mov	al,ah
18223 4419           30E4                       xor	ah,ah
18224                                           ! Debug: list unsigned int = ax+0 (used reg = )
18225 441B           50                         push	ax
18226                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18227 441C           8B46         F4            mov	ax,-$C[bp]
18228                                           ! Debug: list unsigned int = ax+1 (used reg = )
18229 441F           40                         inc	ax
18230 4420           50                         push	ax
18231                                           ! Debug: func () void = outb+0 (used reg = )
18232 4421           E8         37D5            call	_outb
18233 4424           83C4                   04  add	sp,*4
18234                                           !BCC_EOS
18235                                           ! 2165    outb(crtc_addr,0x0f);
18236                                           ! Debug: list int = const $F (used reg = )
18237 4427           B8                   000F  mov	ax,*$F
18238 442A           50                         push	ax
18239                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18240 442B           FF76         F4            push	-$C[bp]
18241                                           ! Debug: func () void = outb+0 (used reg = )
18242 442E           E8         37C8            call	_outb
18243 4431           83C4                   04  add	sp,*4
18244                                           !BCC_EOS
18245                                           ! 2166    outb(crtc_addr+1,address&0x00ff);
18246                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18247 4434           8A46         F6            mov	al,-$A[bp]
18248                                           ! Debug: list unsigned char = al+0 (used reg = )
18249 4437           30E4                       xor	ah,ah
18250 4439           50                         push	ax
18251                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18252 443A           8B46         F4            mov	ax,-$C[bp]
18253                                           ! Debug: list unsigned int = ax+1 (used reg = )
18254 443D           40                         inc	ax
18255 443E           50                         push	ax
18256                                           ! Debug: func () void = outb+0 (used reg = )
18257 443F           E8         37B7            call	_outb
18258 4442           83C4                   04  add	sp,*4
18259                                           !BCC_EOS
18260                                           ! 2167   }
18261                                           ! 2168 }
18262                       00004445            .A4:
18263 4445           89EC                       mov	sp,bp
18264 4447           5D                         pop	bp
18265 4448           C3                         ret
18266                                           ! 2169 static void biosfn_get_cursor_pos (page,shape, pos)
18267                                           ! Register BX used in function biosfn_set_cursor_pos
18268                                           ! 2170 Bit8u page;Bit16u *shape;Bit16u *pos;
18269                       00004449            _biosfn_get_cursor_pos:
18270                                           !BCC_EOS
18271                                           !BCC_EOS
18272                                           !BCC_EOS
18273                                           ! 2171 {
18274                                           ! 2172  Bit16u ss=get_SS();
18275 4449           55                         push	bp
18276 444A           89E5                       mov	bp,sp
18277 444C           4C                         dec	sp
18278 444D           4C                         dec	sp
18279                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18280 444E           E8         37C8            call	_get_SS
18281                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18282 4451           8946         FE            mov	-2[bp],ax
18283                                           !BCC_EOS
18284                                           ! 2173  write_word(ss, shape, 0);
18285                                           ! Debug: list int = const 0 (used reg = )
18286 4454           31C0                       xor	ax,ax
18287 4456           50                         push	ax
18288                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18289 4457           FF76         06            push	6[bp]
18290                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18291 445A           FF76         FE            push	-2[bp]
18292                                           ! Debug: func () void = write_word+0 (used reg = )
18293 445D           E8         376B            call	_write_word
18294 4460           83C4                   06  add	sp,*6
18295                                           !BCC_EOS
18296                                           ! 2174  write_word(ss, pos, 0);
18297                                           ! Debug: list int = const 0 (used reg = )
18298 4463           31C0                       xor	ax,ax
18299 4465           50                         push	ax
18300                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18301 4466           FF76         08            push	8[bp]
18302                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18303 4469           FF76         FE            push	-2[bp]
18304                                           ! Debug: func () void = write_word+0 (used reg = )
18305 446C           E8         375C            call	_write_word
18306 446F           83C4                   06  add	sp,*6
18307                                           !BCC_EOS
18308                                           ! 2175  if(page>7)return;
18309                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18310 4472           8A46         04            mov	al,4[bp]
18311 4475           3C                     07  cmp	al,*7
18312 4477           76           04            jbe 	.A6
18313                       00004479            .A7:
18314 4479           89EC                       mov	sp,bp
18315 447B           5D                         pop	bp
18316 447C           C3                         ret
18317                                           !BCC_EOS
18318                                           ! 2176  write_word(ss,shape,read_word(0x40,0x60));
18319                       0000447D            .A6:
18320                                           ! Debug: list int = const $60 (used reg = )
18321 447D           B8                   0060  mov	ax,*$60
18322 4480           50                         push	ax
18323                                           ! Debug: list int = const $40 (used reg = )
18324 4481           B8                   0040  mov	ax,*$40
18325 4484           50                         push	ax
18326                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18327 4485           E8         3718            call	_read_word
18328 4488           83C4                   04  add	sp,*4
18329                                           ! Debug: list unsigned short = ax+0 (used reg = )
18330 448B           50                         push	ax
18331                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18332 448C           FF76         06            push	6[bp]
18333                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18334 448F           FF76         FE            push	-2[bp]
18335                                           ! Debug: func () void = write_word+0 (used reg = )
18336 4492           E8         3736            call	_write_word
18337 4495           83C4                   06  add	sp,*6
18338                                           !BCC_EOS
18339                                           ! 2177  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18340                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18341 4498           8A46         04            mov	al,4[bp]
18342 449B           30E4                       xor	ah,ah
18343 449D           D1E0                       shl	ax,*1
18344                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18345                                           ! Debug: expression subtree swapping
18346                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18347 449F           05                   0050  add	ax,*$50
18348 44A2           50                         push	ax
18349                                           ! Debug: list int = const $40 (used reg = )
18350 44A3           B8                   0040  mov	ax,*$40
18351 44A6           50                         push	ax
18352                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18353 44A7           E8         36F6            call	_read_word
18354 44AA           83C4                   04  add	sp,*4
18355                                           ! Debug: list unsigned short = ax+0 (used reg = )
18356 44AD           50                         push	ax
18357                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18358 44AE           FF76         08            push	8[bp]
18359                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18360 44B1           FF76         FE            push	-2[bp]
18361                                           ! Debug: func () void = write_word+0 (used reg = )
18362 44B4           E8         3714            call	_write_word
18363 44B7           83C4                   06  add	sp,*6
18364                                           !BCC_EOS
18365                                           ! 2178 }
18366 44BA           89EC                       mov	sp,bp
18367 44BC           5D                         pop	bp
18368 44BD           C3                         ret
18369                                           ! 2179 static void biosfn_set_active_page (page)
18370                                           ! 2180 Bit8u page;
18371                       000044BE            _biosfn_set_active_page:
18372                                           !BCC_EOS
18373                                           ! 2181 {
18374                                           ! 2182  Bit16u cursor,dummy,crtc_addr;
18375                                           !BCC_EOS
18376                                           ! 2183  Bit16u nbcols,nbrows,address;
18377                                           !BCC_EOS
18378                                           ! 2184  Bit8u mode,line;
18379                                           !BCC_EOS
18380                                           ! 2185  if(page>7)return;
18381 44BE           55                         push	bp
18382 44BF           89E5                       mov	bp,sp
18383 44C1           83C4                   F2  add	sp,*-$E
18384                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18385 44C4           8A46         04            mov	al,4[bp]
18386 44C7           3C                     07  cmp	al,*7
18387 44C9           76           04            jbe 	.A8
18388                       000044CB            .A9:
18389 44CB           89EC                       mov	sp,bp
18390 44CD           5D                         pop	bp
18391 44CE           C3                         ret
18392                                           !BCC_EOS
18393                                           ! 2186  mode=read_byte(0x40,0x49);
18394                       000044CF            .A8:
18395                                           ! Debug: list int = const $49 (used reg = )
18396 44CF           B8                   0049  mov	ax,*$49
18397 44D2           50                         push	ax
18398                                           ! Debug: list int = const $40 (used reg = )
18399 44D3           B8                   0040  mov	ax,*$40
18400 44D6           50                         push	ax
18401                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18402 44D7           E8         36B3            call	_read_byte
18403 44DA           83C4                   04  add	sp,*4
18404                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18405 44DD           8846         F3            mov	-$D[bp],al
18406                                           !BCC_EOS
18407                                           ! 2187  line=find_vga_entry(mode);
18408                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18409 44E0           8A46         F3            mov	al,-$D[bp]
18410 44E3           30E4                       xor	ah,ah
18411 44E5           50                         push	ax
18412                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18413 44E6           E8         35B8            call	_find_vga_entry
18414 44E9           44                         inc	sp
18415 44EA           44                         inc	sp
18416                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18417 44EB           8846         F2            mov	-$E[bp],al
18418                                           !BCC_EOS
18419                                           ! 2188  if(line==0xFF)return;
18420                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18421 44EE           8A46         F2            mov	al,-$E[bp]
18422 44F1           3C                     FF  cmp	al,#$FF
18423 44F3           75           04            jne 	.AA
18424                       000044F5            .AB:
18425 44F5           89EC                       mov	sp,bp
18426 44F7           5D                         pop	bp
18427 44F8           C3                         ret
18428                                           !BCC_EOS
18429                                           ! 2189  biosfn_get_cursor_pos(page,&dummy,&cursor);
18430                       000044F9            .AA:
18431                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18432 44F9           8D5E         FE            lea	bx,-2[bp]
18433 44FC           53                         push	bx
18434                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18435 44FD           8D5E         FC            lea	bx,-4[bp]
18436 4500           53                         push	bx
18437                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18438 4501           8A46         04            mov	al,4[bp]
18439 4504           30E4                       xor	ah,ah
18440 4506           50                         push	ax
18441                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18442 4507           E8         FF3F            call	_biosfn_get_cursor_pos
18443 450A           83C4                   06  add	sp,*6
18444                                           !BCC_EOS
18445                                           ! 2190  if(vga_modes[line].class==0x00)
18446                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18447 450D           8A46         F2            mov	al,-$E[bp]
18448 4510           30E4                       xor	ah,ah
18449 4512           B1                     03  mov	cl,*3
18450 4514           D3E0                       shl	ax,cl
18451 4516           89C3                       mov	bx,ax
18452 4518           81C3                 01FD  add	bx,#_vga_modes
18453                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18454 451C           8A47         01            mov	al,1[bx]
18455 451F           84C0                       test	al,al
18456 4521           75           6E            jne 	.AC
18457                       00004523            .AD:
18458                                           ! 2191   {
18459                                           ! 2192    nbcols=read_word(0x40,0x4A);
18460                                           ! Debug: list int = const $4A (used reg = )
18461 4523           B8                   004A  mov	ax,*$4A
18462 4526           50                         push	ax
18463                                           ! Debug: list int = const $40 (used reg = )
18464 4527           B8                   0040  mov	ax,*$40
18465 452A           50                         push	ax
18466                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18467 452B           E8         3672            call	_read_word
18468 452E           83C4                   04  add	sp,*4
18469                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18470 4531           8946         F8            mov	-8[bp],ax
18471                                           !BCC_EOS
18472                                           ! 2193    nbrows=read_byte(0x40,0x84)+1;
18473                                           ! Debug: list int = const $84 (used reg = )
18474 4534           B8                   0084  mov	ax,#$84
18475 4537           50                         push	ax
18476                                           ! Debug: list int = const $40 (used reg = )
18477 4538           B8                   0040  mov	ax,*$40
18478 453B           50                         push	ax
18479                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18480 453C           E8         364E            call	_read_byte
18481 453F           83C4                   04  add	sp,*4
18482                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18483 4542           30E4                       xor	ah,ah
18484                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18485 4544           40                         inc	ax
18486 4545           8946         F6            mov	-$A[bp],ax
18487                                           !BCC_EOS
18488                                           ! 2194    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18489                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18490 4548           8B46         F8            mov	ax,-8[bp]
18491 454B           8B4E         F6            mov	cx,-$A[bp]
18492 454E           F7E9                       imul	cx
18493                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18494 4550           D1E0                       shl	ax,*1
18495                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18496 4552           0C                     FF  or	al,#$FF
18497                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18498                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18499 4554           89C3                       mov	bx,ax
18500 4556           8A46         04            mov	al,4[bp]
18501 4559           30E4                       xor	ah,ah
18502 455B           93                         xchg	ax,bx
18503 455C           40                         inc	ax
18504 455D           89D9                       mov	cx,bx
18505 455F           F7E9                       imul	cx
18506                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18507 4561           8946         F4            mov	-$C[bp],ax
18508                                           !BCC_EOS
18509                                           ! 2195    write_word(0x40,0x4E,address);
18510                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18511 4564           FF76         F4            push	-$C[bp]
18512                                           ! Debug: list int = const $4E (used reg = )
18513 4567           B8                   004E  mov	ax,*$4E
18514 456A           50                         push	ax
18515                                           ! Debug: list int = const $40 (used reg = )
18516 456B           B8                   0040  mov	ax,*$40
18517 456E           50                         push	ax
18518                                           ! Debug: func () void = write_word+0 (used reg = )
18519 456F           E8         3659            call	_write_word
18520 4572           83C4                   06  add	sp,*6
18521                                           !BCC_EOS
18522                                           ! 2196    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18523                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18524 4575           8B46         F8            mov	ax,-8[bp]
18525 4578           8B4E         F6            mov	cx,-$A[bp]
18526 457B           F7E9                       imul	cx
18527                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18528 457D           0C                     FF  or	al,#$FF
18529                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18530                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18531 457F           89C3                       mov	bx,ax
18532 4581           8A46         04            mov	al,4[bp]
18533 4584           30E4                       xor	ah,ah
18534 4586           93                         xchg	ax,bx
18535 4587           40                         inc	ax
18536 4588           89D9                       mov	cx,bx
18537 458A           F7E9                       imul	cx
18538                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18539 458C           8946         F4            mov	-$C[bp],ax
18540                                           !BCC_EOS
18541                                           ! 2197   }
18542                                           ! 2198  else
18543                                           ! 2199   {
18544 458F           EB           24            jmp .AE
18545                       00004591            .AC:
18546                                           ! 2200    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18547                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18548 4591           8A46         F2            mov	al,-$E[bp]
18549 4594           30E4                       xor	ah,ah
18550 4596           89C3                       mov	bx,ax
18551                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18552 4598           8A87       027D            mov	al,_line_to_vpti[bx]
18553 459C           30E4                       xor	ah,ah
18554 459E           B1                     06  mov	cl,*6
18555 45A0           D3E0                       shl	ax,cl
18556 45A2           89C3                       mov	bx,ax
18557 45A4           81C3                 0291  add	bx,#_video_param_table
18558                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18559                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18560                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18561 45A8           8A46         04            mov	al,4[bp]
18562 45AB           30E4                       xor	ah,ah
18563 45AD           8B4F         03            mov	cx,3[bx]
18564 45B0           F7E9                       imul	cx
18565                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18566 45B2           8946         F4            mov	-$C[bp],ax
18567                                           !BCC_EOS
18568                                           ! 2201   }
18569                                           ! 2202  crtc_addr=read_word(0x40,0x63);
18570                       000045B5            .AE:
18571                                           ! Debug: list int = const $63 (used reg = )
18572 45B5           B8                   0063  mov	ax,*$63
18573 45B8           50                         push	ax
18574                                           ! Debug: list int = const $40 (used reg = )
18575 45B9           B8                   0040  mov	ax,*$40
18576 45BC           50                         push	ax
18577                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18578 45BD           E8         35E0            call	_read_word
18579 45C0           83C4                   04  add	sp,*4
18580                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18581 45C3           8946         FA            mov	-6[bp],ax
18582                                           !BCC_EOS
18583                                           ! 2203  outb(crtc_addr,0x0c);
18584                                           ! Debug: list int = const $C (used reg = )
18585 45C6           B8                   000C  mov	ax,*$C
18586 45C9           50                         push	ax
18587                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18588 45CA           FF76         FA            push	-6[bp]
18589                                           ! Debug: func () void = outb+0 (used reg = )
18590 45CD           E8         3629            call	_outb
18591 45D0           83C4                   04  add	sp,*4
18592                                           !BCC_EOS
18593                                           ! 2204  outb(crtc_addr+1,(address&0xff00)>>8);
18594                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18595 45D3           8B46         F4            mov	ax,-$C[bp]
18596 45D6           30C0                       xor	al,al
18597                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18598 45D8           88E0                       mov	al,ah
18599 45DA           30E4                       xor	ah,ah
18600                                           ! Debug: list unsigned int = ax+0 (used reg = )
18601 45DC           50                         push	ax
18602                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18603 45DD           8B46         FA            mov	ax,-6[bp]
18604                                           ! Debug: list unsigned int = ax+1 (used reg = )
18605 45E0           40                         inc	ax
18606 45E1           50                         push	ax
18607                                           ! Debug: func () void = outb+0 (used reg = )
18608 45E2           E8         3614            call	_outb
18609 45E5           83C4                   04  add	sp,*4
18610                                           !BCC_EOS
18611                                           ! 2205  outb(crtc_addr,0x0d);
18612                                           ! Debug: list int = const $D (used reg = )
18613 45E8           B8                   000D  mov	ax,*$D
18614 45EB           50                         push	ax
18615                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18616 45EC           FF76         FA            push	-6[bp]
18617                                           ! Debug: func () void = outb+0 (used reg = )
18618 45EF           E8         3607            call	_outb
18619 45F2           83C4                   04  add	sp,*4
18620                                           !BCC_EOS
18621                                           ! 2206  outb(crtc_addr+1,address&0x00ff);
18622                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18623 45F5           8A46         F4            mov	al,-$C[bp]
18624                                           ! Debug: list unsigned char = al+0 (used reg = )
18625 45F8           30E4                       xor	ah,ah
18626 45FA           50                         push	ax
18627                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18628 45FB           8B46         FA            mov	ax,-6[bp]
18629                                           ! Debug: list unsigned int = ax+1 (used reg = )
18630 45FE           40                         inc	ax
18631 45FF           50                         push	ax
18632                                           ! Debug: func () void = outb+0 (used reg = )
18633 4600           E8         35F6            call	_outb
18634 4603           83C4                   04  add	sp,*4
18635                                           !BCC_EOS
18636                                           ! 2207  write_byte(0x40,0x62,page);
18637                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18638 4606           8A46         04            mov	al,4[bp]
18639 4609           30E4                       xor	ah,ah
18640 460B           50                         push	ax
18641                                           ! Debug: list int = const $62 (used reg = )
18642 460C           B8                   0062  mov	ax,*$62
18643 460F           50                         push	ax
18644                                           ! Debug: list int = const $40 (used reg = )
18645 4610           B8                   0040  mov	ax,*$40
18646 4613           50                         push	ax
18647                                           ! Debug: func () void = write_byte+0 (used reg = )
18648 4614           E8         359C            call	_write_byte
18649 4617           83C4                   06  add	sp,*6
18650                                           !BCC_EOS
18651                                           ! 2208  biosfn_set_cursor_pos(page,cursor);
18652                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18653 461A           FF76         FE            push	-2[bp]
18654                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18655 461D           8A46         04            mov	al,4[bp]
18656 4620           30E4                       xor	ah,ah
18657 4622           50                         push	ax
18658                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18659 4623           E8         FD23            call	_biosfn_set_cursor_pos
18660 4626           83C4                   04  add	sp,*4
18661                                           !BCC_EOS
18662                                           ! 2209 }
18663 4629           89EC                       mov	sp,bp
18664 462B           5D                         pop	bp
18665 462C           C3                         ret
18666                                           ! 2210 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18667                                           ! Register BX used in function biosfn_set_active_page
18668                                           ! 2211 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18669                       0000462D            _vgamem_copy_pl4:
18670                                           !BCC_EOS
18671                                           !BCC_EOS
18672                                           !BCC_EOS
18673                                           !BCC_EOS
18674                                           !BCC_EOS
18675                                           !BCC_EOS
18676                                           ! 2212 {
18677                                           ! 2213  Bit16u src,dest;
18678                                           !BCC_EOS
18679                                           ! 2214  Bit8u i;
18680                                           !BCC_EOS
18681                                           ! 2215  src=ysrc*cheight*nbcols+xstart;
18682 462D           55                         push	bp
18683 462E           89E5                       mov	bp,sp
18684 4630           83C4                   FA  add	sp,*-6
18685                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18686 4633           8A46         0E            mov	al,$E[bp]
18687 4636           30E4                       xor	ah,ah
18688 4638           89C3                       mov	bx,ax
18689 463A           8A46         06            mov	al,6[bp]
18690 463D           30E4                       xor	ah,ah
18691 463F           89D9                       mov	cx,bx
18692 4641           F7E9                       imul	cx
18693                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18694 4643           89C3                       mov	bx,ax
18695 4645           8A46         0C            mov	al,$C[bp]
18696 4648           30E4                       xor	ah,ah
18697 464A           93                         xchg	ax,bx
18698 464B           89D9                       mov	cx,bx
18699 464D           F7E9                       imul	cx
18700                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18701 464F           0246         04            add	al,4[bp]
18702 4652           80D4                   00  adc	ah,*0
18703                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18704 4655           8946         FE            mov	-2[bp],ax
18705                                           !BCC_EOS
18706                                           ! 2216  dest=ydest*cheight*nbcols+xstart;
18707                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18708 4658           8A46         0E            mov	al,$E[bp]
18709 465B           30E4                       xor	ah,ah
18710 465D           89C3                       mov	bx,ax
18711 465F           8A46         08            mov	al,8[bp]
18712 4662           30E4                       xor	ah,ah
18713 4664           89D9                       mov	cx,bx
18714 4666           F7E9                       imul	cx
18715                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18716 4668           89C3                       mov	bx,ax
18717 466A           8A46         0C            mov	al,$C[bp]
18718 466D           30E4                       xor	ah,ah
18719 466F           93                         xchg	ax,bx
18720 4670           89D9                       mov	cx,bx
18721 4672           F7E9                       imul	cx
18722                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18723 4674           0246         04            add	al,4[bp]
18724 4677           80D4                   00  adc	ah,*0
18725                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18726 467A           8946         FC            mov	-4[bp],ax
18727                                           !BCC_EOS
18728                                           ! 2217  outw(0x3ce, 0x0105);
18729                                           ! Debug: list int = const $105 (used reg = )
18730 467D           B8                   0105  mov	ax,#$105
18731 4680           50                         push	ax
18732                                           ! Debug: list int = const $3CE (used reg = )
18733 4681           B8                   03CE  mov	ax,#$3CE
18734 4684           50                         push	ax
18735                                           ! Debug: func () void = outw+0 (used reg = )
18736 4685           E8         3581            call	_outw
18737 4688           83C4                   04  add	sp,*4
18738                                           !BCC_EOS
18739                                           ! 2218  for(i=0;i<cheight;i++)
18740                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18741 468B           30C0                       xor	al,al
18742 468D           8846         FB            mov	-5[bp],al
18743                                           !BCC_EOS
18744                                           !BCC_EOS
18745                                           ! 2219   {
18746 4690           EB           43            jmp .B1
18747                       00004692            .B2:
18748                                           ! 2220    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18749                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18750 4692           8A46         0A            mov	al,$A[bp]
18751 4695           30E4                       xor	ah,ah
18752 4697           50                         push	ax
18753                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18754 4698           8A46         0C            mov	al,$C[bp]
18755 469B           30E4                       xor	ah,ah
18756 469D           89C3                       mov	bx,ax
18757 469F           8A46         FB            mov	al,-5[bp]
18758 46A2           30E4                       xor	ah,ah
18759 46A4           89D9                       mov	cx,bx
18760 46A6           F7E9                       imul	cx
18761                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18762                                           ! Debug: expression subtree swapping
18763 46A8           0346         FE            add	ax,-2[bp]
18764                                           ! Debug: list unsigned int = ax+0 (used reg = )
18765 46AB           50                         push	ax
18766                                           ! Debug: list unsigned int = const $A000 (used reg = )
18767 46AC           B8                   A000  mov	ax,#$A000
18768 46AF           50                         push	ax
18769                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18770 46B0           8A46         0C            mov	al,$C[bp]
18771 46B3           30E4                       xor	ah,ah
18772 46B5           89C3                       mov	bx,ax
18773 46B7           8A46         FB            mov	al,-5[bp]
18774 46BA           30E4                       xor	ah,ah
18775 46BC           89D9                       mov	cx,bx
18776 46BE           F7E9                       imul	cx
18777                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18778                                           ! Debug: expression subtree swapping
18779 46C0           0346         FC            add	ax,-4[bp]
18780                                           ! Debug: list unsigned int = ax+0 (used reg = )
18781 46C3           50                         push	ax
18782                                           ! Debug: list unsigned int = const $A000 (used reg = )
18783 46C4           B8                   A000  mov	ax,#$A000
18784 46C7           50                         push	ax
18785                                           ! Debug: func () void = memcpyb+0 (used reg = )
18786 46C8           E8         3462            call	_memcpyb
18787 46CB           83C4                   0A  add	sp,*$A
18788                                           !BCC_EOS
18789                                           ! 2221   }
18790                                           ! 2222  outw(0x3ce, 0x0005);
18791                       000046CE            .B0:
18792                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18793 46CE           8A46         FB            mov	al,-5[bp]
18794 46D1           40                         inc	ax
18795 46D2           8846         FB            mov	-5[bp],al
18796                       000046D5            .B1:
18797                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18798 46D5           8A46         FB            mov	al,-5[bp]
18799 46D8           3A46         0E            cmp	al,$E[bp]
18800 46DB           72           B5            jb 	.B2
18801                       000046DD            .B3:
18802                       000046DD            .AF:
18803                                           ! Debug: list int = const 5 (used reg = )
18804 46DD           B8                   0005  mov	ax,*5
18805 46E0           50                         push	ax
18806                                           ! Debug: list int = const $3CE (used reg = )
18807 46E1           B8                   03CE  mov	ax,#$3CE
18808 46E4           50                         push	ax
18809                                           ! Debug: func () void = outw+0 (used reg = )
18810 46E5           E8         3521            call	_outw
18811 46E8           83C4                   04  add	sp,*4
18812                                           !BCC_EOS
18813                                           ! 2223 }
18814 46EB           89EC                       mov	sp,bp
18815 46ED           5D                         pop	bp
18816 46EE           C3                         ret
18817                                           ! 2224 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18818                                           ! Register BX used in function vgamem_copy_pl4
18819                                           ! 2225 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18820                       000046EF            _vgamem_fill_pl4:
18821                                           !BCC_EOS
18822                                           !BCC_EOS
18823                                           !BCC_EOS
18824                                           !BCC_EOS
18825                                           !BCC_EOS
18826                                           !BCC_EOS
18827                                           ! 2226 {
18828                                           ! 2227  Bit16u dest;
18829                                           !BCC_EOS
18830                                           ! 2228  Bit8u i;
18831                                           !BCC_EOS
18832                                           ! 2229  dest=ystart*cheight*nbcols+xstart;
18833 46EF           55                         push	bp
18834 46F0           89E5                       mov	bp,sp
18835 46F2           83C4                   FC  add	sp,*-4
18836                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18837 46F5           8A46         0C            mov	al,$C[bp]
18838 46F8           30E4                       xor	ah,ah
18839 46FA           89C3                       mov	bx,ax
18840 46FC           8A46         06            mov	al,6[bp]
18841 46FF           30E4                       xor	ah,ah
18842 4701           89D9                       mov	cx,bx
18843 4703           F7E9                       imul	cx
18844                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18845 4705           89C3                       mov	bx,ax
18846 4707           8A46         0A            mov	al,$A[bp]
18847 470A           30E4                       xor	ah,ah
18848 470C           93                         xchg	ax,bx
18849 470D           89D9                       mov	cx,bx
18850 470F           F7E9                       imul	cx
18851                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18852 4711           0246         04            add	al,4[bp]
18853 4714           80D4                   00  adc	ah,*0
18854                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18855 4717           8946         FE            mov	-2[bp],ax
18856                                           !BCC_EOS
18857                                           ! 2230  outw(0x3ce, 0x0205);
18858                                           ! Debug: list int = const $205 (used reg = )
18859 471A           B8                   0205  mov	ax,#$205
18860 471D           50                         push	ax
18861                                           ! Debug: list int = const $3CE (used reg = )
18862 471E           B8                   03CE  mov	ax,#$3CE
18863 4721           50                         push	ax
18864                                           ! Debug: func () void = outw+0 (used reg = )
18865 4722           E8         34E4            call	_outw
18866 4725           83C4                   04  add	sp,*4
18867                                           !BCC_EOS
18868                                           ! 2231  for(i=0;i<cheight;i++)
18869                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18870 4728           30C0                       xor	al,al
18871 472A           8846         FD            mov	-3[bp],al
18872                                           !BCC_EOS
18873                                           !BCC_EOS
18874                                           ! 2232   {
18875 472D           EB           31            jmp .B6
18876                       0000472F            .B7:
18877                                           ! 2233    memsetb(0xa000,dest+i*nbcols,attr,cols);
18878                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18879 472F           8A46         08            mov	al,8[bp]
18880 4732           30E4                       xor	ah,ah
18881 4734           50                         push	ax
18882                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18883 4735           8A46         0E            mov	al,$E[bp]
18884 4738           30E4                       xor	ah,ah
18885 473A           50                         push	ax
18886                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18887 473B           8A46         0A            mov	al,$A[bp]
18888 473E           30E4                       xor	ah,ah
18889 4740           89C3                       mov	bx,ax
18890 4742           8A46         FD            mov	al,-3[bp]
18891 4745           30E4                       xor	ah,ah
18892 4747           89D9                       mov	cx,bx
18893 4749           F7E9                       imul	cx
18894                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18895                                           ! Debug: expression subtree swapping
18896 474B           0346         FE            add	ax,-2[bp]
18897                                           ! Debug: list unsigned int = ax+0 (used reg = )
18898 474E           50                         push	ax
18899                                           ! Debug: list unsigned int = const $A000 (used reg = )
18900 474F           B8                   A000  mov	ax,#$A000
18901 4752           50                         push	ax
18902                                           ! Debug: func () void = memsetb+0 (used reg = )
18903 4753           E8         338D            call	_memsetb
18904 4756           83C4                   08  add	sp,*8
18905                                           !BCC_EOS
18906                                           ! 2234   }
18907                                           ! 2234 
18908                                           ! 2235  outw(0x3ce, 0x0005);
18909                       00004759            .B5:
18910                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18911 4759           8A46         FD            mov	al,-3[bp]
18912 475C           40                         inc	ax
18913 475D           8846         FD            mov	-3[bp],al
18914                       00004760            .B6:
18915                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18916 4760           8A46         FD            mov	al,-3[bp]
18917 4763           3A46         0C            cmp	al,$C[bp]
18918 4766           72           C7            jb 	.B7
18919                       00004768            .B8:
18920                       00004768            .B4:
18921                                           ! Debug: list int = const 5 (used reg = )
18922 4768           B8                   0005  mov	ax,*5
18923 476B           50                         push	ax
18924                                           ! Debug: list int = const $3CE (used reg = )
18925 476C           B8                   03CE  mov	ax,#$3CE
18926 476F           50                         push	ax
18927                                           ! Debug: func () void = outw+0 (used reg = )
18928 4770           E8         3496            call	_outw
18929 4773           83C4                   04  add	sp,*4
18930                                           !BCC_EOS
18931                                           ! 2236 }
18932 4776           89EC                       mov	sp,bp
18933 4778           5D                         pop	bp
18934 4779           C3                         ret
18935                                           ! 2237 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18936                                           ! Register BX used in function vgamem_fill_pl4
18937                                           ! 2238 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18938                       0000477A            _vgamem_copy_cga:
18939                                           !BCC_EOS
18940                                           !BCC_EOS
18941                                           !BCC_EOS
18942                                           !BCC_EOS
18943                                           !BCC_EOS
18944                                           !BCC_EOS
18945                                           ! 2239 {
18946                                           ! 2240  Bit16u src,dest;
18947                                           !BCC_EOS
18948                                           ! 2241  Bit8u i;
18949                                           !BCC_EOS
18950                                           ! 2242  src=((ysrc*cheight*nbcols)>>1)+xstart;
18951 477A           55                         push	bp
18952 477B           89E5                       mov	bp,sp
18953 477D           83C4                   FA  add	sp,*-6
18954                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18955 4780           8A46         0E            mov	al,$E[bp]
18956 4783           30E4                       xor	ah,ah
18957 4785           89C3                       mov	bx,ax
18958 4787           8A46         06            mov	al,6[bp]
18959 478A           30E4                       xor	ah,ah
18960 478C           89D9                       mov	cx,bx
18961 478E           F7E9                       imul	cx
18962                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18963 4790           89C3                       mov	bx,ax
18964 4792           8A46         0C            mov	al,$C[bp]
18965 4795           30E4                       xor	ah,ah
18966 4797           93                         xchg	ax,bx
18967 4798           89D9                       mov	cx,bx
18968 479A           F7E9                       imul	cx
18969                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18970 479C           D1E8                       shr	ax,*1
18971                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18972 479E           0246         04            add	al,4[bp]
18973 47A1           80D4                   00  adc	ah,*0
18974                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18975 47A4           8946         FE            mov	-2[bp],ax
18976                                           !BCC_EOS
18977                                           ! 2243  dest=((ydest*cheight*nbcols)>>1)+xstart;
18978                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18979 47A7           8A46         0E            mov	al,$E[bp]
18980 47AA           30E4                       xor	ah,ah
18981 47AC           89C3                       mov	bx,ax
18982 47AE           8A46         08            mov	al,8[bp]
18983 47B1           30E4                       xor	ah,ah
18984 47B3           89D9                       mov	cx,bx
18985 47B5           F7E9                       imul	cx
18986                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18987 47B7           89C3                       mov	bx,ax
18988 47B9           8A46         0C            mov	al,$C[bp]
18989 47BC           30E4                       xor	ah,ah
18990 47BE           93                         xchg	ax,bx
18991 47BF           89D9                       mov	cx,bx
18992 47C1           F7E9                       imul	cx
18993                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18994 47C3           D1E8                       shr	ax,*1
18995                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18996 47C5           0246         04            add	al,4[bp]
18997 47C8           80D4                   00  adc	ah,*0
18998                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18999 47CB           8946         FC            mov	-4[bp],ax
19000                                           !BCC_EOS
19001                                           ! 2244  for(i=0;i<cheight;i++)
19002                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
19003 47CE           30C0                       xor	al,al
19004 47D0           8846         FB            mov	-5[bp],al
19005                                           !BCC_EOS
19006                                           !BCC_EOS
19007                                           ! 2245   {
19008 47D3           E9         00A8            br 	.BB
19009                       000047D6            .BC:
19010                                           ! 2246    if (i & 1)
19011                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
19012 47D6           8A46         FB            mov	al,-5[bp]
19013 47D9           24                     01  and	al,*1
19014 47DB           84C0                       test	al,al
19015 47DD           74           56            je  	.BD
19016                       000047DF            .BE:
19017                                           ! 2247      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
19018                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19019 47DF           8A46         0A            mov	al,$A[bp]
19020 47E2           30E4                       xor	ah,ah
19021 47E4           50                         push	ax
19022                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19023 47E5           8A46         FB            mov	al,-5[bp]
19024 47E8           30E4                       xor	ah,ah
19025 47EA           D1E8                       shr	ax,*1
19026                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19027 47EC           89C3                       mov	bx,ax
19028 47EE           8A46         0C            mov	al,$C[bp]
19029 47F1           30E4                       xor	ah,ah
19030 47F3           93                         xchg	ax,bx
19031 47F4           89D9                       mov	cx,bx
19032 47F6           F7E9                       imul	cx
19033 47F8           50                         push	ax
19034                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19035                                           ! Debug: expression subtree swapping
19036 47F9           8B46         FE            mov	ax,-2[bp]
19037                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19038 47FC           05                   2000  add	ax,#$2000
19039 47FF           0346         F6            add	ax,-$A[bp]
19040 4802           44                         inc	sp
19041 4803           44                         inc	sp
19042                                           ! Debug: list unsigned int = ax+0 (used reg = )
19043 4804           50                         push	ax
19044                                           ! Debug: list unsigned int = const $B800 (used reg = )
19045 4805           B8                   B800  mov	ax,#$B800
19046 4808           50                         push	ax
19047                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19048 4809           8A46         FB            mov	al,-5[bp]
19049 480C           30E4                       xor	ah,ah
19050 480E           D1E8                       shr	ax,*1
19051                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19052 4810           89C3                       mov	bx,ax
19053 4812           8A46         0C            mov	al,$C[bp]
19054 4815           30E4                       xor	ah,ah
19055 4817           93                         xchg	ax,bx
19056 4818           89D9                       mov	cx,bx
19057 481A           F7E9                       imul	cx
19058 481C           50                         push	ax
19059                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19060                                           ! Debug: expression subtree swapping
19061 481D           8B46         FC            mov	ax,-4[bp]
19062                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19063 4820           05                   2000  add	ax,#$2000
19064 4823           0346         F2            add	ax,-$E[bp]
19065 4826           44                         inc	sp
19066 4827           44                         inc	sp
19067                                           ! Debug: list unsigned int = ax+0 (used reg = )
19068 4828           50                         push	ax
19069                                           ! Debug: list unsigned int = const $B800 (used reg = )
19070 4829           B8                   B800  mov	ax,#$B800
19071 482C           50                         push	ax
19072                                           ! Debug: func () void = memcpyb+0 (used reg = )
19073 482D           E8         32FD            call	_memcpyb
19074 4830           83C4                   0A  add	sp,*$A
19075                                           !BCC_EOS
19076                                           ! 2248    else
19077                                           ! 2249      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19078 4833           EB           42            jmp .BF
19079                       00004835            .BD:
19080                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19081 4835           8A46         0A            mov	al,$A[bp]
19082 4838           30E4                       xor	ah,ah
19083 483A           50                         push	ax
19084                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19085 483B           8A46         FB            mov	al,-5[bp]
19086 483E           30E4                       xor	ah,ah
19087 4840           D1E8                       shr	ax,*1
19088                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19089 4842           89C3                       mov	bx,ax
19090 4844           8A46         0C            mov	al,$C[bp]
19091 4847           30E4                       xor	ah,ah
19092 4849           93                         xchg	ax,bx
19093 484A           89D9                       mov	cx,bx
19094 484C           F7E9                       imul	cx
19095                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19096                                           ! Debug: expression subtree swapping
19097 484E           0346         FE            add	ax,-2[bp]
19098                                           ! Debug: list unsigned int = ax+0 (used reg = )
19099 4851           50                         push	ax
19100                                           ! Debug: list unsigned int = const $B800 (used reg = )
19101 4852           B8                   B800  mov	ax,#$B800
19102 4855           50                         push	ax
19103                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19104 4856           8A46         FB            mov	al,-5[bp]
19105 4859           30E4                       xor	ah,ah
19106 485B           D1E8                       shr	ax,*1
19107                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19108 485D           89C3                       mov	bx,ax
19109 485F           8A46         0C            mov	al,$C[bp]
19110 4862           30E4                       xor	ah,ah
19111 4864           93                         xchg	ax,bx
19112 4865           89D9                       mov	cx,bx
19113 4867           F7E9                       imul	cx
19114                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19115                                           ! Debug: expression subtree swapping
19116 4869           0346         FC            add	ax,-4[bp]
19117                                           ! Debug: list unsigned int = ax+0 (used reg = )
19118 486C           50                         push	ax
19119                                           ! Debug: list unsigned int = const $B800 (used reg = )
19120 486D           B8                   B800  mov	ax,#$B800
19121 4870           50                         push	ax
19122                                           ! Debug: func () void = memcpyb+0 (used reg = )
19123 4871           E8         32B9            call	_memcpyb
19124 4874           83C4                   0A  add	sp,*$A
19125                                           !BCC_EOS
19126                                           ! 2250   }
19127                       00004877            .BF:
19128                                           ! 2251 }
19129                       00004877            .BA:
19130                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19131 4877           8A46         FB            mov	al,-5[bp]
19132 487A           40                         inc	ax
19133 487B           8846         FB            mov	-5[bp],al
19134                       0000487E            .BB:
19135                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19136 487E           8A46         FB            mov	al,-5[bp]
19137 4881           3A46         0E            cmp	al,$E[bp]
19138 4884         0F82         FF4E            blo 	.BC
19139                       00004888            .C0:
19140                       00004888            .B9:
19141 4888           89EC                       mov	sp,bp
19142 488A           5D                         pop	bp
19143 488B           C3                         ret
19144                                           ! 2252 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19145                                           ! Register BX used in function vgamem_copy_cga
19146                                           ! 2253 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19147                       0000488C            _vgamem_fill_cga:
19148                                           !BCC_EOS
19149                                           !BCC_EOS
19150                                           !BCC_EOS
19151                                           !BCC_EOS
19152                                           !BCC_EOS
19153                                           !BCC_EOS
19154                                           ! 2254 {
19155                                           ! 2255  Bit16u dest;
19156                                           !BCC_EOS
19157                                           ! 2256  Bit8u i;
19158                                           !BCC_EOS
19159                                           ! 2257  dest=((ystart*cheight*nbcols)>>1)+xstart;
19160 488C           55                         push	bp
19161 488D           89E5                       mov	bp,sp
19162 488F           83C4                   FC  add	sp,*-4
19163                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19164 4892           8A46         0C            mov	al,$C[bp]
19165 4895           30E4                       xor	ah,ah
19166 4897           89C3                       mov	bx,ax
19167 4899           8A46         06            mov	al,6[bp]
19168 489C           30E4                       xor	ah,ah
19169 489E           89D9                       mov	cx,bx
19170 48A0           F7E9                       imul	cx
19171                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19172 48A2           89C3                       mov	bx,ax
19173 48A4           8A46         0A            mov	al,$A[bp]
19174 48A7           30E4                       xor	ah,ah
19175 48A9           93                         xchg	ax,bx
19176 48AA           89D9                       mov	cx,bx
19177 48AC           F7E9                       imul	cx
19178                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19179 48AE           D1E8                       shr	ax,*1
19180                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19181 48B0           0246         04            add	al,4[bp]
19182 48B3           80D4                   00  adc	ah,*0
19183                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19184 48B6           8946         FE            mov	-2[bp],ax
19185                                           !BCC_EOS
19186                                           ! 2258  for(i=0;i<cheight;i++)
19187                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19188 48B9           30C0                       xor	al,al
19189 48BB           8846         FD            mov	-3[bp],al
19190                                           !BCC_EOS
19191                                           !BCC_EOS
19192                                           ! 2259   {
19193 48BE           EB           75            jmp .C3
19194                       000048C0            .C4:
19195                                           ! 2260    if (i & 1)
19196                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19197 48C0           8A46         FD            mov	al,-3[bp]
19198 48C3           24                     01  and	al,*1
19199 48C5           84C0                       test	al,al
19200 48C7           74           38            je  	.C5
19201                       000048C9            .C6:
19202                                           ! 2261      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19203                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19204 48C9           8A46         08            mov	al,8[bp]
19205 48CC           30E4                       xor	ah,ah
19206 48CE           50                         push	ax
19207                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19208 48CF           8A46         0E            mov	al,$E[bp]
19209 48D2           30E4                       xor	ah,ah
19210 48D4           50                         push	ax
19211                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19212 48D5           8A46         FD            mov	al,-3[bp]
19213 48D8           30E4                       xor	ah,ah
19214 48DA           D1E8                       shr	ax,*1
19215                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19216 48DC           89C3                       mov	bx,ax
19217 48DE           8A46         0A            mov	al,$A[bp]
19218 48E1           30E4                       xor	ah,ah
19219 48E3           93                         xchg	ax,bx
19220 48E4           89D9                       mov	cx,bx
19221 48E6           F7E9                       imul	cx
19222 48E8           50                         push	ax
19223                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19224                                           ! Debug: expression subtree swapping
19225 48E9           8B46         FE            mov	ax,-2[bp]
19226                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19227 48EC           05                   2000  add	ax,#$2000
19228 48EF           0346         F6            add	ax,-$A[bp]
19229 48F2           44                         inc	sp
19230 48F3           44                         inc	sp
19231                                           ! Debug: list unsigned int = ax+0 (used reg = )
19232 48F4           50                         push	ax
19233                                           ! Debug: list unsigned int = const $B800 (used reg = )
19234 48F5           B8                   B800  mov	ax,#$B800
19235 48F8           50                         push	ax
19236                                           ! Debug: func () void = memsetb+0 (used reg = )
19237 48F9           E8         31E7            call	_memsetb
19238 48FC           83C4                   08  add	sp,*8
19239                                           !BCC_EOS
19240                                           ! 2262    else
19241                                           ! 2263      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19242 48FF           EB           2D            jmp .C7
19243                       00004901            .C5:
19244                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19245 4901           8A46         08            mov	al,8[bp]
19246 4904           30E4                       xor	ah,ah
19247 4906           50                         push	ax
19248                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19249 4907           8A46         0E            mov	al,$E[bp]
19250 490A           30E4                       xor	ah,ah
19251 490C           50                         push	ax
19252                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19253 490D           8A46         FD            mov	al,-3[bp]
19254 4910           30E4                       xor	ah,ah
19255 4912           D1E8                       shr	ax,*1
19256                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19257 4914           89C3                       mov	bx,ax
19258 4916           8A46         0A            mov	al,$A[bp]
19259 4919           30E4                       xor	ah,ah
19260 491B           93                         xchg	ax,bx
19261 491C           89D9                       mov	cx,bx
19262 491E           F7E9                       imul	cx
19263                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19264                                           ! Debug: expression subtree swapping
19265 4920           0346         FE            add	ax,-2[bp]
19266                                           ! Debug: list unsigned int = ax+0 (used reg = )
19267 4923           50                         push	ax
19268                                           ! Debug: list unsigned int = const $B800 (used reg = )
19269 4924           B8                   B800  mov	ax,#$B800
19270 4927           50                         push	ax
19271                                           ! Debug: func () void = memsetb+0 (used reg = )
19272 4928           E8         31B8            call	_memsetb
19273 492B           83C4                   08  add	sp,*8
19274                                           !BCC_EOS
19275                                           ! 2264   }
19276                       0000492E            .C7:
19277                                           ! 2265 }
19278                       0000492E            .C2:
19279                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19280 492E           8A46         FD            mov	al,-3[bp]
19281 4931           40                         inc	ax
19282 4932           8846         FD            mov	-3[bp],al
19283                       00004935            .C3:
19284                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19285 4935           8A46         FD            mov	al,-3[bp]
19286 4938           3A46         0C            cmp	al,$C[bp]
19287 493B           72           83            jb 	.C4
19288                       0000493D            .C8:
19289                       0000493D            .C1:
19290 493D           89EC                       mov	sp,bp
19291 493F           5D                         pop	bp
19292 4940           C3                         ret
19293                                           ! 2266 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19294                                           ! Register BX used in function vgamem_fill_cga
19295                                           ! 2267 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19296                       00004941            _biosfn_scroll:
19297                                           !BCC_EOS
19298                                           !BCC_EOS
19299                                           !BCC_EOS
19300                                           !BCC_EOS
19301                                           !BCC_EOS
19302                                           !BCC_EOS
19303                                           !BCC_EOS
19304                                           !BCC_EOS
19305                                           ! 2268 {
19306                                           ! 2269  Bit8u mode,line,cheight,bpp,cols;
19307                                           !BCC_EOS
19308                                           ! 2270  Bit16u nbcols,nbrows,i;
19309                                           !BCC_EOS
19310                                           ! 2271  Bit16u address;
19311                                           !BCC_EOS
19312                                           ! 2272  if(rul>rlr)return;
19313 4941           55                         push	bp
19314 4942           89E5                       mov	bp,sp
19315 4944           83C4                   F2  add	sp,*-$E
19316                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19317 4947           8A46         08            mov	al,8[bp]
19318 494A           3A46         0C            cmp	al,$C[bp]
19319 494D           76           04            jbe 	.C9
19320                       0000494F            .CA:
19321 494F           89EC                       mov	sp,bp
19322 4951           5D                         pop	bp
19323 4952           C3                         ret
19324                                           !BCC_EOS
19325                                           ! 2273  if(cul>clr)return;
19326                       00004953            .C9:
19327                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19328 4953           8A46         0A            mov	al,$A[bp]
19329 4956           3A46         0E            cmp	al,$E[bp]
19330 4959           76           04            jbe 	.CB
19331                       0000495B            .CC:
19332 495B           89EC                       mov	sp,bp
19333 495D           5D                         pop	bp
19334 495E           C3                         ret
19335                                           !BCC_EOS
19336                                           ! 2274  mode=read_byte(0x40,0x49);
19337                       0000495F            .CB:
19338                                           ! Debug: list int = const $49 (used reg = )
19339 495F           B8                   0049  mov	ax,*$49
19340 4962           50                         push	ax
19341                                           ! Debug: list int = const $40 (used reg = )
19342 4963           B8                   0040  mov	ax,*$40
19343 4966           50                         push	ax
19344                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19345 4967           E8         3223            call	_read_byte
19346 496A           83C4                   04  add	sp,*4
19347                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19348 496D           8846         FF            mov	-1[bp],al
19349                                           !BCC_EOS
19350                                           ! 2275  line=find_vga_entry(mode);
19351                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19352 4970           8A46         FF            mov	al,-1[bp]
19353 4973           30E4                       xor	ah,ah
19354 4975           50                         push	ax
19355                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19356 4976           E8         3128            call	_find_vga_entry
19357 4979           44                         inc	sp
19358 497A           44                         inc	sp
19359                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19360 497B           8846         FE            mov	-2[bp],al
19361                                           !BCC_EOS
19362                                           ! 2276  if(line==0xFF)return;
19363                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19364 497E           8A46         FE            mov	al,-2[bp]
19365 4981           3C                     FF  cmp	al,#$FF
19366 4983           75           04            jne 	.CD
19367                       00004985            .CE:
19368 4985           89EC                       mov	sp,bp
19369 4987           5D                         pop	bp
19370 4988           C3                         ret
19371                                           !BCC_EOS
19372                                           ! 2277  nbrows=read_byte(0x40,0x84)+1;
19373                       00004989            .CD:
19374                                           ! Debug: list int = const $84 (used reg = )
19375 4989           B8                   0084  mov	ax,#$84
19376 498C           50                         push	ax
19377                                           ! Debug: list int = const $40 (used reg = )
19378 498D           B8                   0040  mov	ax,*$40
19379 4990           50                         push	ax
19380                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19381 4991           E8         31F9            call	_read_byte
19382 4994           83C4                   04  add	sp,*4
19383                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19384 4997           30E4                       xor	ah,ah
19385                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19386 4999           40                         inc	ax
19387 499A           8946         F6            mov	-$A[bp],ax
19388                                           !BCC_EOS
19389                                           ! 2278  nbcols=read_word(0x40,0x4A);
19390                                           ! Debug: list int = const $4A (used reg = )
19391 499D           B8                   004A  mov	ax,*$4A
19392 49A0           50                         push	ax
19393                                           ! Debug: list int = const $40 (used reg = )
19394 49A1           B8                   0040  mov	ax,*$40
19395 49A4           50                         push	ax
19396                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19397 49A5           E8         31F8            call	_read_word
19398 49A8           83C4                   04  add	sp,*4
19399                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19400 49AB           8946         F8            mov	-8[bp],ax
19401                                           !BCC_EOS
19402                                           ! 2279  if(page==0xFF)
19403                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19404 49AE           8A46         10            mov	al,$10[bp]
19405 49B1           3C                     FF  cmp	al,#$FF
19406 49B3           75           11            jne 	.CF
19407                       000049B5            .D0:
19408                                           ! 2280   page=read_byte(0x40,0x62);
19409                                           ! Debug: list int = const $62 (used reg = )
19410 49B5           B8                   0062  mov	ax,*$62
19411 49B8           50                         push	ax
19412                                           ! Debug: list int = const $40 (used reg = )
19413 49B9           B8                   0040  mov	ax,*$40
19414 49BC           50                         push	ax
19415                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19416 49BD           E8         31CD            call	_read_byte
19417 49C0           83C4                   04  add	sp,*4
19418                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19419 49C3           8846         10            mov	$10[bp],al
19420                                           !BCC_EOS
19421                                           ! 2281  if(rlr>=nbrows)rlr=nbrows-1;
19422                       000049C6            .CF:
19423                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19424 49C6           8A46         0C            mov	al,$C[bp]
19425 49C9           30E4                       xor	ah,ah
19426 49CB           3B46         F6            cmp	ax,-$A[bp]
19427 49CE           72           07            jb  	.D1
19428                       000049D0            .D2:
19429                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19430 49D0           8B46         F6            mov	ax,-$A[bp]
19431                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19432 49D3           48                         dec	ax
19433 49D4           8846         0C            mov	$C[bp],al
19434                                           !BCC_EOS
19435                                           ! 2282  if(clr>=nbcols)clr=nbcols-1;
19436                       000049D7            .D1:
19437                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19438 49D7           8A46         0E            mov	al,$E[bp]
19439 49DA           30E4                       xor	ah,ah
19440 49DC           3B46         F8            cmp	ax,-8[bp]
19441 49DF           72           07            jb  	.D3
19442                       000049E1            .D4:
19443                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19444 49E1           8B46         F8            mov	ax,-8[bp]
19445                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19446 49E4           48                         dec	ax
19447 49E5           8846         0E            mov	$E[bp],al
19448                                           !BCC_EOS
19449                                           ! 2283  if(nblines>nbrows)nblines=0;
19450                       000049E8            .D3:
19451                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19452 49E8           8A46         04            mov	al,4[bp]
19453 49EB           30E4                       xor	ah,ah
19454 49ED           3B46         F6            cmp	ax,-$A[bp]
19455 49F0           76           05            jbe 	.D5
19456                       000049F2            .D6:
19457                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19458 49F2           30C0                       xor	al,al
19459 49F4           8846         04            mov	4[bp],al
19460                                           !BCC_EOS
19461                                           ! 2284  cols=clr-cul+1;
19462                       000049F7            .D5:
19463                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19464 49F7           8A46         0E            mov	al,$E[bp]
19465 49FA           30E4                       xor	ah,ah
19466 49FC           2A46         0A            sub	al,$A[bp]
19467 49FF           80DC                   00  sbb	ah,*0
19468                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19469                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19470 4A02           40                         inc	ax
19471 4A03           8846         FB            mov	-5[bp],al
19472                                           !BCC_EOS
19473                                           ! 2285  if(vga_modes[line].class==0x00)
19474                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19475 4A06           8A46         FE            mov	al,-2[bp]
19476 4A09           30E4                       xor	ah,ah
19477 4A0B           B1                     03  mov	cl,*3
19478 4A0D           D3E0                       shl	ax,cl
19479 4A0F           89C3                       mov	bx,ax
19480 4A11           81C3                 01FD  add	bx,#_vga_modes
19481                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19482 4A15           8A47         01            mov	al,1[bx]
19483 4A18           84C0                       test	al,al
19484 4A1A         0F85         0250            bne 	.D7
19485                       00004A1E            .D8:
19486                                           ! 2286   {
19487                                           ! 2287    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19488                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19489 4A1E           8B46         F8            mov	ax,-8[bp]
19490 4A21           8B4E         F6            mov	cx,-$A[bp]
19491 4A24           F7E9                       imul	cx
19492                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19493 4A26           D1E0                       shl	ax,*1
19494                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19495 4A28           0C                     FF  or	al,#$FF
19496                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19497                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19498 4A2A           89C3                       mov	bx,ax
19499 4A2C           8A46         10            mov	al,$10[bp]
19500 4A2F           30E4                       xor	ah,ah
19501 4A31           93                         xchg	ax,bx
19502 4A32           40                         inc	ax
19503 4A33           89D9                       mov	cx,bx
19504 4A35           F7E9                       imul	cx
19505                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19506 4A37           8946         F2            mov	-$E[bp],ax
19507                                           !BCC_EOS
19508                                           ! 2288    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19509                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19510 4A3A           8A46         04            mov	al,4[bp]
19511 4A3D           84C0                       test	al,al
19512 4A3F           75           67            jne 	.D9
19513                       00004A41            .DE:
19514                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19515 4A41           8A46         08            mov	al,8[bp]
19516 4A44           84C0                       test	al,al
19517 4A46           75           60            jne 	.D9
19518                       00004A48            .DD:
19519                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19520 4A48           8A46         0A            mov	al,$A[bp]
19521 4A4B           84C0                       test	al,al
19522 4A4D           75           59            jne 	.D9
19523                       00004A4F            .DC:
19524                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19525 4A4F           8B46         F6            mov	ax,-$A[bp]
19526                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19527                                           ! Debug: expression subtree swapping
19528 4A52           48                         dec	ax
19529 4A53           50                         push	ax
19530 4A54           8A46         0C            mov	al,$C[bp]
19531 4A57           30E4                       xor	ah,ah
19532 4A59           3B46         F0            cmp	ax,-$10[bp]
19533 4A5C           8D66         F2            lea	sp,-$E[bp]
19534 4A5F           75           47            jne 	.D9
19535                       00004A61            .DB:
19536                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19537 4A61           8B46         F8            mov	ax,-8[bp]
19538                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19539                                           ! Debug: expression subtree swapping
19540 4A64           48                         dec	ax
19541 4A65           50                         push	ax
19542 4A66           8A46         0E            mov	al,$E[bp]
19543 4A69           30E4                       xor	ah,ah
19544 4A6B           3B46         F0            cmp	ax,-$10[bp]
19545 4A6E           8D66         F2            lea	sp,-$E[bp]
19546 4A71           75           35            jne 	.D9
19547                       00004A73            .DA:
19548                                           ! 2289     {
19549                                           ! 2290      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19550                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19551 4A73           8B46         F6            mov	ax,-$A[bp]
19552 4A76           8B4E         F8            mov	cx,-8[bp]
19553 4A79           F7E9                       imul	cx
19554                                           ! Debug: list unsigned int = ax+0 (used reg = )
19555 4A7B           50                         push	ax
19556                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19557 4A7C           8A46         06            mov	al,6[bp]
19558 4A7F           30E4                       xor	ah,ah
19559                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19560 4A81           B9                   0100  mov	cx,#$100
19561 4A84           F7E9                       imul	cx
19562                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19563                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19564 4A86           05                   0020  add	ax,*$20
19565 4A89           50                         push	ax
19566                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19567 4A8A           FF76         F2            push	-$E[bp]
19568                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19569 4A8D           8A46         FE            mov	al,-2[bp]
19570 4A90           30E4                       xor	ah,ah
19571 4A92           B1                     03  mov	cl,*3
19572 4A94           D3E0                       shl	ax,cl
19573 4A96           89C3                       mov	bx,ax
19574 4A98           81C3                 01FD  add	bx,#_vga_modes
19575                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19576 4A9C           FF77         04            push	4[bx]
19577                                           ! Debug: func () void = memsetw+0 (used reg = )
19578 4A9F           E8         3066            call	_memsetw
19579 4AA2           83C4                   08  add	sp,*8
19580                                           !BCC_EOS
19581                                           ! 2291     }
19582                                           ! 2292    else
19583                                           ! 2293     {
19584 4AA5           E9         01C3            br 	.DF
19585                       00004AA8            .D9:
19586                                           ! 2294      if(dir==1)
19587                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19588 4AA8           8A46         12            mov	al,$12[bp]
19589 4AAB           3C                     01  cmp	al,*1
19590 4AAD         0F85         00DC            bne 	.E0
19591                       00004AB1            .E1:
19592                                           ! 2295       {for(i=rul;i<=rlr;i++)
19593                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19594 4AB1           8A46         08            mov	al,8[bp]
19595 4AB4           30E4                       xor	ah,ah
19596 4AB6           8946         F4            mov	-$C[bp],ax
19597                                           !BCC_EOS
19598                                           !BCC_EOS
19599                                           ! 2296         {
19600 4AB9           E9         00C2            br 	.E4
19601                       00004ABC            .E5:
19602                                           ! 2297          if((i+nblines>rlr)||(nblines==0))
19603                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19604 4ABC           8B46         F4            mov	ax,-$C[bp]
19605 4ABF           0246         04            add	al,4[bp]
19606 4AC2           80D4                   00  adc	ah,*0
19607                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19608 4AC5           50                         push	ax
19609 4AC6           8A46         0C            mov	al,$C[bp]
19610 4AC9           30E4                       xor	ah,ah
19611 4ACB           3B46         F0            cmp	ax,-$10[bp]
19612 4ACE           8D66         F2            lea	sp,-$E[bp]
19613 4AD1           72           07            jb  	.E7
19614                       00004AD3            .E8:
19615                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19616 4AD3           8A46         04            mov	al,4[bp]
19617 4AD6           84C0                       test	al,al
19618 4AD8           75           42            jne 	.E6
19619                       00004ADA            .E7:
19620                                           ! 2298           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19621                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19622 4ADA           8A46         FB            mov	al,-5[bp]
19623 4ADD           30E4                       xor	ah,ah
19624 4ADF           50                         push	ax
19625                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19626 4AE0           8A46         06            mov	al,6[bp]
19627 4AE3           30E4                       xor	ah,ah
19628                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19629 4AE5           B9                   0100  mov	cx,#$100
19630 4AE8           F7E9                       imul	cx
19631                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19632                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19633 4AEA           05                   0020  add	ax,*$20
19634 4AED           50                         push	ax
19635                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19636 4AEE           8B46         F4            mov	ax,-$C[bp]
19637 4AF1           8B4E         F8            mov	cx,-8[bp]
19638 4AF4           F7E9                       imul	cx
19639                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19640 4AF6           0246         0A            add	al,$A[bp]
19641 4AF9           80D4                   00  adc	ah,*0
19642                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19643 4AFC           D1E0                       shl	ax,*1
19644                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19645                                           ! Debug: expression subtree swapping
19646 4AFE           0346         F2            add	ax,-$E[bp]
19647                                           ! Debug: list unsigned int = ax+0 (used reg = )
19648 4B01           50                         push	ax
19649                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19650 4B02           8A46         FE            mov	al,-2[bp]
19651 4B05           30E4                       xor	ah,ah
19652 4B07           B1                     03  mov	cl,*3
19653 4B09           D3E0                       shl	ax,cl
19654 4B0B           89C3                       mov	bx,ax
19655 4B0D           81C3                 01FD  add	bx,#_vga_modes
19656                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19657 4B11           FF77         04            push	4[bx]
19658                                           ! Debug: func () void = memsetw+0 (used reg = )
19659 4B14           E8         2FF1            call	_memsetw
19660 4B17           83C4                   08  add	sp,*8
19661                                           !BCC_EOS
19662                                           ! 2299          else
19663                                           ! 2300           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19664 4B1A           EB           5B            jmp .E9
19665                       00004B1C            .E6:
19666                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19667 4B1C           8A46         FB            mov	al,-5[bp]
19668 4B1F           30E4                       xor	ah,ah
19669 4B21           50                         push	ax
19670                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19671 4B22           8B46         F4            mov	ax,-$C[bp]
19672 4B25           0246         04            add	al,4[bp]
19673 4B28           80D4                   00  adc	ah,*0
19674                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19675 4B2B           8B4E         F8            mov	cx,-8[bp]
19676 4B2E           F7E9                       imul	cx
19677                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19678 4B30           0246         0A            add	al,$A[bp]
19679 4B33           80D4                   00  adc	ah,*0
19680                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19681 4B36           D1E0                       shl	ax,*1
19682                                           ! Debug: list unsigned int = ax+0 (used reg = )
19683 4B38           50                         push	ax
19684                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19685 4B39           8A46         FE            mov	al,-2[bp]
19686 4B3C           30E4                       xor	ah,ah
19687 4B3E           B1                     03  mov	cl,*3
19688 4B40           D3E0                       shl	ax,cl
19689 4B42           89C3                       mov	bx,ax
19690 4B44           81C3                 01FD  add	bx,#_vga_modes
19691                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19692 4B48           FF77         04            push	4[bx]
19693                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19694 4B4B           8B46         F4            mov	ax,-$C[bp]
19695 4B4E           8B4E         F8            mov	cx,-8[bp]
19696 4B51           F7E9                       imul	cx
19697                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19698 4B53           0246         0A            add	al,$A[bp]
19699 4B56           80D4                   00  adc	ah,*0
19700                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19701 4B59           D1E0                       shl	ax,*1
19702                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19703                                           ! Debug: expression subtree swapping
19704 4B5B           0346         F2            add	ax,-$E[bp]
19705                                           ! Debug: list unsigned int = ax+0 (used reg = )
19706 4B5E           50                         push	ax
19707                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19708 4B5F           8A46         FE            mov	al,-2[bp]
19709 4B62           30E4                       xor	ah,ah
19710 4B64           B1                     03  mov	cl,*3
19711 4B66           D3E0                       shl	ax,cl
19712 4B68           89C3                       mov	bx,ax
19713 4B6A           81C3                 01FD  add	bx,#_vga_modes
19714                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19715 4B6E           FF77         04            push	4[bx]
19716                                           ! Debug: func () void = memcpyw+0 (used reg = )
19717 4B71           E8         2FE9            call	_memcpyw
19718 4B74           83C4                   0A  add	sp,*$A
19719                                           !BCC_EOS
19720                                           ! 2301         }
19721                       00004B77            .E9:
19722                                           ! 2302       }
19723                       00004B77            .E3:
19724                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19725 4B77           8B46         F4            mov	ax,-$C[bp]
19726 4B7A           40                         inc	ax
19727 4B7B           8946         F4            mov	-$C[bp],ax
19728                       00004B7E            .E4:
19729                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19730 4B7E           8A46         0C            mov	al,$C[bp]
19731 4B81           30E4                       xor	ah,ah
19732 4B83           3B46         F4            cmp	ax,-$C[bp]
19733 4B86         0F83         FF32            bhis	.E5
19734                       00004B8A            .EA:
19735                       00004B8A            .E2:
19736                                           ! 2303      
19737                                           ! 2303 else
19738                                           ! 2304       {for(i=rlr;i>=rul;i--)
19739 4B8A           E9         00DE            br 	.EB
19740                       00004B8D            .E0:
19741                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19742 4B8D           8A46         0C            mov	al,$C[bp]
19743 4B90           30E4                       xor	ah,ah
19744 4B92           8946         F4            mov	-$C[bp],ax
19745                                           !BCC_EOS
19746                                           !BCC_EOS
19747                                           ! 2305         {
19748 4B95           E9         00C7            br 	.EE
19749                       00004B98            .EF:
19750                                           ! 2306          if((i<rul+nblines)||(nblines==0))
19751                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19752 4B98           8A46         08            mov	al,8[bp]
19753 4B9B           30E4                       xor	ah,ah
19754 4B9D           0246         04            add	al,4[bp]
19755 4BA0           80D4                   00  adc	ah,*0
19756                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19757 4BA3           3B46         F4            cmp	ax,-$C[bp]
19758 4BA6           77           07            ja  	.F1
19759                       00004BA8            .F2:
19760                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19761 4BA8           8A46         04            mov	al,4[bp]
19762 4BAB           84C0                       test	al,al
19763 4BAD           75           42            jne 	.F0
19764                       00004BAF            .F1:
19765                                           ! 2307           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19766                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19767 4BAF           8A46         FB            mov	al,-5[bp]
19768 4BB2           30E4                       xor	ah,ah
19769 4BB4           50                         push	ax
19770                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19771 4BB5           8A46         06            mov	al,6[bp]
19772 4BB8           30E4                       xor	ah,ah
19773                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19774 4BBA           B9                   0100  mov	cx,#$100
19775 4BBD           F7E9                       imul	cx
19776                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19777                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19778 4BBF           05                   0020  add	ax,*$20
19779 4BC2           50                         push	ax
19780                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19781 4BC3           8B46         F4            mov	ax,-$C[bp]
19782 4BC6           8B4E         F8            mov	cx,-8[bp]
19783 4BC9           F7E9                       imul	cx
19784                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19785 4BCB           0246         0A            add	al,$A[bp]
19786 4BCE           80D4                   00  adc	ah,*0
19787                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19788 4BD1           D1E0                       shl	ax,*1
19789                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19790                                           ! Debug: expression subtree swapping
19791 4BD3           0346         F2            add	ax,-$E[bp]
19792                                           ! Debug: list unsigned int = ax+0 (used reg = )
19793 4BD6           50                         push	ax
19794                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19795 4BD7           8A46         FE            mov	al,-2[bp]
19796 4BDA           30E4                       xor	ah,ah
19797 4BDC           B1                     03  mov	cl,*3
19798 4BDE           D3E0                       shl	ax,cl
19799 4BE0           89C3                       mov	bx,ax
19800 4BE2           81C3                 01FD  add	bx,#_vga_modes
19801                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19802 4BE6           FF77         04            push	4[bx]
19803                                           ! Debug: func () void = memsetw+0 (used reg = )
19804 4BE9           E8         2F1C            call	_memsetw
19805 4BEC           83C4                   08  add	sp,*8
19806                                           !BCC_EOS
19807                                           ! 2308          else
19808                                           ! 2309           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19809 4BEF           EB           5B            jmp .F3
19810                       00004BF1            .F0:
19811                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19812 4BF1           8A46         FB            mov	al,-5[bp]
19813 4BF4           30E4                       xor	ah,ah
19814 4BF6           50                         push	ax
19815                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19816 4BF7           8B46         F4            mov	ax,-$C[bp]
19817 4BFA           2A46         04            sub	al,4[bp]
19818 4BFD           80DC                   00  sbb	ah,*0
19819                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19820 4C00           8B4E         F8            mov	cx,-8[bp]
19821 4C03           F7E9                       imul	cx
19822                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19823 4C05           0246         0A            add	al,$A[bp]
19824 4C08           80D4                   00  adc	ah,*0
19825                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19826 4C0B           D1E0                       shl	ax,*1
19827                                           ! Debug: list unsigned int = ax+0 (used reg = )
19828 4C0D           50                         push	ax
19829                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19830 4C0E           8A46         FE            mov	al,-2[bp]
19831 4C11           30E4                       xor	ah,ah
19832 4C13           B1                     03  mov	cl,*3
19833 4C15           D3E0                       shl	ax,cl
19834 4C17           89C3                       mov	bx,ax
19835 4C19           81C3                 01FD  add	bx,#_vga_modes
19836                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19837 4C1D           FF77         04            push	4[bx]
19838                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19839 4C20           8B46         F4            mov	ax,-$C[bp]
19840 4C23           8B4E         F8            mov	cx,-8[bp]
19841 4C26           F7E9                       imul	cx
19842                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19843 4C28           0246         0A            add	al,$A[bp]
19844 4C2B           80D4                   00  adc	ah,*0
19845                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19846 4C2E           D1E0                       shl	ax,*1
19847                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19848                                           ! Debug: expression subtree swapping
19849 4C30           0346         F2            add	ax,-$E[bp]
19850                                           ! Debug: list unsigned int = ax+0 (used reg = )
19851 4C33           50                         push	ax
19852                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19853 4C34           8A46         FE            mov	al,-2[bp]
19854 4C37           30E4                       xor	ah,ah
19855 4C39           B1                     03  mov	cl,*3
19856 4C3B           D3E0                       shl	ax,cl
19857 4C3D           89C3                       mov	bx,ax
19858 4C3F           81C3                 01FD  add	bx,#_vga_modes
19859                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19860 4C43           FF77         04            push	4[bx]
19861                                           ! Debug: func () void = memcpyw+0 (used reg = )
19862 4C46           E8         2F14            call	_memcpyw
19863 4C49           83C4                   0A  add	sp,*$A
19864                                           !BCC_EOS
19865                                           ! 2310          if (i>rlr) break;
19866                       00004C4C            .F3:
19867                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19868 4C4C           8A46         0C            mov	al,$C[bp]
19869 4C4F           30E4                       xor	ah,ah
19870 4C51           3B46         F4            cmp	ax,-$C[bp]
19871 4C54           73           02            jae 	.F4
19872                       00004C56            .F5:
19873 4C56           EB           13            jmp .EC
19874                                           !BCC_EOS
19875                                           ! 2311         }
19876                       00004C58            .F4:
19877                                           ! 2312       }
19878                       00004C58            .ED:
19879                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19880 4C58           8B46         F4            mov	ax,-$C[bp]
19881 4C5B           48                         dec	ax
19882 4C5C           8946         F4            mov	-$C[bp],ax
19883                       00004C5F            .EE:
19884                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19885 4C5F           8A46         08            mov	al,8[bp]
19886 4C62           30E4                       xor	ah,ah
19887 4C64           3B46         F4            cmp	ax,-$C[bp]
19888 4C67         0F86         FF2D            blos	.EF
19889                       00004C6B            .F6:
19890                       00004C6B            .EC:
19891                                           ! 2313     }
19892                       00004C6B            .EB:
19893                                           ! 2314   }
19894                       00004C6B            .DF:
19895                                           ! 2315  else
19896                                           ! 2316   {
19897 4C6B           E9         03D5            br 	.F7
19898                       00004C6E            .D7:
19899                                           ! 2317    cheight=video_param_table[line_to_vpti[line]].cheight;
19900                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19901 4C6E           8A46         FE            mov	al,-2[bp]
19902 4C71           30E4                       xor	ah,ah
19903 4C73           89C3                       mov	bx,ax
19904                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19905 4C75           8A87       027D            mov	al,_line_to_vpti[bx]
19906 4C79           30E4                       xor	ah,ah
19907 4C7B           B1                     06  mov	cl,*6
19908 4C7D           D3E0                       shl	ax,cl
19909 4C7F           89C3                       mov	bx,ax
19910 4C81           81C3                 0291  add	bx,#_video_param_table
19911                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19912 4C85           8A47         02            mov	al,2[bx]
19913 4C88           8846         FD            mov	-3[bp],al
19914                                           !BCC_EOS
19915                                           ! 2318    switch(vga_modes[line].memmodel)
19916                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19917 4C8B           8A46         FE            mov	al,-2[bp]
19918 4C8E           30E4                       xor	ah,ah
19919 4C90           B1                     03  mov	cl,*3
19920 4C92           D3E0                       shl	ax,cl
19921 4C94           89C3                       mov	bx,ax
19922 4C96           81C3                 01FD  add	bx,#_vga_modes
19923 4C9A           8A47         02            mov	al,2[bx]
19924                                           ! 2319     {
19925 4C9D           E9         0391            br 	.FA
19926                                           ! 2320      case 0x04:
19927                                           ! 2321      case 0x03:
19928                       00004CA0            .FB:
19929                                           ! 2322        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19930                       00004CA0            .FC:
19931                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19932 4CA0           8A46         04            mov	al,4[bp]
19933 4CA3           84C0                       test	al,al
19934 4CA5         0F85         0089            bne 	.FD
19935                       00004CA9            .102:
19936                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19937 4CA9           8A46         08            mov	al,8[bp]
19938 4CAC           84C0                       test	al,al
19939 4CAE         0F85         0080            bne 	.FD
19940                       00004CB2            .101:
19941                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19942 4CB2           8A46         0A            mov	al,$A[bp]
19943 4CB5           84C0                       test	al,al
19944 4CB7           75           79            jne 	.FD
19945                       00004CB9            .100:
19946                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19947 4CB9           8B46         F6            mov	ax,-$A[bp]
19948                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19949                                           ! Debug: expression subtree swapping
19950 4CBC           48                         dec	ax
19951 4CBD           50                         push	ax
19952 4CBE           8A46         0C            mov	al,$C[bp]
19953 4CC1           30E4                       xor	ah,ah
19954 4CC3           3B46         F0            cmp	ax,0+..FFFC[bp]
19955 4CC6           8D66         F2            lea	sp,2+..FFFC[bp]
19956 4CC9           75           67            jne 	.FD
19957                       00004CCB            .FF:
19958                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19959 4CCB           8B46         F8            mov	ax,-8[bp]
19960                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19961                                           ! Debug: expression subtree swapping
19962 4CCE           48                         dec	ax
19963 4CCF           50                         push	ax
19964 4CD0           8A46         0E            mov	al,$E[bp]
19965 4CD3           30E4                       xor	ah,ah
19966 4CD5           3B46         F0            cmp	ax,0+..FFFC[bp]
19967 4CD8           8D66         F2            lea	sp,2+..FFFC[bp]
19968 4CDB           75           55            jne 	.FD
19969                       00004CDD            .FE:
19970                                           ! 2323         {
19971                                           ! 2324          outw(0x3ce, 0x0205);
19972                                           ! Debug: list int = const $205 (used reg = )
19973 4CDD           B8                   0205  mov	ax,#$205
19974 4CE0           50                         push	ax
19975                                           ! Debug: list int = const $3CE (used reg = )
19976 4CE1           B8                   03CE  mov	ax,#$3CE
19977 4CE4           50                         push	ax
19978                                           ! Debug: func () void = outw+0 (used reg = )
19979 4CE5           E8         2F21            call	_outw
19980 4CE8           83C4                   04  add	sp,*4
19981                                           !BCC_EOS
19982                                           ! 2325          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19983                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19984 4CEB           8B46         F6            mov	ax,-$A[bp]
19985 4CEE           8B4E         F8            mov	cx,-8[bp]
19986 4CF1           F7E9                       imul	cx
19987                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19988 4CF3           89C3                       mov	bx,ax
19989 4CF5           8A46         FD            mov	al,-3[bp]
19990 4CF8           30E4                       xor	ah,ah
19991 4CFA           93                         xchg	ax,bx
19992 4CFB           89D9                       mov	cx,bx
19993 4CFD           F7E9                       imul	cx
19994                                           ! Debug: list unsigned int = ax+0 (used reg = )
19995 4CFF           50                         push	ax
19996                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19997 4D00           8A46         06            mov	al,6[bp]
19998 4D03           30E4                       xor	ah,ah
19999 4D05           50                         push	ax
20000                                           ! Debug: list int = const 0 (used reg = )
20001 4D06           31C0                       xor	ax,ax
20002 4D08           50                         push	ax
20003                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20004 4D09           8A46         FE            mov	al,-2[bp]
20005 4D0C           30E4                       xor	ah,ah
20006 4D0E           B1                     03  mov	cl,*3
20007 4D10           D3E0                       shl	ax,cl
20008 4D12           89C3                       mov	bx,ax
20009 4D14           81C3                 01FD  add	bx,#_vga_modes
20010                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20011 4D18           FF77         04            push	4[bx]
20012                                           ! Debug: func () void = memsetb+0 (used reg = )
20013 4D1B           E8         2DC5            call	_memsetb
20014 4D1E           83C4                   08  add	sp,*8
20015                                           !BCC_EOS
20016                                           ! 2326          outw(0x3ce, 0x0005);
20017                                           ! Debug: list int = const 5 (used reg = )
20018 4D21           B8                   0005  mov	ax,*5
20019 4D24           50                         push	ax
20020                                           ! Debug: list int = const $3CE (used reg = )
20021 4D25           B8                   03CE  mov	ax,#$3CE
20022 4D28           50                         push	ax
20023                                           ! Debug: func () void = outw+0 (used reg = )
20024 4D29           E8         2EDD            call	_outw
20025 4D2C           83C4                   04  add	sp,*4
20026                                           !BCC_EOS
20027                                           ! 2327         }
20028                                           ! 2328        else
20029                                           ! 2329         {
20030 4D2F           E9         0121            br 	.103
20031                       00004D32            .FD:
20032                                           ! 2330          if(dir==1)
20033                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20034 4D32           8A46         12            mov	al,$12[bp]
20035 4D35           3C                     01  cmp	al,*1
20036 4D37         0F85         008A            bne 	.104
20037                       00004D3B            .105:
20038                                           ! 2331           {for(i=rul;i<=rlr;i++)
20039                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20040 4D3B           8A46         08            mov	al,8[bp]
20041 4D3E           30E4                       xor	ah,ah
20042 4D40           8946         F4            mov	-$C[bp],ax
20043                                           !BCC_EOS
20044                                           !BCC_EOS
20045                                           ! 2332             {
20046 4D43           EB           73            jmp .108
20047                       00004D45            .109:
20048                                           ! 2333              if((i+nblines>rlr)||(nblines==0))
20049                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20050 4D45           8B46         F4            mov	ax,-$C[bp]
20051 4D48           0246         04            add	al,4[bp]
20052 4D4B           80D4                   00  adc	ah,*0
20053                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20054 4D4E           50                         push	ax
20055 4D4F           8A46         0C            mov	al,$C[bp]
20056 4D52           30E4                       xor	ah,ah
20057 4D54           3B46         F0            cmp	ax,0+..FFFC[bp]
20058 4D57           8D66         F2            lea	sp,2+..FFFC[bp]
20059 4D5A           72           07            jb  	.10B
20060                       00004D5C            .10C:
20061                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20062 4D5C           8A46         04            mov	al,4[bp]
20063 4D5F           84C0                       test	al,al
20064 4D61           75           26            jne 	.10A
20065                       00004D63            .10B:
20066                                           ! 2334               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20067                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20068 4D63           8A46         06            mov	al,6[bp]
20069 4D66           30E4                       xor	ah,ah
20070 4D68           50                         push	ax
20071                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20072 4D69           8A46         FD            mov	al,-3[bp]
20073 4D6C           30E4                       xor	ah,ah
20074 4D6E           50                         push	ax
20075                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20076 4D6F           FF76         F8            push	-8[bp]
20077                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20078 4D72           8A46         FB            mov	al,-5[bp]
20079 4D75           30E4                       xor	ah,ah
20080 4D77           50                         push	ax
20081                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20082 4D78           FF76         F4            push	-$C[bp]
20083                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20084 4D7B           8A46         0A            mov	al,$A[bp]
20085 4D7E           30E4                       xor	ah,ah
20086 4D80           50                         push	ax
20087                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20088 4D81           E8         F96B            call	_vgamem_fill_pl4
20089 4D84           83C4                   0C  add	sp,*$C
20090                                           !BCC_EOS
20091                                           ! 2335              else
20092                                           ! 2336               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20093 4D87           EB           28            jmp .10D
20094                       00004D89            .10A:
20095                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20096 4D89           8A46         FD            mov	al,-3[bp]
20097 4D8C           30E4                       xor	ah,ah
20098 4D8E           50                         push	ax
20099                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20100 4D8F           FF76         F8            push	-8[bp]
20101                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20102 4D92           8A46         FB            mov	al,-5[bp]
20103 4D95           30E4                       xor	ah,ah
20104 4D97           50                         push	ax
20105                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20106 4D98           FF76         F4            push	-$C[bp]
20107                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20108 4D9B           8B46         F4            mov	ax,-$C[bp]
20109 4D9E           0246         04            add	al,4[bp]
20110 4DA1           80D4                   00  adc	ah,*0
20111                                           ! Debug: list unsigned int = ax+0 (used reg = )
20112 4DA4           50                         push	ax
20113                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20114 4DA5           8A46         0A            mov	al,$A[bp]
20115 4DA8           30E4                       xor	ah,ah
20116 4DAA           50                         push	ax
20117                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20118 4DAB           E8         F87F            call	_vgamem_copy_pl4
20119 4DAE           83C4                   0C  add	sp,*$C
20120                                           !BCC_EOS
20121                                           ! 2337             }
20122                       00004DB1            .10D:
20123                                           ! 2338           }
20124                       00004DB1            .107:
20125                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20126 4DB1           8B46         F4            mov	ax,-$C[bp]
20127 4DB4           40                         inc	ax
20128 4DB5           8946         F4            mov	-$C[bp],ax
20129                       00004DB8            .108:
20130                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20131 4DB8           8A46         0C            mov	al,$C[bp]
20132 4DBB           30E4                       xor	ah,ah
20133 4DBD           3B46         F4            cmp	ax,-$C[bp]
20134 4DC0           73           83            jae	.109
20135                       00004DC2            .10E:
20136                       00004DC2            .106:
20137                                           ! 2339          else
20138                                           ! 2340           {for(i=rlr;i>=rul;i--)
20139 4DC2           E9         008E            br 	.10F
20140                       00004DC5            .104:
20141                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20142 4DC5           8A46         0C            mov	al,$C[bp]
20143 4DC8           30E4                       xor	ah,ah
20144 4DCA           8946         F4            mov	-$C[bp],ax
20145                                           !BCC_EOS
20146                                           !BCC_EOS
20147                                           ! 2341             {
20148 4DCD           EB           78            jmp .112
20149                       00004DCF            .113:
20150                                           ! 2342              if((i<rul+nblines)||(nblines==0))
20151                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20152 4DCF           8A46         08            mov	al,8[bp]
20153 4DD2           30E4                       xor	ah,ah
20154 4DD4           0246         04            add	al,4[bp]
20155 4DD7           80D4                   00  adc	ah,*0
20156                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20157 4DDA           3B46         F4            cmp	ax,-$C[bp]
20158 4DDD           77           07            ja  	.115
20159                       00004DDF            .116:
20160                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20161 4DDF           8A46         04            mov	al,4[bp]
20162 4DE2           84C0                       test	al,al
20163 4DE4           75           26            jne 	.114
20164                       00004DE6            .115:
20165                                           ! 2343               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20166                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20167 4DE6           8A46         06            mov	al,6[bp]
20168 4DE9           30E4                       xor	ah,ah
20169 4DEB           50                         push	ax
20170                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20171 4DEC           8A46         FD            mov	al,-3[bp]
20172 4DEF           30E4                       xor	ah,ah
20173 4DF1           50                         push	ax
20174                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20175 4DF2           FF76         F8            push	-8[bp]
20176                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20177 4DF5           8A46         FB            mov	al,-5[bp]
20178 4DF8           30E4                       xor	ah,ah
20179 4DFA           50                         push	ax
20180                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20181 4DFB           FF76         F4            push	-$C[bp]
20182                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20183 4DFE           8A46         0A            mov	al,$A[bp]
20184 4E01           30E4                       xor	ah,ah
20185 4E03           50                         push	ax
20186                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20187 4E04           E8         F8E8            call	_vgamem_fill_pl4
20188 4E07           83C4                   0C  add	sp,*$C
20189                                           !BCC_EOS
20190                                           ! 2344              else
20191                                           ! 2345               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
20192 4E0A           EB           28            jmp .117
20193                       00004E0C            .114:
20194                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20195 4E0C           8A46         FD            mov	al,-3[bp]
20196 4E0F           30E4                       xor	ah,ah
20197 4E11           50                         push	ax
20198                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20199 4E12           FF76         F8            push	-8[bp]
20200                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20201 4E15           8A46         FB            mov	al,-5[bp]
20202 4E18           30E4                       xor	ah,ah
20203 4E1A           50                         push	ax
20204                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20205 4E1B           8B46         F4            mov	ax,-$C[bp]
20206 4E1E           2A46         04            sub	al,4[bp]
20207 4E21           80DC                   00  sbb	ah,*0
20208                                           ! Debug: list unsigned int = ax+0 (used reg = )
20209 4E24           50                         push	ax
20210                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20211 4E25           FF76         F4            push	-$C[bp]
20212                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20213 4E28           8A46         0A            mov	al,$A[bp]
20214 4E2B           30E4                       xor	ah,ah
20215 4E2D           50                         push	ax
20216                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20217 4E2E           E8         F7FC            call	_vgamem_copy_pl4
20218 4E31           83C4                   0C  add	sp,*$C
20219                                           !BCC_EOS
20220                                           ! 2346              if (i>rlr) break;
20221                       00004E34            .117:
20222                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20223 4E34           8A46         0C            mov	al,$C[bp]
20224 4E37           30E4                       xor	ah,ah
20225 4E39           3B46         F4            cmp	ax,-$C[bp]
20226 4E3C           73           02            jae 	.118
20227                       00004E3E            .119:
20228 4E3E           EB           13            jmp .110
20229                                           !BCC_EOS
20230                                           ! 2347             }
20231                       00004E40            .118:
20232                                           ! 2348           }
20233                       00004E40            .111:
20234                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20235 4E40           8B46         F4            mov	ax,-$C[bp]
20236 4E43           48                         dec	ax
20237 4E44           8946         F4            mov	-$C[bp],ax
20238                       00004E47            .112:
20239                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20240 4E47           8A46         08            mov	al,8[bp]
20241 4E4A           30E4                       xor	ah,ah
20242 4E4C           3B46         F4            cmp	ax,-$C[bp]
20243 4E4F         0F86         FF7C            blos	.113
20244                       00004E53            .11A:
20245                       00004E53            .110:
20246                                           ! 2349         }
20247                       00004E53            .10F:
20248                                           ! 2350        break;
20249                       00004E53            .103:
20250 4E53           E9         01ED            br 	.F8
20251                                           !BCC_EOS
20252                                           ! 2351      case 0x02:
20253                                           ! 2352        bpp=vga_modes[line].pixbits;
20254                       00004E56            .11B:
20255                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20256 4E56           8A46         FE            mov	al,-2[bp]
20257 4E59           30E4                       xor	ah,ah
20258 4E5B           B1                     03  mov	cl,*3
20259 4E5D           D3E0                       shl	ax,cl
20260 4E5F           89C3                       mov	bx,ax
20261 4E61           81C3                 01FD  add	bx,#_vga_modes
20262                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20263 4E65           8A47         03            mov	al,3[bx]
20264 4E68           8846         FC            mov	-4[bp],al
20265                                           !BCC_EOS
20266                                           ! 2353        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20267                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20268 4E6B           8A46         04            mov	al,4[bp]
20269 4E6E           84C0                       test	al,al
20270 4E70           75           77            jne 	.11C
20271                       00004E72            .121:
20272                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20273 4E72           8A46         08            mov	al,8[bp]
20274 4E75           84C0                       test	al,al
20275 4E77           75           70            jne 	.11C
20276                       00004E79            .120:
20277                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20278 4E79           8A46         0A            mov	al,$A[bp]
20279 4E7C           84C0                       test	al,al
20280 4E7E           75           69            jne 	.11C
20281                       00004E80            .11F:
20282                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20283 4E80           8B46         F6            mov	ax,-$A[bp]
20284                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20285                                           ! Debug: expression subtree swapping
20286 4E83           48                         dec	ax
20287 4E84           50                         push	ax
20288 4E85           8A46         0C            mov	al,$C[bp]
20289 4E88           30E4                       xor	ah,ah
20290 4E8A           3B46         F0            cmp	ax,0+..FFFC[bp]
20291 4E8D           8D66         F2            lea	sp,2+..FFFC[bp]
20292 4E90           75           57            jne 	.11C
20293                       00004E92            .11E:
20294                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20295 4E92           8B46         F8            mov	ax,-8[bp]
20296                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20297                                           ! Debug: expression subtree swapping
20298 4E95           48                         dec	ax
20299 4E96           50                         push	ax
20300 4E97           8A46         0E            mov	al,$E[bp]
20301 4E9A           30E4                       xor	ah,ah
20302 4E9C           3B46         F0            cmp	ax,0+..FFFC[bp]
20303 4E9F           8D66         F2            lea	sp,2+..FFFC[bp]
20304 4EA2           75           45            jne 	.11C
20305                       00004EA4            .11D:
20306                                           ! 2354         {
20307                                           ! 2355          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20308                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20309 4EA4           8B46         F6            mov	ax,-$A[bp]
20310 4EA7           8B4E         F8            mov	cx,-8[bp]
20311 4EAA           F7E9                       imul	cx
20312                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20313 4EAC           89C3                       mov	bx,ax
20314 4EAE           8A46         FD            mov	al,-3[bp]
20315 4EB1           30E4                       xor	ah,ah
20316 4EB3           93                         xchg	ax,bx
20317 4EB4           89D9                       mov	cx,bx
20318 4EB6           F7E9                       imul	cx
20319                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20320 4EB8           89C3                       mov	bx,ax
20321 4EBA           8A46         FC            mov	al,-4[bp]
20322 4EBD           30E4                       xor	ah,ah
20323 4EBF           93                         xchg	ax,bx
20324 4EC0           89D9                       mov	cx,bx
20325 4EC2           F7E9                       imul	cx
20326                                           ! Debug: list unsigned int = ax+0 (used reg = )
20327 4EC4           50                         push	ax
20328                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20329 4EC5           8A46         06            mov	al,6[bp]
20330 4EC8           30E4                       xor	ah,ah
20331 4ECA           50                         push	ax
20332                                           ! Debug: list int = const 0 (used reg = )
20333 4ECB           31C0                       xor	ax,ax
20334 4ECD           50                         push	ax
20335                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20336 4ECE           8A46         FE            mov	al,-2[bp]
20337 4ED1           30E4                       xor	ah,ah
20338 4ED3           B1                     03  mov	cl,*3
20339 4ED5           D3E0                       shl	ax,cl
20340 4ED7           89C3                       mov	bx,ax
20341 4ED9           81C3                 01FD  add	bx,#_vga_modes
20342                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20343 4EDD           FF77         04            push	4[bx]
20344                                           ! Debug: func () void = memsetb+0 (used reg = )
20345 4EE0           E8         2C00            call	_memsetb
20346 4EE3           83C4                   08  add	sp,*8
20347                                           !BCC_EOS
20348                                           ! 2356         }
20349                                           ! 2357        else
20350                                           ! 2358         {
20351 4EE6           E9         0144            br 	.122
20352                       00004EE9            .11C:
20353                                           ! 2359          if(bpp==2)
20354                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20355 4EE9           8A46         FC            mov	al,-4[bp]
20356 4EEC           3C                     02  cmp	al,*2
20357 4EEE           75           1C            jne 	.123
20358                       00004EF0            .124:
20359                                           ! 2360           {
20360                                           ! 2361            cul<<=1;
20361                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20362 4EF0           8A46         0A            mov	al,$A[bp]
20363 4EF3           30E4                       xor	ah,ah
20364 4EF5           D1E0                       shl	ax,*1
20365 4EF7           8846         0A            mov	$A[bp],al
20366                                           !BCC_EOS
20367                                           ! 2362            cols<<=1;
20368                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20369 4EFA           8A46         FB            mov	al,-5[bp]
20370 4EFD           30E4                       xor	ah,ah
20371 4EFF           D1E0                       shl	ax,*1
20372 4F01           8846         FB            mov	-5[bp],al
20373                                           !BCC_EOS
20374                                           ! 2363            nbcols<<=1;
20375                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20376 4F04           8B46         F8            mov	ax,-8[bp]
20377 4F07           D1E0                       shl	ax,*1
20378 4F09           8946         F8            mov	-8[bp],ax
20379                                           !BCC_EOS
20380                                           ! 2364           }
20381                                           ! 2365          if(dir==1)
20382                       00004F0C            .123:
20383                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20384 4F0C           8A46         12            mov	al,$12[bp]
20385 4F0F           3C                     01  cmp	al,*1
20386 4F11         0F85         008A            bne 	.125
20387                       00004F15            .126:
20388                                           ! 2366           {for(i=rul;i<=rlr;i++)
20389                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20390 4F15           8A46         08            mov	al,8[bp]
20391 4F18           30E4                       xor	ah,ah
20392 4F1A           8946         F4            mov	-$C[bp],ax
20393                                           !BCC_EOS
20394                                           !BCC_EOS
20395                                           ! 2367             {
20396 4F1D           EB           73            jmp .129
20397                       00004F1F            .12A:
20398                                           ! 2368              if((i+nblines>rlr)||(nblines==0))
20399                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20400 4F1F           8B46         F4            mov	ax,-$C[bp]
20401 4F22           0246         04            add	al,4[bp]
20402 4F25           80D4                   00  adc	ah,*0
20403                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20404 4F28           50                         push	ax
20405 4F29           8A46         0C            mov	al,$C[bp]
20406 4F2C           30E4                       xor	ah,ah
20407 4F2E           3B46         F0            cmp	ax,0+..FFFC[bp]
20408 4F31           8D66         F2            lea	sp,2+..FFFC[bp]
20409 4F34           72           07            jb  	.12C
20410                       00004F36            .12D:
20411                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20412 4F36           8A46         04            mov	al,4[bp]
20413 4F39           84C0                       test	al,al
20414 4F3B           75           26            jne 	.12B
20415                       00004F3D            .12C:
20416                                           ! 2369               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20417                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20418 4F3D           8A46         06            mov	al,6[bp]
20419 4F40           30E4                       xor	ah,ah
20420 4F42           50                         push	ax
20421                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20422 4F43           8A46         FD            mov	al,-3[bp]
20423 4F46           30E4                       xor	ah,ah
20424 4F48           50                         push	ax
20425                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20426 4F49           FF76         F8            push	-8[bp]
20427                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20428 4F4C           8A46         FB            mov	al,-5[bp]
20429 4F4F           30E4                       xor	ah,ah
20430 4F51           50                         push	ax
20431                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20432 4F52           FF76         F4            push	-$C[bp]
20433                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20434 4F55           8A46         0A            mov	al,$A[bp]
20435 4F58           30E4                       xor	ah,ah
20436 4F5A           50                         push	ax
20437                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20438 4F5B           E8         F92E            call	_vgamem_fill_cga
20439 4F5E           83C4                   0C  add	sp,*$C
20440                                           !BCC_EOS
20441                                           ! 2370              else
20442                                           ! 2371               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20443 4F61           EB           28            jmp .12E
20444                       00004F63            .12B:
20445                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20446 4F63           8A46         FD            mov	al,-3[bp]
20447 4F66           30E4                       xor	ah,ah
20448 4F68           50                         push	ax
20449                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20450 4F69           FF76         F8            push	-8[bp]
20451                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20452 4F6C           8A46         FB            mov	al,-5[bp]
20453 4F6F           30E4                       xor	ah,ah
20454 4F71           50                         push	ax
20455                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20456 4F72           FF76         F4            push	-$C[bp]
20457                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20458 4F75           8B46         F4            mov	ax,-$C[bp]
20459 4F78           0246         04            add	al,4[bp]
20460 4F7B           80D4                   00  adc	ah,*0
20461                                           ! Debug: list unsigned int = ax+0 (used reg = )
20462 4F7E           50                         push	ax
20463                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20464 4F7F           8A46         0A            mov	al,$A[bp]
20465 4F82           30E4                       xor	ah,ah
20466 4F84           50                         push	ax
20467                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20468 4F85           E8         F7F2            call	_vgamem_copy_cga
20469 4F88           83C4                   0C  add	sp,*$C
20470                                           !BCC_EOS
20471                                           ! 2372             }
20472                       00004F8B            .12E:
20473                                           ! 2373           }
20474                       00004F8B            .128:
20475                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20476 4F8B           8B46         F4            mov	ax,-$C[bp]
20477 4F8E           40                         inc	ax
20478 4F8F           8946         F4            mov	-$C[bp],ax
20479                       00004F92            .129:
20480                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20481 4F92           8A46         0C            mov	al,$C[bp]
20482 4F95           30E4                       xor	ah,ah
20483 4F97           3B46         F4            cmp	ax,-$C[bp]
20484 4F9A           73           83            jae	.12A
20485                       00004F9C            .12F:
20486                       00004F9C            .127:
20487                                           ! 2374          else
20488                                           ! 2375           {for(
20489 4F9C           E9         008E            br 	.130
20490                       00004F9F            .125:
20491                                           ! 2375 i=rlr;i>=rul;i--)
20492                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20493 4F9F           8A46         0C            mov	al,$C[bp]
20494 4FA2           30E4                       xor	ah,ah
20495 4FA4           8946         F4            mov	-$C[bp],ax
20496                                           !BCC_EOS
20497                                           !BCC_EOS
20498                                           ! 2376             {
20499 4FA7           EB           78            jmp .133
20500                       00004FA9            .134:
20501                                           ! 2377              if((i<rul+nblines)||(nblines==0))
20502                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20503 4FA9           8A46         08            mov	al,8[bp]
20504 4FAC           30E4                       xor	ah,ah
20505 4FAE           0246         04            add	al,4[bp]
20506 4FB1           80D4                   00  adc	ah,*0
20507                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20508 4FB4           3B46         F4            cmp	ax,-$C[bp]
20509 4FB7           77           07            ja  	.136
20510                       00004FB9            .137:
20511                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20512 4FB9           8A46         04            mov	al,4[bp]
20513 4FBC           84C0                       test	al,al
20514 4FBE           75           26            jne 	.135
20515                       00004FC0            .136:
20516                                           ! 2378               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20517                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20518 4FC0           8A46         06            mov	al,6[bp]
20519 4FC3           30E4                       xor	ah,ah
20520 4FC5           50                         push	ax
20521                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20522 4FC6           8A46         FD            mov	al,-3[bp]
20523 4FC9           30E4                       xor	ah,ah
20524 4FCB           50                         push	ax
20525                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20526 4FCC           FF76         F8            push	-8[bp]
20527                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20528 4FCF           8A46         FB            mov	al,-5[bp]
20529 4FD2           30E4                       xor	ah,ah
20530 4FD4           50                         push	ax
20531                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20532 4FD5           FF76         F4            push	-$C[bp]
20533                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20534 4FD8           8A46         0A            mov	al,$A[bp]
20535 4FDB           30E4                       xor	ah,ah
20536 4FDD           50                         push	ax
20537                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20538 4FDE           E8         F8AB            call	_vgamem_fill_cga
20539 4FE1           83C4                   0C  add	sp,*$C
20540                                           !BCC_EOS
20541                                           ! 2379              else
20542                                           ! 2380               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20543 4FE4           EB           28            jmp .138
20544                       00004FE6            .135:
20545                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20546 4FE6           8A46         FD            mov	al,-3[bp]
20547 4FE9           30E4                       xor	ah,ah
20548 4FEB           50                         push	ax
20549                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20550 4FEC           FF76         F8            push	-8[bp]
20551                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20552 4FEF           8A46         FB            mov	al,-5[bp]
20553 4FF2           30E4                       xor	ah,ah
20554 4FF4           50                         push	ax
20555                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20556 4FF5           8B46         F4            mov	ax,-$C[bp]
20557 4FF8           2A46         04            sub	al,4[bp]
20558 4FFB           80DC                   00  sbb	ah,*0
20559                                           ! Debug: list unsigned int = ax+0 (used reg = )
20560 4FFE           50                         push	ax
20561                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20562 4FFF           FF76         F4            push	-$C[bp]
20563                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20564 5002           8A46         0A            mov	al,$A[bp]
20565 5005           30E4                       xor	ah,ah
20566 5007           50                         push	ax
20567                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20568 5008           E8         F76F            call	_vgamem_copy_cga
20569 500B           83C4                   0C  add	sp,*$C
20570                                           !BCC_EOS
20571                                           ! 2381              if (i>rlr) break;
20572                       0000500E            .138:
20573                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20574 500E           8A46         0C            mov	al,$C[bp]
20575 5011           30E4                       xor	ah,ah
20576 5013           3B46         F4            cmp	ax,-$C[bp]
20577 5016           73           02            jae 	.139
20578                       00005018            .13A:
20579 5018           EB           13            jmp .131
20580                                           !BCC_EOS
20581                                           ! 2382             }
20582                       0000501A            .139:
20583                                           ! 2383           }
20584                       0000501A            .132:
20585                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20586 501A           8B46         F4            mov	ax,-$C[bp]
20587 501D           48                         dec	ax
20588 501E           8946         F4            mov	-$C[bp],ax
20589                       00005021            .133:
20590                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20591 5021           8A46         08            mov	al,8[bp]
20592 5024           30E4                       xor	ah,ah
20593 5026           3B46         F4            cmp	ax,-$C[bp]
20594 5029         0F86         FF7C            blos	.134
20595                       0000502D            .13B:
20596                       0000502D            .131:
20597                                           ! 2384         }
20598                       0000502D            .130:
20599                                           ! 2385        break;
20600                       0000502D            .122:
20601 502D           EB           14            jmp .F8
20602                                           !BCC_EOS
20603                                           ! 2386     }
20604                                           ! 2387   }
20605 502F           EB           12            jmp .F8
20606                       00005031            .FA:
20607 5031           2C                     02  sub	al,*2
20608 5033         0F84         FE1F            beq 	.11B
20609 5037           2C                     01  sub	al,*1
20610 5039         0F84         FC63            beq 	.FC
20611 503D           2C                     01  sub	al,*1
20612 503F         0F84         FC5D            beq 	.FB
20613                       00005043            .F8:
20614                       FFFFFFF0            ..FFFC	=	-$10
20615                                           ! 2388 }
20616                       00005043            .F7:
20617 5043           89EC                       mov	sp,bp
20618 5045           5D                         pop	bp
20619 5046           C3                         ret
20620                                           ! 2389 static void biosfn_read_char_attr (page,car)
20621                                           ! Register BX used in function biosfn_scroll
20622                                           ! 2390 Bit8u page;Bit16u *car;
20623                       00005047            _biosfn_read_char_attr:
20624                                           !BCC_EOS
20625                                           !BCC_EOS
20626                                           ! 2391 {Bit16u ss=get_SS();
20627 5047           55                         push	bp
20628 5048           89E5                       mov	bp,sp
20629 504A           4C                         dec	sp
20630 504B           4C                         dec	sp
20631                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20632 504C           E8         2BCA            call	_get_SS
20633                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20634 504F           8946         FE            mov	-2[bp],ax
20635                                           !BCC_EOS
20636                                           ! 2392  Bit8u xcurs,ycurs,mode,line;
20637                                           !BCC_EOS
20638                                           ! 2393  Bit16u nbcols,nbrows,address;
20639                                           !BCC_EOS
20640                                           ! 2394  Bit16u cursor,dummy;
20641                                           !BCC_EOS
20642                                           ! 2395  mode=read_byte(0x40,0x49);
20643 5052           83C4                   F2  add	sp,*-$E
20644                                           ! Debug: list int = const $49 (used reg = )
20645 5055           B8                   0049  mov	ax,*$49
20646 5058           50                         push	ax
20647                                           ! Debug: list int = const $40 (used reg = )
20648 5059           B8                   0040  mov	ax,*$40
20649 505C           50                         push	ax
20650                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20651 505D           E8         2B2D            call	_read_byte
20652 5060           83C4                   04  add	sp,*4
20653                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20654 5063           8846         FB            mov	-5[bp],al
20655                                           !BCC_EOS
20656                                           ! 2396  line=find_vga_entry(mode);
20657                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20658 5066           8A46         FB            mov	al,-5[bp]
20659 5069           30E4                       xor	ah,ah
20660 506B           50                         push	ax
20661                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20662 506C           E8         2A32            call	_find_vga_entry
20663 506F           44                         inc	sp
20664 5070           44                         inc	sp
20665                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20666 5071           8846         FA            mov	-6[bp],al
20667                                           !BCC_EOS
20668                                           ! 2397  if(line==0xFF)return;
20669                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20670 5074           8A46         FA            mov	al,-6[bp]
20671 5077           3C                     FF  cmp	al,#$FF
20672 5079           75           04            jne 	.13C
20673                       0000507B            .13D:
20674 507B           89EC                       mov	sp,bp
20675 507D           5D                         pop	bp
20676 507E           C3                         ret
20677                                           !BCC_EOS
20678                                           ! 2398  biosfn_get_cursor_pos(page,&dummy,&cursor);
20679                       0000507F            .13C:
20680                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20681 507F           8D5E         F2            lea	bx,-$E[bp]
20682 5082           53                         push	bx
20683                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20684 5083           8D5E         F0            lea	bx,-$10[bp]
20685 5086           53                         push	bx
20686                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20687 5087           8A46         04            mov	al,4[bp]
20688 508A           30E4                       xor	ah,ah
20689 508C           50                         push	ax
20690                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20691 508D           E8         F3B9            call	_biosfn_get_cursor_pos
20692 5090           83C4                   06  add	sp,*6
20693                                           !BCC_EOS
20694                                           ! 2399  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20695                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20696 5093           8A46         F2            mov	al,-$E[bp]
20697                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20698 5096           8846         FD            mov	-3[bp],al
20699                                           !BCC_EOS
20700                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20701 5099           8B46         F2            mov	ax,-$E[bp]
20702 509C           30C0                       xor	al,al
20703                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20704 509E           88E0                       mov	al,ah
20705 50A0           30E4                       xor	ah,ah
20706                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20707 50A2           8846         FC            mov	-4[bp],al
20708                                           !BCC_EOS
20709                                           ! 2400  nbrows=read_byte(0x40,0x84)+1;
20710                                           ! Debug: list int = const $84 (used reg = )
20711 50A5           B8                   0084  mov	ax,#$84
20712 50A8           50                         push	ax
20713                                           ! Debug: list int = const $40 (used reg = )
20714 50A9           B8                   0040  mov	ax,*$40
20715 50AC           50                         push	ax
20716                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20717 50AD           E8         2ADD            call	_read_byte
20718 50B0           83C4                   04  add	sp,*4
20719                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20720 50B3           30E4                       xor	ah,ah
20721                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20722 50B5           40                         inc	ax
20723 50B6           8946         F6            mov	-$A[bp],ax
20724                                           !BCC_EOS
20725                                           ! 2401  nbcols=read_word(0x40,0x4A);
20726                                           ! Debug: list int = const $4A (used reg = )
20727 50B9           B8                   004A  mov	ax,*$4A
20728 50BC           50                         push	ax
20729                                           ! Debug: list int = const $40 (used reg = )
20730 50BD           B8                   0040  mov	ax,*$40
20731 50C0           50                         push	ax
20732                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20733 50C1           E8         2ADC            call	_read_word
20734 50C4           83C4                   04  add	sp,*4
20735                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20736 50C7           8946         F8            mov	-8[bp],ax
20737                                           !BCC_EOS
20738                                           ! 2402  if(vga_modes[line].class==0x00)
20739                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20740 50CA           8A46         FA            mov	al,-6[bp]
20741 50CD           30E4                       xor	ah,ah
20742 50CF           B1                     03  mov	cl,*3
20743 50D1           D3E0                       shl	ax,cl
20744 50D3           89C3                       mov	bx,ax
20745 50D5           81C3                 01FD  add	bx,#_vga_modes
20746                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20747 50D9           8A47         01            mov	al,1[bx]
20748 50DC           84C0                       test	al,al
20749 50DE           75           5E            jne 	.13E
20750                       000050E0            .13F:
20751                                           ! 2403   {
20752                                           ! 2404    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20753                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20754 50E0           8A46         FC            mov	al,-4[bp]
20755 50E3           30E4                       xor	ah,ah
20756 50E5           8B4E         F8            mov	cx,-8[bp]
20757 50E8           F7E9                       imul	cx
20758                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20759                                           ! Debug: expression subtree swapping
20760 50EA           0246         FD            add	al,-3[bp]
20761 50ED           80D4                   00  adc	ah,*0
20762                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20763 50F0           D1E0                       shl	ax,*1
20764 50F2           50                         push	ax
20765                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20766 50F3           8B46         F8            mov	ax,-8[bp]
20767 50F6           8B4E         F6            mov	cx,-$A[bp]
20768 50F9           F7E9                       imul	cx
20769                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20770 50FB           D1E0                       shl	ax,*1
20771                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20772 50FD           0C                     FF  or	al,#$FF
20773                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20774                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20775 50FF           89C3                       mov	bx,ax
20776 5101           8A46         04            mov	al,4[bp]
20777 5104           30E4                       xor	ah,ah
20778 5106           93                         xchg	ax,bx
20779 5107           40                         inc	ax
20780 5108           89D9                       mov	cx,bx
20781 510A           F7E9                       imul	cx
20782                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20783 510C           0346         EE            add	ax,-$12[bp]
20784 510F           44                         inc	sp
20785 5110           44                         inc	sp
20786                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20787 5111           8946         F4            mov	-$C[bp],ax
20788                                           !BCC_EOS
20789                                           ! 2405    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20790                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20791 5114           FF76         F4            push	-$C[bp]
20792                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20793 5117           8A46         FA            mov	al,-6[bp]
20794 511A           30E4                       xor	ah,ah
20795 511C           B1                     03  mov	cl,*3
20796 511E           D3E0                       shl	ax,cl
20797 5120           89C3                       mov	bx,ax
20798 5122           81C3                 01FD  add	bx,#_vga_modes
20799                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20800 5126           FF77         04            push	4[bx]
20801                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20802 5129           E8         2A74            call	_read_word
20803 512C           83C4                   04  add	sp,*4
20804                                           ! Debug: list unsigned short = ax+0 (used reg = )
20805 512F           50                         push	ax
20806                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20807 5130           FF76         06            push	6[bp]
20808                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20809 5133           FF76         FE            push	-2[bp]
20810                                           ! Debug: func () void = write_word+0 (used reg = )
20811 5136           E8         2A92            call	_write_word
20812 5139           83C4                   06  add	sp,*6
20813                                           !BCC_EOS
20814                                           ! 2406   }
20815                                           ! 2407  else
20816                                           ! 2408   {
20817 513C           EB           00            jmp .140
20818                       0000513E            .13E:
20819                                           ! 2409   }
20820                                           ! 2410 }
20821                       0000513E            .140:
20822 513E           89EC                       mov	sp,bp
20823 5140           5D                         pop	bp
20824 5141           C3                         ret
20825                                           ! 2411 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20826                                           ! Register BX used in function biosfn_read_char_attr
20827                                           ! 2412 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20828                       00005142            _write_gfx_char_pl4:
20829                                           !BCC_EOS
20830                                           !BCC_EOS
20831                                           !BCC_EOS
20832                                           !BCC_EOS
20833                                           !BCC_EOS
20834                                           !BCC_EOS
20835                                           ! 2413 {
20836                                           ! 2414  Bit8u i,j,mask;
20837                                           !BCC_EOS
20838                                           ! 2415  Bit8u *fdata;
20839                                           !BCC_EOS
20840                                           ! 2416  Bit16u addr,dest,src;
20841                                           !BCC_EOS
20842                                           ! 2417  switch(cheight)
20843 5142           55                         push	bp
20844 5143           89E5                       mov	bp,sp
20845 5145           83C4                   F4  add	sp,*-$C
20846 5148           8A46         0E            mov	al,$E[bp]
20847                                           ! 2418   {case 14:
20848 514B           EB           18            jmp .143
20849                                           ! 2419     fdata = &vgafont14;
20850                       0000514D            .144:
20851                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20852 514D           BB                   1761  mov	bx,#_vgafont14
20853 5150           895E         FA            mov	-6[bp],bx
20854                                           !BCC_EOS
20855                                           ! 2420     break;
20856 5153           EB           1A            jmp .141
20857                                           !BCC_EOS
20858                                           ! 2421    case 16:
20859                                           ! 2422     fdata = &vgafont16;
20860                       00005155            .145:
20861                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20862 5155           BB                   2561  mov	bx,#_vgafont16
20863 5158           895E         FA            mov	-6[bp],bx
20864                                           !BCC_EOS
20865                                           ! 2423     break;
20866 515B           EB           12            jmp .141
20867                                           !BCC_EOS
20868                                           ! 2424    default:
20869                                           ! 2425     fdata = &vgafont8;
20870                       0000515D            .146:
20871                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20872 515D           BB                   0F61  mov	bx,#_vgafont8
20873 5160           895E         FA            mov	-6[bp],bx
20874                                           !BCC_EOS
20875                                           ! 2426   }
20876                                           ! 2427  addr=xcurs+ycurs*cheight*nbcols;
20877 5163           EB           0A            jmp .141
20878                       00005165            .143:
20879 5165           2C                     0E  sub	al,*$E
20880 5167           74           E4            je 	.144
20881 5169           2C                     02  sub	al,*2
20882 516B           74           E8            je 	.145
20883 516D           EB           EE            jmp	.146
20884                       0000516F            .141:
20885                       FFFFFFF2            ..FFFB	=	-$E
20886                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20887 516F           8A46         0E            mov	al,$E[bp]
20888 5172           30E4                       xor	ah,ah
20889 5174           89C3                       mov	bx,ax
20890 5176           8A46         0A            mov	al,$A[bp]
20891 5179           30E4                       xor	ah,ah
20892 517B           89D9                       mov	cx,bx
20893 517D           F7E9                       imul	cx
20894                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20895 517F           89C3                       mov	bx,ax
20896 5181           8A46         0C            mov	al,$C[bp]
20897 5184           30E4                       xor	ah,ah
20898 5186           93                         xchg	ax,bx
20899 5187           89D9                       mov	cx,bx
20900 5189           F7E9                       imul	cx
20901                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20902                                           ! Debug: expression subtree swapping
20903 518B           0246         08            add	al,8[bp]
20904 518E           80D4                   00  adc	ah,*0
20905                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20906 5191           8946         F8            mov	-8[bp],ax
20907                                           !BCC_EOS
20908                                           ! 2428  src = car * cheight;
20909                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20910 5194           8A46         0E            mov	al,$E[bp]
20911 5197           30E4                       xor	ah,ah
20912 5199           89C3                       mov	bx,ax
20913 519B           8A46         04            mov	al,4[bp]
20914 519E           30E4                       xor	ah,ah
20915 51A0           89D9                       mov	cx,bx
20916 51A2           F7E9                       imul	cx
20917                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20918 51A4           8946         F4            mov	-$C[bp],ax
20919                                           !BCC_EOS
20920                                           ! 2429  outw(0x3c4, 0x0f02);
20921                                           ! Debug: list int = const $F02 (used reg = )
20922 51A7           B8                   0F02  mov	ax,#$F02
20923 51AA           50                         push	ax
20924                                           ! Debug: list int = const $3C4 (used reg = )
20925 51AB           B8                   03C4  mov	ax,#$3C4
20926 51AE           50                         push	ax
20927                                           ! Debug: func () void = outw+0 (used reg = )
20928 51AF           E8         2A57            call	_outw
20929 51B2           83C4                   04  add	sp,*4
20930                                           !BCC_EOS
20931                                           ! 2430  outw(0x3ce, 0x0205);
20932                                           ! Debug: list int = const $205 (used reg = )
20933 51B5           B8                   0205  mov	ax,#$205
20934 51B8           50                         push	ax
20935                                           ! Debug: list int = const $3CE (used reg = )
20936 51B9           B8                   03CE  mov	ax,#$3CE
20937 51BC           50                         push	ax
20938                                           ! Debug: func () void = outw+0 (used reg = )
20939 51BD           E8         2A49            call	_outw
20940 51C0           83C4                   04  add	sp,*4
20941                                           !BCC_EOS
20942                                           ! 2431  if(attr&0x80)
20943                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20944 51C3           8A46         06            mov	al,6[bp]
20945 51C6           24                     80  and	al,#$80
20946 51C8           84C0                       test	al,al
20947 51CA           74           10            je  	.147
20948                       000051CC            .148:
20949                                           ! 2432   {
20950                                           ! 2433    outw(0x3ce, 0x1803);
20951                                           ! Debug: list int = const $1803 (used reg = )
20952 51CC           B8                   1803  mov	ax,#$1803
20953 51CF           50                         push	ax
20954                                           ! Debug: list int = const $3CE (used reg = )
20955 51D0           B8                   03CE  mov	ax,#$3CE
20956 51D3           50                         push	ax
20957                                           ! Debug: func () void = outw+0 (used reg = )
20958 51D4           E8         2A32            call	_outw
20959 51D7           83C4                   04  add	sp,*4
20960                                           !BCC_EOS
20961                                           ! 2434   }
20962                                           ! 2435  else
20963                                           ! 2436   {
20964 51DA           EB           0E            jmp .149
20965                       000051DC            .147:
20966                                           ! 2437    outw(0x3ce, 0x0003);
20967                                           ! Debug: list int = const 3 (used reg = )
20968 51DC           B8                   0003  mov	ax,*3
20969 51DF           50                         push	ax
20970                                           ! Debug: list int = const $3CE (used reg = )
20971 51E0           B8                   03CE  mov	ax,#$3CE
20972 51E3           50                         push	ax
20973                                           ! Debug: func () void = outw+0 (used reg = )
20974 51E4           E8         2A22            call	_outw
20975 51E7           83C4                   04  add	sp,*4
20976                                           !BCC_EOS
20977                                           ! 2438   }
20978                                           ! 2439  for(i=0;i<cheight;i++)
20979                       000051EA            .149:
20980                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20981 51EA           30C0                       xor	al,al
20982 51EC           8846         FF            mov	-1[bp],al
20983                                           !BCC_EOS
20984                                           !BCC_EOS
20985                                           ! 2440   {
20986 51EF           E9         00A6            br 	.14C
20987                       000051F2            .14D:
20988                                           ! 2441    dest=addr+i*nbcols;
20989                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20990 51F2           8A46         0C            mov	al,$C[bp]
20991 51F5           30E4                       xor	ah,ah
20992 51F7           89C3                       mov	bx,ax
20993 51F9           8A46         FF            mov	al,-1[bp]
20994 51FC           30E4                       xor	ah,ah
20995 51FE           89D9                       mov	cx,bx
20996 5200           F7E9                       imul	cx
20997                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20998                                           ! Debug: expression subtree swapping
20999 5202           0346         F8            add	ax,-8[bp]
21000                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21001 5205           8946         F6            mov	-$A[bp],ax
21002                                           !BCC_EOS
21003                                           ! 2442    for(j=0;j<8;j++)
21004                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21005 5208           30C0                       xor	al,al
21006 520A           8846         FE            mov	-2[bp],al
21007                                           !BCC_EOS
21008                                           !BCC_EOS
21009                                           ! 2443     {
21010 520D           EB           79            jmp .150
21011                       0000520F            .151:
21012                                           ! 2444      mask=0x80>>j;
21013                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
21014 520F           8A46         FE            mov	al,-2[bp]
21015 5212           30E4                       xor	ah,ah
21016 5214           89C3                       mov	bx,ax
21017 5216           B8                   0080  mov	ax,#$80
21018 5219           89D9                       mov	cx,bx
21019 521B           D3F8                       sar	ax,cl
21020                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
21021 521D           8846         FD            mov	-3[bp],al
21022                                           !BCC_EOS
21023                                           ! 2445      outw(0x3ce, (mask << 8) | 0x08);
21024                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
21025 5220           8A46         FD            mov	al,-3[bp]
21026 5223           30E4                       xor	ah,ah
21027 5225           88C4                       mov	ah,al
21028 5227           30C0                       xor	al,al
21029                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21030 5229           0C                     08  or	al,*8
21031                                           ! Debug: list unsigned int = ax+0 (used reg = )
21032 522B           50                         push	ax
21033                                           ! Debug: list int = const $3CE (used reg = )
21034 522C           B8                   03CE  mov	ax,#$3CE
21035 522F           50                         push	ax
21036                                           ! Debug: func () void = outw+0 (used reg = )
21037 5230           E8         29D6            call	_outw
21038 5233           83C4                   04  add	sp,*4
21039                                           !BCC_EOS
21040                                           ! 2446      read_byte(0xa000,dest);
21041                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21042 5236           FF76         F6            push	-$A[bp]
21043                                           ! Debug: list unsigned int = const $A000 (used reg = )
21044 5239           B8                   A000  mov	ax,#$A000
21045 523C           50                         push	ax
21046                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21047 523D           E8         294D            call	_read_byte
21048 5240           83C4                   04  add	sp,*4
21049                                           !BCC_EOS
21050                                           ! 2447      if(fdata[src+i]&mask)
21051                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21052 5243           8B46         F4            mov	ax,-$C[bp]
21053 5246           0246         FF            add	al,-1[bp]
21054 5249           80D4                   00  adc	ah,*0
21055                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21056 524C           0346         FA            add	ax,-6[bp]
21057 524F           89C3                       mov	bx,ax
21058                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21059 5251           8A07                       mov	al,[bx]
21060 5253           2246         FD            and	al,-3[bp]
21061 5256           84C0                       test	al,al
21062 5258           74           17            je  	.152
21063                       0000525A            .153:
21064                                           ! 2448       {
21065                                           ! 2449        write_byte(0xa000,dest,attr&0x0f);
21066                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21067 525A           8A46         06            mov	al,6[bp]
21068 525D           24                     0F  and	al,*$F
21069                                           ! Debug: list unsigned char = al+0 (used reg = )
21070 525F           30E4                       xor	ah,ah
21071 5261           50                         push	ax
21072                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21073 5262           FF76         F6            push	-$A[bp]
21074                                           ! Debug: list unsigned int = const $A000 (used reg = )
21075 5265           B8                   A000  mov	ax,#$A000
21076 5268           50                         push	ax
21077                                           ! Debug: func () void = write_byte+0 (used reg = )
21078 5269           E8         2947            call	_write_byte
21079 526C           83C4                   06  add	sp,*6
21080                                           !BCC_EOS
21081                                           ! 2450       }
21082                                           ! 2451      else
21083                                           ! 2452       {
21084 526F           EB           10            jmp .154
21085                       00005271            .152:
21086                                           ! 2453        write_byte(0xa000,dest,0x00);
21087                                           ! Debug: list int = const 0 (used reg = )
21088 5271           31C0                       xor	ax,ax
21089 5273           50                         push	ax
21090                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21091 5274           FF76         F6            push	-$A[bp]
21092                                           ! Debug: list unsigned int = const $A000 (used reg = )
21093 5277           B8                   A000  mov	ax,#$A000
21094 527A           50                         push	ax
21095                                           ! Debug: func () void = write_byte+0 (used reg = )
21096 527B           E8         2935            call	_write_byte
21097 527E           83C4                   06  add	sp,*6
21098                                           !BCC_EOS
21099                                           ! 2454       }
21100                                           ! 2455     }
21101                       00005281            .154:
21102                                           ! 2456   }
21103                       00005281            .14F:
21104                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21105 5281           8A46         FE            mov	al,-2[bp]
21106 5284           40                         inc	ax
21107 5285           8846         FE            mov	-2[bp],al
21108                       00005288            .150:
21109                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21110 5288           8A46         FE            mov	al,-2[bp]
21111 528B           3C                     08  cmp	al,*8
21112 528D         0F82         FF7E            blo 	.151
21113                       00005291            .155:
21114                       00005291            .14E:
21115                                           ! 2457 #asm
21116                       00005291            .14B:
21117                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21118 5291           8A46         FF            mov	al,-1[bp]
21119 5294           40                         inc	ax
21120 5295           8846         FF            mov	-1[bp],al
21121                       00005298            .14C:
21122                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21123 5298           8A46         FF            mov	al,-1[bp]
21124 529B           3A46         0E            cmp	al,$E[bp]
21125 529E         0F82         FF50            blo 	.14D
21126                       000052A2            .156:
21127                       000052A2            .14A:
21128                                           !BCC_EOS
21129                                           !BCC_ASM
21130                       0000000A            _write_gfx_char_pl4.j	set	$A
21131                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21132                       00000006            _write_gfx_char_pl4.fdata	set	6
21133                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21134                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21135                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21136                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21137                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21138                       0000000B            _write_gfx_char_pl4.i	set	$B
21139                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21140                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21141                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21142                       00000009            _write_gfx_char_pl4.mask	set	9
21143                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21144                       00000002            _write_gfx_char_pl4.dest	set	2
21145                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21146                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21147                       00000008            .write_gfx_char_pl4.xcurs	set	8
21148                       00000000            _write_gfx_char_pl4.src	set	0
21149                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21150                       00000012            _write_gfx_char_pl4.attr	set	$12
21151                       00000006            .write_gfx_char_pl4.attr	set	6
21152                       00000010            _write_gfx_char_pl4.car	set	$10
21153                       00000004            .write_gfx_char_pl4.car	set	4
21154                       00000004            _write_gfx_char_pl4.addr	set	4
21155                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21156 52A2           BA                   03CE    mov dx, # 0x3ce
21157 52A5           B8                   FF08    mov ax, #0xff08
21158 52A8           EF                           out dx, ax
21159 52A9           B8                   0005    mov ax, #0x0005
21160 52AC           EF                           out dx, ax
21161 52AD           B8                   0003    mov ax, #0x0003
21162 52B0           EF                           out dx, ax
21163                                           ! 2465 endasm
21164                                           !BCC_ENDASM
21165                                           !BCC_EOS
21166                                           ! 2466 }
21167 52B1           89EC                       mov	sp,bp
21168 52B3           5D                         pop	bp
21169 52B4           C3                         ret
21170                                           ! 2467 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21171                                           ! Register BX used in function write_gfx_char_pl4
21172                                           ! 2468 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21173                       000052B5            _write_gfx_char_cga:
21174                                           !BCC_EOS
21175                                           !BCC_EOS
21176                                           !BCC_EOS
21177                                           !BCC_EOS
21178                                           !BCC_EOS
21179                                           !BCC_EOS
21180                                           ! 2469 {
21181                                           ! 2470  Bit8u i,j,
21182                                           ! 2470 mask,data;
21183                                           !BCC_EOS
21184                                           ! 2471  Bit8u *fdata;
21185                                           !BCC_EOS
21186                                           ! 2472  Bit16u addr,dest,src;
21187                                           !BCC_EOS
21188                                           ! 2473  fdata = &vgafont8;
21189 52B5           55                         push	bp
21190 52B6           89E5                       mov	bp,sp
21191 52B8           83C4                   F4  add	sp,*-$C
21192                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21193 52BB           BB                   0F61  mov	bx,#_vgafont8
21194 52BE           895E         FA            mov	-6[bp],bx
21195                                           !BCC_EOS
21196                                           ! 2474  addr=(xcurs*bpp)+ycurs*320;
21197                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21198 52C1           8A46         0A            mov	al,$A[bp]
21199 52C4           30E4                       xor	ah,ah
21200 52C6           B9                   0140  mov	cx,#$140
21201 52C9           F7E9                       imul	cx
21202 52CB           50                         push	ax
21203                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21204 52CC           8A46         0E            mov	al,$E[bp]
21205 52CF           30E4                       xor	ah,ah
21206 52D1           89C3                       mov	bx,ax
21207 52D3           8A46         08            mov	al,8[bp]
21208 52D6           30E4                       xor	ah,ah
21209 52D8           89D9                       mov	cx,bx
21210 52DA           F7E9                       imul	cx
21211                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21212 52DC           0346         F2            add	ax,-$E[bp]
21213 52DF           44                         inc	sp
21214 52E0           44                         inc	sp
21215                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21216 52E1           8946         F8            mov	-8[bp],ax
21217                                           !BCC_EOS
21218                                           ! 2475  src = car * 8;
21219                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21220 52E4           8A46         04            mov	al,4[bp]
21221 52E7           30E4                       xor	ah,ah
21222 52E9           B1                     03  mov	cl,*3
21223 52EB           D3E0                       shl	ax,cl
21224                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21225 52ED           8946         F4            mov	-$C[bp],ax
21226                                           !BCC_EOS
21227                                           ! 2476  for(i=0;i<8;i++)
21228                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21229 52F0           30C0                       xor	al,al
21230 52F2           8846         FF            mov	-1[bp],al
21231                                           !BCC_EOS
21232                                           !BCC_EOS
21233                                           ! 2477   {
21234 52F5           E9         01B3            br 	.159
21235                       000052F8            .15A:
21236                                           ! 2478    dest=addr+(i>>1)*80;
21237                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21238 52F8           8A46         FF            mov	al,-1[bp]
21239 52FB           30E4                       xor	ah,ah
21240 52FD           D1E8                       shr	ax,*1
21241                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21242 52FF           B9                   0050  mov	cx,*$50
21243 5302           F7E9                       imul	cx
21244                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21245                                           ! Debug: expression subtree swapping
21246 5304           0346         F8            add	ax,-8[bp]
21247                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21248 5307           8946         F6            mov	-$A[bp],ax
21249                                           !BCC_EOS
21250                                           ! 2479    if (i & 1) dest += 0x2000;
21251                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21252 530A           8A46         FF            mov	al,-1[bp]
21253 530D           24                     01  and	al,*1
21254 530F           84C0                       test	al,al
21255 5311           74           09            je  	.15B
21256                       00005313            .15C:
21257                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21258 5313           8B46         F6            mov	ax,-$A[bp]
21259 5316           05                   2000  add	ax,#$2000
21260 5319           8946         F6            mov	-$A[bp],ax
21261                                           !BCC_EOS
21262                                           ! 2480    mask = 0x80;
21263                       0000531C            .15B:
21264                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21265 531C           B0                     80  mov	al,#$80
21266 531E           8846         FD            mov	-3[bp],al
21267                                           !BCC_EOS
21268                                           ! 2481    if (bpp == 1)
21269                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21270 5321           8A46         0E            mov	al,$E[bp]
21271 5324           3C                     01  cmp	al,*1
21272 5326         0F85         00B3            bne 	.15D
21273                       0000532A            .15E:
21274                                           ! 2482     {
21275                                           ! 2483      if (attr & 0x80)
21276                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21277 532A           8A46         06            mov	al,6[bp]
21278 532D           24                     80  and	al,#$80
21279 532F           84C0                       test	al,al
21280 5331           74           12            je  	.15F
21281                       00005333            .160:
21282                                           ! 2484       {
21283                                           ! 2485        data = read_byte(0xb800,dest);
21284                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21285 5333           FF76         F6            push	-$A[bp]
21286                                           ! Debug: list unsigned int = const $B800 (used reg = )
21287 5336           B8                   B800  mov	ax,#$B800
21288 5339           50                         push	ax
21289                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21290 533A           E8         2850            call	_read_byte
21291 533D           83C4                   04  add	sp,*4
21292                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21293 5340           8846         FC            mov	-4[bp],al
21294                                           !BCC_EOS
21295                                           ! 2486       }
21296                                           ! 2487      else
21297                                           ! 2488       {
21298 5343           EB           05            jmp .161
21299                       00005345            .15F:
21300                                           ! 2489        data = 0x00;
21301                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21302 5345           30C0                       xor	al,al
21303 5347           8846         FC            mov	-4[bp],al
21304                                           !BCC_EOS
21305                                           ! 2490       }
21306                                           ! 2491      for(j=0;j<8;j++)
21307                       0000534A            .161:
21308                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21309 534A           30C0                       xor	al,al
21310 534C           8846         FE            mov	-2[bp],al
21311                                           !BCC_EOS
21312                                           !BCC_EOS
21313                                           ! 2492       {
21314 534F           EB           6F            jmp .164
21315                       00005351            .165:
21316                                           ! 2493        if (fdata[src+i] & mask)
21317                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21318 5351           8B46         F4            mov	ax,-$C[bp]
21319 5354           0246         FF            add	al,-1[bp]
21320 5357           80D4                   00  adc	ah,*0
21321                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21322 535A           0346         FA            add	ax,-6[bp]
21323 535D           89C3                       mov	bx,ax
21324                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21325 535F           8A07                       mov	al,[bx]
21326 5361           2246         FD            and	al,-3[bp]
21327 5364           84C0                       test	al,al
21328 5366           74           47            je  	.166
21329                       00005368            .167:
21330                                           ! 2494         {
21331                                           ! 2495          if (attr & 0x80)
21332                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21333 5368           8A46         06            mov	al,6[bp]
21334 536B           24                     80  and	al,#$80
21335 536D           84C0                       test	al,al
21336 536F           74           20            je  	.168
21337                       00005371            .169:
21338                                           ! 2496           {
21339                                           ! 2497            data ^= (attr & 0x01) << (7-j);
21340                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21341 5371           B8                   0007  mov	ax,*7
21342 5374           2A46         FE            sub	al,-2[bp]
21343 5377           80DC                   00  sbb	ah,*0
21344 537A           50                         push	ax
21345                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21346 537B           8A46         06            mov	al,6[bp]
21347 537E           24                     01  and	al,*1
21348                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21349 5380           30E4                       xor	ah,ah
21350 5382           8B4E         F2            mov	cx,-$E[bp]
21351 5385           D3E0                       shl	ax,cl
21352 5387           44                         inc	sp
21353 5388           44                         inc	sp
21354                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21355 5389           3246         FC            xor	al,-4[bp]
21356 538C           8846         FC            mov	-4[bp],al
21357                                           !BCC_EOS
21358                                           ! 2498           }
21359                                           ! 2499          else
21360                                           ! 2500           {
21361 538F           EB           1E            jmp .16A
21362                       00005391            .168:
21363                                           ! 2501            data |= (attr & 0x01) << (7-j);
21364                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21365 5391           B8                   0007  mov	ax,*7
21366 5394           2A46         FE            sub	al,-2[bp]
21367 5397           80DC                   00  sbb	ah,*0
21368 539A           50                         push	ax
21369                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21370 539B           8A46         06            mov	al,6[bp]
21371 539E           24                     01  and	al,*1
21372                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21373 53A0           30E4                       xor	ah,ah
21374 53A2           8B4E         F2            mov	cx,-$E[bp]
21375 53A5           D3E0                       shl	ax,cl
21376 53A7           44                         inc	sp
21377 53A8           44                         inc	sp
21378                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21379 53A9           0A46         FC            or	al,-4[bp]
21380 53AC           8846         FC            mov	-4[bp],al
21381                                           !BCC_EOS
21382                                           ! 2502           }
21383                                           ! 2503         }
21384                       000053AF            .16A:
21385                                           ! 2504        mask >>= 1;
21386                       000053AF            .166:
21387                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21388 53AF           8A46         FD            mov	al,-3[bp]
21389 53B2           30E4                       xor	ah,ah
21390 53B4           D1E8                       shr	ax,*1
21391 53B6           8846         FD            mov	-3[bp],al
21392                                           !BCC_EOS
21393                                           ! 2505       }
21394                                           ! 2506      write_byte(0xb800,dest,data);
21395                       000053B9            .163:
21396                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21397 53B9           8A46         FE            mov	al,-2[bp]
21398 53BC           40                         inc	ax
21399 53BD           8846         FE            mov	-2[bp],al
21400                       000053C0            .164:
21401                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21402 53C0           8A46         FE            mov	al,-2[bp]
21403 53C3           3C                     08  cmp	al,*8
21404 53C5           72           8A            jb 	.165
21405                       000053C7            .16B:
21406                       000053C7            .162:
21407                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21408 53C7           8A46         FC            mov	al,-4[bp]
21409 53CA           30E4                       xor	ah,ah
21410 53CC           50                         push	ax
21411                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21412 53CD           FF76         F6            push	-$A[bp]
21413                                           ! Debug: list unsigned int = const $B800 (used reg = )
21414 53D0           B8                   B800  mov	ax,#$B800
21415 53D3           50                         push	ax
21416                                           ! Debug: func () void = write_byte+0 (used reg = )
21417 53D4           E8         27DC            call	_write_byte
21418 53D7           83C4                   06  add	sp,*6
21419                                           !BCC_EOS
21420                                           ! 2507     }
21421                                           ! 2508    else
21422                                           ! 2509     {
21423 53DA           E9         00C7            br 	.16C
21424                       000053DD            .15D:
21425                                           ! 2510      while (mask > 0)
21426                                           ! 2511       {
21427 53DD           E9         00BB            br 	.16E
21428                       000053E0            .16F:
21429                                           ! 2512        if (attr & 0x80)
21430                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21431 53E0           8A46         06            mov	al,6[bp]
21432 53E3           24                     80  and	al,#$80
21433 53E5           84C0                       test	al,al
21434 53E7           74           12            je  	.170
21435                       000053E9            .171:
21436                                           ! 2513         {
21437                                           ! 2514          data = read_byte(0xb800,dest);
21438                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21439 53E9           FF76         F6            push	-$A[bp]
21440                                           ! Debug: list unsigned int = const $B800 (used reg = )
21441 53EC           B8                   B800  mov	ax,#$B800
21442 53EF           50                         push	ax
21443                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21444 53F0           E8         279A            call	_read_byte
21445 53F3           83C4                   04  add	sp,*4
21446                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21447 53F6           8846         FC            mov	-4[bp],al
21448                                           !BCC_EOS
21449                                           ! 2515         }
21450                                           ! 2516        else
21451                                           ! 2517         {
21452 53F9           EB           05            jmp .172
21453                       000053FB            .170:
21454                                           ! 2518          data = 0x00;
21455                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21456 53FB           30C0                       xor	al,al
21457 53FD           8846         FC            mov	-4[bp],al
21458                                           !BCC_EOS
21459                                           ! 2519         }
21460                                           ! 2520        for(j=0;j<4;j++)
21461                       00005400            .172:
21462                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21463 5400           30C0                       xor	al,al
21464 5402           8846         FE            mov	-2[bp],al
21465                                           !BCC_EOS
21466                                           !BCC_EOS
21467                                           ! 2521         {
21468 5405           EB           73            jmp .175
21469                       00005407            .176:
21470                                           ! 2522          if (fdata[src+i] & mask)
21471                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21472 5407           8B46         F4            mov	ax,-$C[bp]
21473 540A           0246         FF            add	al,-1[bp]
21474 540D           80D4                   00  adc	ah,*0
21475                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21476 5410           0346         FA            add	ax,-6[bp]
21477 5413           89C3                       mov	bx,ax
21478                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21479 5415           8A07                       mov	al,[bx]
21480 5417           2246         FD            and	al,-3[bp]
21481 541A           84C0                       test	al,al
21482 541C           74           4B            je  	.177
21483                       0000541E            .178:
21484                                           ! 2523           {
21485                                           ! 2524            if (attr & 0x80)
21486                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21487 541E           8A46         06            mov	al,6[bp]
21488 5421           24                     80  and	al,#$80
21489 5423           84C0                       test	al,al
21490 5425           74           22            je  	.179
21491                       00005427            .17A:
21492                                           ! 2525             {
21493                                           ! 2526              data ^= (attr & 0x03) << ((3-j)*2);
21494                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21495 5427           B8                   0003  mov	ax,*3
21496 542A           2A46         FE            sub	al,-2[bp]
21497 542D           80DC                   00  sbb	ah,*0
21498                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21499 5430           D1E0                       shl	ax,*1
21500 5432           50                         push	ax
21501                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21502 5433           8A46         06            mov	al,6[bp]
21503 5436           24                     03  and	al,*3
21504                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21505 5438           30E4                       xor	ah,ah
21506 543A           8B4E         F2            mov	cx,-$E[bp]
21507 543D           D3E0                       shl	ax,cl
21508 543F           44                         inc	sp
21509 5440           44                         inc	sp
21510                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21511 5441           3246         FC            xor	al,-4[bp]
21512 5444           8846         FC            mov	-4[bp],al
21513                                           !BCC_EOS
21514                                           ! 2527             }
21515                                           ! 2528            else
21516                                           ! 2529             {
21517 5447           EB           20            jmp .17B
21518                       00005449            .179:
21519                                           ! 2530              data |= (attr & 0x03) << ((3-j)*2);
21520                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21521 5449           B8                   0003  mov	ax,*3
21522 544C           2A46         FE            sub	al,-2[bp]
21523 544F           80DC                   00  sbb	ah,*0
21524                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21525 5452           D1E0                       shl	ax,*1
21526 5454           50                         push	ax
21527                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21528 5455           8A46         06            mov	al,6[bp]
21529 5458           24                     03  and	al,*3
21530                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21531 545A           30E4                       xor	ah,ah
21532 545C           8B4E         F2            mov	cx,-$E[bp]
21533 545F           D3E0                       shl	ax,cl
21534 5461           44                         inc	sp
21535 5462           44                         inc	sp
21536                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21537 5463           0A46         FC            or	al,-4[bp]
21538 5466           8846         FC            mov	-4[bp],al
21539                                           !BCC_EOS
21540                                           ! 2531             }
21541                                           ! 2532           }
21542                       00005469            .17B:
21543                                           ! 2533          mask >>= 1;
21544                       00005469            .177:
21545                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21546 5469           8A46         FD            mov	al,-3[bp]
21547 546C           30E4                       xor	ah,ah
21548 546E           D1E8                       shr	ax,*1
21549 5470           8846         FD            mov	-3[bp],al
21550                                           !BCC_EOS
21551                                           ! 2534         }
21552                                           ! 2535        write_byte(0xb800,dest,data);
21553                       00005473            .174:
21554                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21555 5473           8A46         FE            mov	al,-2[bp]
21556 5476           40                         inc	ax
21557 5477           8846         FE            mov	-2[bp],al
21558                       0000547A            .175:
21559                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21560 547A           8A46         FE            mov	al,-2[bp]
21561 547D           3C                     04  cmp	al,*4
21562 547F           72           86            jb 	.176
21563                       00005481            .17C:
21564                       00005481            .173:
21565                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21566 5481           8A46         FC            mov	al,-4[bp]
21567 5484           30E4                       xor	ah,ah
21568 5486           50                         push	ax
21569                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21570 5487           FF76         F6            push	-$A[bp]
21571                                           ! Debug: list unsigned int = const $B800 (used reg = )
21572 548A           B8                   B800  mov	ax,#$B800
21573 548D           50                         push	ax
21574                                           ! Debug: func () void = write_byte+0 (used reg = )
21575 548E           E8         2722            call	_write_byte
21576 5491           83C4                   06  add	sp,*6
21577                                           !BCC_EOS
21578                                           ! 2536        dest += 1;
21579                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21580 5494           8B46         F6            mov	ax,-$A[bp]
21581 5497           40                         inc	ax
21582 5498           8946         F6            mov	-$A[bp],ax
21583                                           !BCC_EOS
21584                                           ! 2537       }
21585                                           ! 2538     }
21586                       0000549B            .16E:
21587                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21588 549B           8A46         FD            mov	al,-3[bp]
21589 549E           84C0                       test	al,al
21590 54A0         0F85         FF3C            bne 	.16F
21591                       000054A4            .17D:
21592                       000054A4            .16D:
21593                                           ! 2539   }
21594                       000054A4            .16C:
21595                                           ! 2540 }
21596                       000054A4            .158:
21597                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21598 54A4           8A46         FF            mov	al,-1[bp]
21599 54A7           40                         inc	ax
21600 54A8           8846         FF            mov	-1[bp],al
21601                       000054AB            .159:
21602                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21603 54AB           8A46         FF            mov	al,-1[bp]
21604 54AE           3C                     08  cmp	al,*8
21605 54B0         0F82         FE44            blo 	.15A
21606                       000054B4            .17E:
21607                       000054B4            .157:
21608 54B4           89EC                       mov	sp,bp
21609 54B6           5D                         pop	bp
21610 54B7           C3                         ret
21611                                           ! 2541 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21612                                           ! Register BX used in function write_gfx_char_cga
21613                                           ! 2542 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21614                       000054B8            _write_gfx_char_lin:
21615                                           !BCC_EOS
21616                                           !BCC_EOS
21617                                           !BCC_EOS
21618                                           !BCC_EOS
21619                                           !BCC_EOS
21620                                           ! 2543 {
21621                                           ! 2544  Bit8u i,j,mask,data;
21622                                           !BCC_EOS
21623                                           ! 2545  Bit8u *fdata;
21624                                           !BCC_EOS
21625                                           ! 2546  Bit16u addr,dest,src;
21626                                           !BCC_EOS
21627                                           ! 2547  fdata = &vgafont8;
21628 54B8           55                         push	bp
21629 54B9           89E5                       mov	bp,sp
21630 54BB           83C4                   F4  add	sp,*-$C
21631                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21632 54BE           BB                   0F61  mov	bx,#_vgafont8
21633 54C1           895E         FA            mov	-6[bp],bx
21634                                           !BCC_EOS
21635                                           ! 2548  addr=xcurs*8+ycurs*nbcols*64;
21636                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21637 54C4           8A46         0C            mov	al,$C[bp]
21638 54C7           30E4                       xor	ah,ah
21639 54C9           89C3                       mov	bx,ax
21640 54CB           8A46         0A            mov	al,$A[bp]
21641 54CE           30E4                       xor	ah,ah
21642 54D0           89D9                       mov	cx,bx
21643 54D2           F7E9                       imul	cx
21644                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21645 54D4           B1                     06  mov	cl,*6
21646 54D6           D3E0                       shl	ax,cl
21647 54D8           50                         push	ax
21648                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21649 54D9           8A46         08            mov	al,8[bp]
21650 54DC           30E4                       xor	ah,ah
21651 54DE           B1                     03  mov	cl,*3
21652 54E0           D3E0                       shl	ax,cl
21653                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21654 54E2           0346         F2            add	ax,-$E[bp]
21655 54E5           44                         inc	sp
21656 54E6           44                         inc	sp
21657                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21658 54E7           8946         F8            mov	-8[bp],ax
21659                                           !BCC_EOS
21660                                           ! 2549  src = car * 8;
21661                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21662 54EA           8A46         04            mov	al,4[bp]
21663 54ED           30E4                       xor	ah,ah
21664 54EF           B1                     03  mov	cl,*3
21665 54F1           D3E0                       shl	ax,cl
21666                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21667 54F3           8946         F4            mov	-$C[bp],ax
21668                                           !BCC_EOS
21669                                           ! 2550  for(i=0;i<8;i++)
21670                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21671 54F6           30C0                       xor	al,al
21672 54F8           8846         FF            mov	-1[bp],al
21673                                           !BCC_EOS
21674                                           !BCC_EOS
21675                                           ! 2551   {
21676 54FB           E9         0081            br 	.181
21677                       000054FE            .182:
21678                                           ! 2552    dest=addr+i*nbcols*8;
21679                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21680 54FE           8A46         0C            mov	al,$C[bp]
21681 5501           30E4                       xor	ah,ah
21682 5503           89C3                       mov	bx,ax
21683 5505           8A46         FF            mov	al,-1[bp]
21684 5508           30E4                       xor	ah,ah
21685 550A           89D9                       mov	cx,bx
21686 550C           F7E9                       imul	cx
21687                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21688 550E           B1                     03  mov	cl,*3
21689 5510           D3E0                       shl	ax,cl
21690                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21691                                           ! Debug: expression subtree swapping
21692 5512           0346         F8            add	ax,-8[bp]
21693                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21694 5515           8946         F6            mov	-$A[bp],ax
21695                                           !BCC_EOS
21696                                           ! 2553    mask = 0x80;
21697                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21698 5518           B0                     80  mov	al,#$80
21699 551A           8846         FD            mov	-3[bp],al
21700                                           !BCC_EOS
21701                                           ! 2554    for(j=0;j<8;j++)
21702                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21703 551D           30C0                       xor	al,al
21704 551F           8846         FE            mov	-2[bp],al
21705                                           !BCC_EOS
21706                                           !BCC_EOS
21707                                           ! 2555     {
21708 5522           EB           4D            jmp .185
21709                       00005524            .186:
21710                                           ! 2556      data = 0x00;
21711                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21712 5524           30C0                       xor	al,al
21713 5526           8846         FC            mov	-4[bp],al
21714                                           !BCC_EOS
21715                                           ! 2557      if (fdata[src+i] & mask)
21716                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21717 5529           8B46         F4            mov	ax,-$C[bp]
21718 552C           0246         FF            add	al,-1[bp]
21719 552F           80D4                   00  adc	ah,*0
21720                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21721 5532           0346         FA            add	ax,-6[bp]
21722 5535           89C3                       mov	bx,ax
21723                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21724 5537           8A07                       mov	al,[bx]
21725 5539           2246         FD            and	al,-3[bp]
21726 553C           84C0                       test	al,al
21727 553E           74           06            je  	.187
21728                       00005540            .188:
21729                                           ! 2558       {
21730                                           ! 2559        data = attr;
21731                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21732 5540           8A46         06            mov	al,6[bp]
21733 5543           8846         FC            mov	-4[bp],al
21734                                           !BCC_EOS
21735                                           ! 2560       }
21736                                           ! 2561      write_byte(0xa000,dest+j,data);
21737                       00005546            .187:
21738                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21739 5546           8A46         FC            mov	al,-4[bp]
21740 5549           30E4                       xor	ah,ah
21741 554B           50                         push	ax
21742                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21743 554C           8B46         F6            mov	ax,-$A[bp]
21744 554F           0246         FE            add	al,-2[bp]
21745 5552           80D4                   00  adc	ah,*0
21746                                           ! Debug: list unsigned int = ax+0 (used reg = )
21747 5555           50                         push	ax
21748                                           ! Debug: list unsigned int = const $A000 (used reg = )
21749 5556           B8                   A000  mov	ax,#$A000
21750 5559           50                         push	ax
21751                                           ! Debug: func () void = write_byte+0 (used reg = )
21752 555A           E8         2656            call	_write_byte
21753 555D           83C4                   06  add	sp,*6
21754                                           !BCC_EOS
21755                                           ! 2562      mask >>= 1;
21756                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21757 5560           8A46         FD            mov	al,-3[bp]
21758 5563           30E4                       xor	ah,ah
21759 5565           D1E8                       shr	ax,*1
21760 5567           8846         FD            mov	-3[bp],al
21761                                           !BCC_EOS
21762                                           ! 2563     }
21763                                           ! 2564   }
21764                       0000556A            .184:
21765                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21766 556A           8A46         FE            mov	al,-2[bp]
21767 556D           40                         inc	ax
21768 556E           8846         FE            mov	-2[bp],al
21769                       00005571            .185:
21770                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21771 5571           8A46         FE            mov	al,-2[bp]
21772 5574           3C                     08  cmp	al,*8
21773 5576           72           AC            jb 	.186
21774                       00005578            .189:
21775                       00005578            .183:
21776                                           ! 2565 }
21777                       00005578            .180:
21778                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21779 5578           8A46         FF            mov	al,-1[bp]
21780 557B           40                         inc	ax
21781 557C           8846         FF            mov	-1[bp],al
21782                       0000557F            .181:
21783                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21784 557F           8A46         FF            mov	al,-1[bp]
21785 5582           3C                     08  cmp	al,*8
21786 5584         0F82         FF76            blo 	.182
21787                       00005588            .18A:
21788                       00005588            .17F:
21789 5588           89EC                       mov	sp,bp
21790 558A           5D                         pop	bp
21791 558B           C3                         ret
21792                                           ! 2566 static void biosfn_write_char_attr (car,page,attr,count)
21793                                           ! Register BX used in function write_gfx_char_lin
21794                                           ! 2567 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21795                       0000558C            _biosfn_write_char_attr:
21796                                           !BCC_EOS
21797                                           !BCC_EOS
21798                                           !BCC_EOS
21799                                           !BCC_EOS
21800                                           ! 2568 {
21801                                           ! 2569  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21802                                           !BCC_EOS
21803                                           ! 2570  Bit16u nbcols,nbrows,address;
21804                                           !BCC_EOS
21805                                           ! 2571  Bit16u cursor,dummy;
21806                                           !BCC_EOS
21807                                           ! 2572  mode=read_byte(0x40,0x49);
21808 558C           55                         push	bp
21809 558D           89E5                       mov	bp,sp
21810 558F           83C4                   F0  add	sp,*-$10
21811                                           ! Debug: list int = const $49 (used reg = )
21812 5592           B8                   0049  mov	ax,*$49
21813 5595           50                         push	ax
21814                                           ! Debug: list int = const $40 (used reg = )
21815 5596           B8                   0040  mov	ax,*$40
21816 5599           50                         push	ax
21817                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21818 559A           E8         25F0            call	_read_byte
21819 559D           83C4                   04  add	sp,*4
21820                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21821 55A0           8846         FC            mov	-4[bp],al
21822                                           !BCC_EOS
21823                                           ! 2573  line=find_vga_entry(mode);
21824                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21825 55A3           8A46         FC            mov	al,-4[bp]
21826 55A6           30E4                       xor	ah,ah
21827 55A8           50                         push	ax
21828                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21829 55A9           E8         24F5            call	_find_vga_entry
21830 55AC           44                         inc	sp
21831 55AD           44                         inc	sp
21832                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21833 55AE           8846         FB            mov	-5[bp],al
21834                                           !BCC_EOS
21835                                           ! 2574  if(line==0xFF)return;
21836                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21837 55B1           8A46         FB            mov	al,-5[bp]
21838 55B4           3C                     FF  cmp	al,#$FF
21839 55B6           75           04            jne 	.18B
21840                       000055B8            .18C:
21841 55B8           89EC                       mov	sp,bp
21842 55BA           5D                         pop	bp
21843 55BB           C3                         ret
21844                                           !BCC_EOS
21845                                           ! 2575  biosfn_get_cursor_pos(page,&
21846                       000055BC            .18B:
21847                                           ! 2575 dummy,&cursor);
21848                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21849 55BC           8D5E         F2            lea	bx,-$E[bp]
21850 55BF           53                         push	bx
21851                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21852 55C0           8D5E         F0            lea	bx,-$10[bp]
21853 55C3           53                         push	bx
21854                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21855 55C4           8A46         06            mov	al,6[bp]
21856 55C7           30E4                       xor	ah,ah
21857 55C9           50                         push	ax
21858                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21859 55CA           E8         EE7C            call	_biosfn_get_cursor_pos
21860 55CD           83C4                   06  add	sp,*6
21861                                           !BCC_EOS
21862                                           ! 2576  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21863                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21864 55D0           8A46         F2            mov	al,-$E[bp]
21865                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21866 55D3           8846         FE            mov	-2[bp],al
21867                                           !BCC_EOS
21868                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21869 55D6           8B46         F2            mov	ax,-$E[bp]
21870 55D9           30C0                       xor	al,al
21871                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21872 55DB           88E0                       mov	al,ah
21873 55DD           30E4                       xor	ah,ah
21874                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21875 55DF           8846         FD            mov	-3[bp],al
21876                                           !BCC_EOS
21877                                           ! 2577  nbrows=read_byte(0x40,0x84)+1;
21878                                           ! Debug: list int = const $84 (used reg = )
21879 55E2           B8                   0084  mov	ax,#$84
21880 55E5           50                         push	ax
21881                                           ! Debug: list int = const $40 (used reg = )
21882 55E6           B8                   0040  mov	ax,*$40
21883 55E9           50                         push	ax
21884                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21885 55EA           E8         25A0            call	_read_byte
21886 55ED           83C4                   04  add	sp,*4
21887                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21888 55F0           30E4                       xor	ah,ah
21889                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21890 55F2           40                         inc	ax
21891 55F3           8946         F6            mov	-$A[bp],ax
21892                                           !BCC_EOS
21893                                           ! 2578  nbcols=read_word(0x40,0x4A);
21894                                           ! Debug: list int = const $4A (used reg = )
21895 55F6           B8                   004A  mov	ax,*$4A
21896 55F9           50                         push	ax
21897                                           ! Debug: list int = const $40 (used reg = )
21898 55FA           B8                   0040  mov	ax,*$40
21899 55FD           50                         push	ax
21900                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21901 55FE           E8         259F            call	_read_word
21902 5601           83C4                   04  add	sp,*4
21903                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21904 5604           8946         F8            mov	-8[bp],ax
21905                                           !BCC_EOS
21906                                           ! 2579  if(vga_modes[line].class==0x00)
21907                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21908 5607           8A46         FB            mov	al,-5[bp]
21909 560A           30E4                       xor	ah,ah
21910 560C           B1                     03  mov	cl,*3
21911 560E           D3E0                       shl	ax,cl
21912 5610           89C3                       mov	bx,ax
21913 5612           81C3                 01FD  add	bx,#_vga_modes
21914                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21915 5616           8A47         01            mov	al,1[bx]
21916 5619           84C0                       test	al,al
21917 561B           75           6A            jne 	.18D
21918                       0000561D            .18E:
21919                                           ! 2580   {
21920                                           ! 2581    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21921                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21922 561D           8A46         FD            mov	al,-3[bp]
21923 5620           30E4                       xor	ah,ah
21924 5622           8B4E         F8            mov	cx,-8[bp]
21925 5625           F7E9                       imul	cx
21926                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21927                                           ! Debug: expression subtree swapping
21928 5627           0246         FE            add	al,-2[bp]
21929 562A           80D4                   00  adc	ah,*0
21930                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21931 562D           D1E0                       shl	ax,*1
21932 562F           50                         push	ax
21933                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21934 5630           8B46         F8            mov	ax,-8[bp]
21935 5633           8B4E         F6            mov	cx,-$A[bp]
21936 5636           F7E9                       imul	cx
21937                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21938 5638           D1E0                       shl	ax,*1
21939                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21940 563A           0C                     FF  or	al,#$FF
21941                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21942                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21943 563C           89C3                       mov	bx,ax
21944 563E           8A46         06            mov	al,6[bp]
21945 5641           30E4                       xor	ah,ah
21946 5643           93                         xchg	ax,bx
21947 5644           40                         inc	ax
21948 5645           89D9                       mov	cx,bx
21949 5647           F7E9                       imul	cx
21950                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21951 5649           0346         EE            add	ax,-$12[bp]
21952 564C           44                         inc	sp
21953 564D           44                         inc	sp
21954                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21955 564E           8946         F4            mov	-$C[bp],ax
21956                                           !BCC_EOS
21957                                           ! 2582    dummy=((Bit16u)attr<<8)+car;
21958                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21959 5651           8A46         08            mov	al,8[bp]
21960 5654           30E4                       xor	ah,ah
21961                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21962 5656           88C4                       mov	ah,al
21963 5658           30C0                       xor	al,al
21964                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21965 565A           0246         04            add	al,4[bp]
21966 565D           80D4                   00  adc	ah,*0
21967                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21968 5660           8946         F0            mov	-$10[bp],ax
21969                                           !BCC_EOS
21970                                           ! 2583    memsetw(vga_modes[line].sstart,address,dummy,count);
21971                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21972 5663           FF76         0A            push	$A[bp]
21973                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21974 5666           FF76         F0            push	-$10[bp]
21975                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21976 5669           FF76         F4            push	-$C[bp]
21977                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21978 566C           8A46         FB            mov	al,-5[bp]
21979 566F           30E4                       xor	ah,ah
21980 5671           B1                     03  mov	cl,*3
21981 5673           D3E0                       shl	ax,cl
21982 5675           89C3                       mov	bx,ax
21983 5677           81C3                 01FD  add	bx,#_vga_modes
21984                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21985 567B           FF77         04            push	4[bx]
21986                                           ! Debug: func () void = memsetw+0 (used reg = )
21987 567E           E8         2487            call	_memsetw
21988 5681           83C4                   08  add	sp,*8
21989                                           !BCC_EOS
21990                                           ! 2584   }
21991                                           ! 2585  else
21992                                           ! 2586   {
21993 5684           E9         00F3            br 	.18F
21994                       00005687            .18D:
21995                                           ! 2587    cheight=video_param_table[line_to_vpti[line]].cheight;
21996                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21997 5687           8A46         FB            mov	al,-5[bp]
21998 568A           30E4                       xor	ah,ah
21999 568C           89C3                       mov	bx,ax
22000                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22001 568E           8A87       027D            mov	al,_line_to_vpti[bx]
22002 5692           30E4                       xor	ah,ah
22003 5694           B1                     06  mov	cl,*6
22004 5696           D3E0                       shl	ax,cl
22005 5698           89C3                       mov	bx,ax
22006 569A           81C3                 0291  add	bx,#_video_param_table
22007                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22008 569E           8A47         02            mov	al,2[bx]
22009 56A1           8846         FF            mov	-1[bp],al
22010                                           !BCC_EOS
22011                                           ! 2588    bpp=vga_modes[line].pixbits;
22012                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22013 56A4           8A46         FB            mov	al,-5[bp]
22014 56A7           30E4                       xor	ah,ah
22015 56A9           B1                     03  mov	cl,*3
22016 56AB           D3E0                       shl	ax,cl
22017 56AD           89C3                       mov	bx,ax
22018 56AF           81C3                 01FD  add	bx,#_vga_modes
22019                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22020 56B3           8A47         03            mov	al,3[bx]
22021 56B6           8846         FA            mov	-6[bp],al
22022                                           !BCC_EOS
22023                                           ! 2589    while((count-->0) && (xcurs<nbcols))
22024                                           ! 2590     {
22025 56B9           E9         00A6            br 	.191
22026                       000056BC            .192:
22027                                           ! 2591      switch(vga_modes[line].memmodel)
22028                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22029 56BC           8A46         FB            mov	al,-5[bp]
22030 56BF           30E4                       xor	ah,ah
22031 56C1           B1                     03  mov	cl,*3
22032 56C3           D3E0                       shl	ax,cl
22033 56C5           89C3                       mov	bx,ax
22034 56C7           81C3                 01FD  add	bx,#_vga_modes
22035 56CB           8A47         02            mov	al,2[bx]
22036                                           ! 2592       {
22037 56CE           EB           77            jmp .195
22038                                           ! 2593        case 0x04:
22039                                           ! 2594        case 0x03:
22040                       000056D0            .196:
22041                                           ! 2595          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22042                       000056D0            .197:
22043                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22044 56D0           8A46         FF            mov	al,-1[bp]
22045 56D3           30E4                       xor	ah,ah
22046 56D5           50                         push	ax
22047                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22048 56D6           FF76         F8            push	-8[bp]
22049                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22050 56D9           8A46         FD            mov	al,-3[bp]
22051 56DC           30E4                       xor	ah,ah
22052 56DE           50                         push	ax
22053                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22054 56DF           8A46         FE            mov	al,-2[bp]
22055 56E2           30E4                       xor	ah,ah
22056 56E4           50                         push	ax
22057                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22058 56E5           8A46         08            mov	al,8[bp]
22059 56E8           30E4                       xor	ah,ah
22060 56EA           50                         push	ax
22061                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22062 56EB           8A46         04            mov	al,4[bp]
22063 56EE           30E4                       xor	ah,ah
22064 56F0           50                         push	ax
22065                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22066 56F1           E8         FA4E            call	_write_gfx_char_pl4
22067 56F4           83C4                   0C  add	sp,*$C
22068                                           !BCC_EOS
22069                                           ! 2596          break;
22070 56F7           EB           62            jmp .193
22071                                           !BCC_EOS
22072                                           ! 2597        case 0x02:
22073                                           ! 2598          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22074                       000056F9            .198:
22075                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22076 56F9           8A46         FA            mov	al,-6[bp]
22077 56FC           30E4                       xor	ah,ah
22078 56FE           50                         push	ax
22079                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22080 56FF           FF76         F8            push	-8[bp]
22081                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22082 5702           8A46         FD            mov	al,-3[bp]
22083 5705           30E4                       xor	ah,ah
22084 5707           50                         push	ax
22085                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22086 5708           8A46         FE            mov	al,-2[bp]
22087 570B           30E4                       xor	ah,ah
22088 570D           50                         push	ax
22089                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22090 570E           8A46         08            mov	al,8[bp]
22091 5711           30E4                       xor	ah,ah
22092 5713           50                         push	ax
22093                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22094 5714           8A46         04            mov	al,4[bp]
22095 5717           30E4                       xor	ah,ah
22096 5719           50                         push	ax
22097                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22098 571A           E8         FB98            call	_write_gfx_char_cga
22099 571D           83C4                   0C  add	sp,*$C
22100                                           !BCC_EOS
22101                                           ! 2599          break;
22102 5720           EB           39            jmp .193
22103                                           !BCC_EOS
22104                                           ! 2600        case 0x05:
22105                                           ! 2601          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22106                       00005722            .199:
22107                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22108 5722           FF76         F8            push	-8[bp]
22109                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22110 5725           8A46         FD            mov	al,-3[bp]
22111 5728           30E4                       xor	ah,ah
22112 572A           50                         push	ax
22113                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22114 572B           8A46         FE            mov	al,-2[bp]
22115 572E           30E4                       xor	ah,ah
22116 5730           50                         push	ax
22117                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22118 5731           8A46         08            mov	al,8[bp]
22119 5734           30E4                       xor	ah,ah
22120 5736           50                         push	ax
22121                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22122 5737           8A46         04            mov	al,4[bp]
22123 573A           30E4                       xor	ah,ah
22124 573C           50                         push	ax
22125                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22126 573D           E8         FD78            call	_write_gfx_char_lin
22127 5740           83C4                   0A  add	sp,*$A
22128                                           !BCC_EOS
22129                                           ! 2602          break;
22130 5743           EB           16            jmp .193
22131                                           !BCC_EOS
22132                                           ! 2603       }
22133                                           ! 2604      xcurs++;
22134 5745           EB           14            jmp .193
22135                       00005747            .195:
22136 5747           2C                     02  sub	al,*2
22137 5749           74           AE            je 	.198
22138 574B           2C                     01  sub	al,*1
22139 574D         0F84         FF7F            beq 	.197
22140 5751           2C                     01  sub	al,*1
22141 5753         0F84         FF79            beq 	.196
22142 5757           2C                     01  sub	al,*1
22143 5759           74           C7            je 	.199
22144                       0000575B            .193:
22145                       FFFFFFEE            ..FFFA	=	-$12
22146                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22147 575B           8A46         FE            mov	al,-2[bp]
22148 575E           40                         inc	ax
22149 575F           8846         FE            mov	-2[bp],al
22150                                           !BCC_EOS
22151                                           ! 2605     }
22152                                           ! 2606   }
22153                       00005762            .191:
22154                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22155 5762           8B46         0A            mov	ax,$A[bp]
22156 5765           48                         dec	ax
22157 5766           8946         0A            mov	$A[bp],ax
22158                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22159 5769           3D                   FFFF  cmp	ax,*-1
22160 576C           74           0C            je  	.19A
22161                       0000576E            .19B:
22162                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22163 576E           8A46         FE            mov	al,-2[bp]
22164 5771           30E4                       xor	ah,ah
22165 5773           3B46         F8            cmp	ax,-8[bp]
22166 5776         0F82         FF42            blo 	.192
22167                       0000577A            .19A:
22168                       0000577A            .190:
22169                                           ! 2607 }
22170                       0000577A            .18F:
22171 577A           89EC                       mov	sp,bp
22172 577C           5D                         pop	bp
22173 577D           C3                         ret
22174                                           ! 2608 static void biosfn_write_char_only (car,page,attr,count)
22175                                           ! Register BX used in function biosfn_write_char_attr
22176                                           ! 2609 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22177                       0000577E            _biosfn_write_char_only:
22178                                           !BCC_EOS
22179                                           !BCC_EOS
22180                                           !BCC_EOS
22181                                           !BCC_EOS
22182                                           ! 2610 {
22183                                           ! 2611  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22184                                           !BCC_EOS
22185                                           ! 2612  Bit16u nbcols,nbrows,address;
22186                                           !BCC_EOS
22187                                           ! 2613  Bit16u cursor,dummy;
22188                                           !BCC_EOS
22189                                           ! 2614  mode=read_byte(0x40,0x49);
22190 577E           55                         push	bp
22191 577F           89E5                       mov	bp,sp
22192 5781           83C4                   F0  add	sp,*-$10
22193                                           ! Debug: list int = const $49 (used reg = )
22194 5784           B8                   0049  mov	ax,*$49
22195 5787           50                         push	ax
22196                                           ! Debug: list int = const $40 (used reg = )
22197 5788           B8                   0040  mov	ax,*$40
22198 578B           50                         push	ax
22199                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22200 578C           E8         23FE            call	_read_byte
22201 578F           83C4                   04  add	sp,*4
22202                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22203 5792           8846         FC            mov	-4[bp],al
22204                                           !BCC_EOS
22205                                           ! 2615  line=find_vga_entry(mode);
22206                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22207 5795           8A46         FC            mov	al,-4[bp]
22208 5798           30E4                       xor	ah,ah
22209 579A           50                         push	ax
22210                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22211 579B           E8         2303            call	_find_vga_entry
22212 579E           44                         inc	sp
22213 579F           44                         inc	sp
22214                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22215 57A0           8846         FB            mov	-5[bp],al
22216                                           !BCC_EOS
22217                                           ! 2616  if(line==0xFF)return;
22218                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22219 57A3           8A46         FB            mov	al,-5[bp]
22220 57A6           3C                     FF  cmp	al,#$FF
22221 57A8           75           04            jne 	.19C
22222                       000057AA            .19D:
22223 57AA           89EC                       mov	sp,bp
22224 57AC           5D                         pop	bp
22225 57AD           C3                         ret
22226                                           !BCC_EOS
22227                                           ! 2617  biosfn_get_cursor_pos(page,&dummy,&cursor);
22228                       000057AE            .19C:
22229                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22230 57AE           8D5E         F2            lea	bx,-$E[bp]
22231 57B1           53                         push	bx
22232                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22233 57B2           8D5E         F0            lea	bx,-$10[bp]
22234 57B5           53                         push	bx
22235                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22236 57B6           8A46         06            mov	al,6[bp]
22237 57B9           30E4                       xor	ah,ah
22238 57BB           50                         push	ax
22239                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22240 57BC           E8         EC8A            call	_biosfn_get_cursor_pos
22241 57BF           83C4                   06  add	sp,*6
22242                                           !BCC_EOS
22243                                           ! 2618  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22244                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22245 57C2           8A46         F2            mov	al,-$E[bp]
22246                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22247 57C5           8846         FE            mov	-2[bp],al
22248                                           !BCC_EOS
22249                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22250 57C8           8B46         F2            mov	ax,-$E[bp]
22251 57CB           30C0                       xor	al,al
22252                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22253 57CD           88E0                       mov	al,ah
22254 57CF           30E4                       xor	ah,ah
22255                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22256 57D1           8846         FD            mov	-3[bp],al
22257                                           !BCC_EOS
22258                                           ! 2619  nbrows=read_byte(0x40,0x84)+1;
22259                                           ! Debug: list int = const $84 (used reg = )
22260 57D4           B8                   0084  mov	ax,#$84
22261 57D7           50                         push	ax
22262                                           ! Debug: list int = const $40 (used reg = )
22263 57D8           B8                   0040  mov	ax,*$40
22264 57DB           50                         push	ax
22265                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22266 57DC           E8         23AE            call	_read_byte
22267 57DF           83C4                   04  add	sp,*4
22268                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22269 57E2           30E4                       xor	ah,ah
22270                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22271 57E4           40                         inc	ax
22272 57E5           8946         F6            mov	-$A[bp],ax
22273                                           !BCC_EOS
22274                                           ! 2620  nbcols=read_word(0x40,0x4A);
22275                                           ! Debug: list int = const $4A (used reg = )
22276 57E8           B8                   004A  mov	ax,*$4A
22277 57EB           50                         push	ax
22278                                           ! Debug: list int = const $40 (used reg = )
22279 57EC           B8                   0040  mov	ax,*$40
22280 57EF           50                         push	ax
22281                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22282 57F0           E8         23AD            call	_read_word
22283 57F3           83C4                   04  add	sp,*4
22284                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22285 57F6           8946         F8            mov	-8[bp],ax
22286                                           !BCC_EOS
22287                                           ! 2621  if(vga_modes[line].class==0x00)
22288                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22289 57F9           8A46         FB            mov	al,-5[bp]
22290 57FC           30E4                       xor	ah,ah
22291 57FE           B1                     03  mov	cl,*3
22292 5800           D3E0                       shl	ax,cl
22293 5802           89C3                       mov	bx,ax
22294 5804           81C3                 01FD  add	bx,#_vga_modes
22295                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22296 5808           8A47         01            mov	al,1[bx]
22297 580B           84C0                       test	al,al
22298 580D           75           6E            jne 	.19E
22299                       0000580F            .19F:
22300                                           ! 2622   {
22301                                           ! 2623    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22302                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22303 580F           8A46         FD            mov	al,-3[bp]
22304 5812           30E4                       xor	ah,ah
22305 5814           8B4E         F8            mov	cx,-8[bp]
22306 5817           F7E9                       imul	cx
22307                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22308                                           ! Debug: expression subtree swapping
22309 5819           0246         FE            add	al,-2[bp]
22310 581C           80D4                   00  adc	ah,*0
22311                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22312 581F           D1E0                       shl	ax,*1
22313 5821           50                         push	ax
22314                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22315 5822           8B46         F8            mov	ax,-8[bp]
22316 5825           8B4E         F6            mov	cx,-$A[bp]
22317 5828           F7E9                       imul	cx
22318                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22319 582A           D1E0                       shl	ax,*1
22320                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22321 582C           0C                     FF  or	al,#$FF
22322                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22323                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22324 582E           89C3                       mov	bx,ax
22325 5830           8A46         06            mov	al,6[bp]
22326 5833           30E4                       xor	ah,ah
22327 5835           93                         xchg	ax,bx
22328 5836           40                         inc	ax
22329 5837           89D9                       mov	cx,bx
22330 5839           F7E9                       imul	cx
22331                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22332 583B           0346         EE            add	ax,-$12[bp]
22333 583E           44                         inc	sp
22334 583F           44                         inc	sp
22335                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22336 5840           8946         F4            mov	-$C[bp],ax
22337                                           !BCC_EOS
22338                                           ! 2624    while(count-->0)
22339                                           ! 2625     {write_byte(vga_modes[line].sstart,address,car);
22340 5843           EB           29            jmp .1A1
22341                       00005845            .1A2:
22342                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22343 5845           8A46         04            mov	al,4[bp]
22344 5848           30E4                       xor	ah,ah
22345 584A           50                         push	ax
22346                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22347 584B           FF76         F4            push	-$C[bp]
22348                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22349 584E           8A46         FB            mov	al,-5[bp]
22350 5851           30E4                       xor	ah,ah
22351 5853           B1                     03  mov	cl,*3
22352 5855           D3E0                       shl	ax,cl
22353 5857           89C3                       mov	bx,ax
22354 5859           81C3                 01FD  add	bx,#_vga_modes
22355                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22356 585D           FF77         04            push	4[bx]
22357                                           ! Debug: func () void = write_byte+0 (used reg = )
22358 5860           E8         2350            call	_write_byte
22359 5863           83C4                   06  add	sp,*6
22360                                           !BCC_EOS
22361                                           ! 2626      address+=2;
22362                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22363 5866           8B46         F4            mov	ax,-$C[bp]
22364 5869           40                         inc	ax
22365 586A           40                         inc	ax
22366 586B           8946         F4            mov	-$C[bp],ax
22367                                           !BCC_EOS
22368                                           ! 2627     }
22369                                           ! 2628   }
22370                       0000586E            .1A1:
22371                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22372 586E           8B46         0A            mov	ax,$A[bp]
22373 5871           48                         dec	ax
22374 5872           8946         0A            mov	$A[bp],ax
22375                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22376 5875           3D                   FFFF  cmp	ax,*-1
22377 5878           75           CB            jne	.1A2
22378                       0000587A            .1A3:
22379                       0000587A            .1A0:
22380                                           ! 2629  else
22381                                           ! 2630   {
22382 587A           E9         00F3            br 	.1A4
22383                       0000587D            .19E:
22384                                           ! 2631    cheight=video_param_table[line_to_vpti[line]].cheight;
22385                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22386 587D           8A46         FB            mov	al,-5[bp]
22387 5880           30E4                       xor	ah,ah
22388 5882           89C3                       mov	bx,ax
22389                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22390 5884           8A87       027D            mov	al,_line_to_vpti[bx]
22391 5888           30E4                       xor	ah,ah
22392 588A           B1                     06  mov	cl,*6
22393 588C           D3E0                       shl	ax,cl
22394 588E           89C3                       mov	bx,ax
22395 5890           81C3                 0291  add	bx,#_video_param_table
22396                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22397 5894           8A47         02            mov	al,2[bx]
22398 5897           8846         FF            mov	-1[bp],al
22399                                           !BCC_EOS
22400                                           ! 2632    bpp=vga_modes[line].pixbits;
22401                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22402 589A           8A46         FB            mov	al,-5[bp]
22403 589D           30E4                       xor	ah,ah
22404 589F           B1                     03  mov	cl,*3
22405 58A1           D3E0                       shl	ax,cl
22406 58A3           89C3                       mov	bx,ax
22407 58A5           81C3                 01FD  add	bx,#_vga_modes
22408                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22409 58A9           8A47         03            mov	al,3[bx]
22410 58AC           8846         FA            mov	-6[bp],al
22411                                           !BCC_EOS
22412                                           ! 2633    while((count-->0) && (xcurs<nbcols))
22413                                           ! 2634     {
22414 58AF           E9         00A6            br 	.1A6
22415                       000058B2            .1A7:
22416                                           ! 2635      switch(vga_modes[line].memmodel)
22417                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22418 58B2           8A46         FB            mov	al,-5[bp]
22419 58B5           30E4                       xor	ah,ah
22420 58B7           B1                     03  mov	cl,*3
22421 58B9           D3E0                       shl	ax,cl
22422 58BB           89C3                       mov	bx,ax
22423 58BD           81C3                 01FD  add	bx,#_vga_modes
22424 58C1           8A47         02            mov	al,2[bx]
22425                                           ! 2636       {
22426 58C4           EB           77            jmp .1AA
22427                                           ! 2637        case 0x04:
22428                                           ! 2638        case 0x03:
22429                       000058C6            .1AB:
22430                                           ! 2639          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22431                       000058C6            .1AC:
22432                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22433 58C6           8A46         FF            mov	al,-1[bp]
22434 58C9           30E4                       xor	ah,ah
22435 58CB           50                         push	ax
22436                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22437 58CC           FF76         F8            push	-8[bp]
22438                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22439 58CF           8A46         FD            mov	al,-3[bp]
22440 58D2           30E4                       xor	ah,ah
22441 58D4           50                         push	ax
22442                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22443 58D5           8A46         FE            mov	al,-2[bp]
22444 58D8           30E4                       xor	ah,ah
22445 58DA           50                         push	ax
22446                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22447 58DB           8A46         08            mov	al,8[bp]
22448 58DE           30E4                       xor	ah,ah
22449 58E0           50                         push	ax
22450                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22451 58E1           8A46         04            mov	al,4[bp]
22452 58E4           30E4                       xor	ah,ah
22453 58E6           50                         push	ax
22454                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22455 58E7           E8         F858            call	_write_gfx_char_pl4
22456 58EA           83C4                   0C  add	sp,*$C
22457                                           !BCC_EOS
22458                                           ! 2640          break;
22459 58ED           EB           62            jmp .1A8
22460                                           !BCC_EOS
22461                                           ! 2641        case 0x02:
22462                                           ! 2642          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22463                       000058EF            .1AD:
22464                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22465 58EF           8A46         FA            mov	al,-6[bp]
22466 58F2           30E4                       xor	ah,ah
22467 58F4           50                         push	ax
22468                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22469 58F5           FF76         F8            push	-8[bp]
22470                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22471 58F8           8A46         FD            mov	al,-3[bp]
22472 58FB           30E4                       xor	ah,ah
22473 58FD           50                         push	ax
22474                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22475 58FE           8A46         FE            mov	al,-2[bp]
22476 5901           30E4                       xor	ah,ah
22477 5903           50                         push	ax
22478                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22479 5904           8A46         08            mov	al,8[bp]
22480 5907           30E4                       xor	ah,ah
22481 5909           50                         push	ax
22482                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22483 590A           8A46         04            mov	al,4[bp]
22484 590D           30E4                       xor	ah,ah
22485 590F           50                         push	ax
22486                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22487 5910           E8         F9A2            call	_write_gfx_char_cga
22488 5913           83C4                   0C  add	sp,*$C
22489                                           !BCC_EOS
22490                                           ! 2643          break;
22491 5916           EB           39            jmp .1A8
22492                                           !BCC_EOS
22493                                           ! 2644        case 0x05:
22494                                           ! 2645          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22495                       00005918            .1AE:
22496                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22497 5918           FF76         F8            push	-8[bp]
22498                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22499 591B           8A46         FD            mov	al,-3[bp]
22500 591E           30E4                       xor	ah,ah
22501 5920           50                         push	ax
22502                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22503 5921           8A46         FE            mov	al,-2[bp]
22504 5924           30E4                       xor	ah,ah
22505 5926           50                         push	ax
22506                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22507 5927           8A46         08            mov	al,8[bp]
22508 592A           30E4                       xor	ah,ah
22509 592C           50                         push	ax
22510                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22511 592D           8A46         04            mov	al,4[bp]
22512 5930           30E4                       xor	ah,ah
22513 5932           50                         push	ax
22514                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22515 5933           E8         FB82            call	_write_gfx_char_lin
22516 5936           83C4                   0A  add	sp,*$A
22517                                           !BCC_EOS
22518                                           ! 2646          break;
22519 5939           EB           16            jmp .1A8
22520                                           !BCC_EOS
22521                                           ! 2647       }
22522                                           ! 2648      xcurs++;
22523 593B           EB           14            jmp .1A8
22524                       0000593D            .1AA:
22525 593D           2C                     02  sub	al,*2
22526 593F           74           AE            je 	.1AD
22527 5941           2C                     01  sub	al,*1
22528 5943         0F84         FF7F            beq 	.1AC
22529 5947           2C                     01  sub	al,*1
22530 5949         0F84         FF79            beq 	.1AB
22531 594D           2C                     01  sub	al,*1
22532 594F           74           C7            je 	.1AE
22533                       00005951            .1A8:
22534                       FFFFFFEE            ..FFF9	=	-$12
22535                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22536 5951           8A46         FE            mov	al,-2[bp]
22537 5954           40                         inc	ax
22538 5955           8846         FE            mov	-2[bp],al
22539                                           !BCC_EOS
22540                                           ! 2649     }
22541                                           ! 2650   }
22542                       00005958            .1A6:
22543                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22544 5958           8B46         0A            mov	ax,$A[bp]
22545 595B           48                         dec	ax
22546 595C           8946         0A            mov	$A[bp],ax
22547                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22548 595F           3D                   FFFF  cmp	ax,*-1
22549 5962           74           0C            je  	.1AF
22550                       00005964            .1B0:
22551                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22552 5964           8A46         FE            mov	al,-2[bp]
22553 5967           30E4                       xor	ah,ah
22554 5969           3B46         F8            cmp	ax,-8[bp]
22555 596C         0F82         FF42            blo 	.1A7
22556                       00005970            .1AF:
22557                       00005970            .1A5:
22558                                           ! 2651 }
22559                       00005970            .1A4:
22560 5970           89EC                       mov	sp,bp
22561 5972           5D                         pop	bp
22562 5973           C3                         ret
22563                                           ! 2652 #asm
22564                                           !BCC_ASM
22565                       00000008            _biosfn_write_char_only.count	set	8
22566                       00000006            _biosfn_write_char_only.attr	set	6
22567                       00000004            _biosfn_write_char_only.page	set	4
22568                       00000002            _biosfn_write_char_only.car	set	2
22569                       00005974            biosfn_group_0B:
22570 5974           80FF                   00    cmp bh, #0x00
22571 5977           74           06              je biosfn_set_border_color
22572 5979           80FF                   01    cmp bh, #0x01
22573 597C           74           40              je biosfn_set_palette
22574 597E           C3                           ret
22575                       0000597F            biosfn_set_border_color:
22576 597F           50                           push ax
22577 5980           53                           push bx
22578 5981           51                           push cx
22579 5982           52                           push dx
22580 5983           BA                   03DA    mov dx, # 0x3da
22581 5986           EC                           in al, dx
22582 5987           BA                   03C0    mov dx, # 0x3c0
22583 598A           B0                     00    mov al, #0x00
22584 598C           EE                           out dx, al
22585 598D           88D8                         mov al, bl
22586 598F           24                     0F    and al, #0x0f
22587 5991           A8                     08    test al, #0x08
22588 5993           74           02              jz set_low_border
22589 5995           04                     08    add al, #0x08
22590                       00005997            set_low_border:
22591 5997           EE                           out dx, al
22592 5998           B1                     01    mov cl, #0x01
22593 599A           80E3                   10    and bl, #0x10
22594                       0000599D            set_intensity_loop:
22595 599D           BA                   03C0    mov dx, # 0x3c0
22596 59A0           88C8                         mov al, cl
22597 59A2           EE                           out dx, al
22598 59A3           BA                   03C1    mov dx, # 0x3c1
22599 59A6           EC                           in al, dx
22600 59A7           24                     EF    and al, #0xef
22601 59A9           08D8                         or al, bl
22602 59AB           BA                   03C0    mov dx, # 0x3c0
22603 59AE           EE                           out dx, al
22604 59AF           FEC1                         inc cl
22605 59B1           80F9                   04    cmp cl, #0x04
22606 59B4           75           E7              jne set_intensity_loop
22607 59B6           B0                     20    mov al, #0x20
22608 59B8           EE                           out dx, al
22609 59B9           5A                           pop dx
22610 59BA           59                           pop cx
22611 59BB           5B                           pop bx
22612 59BC           58                           pop ax
22613 59BD           C3                           ret
22614                       000059BE            biosfn_set_palette:
22615 59BE           50                           push ax
22616 59BF           53                           push bx
22617 59C0           51                           push cx
22618 59C1           52                           push dx
22619 59C2           BA                   03DA    mov dx, # 0x3da
22620 59C5           EC                           in al, dx
22621 59C6           B1                     01    mov cl, #0x01
22622 59C8           80E3                   01    and bl, #0x01
22623                       000059CB            set_cga_palette_loop:
22624 59CB           BA                   03C0    mov dx, # 0x3c0
22625 59CE           88C8                         mov al, cl
22626 59D0           EE                           out dx, al
22627 59D1           BA                   03C1    mov dx, # 0x3c1
22628 59D4           EC                           in al, dx
22629 59D5           24                     FE    and al, #0xfe
22630 59D7           08D8                         or al, bl
22631 59D9           BA                   03C0    mov dx, # 0x3c0
22632 59DC           EE                           out dx, al
22633 59DD           FEC1                         inc cl
22634 59DF           80F9                   04    cmp cl, #0x04
22635 59E2           75           E7              jne set_cga_palette_loop
22636 59E4           B0                     20    mov al, #0x20
22637 59E6           EE                           out dx, al
22638 59E7           5A                           pop dx
22639 59E8           59                           pop cx
22640 59E9           5B                           pop bx
22641 59EA           58                           pop ax
22642 59EB           C3                           ret
22643                                           ! 2727 endasm
22644                                           !BCC_ENDASM
22645                                           ! 2728 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22646                                           ! Register BX used in function biosfn_write_char_only
22647                       000059EC            _biosfn_write_pixel:
22648                                           !BCC_EOS
22649                                           !BCC_EOS
22650                                           !BCC_EOS
22651                                           !BCC_EOS
22652                                           ! 2729 {
22653                                           ! 2730  Bit8u mode,line,mask,attr,data;
22654                                           !BCC_EOS
22655                                           ! 2731  Bit16u addr;
22656                                           !BCC_EOS
22657                                           ! 2732  mode=read_byte(0x40,0x49);
22658 59EC           55                         push	bp
22659 59ED           89E5                       mov	bp,sp
22660 59EF           83C4                   F8  add	sp,*-8
22661                                           ! Debug: list int = const $49 (used reg = )
22662 59F2           B8                   0049  mov	ax,*$49
22663 59F5           50                         push	ax
22664                                           ! Debug: list int = const $40 (used reg = )
22665 59F6           B8                   0040  mov	ax,*$40
22666 59F9           50                         push	ax
22667                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22668 59FA           E8         2190            call	_read_byte
22669 59FD           83C4                   04  add	sp,*4
22670                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22671 5A00           8846         FF            mov	-1[bp],al
22672                                           !BCC_EOS
22673                                           ! 2733  line=find_vga_entry(mode);
22674                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22675 5A03           8A46         FF            mov	al,-1[bp]
22676 5A06           30E4                       xor	ah,ah
22677 5A08           50                         push	ax
22678                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22679 5A09           E8         2095            call	_find_vga_entry
22680 5A0C           44                         inc	sp
22681 5A0D           44                         inc	sp
22682                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22683 5A0E           8846         FE            mov	-2[bp],al
22684                                           !BCC_EOS
22685                                           ! 2734  if(line==0xFF)return;
22686                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22687 5A11           8A46         FE            mov	al,-2[bp]
22688 5A14           3C                     FF  cmp	al,#$FF
22689 5A16           75           04            jne 	.1B1
22690                       00005A18            .1B2:
22691 5A18           89EC                       mov	sp,bp
22692 5A1A           5D                         pop	bp
22693 5A1B           C3                         ret
22694                                           !BCC_EOS
22695                                           ! 2735  if(vga_modes[line].class==0x00)return;
22696                       00005A1C            .1B1:
22697                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22698 5A1C           8A46         FE            mov	al,-2[bp]
22699 5A1F           30E4                       xor	ah,ah
22700 5A21           B1                     03  mov	cl,*3
22701 5A23           D3E0                       shl	ax,cl
22702 5A25           89C3                       mov	bx,ax
22703 5A27           81C3                 01FD  add	bx,#_vga_modes
22704                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22705 5A2B           8A47         01            mov	al,1[bx]
22706 5A2E           84C0                       test	al,al
22707 5A30           75           04            jne 	.1B3
22708                       00005A32            .1B4:
22709 5A32           89EC                       mov	sp,bp
22710 5A34           5D                         pop	bp
22711 5A35           C3                         ret
22712                                           !BCC_EOS
22713                                           ! 2736  switch(vga_modes[line].memmodel)
22714                       00005A36            .1B3:
22715                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22716 5A36           8A46         FE            mov	al,-2[bp]
22717 5A39           30E4                       xor	ah,ah
22718 5A3B           B1                     03  mov	cl,*3
22719 5A3D           D3E0                       shl	ax,cl
22720 5A3F           89C3                       mov	bx,ax
22721 5A41           81C3                 01FD  add	bx,#_vga_modes
22722 5A45           8A47         02            mov	al,2[bx]
22723                                           ! 2737   {
22724 5A48           E9         0223            br 	.1B7
22725                                           ! 2738    case 0x04:
22726                                           ! 2739    case 0x03:
22727                       00005A4B            .1B8:
22728                                           ! 2740      addr = CX/8+DX*read_word(0x40,0x4A);
22729                       00005A4B            .1B9:
22730                                           ! Debug: list int = const $4A (used reg = )
22731 5A4B           B8                   004A  mov	ax,*$4A
22732 5A4E           50                         push	ax
22733                                           ! Debug: list int = const $40 (used reg = )
22734 5A4F           B8                   0040  mov	ax,*$40
22735 5A52           50                         push	ax
22736                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22737 5A53           E8         214A            call	_read_word
22738 5A56           83C4                   04  add	sp,*4
22739                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22740                                           ! Debug: expression subtree swapping
22741 5A59           8B4E         0A            mov	cx,$A[bp]
22742 5A5C           F7E9                       imul	cx
22743 5A5E           50                         push	ax
22744                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22745 5A5F           8B46         08            mov	ax,8[bp]
22746 5A62           B1                     03  mov	cl,*3
22747 5A64           D3E8                       shr	ax,cl
22748                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22749 5A66           0346         F6            add	ax,0+..FFF8[bp]
22750 5A69           44                         inc	sp
22751 5A6A           44                         inc	sp
22752                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22753 5A6B           8946         F8            mov	-8[bp],ax
22754                                           !BCC_EOS
22755                                           ! 2741      mask = 0x80 >> (CX & 0x07);
22756                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22757 5A6E           8A46         08            mov	al,8[bp]
22758 5A71           24                     07  and	al,*7
22759                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22760 5A73           30E4                       xor	ah,ah
22761 5A75           89C3                       mov	bx,ax
22762 5A77           B8                   0080  mov	ax,#$80
22763 5A7A           89D9                       mov	cx,bx
22764 5A7C           D3F8                       sar	ax,cl
22765                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22766 5A7E           8846         FD            mov	-3[bp],al
22767                                           !BCC_EOS
22768                                           ! 2742      outw(0x3ce, (mask << 8) | 0x08);
22769                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22770 5A81           8A46         FD            mov	al,-3[bp]
22771 5A84           30E4                       xor	ah,ah
22772 5A86           88C4                       mov	ah,al
22773 5A88           30C0                       xor	al,al
22774                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22775 5A8A           0C                     08  or	al,*8
22776                                           ! Debug: list unsigned int = ax+0 (used reg = )
22777 5A8C           50                         push	ax
22778                                           ! Debug: list int = const $3CE (used reg = )
22779 5A8D           B8                   03CE  mov	ax,#$3CE
22780 5A90           50                         push	ax
22781                                           ! Debug: func () void = outw+0 (used reg = )
22782 5A91           E8         2175            call	_outw
22783 5A94           83C4                   04  add	sp,*4
22784                                           !BCC_EOS
22785                                           ! 2743      outw(0x3ce, 0x0205);
22786                                           ! Debug: list int = const $205 (used reg = )
22787 5A97           B8                   0205  mov	ax,#$205
22788 5A9A           50                         push	ax
22789                                           ! Debug: list int = const $3CE (used reg = )
22790 5A9B           B8                   03CE  mov	ax,#$3CE
22791 5A9E           50                         push	ax
22792                                           ! Debug: func () void = outw+0 (used reg = )
22793 5A9F           E8         2167            call	_outw
22794 5AA2           83C4                   04  add	sp,*4
22795                                           !BCC_EOS
22796                                           ! 2744      data = read_byte(0xa000,addr);
22797                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22798 5AA5           FF76         F8            push	-8[bp]
22799                                           ! Debug: list unsigned int = const $A000 (used reg = )
22800 5AA8           B8                   A000  mov	ax,#$A000
22801 5AAB           50                         push	ax
22802                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22803 5AAC           E8         20DE            call	_read_byte
22804 5AAF           83C4                   04  add	sp,*4
22805                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22806 5AB2           8846         FB            mov	-5[bp],al
22807                                           !BCC_EOS
22808                                           ! 2745      if (AL & 0x80)
22809                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22810 5AB5           8A46         06            mov	al,6[bp]
22811 5AB8           24                     80  and	al,#$80
22812 5ABA           84C0                       test	al,al
22813 5ABC           74           0E            je  	.1BA
22814                       00005ABE            .1BB:
22815                                           ! 2746       {
22816                                           ! 2747        outw(0x3ce, 0x1803);
22817                                           ! Debug: list int = const $1803 (used reg = )
22818 5ABE           B8                   1803  mov	ax,#$1803
22819 5AC1           50                         push	ax
22820                                           ! Debug: list int = const $3CE (used reg = )
22821 5AC2           B8                   03CE  mov	ax,#$3CE
22822 5AC5           50                         push	ax
22823                                           ! Debug: func () void = outw+0 (used reg = )
22824 5AC6           E8         2140            call	_outw
22825 5AC9           83C4                   04  add	sp,*4
22826                                           !BCC_EOS
22827                                           ! 2748       }
22828                                           ! 2749      write_byte(0xa000,addr,AL);
22829                       00005ACC            .1BA:
22830                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22831 5ACC           8A46         06            mov	al,6[bp]
22832 5ACF           30E4                       xor	ah,ah
22833 5AD1           50                         push	ax
22834                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22835 5AD2           FF76         F8            push	-8[bp]
22836                                           ! Debug: list unsigned int = const $A000 (used reg = )
22837 5AD5           B8                   A000  mov	ax,#$A000
22838 5AD8           50                         push	ax
22839                                           ! Debug: func () void = write_byte+0 (used reg = )
22840 5AD9           E8         20D7            call	_write_byte
22841 5ADC           83C4                   06  add	sp,*6
22842                                           !BCC_EOS
22843                                           ! 2750 #asm
22844                                           !BCC_EOS
22845                                           !BCC_ASM
22846                       0000000C            _biosfn_write_pixel.BH	set	$C
22847                       00000004            .biosfn_write_pixel.BH	set	4
22848                       00000010            _biosfn_write_pixel.CX	set	$10
22849                       00000008            .biosfn_write_pixel.CX	set	8
22850                       00000006            _biosfn_write_pixel.line	set	6
22851                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22852                       0000000E            _biosfn_write_pixel.AL	set	$E
22853                       00000006            .biosfn_write_pixel.AL	set	6
22854                       00000003            _biosfn_write_pixel.data	set	3
22855                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22856                       00000012            _biosfn_write_pixel.DX	set	$12
22857                       0000000A            .biosfn_write_pixel.DX	set	$A
22858                       00000005            _biosfn_write_pixel.mask	set	5
22859                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22860                       00000004            _biosfn_write_pixel.attr	set	4
22861                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22862                       00000007            _biosfn_write_pixel.mode	set	7
22863                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22864                       00000000            _biosfn_write_pixel.addr	set	0
22865                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22866 5ADF           BA                   03CE       mov dx, # 0x3ce
22867 5AE2           B8                   FF08       mov ax, #0xff08
22868 5AE5           EF                              out dx, ax
22869 5AE6           B8                   0005       mov ax, #0x0005
22870 5AE9           EF                              out dx, ax
22871 5AEA           B8                   0003       mov ax, #0x0003
22872 5AED           EF                              out dx, ax
22873                                           ! 2758 endasm
22874                                           !BCC_ENDASM
22875                                           !BCC_EOS
22876                                           ! 2759      break;
22877 5AEE           E9         0193            br 	.1B5
22878                                           !BCC_EOS
22879                                           ! 2760    case 0x02:
22880                                           ! 2761      if(vga_modes[line].pixbits==2)
22881                       00005AF1            .1BC:
22882                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22883 5AF1           8A46         FE            mov	al,-2[bp]
22884 5AF4           30E4                       xor	ah,ah
22885 5AF6           B1                     03  mov	cl,*3
22886 5AF8           D3E0                       shl	ax,cl
22887 5AFA           89C3                       mov	bx,ax
22888 5AFC           81C3                 01FD  add	bx,#_vga_modes
22889                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22890 5B00           8A47         03            mov	al,3[bx]
22891 5B03           3C                     02  cmp	al,*2
22892 5B05           75           1C            jne 	.1BD
22893                       00005B07            .1BE:
22894                                           ! 2762       {
22895                                           ! 2763        addr=(CX>>2)+(DX>>1)*80;
22896                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22897 5B07           8B46         0A            mov	ax,$A[bp]
22898 5B0A           D1E8                       shr	ax,*1
22899                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22900 5B0C           B9                   0050  mov	cx,*$50
22901 5B0F           F7E9                       imul	cx
22902 5B11           50                         push	ax
22903                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22904 5B12           8B46         08            mov	ax,8[bp]
22905 5B15           D1E8                       shr	ax,*1
22906 5B17           D1E8                       shr	ax,*1
22907                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22908 5B19           0346         F6            add	ax,0+..FFF8[bp]
22909 5B1C           44                         inc	sp
22910 5B1D           44                         inc	sp
22911                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22912 5B1E           8946         F8            mov	-8[bp],ax
22913                                           !BCC_EOS
22914                                           ! 2764       }
22915                                           ! 2765      else
22916                                           ! 2766       {
22917 5B21           EB           1A            jmp .1BF
22918                       00005B23            .1BD:
22919                                           ! 2767        addr=(CX>>3)+(DX>>1)*80;
22920                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22921 5B23           8B46         0A            mov	ax,$A[bp]
22922 5B26           D1E8                       shr	ax,*1
22923                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22924 5B28           B9                   0050  mov	cx,*$50
22925 5B2B           F7E9                       imul	cx
22926 5B2D           50                         push	ax
22927                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22928 5B2E           8B46         08            mov	ax,8[bp]
22929 5B31           B1                     03  mov	cl,*3
22930 5B33           D3E8                       shr	ax,cl
22931                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22932 5B35           0346         F6            add	ax,0+..FFF8[bp]
22933 5B38           44                         inc	sp
22934 5B39           44                         inc	sp
22935                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22936 5B3A           8946         F8            mov	-8[bp],ax
22937                                           !BCC_EOS
22938                                           ! 2768       }
22939                                           ! 2769      if (DX & 1) addr += 0x2000;
22940                       00005B3D            .1BF:
22941                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22942 5B3D           8A46         0A            mov	al,$A[bp]
22943 5B40           24                     01  and	al,*1
22944 5B42           84C0                       test	al,al
22945 5B44           74           09            je  	.1C0
22946                       00005B46            .1C1:
22947                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22948 5B46           8B46         F8            mov	ax,-8[bp]
22949 5B49           05                   2000  add	ax,#$2000
22950 5B4C           8946         F8            mov	-8[bp],ax
22951                                           !BCC_EOS
22952                                           ! 2770      data = read_byte(0xb800,addr);
22953                       00005B4F            .1C0:
22954                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22955 5B4F           FF76         F8            push	-8[bp]
22956                                           ! Debug: list unsigned int = const $B800 (used reg = )
22957 5B52           B8                   B800  mov	ax,#$B800
22958 5B55           50                         push	ax
22959                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22960 5B56           E8         2034            call	_read_byte
22961 5B59           83C4                   04  add	sp,*4
22962                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22963 5B5C           8846         FB            mov	-5[bp],al
22964                                           !BCC_EOS
22965                                           ! 2771      if(vg
22966                                           ! 2771 a_modes[line].pixbits==2)
22967                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22968 5B5F           8A46         FE            mov	al,-2[bp]
22969 5B62           30E4                       xor	ah,ah
22970 5B64           B1                     03  mov	cl,*3
22971 5B66           D3E0                       shl	ax,cl
22972 5B68           89C3                       mov	bx,ax
22973 5B6A           81C3                 01FD  add	bx,#_vga_modes
22974                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22975 5B6E           8A47         03            mov	al,3[bx]
22976 5B71           3C                     02  cmp	al,*2
22977 5B73           75           46            jne 	.1C2
22978                       00005B75            .1C3:
22979                                           ! 2772       {
22980                                           ! 2773        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22981                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22982 5B75           8A46         08            mov	al,8[bp]
22983 5B78           24                     03  and	al,*3
22984                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22985 5B7A           50                         push	ax
22986 5B7B           B8                   0003  mov	ax,*3
22987 5B7E           2A46         F6            sub	al,0+..FFF8[bp]
22988 5B81           80DC                   00  sbb	ah,*0
22989 5B84           44                         inc	sp
22990 5B85           44                         inc	sp
22991                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22992 5B86           D1E0                       shl	ax,*1
22993 5B88           50                         push	ax
22994                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22995 5B89           8A46         06            mov	al,6[bp]
22996 5B8C           24                     03  and	al,*3
22997                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22998 5B8E           30E4                       xor	ah,ah
22999 5B90           8B4E         F6            mov	cx,0+..FFF8[bp]
23000 5B93           D3E0                       shl	ax,cl
23001 5B95           44                         inc	sp
23002 5B96           44                         inc	sp
23003                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23004 5B97           8846         FC            mov	-4[bp],al
23005                                           !BCC_EOS
23006                                           ! 2774        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
23007                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23008 5B9A           8A46         08            mov	al,8[bp]
23009 5B9D           24                     03  and	al,*3
23010                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23011 5B9F           50                         push	ax
23012 5BA0           B8                   0003  mov	ax,*3
23013 5BA3           2A46         F6            sub	al,0+..FFF8[bp]
23014 5BA6           80DC                   00  sbb	ah,*0
23015 5BA9           44                         inc	sp
23016 5BAA           44                         inc	sp
23017                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23018 5BAB           D1E0                       shl	ax,*1
23019                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
23020 5BAD           89C3                       mov	bx,ax
23021 5BAF           B8                   0003  mov	ax,*3
23022 5BB2           89D9                       mov	cx,bx
23023 5BB4           D3E0                       shl	ax,cl
23024                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23025 5BB6           8846         FD            mov	-3[bp],al
23026                                           !BCC_EOS
23027                                           ! 2775       }
23028                                           ! 2776      else
23029                                           ! 2777       {
23030 5BB9           EB           40            jmp .1C4
23031                       00005BBB            .1C2:
23032                                           ! 2778        attr = (AL & 0x01) << (7 - (CX & 0x07));
23033                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23034 5BBB           8A46         08            mov	al,8[bp]
23035 5BBE           24                     07  and	al,*7
23036                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23037 5BC0           50                         push	ax
23038 5BC1           B8                   0007  mov	ax,*7
23039 5BC4           2A46         F6            sub	al,0+..FFF8[bp]
23040 5BC7           80DC                   00  sbb	ah,*0
23041 5BCA           44                         inc	sp
23042 5BCB           44                         inc	sp
23043 5BCC           50                         push	ax
23044                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23045 5BCD           8A46         06            mov	al,6[bp]
23046 5BD0           24                     01  and	al,*1
23047                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23048 5BD2           30E4                       xor	ah,ah
23049 5BD4           8B4E         F6            mov	cx,0+..FFF8[bp]
23050 5BD7           D3E0                       shl	ax,cl
23051 5BD9           44                         inc	sp
23052 5BDA           44                         inc	sp
23053                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23054 5BDB           8846         FC            mov	-4[bp],al
23055                                           !BCC_EOS
23056                                           ! 2779        mask = 0x01 << (7 - (CX & 0x07));
23057                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23058 5BDE           8A46         08            mov	al,8[bp]
23059 5BE1           24                     07  and	al,*7
23060                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23061 5BE3           50                         push	ax
23062 5BE4           B8                   0007  mov	ax,*7
23063 5BE7           2A46         F6            sub	al,0+..FFF8[bp]
23064 5BEA           80DC                   00  sbb	ah,*0
23065 5BED           44                         inc	sp
23066 5BEE           44                         inc	sp
23067                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23068 5BEF           89C3                       mov	bx,ax
23069 5BF1           B8                   0001  mov	ax,*1
23070 5BF4           89D9                       mov	cx,bx
23071 5BF6           D3E0                       shl	ax,cl
23072                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23073 5BF8           8846         FD            mov	-3[bp],al
23074                                           !BCC_EOS
23075                                           ! 2780       }
23076                                           ! 2781      if (AL & 0x80)
23077                       00005BFB            .1C4:
23078                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23079 5BFB           8A46         06            mov	al,6[bp]
23080 5BFE           24                     80  and	al,#$80
23081 5C00           84C0                       test	al,al
23082 5C02           74           0B            je  	.1C5
23083                       00005C04            .1C6:
23084                                           ! 2782       {
23085                                           ! 2783        data ^= attr;
23086                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23087 5C04           8A46         FB            mov	al,-5[bp]
23088 5C07           3246         FC            xor	al,-4[bp]
23089 5C0A           8846         FB            mov	-5[bp],al
23090                                           !BCC_EOS
23091                                           ! 2784       }
23092                                           ! 2785      else
23093                                           ! 2786       {
23094 5C0D           EB           16            jmp .1C7
23095                       00005C0F            .1C5:
23096                                           ! 2787        data &= ~mask;
23097                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23098 5C0F           8A46         FD            mov	al,-3[bp]
23099 5C12           30E4                       xor	ah,ah
23100 5C14           F7D0                       not	ax
23101                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23102 5C16           2246         FB            and	al,-5[bp]
23103 5C19           8846         FB            mov	-5[bp],al
23104                                           !BCC_EOS
23105                                           ! 2788        data |= attr;
23106                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23107 5C1C           8A46         FB            mov	al,-5[bp]
23108 5C1F           0A46         FC            or	al,-4[bp]
23109 5C22           8846         FB            mov	-5[bp],al
23110                                           !BCC_EOS
23111                                           ! 2789       }
23112                                           ! 2790      write_byte(0xb800,addr,data);
23113                       00005C25            .1C7:
23114                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23115 5C25           8A46         FB            mov	al,-5[bp]
23116 5C28           30E4                       xor	ah,ah
23117 5C2A           50                         push	ax
23118                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23119 5C2B           FF76         F8            push	-8[bp]
23120                                           ! Debug: list unsigned int = const $B800 (used reg = )
23121 5C2E           B8                   B800  mov	ax,#$B800
23122 5C31           50                         push	ax
23123                                           ! Debug: func () void = write_byte+0 (used reg = )
23124 5C32           E8         1F7E            call	_write_byte
23125 5C35           83C4                   06  add	sp,*6
23126                                           !BCC_EOS
23127                                           ! 2791      break;
23128 5C38           EB           4A            jmp .1B5
23129                                           !BCC_EOS
23130                                           ! 2792    case 0x05:
23131                                           ! 2793      addr=CX+DX*(read_word(0x40,0x4A)*8);
23132                       00005C3A            .1C8:
23133                                           ! Debug: list int = const $4A (used reg = )
23134 5C3A           B8                   004A  mov	ax,*$4A
23135 5C3D           50                         push	ax
23136                                           ! Debug: list int = const $40 (used reg = )
23137 5C3E           B8                   0040  mov	ax,*$40
23138 5C41           50                         push	ax
23139                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23140 5C42           E8         1F5B            call	_read_word
23141 5C45           83C4                   04  add	sp,*4
23142                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23143 5C48           B1                     03  mov	cl,*3
23144 5C4A           D3E0                       shl	ax,cl
23145                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23146                                           ! Debug: expression subtree swapping
23147 5C4C           8B4E         0A            mov	cx,$A[bp]
23148 5C4F           F7E9                       imul	cx
23149                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23150                                           ! Debug: expression subtree swapping
23151 5C51           0346         08            add	ax,8[bp]
23152                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23153 5C54           8946         F8            mov	-8[bp],ax
23154                                           !BCC_EOS
23155                                           ! 2794      write_byte(0xa000,addr,AL);
23156                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23157 5C57           8A46         06            mov	al,6[bp]
23158 5C5A           30E4                       xor	ah,ah
23159 5C5C           50                         push	ax
23160                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23161 5C5D           FF76         F8            push	-8[bp]
23162                                           ! Debug: list unsigned int = const $A000 (used reg = )
23163 5C60           B8                   A000  mov	ax,#$A000
23164 5C63           50                         push	ax
23165                                           ! Debug: func () void = write_byte+0 (used reg = )
23166 5C64           E8         1F4C            call	_write_byte
23167 5C67           83C4                   06  add	sp,*6
23168                                           !BCC_EOS
23169                                           ! 2795      break;
23170 5C6A           EB           18            jmp .1B5
23171                                           !BCC_EOS
23172                                           ! 2796   }
23173                                           ! 2797 }
23174 5C6C           EB           16            jmp .1B5
23175                       00005C6E            .1B7:
23176 5C6E           2C                     02  sub	al,*2
23177 5C70         0F84         FE7D            beq 	.1BC
23178 5C74           2C                     01  sub	al,*1
23179 5C76         0F84         FDD1            beq 	.1B9
23180 5C7A           2C                     01  sub	al,*1
23181 5C7C         0F84         FDCB            beq 	.1B8
23182 5C80           2C                     01  sub	al,*1
23183 5C82           74           B6            je 	.1C8
23184                       00005C84            .1B5:
23185                       FFFFFFF6            ..FFF8	=	-$A
23186 5C84           89EC                       mov	sp,bp
23187 5C86           5D                         pop	bp
23188 5C87           C3                         ret
23189                                           ! 2798 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23190                                           ! Register BX used in function biosfn_write_pixel
23191                       00005C88            _biosfn_read_pixel:
23192                                           !BCC_EOS
23193                                           !BCC_EOS
23194                                           !BCC_EOS
23195                                           !BCC_EOS
23196                                           ! 2799 {
23197                                           ! 2800  Bit8u mode,line,mask,attr,data,i;
23198                                           !BCC_EOS
23199                                           ! 2801  Bit16u addr;
23200                                           !BCC_EOS
23201                                           ! 2802  Bit16u ss=get_SS();
23202 5C88           55                         push	bp
23203 5C89           89E5                       mov	bp,sp
23204 5C8B           83C4                   F6  add	sp,*-$A
23205                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23206 5C8E           E8         1F88            call	_get_SS
23207                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23208 5C91           8946         F6            mov	-$A[bp],ax
23209                                           !BCC_EOS
23210                                           ! 2803  mode=read_byte(0x40,0x49);
23211                                           ! Debug: list int = const $49 (used reg = )
23212 5C94           B8                   0049  mov	ax,*$49
23213 5C97           50                         push	ax
23214                                           ! Debug: list int = const $40 (used reg = )
23215 5C98           B8                   0040  mov	ax,*$40
23216 5C9B           50                         push	ax
23217                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23218 5C9C           E8         1EEE            call	_read_byte
23219 5C9F           83C4                   04  add	sp,*4
23220                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23221 5CA2           8846         FF            mov	-1[bp],al
23222                                           !BCC_EOS
23223                                           ! 2804  line=find_vga_entry(mode);
23224                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23225 5CA5           8A46         FF            mov	al,-1[bp]
23226 5CA8           30E4                       xor	ah,ah
23227 5CAA           50                         push	ax
23228                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23229 5CAB           E8         1DF3            call	_find_vga_entry
23230 5CAE           44                         inc	sp
23231 5CAF           44                         inc	sp
23232                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23233 5CB0           8846         FE            mov	-2[bp],al
23234                                           !BCC_EOS
23235                                           ! 2805  if(line==0xFF)return;
23236                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23237 5CB3           8A46         FE            mov	al,-2[bp]
23238 5CB6           3C                     FF  cmp	al,#$FF
23239 5CB8           75           04            jne 	.1C9
23240                       00005CBA            .1CA:
23241 5CBA           89EC                       mov	sp,bp
23242 5CBC           5D                         pop	bp
23243 5CBD           C3                         ret
23244                                           !BCC_EOS
23245                                           ! 2806  if(vga_modes[line].class==0x00)return;
23246                       00005CBE            .1C9:
23247                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23248 5CBE           8A46         FE            mov	al,-2[bp]
23249 5CC1           30E4                       xor	ah,ah
23250 5CC3           B1                     03  mov	cl,*3
23251 5CC5           D3E0                       shl	ax,cl
23252 5CC7           89C3                       mov	bx,ax
23253 5CC9           81C3                 01FD  add	bx,#_vga_modes
23254                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23255 5CCD           8A47         01            mov	al,1[bx]
23256 5CD0           84C0                       test	al,al
23257 5CD2           75           04            jne 	.1CB
23258                       00005CD4            .1CC:
23259 5CD4           89EC                       mov	sp,bp
23260 5CD6           5D                         pop	bp
23261 5CD7           C3                         ret
23262                                           !BCC_EOS
23263                                           ! 2807  switch(vga_modes[line].memmodel)
23264                       00005CD8            .1CB:
23265                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23266 5CD8           8A46         FE            mov	al,-2[bp]
23267 5CDB           30E4                       xor	ah,ah
23268 5CDD           B1                     03  mov	cl,*3
23269 5CDF           D3E0                       shl	ax,cl
23270 5CE1           89C3                       mov	bx,ax
23271 5CE3           81C3                 01FD  add	bx,#_vga_modes
23272 5CE7           8A47         02            mov	al,2[bx]
23273                                           ! 2808   {
23274 5CEA           E9         0167            br 	.1CF
23275                                           ! 2809    case 0x04:
23276                                           ! 2810    case 0x03:
23277                       00005CED            .1D0:
23278                                           ! 2811      addr = CX/8+DX*read_word(0x40,0x4A);
23279                       00005CED            .1D1:
23280                                           ! Debug: list int = const $4A (used reg = )
23281 5CED           B8                   004A  mov	ax,*$4A
23282 5CF0           50                         push	ax
23283                                           ! Debug: list int = const $40 (used reg = )
23284 5CF1           B8                   0040  mov	ax,*$40
23285 5CF4           50                         push	ax
23286                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23287 5CF5           E8         1EA8            call	_read_word
23288 5CF8           83C4                   04  add	sp,*4
23289                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23290                                           ! Debug: expression subtree swapping
23291 5CFB           8B4E         08            mov	cx,8[bp]
23292 5CFE           F7E9                       imul	cx
23293 5D00           50                         push	ax
23294                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23295 5D01           8B46         06            mov	ax,6[bp]
23296 5D04           B1                     03  mov	cl,*3
23297 5D06           D3E8                       shr	ax,cl
23298                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23299 5D08           0346         F4            add	ax,0+..FFF7[bp]
23300 5D0B           44                         inc	sp
23301 5D0C           44                         inc	sp
23302                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23303 5D0D           8946         F8            mov	-8[bp],ax
23304                                           !BCC_EOS
23305                                           ! 2812      mask = 0x80 >> (CX & 0x07);
23306                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23307 5D10           8A46         06            mov	al,6[bp]
23308 5D13           24                     07  and	al,*7
23309                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23310 5D15           30E4                       xor	ah,ah
23311 5D17           89C3                       mov	bx,ax
23312 5D19           B8                   0080  mov	ax,#$80
23313 5D1C           89D9                       mov	cx,bx
23314 5D1E           D3F8                       sar	ax,cl
23315                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23316 5D20           8846         FD            mov	-3[bp],al
23317                                           !BCC_EOS
23318                                           ! 2813      attr = 0x00;
23319                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23320 5D23           30C0                       xor	al,al
23321 5D25           8846         FC            mov	-4[bp],al
23322                                           !BCC_EOS
23323                                           ! 2814      for(i=0;i<4;i++)
23324                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23325 5D28           30C0                       xor	al,al
23326 5D2A           8846         FA            mov	-6[bp],al
23327                                           !BCC_EOS
23328                                           !BCC_EOS
23329                                           ! 2815       {
23330 5D2D           EB           4B            jmp .1D4
23331                       00005D2F            .1D5:
23332                                           ! 2816        outw(0x3ce, (i << 8) | 0x04);
23333                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23334 5D2F           8A46         FA            mov	al,-6[bp]
23335 5D32           30E4                       xor	ah,ah
23336 5D34           88C4                       mov	ah,al
23337 5D36           30C0                       xor	al,al
23338                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23339 5D38           0C                     04  or	al,*4
23340                                           ! Debug: list unsigned int = ax+0 (used reg = )
23341 5D3A           50                         push	ax
23342                                           ! Debug: list int = const $3CE (used reg = )
23343 5D3B           B8                   03CE  mov	ax,#$3CE
23344 5D3E           50                         push	ax
23345                                           ! Debug: func () void = outw+0 (used reg = )
23346 5D3F           E8         1EC7            call	_outw
23347 5D42           83C4                   04  add	sp,*4
23348                                           !BCC_EOS
23349                                           ! 2817        data = read_byte(0xa000,addr) & mask;
23350                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23351 5D45           FF76         F8            push	-8[bp]
23352                                           ! Debug: list unsigned int = const $A000 (used reg = )
23353 5D48           B8                   A000  mov	ax,#$A000
23354 5D4B           50                         push	ax
23355                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23356 5D4C           E8         1E3E            call	_read_byte
23357 5D4F           83C4                   04  add	sp,*4
23358                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23359 5D52           2246         FD            and	al,-3[bp]
23360                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23361 5D55           8846         FB            mov	-5[bp],al
23362                                           !BCC_EOS
23363                                           ! 2818        if (data > 0) attr |= (0x01 << i);
23364                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23365 5D58           8A46         FB            mov	al,-5[bp]
23366 5D5B           84C0                       test	al,al
23367 5D5D           74           14            je  	.1D6
23368                       00005D5F            .1D7:
23369                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23370 5D5F           8A46         FA            mov	al,-6[bp]
23371 5D62           30E4                       xor	ah,ah
23372 5D64           89C3                       mov	bx,ax
23373 5D66           B8                   0001  mov	ax,*1
23374 5D69           89D9                       mov	cx,bx
23375 5D6B           D3E0                       shl	ax,cl
23376                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23377 5D6D           0A46         FC            or	al,-4[bp]
23378 5D70           8846         FC            mov	-4[bp],al
23379                                           !BCC_EOS
23380                                           ! 2819       }
23381                       00005D73            .1D6:
23382                                           ! 2820      break;
23383                       00005D73            .1D3:
23384                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23385 5D73           8A46         FA            mov	al,-6[bp]
23386 5D76           40                         inc	ax
23387 5D77           8846         FA            mov	-6[bp],al
23388                       00005D7A            .1D4:
23389                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23390 5D7A           8A46         FA            mov	al,-6[bp]
23391 5D7D           3C                     04  cmp	al,*4
23392 5D7F           72           AE            jb 	.1D5
23393                       00005D81            .1D8:
23394                       00005D81            .1D2:
23395 5D81           E9         00E8            br 	.1CD
23396                                           !BCC_EOS
23397                                           ! 2821    case 0x02:
23398                                           ! 2822      addr=(CX>>2)+(DX>>1)*80;
23399                       00005D84            .1D9:
23400                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23401 5D84           8B46         08            mov	ax,8[bp]
23402 5D87           D1E8                       shr	ax,*1
23403                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23404 5D89           B9                   0050  mov	cx,*$50
23405 5D8C           F7E9                       imul	cx
23406 5D8E           50                         push	ax
23407                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23408 5D8F           8B46         06            mov	ax,6[bp]
23409 5D92           D1E8                       shr	ax,*1
23410 5D94           D1E8                       shr	ax,*1
23411                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23412 5D96           0346         F4            add	ax,0+..FFF7[bp]
23413 5D99           44                         inc	sp
23414 5D9A           44                         inc	sp
23415                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23416 5D9B           8946         F8            mov	-8[bp],ax
23417                                           !BCC_EOS
23418                                           ! 2823      if (DX & 1) addr += 0x2000;
23419                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23420 5D9E           8A46         08            mov	al,8[bp]
23421 5DA1           24                     01  and	al,*1
23422 5DA3           84C0                       test	al,al
23423 5DA5           74           09            je  	.1DA
23424                       00005DA7            .1DB:
23425                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23426 5DA7           8B46         F8            mov	ax,-8[bp]
23427 5DAA           05                   2000  add	ax,#$2000
23428 5DAD           8946         F8            mov	-8[bp],ax
23429                                           !BCC_EOS
23430                                           ! 2824      data = read_byte(0xb800,addr);
23431                       00005DB0            .1DA:
23432                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23433 5DB0           FF76         F8            push	-8[bp]
23434                                           ! Debug: list unsigned int = const $B800 (used reg = )
23435 5DB3           B8                   B800  mov	ax,#$B800
23436 5DB6           50                         push	ax
23437                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23438 5DB7           E8         1DD3            call	_read_byte
23439 5DBA           83C4                   04  add	sp,*4
23440                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23441 5DBD           8846         FB            mov	-5[bp],al
23442                                           !BCC_EOS
23443                                           ! 2825      if(vga_modes[line].pixbits==2)
23444                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23445 5DC0           8A46         FE            mov	al,-2[bp]
23446 5DC3           30E4                       xor	ah,ah
23447 5DC5           B1                     03  mov	cl,*3
23448 5DC7           D3E0                       shl	ax,cl
23449 5DC9           89C3                       mov	bx,ax
23450 5DCB           81C3                 01FD  add	bx,#_vga_modes
23451                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23452 5DCF           8A47         03            mov	al,3[bx]
23453 5DD2           3C                     02  cmp	al,*2
23454 5DD4           75           25            jne 	.1DC
23455                       00005DD6            .1DD:
23456                                           ! 2826       {
23457                                           ! 2827        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23458                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23459 5DD6           8A46         06            mov	al,6[bp]
23460 5DD9           24                     03  and	al,*3
23461                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23462 5DDB           50                         push	ax
23463 5DDC           B8                   0003  mov	ax,*3
23464 5DDF           2A46         F4            sub	al,0+..FFF7[bp]
23465 5DE2           80DC                   00  sbb	ah,*0
23466 5DE5           44                         inc	sp
23467 5DE6           44                         inc	sp
23468                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23469 5DE7           D1E0                       shl	ax,*1
23470                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23471 5DE9           89C3                       mov	bx,ax
23472 5DEB           8A46         FB            mov	al,-5[bp]
23473 5DEE           30E4                       xor	ah,ah
23474 5DF0           89D9                       mov	cx,bx
23475 5DF2           D3E8                       shr	ax,cl
23476                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23477 5DF4           24                     03  and	al,*3
23478                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23479 5DF6           8846         FC            mov	-4[bp],al
23480                                           !BCC_EOS
23481                                           ! 2828       }
23482                                           ! 2829      else
23483                                           ! 2830       {
23484 5DF9           EB           21            jmp .1DE
23485                       00005DFB            .1DC:
23486                                           ! 2831        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23487                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23488 5DFB           8A46         06            mov	al,6[bp]
23489 5DFE           24                     07  and	al,*7
23490                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23491 5E00           50                         push	ax
23492 5E01           B8                   0007  mov	ax,*7
23493 5E04           2A46         F4            sub	al,0+..FFF7[bp]
23494 5E07           80DC                   00  sbb	ah,*0
23495 5E0A           44                         inc	sp
23496 5E0B           44                         inc	sp
23497                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23498 5E0C           89C3                       mov	bx,ax
23499 5E0E           8A46         FB            mov	al,-5[bp]
23500 5E11           30E4                       xor	ah,ah
23501 5E13           89D9                       mov	cx,bx
23502 5E15           D3E8                       shr	ax,cl
23503                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23504 5E17           24                     01  and	al,*1
23505                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23506 5E19           8846         FC            mov	-4[bp],al
23507                                           !BCC_EOS
23508                                           ! 2832       }
23509                                           ! 2833      break;
23510                       00005E1C            .1DE:
23511 5E1C           EB           4E            jmp .1CD
23512                                           !BCC_EOS
23513                                           ! 2834    case 0x05:
23514                                           ! 2835      addr=CX+DX*(read_word(0x40,0x4A)*8);
23515                       00005E1E            .1DF:
23516                                           ! Debug: list int = const $4A (used reg = )
23517 5E1E           B8                   004A  mov	ax,*$4A
23518 5E21           50                         push	ax
23519                                           ! Debug: list int = const $40 (used reg = )
23520 5E22           B8                   0040  mov	ax,*$40
23521 5E25           50                         push	ax
23522                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23523 5E26           E8         1D77            call	_read_word
23524 5E29           83C4                   04  add	sp,*4
23525                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23526 5E2C           B1                     03  mov	cl,*3
23527 5E2E           D3E0                       shl	ax,cl
23528                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23529                                           ! Debug: expression subtree swapping
23530 5E30           8B4E         08            mov	cx,8[bp]
23531 5E33           F7E9                       imul	cx
23532                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23533                                           ! Debug: expression subtree swapping
23534 5E35           0346         06            add	ax,6[bp]
23535                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23536 5E38           8946         F8            mov	-8[bp],ax
23537                                           !BCC_EOS
23538                                           ! 2836      attr=read_byte(0xa000,addr);
23539                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23540 5E3B           FF76         F8            push	-8[bp]
23541                                           ! Debug: list unsigned int = const $A000 (used reg = )
23542 5E3E           B8                   A000  mov	ax,#$A000
23543 5E41           50                         push	ax
23544                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23545 5E42           E8         1D48            call	_read_byte
23546 5E45           83C4                   04  add	sp,*4
23547                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23548 5E48           8846         FC            mov	-4[bp],al
23549                                           !BCC_EOS
23550                                           ! 2837      break;
23551 5E4B           EB           1F            jmp .1CD
23552                                           !BCC_EOS
23553                                           ! 2838    default:
23554                                           ! 2839      attr = 0;
23555                       00005E4D            .1E0:
23556                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23557 5E4D           30C0                       xor	al,al
23558 5E4F           8846         FC            mov	-4[bp],al
23559                                           !BCC_EOS
23560                                           ! 2840   }
23561                                           ! 2841  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23562 5E52           EB           18            jmp .1CD
23563                       00005E54            .1CF:
23564 5E54           2C                     02  sub	al,*2
23565 5E56         0F84         FF2A            beq 	.1D9
23566 5E5A           2C                     01  sub	al,*1
23567 5E5C         0F84         FE8D            beq 	.1D1
23568 5E60           2C                     01  sub	al,*1
23569 5E62         0F84         FE87            beq 	.1D0
23570 5E66           2C                     01  sub	al,*1
23571 5E68           74           B4            je 	.1DF
23572 5E6A           EB           E1            jmp	.1E0
23573                       00005E6C            .1CD:
23574                       FFFFFFF4            ..FFF7	=	-$C
23575                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23576 5E6C           FF76         0A            push	$A[bp]
23577                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23578 5E6F           FF76         F6            push	-$A[bp]
23579                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23580 5E72           E8         1D2B            call	_read_word
23581 5E75           83C4                   04  add	sp,*4
23582                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23583 5E78           30C0                       xor	al,al
23584                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23585 5E7A           0A46         FC            or	al,-4[bp]
23586                                           ! Debug: list unsigned int = ax+0 (used reg = )
23587 5E7D           50                         push	ax
23588                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23589 5E7E           FF76         0A            push	$A[bp]
23590                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23591 5E81           FF76         F6            push	-$A[bp]
23592                                           ! Debug: func () void = write_word+0 (used reg = )
23593 5E84           E8         1D44            call	_write_word
23594 5E87           83C4                   06  add	sp,*6
23595                                           !BCC_EOS
23596                                           ! 2842 }
23597 5E8A           89EC                       mov	sp,bp
23598 5E8C           5D                         pop	bp
23599 5E8D           C3                         ret
23600                                           ! 2843 static void biosfn_write_teletype (car, page, attr, flag)
23601                                           ! Register BX used in function biosfn_read_pixel
23602                                           ! 2844 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23603                       00005E8E            _biosfn_write_teletype:
23604                                           !BCC_EOS
23605                                           !BCC_EOS
23606                                           !BCC_EOS
23607                                           !BCC_EOS
23608                                           ! 2845 {
23609                                           ! 2846  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23610                                           !BCC_EOS
23611                                           ! 2847  Bit16u nbcols,nbrows,address;
23612                                           !BCC_EOS
23613                                           ! 2848  Bit16u cursor,dummy;
23614                                           !BCC_EOS
23615                                           ! 2849  if(page==0xff)
23616 5E8E           55                         push	bp
23617 5E8F           89E5                       mov	bp,sp
23618 5E91           83C4                   F0  add	sp,*-$10
23619                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23620 5E94           8A46         06            mov	al,6[bp]
23621 5E97           3C                     FF  cmp	al,#$FF
23622 5E99           75           11            jne 	.1E1
23623                       00005E9B            .1E2:
23624                                           ! 2850   page=read_byte(0x40,0x62);
23625                                           ! Debug: list int = const $62 (used reg = )
23626 5E9B           B8                   0062  mov	ax,*$62
23627 5E9E           50                         push	ax
23628                                           ! Debug: list int = const $40 (used reg = )
23629 5E9F           B8                   0040  mov	ax,*$40
23630 5EA2           50                         push	ax
23631                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23632 5EA3           E8         1CE7            call	_read_byte
23633 5EA6           83C4                   04  add	sp,*4
23634                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23635 5EA9           8846         06            mov	6[bp],al
23636                                           !BCC_EOS
23637                                           ! 2851  mode=read_byte(0x40,0x49);
23638                       00005EAC            .1E1:
23639                                           ! Debug: list int = const $49 (used reg = )
23640 5EAC           B8                   0049  mov	ax,*$49
23641 5EAF           50                         push	ax
23642                                           ! Debug: list int = const $40 (used reg = )
23643 5EB0           B8                   0040  mov	ax,*$40
23644 5EB3           50                         push	ax
23645                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23646 5EB4           E8         1CD6            call	_read_byte
23647 5EB7           83C4                   04  add	sp,*4
23648                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23649 5EBA           8846         FC            mov	-4[bp],al
23650                                           !BCC_EOS
23651                                           ! 2852  line=find_vga_entry(mode);
23652                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23653 5EBD           8A46         FC            mov	al,-4[bp]
23654 5EC0           30E4                       xor	ah,ah
23655 5EC2           50                         push	ax
23656                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23657 5EC3           E8         1BDB            call	_find_vga_entry
23658 5EC6           44                         inc	sp
23659 5EC7           44                         inc	sp
23660                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23661 5EC8           8846         FB            mov	-5[bp],al
23662                                           !BCC_EOS
23663                                           ! 2853  if(line==0xFF)return;
23664                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23665 5ECB           8A46         FB            mov	al,-5[bp]
23666 5ECE           3C                     FF  cmp	al,#$FF
23667 5ED0           75           04            jne 	.1E3
23668                       00005ED2            .1E4:
23669 5ED2           89EC                       mov	sp,bp
23670 5ED4           5D                         pop	bp
23671 5ED5           C3                         ret
23672                                           !BCC_EOS
23673                                           ! 2854  biosfn_get_cursor_pos(page,&dummy,&cursor);
23674                       00005ED6            .1E3:
23675                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23676 5ED6           8D5E         F2            lea	bx,-$E[bp]
23677 5ED9           53                         push	bx
23678                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23679 5EDA           8D5E         F0            lea	bx,-$10[bp]
23680 5EDD           53                         push	bx
23681                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23682 5EDE           8A46         06            mov	al,6[bp]
23683 5EE1           30E4                       xor	ah,ah
23684 5EE3           50                         push	ax
23685                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23686 5EE4           E8         E562            call	_biosfn_get_cursor_pos
23687 5EE7           83C4                   06  add	sp,*6
23688                                           !BCC_EOS
23689                                           ! 2855  xcurs=cursor&0x00ff;ycurs=(cursor
23690                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23691 5EEA           8A46         F2            mov	al,-$E[bp]
23692                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23693 5EED           8846         FE            mov	-2[bp],al
23694                                           !BCC_EOS
23695                                           ! 2855 &0xff00)>>8;
23696                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23697 5EF0           8B46         F2            mov	ax,-$E[bp]
23698 5EF3           30C0                       xor	al,al
23699                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23700 5EF5           88E0                       mov	al,ah
23701 5EF7           30E4                       xor	ah,ah
23702                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23703 5EF9           8846         FD            mov	-3[bp],al
23704                                           !BCC_EOS
23705                                           ! 2856  nbrows=read_byte(0x40,0x84)+1;
23706                                           ! Debug: list int = const $84 (used reg = )
23707 5EFC           B8                   0084  mov	ax,#$84
23708 5EFF           50                         push	ax
23709                                           ! Debug: list int = const $40 (used reg = )
23710 5F00           B8                   0040  mov	ax,*$40
23711 5F03           50                         push	ax
23712                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23713 5F04           E8         1C86            call	_read_byte
23714 5F07           83C4                   04  add	sp,*4
23715                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23716 5F0A           30E4                       xor	ah,ah
23717                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23718 5F0C           40                         inc	ax
23719 5F0D           8946         F6            mov	-$A[bp],ax
23720                                           !BCC_EOS
23721                                           ! 2857  nbcols=read_word(0x40,0x4A);
23722                                           ! Debug: list int = const $4A (used reg = )
23723 5F10           B8                   004A  mov	ax,*$4A
23724 5F13           50                         push	ax
23725                                           ! Debug: list int = const $40 (used reg = )
23726 5F14           B8                   0040  mov	ax,*$40
23727 5F17           50                         push	ax
23728                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23729 5F18           E8         1C85            call	_read_word
23730 5F1B           83C4                   04  add	sp,*4
23731                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23732 5F1E           8946         F8            mov	-8[bp],ax
23733                                           !BCC_EOS
23734                                           ! 2858  switch(car)
23735 5F21           8A46         04            mov	al,4[bp]
23736                                           ! 2859   {
23737 5F24           E9         01ED            br 	.1E7
23738                                           ! 2860    case 7:
23739                                           ! 2861     break;
23740                       00005F27            .1E8:
23741 5F27           E9         020B            br 	.1E5
23742                                           !BCC_EOS
23743                                           ! 2862    case 8:
23744                                           ! 2863     if(xcurs>0)xcurs--;
23745                       00005F2A            .1E9:
23746                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23747 5F2A           8A46         FE            mov	al,-2[bp]
23748 5F2D           84C0                       test	al,al
23749 5F2F           74           07            je  	.1EA
23750                       00005F31            .1EB:
23751                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23752 5F31           8A46         FE            mov	al,-2[bp]
23753 5F34           48                         dec	ax
23754 5F35           8846         FE            mov	-2[bp],al
23755                                           !BCC_EOS
23756                                           ! 2864     break;
23757                       00005F38            .1EA:
23758 5F38           E9         01FA            br 	.1E5
23759                                           !BCC_EOS
23760                                           ! 2865    case '\r':
23761                                           ! 2866     xcurs=0;
23762                       00005F3B            .1EC:
23763                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23764 5F3B           30C0                       xor	al,al
23765 5F3D           8846         FE            mov	-2[bp],al
23766                                           !BCC_EOS
23767                                           ! 2867     break;
23768 5F40           E9         01F2            br 	.1E5
23769                                           !BCC_EOS
23770                                           ! 2868    case '\n':
23771                                           ! 2869     ycurs++;
23772                       00005F43            .1ED:
23773                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23774 5F43           8A46         FD            mov	al,-3[bp]
23775 5F46           40                         inc	ax
23776 5F47           8846         FD            mov	-3[bp],al
23777                                           !BCC_EOS
23778                                           ! 2870     break;
23779 5F4A           E9         01E8            br 	.1E5
23780                                           !BCC_EOS
23781                                           ! 2871    case '\t':
23782                                           ! 2872     do
23783                       00005F4D            .1EE:
23784                                           ! 2873      {
23785                       00005F4D            .1F1:
23786                                           ! 2874       biosfn_write_teletype(' ',page,attr,flag);
23787                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23788 5F4D           8A46         0A            mov	al,$A[bp]
23789 5F50           30E4                       xor	ah,ah
23790 5F52           50                         push	ax
23791                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23792 5F53           8A46         08            mov	al,8[bp]
23793 5F56           30E4                       xor	ah,ah
23794 5F58           50                         push	ax
23795                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23796 5F59           8A46         06            mov	al,6[bp]
23797 5F5C           30E4                       xor	ah,ah
23798 5F5E           50                         push	ax
23799                                           ! Debug: list int = const $20 (used reg = )
23800 5F5F           B8                   0020  mov	ax,*$20
23801 5F62           50                         push	ax
23802                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23803 5F63           E8         FF28            call	_biosfn_write_teletype
23804 5F66           83C4                   08  add	sp,*8
23805                                           !BCC_EOS
23806                                           ! 2875       biosfn_get_cursor_pos(page,&dummy,&cursor);
23807                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23808 5F69           8D5E         F2            lea	bx,-$E[bp]
23809 5F6C           53                         push	bx
23810                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23811 5F6D           8D5E         F0            lea	bx,-$10[bp]
23812 5F70           53                         push	bx
23813                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23814 5F71           8A46         06            mov	al,6[bp]
23815 5F74           30E4                       xor	ah,ah
23816 5F76           50                         push	ax
23817                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23818 5F77           E8         E4CF            call	_biosfn_get_cursor_pos
23819 5F7A           83C4                   06  add	sp,*6
23820                                           !BCC_EOS
23821                                           ! 2876       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23822                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23823 5F7D           8A46         F2            mov	al,-$E[bp]
23824                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23825 5F80           8846         FE            mov	-2[bp],al
23826                                           !BCC_EOS
23827                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23828 5F83           8B46         F2            mov	ax,-$E[bp]
23829 5F86           30C0                       xor	al,al
23830                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23831 5F88           88E0                       mov	al,ah
23832 5F8A           30E4                       xor	ah,ah
23833                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23834 5F8C           8846         FD            mov	-3[bp],al
23835                                           !BCC_EOS
23836                                           ! 2877      }while(xcurs%8==0);
23837                       00005F8F            .1F0:
23838                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23839 5F8F           8A46         FE            mov	al,-2[bp]
23840 5F92           30E4                       xor	ah,ah
23841 5F94           24                     07  and	al,*7
23842                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23843 5F96           84C0                       test	al,al
23844 5F98           74           B3            je 	.1F1
23845                       00005F9A            .1F2:
23846                                           !BCC_EOS
23847                                           ! 2878     break;
23848                       00005F9A            .1EF:
23849 5F9A           E9         0198            br 	.1E5
23850                                           !BCC_EOS
23851                                           ! 2879    default:
23852                                           ! 2880     if(vga_modes[line].class==0x00)
23853                       00005F9D            .1F3:
23854                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23855 5F9D           8A46         FB            mov	al,-5[bp]
23856 5FA0           30E4                       xor	ah,ah
23857 5FA2           B1                     03  mov	cl,*3
23858 5FA4           D3E0                       shl	ax,cl
23859 5FA6           89C3                       mov	bx,ax
23860 5FA8           81C3                 01FD  add	bx,#_vga_modes
23861                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23862 5FAC           8A47         01            mov	al,1[bx]
23863 5FAF           84C0                       test	al,al
23864 5FB1         0F85         0084            bne 	.1F4
23865                       00005FB5            .1F5:
23866                                           ! 2881      {
23867                                           ! 2882       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23868                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23869 5FB5           8A46         FD            mov	al,-3[bp]
23870 5FB8           30E4                       xor	ah,ah
23871 5FBA           8B4E         F8            mov	cx,-8[bp]
23872 5FBD           F7E9                       imul	cx
23873                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23874                                           ! Debug: expression subtree swapping
23875 5FBF           0246         FE            add	al,-2[bp]
23876 5FC2           80D4                   00  adc	ah,*0
23877                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23878 5FC5           D1E0                       shl	ax,*1
23879 5FC7           50                         push	ax
23880                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23881 5FC8           8B46         F8            mov	ax,-8[bp]
23882 5FCB           8B4E         F6            mov	cx,-$A[bp]
23883 5FCE           F7E9                       imul	cx
23884                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23885 5FD0           D1E0                       shl	ax,*1
23886                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23887 5FD2           0C                     FF  or	al,#$FF
23888                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23889                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23890 5FD4           89C3                       mov	bx,ax
23891 5FD6           8A46         06            mov	al,6[bp]
23892 5FD9           30E4                       xor	ah,ah
23893 5FDB           93                         xchg	ax,bx
23894 5FDC           40                         inc	ax
23895 5FDD           89D9                       mov	cx,bx
23896 5FDF           F7E9                       imul	cx
23897                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23898 5FE1           0346         EE            add	ax,0+..FFF6[bp]
23899 5FE4           44                         inc	sp
23900 5FE5           44                         inc	sp
23901                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23902 5FE6           8946         F4            mov	-$C[bp],ax
23903                                           !BCC_EOS
23904                                           ! 2883       write_byte(vga_modes[line].sstart,address,car);
23905                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23906 5FE9           8A46         04            mov	al,4[bp]
23907 5FEC           30E4                       xor	ah,ah
23908 5FEE           50                         push	ax
23909                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23910 5FEF           FF76         F4            push	-$C[bp]
23911                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23912 5FF2           8A46         FB            mov	al,-5[bp]
23913 5FF5           30E4                       xor	ah,ah
23914 5FF7           B1                     03  mov	cl,*3
23915 5FF9           D3E0                       shl	ax,cl
23916 5FFB           89C3                       mov	bx,ax
23917 5FFD           81C3                 01FD  add	bx,#_vga_modes
23918                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23919 6001           FF77         04            push	4[bx]
23920                                           ! Debug: func () void = write_byte+0 (used reg = )
23921 6004           E8         1BAC            call	_write_byte
23922 6007           83C4                   06  add	sp,*6
23923                                           !BCC_EOS
23924                                           ! 2884       if(flag==3)
23925                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23926 600A           8A46         0A            mov	al,$A[bp]
23927 600D           3C                     03  cmp	al,*3
23928 600F         0F85         0023            bne 	.1F6
23929                       00006013            .1F7:
23930                                           ! 2885        write_byte(vga_modes[line].sstart,address+1,attr);
23931                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23932 6013           8A46         08            mov	al,8[bp]
23933 6016           30E4                       xor	ah,ah
23934 6018           50                         push	ax
23935                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23936 6019           8B46         F4            mov	ax,-$C[bp]
23937                                           ! Debug: list unsigned int = ax+1 (used reg = )
23938 601C           40                         inc	ax
23939 601D           50                         push	ax
23940                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23941 601E           8A46         FB            mov	al,-5[bp]
23942 6021           30E4                       xor	ah,ah
23943 6023           B1                     03  mov	cl,*3
23944 6025           D3E0                       shl	ax,cl
23945 6027           89C3                       mov	bx,ax
23946 6029           81C3                 01FD  add	bx,#_vga_modes
23947                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23948 602D           FF77         04            push	4[bx]
23949                                           ! Debug: func () void = write_byte+0 (used reg = )
23950 6030           E8         1B80            call	_write_byte
23951 6033           83C4                   06  add	sp,*6
23952                                           !BCC_EOS
23953                                           ! 2886      }
23954                       00006036            .1F6:
23955                                           ! 2887     else
23956                                           ! 2888      {
23957 6036           E9         00D2            br 	.1F8
23958                       00006039            .1F4:
23959                                           ! 2889       cheight=video_param_table[line_to_vpti[line]].cheight;
23960                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23961 6039           8A46         FB            mov	al,-5[bp]
23962 603C           30E4                       xor	ah,ah
23963 603E           89C3                       mov	bx,ax
23964                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23965 6040           8A87       027D            mov	al,_line_to_vpti[bx]
23966 6044           30E4                       xor	ah,ah
23967 6046           B1                     06  mov	cl,*6
23968 6048           D3E0                       shl	ax,cl
23969 604A           89C3                       mov	bx,ax
23970 604C           81C3                 0291  add	bx,#_video_param_table
23971                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23972 6050           8A47         02            mov	al,2[bx]
23973 6053           8846         FF            mov	-1[bp],al
23974                                           !BCC_EOS
23975                                           ! 2890       bpp=vga_modes[line].pixbits;
23976                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23977 6056           8A46         FB            mov	al,-5[bp]
23978 6059           30E4                       xor	ah,ah
23979 605B           B1                     03  mov	cl,*3
23980 605D           D3E0                       shl	ax,cl
23981 605F           89C3                       mov	bx,ax
23982 6061           81C3                 01FD  add	bx,#_vga_modes
23983                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23984 6065           8A47         03            mov	al,3[bx]
23985 6068           8846         FA            mov	-6[bp],al
23986                                           !BCC_EOS
23987                                           ! 2891       switch(vga_modes[line].memmodel)
23988                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23989 606B           8A46         FB            mov	al,-5[bp]
23990 606E           30E4                       xor	ah,ah
23991 6070           B1                     03  mov	cl,*3
23992 6072           D3E0                       shl	ax,cl
23993 6074           89C3                       mov	bx,ax
23994 6076           81C3                 01FD  add	bx,#_vga_modes
23995 607A           8A47         02            mov	al,2[bx]
23996                                           ! 2892        {
23997 607D           E9         0077            br 	.1FB
23998                                           ! 2893         case 0x04:
23999                                           ! 2894         case 0x03:
24000                       00006080            .1FC:
24001                                           ! 2895           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
24002                       00006080            .1FD:
24003                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
24004 6080           8A46         FF            mov	al,-1[bp]
24005 6083           30E4                       xor	ah,ah
24006 6085           50                         push	ax
24007                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24008 6086           FF76         F8            push	-8[bp]
24009                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24010 6089           8A46         FD            mov	al,-3[bp]
24011 608C           30E4                       xor	ah,ah
24012 608E           50                         push	ax
24013                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24014 608F           8A46         FE            mov	al,-2[bp]
24015 6092           30E4                       xor	ah,ah
24016 6094           50                         push	ax
24017                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24018 6095           8A46         08            mov	al,8[bp]
24019 6098           30E4                       xor	ah,ah
24020 609A           50                         push	ax
24021                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24022 609B           8A46         04            mov	al,4[bp]
24023 609E           30E4                       xor	ah,ah
24024 60A0           50                         push	ax
24025                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
24026 60A1           E8         F09E            call	_write_gfx_char_pl4
24027 60A4           83C4                   0C  add	sp,*$C
24028                                           !BCC_EOS
24029                                           ! 2896           break;
24030 60A7           EB           62            jmp .1F9
24031                                           !BCC_EOS
24032                                           ! 2897         case 0x02:
24033                                           ! 2898           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
24034                       000060A9            .1FE:
24035                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24036 60A9           8A46         FA            mov	al,-6[bp]
24037 60AC           30E4                       xor	ah,ah
24038 60AE           50                         push	ax
24039                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24040 60AF           FF76         F8            push	-8[bp]
24041                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24042 60B2           8A46         FD            mov	al,-3[bp]
24043 60B5           30E4                       xor	ah,ah
24044 60B7           50                         push	ax
24045                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24046 60B8           8A46         FE            mov	al,-2[bp]
24047 60BB           30E4                       xor	ah,ah
24048 60BD           50                         push	ax
24049                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24050 60BE           8A46         08            mov	al,8[bp]
24051 60C1           30E4                       xor	ah,ah
24052 60C3           50                         push	ax
24053                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24054 60C4           8A46         04            mov	al,4[bp]
24055 60C7           30E4                       xor	ah,ah
24056 60C9           50                         push	ax
24057                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24058 60CA           E8         F1E8            call	_write_gfx_char_cga
24059 60CD           83C4                   0C  add	sp,*$C
24060                                           !BCC_EOS
24061                                           ! 2899           break;
24062 60D0           EB           39            jmp .1F9
24063                                           !BCC_EOS
24064                                           ! 2900         case 0x05:
24065                                           ! 2901           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24066                       000060D2            .1FF:
24067                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24068 60D2           FF76         F8            push	-8[bp]
24069                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24070 60D5           8A46         FD            mov	al,-3[bp]
24071 60D8           30E4                       xor	ah,ah
24072 60DA           50                         push	ax
24073                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24074 60DB           8A46         FE            mov	al,-2[bp]
24075 60DE           30E4                       xor	ah,ah
24076 60E0           50                         push	ax
24077                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24078 60E1           8A46         08            mov	al,8[bp]
24079 60E4           30E4                       xor	ah,ah
24080 60E6           50                         push	ax
24081                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24082 60E7           8A46         04            mov	al,4[bp]
24083 60EA           30E4                       xor	ah,ah
24084 60EC           50                         push	ax
24085                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24086 60ED           E8         F3C8            call	_write_gfx_char_lin
24087 60F0           83C4                   0A  add	sp,*$A
24088                                           !BCC_EOS
24089                                           ! 2902           break;
24090 60F3           EB           16            jmp .1F9
24091                                           !BCC_EOS
24092                                           ! 2903        }
24093                                           ! 2904      }
24094 60F5           EB           14            jmp .1F9
24095                       000060F7            .1FB:
24096 60F7           2C                     02  sub	al,*2
24097 60F9           74           AE            je 	.1FE
24098 60FB           2C                     01  sub	al,*1
24099 60FD         0F84         FF7F            beq 	.1FD
24100 6101           2C                     01  sub	al,*1
24101 6103         0F84         FF79            beq 	.1FC
24102 6107           2C                     01  sub	al,*1
24103 6109           74           C7            je 	.1FF
24104                       0000610B            .1F9:
24105                                           ! 2905     xcurs++;
24106                       0000610B            .1F8:
24107                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24108 610B           8A46         FE            mov	al,-2[bp]
24109 610E           40                         inc	ax
24110 610F           8846         FE            mov	-2[bp],al
24111                                           !BCC_EOS
24112                                           ! 2906   }
24113                                           ! 2907  if(xcurs==nbcols)
24114 6112           EB           21            jmp .1E5
24115                       00006114            .1E7:
24116 6114           2C                     07  sub	al,*7
24117 6116         0F84         FE0D            beq 	.1E8
24118 611A           2C                     01  sub	al,*1
24119 611C         0F84         FE0A            beq 	.1E9
24120 6120           2C                     01  sub	al,*1
24121 6122         0F84         FE27            beq 	.1EE
24122 6126           2C                     01  sub	al,*1
24123 6128         0F84         FE17            beq 	.1ED
24124 612C           2C                     03  sub	al,*3
24125 612E         0F84         FE09            beq 	.1EC
24126 6132           E9         FE68            br 	.1F3
24127                       00006135            .1E5:
24128                       FFFFFFEE            ..FFF6	=	-$12
24129                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24130 6135           8A46         FE            mov	al,-2[bp]
24131 6138           30E4                       xor	ah,ah
24132 613A           3B46         F8            cmp	ax,-8[bp]
24133 613D           75           0C            jne 	.200
24134                       0000613F            .201:
24135                                           ! 2908   {xcurs=0;
24136                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24137 613F           30C0                       xor	al,al
24138 6141           8846         FE            mov	-2[bp],al
24139                                           !BCC_EOS
24140                                           ! 2909    ycurs++;
24141                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24142 6144           8A46         FD            mov	al,-3[bp]
24143 6147           40                         inc	ax
24144 6148           8846         FD            mov	-3[bp],al
24145                                           !BCC_EOS
24146                                           ! 2910   }
24147                                           ! 2911  if(ycurs==nbrows)
24148                       0000614B            .200:
24149                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24150 614B           8A46         FD            mov	al,-3[bp]
24151 614E           30E4                       xor	ah,ah
24152 6150           3B46         F6            cmp	ax,-$A[bp]
24153 6153           75           70            jne 	.202
24154                       00006155            .203:
24155                                           ! 2912   {
24156                                           ! 2913    if(vga_modes[line].class==0x00)
24157                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24158 6155           8A46         FB            mov	al,-5[bp]
24159 6158           30E4                       xor	ah,ah
24160 615A           B1                     03  mov	cl,*3
24161 615C           D3E0                       shl	ax,cl
24162 615E           89C3                       mov	bx,ax
24163 6160           81C3                 01FD  add	bx,#_vga_modes
24164                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24165 6164           8A47         01            mov	al,1[bx]
24166 6167           84C0                       test	al,al
24167 6169           75           2A            jne 	.204
24168                       0000616B            .205:
24169                                           ! 2914     {
24170                                           ! 2915      biosfn_scroll(0x01,0x07,0,0,nbrows-1,nbcols-1,page,1);
24171                                           ! Debug: list int = const 1 (used reg = )
24172 616B           B8                   0001  mov	ax,*1
24173 616E           50                         push	ax
24174                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24175 616F           8A46         06            mov	al,6[bp]
24176 6172           30E4                       xor	ah,ah
24177 6174           50                         push	ax
24178                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24179 6175           8B46         F8            mov	ax,-8[bp]
24180                                           ! Debug: list unsigned int = ax-1 (used reg = )
24181 6178           48                         dec	ax
24182 6179           50                         push	ax
24183                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24184 617A           8B46         F6            mov	ax,-$A[bp]
24185                                           ! Debug: list unsigned int = ax-1 (used reg = )
24186 617D           48                         dec	ax
24187 617E           50                         push	ax
24188                                           ! Debug: list int = const 0 (used reg = )
24189 617F           31C0                       xor	ax,ax
24190 6181           50                         push	ax
24191                                           ! Debug: list int = const 0 (used reg = )
24192 6182           31C0                       xor	ax,ax
24193 6184           50                         push	ax
24194                                           ! Debug: list int = const 7 (used reg = )
24195 6185           B8                   0007  mov	ax,*7
24196 6188           50                         push	ax
24197                                           ! Debug: list int = const 1 (used reg = )
24198 6189           B8                   0001  mov	ax,*1
24199 618C           50                         push	ax
24200                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24201 618D           E8         E7B1            call	_biosfn_scroll
24202 6190           83C4                   10  add	sp,*$10
24203                                           !BCC_EOS
24204                                           ! 2916     }
24205                                           ! 2917    else
24206                                           ! 2918     {
24207 6193           EB           27            jmp .206
24208                       00006195            .204:
24209                                           ! 2919      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24210                                           ! Debug: list int = const 1 (used reg = )
24211 6195           B8                   0001  mov	ax,*1
24212 6198           50                         push	ax
24213                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24214 6199           8A46         06            mov	al,6[bp]
24215 619C           30E4                       xor	ah,ah
24216 619E           50                         push	ax
24217                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24218 619F           8B46         F8            mov	ax,-8[bp]
24219                                           ! Debug: list unsigned int = ax-1 (used reg = )
24220 61A2           48                         dec	ax
24221 61A3           50                         push	ax
24222                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24223 61A4           8B46         F6            mov	ax,-$A[bp]
24224                                           ! Debug: list unsigned int = ax-1 (used reg = )
24225 61A7           48                         dec	ax
24226 61A8           50                         push	ax
24227                                           ! Debug: list int = const 0 (used reg = )
24228 61A9           31C0                       xor	ax,ax
24229 61AB           50                         push	ax
24230                                           ! Debug: list int = const 0 (used reg = )
24231 61AC           31C0                       xor	ax,ax
24232 61AE           50                         push	ax
24233                                           ! Debug: list int = const 0 (used reg = )
24234 61AF           31C0                       xor	ax,ax
24235 61B1           50                         push	ax
24236                                           ! Debug: list int = const 1 (used reg = )
24237 61B2           B8                   0001  mov	ax,*1
24238 61B5           50                         push	ax
24239                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24240 61B6           E8         E788            call	_biosfn_scroll
24241 61B9           83C4                   10  add	sp,*$10
24242                                           !BCC_EOS
24243                                           ! 2920     }
24244                                           ! 2921    ycurs-=1;
24245                       000061BC            .206:
24246                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24247 61BC           8A46         FD            mov	al,-3[bp]
24248 61BF           30E4                       xor	ah,ah
24249 61C1           48                         dec	ax
24250 61C2           8846         FD            mov	-3[bp],al
24251                                           !BCC_EOS
24252                                           ! 2922   }
24253                                           ! 2923  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24254                       000061C5            .202:
24255                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24256 61C5           8A46         FD            mov	al,-3[bp]
24257 61C8           30E4                       xor	ah,ah
24258 61CA           8946         F2            mov	-$E[bp],ax
24259                                           !BCC_EOS
24260                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24261 61CD           8B46         F2            mov	ax,-$E[bp]
24262 61D0           88C4                       mov	ah,al
24263 61D2           30C0                       xor	al,al
24264 61D4           8946         F2            mov	-$E[bp],ax
24265                                           !BCC_EOS
24266                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24267 61D7           8B46         F2            mov	ax,-$E[bp]
24268 61DA           0246         FE            add	al,-2[bp]
24269 61DD           80D4                   00  adc	ah,*0
24270 61E0           8946         F2            mov	-$E[bp],ax
24271                                           !BCC_EOS
24272                                           ! 2924  biosfn_set_cursor_pos(page,cursor);
24273                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24274 61E3           FF76         F2            push	-$E[bp]
24275                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24276 61E6           8A46         06            mov	al,6[bp]
24277 61E9           30E4                       xor	ah,ah
24278 61EB           50                         push	ax
24279                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24280 61EC           E8         E15A            call	_biosfn_set_cursor_pos
24281 61EF           83C4                   04  add	sp,*4
24282                                           !BCC_EOS
24283                                           ! 2925 }
24284 61F2           89EC                       mov	sp,bp
24285 61F4           5D                         pop	bp
24286 61F5           C3                         ret
24287                                           ! 2926 #asm
24288                                           !BCC_ASM
24289                       00000008            _biosfn_write_teletype.flag	set	8
24290                       00000006            _biosfn_write_teletype.attr	set	6
24291                       00000004            _biosfn_write_teletype.page	set	4
24292                       00000002            _biosfn_write_teletype.car	set	2
24293                       000061F6            biosfn_get_video_mode:
24294 61F6           1E                           push ds
24295 61F7           B8                   0040    mov ax, # 0x40
24296 61FA           8ED8                         mov ds, ax
24297 61FC           53                           push bx
24298 61FD           BB                   0062    mov bx, # 0x62
24299 6200           8A07                         mov al, [bx]
24300 6202           5B                           pop bx
24301 6203           88C7                         mov bh, al
24302 6205           53                           push bx
24303 6206           BB                   0087    mov bx, # 0x87
24304 6209           8A27                         mov ah, [bx]
24305 620B           80E4                   80    and ah, #0x80
24306 620E           BB                   0049    mov bx, # 0x49
24307 6211           8A07                         mov al, [bx]
24308 6213           08E0                         or al, ah
24309 6215           BB                   004A    mov bx, # 0x4A
24310 6218           8A27                         mov ah, [bx]
24311 621A           5B                           pop bx
24312 621B           1F                           pop ds
24313 621C           C3                           ret
24314                                           ! 2948 endasm
24315                                           !BCC_ENDASM
24316                                           ! 2949 #asm
24317                                           !BCC_ASM
24318                       00000008            _biosfn_write_teletype.flag	set	8
24319                       00000006            _biosfn_write_teletype.attr	set	6
24320                       00000004            _biosfn_write_teletype.page	set	4
24321                       00000002            _biosfn_write_teletype.car	set	2
24322                       0000621D            biosfn_group_10:
24323 621D           3C                     00    cmp al, #0x00
24324 621F           75           02              jne int10_test_1001
24325 6221           EB           61              jmp biosfn_set_single_palette_reg
24326                       00006223            int10_test_1001:
24327 6223           3C                     01    cmp al, #0x01
24328 6225           75           02              jne int10_test_1002
24329 6227           EB           75              jmp biosfn_set_overscan_border_color
24330                       00006229            int10_test_1002:
24331 6229           3C                     02    cmp al, #0x02
24332 622B           75           02              jne int10_test_1003
24333 622D           EB           77              jmp biosfn_set_all_palette_reg
24334                       0000622F            int10_test_1003:
24335 622F           3C                     03    cmp al, #0x03
24336 6231           75           03              jne int10_test_1007
24337 6233           E9         009D              jmp biosfn_toggle_intensity
24338                       00006236            int10_test_1007:
24339 6236           3C                     07    cmp al, #0x07
24340 6238           75           03              jne int10_test_1008
24341 623A           E9         00BC              jmp biosfn_get_single_palette_reg
24342                       0000623D            int10_test_1008:
24343 623D           3C                     08    cmp al, #0x08
24344 623F           75           03              jne int10_test_1009
24345 6241           E9         00D9              jmp biosfn_read_overscan_border_color
24346                       00006244            int10_test_1009:
24347 6244           3C                     09    cmp al, #0x09
24348 6246           75           03              jne int10_test_1010
24349 6248           E9         00E0              jmp biosfn_get_all_palette_reg
24350                       0000624B            int10_test_1010:
24351 624B           3C                     10    cmp al, #0x10
24352 624D           75           03              jne int10_test_1012
24353 624F           E9         011A              jmp biosfn_set_single_dac_reg
24354                       00006252            int10_test_1012:
24355 6252           3C                     12    cmp al, #0x12
24356 6254           75           03              jne int10_test_1013
24357 6256           E9         012C              jmp biosfn_set_all_dac_reg
24358                       00006259            int10_test_1013:
24359 6259           3C                     13    cmp al, #0x13
24360 625B           75           03              jne int10_test_1015
24361 625D           E9         014D              jmp biosfn_select_video_dac_color_page
24362                       00006260            int10_test_1015:
24363 6260           3C                     15    cmp al, #0x15
24364 6262           75           03              jne int10_test_1017
24365 6264           E9         0189              jmp biosfn_read_single_dac_reg
24366                       00006267            int10_test_1017:
24367 6267           3C                     17    cmp al, #0x17
24368 6269           75           03              jne int10_test_1018
24369 626B           E9         019D              jmp biosfn_read_all_dac_reg
24370                       0000626E            int10_test_1018:
24371 626E           3C                     18    cmp al, #0x18
24372 6270           75           03              jne int10_test_1019
24373 6272           E9         01BE              jmp biosfn_set_pel_mask
24374                       00006275            int10_test_1019:
24375 6275           3C                     19    cmp al, #0x19
24376 6277           75           03              jne int10_test_101A
24377 6279           E9         01C2              jmp biosfn_read_pel_mask
24378                       0000627C            int10_test_101A:
24379 627C           3C                     1A    cmp al, #0x1a
24380 627E           75           03              jne int10_group_10_unknown
24381 6280           E9         01C6              jmp biosfn_read_video_dac_state
24382                       00006283            int10_group_10_unknown:
24383 6283           C3                           ret
24384                       00006284            biosfn_set_single_palette_reg:
24385 6284           80FB                   14    cmp bl, #0x14
24386 6287           77           14              ja no_actl_reg1
24387 6289           50                           push ax
24388 628A           52                           push dx
24389 628B           BA                   03DA    mov dx, # 0x3da
24390 628E           EC                           in al, dx
24391 628F           BA                   03C0    mov dx, # 0x3c0
24392 6292           88D8                         mov al, bl
24393 6294           EE                           out dx, al
24394 6295           88F8                         mov al, bh
24395 6297           EE                           out dx, al
24396 6298           B0                     20    mov al, #0x20
24397 629A           EE                           out dx, al
24398 629B           5A                           pop dx
24399 629C           58                           pop ax
24400                       0000629D            no_actl_reg1:
24401 629D           C3                           ret
24402                                           ! 3030 endasm
24403                                           !BCC_ENDASM
24404                                           ! 3031 #asm
24405                                           !BCC_ASM
24406                       00000008            _biosfn_write_teletype.flag	set	8
24407                       00000006            _biosfn_write_teletype.attr	set	6
24408                       00000004            _biosfn_write_teletype.page	set	4
24409                       00000002            _biosfn_write_teletype.car	set	2
24410                       0000629E            biosfn_set_overscan_border_color:
24411 629E           53                           push bx
24412 629F           B3                     11    mov bl, #0x11
24413 62A1           E8         FFE0              call biosfn_set_single_palette_reg
24414 62A4           5B                           pop bx
24415 62A5           C3                           ret
24416                                           ! 3038 endasm
24417                                           !BCC_ENDASM
24418                                           ! 3039 #asm
24419                                           !BCC_ASM
24420                       00000008            _biosfn_write_teletype.flag	set	8
24421                       00000006            _biosfn_write_teletype.attr	set	6
24422                       00000004            _biosfn_write_teletype.page	set	4
24423                       00000002            _biosfn_write_teletype.car	set	2
24424                       000062A6            biosfn_set_all_palette_reg:
24425 62A6           50                           push ax
24426 62A7           53                           push bx
24427 62A8           51                           push cx
24428 62A9           52                           push dx
24429 62AA           89D3                         mov bx, dx
24430 62AC           BA                   03DA    mov dx, # 0x3da
24431 62AF           EC                           in al, dx
24432 62B0           B1                     00    mov cl, #0x00
24433 62B2           BA                   03C0    mov dx, # 0x3c0
24434                       000062B5            set_palette_loop:
24435 62B5           88C8                         mov al, cl
24436 62B7           EE                           out dx, al
24437 62B8           26                           seg es
24438 62B9           8A07                         mov al, [bx]
24439 62BB           EE                           out dx, al
24440 62BC           43                           inc bx
24441 62BD           FEC1                         inc cl
24442 62BF           80F9                   10    cmp cl, #0x10
24443 62C2           75           F1              jne set_palette_loop
24444 62C4           B0                     11    mov al, #0x11
24445 62C6           EE                           out dx, al
24446 62C7           26                           seg es
24447 62C8           8A07                         mov al, [bx]
24448 62CA           EE                           out dx, al
24449 62CB           B0                     20    mov al, #0x20
24450 62CD           EE                           out dx, al
24451 62CE           5A                           pop dx
24452 62CF           59                           pop cx
24453 62D0           5B                           pop bx
24454 62D1           58                           pop ax
24455 62D2           C3                           ret
24456                                           ! 3072 endasm
24457                                           !BCC_ENDASM
24458                                           ! 3073 #asm
24459                                           !BCC_ASM
24460                       00000008            _biosfn_write_teletype.flag	set	8
24461                       00000006            _biosfn_write_teletype.attr	set	6
24462                       00000004            _biosfn_write_teletype.page	set	4
24463                       00000002            _biosfn_write_teletype.car	set	2
24464                       000062D3            biosfn_toggle_intensity:
24465 62D3           50                           push ax
24466 62D4           53                           push bx
24467 62D5           52                           push dx
24468 62D6           BA                   03DA    mov dx, # 0x3da
24469 62D9           EC                           in al, dx
24470 62DA           BA                   03C0    mov dx, # 0x3c0
24471 62DD           B0                     10    mov al, #0x10
24472 62DF           EE                           out dx, al
24473 62E0           BA                   03C1    mov dx, # 0x3c1
24474 62E3           EC                           in al, dx
24475 62E4           24                     F7    and al, #0xf7
24476 62E6           80E3                   01    and bl, #0x01
24477 62E9           C0E3                   03    shl bl, 3
24478 62EC           08D8                         or al, bl
24479 62EE           BA                   03C0    mov dx, # 0x3c0
24480 62F1           EE                           out dx, al
24481 62F2           B0                     20    mov al, #0x20
24482 62F4           EE                           out dx, al
24483 62F5           5A                           pop dx
24484 62F6           5B                           pop bx
24485 62F7           58                           pop ax
24486 62F8           C3                           ret
24487                                           ! 3097 endasm
24488                                           !BCC_ENDASM
24489                                           ! 3098 #asm
24490                                           !BCC_ASM
24491                       00000008            _biosfn_write_teletype.flag	set	8
24492                       00000006            _biosfn_write_teletype.attr	set	6
24493                       00000004            _biosfn_write_teletype.page	set	4
24494                       00000002            _biosfn_write_teletype.car	set	2
24495                       000062F9            biosfn_get_single_palette_reg:
24496 62F9           80FB                   14    cmp bl, #0x14
24497 62FC           77           1E              ja no_actl_reg2
24498 62FE           50                           push ax
24499 62FF           52                           push dx
24500 6300           BA                   03DA    mov dx, # 0x3da
24501 6303           EC                           in al, dx
24502 6304           BA                   03C0    mov dx, # 0x3c0
24503 6307           88D8                         mov al, bl
24504 6309           EE                           out dx, al
24505 630A           BA                   03C1    mov dx, # 0x3c1
24506 630D           EC                           in al, dx
24507 630E           88C7                         mov bh, al
24508 6310           BA                   03DA    mov dx, # 0x3da
24509 6313           EC                           in al, dx
24510 6314           BA                   03C0    mov dx, # 0x3c0
24511 6317           B0                     20    mov al, #0x20
24512 6319           EE                           out dx, al
24513 631A           5A                           pop dx
24514 631B           58                           pop ax
24515                       0000631C            no_actl_reg2:
24516 631C           C3                           ret
24517                                           ! 3121 endasm
24518                                           !BCC_ENDASM
24519                                           ! 3122 #asm
24520                                           !BCC_ASM
24521                       00000008            _biosfn_write_teletype.flag	set	8
24522                       00000006            _biosfn_write_teletype.attr	set	6
24523                       00000004            _biosfn_write_teletype.page	set	4
24524                       00000002            _biosfn_write_teletype.car	set	2
24525                       0000631D            biosfn_read_overscan_border_color:
24526 631D           50                           push ax
24527 631E           53                           push bx
24528 631F           B3                     11    mov bl, #0x11
24529 6321           E8         FFD5              call biosfn_get_single_palette_reg
24530 6324           88F8                         mov al, bh
24531 6326           5B                           pop bx
24532 6327           88C7                         mov bh, al
24533 6329           58                           pop ax
24534 632A           C3                           ret
24535                                           ! 3133 endasm
24536                                           !BCC_ENDASM
24537                                           ! 3134 #asm
24538                                           !BCC_ASM
24539                       00000008            _biosfn_write_teletype.flag	set	8
24540                       00000006            _biosfn_write_teletype.attr	set	6
24541                       00000004            _biosfn_write_teletype.page	set	4
24542                       00000002            _biosfn_write_teletype.car	set	2
24543                       0000632B            biosfn_get_all_palette_reg:
24544 632B           50                           push ax
24545 632C           53                           push bx
24546 632D           51                           push cx
24547 632E           52                           push dx
24548 632F           89D3                         mov bx, dx
24549 6331           B1                     00    mov cl, #0x00
24550                       00006333            get_palette_loop:
24551 6333           BA                   03DA    mov dx, # 0x3da
24552 6336           EC                           in al, dx
24553 6337           BA                   03C0    mov dx, # 0x3c0
24554 633A           88C8                         mov al, cl
24555 633C           EE                           out dx, al
24556 633D           BA                   03C1    mov dx, # 0x3c1
24557 6340           EC                           in al, dx
24558 6341           26                           seg es
24559 6342           8807                         mov [bx], al
24560 6344           43                           inc bx
24561 6345           FEC1                         inc cl
24562 6347           80F9                   10    cmp cl, #0x10
24563 634A           75           E7              jne get_palette_loop
24564 634C           BA                   03DA    mov dx, # 0x3da
24565 634F           EC                           in al, dx
24566 6350           BA                   03C0    mov dx, # 0x3c0
24567 6353           B0                     11    mov al, #0x11
24568 6355           EE                           out dx, al
24569 6356           BA                   03C1    mov dx, # 0x3c1
24570 6359           EC                           in al, dx
24571 635A           26                           seg es
24572 635B           8807                         mov [bx], al
24573 635D           BA                   03DA    mov dx, # 0x3da
24574 6360           EC                           in al, dx
24575 6361           BA                   03C0    mov dx, # 0x3c0
24576 6364           B0                     20    mov al, #0x20
24577 6366           EE                           out dx, al
24578 6367           5A                           pop dx
24579 6368           59                           pop cx
24580 6369           5B                           pop bx
24581 636A           58                           pop ax
24582 636B           C3                           ret
24583                                           ! 3175 endasm
24584                                           !BCC_ENDASM
24585                                           ! 3176 #asm
24586                                           !BCC_ASM
24587                       00000008            _biosfn_write_teletype.flag	set	8
24588                       00000006            _biosfn_write_teletype.attr	set	6
24589                       00000004            _biosfn_write_teletype.page	set	4
24590                       00000002            _biosfn_write_teletype.car	set	2
24591                       0000636C            biosfn_set_single_dac_reg:
24592 636C           50                           push ax
24593 636D           52                           push dx
24594 636E           BA                   03C8    mov dx, # 0x3c8
24595 6371           88D8                         mov al, bl
24596 6373           EE                           out dx, al
24597 6374           BA                   03C9    mov dx, # 0x3c9
24598 6377           58                           pop ax
24599 6378           50                           push ax
24600 6379           88E0                         mov al, ah
24601 637B           EE                           out dx, al
24602 637C           88E8                         mov al, ch
24603 637E           EE                           out dx, al
24604 637F           88C8                         mov al, cl
24605 6381           EE                           out dx, al
24606 6382           5A                           pop dx
24607 6383           58                           pop ax
24608 6384           C3                           ret
24609                                           ! 3195 endasm
24610                                           !BCC_ENDASM
24611                                           ! 3196 #asm
24612                                           !BCC_ASM
24613                       00000008            _biosfn_write_teletype.flag	set	8
24614                       00000006            _biosfn_write_teletype.attr	set	6
24615                       00000004            _biosfn_write_teletype.page	set	4
24616                       00000002            _biosfn_write_teletype.car	set	2
24617                       00006385            biosfn_set_all_dac_reg:
24618 6385           50                           push ax
24619 6386           53                           push bx
24620 6387           51                           push cx
24621 6388           52                           push dx
24622 6389           BA                   03C8    mov dx, # 0x3c8
24623 638C           88D8                         mov al, bl
24624 638E           EE                           out dx, al
24625 638F           5A                           pop dx
24626 6390           52                           push dx
24627 6391           89D3                         mov bx, dx
24628 6393           BA                   03C9    mov dx, # 0x3c9
24629                       00006396            set_dac_loop:
24630 6396           26                           seg es
24631 6397           8A07                         mov al, [bx]
24632 6399           EE                           out dx, al
24633 639A           43                           inc bx
24634 639B           26                           seg es
24635 639C           8A07                         mov al, [bx]
24636 639E           EE                           out dx, al
24637 639F           43                           inc bx
24638 63A0           26                           seg es
24639 63A1           8A07                         mov al, [bx]
24640 63A3           EE                           out dx, al
24641 63A4           43                           inc bx
24642 63A5           49                           dec cx
24643 63A6           75           EE              jnz set_dac_loop
24644 63A8           5A                           pop dx
24645 63A9           59                           pop cx
24646 63AA           5B                           pop bx
24647 63AB           58                           pop ax
24648 63AC           C3                           ret
24649                                           ! 3229 endasm
24650                                           !BCC_ENDASM
24651                                           ! 3230 #asm
24652                                           !BCC_ASM
24653                       00000008            _biosfn_write_teletype.flag	set	8
24654                       00000006            _biosfn_write_teletype.attr	set	6
24655                       00000004            _biosfn_write_teletype.page	set	4
24656                       00000002            _biosfn_write_teletype.car	set	2
24657                       000063AD            biosfn_select_video_dac_color_page:
24658 63AD           50                           push ax
24659 63AE           53                           push bx
24660 63AF           52                           push dx
24661 63B0           BA                   03DA    mov dx, # 0x3da
24662 63B3           EC                           in al, dx
24663 63B4           BA                   03C0    mov dx, # 0x3c0
24664 63B7           B0                     10    mov al, #0x10
24665 63B9           EE                           out dx, al
24666 63BA           BA                   03C1    mov dx, # 0x3c1
24667 63BD           EC                           in al, dx
24668 63BE           80E3                   01    and bl, #0x01
24669 63C1           75           0D              jnz set_dac_page
24670 63C3           24                     7F    and al, #0x7f
24671 63C5           C0E7                   07    shl bh, 7
24672 63C8           08F8                         or al, bh
24673 63CA           BA                   03C0    mov dx, # 0x3c0
24674 63CD           EE                           out dx, al
24675 63CE           EB           19              jmp set_actl_normal
24676                       000063D0            set_dac_page:
24677 63D0           50                           push ax
24678 63D1           BA                   03DA    mov dx, # 0x3da
24679 63D4           EC                           in al, dx
24680 63D5           BA                   03C0    mov dx, # 0x3c0
24681 63D8           B0                     14    mov al, #0x14
24682 63DA           EE                           out dx, al
24683 63DB           58                           pop ax
24684 63DC           24                     80    and al, #0x80
24685 63DE           75           03              jnz set_dac_16_page
24686 63E0           C0E7                   02    shl bh, 2
24687                       000063E3            set_dac_16_page:
24688 63E3           80E7                   0F    and bh, #0x0f
24689 63E6           88F8                         mov al, bh
24690 63E8           EE                           out dx, al
24691                       000063E9            set_actl_normal:
24692 63E9           B0                     20    mov al, #0x20
24693 63EB           EE                           out dx, al
24694 63EC           5A                           pop dx
24695 63ED           5B                           pop bx
24696 63EE           58                           pop ax
24697 63EF           C3                           ret
24698                                           ! 3272 endasm
24699                                           !BCC_ENDASM
24700                                           ! 3273 #asm
24701                                           !BCC_ASM
24702                       00000008            _biosfn_write_teletype.flag	set	8
24703                       00000006            _biosfn_write_teletype.attr	set	6
24704                       00000004            _biosfn_write_teletype.page	set	4
24705                       00000002            _biosfn_write_teletype.car	set	2
24706                       000063F0            biosfn_read_single_dac_reg:
24707 63F0           50                           push ax
24708 63F1           52                           push dx
24709 63F2           BA                   03C7    mov dx, # 0x3c7
24710 63F5           88D8                         mov al, bl
24711 63F7           EE                           out dx, al
24712 63F8           58                           pop ax
24713 63F9           88C4                         mov ah, al
24714 63FB           BA                   03C9    mov dx, # 0x3c9
24715 63FE           EC                           in al, dx
24716 63FF           86E0                         xchg al, ah
24717 6401           50                           push ax
24718 6402           EC                           in al, dx
24719 6403           88C5                         mov ch, al
24720 6405           EC                           in al, dx
24721 6406           88C1                         mov cl, al
24722 6408           5A                           pop dx
24723 6409           58                           pop ax
24724 640A           C3                           ret
24725                                           ! 3293 endasm
24726                                           !BCC_ENDASM
24727                                           ! 3294 #asm
24728                                           !BCC_ASM
24729                       00000008            _biosfn_write_teletype.flag	set	8
24730                       00000006            _biosfn_write_teletype.attr	set	6
24731                       00000004            _biosfn_write_teletype.page	set	4
24732                       00000002            _biosfn_write_teletype.car	set	2
24733                       0000640B            biosfn_read_all_dac_reg:
24734 640B           50                           push ax
24735 640C           53                           push bx
24736 640D           51                           push cx
24737 640E           52                           push dx
24738 640F           BA                   03C7    mov dx, # 0x3c7
24739 6412           88D8                         mov al, bl
24740 6414           EE                           out dx, al
24741 6415           5A                           pop dx
24742 6416           52                           push dx
24743 6417           89D3                         mov bx, dx
24744 6419           BA                   03C9    mov dx, # 0x3c9
24745                       0000641C            read_dac_loop:
24746 641C           EC                           in al, dx
24747 641D           26                           seg es
24748 641E           8807                         mov [bx], al
24749 6420           43                           inc bx
24750 6421           EC                           in al, dx
24751 6422           26                           seg es
24752 6423           8807                         mov [bx], al
24753 6425           43                           inc bx
24754 6426           EC                           in al, dx
24755 6427           26                           seg es
24756 6428           8807                         mov [bx], al
24757 642A           43                           inc bx
24758 642B           49                           dec cx
24759 642C           75           EE              jnz read_dac_loop
24760 642E           5A                           pop dx
24761 642F           59                           pop cx
24762 6430           5B                           pop bx
24763 6431           58                           pop ax
24764 6432           C3                           ret
24765                                           ! 3327 endasm
24766                                           !BCC_ENDASM
24767                                           ! 3328 #asm
24768                                           !BCC_ASM
24769                       00000008            _biosfn_write_teletype.flag	set	8
24770                       00000006            _biosfn_write_teletype.attr	set	6
24771                       00000004            _biosfn_write_teletype.page	set	4
24772                       00000002            _biosfn_write_teletype.car	set	2
24773                       00006433            biosfn_set_pel_mask:
24774 6433           50                           push ax
24775 6434           52                           push dx
24776 6435           BA                   03C6    mov dx, # 0x3c6
24777 6438           88D8                         mov al, bl
24778 643A           EE                           out dx, al
24779 643B           5A                           pop dx
24780 643C           58                           pop ax
24781 643D           C3                           ret
24782                                           ! 3338 endasm
24783                                           !BCC_ENDASM
24784                                           ! 3339 #asm
24785                                           !BCC_ASM
24786                       00000008            _biosfn_write_teletype.flag	set	8
24787                       00000006            _biosfn_write_teletype.attr	set	6
24788                       00000004            _biosfn_write_teletype.page	set	4
24789                       00000002            _biosfn_write_teletype.car	set	2
24790                       0000643E            biosfn_read_pel_mask:
24791 643E           50                           push ax
24792 643F           52                           push dx
24793 6440           BA                   03C6    mov dx, # 0x3c6
24794 6443           EC                           in al, dx
24795 6444           88C3                         mov bl, al
24796 6446           5A                           pop dx
24797 6447           58                           pop ax
24798 6448           C3                           ret
24799                                           ! 3349 endasm
24800                                           !BCC_ENDASM
24801                                           ! 3350 #asm
24802                                           !BCC_ASM
24803                       00000008            _biosfn_write_teletype.flag	set	8
24804                       00000006            _biosfn_write_teletype.attr	set	6
24805                       00000004            _biosfn_write_teletype.page	set	4
24806                       00000002            _biosfn_write_teletype.car	set	2
24807                       00006449            biosfn_read_video_dac_state:
24808 6449           50                           push ax
24809 644A           52                           push dx
24810 644B           BA                   03DA    mov dx, # 0x3da
24811 644E           EC                           in al, dx
24812 644F           BA                   03C0    mov dx, # 0x3c0
24813 6452           B0                     10    mov al, #0x10
24814 6454           EE                           out dx, al
24815 6455           BA                   03C1    mov dx, # 0x3c1
24816 6458           EC                           in al, dx
24817 6459           88C3                         mov bl, al
24818 645B           C0EB                   07    shr bl, 7
24819 645E           BA                   03DA    mov dx, # 0x3da
24820 6461           EC                           in al, dx
24821 6462           BA                   03C0    mov dx, # 0x3c0
24822 6465           B0                     14    mov al, #0x14
24823 6467           EE                           out dx, al
24824 6468           BA                   03C1    mov dx, # 0x3c1
24825 646B           EC                           in al, dx
24826 646C           88C7                         mov bh, al
24827 646E           80E7                   0F    and bh, #0x0f
24828 6471           F6C3                   01    test bl, #0x01
24829 6474           75           03              jnz get_dac_16_page
24830 6476           C0EF                   02    shr bh, 2
24831                       00006479            get_dac_16_page:
24832 6479           BA                   03DA    mov dx, # 0x3da
24833 647C           EC                           in al, dx
24834 647D           BA                   03C0    mov dx, # 0x3c0
24835 6480           B0                     20    mov al, #0x20
24836 6482           EE                           out dx, al
24837 6483           5A                           pop dx
24838 6484           58                           pop ax
24839 6485           C3                           ret
24840                                           ! 3384 endasm
24841                                           !BCC_ENDASM
24842                                           ! 3385 static void biosfn_perform_gray_scale_summing (start,count)
24843                                           ! Register BX used in function biosfn_write_teletype
24844                                           ! 3386 Bit16u start;Bit16u count;
24845                       00006486            _biosfn_perform_gray_scale_summing:
24846                                           !BCC_EOS
24847                                           !BCC_EOS
24848                                           ! 3387 {Bit8u r,g,b;
24849                                           ! 3387 
24850                                           !BCC_EOS
24851                                           ! 3388  Bit16u i;
24852                                           !BCC_EOS
24853                                           ! 3389  Bit16u index;
24854                                           !BCC_EOS
24855                                           ! 3390  inb(0x3da);
24856 6486           55                         push	bp
24857 6487           89E5                       mov	bp,sp
24858 6489           83C4                   F8  add	sp,*-8
24859                                           ! Debug: list int = const $3DA (used reg = )
24860 648C           B8                   03DA  mov	ax,#$3DA
24861 648F           50                         push	ax
24862                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24863 6490           E8         1750            call	_inb
24864 6493           44                         inc	sp
24865 6494           44                         inc	sp
24866                                           !BCC_EOS
24867                                           ! 3391  outb(0x3c0,0x00);
24868                                           ! Debug: list int = const 0 (used reg = )
24869 6495           31C0                       xor	ax,ax
24870 6497           50                         push	ax
24871                                           ! Debug: list int = const $3C0 (used reg = )
24872 6498           B8                   03C0  mov	ax,#$3C0
24873 649B           50                         push	ax
24874                                           ! Debug: func () void = outb+0 (used reg = )
24875 649C           E8         175A            call	_outb
24876 649F           83C4                   04  add	sp,*4
24877                                           !BCC_EOS
24878                                           ! 3392  for( index = 0; index < count; index++ )
24879                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24880 64A2           31C0                       xor	ax,ax
24881 64A4           8946         F8            mov	-8[bp],ax
24882                                           !BCC_EOS
24883                                           !BCC_EOS
24884                                           ! 3393   {
24885 64A7           E9         00BE            br 	.209
24886                       000064AA            .20A:
24887                                           ! 3394    outb(0x3c7,start);
24888                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24889 64AA           FF76         04            push	4[bp]
24890                                           ! Debug: list int = const $3C7 (used reg = )
24891 64AD           B8                   03C7  mov	ax,#$3C7
24892 64B0           50                         push	ax
24893                                           ! Debug: func () void = outb+0 (used reg = )
24894 64B1           E8         1745            call	_outb
24895 64B4           83C4                   04  add	sp,*4
24896                                           !BCC_EOS
24897                                           ! 3395    r=inb( 0x3c9 );
24898                                           ! Debug: list int = const $3C9 (used reg = )
24899 64B7           B8                   03C9  mov	ax,#$3C9
24900 64BA           50                         push	ax
24901                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24902 64BB           E8         1725            call	_inb
24903 64BE           44                         inc	sp
24904 64BF           44                         inc	sp
24905                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24906 64C0           8846         FF            mov	-1[bp],al
24907                                           !BCC_EOS
24908                                           ! 3396    g=inb( 0x3c9 );
24909                                           ! Debug: list int = const $3C9 (used reg = )
24910 64C3           B8                   03C9  mov	ax,#$3C9
24911 64C6           50                         push	ax
24912                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24913 64C7           E8         1719            call	_inb
24914 64CA           44                         inc	sp
24915 64CB           44                         inc	sp
24916                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24917 64CC           8846         FE            mov	-2[bp],al
24918                                           !BCC_EOS
24919                                           ! 3397    b=inb( 0x3c9 );
24920                                           ! Debug: list int = const $3C9 (used reg = )
24921 64CF           B8                   03C9  mov	ax,#$3C9
24922 64D2           50                         push	ax
24923                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24924 64D3           E8         170D            call	_inb
24925 64D6           44                         inc	sp
24926 64D7           44                         inc	sp
24927                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24928 64D8           8846         FD            mov	-3[bp],al
24929                                           !BCC_EOS
24930                                           ! 3398    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24931                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24932                                           ! Debug: expression subtree swapping
24933 64DB           8A46         FD            mov	al,-3[bp]
24934 64DE           30E4                       xor	ah,ah
24935 64E0           B9                   001C  mov	cx,*$1C
24936 64E3           F7E9                       imul	cx
24937 64E5           50                         push	ax
24938                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24939                                           ! Debug: expression subtree swapping
24940 64E6           8A46         FE            mov	al,-2[bp]
24941 64E9           30E4                       xor	ah,ah
24942 64EB           B9                   0097  mov	cx,#$97
24943 64EE           F7E9                       imul	cx
24944 64F0           50                         push	ax
24945                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
24946                                           ! Debug: expression subtree swapping
24947 64F1           8A46         FF            mov	al,-1[bp]
24948 64F4           30E4                       xor	ah,ah
24949 64F6           B9                   004D  mov	cx,*$4D
24950 64F9           F7E9                       imul	cx
24951                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
24952 64FB           0346         F4            add	ax,-$C[bp]
24953 64FE           44                         inc	sp
24954 64FF           44                         inc	sp
24955                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24956 6500           0346         F6            add	ax,-$A[bp]
24957 6503           44                         inc	sp
24958 6504           44                         inc	sp
24959                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
24960                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
24961 6505           05                   0080  add	ax,#$80
24962 6508           88E0                       mov	al,ah
24963 650A           30E4                       xor	ah,ah
24964                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
24965 650C           8946         FA            mov	-6[bp],ax
24966                                           !BCC_EOS
24967                                           ! 3399    if(i>0x3f)i=0x3f;
24968                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24969 650F           8B46         FA            mov	ax,-6[bp]
24970 6512           3D                   003F  cmp	ax,*$3F
24971 6515           76           06            jbe 	.20B
24972                       00006517            .20C:
24973                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24974 6517           B8                   003F  mov	ax,*$3F
24975 651A           8946         FA            mov	-6[bp],ax
24976                                           !BCC_EOS
24977                                           ! 3400    outb(0x3c8,start);
24978                       0000651D            .20B:
24979                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24980 651D           FF76         04            push	4[bp]
24981                                           ! Debug: list int = const $3C8 (used reg = )
24982 6520           B8                   03C8  mov	ax,#$3C8
24983 6523           50                         push	ax
24984                                           ! Debug: func () void = outb+0 (used reg = )
24985 6524           E8         16D2            call	_outb
24986 6527           83C4                   04  add	sp,*4
24987                                           !BCC_EOS
24988                                           ! 3401    outb( 0x3c9, i&0xff );
24989                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24990 652A           8A46         FA            mov	al,-6[bp]
24991                                           ! Debug: list unsigned char = al+0 (used reg = )
24992 652D           30E4                       xor	ah,ah
24993 652F           50                         push	ax
24994                                           ! Debug: list int = const $3C9 (used reg = )
24995 6530           B8                   03C9  mov	ax,#$3C9
24996 6533           50                         push	ax
24997                                           ! Debug: func () void = outb+0 (used reg = )
24998 6534           E8         16C2            call	_outb
24999 6537           83C4                   04  add	sp,*4
25000                                           !BCC_EOS
25001                                           ! 3402    outb( 0x3c9, i&0xff );
25002                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25003 653A           8A46         FA            mov	al,-6[bp]
25004                                           ! Debug: list unsigned char = al+0 (used reg = )
25005 653D           30E4                       xor	ah,ah
25006 653F           50                         push	ax
25007                                           ! Debug: list int = const $3C9 (used reg = )
25008 6540           B8                   03C9  mov	ax,#$3C9
25009 6543           50                         push	ax
25010                                           ! Debug: func () void = outb+0 (used reg = )
25011 6544           E8         16B2            call	_outb
25012 6547           83C4                   04  add	sp,*4
25013                                           !BCC_EOS
25014                                           ! 3403    outb( 0x3c9, i&0xff );
25015                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25016 654A           8A46         FA            mov	al,-6[bp]
25017                                           ! Debug: list unsigned char = al+0 (used reg = )
25018 654D           30E4                       xor	ah,ah
25019 654F           50                         push	ax
25020                                           ! Debug: list int = const $3C9 (used reg = )
25021 6550           B8                   03C9  mov	ax,#$3C9
25022 6553           50                         push	ax
25023                                           ! Debug: func () void = outb+0 (used reg = )
25024 6554           E8         16A2            call	_outb
25025 6557           83C4                   04  add	sp,*4
25026                                           !BCC_EOS
25027                                           ! 3404    start++;
25028                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
25029 655A           8B46         04            mov	ax,4[bp]
25030 655D           40                         inc	ax
25031 655E           8946         04            mov	4[bp],ax
25032                                           !BCC_EOS
25033                                           ! 3405   }
25034                                           ! 3406  inb(0x3da);
25035                       00006561            .208:
25036                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25037 6561           8B46         F8            mov	ax,-8[bp]
25038 6564           40                         inc	ax
25039 6565           8946         F8            mov	-8[bp],ax
25040                       00006568            .209:
25041                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25042 6568           8B46         F8            mov	ax,-8[bp]
25043 656B           3B46         06            cmp	ax,6[bp]
25044 656E         0F82         FF38            blo 	.20A
25045                       00006572            .20D:
25046                       00006572            .207:
25047                                           ! Debug: list int = const $3DA (used reg = )
25048 6572           B8                   03DA  mov	ax,#$3DA
25049 6575           50                         push	ax
25050                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25051 6576           E8         166A            call	_inb
25052 6579           44                         inc	sp
25053 657A           44                         inc	sp
25054                                           !BCC_EOS
25055                                           ! 3407  outb(0x3c0,0x20);
25056                                           ! Debug: list int = const $20 (used reg = )
25057 657B           B8                   0020  mov	ax,*$20
25058 657E           50                         push	ax
25059                                           ! Debug: list int = const $3C0 (used reg = )
25060 657F           B8                   03C0  mov	ax,#$3C0
25061 6582           50                         push	ax
25062                                           ! Debug: func () void = outb+0 (used reg = )
25063 6583           E8         1673            call	_outb
25064 6586           83C4                   04  add	sp,*4
25065                                           !BCC_EOS
25066                                           ! 3408 }
25067 6589           89EC                       mov	sp,bp
25068 658B           5D                         pop	bp
25069 658C           C3                         ret
25070                                           ! 3409 static void get_font_access()
25071                                           ! 3410 {
25072                       0000658D            _get_font_access:
25073                                           ! 3411 #asm
25074                                           !BCC_ASM
25075 658D           BA                   03C4   mov dx, # 0x3c4
25076 6590           B8                   0100   mov ax, #0x0100
25077 6593           EF                          out dx, ax
25078 6594           B8                   0402   mov ax, #0x0402
25079 6597           EF                          out dx, ax
25080 6598           B8                   0704   mov ax, #0x0704
25081 659B           EF                          out dx, ax
25082 659C           B8                   0300   mov ax, #0x0300
25083 659F           EF                          out dx, ax
25084 65A0           BA                   03CE   mov dx, # 0x3ce
25085 65A3           B8                   0204   mov ax, #0x0204
25086 65A6           EF                          out dx, ax
25087 65A7           B8                   0005   mov ax, #0x0005
25088 65AA           EF                          out dx, ax
25089 65AB           B8                   0406   mov ax, #0x0406
25090 65AE           EF                          out dx, ax
25091                                           ! 3428 endasm
25092                                           !BCC_ENDASM
25093                                           ! 3429 }
25094 65AF           C3                         ret
25095                                           ! 3430 static void release_font_access()
25096                                           ! 3431 {
25097                       000065B0            _release_font_access:
25098                                           ! 3432 #asm
25099                                           !BCC_ASM
25100 65B0           BA                   03C4   mov dx, # 0x3c4
25101 65B3           B8                   0100   mov ax, #0x0100
25102 65B6           EF                          out dx, ax
25103 65B7           B8                   0302   mov ax, #0x0302
25104 65BA           EF                          out dx, ax
25105 65BB           B8                   0304   mov ax, #0x0304
25106 65BE           EF                          out dx, ax
25107 65BF           B8                   0300   mov ax, #0x0300
25108 65C2           EF                          out dx, ax
25109 65C3           BA                   03CC   mov dx, # 0x3cc
25110 65C6           EC                          in al, dx
25111 65C7           24                     01   and al, #0x01
25112 65C9           C0E0                   02   shl al, 2
25113 65CC           0C                     0A   or al, #0x0a
25114 65CE           88C4                        mov ah, al
25115 65D0           B0                     06   mov al, #0x06
25116 65D2           BA                   03CE   mov dx, # 0x3ce
25117 65D5           EF                          out dx, ax
25118 65D6           B8                   0004   mov ax, #0x0004
25119 65D9           EF                          out dx, ax
25120 65DA           B8                   1005   mov ax, #0x1005
25121 65DD           EF                          out dx, ax
25122                                           ! 3455 endasm
25123                                           !BCC_ENDASM
25124                                           ! 3456 }
25125 65DE           C3                         ret
25126                                           ! 3457 #asm
25127                                           !BCC_ASM
25128                       000065DF            idiv_u:
25129 65DF           31D2                         xor dx,dx
25130 65E1           F7F3                         div bx
25131 65E3           C3                           ret
25132                                           ! 3462 endasm
25133                                           !BCC_ENDASM
25134                                           ! 3463 static void set_scan_lines(lines) Bit8u lines;
25135                       000065E4            _set_scan_lines:
25136                                           !BCC_EOS
25137                                           ! 3464 {
25138                                           ! 3465  Bit16u crtc_addr,cols,page,vde;
25139                                           !BCC_EOS
25140                                           ! 3466  Bit8u crtc_r9,ovl,rows;
25141                                           !BCC_EOS
25142                                           ! 3467  crtc_addr = read_word(0x40,0x63);
25143 65E4           55                         push	bp
25144 65E5           89E5                       mov	bp,sp
25145 65E7           83C4                   F4  add	sp,*-$C
25146                                           ! Debug: list int = const $63 (used reg = )
25147 65EA           B8                   0063  mov	ax,*$63
25148 65ED           50                         push	ax
25149                                           ! Debug: list int = const $40 (used reg = )
25150 65EE           B8                   0040  mov	ax,*$40
25151 65F1           50                         push	ax
25152                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25153 65F2           E8         15AB            call	_read_word
25154 65F5           83C4                   04  add	sp,*4
25155                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25156 65F8           8946         FE            mov	-2[bp],ax
25157                                           !BCC_EOS
25158                                           ! 3468  outb(crtc_addr, 0x09);
25159                                           ! Debug: list int = const 9 (used reg = )
25160 65FB           B8                   0009  mov	ax,*9
25161 65FE           50                         push	ax
25162                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25163 65FF           FF76         FE            push	-2[bp]
25164                                           ! Debug: func () void = outb+0 (used reg = )
25165 6602           E8         15F4            call	_outb
25166 6605           83C4                   04  add	sp,*4
25167                                           !BCC_EOS
25168                                           ! 3469  crtc_r9 = inb(crtc_addr+1);
25169                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25170 6608           8B46         FE            mov	ax,-2[bp]
25171                                           ! Debug: list unsigned int = ax+1 (used reg = )
25172 660B           40                         inc	ax
25173 660C           50                         push	ax
25174                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25175 660D           E8         15D3            call	_inb
25176 6610           44                         inc	sp
25177 6611           44                         inc	sp
25178                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25179 6612           8846         F7            mov	-9[bp],al
25180                                           !BCC_EOS
25181                                           ! 3470  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25182                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25183 6615           8A46         04            mov	al,4[bp]
25184 6618           30E4                       xor	ah,ah
25185 661A           48                         dec	ax
25186 661B           50                         push	ax
25187                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25188 661C           8A46         F7            mov	al,-9[bp]
25189 661F           24                     E0  and	al,#$E0
25190                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25191 6621           30E4                       xor	ah,ah
25192 6623           0B46         F2            or	ax,-$E[bp]
25193 6626           44                         inc	sp
25194 6627           44                         inc	sp
25195                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25196 6628           8846         F7            mov	-9[bp],al
25197                                           !BCC_EOS
25198                                           ! 3471  outb(crtc_addr+1, crtc_r9);
25199                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25200 662B           8A46         F7            mov	al,-9[bp]
25201 662E           30E4                       xor	ah,ah
25202 6630           50                         push	ax
25203                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25204 6631           8B46         FE            mov	ax,-2[bp]
25205                                           ! Debug: list unsigned int = ax+1 (used reg = )
25206 6634           40                         inc	ax
25207 6635           50                         push	ax
25208                                           ! Debug: func () void = outb+0 (used reg = )
25209 6636           E8         15C0            call	_outb
25210 6639           83C4                   04  add	sp,*4
25211                                           !BCC_EOS
25212                                           ! 3472  if(lines==8)
25213                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25214 663C           8A46         04            mov	al,4[bp]
25215 663F           3C                     08  cmp	al,*8
25216 6641           75           10            jne 	.20E
25217                       00006643            .20F:
25218                                           ! 3473   {
25219                                           ! 3474    biosfn_set_cursor_shape(0x06,0x07);
25220                                           ! Debug: list int = const 7 (used reg = )
25221 6643           B8                   0007  mov	ax,*7
25222 6646           50                         push	ax
25223                                           ! Debug: list int = const 6 (used reg = )
25224 6647           B8                   0006  mov	ax,*6
25225 664A           50                         push	ax
25226                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25227 664B           E8         DBE0            call	_biosfn_set_cursor_shape
25228 664E           83C4                   04  add	sp,*4
25229                                           !BCC_EOS
25230                                           ! 3475   }
25231                                           ! 3476  else
25232                                           ! 3477   {
25233 6651           EB           18            jmp .210
25234                       00006653            .20E:
25235                                           ! 3478    biosfn_set_cursor_shape(lines-4,lines-3);
25236                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25237 6653           8A46         04            mov	al,4[bp]
25238 6656           30E4                       xor	ah,ah
25239                                           ! Debug: list unsigned int = ax-3 (used reg = )
25240 6658           05                   FFFD  add	ax,*-3
25241 665B           50                         push	ax
25242                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25243 665C           8A46         04            mov	al,4[bp]
25244 665F           30E4                       xor	ah,ah
25245                                           ! Debug: list unsigned int = ax-4 (used reg = )
25246 6661           05                   FFFC  add	ax,*-4
25247 6664           50                         push	ax
25248                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25249 6665           E8         DBC6            call	_biosfn_set_cursor_shape
25250 6668           83C4                   04  add	sp,*4
25251                                           !BCC_EOS
25252                                           ! 3479   }
25253                                           ! 3480  write_word(0x40,0x85, lines);
25254                       0000666B            .210:
25255                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25256 666B           8A46         04            mov	al,4[bp]
25257 666E           30E4                       xor	ah,ah
25258 6670           50                         push	ax
25259                                           ! Debug: list int = const $85 (used reg = )
25260 6671           B8                   0085  mov	ax,#$85
25261 6674           50                         push	ax
25262                                           ! Debug: list int = const $40 (used reg = )
25263 6675           B8                   0040  mov	ax,*$40
25264 6678           50                         push	ax
25265                                           ! Debug: func () void = write_word+0 (used reg = )
25266 6679           E8         154F            call	_write_word
25267 667C           83C4                   06  add	sp,*6
25268                                           !BCC_EOS
25269                                           ! 3481  outb(crtc_addr, 0x12);
25270                                           ! Debug: list int = const $12 (used reg = )
25271 667F           B8                   0012  mov	ax,*$12
25272 6682           50                         push	ax
25273                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25274 6683           FF76         FE            push	-2[bp]
25275                                           ! Debug: func () void = outb+0 (used reg = )
25276 6686           E8         1570            call	_outb
25277 6689           83C4                   04  add	sp,*4
25278                                           !BCC_EOS
25279                                           ! 3482  vde = inb(crtc_addr+1);
25280                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25281 668C           8B46         FE            mov	ax,-2[bp]
25282                                           ! Debug: list unsigned int = ax+1 (used reg = )
25283 668F           40                         inc	ax
25284 6690           50                         push	ax
25285                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25286 6691           E8         154F            call	_inb
25287 6694           44                         inc	sp
25288 6695           44                         inc	sp
25289                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25290 6696           30E4                       xor	ah,ah
25291 6698           8946         F8            mov	-8[bp],ax
25292                                           !BCC_EOS
25293                                           ! 3483  outb(crtc_addr, 0x07);
25294                                           ! Debug: list int = const 7 (used reg = )
25295 669B           B8                   0007  mov	ax,*7
25296 669E           50                         push	ax
25297                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25298 669F           FF76         FE            push	-2[bp]
25299                                           ! Debug: func () void = outb+0 (used reg = )
25300 66A2           E8         1554            call	_outb
25301 66A5           83C4                   04  add	sp,*4
25302                                           !BCC_EOS
25303                                           ! 3484  ovl = inb(crtc_addr+1);
25304                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25305 66A8           8B46         FE            mov	ax,-2[bp]
25306                                           ! Debug: list unsigned int = ax+1 (used reg = )
25307 66AB           40                         inc	ax
25308 66AC           50                         push	ax
25309                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25310 66AD           E8         1533            call	_inb
25311 66B0           44                         inc	sp
25312 66B1           44                         inc	sp
25313                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25314 66B2           8846         F6            mov	-$A[bp],al
25315                                           !BCC_EOS
25316                                           ! 3485  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25317                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25318 66B5           8A46         F6            mov	al,-$A[bp]
25319 66B8           24                     40  and	al,*$40
25320                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25321 66BA           30E4                       xor	ah,ah
25322 66BC           B1                     03  mov	cl,*3
25323 66BE           D3E0                       shl	ax,cl
25324 66C0           50                         push	ax
25325                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25326 66C1           8A46         F6            mov	al,-$A[bp]
25327 66C4           24                     02  and	al,*2
25328                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25329 66C6           30E4                       xor	ah,ah
25330 66C8           B1                     07  mov	cl,*7
25331 66CA           D3E0                       shl	ax,cl
25332                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25333 66CC           0346         F2            add	ax,-$E[bp]
25334 66CF           44                         inc	sp
25335 66D0           44                         inc	sp
25336                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25337                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25338 66D1           40                         inc	ax
25339 66D2           0346         F8            add	ax,-8[bp]
25340 66D5           8946         F8            mov	-8[bp],ax
25341                                           !BCC_EOS
25342                                           ! 3486  rows = vde / lines;
25343                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25344 66D8           8A46         04            mov	al,4[bp]
25345 66DB           30E4                       xor	ah,ah
25346 66DD           89C3                       mov	bx,ax
25347 66DF           8B46         F8            mov	ax,-8[bp]
25348 66E2           E8         FEFA            call	idiv_u
25349                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25350 66E5           8846         F5            mov	-$B[bp],al
25351                                           !BCC_EOS
25352                                           ! 3487  write_byte(0x40,0x84, rows-1);
25353                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25354 66E8           8A46         F5            mov	al,-$B[bp]
25355 66EB           30E4                       xor	ah,ah
25356                                           ! Debug: list unsigned int = ax-1 (used reg = )
25357 66ED           48                         dec	ax
25358 66EE           50                         push	ax
25359                                           ! Debug: list int = const $84 (used reg = )
25360 66EF           B8                   0084  mov	ax,#$84
25361 66F2           50                         push	ax
25362                                           ! Debug: list int = const $40 (used reg = )
25363 66F3           B8                   0040  mov	ax,*$40
25364 66F6           50                         push	ax
25365                                           ! Debug: func () void = write_byte+0 (used reg = )
25366 66F7           E8         14B9            call	_write_byte
25367 66FA           83C4                   06  add	sp,*6
25368                                           !BCC_EOS
25369                                           ! 3488  cols = read_word(0x40,0x4A);
25370                                           ! Debug: list int = const $4A (used reg = )
25371 66FD           B8                   004A  mov	ax,*$4A
25372 6700           50                         push	ax
25373                                           ! Debug: list int = const $40 (used reg = )
25374 6701           B8                   0040  mov	ax,*$40
25375 6704           50                         push	ax
25376                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25377 6705           E8         1498            call	_read_word
25378 6708           83C4                   04  add	sp,*4
25379                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25380 670B           8946         FC            mov	-4[bp],ax
25381                                           !BCC_EOS
25382                                           ! 3489  write_word(0x40,0x4C, rows * cols * 2);
25383                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25384 670E           8A46         F5            mov	al,-$B[bp]
25385 6711           30E4                       xor	ah,ah
25386 6713           8B4E         FC            mov	cx,-4[bp]
25387 6716           F7E9                       imul	cx
25388                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25389 6718           D1E0                       shl	ax,*1
25390                                           ! Debug: list unsigned int = ax+0 (used reg = )
25391 671A           50                         push	ax
25392                                           ! Debug: list int = const $4C (used reg = )
25393 671B           B8                   004C  mov	ax,*$4C
25394 671E           50                         push	ax
25395                                           ! Debug: list int = const $40 (used reg = )
25396 671F           B8                   0040  mov	ax,*$40
25397 6722           50                         push	ax
25398                                           ! Debug: func () void = write_word+0 (used reg = )
25399 6723           E8         14A5            call	_write_word
25400 6726           83C4                   06  add	sp,*6
25401                                           !BCC_EOS
25402                                           ! 3490 }
25403 6729           89EC                       mov	sp,bp
25404 672B           5D                         pop	bp
25405 672C           C3                         ret
25406                                           ! 3491 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25407                                           ! Register BX used in function set_scan_lines
25408                       0000672D            _biosfn_load_text_user_pat:
25409                                           !BCC_EOS
25410                                           !BCC_EOS
25411                                           !BCC_EOS
25412                                           !BCC_EOS
25413                                           !BCC_EOS
25414                                           !BCC_EOS
25415                                           !BCC_EOS
25416                                           ! 3492 {
25417                                           ! 3493  Bit16u blockaddr,dest,i,src;
25418                                           !BCC_EOS
25419                                           ! 3494  get_font_access();
25420 672D           55                         push	bp
25421 672E           89E5                       mov	bp,sp
25422 6730           83C4                   F8  add	sp,*-8
25423                                           ! Debug: func () void = get_font_access+0 (used reg = )
25424 6733           E8         FE57            call	_get_font_access
25425                                           !BCC_EOS
25426                                           ! 3495  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25427                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25428 6736           8A46         0E            mov	al,$E[bp]
25429 6739           24                     04  and	al,*4
25430                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25431 673B           30E4                       xor	ah,ah
25432 673D           88C4                       mov	ah,al
25433 673F           30C0                       xor	al,al
25434 6741           B1                     03  mov	cl,*3
25435 6743           D3E0                       shl	ax,cl
25436 6745           50                         push	ax
25437                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25438 6746           8A46         0E            mov	al,$E[bp]
25439 6749           24                     03  and	al,*3
25440                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25441 674B           30E4                       xor	ah,ah
25442 674D           88C4                       mov	ah,al
25443 674F           30C0                       xor	al,al
25444 6751           B1                     06  mov	cl,*6
25445 6753           D3E0                       shl	ax,cl
25446                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25447 6755           0346         F6            add	ax,-$A[bp]
25448 6758           44                         inc	sp
25449 6759           44                         inc	sp
25450                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25451 675A           8946         FE            mov	-2[bp],ax
25452                                           !BCC_EOS
25453                                           ! 3496  for(i=0;i<
25454                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25455 675D           31C0                       xor	ax,ax
25456 675F           8946         FA            mov	-6[bp],ax
25457                                           !BCC_EOS
25458                                           ! 3496 CX;i++)
25459                                           !BCC_EOS
25460                                           ! 3497   {
25461 6762           EB           44            jmp .213
25462                       00006764            .214:
25463                                           ! 3498    src = BP + i * BH;
25464                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25465 6764           8A46         10            mov	al,$10[bp]
25466 6767           30E4                       xor	ah,ah
25467 6769           89C3                       mov	bx,ax
25468 676B           8B46         FA            mov	ax,-6[bp]
25469 676E           89D9                       mov	cx,bx
25470 6770           F7E9                       imul	cx
25471                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25472                                           ! Debug: expression subtree swapping
25473 6772           0346         08            add	ax,8[bp]
25474                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25475 6775           8946         F8            mov	-8[bp],ax
25476                                           !BCC_EOS
25477                                           ! 3499    dest = blockaddr + (DX + i) * 32;
25478                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25479 6778           8B46         0C            mov	ax,$C[bp]
25480 677B           0346         FA            add	ax,-6[bp]
25481                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25482 677E           B1                     05  mov	cl,*5
25483 6780           D3E0                       shl	ax,cl
25484                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25485                                           ! Debug: expression subtree swapping
25486 6782           0346         FE            add	ax,-2[bp]
25487                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25488 6785           8946         FC            mov	-4[bp],ax
25489                                           !BCC_EOS
25490                                           ! 3500    memcpyb(0xA000, dest, ES, src, BH);
25491                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25492 6788           8A46         10            mov	al,$10[bp]
25493 678B           30E4                       xor	ah,ah
25494 678D           50                         push	ax
25495                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25496 678E           FF76         F8            push	-8[bp]
25497                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25498 6791           FF76         06            push	6[bp]
25499                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25500 6794           FF76         FC            push	-4[bp]
25501                                           ! Debug: list unsigned int = const $A000 (used reg = )
25502 6797           B8                   A000  mov	ax,#$A000
25503 679A           50                         push	ax
25504                                           ! Debug: func () void = memcpyb+0 (used reg = )
25505 679B           E8         138F            call	_memcpyb
25506 679E           83C4                   0A  add	sp,*$A
25507                                           !BCC_EOS
25508                                           ! 3501   }
25509                                           ! 3502  release_font_access();
25510                       000067A1            .212:
25511                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25512 67A1           8B46         FA            mov	ax,-6[bp]
25513 67A4           40                         inc	ax
25514 67A5           8946         FA            mov	-6[bp],ax
25515                       000067A8            .213:
25516                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25517 67A8           8B46         FA            mov	ax,-6[bp]
25518 67AB           3B46         0A            cmp	ax,$A[bp]
25519 67AE           72           B4            jb 	.214
25520                       000067B0            .215:
25521                       000067B0            .211:
25522                                           ! Debug: func () void = release_font_access+0 (used reg = )
25523 67B0           E8         FDFD            call	_release_font_access
25524                                           !BCC_EOS
25525                                           ! 3503  if(AL>=0x10)
25526                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25527 67B3           8A46         04            mov	al,4[bp]
25528 67B6           3C                     10  cmp	al,*$10
25529 67B8           72           0B            jb  	.216
25530                       000067BA            .217:
25531                                           ! 3504   {
25532                                           ! 3505    set_scan_lines(BH);
25533                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25534 67BA           8A46         10            mov	al,$10[bp]
25535 67BD           30E4                       xor	ah,ah
25536 67BF           50                         push	ax
25537                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25538 67C0           E8         FE21            call	_set_scan_lines
25539 67C3           44                         inc	sp
25540 67C4           44                         inc	sp
25541                                           !BCC_EOS
25542                                           ! 3506   }
25543                                           ! 3507 }
25544                       000067C5            .216:
25545 67C5           89EC                       mov	sp,bp
25546 67C7           5D                         pop	bp
25547 67C8           C3                         ret
25548                                           ! 3508 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25549                                           ! Register BX used in function biosfn_load_text_user_pat
25550                       000067C9            _biosfn_load_text_8_14_pat:
25551                                           !BCC_EOS
25552                                           !BCC_EOS
25553                                           ! 3509 {
25554                                           ! 3510  Bit16u blockaddr,dest,i,src;
25555                                           !BCC_EOS
25556                                           ! 3511  get_font_access();
25557 67C9           55                         push	bp
25558 67CA           89E5                       mov	bp,sp
25559 67CC           83C4                   F8  add	sp,*-8
25560                                           ! Debug: func () void = get_font_access+0 (used reg = )
25561 67CF           E8         FDBB            call	_get_font_access
25562                                           !BCC_EOS
25563                                           ! 3512  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25564                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25565 67D2           8A46         06            mov	al,6[bp]
25566 67D5           24                     04  and	al,*4
25567                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25568 67D7           30E4                       xor	ah,ah
25569 67D9           88C4                       mov	ah,al
25570 67DB           30C0                       xor	al,al
25571 67DD           B1                     03  mov	cl,*3
25572 67DF           D3E0                       shl	ax,cl
25573 67E1           50                         push	ax
25574                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25575 67E2           8A46         06            mov	al,6[bp]
25576 67E5           24                     03  and	al,*3
25577                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25578 67E7           30E4                       xor	ah,ah
25579 67E9           88C4                       mov	ah,al
25580 67EB           30C0                       xor	al,al
25581 67ED           B1                     06  mov	cl,*6
25582 67EF           D3E0                       shl	ax,cl
25583                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25584 67F1           0346         F6            add	ax,-$A[bp]
25585 67F4           44                         inc	sp
25586 67F5           44                         inc	sp
25587                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25588 67F6           8946         FE            mov	-2[bp],ax
25589                                           !BCC_EOS
25590                                           ! 3513  for(i=0;i<0x100;i++)
25591                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25592 67F9           31C0                       xor	ax,ax
25593 67FB           8946         FA            mov	-6[bp],ax
25594                                           !BCC_EOS
25595                                           !BCC_EOS
25596                                           ! 3514   {
25597 67FE           EB           41            jmp .21A
25598                       00006800            .21B:
25599                                           ! 3515    src = i * 14;
25600                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25601 6800           8B46         FA            mov	ax,-6[bp]
25602 6803           89C2                       mov	dx,ax
25603 6805           B1                     03  mov	cl,*3
25604 6807           D3E0                       shl	ax,cl
25605 6809           29D0                       sub	ax,dx
25606 680B           D1E0                       shl	ax,*1
25607                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25608 680D           8946         F8            mov	-8[bp],ax
25609                                           !BCC_EOS
25610                                           ! 3516    dest = blockaddr + i * 32;
25611                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25612 6810           8B46         FA            mov	ax,-6[bp]
25613 6813           B1                     05  mov	cl,*5
25614 6815           D3E0                       shl	ax,cl
25615                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25616                                           ! Debug: expression subtree swapping
25617 6817           0346         FE            add	ax,-2[bp]
25618                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25619 681A           8946         FC            mov	-4[bp],ax
25620                                           !BCC_EOS
25621                                           ! 3517    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25622                                           ! Debug: list int = const $E (used reg = )
25623 681D           B8                   000E  mov	ax,*$E
25624 6820           50                         push	ax
25625                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25626 6821           8B5E         F8            mov	bx,-8[bp]
25627                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25628                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25629 6824           81C3                 1761  add	bx,#_vgafont14
25630 6828           53                         push	bx
25631                                           ! Debug: list unsigned int = const $C000 (used reg = )
25632 6829           B8                   C000  mov	ax,#$C000
25633 682C           50                         push	ax
25634                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25635 682D           FF76         FC            push	-4[bp]
25636                                           ! Debug: list unsigned int = const $A000 (used reg = )
25637 6830           B8                   A000  mov	ax,#$A000
25638 6833           50                         push	ax
25639                                           ! Debug: func () void = memcpyb+0 (used reg = )
25640 6834           E8         12F6            call	_memcpyb
25641 6837           83C4                   0A  add	sp,*$A
25642                                           !BCC_EOS
25643                                           ! 3518   }
25644                                           ! 3519  release_font_access();
25645                       0000683A            .219:
25646                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25647 683A           8B46         FA            mov	ax,-6[bp]
25648 683D           40                         inc	ax
25649 683E           8946         FA            mov	-6[bp],ax
25650                       00006841            .21A:
25651                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25652 6841           8B46         FA            mov	ax,-6[bp]
25653 6844           3D                   0100  cmp	ax,#$100
25654 6847           72           B7            jb 	.21B
25655                       00006849            .21C:
25656                       00006849            .218:
25657                                           ! Debug: func () void = release_font_access+0 (used reg = )
25658 6849           E8         FD64            call	_release_font_access
25659                                           !BCC_EOS
25660                                           ! 3520  if(AL>=0x10)
25661                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25662 684C           8A46         04            mov	al,4[bp]
25663 684F           3C                     10  cmp	al,*$10
25664 6851           72           09            jb  	.21D
25665                       00006853            .21E:
25666                                           ! 3521   {
25667                                           ! 3522    set_scan_lines(14);
25668                                           ! Debug: list int = const $E (used reg = )
25669 6853           B8                   000E  mov	ax,*$E
25670 6856           50                         push	ax
25671                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25672 6857           E8         FD8A            call	_set_scan_lines
25673 685A           44                         inc	sp
25674 685B           44                         inc	sp
25675                                           !BCC_EOS
25676                                           ! 3523   }
25677                                           ! 3524 }
25678                       0000685C            .21D:
25679 685C           89EC                       mov	sp,bp
25680 685E           5D                         pop	bp
25681 685F           C3                         ret
25682                                           ! 3525 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25683                                           ! Register BX used in function biosfn_load_text_8_14_pat
25684                       00006860            _biosfn_load_text_8_8_pat:
25685                                           !BCC_EOS
25686                                           !BCC_EOS
25687                                           ! 3526 {
25688                                           ! 3527  Bit16u blockaddr,dest,i,src;
25689                                           !BCC_EOS
25690                                           ! 3528  get_font_access();
25691 6860           55                         push	bp
25692 6861           89E5                       mov	bp,sp
25693 6863           83C4                   F8  add	sp,*-8
25694                                           ! Debug: func () void = get_font_access+0 (used reg = )
25695 6866           E8         FD24            call	_get_font_access
25696                                           !BCC_EOS
25697                                           ! 3529  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25698                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25699 6869           8A46         06            mov	al,6[bp]
25700 686C           24                     04  and	al,*4
25701                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25702 686E           30E4                       xor	ah,ah
25703 6870           88C4                       mov	ah,al
25704 6872           30C0                       xor	al,al
25705 6874           B1                     03  mov	cl,*3
25706 6876           D3E0                       shl	ax,cl
25707 6878           50                         push	ax
25708                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25709 6879           8A46         06            mov	al,6[bp]
25710 687C           24                     03  and	al,*3
25711                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25712 687E           30E4                       xor	ah,ah
25713 6880           88C4                       mov	ah,al
25714 6882           30C0                       xor	al,al
25715 6884           B1                     06  mov	cl,*6
25716 6886           D3E0                       shl	ax,cl
25717                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25718 6888           0346         F6            add	ax,-$A[bp]
25719 688B           44                         inc	sp
25720 688C           44                         inc	sp
25721                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25722 688D           8946         FE            mov	-2[bp],ax
25723                                           !BCC_EOS
25724                                           ! 3530  for(i=0;i<0x100;i++)
25725                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25726 6890           31C0                       xor	ax,ax
25727 6892           8946         FA            mov	-6[bp],ax
25728                                           !BCC_EOS
25729                                           !BCC_EOS
25730                                           ! 3531   {
25731 6895           EB           3B            jmp .221
25732                       00006897            .222:
25733                                           ! 3532    src = i * 8;
25734                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25735 6897           8B46         FA            mov	ax,-6[bp]
25736 689A           B1                     03  mov	cl,*3
25737 689C           D3E0                       shl	ax,cl
25738                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25739 689E           8946         F8            mov	-8[bp],ax
25740                                           !BCC_EOS
25741                                           ! 3533    dest = blockaddr + i * 32;
25742                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25743 68A1           8B46         FA            mov	ax,-6[bp]
25744 68A4           B1                     05  mov	cl,*5
25745 68A6           D3E0                       shl	ax,cl
25746                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25747                                           ! Debug: expression subtree swapping
25748 68A8           0346         FE            add	ax,-2[bp]
25749                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25750 68AB           8946         FC            mov	-4[bp],ax
25751                                           !BCC_EOS
25752                                           ! 3534    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25753                                           ! Debug: list int = const 8 (used reg = )
25754 68AE           B8                   0008  mov	ax,*8
25755 68B1           50                         push	ax
25756                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25757 68B2           8B5E         F8            mov	bx,-8[bp]
25758                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25759                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25760 68B5           81C3                 0F61  add	bx,#_vgafont8
25761 68B9           53                         push	bx
25762                                           ! Debug: list unsigned int = const $C000 (used reg = )
25763 68BA           B8                   C000  mov	ax,#$C000
25764 68BD           50                         push	ax
25765                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25766 68BE           FF76         FC            push	-4[bp]
25767                                           ! Debug: list unsigned int = const $A000 (used reg = )
25768 68C1           B8                   A000  mov	ax,#$A000
25769 68C4           50                         push	ax
25770                                           ! Debug: func () void = memcpyb+0 (used reg = )
25771 68C5           E8         1265            call	_memcpyb
25772 68C8           83C4                   0A  add	sp,*$A
25773                                           !BCC_EOS
25774                                           ! 3535   }
25775                                           ! 3536  release_font_access();
25776                       000068CB            .220:
25777                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25778 68CB           8B46         FA            mov	ax,-6[bp]
25779 68CE           40                         inc	ax
25780 68CF           8946         FA            mov	-6[bp],ax
25781                       000068D2            .221:
25782                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25783 68D2           8B46         FA            mov	ax,-6[bp]
25784 68D5           3D                   0100  cmp	ax,#$100
25785 68D8           72           BD            jb 	.222
25786                       000068DA            .223:
25787                       000068DA            .21F:
25788                                           ! Debug: func () void = release_font_access+0 (used reg = )
25789 68DA           E8         FCD3            call	_release_font_access
25790                                           !BCC_EOS
25791                                           ! 3537  if(AL>=0x10)
25792                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25793 68DD           8A46         04            mov	al,4[bp]
25794 68E0           3C                     10  cmp	al,*$10
25795 68E2           72           09            jb  	.224
25796                       000068E4            .225:
25797                                           ! 3538   {
25798                                           ! 3539    set_scan_lines(8);
25799                                           ! Debug: list int = const 8 (used reg = )
25800 68E4           B8                   0008  mov	ax,*8
25801 68E7           50                         push	ax
25802                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25803 68E8           E8         FCF9            call	_set_scan_lines
25804 68EB           44                         inc	sp
25805 68EC           44                         inc	sp
25806                                           !BCC_EOS
25807                                           ! 3540   }
25808                                           ! 3541 }
25809                       000068ED            .224:
25810 68ED           89EC                       mov	sp,bp
25811 68EF           5D                         pop	bp
25812 68F0           C3                         ret
25813                                           ! 3542 #asm
25814                                           !BCC_ASM
25815                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25816                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25817                       000068F1            biosfn_set_text_block_specifier:
25818 68F1           50                           push ax
25819 68F2           52                           push dx
25820 68F3           BA                   03C4    mov dx, # 0x3c4
25821 68F6           88DC                         mov ah, bl
25822 68F8           B0                     03    mov al, #0x03
25823 68FA           EF                           out dx, ax
25824 68FB           5A                           pop dx
25825 68FC           58                           pop ax
25826 68FD           C3                           ret
25827                                           ! 3553 endasm
25828                                           !BCC_ENDASM
25829                                           ! 3554 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25830                                           ! Register BX used in function biosfn_load_text_8_8_pat
25831                       000068FE            _biosfn_load_text_8_16_pat:
25832                                           !BCC_EOS
25833                                           !BCC_EOS
25834                                           ! 3555 {
25835                                           ! 3556  Bit16u blockaddr,dest,i,src;
25836                                           !BCC_EOS
25837                                           ! 3557  get_font_access();
25838 68FE           55                         push	bp
25839 68FF           89E5                       mov	bp,sp
25840 6901           83C4                   F8  add	sp,*-8
25841                                           ! Debug: func () void = get_font_access+0 (used reg = )
25842 6904           E8         FC86            call	_get_font_access
25843                                           !BCC_EOS
25844                                           ! 3558  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25845                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25846 6907           8A46         06            mov	al,6[bp]
25847 690A           24                     04  and	al,*4
25848                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25849 690C           30E4                       xor	ah,ah
25850 690E           88C4                       mov	ah,al
25851 6910           30C0                       xor	al,al
25852 6912           B1                     03  mov	cl,*3
25853 6914           D3E0                       shl	ax,cl
25854 6916           50                         push	ax
25855                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25856 6917           8A46         06            mov	al,6[bp]
25857 691A           24                     03  and	al,*3
25858                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25859 691C           30E4                       xor	ah,ah
25860 691E           88C4                       mov	ah,al
25861 6920           30C0                       xor	al,al
25862 6922           B1                     06  mov	cl,*6
25863 6924           D3E0                       shl	ax,cl
25864                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25865 6926           0346         F6            add	ax,-$A[bp]
25866 6929           44                         inc	sp
25867 692A           44                         inc	sp
25868                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25869 692B           8946         FE            mov	-2[bp],ax
25870                                           !BCC_EOS
25871                                           ! 3559  for(i=0;i<0x100;i++)
25872                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25873 692E           31C0                       xor	ax,ax
25874 6930           8946         FA            mov	-6[bp],ax
25875                                           !BCC_EOS
25876                                           !BCC_EOS
25877                                           ! 3560   {
25878 6933           EB           3B            jmp .228
25879                       00006935            .229:
25880                                           ! 3561    src = i * 16;
25881                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25882 6935           8B46         FA            mov	ax,-6[bp]
25883 6938           B1                     04  mov	cl,*4
25884 693A           D3E0                       shl	ax,cl
25885                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25886 693C           8946         F8            mov	-8[bp],ax
25887                                           !BCC_EOS
25888                                           ! 3562    dest = blockaddr + i * 32;
25889                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25890 693F           8B46         FA            mov	ax,-6[bp]
25891 6942           B1                     05  mov	cl,*5
25892 6944           D3E0                       shl	ax,cl
25893                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25894                                           ! Debug: expression subtree swapping
25895 6946           0346         FE            add	ax,-2[bp]
25896                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25897 6949           8946         FC            mov	-4[bp],ax
25898                                           !BCC_EOS
25899                                           ! 3563    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25900                                           ! Debug: list int = const $10 (used reg = )
25901 694C           B8                   0010  mov	ax,*$10
25902 694F           50                         push	ax
25903                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25904 6950           8B5E         F8            mov	bx,-8[bp]
25905                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25906                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25907 6953           81C3                 2561  add	bx,#_vgafont16
25908 6957           53                         push	bx
25909                                           ! Debug: list unsigned int = const $C000 (used reg = )
25910 6958           B8                   C000  mov	ax,#$C000
25911 695B           50                         push	ax
25912                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25913 695C           FF76         FC            push	-4[bp]
25914                                           ! Debug: list unsigned int = const $A000 (used reg = )
25915 695F           B8                   A000  mov	ax,#$A000
25916 6962           50                         push	ax
25917                                           ! Debug: func () void = memcpyb+0 (used reg = )
25918 6963           E8         11C7            call	_memcpyb
25919 6966           83C4                   0A  add	sp,*$A
25920                                           !BCC_EOS
25921                                           ! 3564   }
25922                                           ! 3565  release_font_access();
25923                       00006969            .227:
25924                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25925 6969           8B46         FA            mov	ax,-6[bp]
25926 696C           40                         inc	ax
25927 696D           8946         FA            mov	-6[bp],ax
25928                       00006970            .228:
25929                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25930 6970           8B46         FA            mov	ax,-6[bp]
25931 6973           3D                   0100  cmp	ax,#$100
25932 6976           72           BD            jb 	.229
25933                       00006978            .22A:
25934                       00006978            .226:
25935                                           ! Debug: func () void = release_font_access+0 (used reg = )
25936 6978           E8         FC35            call	_release_font_access
25937                                           !BCC_EOS
25938                                           ! 3566  if(AL>=0x10)
25939                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25940 697B           8A46         04            mov	al,4[bp]
25941 697E           3C                     10  cmp	al,*$10
25942 6980           72           09            jb  	.22B
25943                       00006982            .22C:
25944                                           ! 3567   {
25945                                           ! 3568    set_scan_lines(16);
25946                                           ! Debug: list int = const $10 (used reg = )
25947 6982           B8                   0010  mov	ax,*$10
25948 6985           50                         push	ax
25949                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25950 6986           E8         FC5B            call	_set_scan_lines
25951 6989           44                         inc	sp
25952 698A           44                         inc	sp
25953                                           !BCC_EOS
25954                                           ! 3569   }
25955                                           ! 3570 }
25956                       0000698B            .22B:
25957 698B           89EC                       mov	sp,bp
25958 698D           5D                         pop	bp
25959 698E           C3                         ret
25960                                           ! 3571 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
25961                                           ! Register BX used in function biosfn_load_text_8_16_pat
25962                       0000698F            _biosfn_load_gfx_8_8_chars:
25963                                           !BCC_EOS
25964                                           !BCC_EOS
25965                                           ! 3572 {
25966                                           ! 3573 }
25967 698F           C3                         ret
25968                                           ! 3574 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
25969                       00006990            _biosfn_load_gfx_user_chars:
25970                                           !BCC_EOS
25971                                           !BCC_EOS
25972                                           !BCC_EOS
25973                                           !BCC_EOS
25974                                           !BCC_EOS
25975                                           ! 3575 {
25976                                           ! 3576 }
25977 6990           C3                         ret
25978                                           ! 3577 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
25979                       00006991            _biosfn_load_gfx_8_14_chars:
25980                                           !BCC_EOS
25981                                           ! 3578 {
25982                                           ! 3579 }
25983 6991           C3                         ret
25984                                           ! 3580 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
25985                       00006992            _biosfn_load_gfx_8_8_dd_chars:
25986                                           !BCC_EOS
25987                                           ! 3581 {
25988                                           ! 3582 }
25989 6992           C3                         ret
25990                                           ! 3583 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
25991                       00006993            _biosfn_load_gfx_8_16_chars:
25992                                           !BCC_EOS
25993                                           ! 3584 {
25994                                           ! 3585 }
25995 6993           C3                         ret
25996                                           ! 3586 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
25997                                           ! 3587 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
25998                       00006994            _biosfn_get_font_info:
25999                                           !BCC_EOS
26000                                           !BCC_EOS
26001                                           !BCC_EOS
26002                                           !BCC_EOS
26003                                           !BCC_EOS
26004                                           ! 3588 {Bit16u ss=get_SS();
26005 6994           55                         push	bp
26006 6995           89E5                       mov	bp,sp
26007 6997           4C                         dec	sp
26008 6998           4C                         dec	sp
26009                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26010 6999           E8         127D            call	_get_SS
26011                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26012 699C           8946         FE            mov	-2[bp],ax
26013                                           !BCC_EOS
26014                                           ! 3589  switch(BH)
26015 699F           8A46         04            mov	al,4[bp]
26016                                           ! 3590   {case 0x00:
26017 69A2           E9         0143            br 	.22F
26018                                           ! 3591     write_word(ss,ES,read_word(0x00,0x1f*4));
26019                       000069A5            .230:
26020                                           ! Debug: list int = const $7C (used reg = )
26021 69A5           B8                   007C  mov	ax,*$7C
26022 69A8           50                         push	ax
26023                                           ! Debug: list int = const 0 (used reg = )
26024 69A9           31C0                       xor	ax,ax
26025 69AB           50                         push	ax
26026                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26027 69AC           E8         11F1            call	_read_word
26028 69AF           83C4                   04  add	sp,*4
26029                                           ! Debug: list unsigned short = ax+0 (used reg = )
26030 69B2           50                         push	ax
26031                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26032 69B3           FF76         06            push	6[bp]
26033                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26034 69B6           FF76         FE            push	-2[bp]
26035                                           ! Debug: func () void = write_word+0 (used reg = )
26036 69B9           E8         120F            call	_write_word
26037 69BC           83C4                   06  add	sp,*6
26038                                           !BCC_EOS
26039                                           ! 3592     write_word(ss,BP,read_word(0x00,(0x1f*4
26040                                           ! 3592 )+2));
26041                                           ! Debug: list int = const $7E (used reg = )
26042 69BF           B8                   007E  mov	ax,*$7E
26043 69C2           50                         push	ax
26044                                           ! Debug: list int = const 0 (used reg = )
26045 69C3           31C0                       xor	ax,ax
26046 69C5           50                         push	ax
26047                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26048 69C6           E8         11D7            call	_read_word
26049 69C9           83C4                   04  add	sp,*4
26050                                           ! Debug: list unsigned short = ax+0 (used reg = )
26051 69CC           50                         push	ax
26052                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26053 69CD           FF76         08            push	8[bp]
26054                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26055 69D0           FF76         FE            push	-2[bp]
26056                                           ! Debug: func () void = write_word+0 (used reg = )
26057 69D3           E8         11F5            call	_write_word
26058 69D6           83C4                   06  add	sp,*6
26059                                           !BCC_EOS
26060                                           ! 3593     break;
26061 69D9           E9         0131            br 	.22D
26062                                           !BCC_EOS
26063                                           ! 3594    case 0x01:
26064                                           ! 3595     write_word(ss,ES,read_word(0x00,0x43*4));
26065                       000069DC            .231:
26066                                           ! Debug: list int = const $10C (used reg = )
26067 69DC           B8                   010C  mov	ax,#$10C
26068 69DF           50                         push	ax
26069                                           ! Debug: list int = const 0 (used reg = )
26070 69E0           31C0                       xor	ax,ax
26071 69E2           50                         push	ax
26072                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26073 69E3           E8         11BA            call	_read_word
26074 69E6           83C4                   04  add	sp,*4
26075                                           ! Debug: list unsigned short = ax+0 (used reg = )
26076 69E9           50                         push	ax
26077                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26078 69EA           FF76         06            push	6[bp]
26079                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26080 69ED           FF76         FE            push	-2[bp]
26081                                           ! Debug: func () void = write_word+0 (used reg = )
26082 69F0           E8         11D8            call	_write_word
26083 69F3           83C4                   06  add	sp,*6
26084                                           !BCC_EOS
26085                                           ! 3596     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26086                                           ! Debug: list int = const $10E (used reg = )
26087 69F6           B8                   010E  mov	ax,#$10E
26088 69F9           50                         push	ax
26089                                           ! Debug: list int = const 0 (used reg = )
26090 69FA           31C0                       xor	ax,ax
26091 69FC           50                         push	ax
26092                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26093 69FD           E8         11A0            call	_read_word
26094 6A00           83C4                   04  add	sp,*4
26095                                           ! Debug: list unsigned short = ax+0 (used reg = )
26096 6A03           50                         push	ax
26097                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26098 6A04           FF76         08            push	8[bp]
26099                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26100 6A07           FF76         FE            push	-2[bp]
26101                                           ! Debug: func () void = write_word+0 (used reg = )
26102 6A0A           E8         11BE            call	_write_word
26103 6A0D           83C4                   06  add	sp,*6
26104                                           !BCC_EOS
26105                                           ! 3597     break;
26106 6A10           E9         00FA            br 	.22D
26107                                           !BCC_EOS
26108                                           ! 3598    case 0x02:
26109                                           ! 3599     write_word(ss,ES,0xC000);
26110                       00006A13            .232:
26111                                           ! Debug: list unsigned int = const $C000 (used reg = )
26112 6A13           B8                   C000  mov	ax,#$C000
26113 6A16           50                         push	ax
26114                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26115 6A17           FF76         06            push	6[bp]
26116                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26117 6A1A           FF76         FE            push	-2[bp]
26118                                           ! Debug: func () void = write_word+0 (used reg = )
26119 6A1D           E8         11AB            call	_write_word
26120 6A20           83C4                   06  add	sp,*6
26121                                           !BCC_EOS
26122                                           ! 3600     write_word(ss,BP,vgafont14);
26123                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26124 6A23           BB                   1761  mov	bx,#_vgafont14
26125 6A26           53                         push	bx
26126                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26127 6A27           FF76         08            push	8[bp]
26128                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26129 6A2A           FF76         FE            push	-2[bp]
26130                                           ! Debug: func () void = write_word+0 (used reg = )
26131 6A2D           E8         119B            call	_write_word
26132 6A30           83C4                   06  add	sp,*6
26133                                           !BCC_EOS
26134                                           ! 3601     break;
26135 6A33           E9         00D7            br 	.22D
26136                                           !BCC_EOS
26137                                           ! 3602    case 0x03:
26138                                           ! 3603     write_word(ss,ES,0xC000);
26139                       00006A36            .233:
26140                                           ! Debug: list unsigned int = const $C000 (used reg = )
26141 6A36           B8                   C000  mov	ax,#$C000
26142 6A39           50                         push	ax
26143                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26144 6A3A           FF76         06            push	6[bp]
26145                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26146 6A3D           FF76         FE            push	-2[bp]
26147                                           ! Debug: func () void = write_word+0 (used reg = )
26148 6A40           E8         1188            call	_write_word
26149 6A43           83C4                   06  add	sp,*6
26150                                           !BCC_EOS
26151                                           ! 3604     write_word(ss,BP,vgafont8);
26152                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26153 6A46           BB                   0F61  mov	bx,#_vgafont8
26154 6A49           53                         push	bx
26155                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26156 6A4A           FF76         08            push	8[bp]
26157                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26158 6A4D           FF76         FE            push	-2[bp]
26159                                           ! Debug: func () void = write_word+0 (used reg = )
26160 6A50           E8         1178            call	_write_word
26161 6A53           83C4                   06  add	sp,*6
26162                                           !BCC_EOS
26163                                           ! 3605     break;
26164 6A56           E9         00B4            br 	.22D
26165                                           !BCC_EOS
26166                                           ! 3606    case 0x04:
26167                                           ! 3607     write_word(ss,ES,0xC000);
26168                       00006A59            .234:
26169                                           ! Debug: list unsigned int = const $C000 (used reg = )
26170 6A59           B8                   C000  mov	ax,#$C000
26171 6A5C           50                         push	ax
26172                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26173 6A5D           FF76         06            push	6[bp]
26174                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26175 6A60           FF76         FE            push	-2[bp]
26176                                           ! Debug: func () void = write_word+0 (used reg = )
26177 6A63           E8         1165            call	_write_word
26178 6A66           83C4                   06  add	sp,*6
26179                                           !BCC_EOS
26180                                           ! 3608     write_word(ss,BP,vgafont8+128*8);
26181                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26182 6A69           BB                   1361  mov	bx,#_vgafont8+$400
26183 6A6C           53                         push	bx
26184                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26185 6A6D           FF76         08            push	8[bp]
26186                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26187 6A70           FF76         FE            push	-2[bp]
26188                                           ! Debug: func () void = write_word+0 (used reg = )
26189 6A73           E8         1155            call	_write_word
26190 6A76           83C4                   06  add	sp,*6
26191                                           !BCC_EOS
26192                                           ! 3609     break;
26193 6A79           E9         0091            br 	.22D
26194                                           !BCC_EOS
26195                                           ! 3610    case 0x05:
26196                                           ! 3611     write_word(ss,ES,0xC000);
26197                       00006A7C            .235:
26198                                           ! Debug: list unsigned int = const $C000 (used reg = )
26199 6A7C           B8                   C000  mov	ax,#$C000
26200 6A7F           50                         push	ax
26201                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26202 6A80           FF76         06            push	6[bp]
26203                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26204 6A83           FF76         FE            push	-2[bp]
26205                                           ! Debug: func () void = write_word+0 (used reg = )
26206 6A86           E8         1142            call	_write_word
26207 6A89           83C4                   06  add	sp,*6
26208                                           !BCC_EOS
26209                                           ! 3612     write_word(ss,BP,vgafont14alt);
26210                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26211 6A8C           BB                   3561  mov	bx,#_vgafont14alt
26212 6A8F           53                         push	bx
26213                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26214 6A90           FF76         08            push	8[bp]
26215                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26216 6A93           FF76         FE            push	-2[bp]
26217                                           ! Debug: func () void = write_word+0 (used reg = )
26218 6A96           E8         1132            call	_write_word
26219 6A99           83C4                   06  add	sp,*6
26220                                           !BCC_EOS
26221                                           ! 3613     break;
26222 6A9C           EB           6F            jmp .22D
26223                                           !BCC_EOS
26224                                           ! 3614    case 0x06:
26225                                           ! 3615     write_word(ss,ES,0xC000);
26226                       00006A9E            .236:
26227                                           ! Debug: list unsigned int = const $C000 (used reg = )
26228 6A9E           B8                   C000  mov	ax,#$C000
26229 6AA1           50                         push	ax
26230                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26231 6AA2           FF76         06            push	6[bp]
26232                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26233 6AA5           FF76         FE            push	-2[bp]
26234                                           ! Debug: func () void = write_word+0 (used reg = )
26235 6AA8           E8         1120            call	_write_word
26236 6AAB           83C4                   06  add	sp,*6
26237                                           !BCC_EOS
26238                                           ! 3616     write_word(ss,BP,vgafont16);
26239                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26240 6AAE           BB                   2561  mov	bx,#_vgafont16
26241 6AB1           53                         push	bx
26242                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26243 6AB2           FF76         08            push	8[bp]
26244                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26245 6AB5           FF76         FE            push	-2[bp]
26246                                           ! Debug: func () void = write_word+0 (used reg = )
26247 6AB8           E8         1110            call	_write_word
26248 6ABB           83C4                   06  add	sp,*6
26249                                           !BCC_EOS
26250                                           ! 3617     break;
26251 6ABE           EB           4D            jmp .22D
26252                                           !BCC_EOS
26253                                           ! 3618    case 0x07:
26254                                           ! 3619     write_word(ss,ES,0xC000);
26255                       00006AC0            .237:
26256                                           ! Debug: list unsigned int = const $C000 (used reg = )
26257 6AC0           B8                   C000  mov	ax,#$C000
26258 6AC3           50                         push	ax
26259                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26260 6AC4           FF76         06            push	6[bp]
26261                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26262 6AC7           FF76         FE            push	-2[bp]
26263                                           ! Debug: func () void = write_word+0 (used reg = )
26264 6ACA           E8         10FE            call	_write_word
26265 6ACD           83C4                   06  add	sp,*6
26266                                           !BCC_EOS
26267                                           ! 3620     write_word(ss,BP,vgafont16alt);
26268                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26269 6AD0           BB                   3562  mov	bx,#_vgafont16alt
26270 6AD3           53                         push	bx
26271                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26272 6AD4           FF76         08            push	8[bp]
26273                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26274 6AD7           FF76         FE            push	-2[bp]
26275                                           ! Debug: func () void = write_word+0 (used reg = )
26276 6ADA           E8         10EE            call	_write_word
26277 6ADD           83C4                   06  add	sp,*6
26278                                           !BCC_EOS
26279                                           ! 3621     break;
26280 6AE0           EB           2B            jmp .22D
26281                                           !BCC_EOS
26282                                           ! 3622    default:
26283                                           ! 3623     return;
26284                       00006AE2            .238:
26285 6AE2           89EC                       mov	sp,bp
26286 6AE4           5D                         pop	bp
26287 6AE5           C3                         ret
26288                                           !BCC_EOS
26289                                           ! 3624   }
26290                                           ! 3625  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26291 6AE6           EB           25            jmp .22D
26292                       00006AE8            .22F:
26293 6AE8           2C                     00  sub	al,*0
26294 6AEA           72           F6            jb 	.238
26295 6AEC           3C                     07  cmp	al,*7
26296 6AEE           77           1B            ja  	.239
26297 6AF0           30E4                       xor	ah,ah
26298 6AF2           D1E0                       shl	ax,*1
26299 6AF4           89C3                       mov	bx,ax
26300 6AF6           2E                         seg	cs
26301 6AF7           FFA7       6AFB            br	.23A[bx]
26302                       00006AFB            .23A:
26303 6AFB                      69A5            .word	.230
26304 6AFD                      69DC            .word	.231
26305 6AFF                      6A13            .word	.232
26306 6B01                      6A36            .word	.233
26307 6B03                      6A59            .word	.234
26308 6B05                      6A7C            .word	.235
26309 6B07                      6A9E            .word	.236
26310 6B09                      6AC0            .word	.237
26311                       00006B0B            .239:
26312 6B0B           EB           D5            jmp	.238
26313                       00006B0D            .22D:
26314                       FFFFFFFC            ..FFF5	=	-4
26315                                           ! Debug: list int = const $85 (used reg = )
26316 6B0D           B8                   0085  mov	ax,#$85
26317 6B10           50                         push	ax
26318                                           ! Debug: list int = const $40 (used reg = )
26319 6B11           B8                   0040  mov	ax,*$40
26320 6B14           50                         push	ax
26321                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26322 6B15           E8         1075            call	_read_byte
26323 6B18           83C4                   04  add	sp,*4
26324                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26325 6B1B           30E4                       xor	ah,ah
26326                                           ! Debug: list unsigned short = ax+0 (used reg = )
26327 6B1D           50                         push	ax
26328                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26329 6B1E           FF76         0A            push	$A[bp]
26330                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26331 6B21           FF76         FE            push	-2[bp]
26332                                           ! Debug: func () void = write_word+0 (used reg = )
26333 6B24           E8         10A4            call	_write_word
26334 6B27           83C4                   06  add	sp,*6
26335                                           !BCC_EOS
26336                                           ! 3626  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26337                                           ! Debug: list int = const $84 (used reg = )
26338 6B2A           B8                   0084  mov	ax,#$84
26339 6B2D           50                         push	ax
26340                                           ! Debug: list int = const $40 (used reg = )
26341 6B2E           B8                   0040  mov	ax,*$40
26342 6B31           50                         push	ax
26343                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26344 6B32           E8         1058            call	_read_byte
26345 6B35           83C4                   04  add	sp,*4
26346                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26347 6B38           30E4                       xor	ah,ah
26348                                           ! Debug: list unsigned short = ax+0 (used reg = )
26349 6B3A           50                         push	ax
26350                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26351 6B3B           FF76         0C            push	$C[bp]
26352                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26353 6B3E           FF76         FE            push	-2[bp]
26354                                           ! Debug: func () void = write_word+0 (used reg = )
26355 6B41           E8         1087            call	_write_word
26356 6B44           83C4                   06  add	sp,*6
26357                                           !BCC_EOS
26358                                           ! 3627 }
26359 6B47           89EC                       mov	sp,bp
26360 6B49           5D                         pop	bp
26361 6B4A           C3                         ret
26362                                           ! 3628 #asm
26363                                           !BCC_ASM
26364                       00000006            _biosfn_get_font_info.BP	set	6
26365                       00000002            _biosfn_get_font_info.BH	set	2
26366                       00000008            _biosfn_get_font_info.CX	set	8
26367                       0000000A            _biosfn_get_font_info.DX	set	$A
26368                       00000004            _biosfn_get_font_info.ES	set	4
26369                       00006B4B            biosfn_get_ega_info:
26370 6B4B           1E                           push ds
26371 6B4C           50                           push ax
26372 6B4D           B8                   0040    mov ax, # 0x40
26373 6B50           8ED8                         mov ds, ax
26374 6B52           30ED                         xor ch, ch
26375 6B54           BB                   0088    mov bx, # 0x88
26376 6B57           8A0F                         mov cl, [bx]
26377 6B59           80E1                   0F    and cl, #0x0f
26378 6B5C           BB                   0063    mov bx, # 0x63
26379 6B5F           8B07                         mov ax, [bx]
26380 6B61           BB                   0003    mov bx, #0x0003
26381 6B64           3D                   03B4    cmp ax, # 0x3b4
26382 6B67           75           02              jne mode_ega_color
26383 6B69           B7                     01    mov bh, #0x01
26384                       00006B6B            mode_ega_color:
26385 6B6B           58                           pop ax
26386 6B6C           1F                           pop ds
26387 6B6D           C3                           ret
26388                                           ! 3648 endasm
26389                                           !BCC_ENDASM
26390                                           ! 3649 static void biosfn_alternate_prtsc()
26391                                           ! Register BX used in function biosfn_get_font_info
26392                                           ! 3650 {
26393                       00006B6E            _biosfn_alternate_prtsc:
26394                                           ! 3651 }
26395 6B6E           C3                         ret
26396                                           ! 3652 #asm
26397                                           !BCC_ASM
26398                       00006B6F            biosfn_select_vert_res:
26399                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26400 6B6F           1E                           push ds
26401 6B70           53                           push bx
26402 6B71           52                           push dx
26403 6B72           88C2                         mov dl, al
26404 6B74           B8                   0040    mov ax, # 0x40
26405 6B77           8ED8                         mov ds, ax
26406 6B79           BB                   0089    mov bx, # 0x89
26407 6B7C           8A07                         mov al, [bx]
26408 6B7E           BB                   0088    mov bx, # 0x88
26409 6B81           8A27                         mov ah, [bx]
26410 6B83           80FA                   01    cmp dl, #0x01
26411 6B86           74           15              je vert_res_350
26412 6B88           72           1D              jb vert_res_200
26413 6B8A           80FA                   02    cmp dl, #0x02
26414 6B8D           74           02              je vert_res_400
26415 6B8F           EB           2A              jmp set_retcode
26416                       00006B91            vert_res_400:
26417                                             ; reset modeset ctl bit 7 and set bit 4
26418                                             ; set switches bit 3-0 to 0x09
26419 6B91           24                     7F    and al, #0x7f
26420 6B93           0C                     10    or al, #0x10
26421 6B95           80E4                   F0    and ah, #0xf0
26422 6B98           80CC                   09    or ah, #0x09
26423 6B9B           75           14              jnz set_vert_res
26424                       00006B9D            vert_res_350:
26425                                             ; reset modeset ctl bit 7 and bit 4
26426                                             ; set switches bit 3-0 to 0x09
26427 6B9D           24                     6F    and al, #0x6f
26428 6B9F           80E4                   F0    and ah, #0xf0
26429 6BA2           80CC                   09    or ah, #0x09
26430 6BA5           75           0A              jnz set_vert_res
26431                       00006BA7            vert_res_200:
26432                                             ; set modeset ctl bit 7 and reset bit 4
26433                                             ; set switches bit 3-0 to 0x08
26434 6BA7           24                     EF    and al, #0xef
26435 6BA9           0C                     80    or al, #0x80
26436 6BAB           80E4                   F0    and ah, #0xf0
26437 6BAE           80CC                   08    or ah, #0x08
26438                       00006BB1            set_vert_res:
26439 6BB1           BB                   0089    mov bx, # 0x89
26440 6BB4           8807                         mov [bx], al
26441 6BB6           BB                   0088    mov bx, # 0x88
26442 6BB9           8827                         mov [bx], ah
26443                       00006BBB            set_retcode:
26444 6BBB           B8                   1212    mov ax, #0x1212
26445 6BBE           5A                           pop dx
26446 6BBF           5B                           pop bx
26447 6BC0           1F                           pop ds
26448 6BC1           C3                           ret
26449                       00006BC2            biosfn_enable_default_palette_loading:
26450 6BC2           1E                           push ds
26451 6BC3           53                           push bx
26452 6BC4           52                           push dx
26453 6BC5           88C2                         mov dl, al
26454 6BC7           80E2                   01    and dl, #0x01
26455 6BCA           C0E2                   03    shl dl, 3
26456 6BCD           B8                   0040    mov ax, # 0x40
26457 6BD0           8ED8                         mov ds, ax
26458 6BD2           BB                   0089    mov bx, # 0x89
26459 6BD5           8A07                         mov al, [bx]
26460 6BD7           24                     F7    and al, #0xf7
26461 6BD9           08D0                         or al, dl
26462 6BDB           8807                         mov [bx], al
26463 6BDD           B8                   1212    mov ax, #0x1212
26464 6BE0           5A                           pop dx
26465 6BE1           5B                           pop bx
26466 6BE2           1F                           pop ds
26467 6BE3           C3                           ret
26468                       00006BE4            biosfn_enable_video_addressing:
26469 6BE4           53                           push bx
26470 6BE5           52                           push dx
26471 6BE6           88C3                         mov bl, al
26472 6BE8           80E3                   01    and bl, #0x01
26473 6BEB           80F3                   01    xor bl, #0x01
26474 6BEE           D0E3                         shl bl, 1
26475 6BF0           BA                   03CC    mov dx, # 0x3cc
26476 6BF3           EC                           in al, dx
26477 6BF4           24                     FD    and al, #0xfd
26478 6BF6           08D8                         or al, bl
26479 6BF8           BA                   03C2    mov dx, # 0x3c2
26480 6BFB           EE                           out dx, al
26481 6BFC           B8                   1212    mov ax, #0x1212
26482 6BFF           5A                           pop dx
26483 6C00           5B                           pop bx
26484 6C01           C3                           ret
26485                       00006C02            biosfn_enable_grayscale_summing:
26486 6C02           1E                           push ds
26487 6C03           53                           push bx
26488 6C04           52                           push dx
26489 6C05           88C2                         mov dl, al
26490 6C07           80E2                   01    and dl, #0x01
26491 6C0A           80F2                   01    xor dl, #0x01
26492 6C0D           D0E2                         shl dl, 1
26493 6C0F           B8                   0040    mov ax, # 0x40
26494 6C12           8ED8                         mov ds, ax
26495 6C14           BB                   0089    mov bx, # 0x89
26496 6C17           8A07                         mov al, [bx]
26497 6C19           24                     FD    and al, #0xfd
26498 6C1B           08D0                         or al, dl
26499 6C1D           8807                         mov [bx], al
26500 6C1F           B8                   1212    mov ax, #0x1212
26501 6C22           5A                           pop dx
26502 6C23           5B                           pop bx
26503 6C24           1F                           pop ds
26504 6C25           C3                           ret
26505                       00006C26            biosfn_enable_cursor_emulation:
26506 6C26           1E                           push ds
26507 6C27           53                           push bx
26508 6C28           52                           push dx
26509 6C29           88C2                         mov dl, al
26510 6C2B           80E2                   01    and dl, #0x01
26511 6C2E           80F2                   01    xor dl, #0x01
26512 6C31           B8                   0040    mov ax, # 0x40
26513 6C34           8ED8                         mov ds, ax
26514 6C36           BB                   0089    mov bx, # 0x89
26515 6C39           8A07                         mov al, [bx]
26516 6C3B           24                     FE    and al, #0xfe
26517 6C3D           08D0                         or al, dl
26518 6C3F           8807                         mov [bx], al
26519 6C41           B8                   1212    mov ax, #0x1212
26520 6C44           5A                           pop dx
26521 6C45           5B                           pop bx
26522 6C46           1F                           pop ds
26523 6C47           C3                           ret
26524                                           ! 3779 endasm
26525                                           !BCC_ENDASM
26526                                           ! 3780 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26527                       00006C48            _biosfn_switch_video_interface:
26528                                           !BCC_EOS
26529                                           !BCC_EOS
26530                                           !BCC_EOS
26531                                           ! 3781 {
26532                                           ! 3782 }
26533 6C48           C3                         ret
26534                                           ! 3783 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26535                       00006C49            _biosfn_enable_video_refresh_control:
26536                                           !BCC_EOS
26537                                           ! 3784 {
26538                                           ! 3785 }
26539 6C49           C3                         ret
26540                                           ! 3786 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26541                                           ! 3787 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26542                       00006C4A            _biosfn_write_string:
26543                                           !BCC_EOS
26544                                           !BCC_EOS
26545                                           !BCC_EOS
26546                                           !BCC_EOS
26547                                           !BCC_EOS
26548                                           !BCC_EOS
26549                                           !BCC_EOS
26550                                           !BCC_EOS
26551                                           ! 3788 {
26552                                           ! 3789  Bit16u newcurs,oldcurs,dummy;
26553                                           !BCC_EOS
26554                                           ! 3790  Bit8u car,carattr;
26555                                           !BCC_EOS
26556                                           ! 3791  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26557 6C4A           55                         push	bp
26558 6C4B           89E5                       mov	bp,sp
26559 6C4D           83C4                   F8  add	sp,*-8
26560                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26561 6C50           8D5E         FC            lea	bx,-4[bp]
26562 6C53           53                         push	bx
26563                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26564 6C54           8D5E         FA            lea	bx,-6[bp]
26565 6C57           53                         push	bx
26566                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26567 6C58           8A46         06            mov	al,6[bp]
26568 6C5B           30E4                       xor	ah,ah
26569 6C5D           50                         push	ax
26570                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26571 6C5E           E8         D7E8            call	_biosfn_get_cursor_pos
26572 6C61           83C4                   06  add	sp,*6
26573                                           !BCC_EOS
26574                                           ! 3792  if(row==0xff)
26575                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26576 6C64           8A46         0C            mov	al,$C[bp]
26577 6C67           3C                     FF  cmp	al,#$FF
26578 6C69           75           12            jne 	.23B
26579                       00006C6B            .23C:
26580                                           ! 3793   {col=oldcurs&0x00ff;
26581                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26582 6C6B           8A46         FC            mov	al,-4[bp]
26583                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26584 6C6E           8846         0E            mov	$E[bp],al
26585                                           !BCC_EOS
26586                                           ! 3794    row=(oldcurs&0xff00)>>8;
26587                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26588 6C71           8B46         FC            mov	ax,-4[bp]
26589 6C74           30C0                       xor	al,al
26590                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26591 6C76           88E0                       mov	al,ah
26592 6C78           30E4                       xor	ah,ah
26593                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26594 6C7A           8846         0C            mov	$C[bp],al
26595                                           !BCC_EOS
26596                                           ! 3795   }
26597                                           ! 3796  newcurs=row; newcurs<<=8; newcurs+=col;
26598                       00006C7D            .23B:
26599                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26600 6C7D           8A46         0C            mov	al,$C[bp]
26601 6C80           30E4                       xor	ah,ah
26602 6C82           8946         FE            mov	-2[bp],ax
26603                                           !BCC_EOS
26604                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26605 6C85           8B46         FE            mov	ax,-2[bp]
26606 6C88           88C4                       mov	ah,al
26607 6C8A           30C0                       xor	al,al
26608 6C8C           8946         FE            mov	-2[bp],ax
26609                                           !BCC_EOS
26610                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26611 6C8F           8B46         FE            mov	ax,-2[bp]
26612 6C92           0246         0E            add	al,$E[bp]
26613 6C95           80D4                   00  adc	ah,*0
26614 6C98           8946         FE            mov	-2[bp],ax
26615                                           !BCC_EOS
26616                                           ! 3797  biosfn_set_cursor_pos(page,newcurs);
26617                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26618 6C9B           FF76         FE            push	-2[bp]
26619                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26620 6C9E           8A46         06            mov	al,6[bp]
26621 6CA1           30E4                       xor	ah,ah
26622 6CA3           50                         push	ax
26623                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26624 6CA4           E8         D6A2            call	_biosfn_set_cursor_pos
26625 6CA7           83C4                   04  add	sp,*4
26626                                           !BCC_EOS
26627                                           ! 3798  while(count--!=0)
26628                                           ! 3799   {
26629 6CAA           EB           4F            jmp .23E
26630                       00006CAC            .23F:
26631                                           ! 3800    car=read_byte(seg,offset++);
26632                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26633 6CAC           8B46         12            mov	ax,$12[bp]
26634 6CAF           40                         inc	ax
26635 6CB0           8946         12            mov	$12[bp],ax
26636                                           ! Debug: list unsigned short = ax-1 (used reg = )
26637 6CB3           48                         dec	ax
26638 6CB4           50                         push	ax
26639                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26640 6CB5           FF76         10            push	$10[bp]
26641                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26642 6CB8           E8         0ED2            call	_read_byte
26643 6CBB           83C4                   04  add	sp,*4
26644                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26645 6CBE           8846         F9            mov	-7[bp],al
26646                                           !BCC_EOS
26647                                           ! 3801    if((flag&0x02)!=0)
26648                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26649 6CC1           8A46         04            mov	al,4[bp]
26650 6CC4           24                     02  and	al,*2
26651                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26652 6CC6           84C0                       test	al,al
26653 6CC8           74           15            je  	.240
26654                       00006CCA            .241:
26655                                           ! 3802     attr=read_byte(seg,offset++);
26656                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26657 6CCA           8B46         12            mov	ax,$12[bp]
26658 6CCD           40                         inc	ax
26659 6CCE           8946         12            mov	$12[bp],ax
26660                                           ! Debug: list unsigned short = ax-1 (used reg = )
26661 6CD1           48                         dec	ax
26662 6CD2           50                         push	ax
26663                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26664 6CD3           FF76         10            push	$10[bp]
26665                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26666 6CD6           E8         0EB4            call	_read_byte
26667 6CD9           83C4                   04  add	sp,*4
26668                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26669 6CDC           8846         08            mov	8[bp],al
26670                                           !BCC_EOS
26671                                           ! 3803    biosfn_write_teletype(car,page,attr,3);
26672                       00006CDF            .240:
26673                                           ! Debug: list int = const 3 (used reg = )
26674 6CDF           B8                   0003  mov	ax,*3
26675 6CE2           50                         push	ax
26676                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26677 6CE3           8A46         08            mov	al,8[bp]
26678 6CE6           30E4                       xor	ah,ah
26679 6CE8           50                         push	ax
26680                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26681 6CE9           8A46         06            mov	al,6[bp]
26682 6CEC           30E4                       xor	ah,ah
26683 6CEE           50                         push	ax
26684                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26685 6CEF           8A46         F9            mov	al,-7[bp]
26686 6CF2           30E4                       xor	ah,ah
26687 6CF4           50                         push	ax
26688                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26689 6CF5           E8         F196            call	_biosfn_write_teletype
26690 6CF8           83C4                   08  add	sp,*8
26691                                           !BCC_EOS
26692                                           ! 3804   }
26693                                           ! 3805  if((flag&0x01)==0)
26694                       00006CFB            .23E:
26695                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26696 6CFB           8B46         0A            mov	ax,$A[bp]
26697 6CFE           48                         dec	ax
26698 6CFF           8946         0A            mov	$A[bp],ax
26699                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26700 6D02           3D                   FFFF  cmp	ax,*-1
26701 6D05           75           A5            jne	.23F
26702                       00006D07            .242:
26703                       00006D07            .23D:
26704                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26705 6D07           8A46         04            mov	al,4[bp]
26706 6D0A           24                     01  and	al,*1
26707                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26708 6D0C           84C0                       test	al,al
26709 6D0E           75           0F            jne 	.243
26710                       00006D10            .244:
26711                                           ! 3806   biosfn_set_cursor_pos(page,oldcurs);
26712                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26713 6D10           FF76         FC            push	-4[bp]
26714                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26715 6D13           8A46         06            mov	al,6[bp]
26716 6D16           30E4                       xor	ah,ah
26717 6D18           50                         push	ax
26718                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26719 6D19           E8         D62D            call	_biosfn_set_cursor_pos
26720 6D1C           83C4                   04  add	sp,*4
26721                                           !BCC_EOS
26722                                           ! 3807 }
26723                       00006D1F            .243:
26724 6D1F           89EC                       mov	sp,bp
26725 6D21           5D                         pop	bp
26726 6D22           C3                         ret
26727                                           ! 3808 #asm
26728                                           !BCC_ASM
26729                       00000008            _biosfn_write_string.count	set	8
26730                       0000000E            _biosfn_write_string.seg	set	$E
26731                       0000000C            _biosfn_write_string.col	set	$C
26732                       00000002            _biosfn_write_string.flag	set	2
26733                       00000006            _biosfn_write_string.attr	set	6
26734                       00000004            _biosfn_write_string.page	set	4
26735                       0000000A            _biosfn_write_string.row	set	$A
26736                       00000010            _biosfn_write_string.offset	set	$10
26737                       00006D23            biosfn_group_1A:
26738 6D23           3C                     00    cmp al, #0x00
26739 6D25           74           05              je biosfn_read_display_code
26740 6D27           3C                     01    cmp al, #0x01
26741 6D29           74           16              je biosfn_set_display_code
26742 6D2B           C3                           ret
26743                       00006D2C            biosfn_read_display_code:
26744 6D2C           1E                           push ds
26745 6D2D           50                           push ax
26746 6D2E           B8                   0040    mov ax, # 0x40
26747 6D31           8ED8                         mov ds, ax
26748 6D33           BB                   008A    mov bx, # 0x8A
26749 6D36           8A07                         mov al, [bx]
26750 6D38           88C3                         mov bl, al
26751 6D3A           30FF                         xor bh, bh
26752 6D3C           58                           pop ax
26753 6D3D           88E0                         mov al, ah
26754 6D3F           1F                           pop ds
26755 6D40           C3                           ret
26756                       00006D41            biosfn_set_display_code:
26757 6D41           1E                           push ds
26758 6D42           50                           push ax
26759 6D43           53                           push bx
26760 6D44           B8                   0040    mov ax, # 0x40
26761 6D47           8ED8                         mov ds, ax
26762 6D49           89D8                         mov ax, bx
26763 6D4B           BB                   008A    mov bx, # 0x8A
26764 6D4E           8807                         mov [bx], al
26765 6D50           5B                           pop bx
26766 6D51           58                           pop ax
26767 6D52           88E0                         mov al, ah
26768 6D54           1F                           pop ds
26769 6D55           C3                           ret
26770                                           ! 3842 endasm
26771                                           !BCC_ENDASM
26772                                           ! 3843 static void biosfn_read_state_info (BX,ES,DI)
26773                                           ! Register BX used in function biosfn_write_string
26774                                           ! 3844 Bit16u BX;Bit16u ES;Bit16u DI;
26775                       00006D56            _biosfn_read_state_info:
26776                                           !BCC_EOS
26777                                           !BCC_EOS
26778                                           !BCC_EOS
26779                                           ! 3845 {
26780                                           ! 3846  write_word(ES,DI+0x00,&static_functionality);
26781 6D56           55                         push	bp
26782 6D57           89E5                       mov	bp,sp
26783                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26784 6D59           BB                   0F51  mov	bx,#_static_functionality
26785 6D5C           53                         push	bx
26786                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26787 6D5D           8B46         08            mov	ax,8[bp]
26788                                           ! Debug: list unsigned int = ax+0 (used reg = )
26789 6D60           50                         push	ax
26790                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26791 6D61           FF76         06            push	6[bp]
26792                                           ! Debug: func () void = write_word+0 (used reg = )
26793 6D64           E8         0E64            call	_write_word
26794 6D67           89EC                       mov	sp,bp
26795                                           !BCC_EOS
26796                                           ! 3847  write_word(ES,DI+0x02,0xC000);
26797                                           ! Debug: list unsigned int = const $C000 (used reg = )
26798 6D69           B8                   C000  mov	ax,#$C000
26799 6D6C           50                         push	ax
26800                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26801 6D6D           8B46         08            mov	ax,8[bp]
26802                                           ! Debug: list unsigned int = ax+2 (used reg = )
26803 6D70           40                         inc	ax
26804 6D71           40                         inc	ax
26805 6D72           50                         push	ax
26806                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26807 6D73           FF76         06            push	6[bp]
26808                                           ! Debug: func () void = write_word+0 (used reg = )
26809 6D76           E8         0E52            call	_write_word
26810 6D79           89EC                       mov	sp,bp
26811                                           !BCC_EOS
26812                                           ! 3848  memcpyb(ES,DI+0x04,0x40,0x49,30);
26813                                           ! Debug: list int = const $1E (used reg = )
26814 6D7B           B8                   001E  mov	ax,*$1E
26815 6D7E           50                         push	ax
26816                                           ! Debug: list int = const $49 (used reg = )
26817 6D7F           B8                   0049  mov	ax,*$49
26818 6D82           50                         push	ax
26819                                           ! Debug: list int = const $40 (used reg = )
26820 6D83           B8                   0040  mov	ax,*$40
26821 6D86           50                         push	ax
26822                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26823 6D87           8B46         08            mov	ax,8[bp]
26824                                           ! Debug: list unsigned int = ax+4 (used reg = )
26825 6D8A           05                   0004  add	ax,*4
26826 6D8D           50                         push	ax
26827                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26828 6D8E           FF76         06            push	6[bp]
26829                                           ! Debug: func () void = memcpyb+0 (used reg = )
26830 6D91           E8         0D99            call	_memcpyb
26831 6D94           89EC                       mov	sp,bp
26832                                           !BCC_EOS
26833                                           ! 3849  memcpyb(ES,DI+0x22,0x40,0x84,3);
26834                                           ! Debug: list int = const 3 (used reg = )
26835 6D96           B8                   0003  mov	ax,*3
26836 6D99           50                         push	ax
26837                                           ! Debug: list int = const $84 (used reg = )
26838 6D9A           B8                   0084  mov	ax,#$84
26839 6D9D           50                         push	ax
26840                                           ! Debug: list int = const $40 (used reg = )
26841 6D9E           B8                   0040  mov	ax,*$40
26842 6DA1           50                         push	ax
26843                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26844 6DA2           8B46         08            mov	ax,8[bp]
26845                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26846 6DA5           05                   0022  add	ax,*$22
26847 6DA8           50                         push	ax
26848                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26849 6DA9           FF76         06            push	6[bp]
26850                                           ! Debug: func () void = memcpyb+0 (used reg = )
26851 6DAC           E8         0D7E            call	_memcpyb
26852 6DAF           89EC                       mov	sp,bp
26853                                           !BCC_EOS
26854                                           ! 3850  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26855                                           ! Debug: list int = const $8A (used reg = )
26856 6DB1           B8                   008A  mov	ax,#$8A
26857 6DB4           50                         push	ax
26858                                           ! Debug: list int = const $40 (used reg = )
26859 6DB5           B8                   0040  mov	ax,*$40
26860 6DB8           50                         push	ax
26861                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26862 6DB9           E8         0DD1            call	_read_byte
26863 6DBC           89EC                       mov	sp,bp
26864                                           ! Debug: list unsigned char = al+0 (used reg = )
26865 6DBE           30E4                       xor	ah,ah
26866 6DC0           50                         push	ax
26867                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26868 6DC1           8B46         08            mov	ax,8[bp]
26869                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26870 6DC4           05                   0025  add	ax,*$25
26871 6DC7           50                         push	ax
26872                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26873 6DC8           FF76         06            push	6[bp]
26874                                           ! Debug: func () void = write_byte+0 (used reg = )
26875 6DCB           E8         0DE5            call	_write_byte
26876 6DCE           89EC                       mov	sp,bp
26877                                           !BCC_EOS
26878                                           ! 3851  write_byte(ES,DI+0x26,0);
26879                                           ! Debug: list int = const 0 (used reg = )
26880 6DD0           31C0                       xor	ax,ax
26881 6DD2           50                         push	ax
26882                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26883 6DD3           8B46         08            mov	ax,8[bp]
26884                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26885 6DD6           05                   0026  add	ax,*$26
26886 6DD9           50                         push	ax
26887                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26888 6DDA           FF76         06            push	6[bp]
26889                                           ! Debug: func () void = write_byte+0 (used reg = )
26890 6DDD           E8         0DD3            call	_write_byte
26891 6DE0           89EC                       mov	sp,bp
26892                                           !BCC_EOS
26893                                           ! 3852  write_byte(ES,DI+0x27,16);
26894                                           ! Debug: list int = const $10 (used reg = )
26895 6DE2           B8                   0010  mov	ax,*$10
26896 6DE5           50                         push	ax
26897                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26898 6DE6           8B46         08            mov	ax,8[bp]
26899                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26900 6DE9           05                   0027  add	ax,*$27
26901 6DEC           50                         push	ax
26902                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26903 6DED           FF76         06            push	6[bp]
26904                                           ! Debug: func () void = write_byte+0 (used reg = )
26905 6DF0           E8         0DC0            call	_write_byte
26906 6DF3           89EC                       mov	sp,bp
26907                                           !BCC_EOS
26908                                           ! 3853  write_byte(ES,DI+0x28,0);
26909                                           ! Debug: list int = const 0 (used reg = )
26910 6DF5           31C0                       xor	ax,ax
26911 6DF7           50                         push	ax
26912                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26913 6DF8           8B46         08            mov	ax,8[bp]
26914                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26915 6DFB           05                   0028  add	ax,*$28
26916 6DFE           50                         push	ax
26917                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26918 6DFF           FF76         06            push	6[bp]
26919                                           ! Debug: func () void = write_byte+0 (used reg = )
26920 6E02           E8         0DAE            call	_write_byte
26921 6E05           89EC                       mov	sp,bp
26922                                           !BCC_EOS
26923                                           ! 3854  write_byte(ES,DI+0x29,8);
26924                                           ! Debug: list int = const 8 (used reg = )
26925 6E07           B8                   0008  mov	ax,*8
26926 6E0A           50                         push	ax
26927                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26928 6E0B           8B46         08            mov	ax,8[bp]
26929                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26930 6E0E           05                   0029  add	ax,*$29
26931 6E11           50                         push	ax
26932                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26933 6E12           FF76         06            push	6[bp]
26934                                           ! Debug: func () void = write_byte+0 (used reg = )
26935 6E15           E8         0D9B            call	_write_byte
26936 6E18           89EC                       mov	sp,bp
26937                                           !BCC_EOS
26938                                           ! 3855  write_byte(ES,DI+0x2a,2);
26939                                           ! Debug: list int = const 2 (used reg = )
26940 6E1A           B8                   0002  mov	ax,*2
26941 6E1D           50                         push	ax
26942                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
26943 6E1E           8B46         08            mov	ax,8[bp]
26944                                           ! Debug: list unsigned int = ax+$2A (used reg = )
26945 6E21           05                   002A  add	ax,*$2A
26946 6E24           50                         push	ax
26947                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26948 6E25           FF76         06            push	6[bp]
26949                                           ! Debug: func () void = write_byte+0 (used reg = )
26950 6E28           E8         0D88            call	_write_byte
26951 6E2B           89EC                       mov	sp,bp
26952                                           !BCC_EOS
26953                                           ! 3856  write_byte(ES,DI+0x2b,0);
26954                                           ! Debug: list int = const 0 (used reg = )
26955 6E2D           31C0                       xor	ax,ax
26956 6E2F           50                         push	ax
26957                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
26958 6E30           8B46         08            mov	ax,8[bp]
26959                                           ! Debug: list unsigned int = ax+$2B (used reg = )
26960 6E33           05                   002B  add	ax,*$2B
26961 6E36           50                         push	ax
26962                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26963 6E37           FF76         06            push	6[bp]
26964                                           ! Debug: func () void = write_byte+0 (used reg = )
26965 6E3A           E8         0D76            call	_write_byte
26966 6E3D           89EC                       mov	sp,bp
26967                                           !BCC_EOS
26968                                           ! 3857  write_byte(ES,DI+0x2c,0);
26969                                           ! Debug: list int = const 0 (used reg = )
26970 6E3F           31C0                       xor	ax,ax
26971 6E41           50                         push	ax
26972                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
26973 6E42           8B46         08            mov	ax,8[bp]
26974                                           ! Debug: list unsigned int = ax+$2C (used reg = )
26975 6E45           05                   002C  add	ax,*$2C
26976 6E48           50                         push	ax
26977                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26978 6E49           FF76         06            push	6[bp]
26979                                           ! Debug: func () void = write_byte+0 (used reg = )
26980 6E4C           E8         0D64            call	_write_byte
26981 6E4F           89EC                       mov	sp,bp
26982                                           !BCC_EOS
26983                                           ! 3858  write_byte(ES,DI+0x31,3);
26984                                           ! Debug: list int = const 3 (used reg = )
26985 6E51           B8                   0003  mov	ax,*3
26986 6E54           50                         push	ax
26987                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
26988 6E55           8B46         08            mov	ax,8[bp]
26989                                           ! Debug: list unsigned int = ax+$31 (used reg = )
26990 6E58           05                   0031  add	ax,*$31
26991 6E5B           50                         push	ax
26992                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26993 6E5C           FF76         06            push	6[bp]
26994                                           ! Debug: func () void = write_byte+0 (used reg = )
26995 6E5F           E8         0D51            call	_write_byte
26996 6E62           89EC                       mov	sp,bp
26997                                           !BCC_EOS
26998                                           ! 3859  write_byte(ES,DI+0x32,0);
26999                                           ! Debug: list int = const 0 (used reg = )
27000 6E64           31C0                       xor	ax,ax
27001 6E66           50                         push	ax
27002                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27003 6E67           8B46         08            mov	ax,8[bp]
27004                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27005 6E6A           05                   0032  add	ax,*$32
27006 6E6D           50                         push	ax
27007                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27008 6E6E           FF76         06            push	6[bp]
27009                                           ! Debug: func () void = write_byte+0 (used reg = )
27010 6E71           E8         0D3F            call	_write_byte
27011 6E74           89EC                       mov	sp,bp
27012                                           !BCC_EOS
27013                                           ! 3860  memsetb(ES,DI+0x33,0,13);
27014                                           ! Debug: list int = const $D (used reg = )
27015 6E76           B8                   000D  mov	ax,*$D
27016 6E79           50                         push	ax
27017                                           ! Debug: list int = const 0 (used reg = )
27018 6E7A           31C0                       xor	ax,ax
27019 6E7C           50                         push	ax
27020                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27021 6E7D           8B46         08            mov	ax,8[bp]
27022                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27023 6E80           05                   0033  add	ax,*$33
27024 6E83           50                         push	ax
27025                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27026 6E84           FF76         06            push	6[bp]
27027                                           ! Debug: func () void = memsetb+0 (used reg = )
27028 6E87           E8         0C59            call	_memsetb
27029 6E8A           89EC                       mov	sp,bp
27030                                           !BCC_EOS
27031                                           ! 3861 }
27032 6E8C           5D                         pop	bp
27033 6E8D           C3                         ret
27034                                           ! 3862 static Bit16u biosfn_read_video_state_size2 (CX)
27035                                           ! Register BX used in function biosfn_read_state_info
27036                                           ! 3863      Bit16u CX;
27037                       00006E8E            _biosfn_read_video_state_size2:
27038                                           !BCC_EOS
27039                                           ! 3864 {
27040                                           ! 3865     Bit16u size;
27041                                           !BCC_EOS
27042                                           ! 3866     size = 0;
27043 6E8E           55                         push	bp
27044 6E8F           89E5                       mov	bp,sp
27045 6E91           4C                         dec	sp
27046 6E92           4C                         dec	sp
27047                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27048 6E93           31C0                       xor	ax,ax
27049 6E95           8946         FE            mov	-2[bp],ax
27050                                           !BCC_EOS
27051                                           ! 3867     if (CX & 1) {
27052                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27053 6E98           8A46         04            mov	al,4[bp]
27054 6E9B           24                     01  and	al,*1
27055 6E9D           84C0                       test	al,al
27056 6E9F           74           09            je  	.245
27057                       00006EA1            .246:
27058                                           ! 3868         size += 0x46;
27059                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27060 6EA1           8B46         FE            mov	ax,-2[bp]
27061 6EA4           05                   0046  add	ax,*$46
27062 6EA7           8946         FE            mov	-2[bp],ax
27063                                           !BCC_EOS
27064                                           ! 3869     }
27065                                           ! 3870     if (CX & 2) {
27066                       00006EAA            .245:
27067                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27068 6EAA           8A46         04            mov	al,4[bp]
27069 6EAD           24                     02  and	al,*2
27070 6EAF           84C0                       test	al,al
27071 6EB1           74           09            je  	.247
27072                       00006EB3            .248:
27073                                           ! 3871         size += (5 + 8 + 5) * 2 + 6;
27074                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27075 6EB3           8B46         FE            mov	ax,-2[bp]
27076 6EB6           05                   002A  add	ax,*$2A
27077 6EB9           8946         FE            mov	-2[bp],ax
27078                                           !BCC_EOS
27079                                           ! 3872     }
27080                                           ! 3873     if (CX & 4) {
27081                       00006EBC            .247:
27082                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27083 6EBC           8A46         04            mov	al,4[bp]
27084 6EBF           24                     04  and	al,*4
27085 6EC1           84C0                       test	al,al
27086 6EC3           74           09            je  	.249
27087                       00006EC5            .24A:
27088                                           ! 3874         size += 3 + 256 * 3 + 1;
27089                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27090 6EC5           8B46         FE            mov	ax,-2[bp]
27091 6EC8           05                   0304  add	ax,#$304
27092 6ECB           8946         FE            mov	-2[bp],ax
27093                                           !BCC_EOS
27094                                           ! 3875 }
27095                                           ! 3876     return size;
27096                       00006ECE            .249:
27097 6ECE           8B46         FE            mov	ax,-2[bp]
27098 6ED1           89EC                       mov	sp,bp
27099 6ED3           5D                         pop	bp
27100 6ED4           C3                         ret
27101                                           !BCC_EOS
27102                                           ! 3877 }
27103                                           ! 3878 static void biosfn_read_video_state_size (CX, BX)
27104                                           ! 3879      Bit16u CX; Bit16u *BX;
27105                       00006ED5            _biosfn_read_video_state_size:
27106                                           !BCC_EOS
27107                                           !BCC_EOS
27108                                           ! 3880 {
27109                                           ! 3881     Bit16u ss=get_SS();
27110 6ED5           55                         push	bp
27111 6ED6           89E5                       mov	bp,sp
27112 6ED8           4C                         dec	sp
27113 6ED9           4C                         dec	sp
27114                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27115 6EDA           E8         0D3C            call	_get_SS
27116                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27117 6EDD           8946         FE            mov	-2[bp],ax
27118                                           !BCC_EOS
27119                                           ! 3882     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27120                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27121 6EE0           FF76         04            push	4[bp]
27122                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27123 6EE3           E8         FFA8            call	_biosfn_read_video_state_size2
27124 6EE6           44                         inc	sp
27125 6EE7           44                         inc	sp
27126                                           ! Debug: list unsigned short = ax+0 (used reg = )
27127 6EE8           50                         push	ax
27128                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27129 6EE9           FF76         06            push	6[bp]
27130                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27131 6EEC           FF76         FE            push	-2[bp]
27132                                           ! Debug: func () void = write_word+0 (used reg = )
27133 6EEF           E8         0CD9            call	_write_word
27134 6EF2           83C4                   06  add	sp,*6
27135                                           !BCC_EOS
27136                                           ! 3883 }
27137 6EF5           89EC                       mov	sp,bp
27138 6EF7           5D                         pop	bp
27139 6EF8           C3                         ret
27140                                           ! 3884 static Bit16u biosfn_save_video_state (CX,ES,BX)
27141                                           ! 3885      Bit16u CX;Bit16u ES;Bit16u BX;
27142                       00006EF9            _biosfn_save_video_state:
27143                                           !BCC_EOS
27144                                           !BCC_EOS
27145                                           !BCC_EOS
27146                                           ! 3886 {
27147                                           ! 3887     Bit16u i, v, crtc_addr, ar_index;
27148                                           !BCC_EOS
27149                                           ! 3888     crtc_addr = read_word(0x40, 0x63);
27150 6EF9           55                         push	bp
27151 6EFA           89E5                       mov	bp,sp
27152 6EFC           83C4                   F8  add	sp,*-8
27153                                           ! Debug: list int = const $63 (used reg = )
27154 6EFF           B8                   0063  mov	ax,*$63
27155 6F02           50                         push	ax
27156                                           ! Debug: list int = const $40 (used reg = )
27157 6F03           B8                   0040  mov	ax,*$40
27158 6F06           50                         push	ax
27159                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27160 6F07           E8         0C96            call	_read_word
27161 6F0A           83C4                   04  add	sp,*4
27162                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27163 6F0D           8946         FA            mov	-6[bp],ax
27164                                           !BCC_EOS
27165                                           ! 3889     if (CX & 1) {
27166                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27167 6F10           8A46         04            mov	al,4[bp]
27168 6F13           24                     01  and	al,*1
27169 6F15           84C0                       test	al,al
27170 6F17         0F84         0266            beq 	.24B
27171                       00006F1B            .24C:
27172                                           ! 3890         write_byte(ES, BX, inb(0x3c4)); BX++;
27173                                           ! Debug: list int = const $3C4 (used reg = )
27174 6F1B           B8                   03C4  mov	ax,#$3C4
27175 6F1E           50                         push	ax
27176                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27177 6F1F           E8         0CC1            call	_inb
27178 6F22           44                         inc	sp
27179 6F23           44                         inc	sp
27180                                           ! Debug: list unsigned char = al+0 (used reg = )
27181 6F24           30E4                       xor	ah,ah
27182 6F26           50                         push	ax
27183                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27184 6F27           FF76         08            push	8[bp]
27185                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27186 6F2A           FF76         06            push	6[bp]
27187                                           ! Debug: func () void = write_byte+0 (used reg = )
27188 6F2D           E8         0C83            call	_write_byte
27189 6F30           83C4                   06  add	sp,*6
27190                                           !BCC_EOS
27191                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27192 6F33           8B46         08            mov	ax,8[bp]
27193 6F36           40                         inc	ax
27194 6F37           8946         08            mov	8[bp],ax
27195                                           !BCC_EOS
27196                                           ! 3891         write_byte(ES, BX, inb(crtc_addr)); BX++;
27197                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27198 6F3A           FF76         FA            push	-6[bp]
27199                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27200 6F3D           E8         0CA3            call	_inb
27201 6F40           44                         inc	sp
27202 6F41           44                         inc	sp
27203                                           ! Debug: list unsigned char = al+0 (used reg = )
27204 6F42           30E4                       xor	ah,ah
27205 6F44           50                         push	ax
27206                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27207 6F45           FF76         08            push	8[bp]
27208                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27209 6F48           FF76         06            push	6[bp]
27210                                           ! Debug: func () void = write_byte+0 (used reg = )
27211 6F4B           E8         0C65            call	_write_byte
27212 6F4E           83C4                   06  add	sp,*6
27213                                           !BCC_EOS
27214                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27215 6F51           8B46         08            mov	ax,8[bp]
27216 6F54           40                         inc	ax
27217 6F55           8946         08            mov	8[bp],ax
27218                                           !BCC_EOS
27219                                           ! 3892         write_byte(ES, BX, inb(0x3ce)); BX++;
27220                                           ! Debug: list int = const $3CE (used reg = )
27221 6F58           B8                   03CE  mov	ax,#$3CE
27222 6F5B           50                         push	ax
27223                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27224 6F5C           E8         0C84            call	_inb
27225 6F5F           44                         inc	sp
27226 6F60           44                         inc	sp
27227                                           ! Debug: list unsigned char = al+0 (used reg = )
27228 6F61           30E4                       xor	ah,ah
27229 6F63           50                         push	ax
27230                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27231 6F64           FF76         08            push	8[bp]
27232                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27233 6F67           FF76         06            push	6[bp]
27234                                           ! Debug: func () void = write_byte+0 (used reg = )
27235 6F6A           E8         0C46            call	_write_byte
27236 6F6D           83C4                   06  add	sp,*6
27237                                           !BCC_EOS
27238                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27239 6F70           8B46         08            mov	ax,8[bp]
27240 6F73           40                         inc	ax
27241 6F74           8946         08            mov	8[bp],ax
27242                                           !BCC_EOS
27243                                           ! 3893         inb(0x3da);
27244                                           ! Debug: list int = const $3DA (used reg = )
27245 6F77           B8                   03DA  mov	ax,#$3DA
27246 6F7A           50                         push	ax
27247                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27248 6F7B           E8         0C65            call	_inb
27249 6F7E           44                         inc	sp
27250 6F7F           44                         inc	sp
27251                                           !BCC_EOS
27252                                           ! 3894         ar_index = inb(0x3c0);
27253                                           ! Debug: list int = const $3C0 (used reg = )
27254 6F80           B8                   03C0  mov	ax,#$3C0
27255 6F83           50                         push	ax
27256                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27257 6F84           E8         0C5C            call	_inb
27258 6F87           44                         inc	sp
27259 6F88           44                         inc	sp
27260                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27261 6F89           30E4                       xor	ah,ah
27262 6F8B           8946         F8            mov	-8[bp],ax
27263                                           !BCC_EOS
27264                                           ! 3895         write_byte(ES, BX, ar_index); BX++;
27265                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27266 6F8E           FF76         F8            push	-8[bp]
27267                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27268 6F91           FF76         08            push	8[bp]
27269                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27270 6F94           FF76         06            push	6[bp]
27271                                           ! Debug: func () void = write_byte+0 (used reg = )
27272 6F97           E8         0C19            call	_write_byte
27273 6F9A           83C4                   06  add	sp,*6
27274                                           !BCC_EOS
27275                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27276 6F9D           8B46         08            mov	ax,8[bp]
27277 6FA0           40                         inc	ax
27278 6FA1           8946         08            mov	8[bp],ax
27279                                           !BCC_EOS
27280                                           ! 3896         write_byte(ES, BX, inb(0x3ca)); BX++;
27281                                           ! Debug: list int = const $3CA (used reg = )
27282 6FA4           B8                   03CA  mov	ax,#$3CA
27283 6FA7           50                         push	ax
27284                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27285 6FA8           E8         0C38            call	_inb
27286 6FAB           44                         inc	sp
27287 6FAC           44                         inc	sp
27288                                           ! Debug: list unsigned char = al+0 (used reg = )
27289 6FAD           30E4                       xor	ah,ah
27290 6FAF           50                         push	ax
27291                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27292 6FB0           FF76         08            push	8[bp]
27293                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27294 6FB3           FF76         06            push	6[bp]
27295                                           ! Debug: func () void = write_byte+0 (used reg = )
27296 6FB6           E8         0BFA            call	_write_byte
27297 6FB9           83C4                   06  add	sp,*6
27298                                           !BCC_EOS
27299                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27300 6FBC           8B46         08            mov	ax,8[bp]
27301 6FBF           40                         inc	ax
27302 6FC0           8946         08            mov	8[bp],ax
27303                                           !BCC_EOS
27304                                           ! 3897         for(i=1;i<=4;i++){
27305                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27306 6FC3           B8                   0001  mov	ax,*1
27307 6FC6           8946         FE            mov	-2[bp],ax
27308                                           !BCC_EOS
27309                                           !BCC_EOS
27310 6FC9           EB           33            jmp .24F
27311                       00006FCB            .250:
27312                                           ! 3898             outb(0x3c4, i);
27313                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27314 6FCB           FF76         FE            push	-2[bp]
27315                                           ! Debug: list int = const $3C4 (used reg = )
27316 6FCE           B8                   03C4  mov	ax,#$3C4
27317 6FD1           50                         push	ax
27318                                           ! Debug: func () void = outb+0 (used reg = )
27319 6FD2           E8         0C24            call	_outb
27320 6FD5           83C4                   04  add	sp,*4
27321                                           !BCC_EOS
27322                                           ! 3899             write_byte(ES, BX, inb(0x3c5)); BX++;
27323                                           ! Debug: list int = const $3C5 (used reg = )
27324 6FD8           B8                   03C5  mov	ax,#$3C5
27325 6FDB           50                         push	ax
27326                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27327 6FDC           E8         0C04            call	_inb
27328 6FDF           44                         inc	sp
27329 6FE0           44                         inc	sp
27330                                           ! Debug: list unsigned char = al+0 (used reg = )
27331 6FE1           30E4                       xor	ah,ah
27332 6FE3           50                         push	ax
27333                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27334 6FE4           FF76         08            push	8[bp]
27335                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27336 6FE7           FF76         06            push	6[bp]
27337                                           ! Debug: func () void = write_byte+0 (used reg = )
27338 6FEA           E8         0BC6            call	_write_byte
27339 6FED           83C4                   06  add	sp,*6
27340                                           !BCC_EOS
27341                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27342 6FF0           8B46         08            mov	ax,8[bp]
27343 6FF3           40                         inc	ax
27344 6FF4           8946         08            mov	8[bp],ax
27345                                           !BCC_EOS
27346                                           ! 3900         }
27347                                           ! 3901         outb(0x3c4, 0);
27348                       00006FF7            .24E:
27349                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27350 6FF7           8B46         FE            mov	ax,-2[bp]
27351 6FFA           40                         inc	ax
27352 6FFB           8946         FE            mov	-2[bp],ax
27353                       00006FFE            .24F:
27354                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27355 6FFE           8B46         FE            mov	ax,-2[bp]
27356 7001           3D                   0004  cmp	ax,*4
27357 7004           76           C5            jbe	.250
27358                       00007006            .251:
27359                       00007006            .24D:
27360                                           ! Debug: list int = const 0 (used reg = )
27361 7006           31C0                       xor	ax,ax
27362 7008           50                         push	ax
27363                                           ! Debug: list int = const $3C4 (used reg = )
27364 7009           B8                   03C4  mov	ax,#$3C4
27365 700C           50                         push	ax
27366                                           ! Debug: func () void = outb+0 (used reg = )
27367 700D           E8         0BE9            call	_outb
27368 7010           83C4                   04  add	sp,*4
27369                                           !BCC_EOS
27370                                           ! 3902         write_byte(ES, BX, inb(0x3c5)); BX++;
27371                                           ! Debug: list int = const $3C5 (used reg = )
27372 7013           B8                   03C5  mov	ax,#$3C5
27373 7016           50                         push	ax
27374                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27375 7017           E8         0BC9            call	_inb
27376 701A           44                         inc	sp
27377 701B           44                         inc	sp
27378                                           ! Debug: list unsigned char = al+0 (used reg = )
27379 701C           30E4                       xor	ah,ah
27380 701E           50                         push	ax
27381                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27382 701F           FF76         08            push	8[bp]
27383                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27384 7022           FF76         06            push	6[bp]
27385                                           ! Debug: func () void = write_byte+0 (used reg = )
27386 7025           E8         0B8B            call	_write_byte
27387 7028           83C4                   06  add	sp,*6
27388                                           !BCC_EOS
27389                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27390 702B           8B46         08            mov	ax,8[bp]
27391 702E           40                         inc	ax
27392 702F           8946         08            mov	8[bp],ax
27393                                           !BCC_EOS
27394                                           ! 3903         for(i=0;i<=0x18;i++) {
27395                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27396 7032           31C0                       xor	ax,ax
27397 7034           8946         FE            mov	-2[bp],ax
27398                                           !BCC_EOS
27399                                           !BCC_EOS
27400 7037           EB           33            jmp .254
27401                       00007039            .255:
27402                                           ! 3904             outb(crtc_addr,i);
27403                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27404 7039           FF76         FE            push	-2[bp]
27405                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27406 703C           FF76         FA            push	-6[bp]
27407                                           ! Debug: func () void = outb+0 (used reg = )
27408 703F           E8         0BB7            call	_outb
27409 7042           83C4                   04  add	sp,*4
27410                                           !BCC_EOS
27411                                           ! 3905             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27412                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27413 7045           8B46         FA            mov	ax,-6[bp]
27414                                           ! Debug: list unsigned int = ax+1 (used reg = )
27415 7048           40                         inc	ax
27416 7049           50                         push	ax
27417                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27418 704A           E8         0B96            call	_inb
27419 704D           44                         inc	sp
27420 704E           44                         inc	sp
27421                                           ! Debug: list unsigned char = al+0 (used reg = )
27422 704F           30E4                       xor	ah,ah
27423 7051           50                         push	ax
27424                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27425 7052           FF76         08            push	8[bp]
27426                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27427 7055           FF76         06            push	6[bp]
27428                                           ! Debug: func () void = write_byte+0 (used reg = )
27429 7058           E8         0B58            call	_write_byte
27430 705B           83C4                   06  add	sp,*6
27431                                           !BCC_EOS
27432                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27433 705E           8B46         08            mov	ax,8[bp]
27434 7061           40                         inc	ax
27435 7062           8946         08            mov	8[bp],ax
27436                                           !BCC_EOS
27437                                           ! 3906      
27438                                           ! 3906    }
27439                                           ! 3907         for(i=0;i<=0x13;i++) {
27440                       00007065            .253:
27441                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27442 7065           8B46         FE            mov	ax,-2[bp]
27443 7068           40                         inc	ax
27444 7069           8946         FE            mov	-2[bp],ax
27445                       0000706C            .254:
27446                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27447 706C           8B46         FE            mov	ax,-2[bp]
27448 706F           3D                   0018  cmp	ax,*$18
27449 7072           76           C5            jbe	.255
27450                       00007074            .256:
27451                       00007074            .252:
27452                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27453 7074           31C0                       xor	ax,ax
27454 7076           8946         FE            mov	-2[bp],ax
27455                                           !BCC_EOS
27456                                           !BCC_EOS
27457 7079           EB           44            jmp .259
27458                       0000707B            .25A:
27459                                           ! 3908             inb(0x3da);
27460                                           ! Debug: list int = const $3DA (used reg = )
27461 707B           B8                   03DA  mov	ax,#$3DA
27462 707E           50                         push	ax
27463                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27464 707F           E8         0B61            call	_inb
27465 7082           44                         inc	sp
27466 7083           44                         inc	sp
27467                                           !BCC_EOS
27468                                           ! 3909             outb(0x3c0, i | (ar_index & 0x20));
27469                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27470 7084           8A46         F8            mov	al,-8[bp]
27471 7087           24                     20  and	al,*$20
27472                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27473                                           ! Debug: expression subtree swapping
27474 7089           30E4                       xor	ah,ah
27475 708B           0B46         FE            or	ax,-2[bp]
27476                                           ! Debug: list unsigned int = ax+0 (used reg = )
27477 708E           50                         push	ax
27478                                           ! Debug: list int = const $3C0 (used reg = )
27479 708F           B8                   03C0  mov	ax,#$3C0
27480 7092           50                         push	ax
27481                                           ! Debug: func () void = outb+0 (used reg = )
27482 7093           E8         0B63            call	_outb
27483 7096           83C4                   04  add	sp,*4
27484                                           !BCC_EOS
27485                                           ! 3910             write_byte(ES, BX, inb(0x3c1)); BX++;
27486                                           ! Debug: list int = const $3C1 (used reg = )
27487 7099           B8                   03C1  mov	ax,#$3C1
27488 709C           50                         push	ax
27489                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27490 709D           E8         0B43            call	_inb
27491 70A0           44                         inc	sp
27492 70A1           44                         inc	sp
27493                                           ! Debug: list unsigned char = al+0 (used reg = )
27494 70A2           30E4                       xor	ah,ah
27495 70A4           50                         push	ax
27496                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27497 70A5           FF76         08            push	8[bp]
27498                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27499 70A8           FF76         06            push	6[bp]
27500                                           ! Debug: func () void = write_byte+0 (used reg = )
27501 70AB           E8         0B05            call	_write_byte
27502 70AE           83C4                   06  add	sp,*6
27503                                           !BCC_EOS
27504                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27505 70B1           8B46         08            mov	ax,8[bp]
27506 70B4           40                         inc	ax
27507 70B5           8946         08            mov	8[bp],ax
27508                                           !BCC_EOS
27509                                           ! 3911         }
27510                                           ! 3912         inb(0x3da);
27511                       000070B8            .258:
27512                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27513 70B8           8B46         FE            mov	ax,-2[bp]
27514 70BB           40                         inc	ax
27515 70BC           8946         FE            mov	-2[bp],ax
27516                       000070BF            .259:
27517                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27518 70BF           8B46         FE            mov	ax,-2[bp]
27519 70C2           3D                   0013  cmp	ax,*$13
27520 70C5           76           B4            jbe	.25A
27521                       000070C7            .25B:
27522                       000070C7            .257:
27523                                           ! Debug: list int = const $3DA (used reg = )
27524 70C7           B8                   03DA  mov	ax,#$3DA
27525 70CA           50                         push	ax
27526                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27527 70CB           E8         0B15            call	_inb
27528 70CE           44                         inc	sp
27529 70CF           44                         inc	sp
27530                                           !BCC_EOS
27531                                           ! 3913         for(i=0;i<=8;i++) {
27532                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27533 70D0           31C0                       xor	ax,ax
27534 70D2           8946         FE            mov	-2[bp],ax
27535                                           !BCC_EOS
27536                                           !BCC_EOS
27537 70D5           EB           33            jmp .25E
27538                       000070D7            .25F:
27539                                           ! 3914             outb(0x3ce,i);
27540                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27541 70D7           FF76         FE            push	-2[bp]
27542                                           ! Debug: list int = const $3CE (used reg = )
27543 70DA           B8                   03CE  mov	ax,#$3CE
27544 70DD           50                         push	ax
27545                                           ! Debug: func () void = outb+0 (used reg = )
27546 70DE           E8         0B18            call	_outb
27547 70E1           83C4                   04  add	sp,*4
27548                                           !BCC_EOS
27549                                           ! 3915             write_byte(ES, BX, inb(0x3cf)); BX++;
27550                                           ! Debug: list int = const $3CF (used reg = )
27551 70E4           B8                   03CF  mov	ax,#$3CF
27552 70E7           50                         push	ax
27553                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27554 70E8           E8         0AF8            call	_inb
27555 70EB           44                         inc	sp
27556 70EC           44                         inc	sp
27557                                           ! Debug: list unsigned char = al+0 (used reg = )
27558 70ED           30E4                       xor	ah,ah
27559 70EF           50                         push	ax
27560                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27561 70F0           FF76         08            push	8[bp]
27562                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27563 70F3           FF76         06            push	6[bp]
27564                                           ! Debug: func () void = write_byte+0 (used reg = )
27565 70F6           E8         0ABA            call	_write_byte
27566 70F9           83C4                   06  add	sp,*6
27567                                           !BCC_EOS
27568                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27569 70FC           8B46         08            mov	ax,8[bp]
27570 70FF           40                         inc	ax
27571 7100           8946         08            mov	8[bp],ax
27572                                           !BCC_EOS
27573                                           ! 3916         }
27574                                           ! 3917         write_word(ES, BX, crtc_addr); BX+= 2;
27575                       00007103            .25D:
27576                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27577 7103           8B46         FE            mov	ax,-2[bp]
27578 7106           40                         inc	ax
27579 7107           8946         FE            mov	-2[bp],ax
27580                       0000710A            .25E:
27581                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27582 710A           8B46         FE            mov	ax,-2[bp]
27583 710D           3D                   0008  cmp	ax,*8
27584 7110           76           C5            jbe	.25F
27585                       00007112            .260:
27586                       00007112            .25C:
27587                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27588 7112           FF76         FA            push	-6[bp]
27589                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27590 7115           FF76         08            push	8[bp]
27591                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27592 7118           FF76         06            push	6[bp]
27593                                           ! Debug: func () void = write_word+0 (used reg = )
27594 711B           E8         0AAD            call	_write_word
27595 711E           83C4                   06  add	sp,*6
27596                                           !BCC_EOS
27597                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27598 7121           8B46         08            mov	ax,8[bp]
27599 7124           40                         inc	ax
27600 7125           40                         inc	ax
27601 7126           8946         08            mov	8[bp],ax
27602                                           !BCC_EOS
27603                                           ! 3918         write_byte(ES, BX, 0); BX++;
27604                                           ! Debug: list int = const 0 (used reg = )
27605 7129           31C0                       xor	ax,ax
27606 712B           50                         push	ax
27607                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27608 712C           FF76         08            push	8[bp]
27609                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27610 712F           FF76         06            push	6[bp]
27611                                           ! Debug: func () void = write_byte+0 (used reg = )
27612 7132           E8         0A7E            call	_write_byte
27613 7135           83C4                   06  add	sp,*6
27614                                           !BCC_EOS
27615                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27616 7138           8B46         08            mov	ax,8[bp]
27617 713B           40                         inc	ax
27618 713C           8946         08            mov	8[bp],ax
27619                                           !BCC_EOS
27620                                           ! 3919         write_byte(ES, BX, 0); BX++;
27621                                           ! Debug: list int = const 0 (used reg = )
27622 713F           31C0                       xor	ax,ax
27623 7141           50                         push	ax
27624                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27625 7142           FF76         08            push	8[bp]
27626                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27627 7145           FF76         06            push	6[bp]
27628                                           ! Debug: func () void = write_byte+0 (used reg = )
27629 7148           E8         0A68            call	_write_byte
27630 714B           83C4                   06  add	sp,*6
27631                                           !BCC_EOS
27632                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27633 714E           8B46         08            mov	ax,8[bp]
27634 7151           40                         inc	ax
27635 7152           8946         08            mov	8[bp],ax
27636                                           !BCC_EOS
27637                                           ! 3920         write_byte(ES, BX, 0); BX++;
27638                                           ! Debug: list int = const 0 (used reg = )
27639 7155           31C0                       xor	ax,ax
27640 7157           50                         push	ax
27641                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27642 7158           FF76         08            push	8[bp]
27643                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27644 715B           FF76         06            push	6[bp]
27645                                           ! Debug: func () void = write_byte+0 (used reg = )
27646 715E           E8         0A52            call	_write_byte
27647 7161           83C4                   06  add	sp,*6
27648                                           !BCC_EOS
27649                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27650 7164           8B46         08            mov	ax,8[bp]
27651 7167           40                         inc	ax
27652 7168           8946         08            mov	8[bp],ax
27653                                           !BCC_EOS
27654                                           ! 3921         write_byte(ES, BX, 0); BX++;
27655                                           ! Debug: list int = const 0 (used reg = )
27656 716B           31C0                       xor	ax,ax
27657 716D           50                         push	ax
27658                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27659 716E           FF76         08            push	8[bp]
27660                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27661 7171           FF76         06            push	6[bp]
27662                                           ! Debug: func () void = write_byte+0 (used reg = )
27663 7174           E8         0A3C            call	_write_byte
27664 7177           83C4                   06  add	sp,*6
27665                                           !BCC_EOS
27666                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27667 717A           8B46         08            mov	ax,8[bp]
27668 717D           40                         inc	ax
27669 717E           8946         08            mov	8[bp],ax
27670                                           !BCC_EOS
27671                                           ! 3922     }
27672                                           ! 3923     if (CX & 2) {
27673                       00007181            .24B:
27674                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27675 7181           8A46         04            mov	al,4[bp]
27676 7184           24                     02  and	al,*2
27677 7186           84C0                       test	al,al
27678 7188         0F84         0270            beq 	.261
27679                       0000718C            .262:
27680                                           ! 3924         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27681                                           ! Debug: list int = const $49 (used reg = )
27682 718C           B8                   0049  mov	ax,*$49
27683 718F           50                         push	ax
27684                                           ! Debug: list int = const $40 (used reg = )
27685 7190           B8                   0040  mov	ax,*$40
27686 7193           50                         push	ax
27687                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27688 7194           E8         09F6            call	_read_byte
27689 7197           83C4                   04  add	sp,*4
27690                                           ! Debug: list unsigned char = al+0 (used reg = )
27691 719A           30E4                       xor	ah,ah
27692 719C           50                         push	ax
27693                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27694 719D           FF76         08            push	8[bp]
27695                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27696 71A0           FF76         06            push	6[bp]
27697                                           ! Debug: func () void = write_byte+0 (used reg = )
27698 71A3           E8         0A0D            call	_write_byte
27699 71A6           83C4                   06  add	sp,*6
27700                                           !BCC_EOS
27701                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27702 71A9           8B46         08            mov	ax,8[bp]
27703 71AC           40                         inc	ax
27704 71AD           8946         08            mov	8[bp],ax
27705                                           !BCC_EOS
27706                                           ! 3925         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27707                                           ! Debug: list int = const $4A (used reg = )
27708 71B0           B8                   004A  mov	ax,*$4A
27709 71B3           50                         push	ax
27710                                           ! Debug: list int = const $40 (used reg = )
27711 71B4           B8                   0040  mov	ax,*$40
27712 71B7           50                         push	ax
27713                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27714 71B8           E8         09E5            call	_read_word
27715 71BB           83C4                   04  add	sp,*4
27716                                           ! Debug: list unsigned short = ax+0 (used reg = )
27717 71BE           50                         push	ax
27718                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27719 71BF           FF76         08            push	8[bp]
27720                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27721 71C2           FF76         06            push	6[bp]
27722                                           ! Debug: func () void = write_word+0 (used reg = )
27723 71C5           E8         0A03            call	_write_word
27724 71C8           83C4                   06  add	sp,*6
27725                                           !BCC_EOS
27726                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27727 71CB           8B46         08            mov	ax,8[bp]
27728 71CE           40                         inc	ax
27729 71CF           40                         inc	ax
27730 71D0           8946         08            mov	8[bp],ax
27731                                           !BCC_EOS
27732                                           ! 3926         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27733                                           ! Debug: list int = const $4C (used reg = )
27734 71D3           B8                   004C  mov	ax,*$4C
27735 71D6           50                         push	ax
27736                                           ! Debug: list int = const $40 (used reg = )
27737 71D7           B8                   0040  mov	ax,*$40
27738 71DA           50                         push	ax
27739                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27740 71DB           E8         09C2            call	_read_word
27741 71DE           83C4                   04  add	sp,*4
27742                                           ! Debug: list unsigned short = ax+0 (used reg = )
27743 71E1           50                         push	ax
27744                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27745 71E2           FF76         08            push	8[bp]
27746                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27747 71E5           FF76         06            push	6[bp]
27748                                           ! Debug: func () void = write_word+0 (used reg = )
27749 71E8           E8         09E0            call	_write_word
27750 71EB           83C4                   06  add	sp,*6
27751                                           !BCC_EOS
27752                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27753 71EE           8B46         08            mov	ax,8[bp]
27754 71F1           40                         inc	ax
27755 71F2           40                         inc	ax
27756 71F3           8946         08            mov	8[bp],ax
27757                                           !BCC_EOS
27758                                           ! 3927         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27759                                           ! Debug: list int = const $63 (used reg = )
27760 71F6           B8                   0063  mov	ax,*$63
27761 71F9           50                         push	ax
27762                                           ! Debug: list int = const $40 (used reg = )
27763 71FA           B8                   0040  mov	ax,*$40
27764 71FD           50                         push	ax
27765                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27766 71FE           E8         099F            call	_read_word
27767 7201           83C4                   04  add	sp,*4
27768                                           ! Debug: list unsigned short = ax+0 (used reg = )
27769 7204           50                         push	ax
27770                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27771 7205           FF76         08            push	8[bp]
27772                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27773 7208           FF76         06            push	6[bp]
27774                                           ! Debug: func () void = write_word+0 (used reg = )
27775 720B           E8         09BD            call	_write_word
27776 720E           83C4                   06  add	sp,*6
27777                                           !BCC_EOS
27778                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27779 7211           8B46         08            mov	ax,8[bp]
27780 7214           40                         inc	ax
27781 7215           40                         inc	ax
27782 7216           8946         08            mov	8[bp],ax
27783                                           !BCC_EOS
27784                                           ! 3928         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27785                                           ! Debug: list int = const $84 (used reg = )
27786 7219           B8                   0084  mov	ax,#$84
27787 721C           50                         push	ax
27788                                           ! Debug: list int = const $40 (used reg = )
27789 721D           B8                   0040  mov	ax,*$40
27790 7220           50                         push	ax
27791                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27792 7221           E8         0969            call	_read_byte
27793 7224           83C4                   04  add	sp,*4
27794                                           ! Debug: list unsigned char = al+0 (used reg = )
27795 7227           30E4                       xor	ah,ah
27796 7229           50                         push	ax
27797                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27798 722A           FF76         08            push	8[bp]
27799                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27800 722D           FF76         06            push	6[bp]
27801                                           ! Debug: func () void = write_byte+0 (used reg = )
27802 7230           E8         0980            call	_write_byte
27803 7233           83C4                   06  add	sp,*6
27804                                           !BCC_EOS
27805                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27806 7236           8B46         08            mov	ax,8[bp]
27807 7239           40                         inc	ax
27808 723A           8946         08            mov	8[bp],ax
27809                                           !BCC_EOS
27810                                           ! 3929         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27811                                           ! Debug: list int = const $85 (used reg = )
27812 723D           B8                   0085  mov	ax,#$85
27813 7240           50                         push	ax
27814                                           ! Debug: list int = const $40 (used reg = )
27815 7241           B8                   0040  mov	ax,*$40
27816 7244           50                         push	ax
27817                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27818 7245           E8         0958            call	_read_word
27819 7248           83C4                   04  add	sp,*4
27820                                           ! Debug: list unsigned short = ax+0 (used reg = )
27821 724B           50                         push	ax
27822                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27823 724C           FF76         08            push	8[bp]
27824                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27825 724F           FF76         06            push	6[bp]
27826                                           ! Debug: func () void = write_word+0 (used reg = )
27827 7252           E8         0976            call	_write_word
27828 7255           83C4                   06  add	sp,*6
27829                                           !BCC_EOS
27830                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27831 7258           8B46         08            mov	ax,8[bp]
27832 725B           40                         inc	ax
27833 725C           40                         inc	ax
27834 725D           8946         08            mov	8[bp],ax
27835                                           !BCC_EOS
27836                                           ! 3930         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27837                                           ! Debug: list int = const $87 (used reg = )
27838 7260           B8                   0087  mov	ax,#$87
27839 7263           50                         push	ax
27840                                           ! Debug: list int = const $40 (used reg = )
27841 7264           B8                   0040  mov	ax,*$40
27842 7267           50                         push	ax
27843                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27844 7268           E8         0922            call	_read_byte
27845 726B           83C4                   04  add	sp,*4
27846                                           ! Debug: list unsigned char = al+0 (used reg = )
27847 726E           30E4                       xor	ah,ah
27848 7270           50                         push	ax
27849                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27850 7271           FF76         08            push	8[bp]
27851                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27852 7274           FF76         06            push	6[bp]
27853                                           ! Debug: func () void = write_byte+0 (used reg = )
27854 7277           E8         0939            call	_write_byte
27855 727A           83C4                   06  add	sp,*6
27856                                           !BCC_EOS
27857                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27858 727D           8B46         08            mov	ax,8[bp]
27859 7280           40                         inc	ax
27860 7281           8946         08            mov	8[bp],ax
27861                                           !BCC_EOS
27862                                           ! 3931         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27863                                           ! Debug: list int = const $88 (used reg = )
27864 7284           B8                   0088  mov	ax,#$88
27865 7287           50                         push	ax
27866                                           ! Debug: list int = const $40 (used reg = )
27867 7288           B8                   0040  mov	ax,*$40
27868 728B           50                         push	ax
27869                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27870 728C           E8         08FE            call	_read_byte
27871 728F           83C4                   04  add	sp,*4
27872                                           ! Debug: list unsigned char = al+0 (used reg = )
27873 7292           30E4                       xor	ah,ah
27874 7294           50                         push	ax
27875                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27876 7295           FF76         08            push	8[bp]
27877                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27878 7298           FF76         06            push	6[bp]
27879                                           ! Debug: func () void = write_byte+0 (used reg = )
27880 729B           E8         0915            call	_write_byte
27881 729E           83C4                   06  add	sp,*6
27882                                           !BCC_EOS
27883                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27884 72A1           8B46         08            mov	ax,8[bp]
27885 72A4           40                         inc	ax
27886 72A5           8946         08            mov	8[bp],ax
27887                                           !BCC_EOS
27888                                           ! 3932         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27889                                           ! Debug: list int = const $89 (used reg = )
27890 72A8           B8                   0089  mov	ax,#$89
27891 72AB           50                         push	ax
27892                                           ! Debug: list int = const $40 (used reg = )
27893 72AC           B8                   0040  mov	ax,*$40
27894 72AF           50                         push	ax
27895                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27896 72B0           E8         08DA            call	_read_byte
27897 72B3           83C4                   04  add	sp,*4
27898                                           ! Debug: list unsigned char = al+0 (used reg = )
27899 72B6           30E4                       xor	ah,ah
27900 72B8           50                         push	ax
27901                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27902 72B9           FF76         08            push	8[bp]
27903                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27904 72BC           FF76         06            push	6[bp]
27905                                           ! Debug: func () void = write_byte+0 (used reg = )
27906 72BF           E8         08F1            call	_write_byte
27907 72C2           83C4                   06  add	sp,*6
27908                                           !BCC_EOS
27909                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27910 72C5           8B46         08            mov	ax,8[bp]
27911 72C8           40                         inc	ax
27912 72C9           8946         08            mov	8[bp],ax
27913                                           !BCC_EOS
27914                                           ! 3933         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27915                                           ! Debug: list int = const $60 (used reg = )
27916 72CC           B8                   0060  mov	ax,*$60
27917 72CF           50                         push	ax
27918                                           ! Debug: list int = const $40 (used reg = )
27919 72D0           B8                   0040  mov	ax,*$40
27920 72D3           50                         push	ax
27921                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27922 72D4           E8         08C9            call	_read_word
27923 72D7           83C4                   04  add	sp,*4
27924                                           ! Debug: list unsigned short = ax+0 (used reg = )
27925 72DA           50                         push	ax
27926                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27927 72DB           FF76         08            push	8[bp]
27928                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27929 72DE           FF76         06            push	6[bp]
27930                                           ! Debug: func () void = write_word+0 (used reg = )
27931 72E1           E8         08E7            call	_write_word
27932 72E4           83C4                   06  add	sp,*6
27933                                           !BCC_EOS
27934                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27935 72E7           8B46         08            mov	ax,8[bp]
27936 72EA           40                         inc	ax
27937 72EB           40                         inc	ax
27938 72EC           8946         08            mov	8[bp],ax
27939                                           !BCC_EOS
27940                                           ! 3934         for(i=0;i<8;i++) {
27941                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27942 72EF           31C0                       xor	ax,ax
27943 72F1           8946         FE            mov	-2[bp],ax
27944                                           !BCC_EOS
27945                                           !BCC_EOS
27946 72F4           EB           2F            jmp .265
27947                       000072F6            .266:
27948                                           ! 3935             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
27949                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
27950                                           ! Debug: expression subtree swapping
27951 72F6           8B46         FE            mov	ax,-2[bp]
27952 72F9           D1E0                       shl	ax,*1
27953                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
27954                                           ! Debug: expression subtree swapping
27955                                           ! Debug: list unsigned int = ax+$50 (used reg = )
27956 72FB           05                   0050  add	ax,*$50
27957 72FE           50                         push	ax
27958                                           ! Debug: list int = const $40 (used reg = )
27959 72FF           B8                   0040  mov	ax,*$40
27960 7302           50                         push	ax
27961                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27962 7303           E8         089A            call	_read_word
27963 7306           83C4                   04  add	sp,*4
27964                                           ! Debug: list unsigned short = ax+0 (used reg = )
27965 7309           50                         push	ax
27966                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27967 730A           FF76         08            push	8[bp]
27968                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27969 730D           FF76         06            push	6[bp]
27970                                           ! Debug: func () void = write_word+0 (used reg = )
27971 7310           E8         08B8            call	_write_word
27972 7313           83C4                   06  add	sp,*6
27973                                           !BCC_EOS
27974                                           ! 3936             BX += 2;
27975                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27976 7316           8B46         08            mov	ax,8[bp]
27977 7319           40                         inc	ax
27978 731A           40                         inc	ax
27979 731B           8946         08            mov	8[bp],ax
27980                                           !BCC_EOS
27981                                           ! 3937         }
27982                                           ! 3938         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
27983                       0000731E            .264:
27984                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27985 731E           8B46         FE            mov	ax,-2[bp]
27986 7321           40                         inc	ax
27987 7322           8946         FE            mov	-2[bp],ax
27988                       00007325            .265:
27989                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27990 7325           8B46         FE            mov	ax,-2[bp]
27991 7328           3D                   0008  cmp	ax,*8
27992 732B           72           C9            jb 	.266
27993                       0000732D            .267:
27994                       0000732D            .263:
27995                                           ! Debug: list int = const $4E (used reg = )
27996 732D           B8                   004E  mov	ax,*$4E
27997 7330           50                         push	ax
27998                                           ! Debug: list int = const $40 (used reg = )
27999 7331           B8                   0040  mov	ax,*$40
28000 7334           50                         push	ax
28001                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28002 7335           E8         0868            call	_read_word
28003 7338           83C4                   04  add	sp,*4
28004                                           ! Debug: list unsigned short = ax+0 (used reg = )
28005 733B           50                         push	ax
28006                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28007 733C           FF76         08            push	8[bp]
28008                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28009 733F           FF76         06            push	6[bp]
28010                                           ! Debug: func () void = write_word+0 (used reg = )
28011 7342           E8         0886            call	_write_word
28012 7345           83C4                   06  add	sp,*6
28013                                           !BCC_EOS
28014                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28015 7348           8B46         08            mov	ax,8[bp]
28016 734B           40                         inc	ax
28017 734C           40                         inc	ax
28018 734D           8946         08            mov	8[bp],ax
28019                                           !BCC_EOS
28020                                           ! 3939         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28021                                           ! Debug: list int = const $62 (used reg = )
28022 7350           B8                   0062  mov	ax,*$62
28023 7353           50                         push	ax
28024                                           ! Debug: list int = const $40 (used reg = )
28025 7354           B8                   0040  mov	ax,*$40
28026 7357           50                         push	ax
28027                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28028 7358           E8         0832            call	_read_byte
28029 735B           83C4                   04  add	sp,*4
28030                                           ! Debug: list unsigned char = al+0 (used reg = )
28031 735E           30E4                       xor	ah,ah
28032 7360           50                         push	ax
28033                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28034 7361           FF76         08            push	8[bp]
28035                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28036 7364           FF76         06            push	6[bp]
28037                                           ! Debug: func () void = write_byte+0 (used reg = )
28038 7367           E8         0849            call	_write_byte
28039 736A           83C4                   06  add	sp,*6
28040                                           !BCC_EOS
28041                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28042 736D           8B46         08            mov	ax,8[bp]
28043 7370           40                         inc	ax
28044 7371           8946         08            mov	8[bp],ax
28045                                           !BCC_EOS
28046                                           ! 3940         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28047                                           ! Debug: list int = const $7C (used reg = )
28048 7374           B8                   007C  mov	ax,*$7C
28049 7377           50                         push	ax
28050                                           ! Debug: list int = const 0 (used reg = )
28051 7378           31C0                       xor	ax,ax
28052 737A           50                         push	ax
28053                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28054 737B           E8         0822            call	_read_word
28055 737E           83C4                   04  add	sp,*4
28056                                           ! Debug: list unsigned short = ax+0 (used reg = )
28057 7381           50                         push	ax
28058                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28059 7382           FF76         08            push	8[bp]
28060                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28061 7385           FF76         06            push	6[bp]
28062                                           ! Debug: func () void = write_word+0 (used reg = )
28063 7388           E8         0840            call	_write_word
28064 738B           83C4                   06  add	sp,*6
28065                                           !BCC_EOS
28066                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28067 738E           8B46         08            mov	ax,8[bp]
28068 7391           40                         inc	ax
28069 7392           40                         inc	ax
28070 7393           8946         08            mov	8[bp],ax
28071                                           !BCC_EOS
28072                                           ! 3941         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28073                                           ! Debug: list int = const $7E (used reg = )
28074 7396           B8                   007E  mov	ax,*$7E
28075 7399           50                         push	ax
28076                                           ! Debug: list int = const 0 (used reg = )
28077 739A           31C0                       xor	ax,ax
28078 739C           50                         push	ax
28079                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28080 739D           E8         0800            call	_read_word
28081 73A0           83C4                   04  add	sp,*4
28082                                           ! Debug: list unsigned short = ax+0 (used reg = )
28083 73A3           50                         push	ax
28084                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28085 73A4           FF76         08            push	8[bp]
28086                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28087 73A7           FF76         06            push	6[bp]
28088                                           ! Debug: func () void = write_word+0 (used reg = )
28089 73AA           E8         081E            call	_write_word
28090 73AD           83C4                   06  add	sp,*6
28091                                           !BCC_EOS
28092                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28093 73B0           8B46         08            mov	ax,8[bp]
28094 73B3           40                         inc	ax
28095 73B4           40                         inc	ax
28096 73B5           8946         08            mov	8[bp],ax
28097                                           !BCC_EOS
28098                                           ! 3942         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28099                                           ! Debug: list int = const $10C (used reg = )
28100 73B8           B8                   010C  mov	ax,#$10C
28101 73BB           50                         push	ax
28102                                           ! Debug: list int = const 0 (used reg = )
28103 73BC           31C0                       xor	ax,ax
28104 73BE           50                         push	ax
28105                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28106 73BF           E8         07DE            call	_read_word
28107 73C2           83C4                   04  add	sp,*4
28108                                           ! Debug: list unsigned short = ax+0 (used reg = )
28109 73C5           50                         push	ax
28110                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28111 73C6           FF76         08            push	8[bp]
28112                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28113 73C9           FF76         06            push	6[bp]
28114                                           ! Debug: func () void = write_word+0 (used reg = )
28115 73CC           E8         07FC            call	_write_word
28116 73CF           83C4                   06  add	sp,*6
28117                                           !BCC_EOS
28118                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28119 73D2           8B46         08            mov	ax,8[bp]
28120 73D5           40                         inc	ax
28121 73D6           40                         inc	ax
28122 73D7           8946         08            mov	8[bp],ax
28123                                           !BCC_EOS
28124                                           ! 3943         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28125                                           ! Debug: list int = const $10E (used reg = )
28126 73DA           B8                   010E  mov	ax,#$10E
28127 73DD           50                         push	ax
28128                                           ! Debug: list int = const 0 (used reg = )
28129 73DE           31C0                       xor	ax,ax
28130 73E0           50                         push	ax
28131                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28132 73E1           E8         07BC            call	_read_word
28133 73E4           83C4                   04  add	sp,*4
28134                                           ! Debug: list unsigned short = ax+0 (used reg = )
28135 73E7           50                         push	ax
28136                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28137 73E8           FF76         08            push	8[bp]
28138                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28139 73EB           FF76         06            push	6[bp]
28140                                           ! Debug: func () void = write_word+0 (used reg = )
28141 73EE           E8         07DA            call	_write_word
28142 73F1           83C4                   06  add	sp,*6
28143                                           !BCC_EOS
28144                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28145 73F4           8B46         08            mov	ax,8[bp]
28146 73F7           40                         inc	ax
28147 73F8           40                         inc	ax
28148 73F9           8946         08            mov	8[bp],ax
28149                                           !BCC_EOS
28150                                           ! 3944     }
28151                                           ! 3945     if (CX & 4) {
28152                       000073FC            .261:
28153                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28154 73FC           8A46         04            mov	al,4[bp]
28155 73FF           24                     04  and	al,*4
28156 7401           84C0                       test	al,al
28157 7403         0F84         00B5            beq 	.268
28158                       00007407            .269:
28159                                           ! 3946         write_byte(ES, BX, inb(0x3c7)); BX++;
28160                                           ! Debug: list int = const $3C7 (used reg = )
28161 7407           B8                   03C7  mov	ax,#$3C7
28162 740A           50                         push	ax
28163                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28164 740B           E8         07D5            call	_inb
28165 740E           44                         inc	sp
28166 740F           44                         inc	sp
28167                                           ! Debug: list unsigned char = al+0 (used reg = )
28168 7410           30E4                       xor	ah,ah
28169 7412           50                         push	ax
28170                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28171 7413           FF76         08            push	8[bp]
28172                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28173 7416           FF76         06            push	6[bp]
28174                                           ! Debug: func () void = write_byte+0 (used reg = )
28175 7419           E8         0797            call	_write_byte
28176 741C           83C4                   06  add	sp,*6
28177                                           !BCC_EOS
28178                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28179 741F           8B46         08            mov	ax,8[bp]
28180 7422           40                         inc	ax
28181 7423           8946         08            mov	8[bp],ax
28182                                           !BCC_EOS
28183                                           ! 3947         write_byte(ES, BX, inb(0x3c8)); BX++;
28184                                           ! Debug: list int = const $3C8 (used reg = )
28185 7426           B8                   03C8  mov	ax,#$3C8
28186 7429           50                         push	ax
28187                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28188 742A           E8         07B6            call	_inb
28189 742D           44                         inc	sp
28190 742E           44                         inc	sp
28191                                           ! Debug: list unsigned char = al+0 (used reg = )
28192 742F           30E4                       xor	ah,ah
28193 7431           50                         push	ax
28194                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28195 7432           FF76         08            push	8[bp]
28196                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28197 7435           FF76         06            push	6[bp]
28198                                           ! Debug: func () void = write_byte+0 (used reg = )
28199 7438           E8         0778            call	_write_byte
28200 743B           83C4                   06  add	sp,*6
28201                                           !BCC_EOS
28202                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28203 743E           8B46         08            mov	ax,8[bp]
28204 7441           40                         inc	ax
28205 7442           8946         08            mov	8[bp],ax
28206                                           !BCC_EOS
28207                                           ! 3948         write_byte(ES, BX, inb(0x3c6)); BX++;
28208                                           ! Debug: list int = const $3C6 (used reg = )
28209 7445           B8                   03C6  mov	ax,#$3C6
28210 7448           50                         push	ax
28211                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28212 7449           E8         0797            call	_inb
28213 744C           44                         inc	sp
28214 744D           44                         inc	sp
28215                                           ! Debug: list unsigned char = al+0 (used reg = )
28216 744E           30E4                       xor	ah,ah
28217 7450           50                         push	ax
28218                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28219 7451           FF76         08            push	8[bp]
28220                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28221 7454           FF76         06            push	6[bp]
28222                                           ! Debug: func () void = write_byte+0 (used reg = )
28223 7457           E8         0759            call	_write_byte
28224 745A           83C4                   06  add	sp,*6
28225                                           !BCC_EOS
28226                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28227 745D           8B46         08            mov	ax,8[bp]
28228 7460           40                         inc	ax
28229 7461           8946         08            mov	8[bp],ax
28230                                           !BCC_EOS
28231                                           ! 3949         outb(0x3c8,0x00);
28232                                           ! Debug: list int = const 0 (used reg = )
28233 7464           31C0                       xor	ax,ax
28234 7466           50                         push	ax
28235                                           ! Debug: list int = const $3C8 (used reg = )
28236 7467           B8                   03C8  mov	ax,#$3C8
28237 746A           50                         push	ax
28238                                           ! Debug: func () void = outb+0 (used reg = )
28239 746B           E8         078B            call	_outb
28240 746E           83C4                   04  add	sp,*4
28241                                           !BCC_EOS
28242                                           ! 3950         for(i=0;i<256*3;i++) {
28243                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28244 7471           31C0                       xor	ax,ax
28245 7473           8946         FE            mov	-2[bp],ax
28246                                           !BCC_EOS
28247                                           !BCC_EOS
28248 7476           EB           26            jmp .26C
28249                       00007478            .26D:
28250                                           ! 3951             write_byte(ES, BX, inb(0x3c9)); BX++;
28251                                           ! Debug: list int = const $3C9 (used reg = )
28252 7478           B8                   03C9  mov	ax,#$3C9
28253 747B           50                         push	ax
28254                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28255 747C           E8         0764            call	_inb
28256 747F           44                         inc	sp
28257 7480           44                         inc	sp
28258                                           ! Debug: list unsigned char = al+0 (used reg = )
28259 7481           30E4                       xor	ah,ah
28260 7483           50                         push	ax
28261                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28262 7484           FF76         08            push	8[bp]
28263                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28264 7487           FF76         06            push	6[bp]
28265                                           ! Debug: func () void = write_byte+0 (used reg = )
28266 748A           E8         0726            call	_write_byte
28267 748D           83C4                   06  add	sp,*6
28268                                           !BCC_EOS
28269                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28270 7490           8B46         08            mov	ax,8[bp]
28271 7493           40                         inc	ax
28272 7494           8946         08            mov	8[bp],ax
28273                                           !BCC_EOS
28274                                           ! 3952         }
28275                                           ! 3953         write_byte(ES, BX, 0); BX++;
28276                       00007497            .26B:
28277                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28278 7497           8B46         FE            mov	ax,-2[bp]
28279 749A           40                         inc	ax
28280 749B           8946         FE            mov	-2[bp],ax
28281                       0000749E            .26C:
28282                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28283 749E           8B46         FE            mov	ax,-2[bp]
28284 74A1           3D                   0300  cmp	ax,#$300
28285 74A4           72           D2            jb 	.26D
28286                       000074A6            .26E:
28287                       000074A6            .26A:
28288                                           ! Debug: list int = const 0 (used reg = )
28289 74A6           31C0                       xor	ax,ax
28290 74A8           50                         push	ax
28291                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28292 74A9           FF76         08            push	8[bp]
28293                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28294 74AC           FF76         06            push	6[bp]
28295                                           ! Debug: func () void = write_byte+0 (used reg = )
28296 74AF           E8         0701            call	_write_byte
28297 74B2           83C4                   06  add	sp,*6
28298                                           !BCC_EOS
28299                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28300 74B5           8B46         08            mov	ax,8[bp]
28301 74B8           40                         inc	ax
28302 74B9           8946         08            mov	8[bp],ax
28303                                           !BCC_EOS
28304                                           ! 3954     }
28305                                           ! 3955     return BX;
28306                       000074BC            .268:
28307 74BC           8B46         08            mov	ax,8[bp]
28308 74BF           89EC                       mov	sp,bp
28309 74C1           5D                         pop	bp
28310 74C2           C3                         ret
28311                                           !BCC_EOS
28312                                           ! 3956 }
28313                                           ! 3957 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28314                                           ! 3958      Bit16u CX;Bit16u ES;Bit16u BX;
28315                       000074C3            _biosfn_restore_video_state:
28316                                           !BCC_EOS
28317                                           !BCC_EOS
28318                                           !BCC_EOS
28319                                           ! 3959 {
28320                                           ! 3960     Bit16u i, crtc_addr, v, addr1, ar
28321                                           ! 3960 _index;
28322                                           !BCC_EOS
28323                                           ! 3961     if (CX & 1) {
28324 74C3           55                         push	bp
28325 74C4           89E5                       mov	bp,sp
28326 74C6           83C4                   F6  add	sp,*-$A
28327                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28328 74C9           8A46         04            mov	al,4[bp]
28329 74CC           24                     01  and	al,*1
28330 74CE           84C0                       test	al,al
28331 74D0         0F84         02AA            beq 	.26F
28332                       000074D4            .270:
28333                                           ! 3962         inb(0x3da);
28334                                           ! Debug: list int = const $3DA (used reg = )
28335 74D4           B8                   03DA  mov	ax,#$3DA
28336 74D7           50                         push	ax
28337                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28338 74D8           E8         0708            call	_inb
28339 74DB           44                         inc	sp
28340 74DC           44                         inc	sp
28341                                           !BCC_EOS
28342                                           ! 3963         crtc_addr = read_word(ES, BX + 0x40);
28343                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28344 74DD           8B46         08            mov	ax,8[bp]
28345                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28346 74E0           05                   0040  add	ax,*$40
28347 74E3           50                         push	ax
28348                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28349 74E4           FF76         06            push	6[bp]
28350                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28351 74E7           E8         06B6            call	_read_word
28352 74EA           83C4                   04  add	sp,*4
28353                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28354 74ED           8946         FC            mov	-4[bp],ax
28355                                           !BCC_EOS
28356                                           ! 3964         addr1 = BX;
28357                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28358 74F0           8B46         08            mov	ax,8[bp]
28359 74F3           8946         F8            mov	-8[bp],ax
28360                                           !BCC_EOS
28361                                           ! 3965         BX += 5;
28362                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28363 74F6           8B46         08            mov	ax,8[bp]
28364 74F9           05                   0005  add	ax,*5
28365 74FC           8946         08            mov	8[bp],ax
28366                                           !BCC_EOS
28367                                           ! 3966         for(i=1;i<=4;i++){
28368                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28369 74FF           B8                   0001  mov	ax,*1
28370 7502           8946         FE            mov	-2[bp],ax
28371                                           !BCC_EOS
28372                                           !BCC_EOS
28373 7505           EB           34            jmp .273
28374                       00007507            .274:
28375                                           ! 3967             outb(0x3c4, i);
28376                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28377 7507           FF76         FE            push	-2[bp]
28378                                           ! Debug: list int = const $3C4 (used reg = )
28379 750A           B8                   03C4  mov	ax,#$3C4
28380 750D           50                         push	ax
28381                                           ! Debug: func () void = outb+0 (used reg = )
28382 750E           E8         06E8            call	_outb
28383 7511           83C4                   04  add	sp,*4
28384                                           !BCC_EOS
28385                                           ! 3968             outb(0x3c5, read_byte(ES, BX)); BX++;
28386                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28387 7514           FF76         08            push	8[bp]
28388                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28389 7517           FF76         06            push	6[bp]
28390                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28391 751A           E8         0670            call	_read_byte
28392 751D           83C4                   04  add	sp,*4
28393                                           ! Debug: list unsigned char = al+0 (used reg = )
28394 7520           30E4                       xor	ah,ah
28395 7522           50                         push	ax
28396                                           ! Debug: list int = const $3C5 (used reg = )
28397 7523           B8                   03C5  mov	ax,#$3C5
28398 7526           50                         push	ax
28399                                           ! Debug: func () void = outb+0 (used reg = )
28400 7527           E8         06CF            call	_outb
28401 752A           83C4                   04  add	sp,*4
28402                                           !BCC_EOS
28403                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28404 752D           8B46         08            mov	ax,8[bp]
28405 7530           40                         inc	ax
28406 7531           8946         08            mov	8[bp],ax
28407                                           !BCC_EOS
28408                                           ! 3969         }
28409                                           ! 3970         outb(0x3c4, 0);
28410                       00007534            .272:
28411                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28412 7534           8B46         FE            mov	ax,-2[bp]
28413 7537           40                         inc	ax
28414 7538           8946         FE            mov	-2[bp],ax
28415                       0000753B            .273:
28416                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28417 753B           8B46         FE            mov	ax,-2[bp]
28418 753E           3D                   0004  cmp	ax,*4
28419 7541           76           C4            jbe	.274
28420                       00007543            .275:
28421                       00007543            .271:
28422                                           ! Debug: list int = const 0 (used reg = )
28423 7543           31C0                       xor	ax,ax
28424 7545           50                         push	ax
28425                                           ! Debug: list int = const $3C4 (used reg = )
28426 7546           B8                   03C4  mov	ax,#$3C4
28427 7549           50                         push	ax
28428                                           ! Debug: func () void = outb+0 (used reg = )
28429 754A           E8         06AC            call	_outb
28430 754D           83C4                   04  add	sp,*4
28431                                           !BCC_EOS
28432                                           ! 3971         outb(0x3c5, read_byte(ES, BX)); BX++;
28433                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28434 7550           FF76         08            push	8[bp]
28435                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28436 7553           FF76         06            push	6[bp]
28437                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28438 7556           E8         0634            call	_read_byte
28439 7559           83C4                   04  add	sp,*4
28440                                           ! Debug: list unsigned char = al+0 (used reg = )
28441 755C           30E4                       xor	ah,ah
28442 755E           50                         push	ax
28443                                           ! Debug: list int = const $3C5 (used reg = )
28444 755F           B8                   03C5  mov	ax,#$3C5
28445 7562           50                         push	ax
28446                                           ! Debug: func () void = outb+0 (used reg = )
28447 7563           E8         0693            call	_outb
28448 7566           83C4                   04  add	sp,*4
28449                                           !BCC_EOS
28450                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28451 7569           8B46         08            mov	ax,8[bp]
28452 756C           40                         inc	ax
28453 756D           8946         08            mov	8[bp],ax
28454                                           !BCC_EOS
28455                                           ! 3972         outw(crtc_addr,0x0011);
28456                                           ! Debug: list int = const $11 (used reg = )
28457 7570           B8                   0011  mov	ax,*$11
28458 7573           50                         push	ax
28459                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28460 7574           FF76         FC            push	-4[bp]
28461                                           ! Debug: func () void = outw+0 (used reg = )
28462 7577           E8         068F            call	_outw
28463 757A           83C4                   04  add	sp,*4
28464                                           !BCC_EOS
28465                                           ! 3973         for(i=0;i<=0x18;i++) {
28466                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28467 757D           31C0                       xor	ax,ax
28468 757F           8946         FE            mov	-2[bp],ax
28469                                           !BCC_EOS
28470                                           !BCC_EOS
28471 7582           EB           3C            jmp .278
28472                       00007584            .279:
28473                                           ! 3974             if (i != 0x11) {
28474                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28475 7584           8B46         FE            mov	ax,-2[bp]
28476 7587           3D                   0011  cmp	ax,*$11
28477 758A           74           26            je  	.27A
28478                       0000758C            .27B:
28479                                           ! 3975                 outb(crtc_addr,i);
28480                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28481 758C           FF76         FE            push	-2[bp]
28482                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28483 758F           FF76         FC            push	-4[bp]
28484                                           ! Debug: func () void = outb+0 (used reg = )
28485 7592           E8         0664            call	_outb
28486 7595           83C4                   04  add	sp,*4
28487                                           !BCC_EOS
28488                                           ! 3976                 outb(crtc_addr+1, read_byte(ES, BX));
28489                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28490 7598           FF76         08            push	8[bp]
28491                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28492 759B           FF76         06            push	6[bp]
28493                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28494 759E           E8         05EC            call	_read_byte
28495 75A1           83C4                   04  add	sp,*4
28496                                           ! Debug: list unsigned char = al+0 (used reg = )
28497 75A4           30E4                       xor	ah,ah
28498 75A6           50                         push	ax
28499                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28500 75A7           8B46         FC            mov	ax,-4[bp]
28501                                           ! Debug: list unsigned int = ax+1 (used reg = )
28502 75AA           40                         inc	ax
28503 75AB           50                         push	ax
28504                                           ! Debug: func () void = outb+0 (used reg = )
28505 75AC           E8         064A            call	_outb
28506 75AF           83C4                   04  add	sp,*4
28507                                           !BCC_EOS
28508                                           ! 3977             }
28509                                           ! 3978             BX++;
28510                       000075B2            .27A:
28511                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28512 75B2           8B46         08            mov	ax,8[bp]
28513 75B5           40                         inc	ax
28514 75B6           8946         08            mov	8[bp],ax
28515                                           !BCC_EOS
28516                                           ! 3979         }
28517                                           ! 3980         v = inb(0x3cc) & ~0x01;
28518                       000075B9            .277:
28519                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28520 75B9           8B46         FE            mov	ax,-2[bp]
28521 75BC           40                         inc	ax
28522 75BD           8946         FE            mov	-2[bp],ax
28523                       000075C0            .278:
28524                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28525 75C0           8B46         FE            mov	ax,-2[bp]
28526 75C3           3D                   0018  cmp	ax,*$18
28527 75C6           76           BC            jbe	.279
28528                       000075C8            .27C:
28529                       000075C8            .276:
28530                                           ! Debug: list int = const $3CC (used reg = )
28531 75C8           B8                   03CC  mov	ax,#$3CC
28532 75CB           50                         push	ax
28533                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28534 75CC           E8         0614            call	_inb
28535 75CF           44                         inc	sp
28536 75D0           44                         inc	sp
28537                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28538 75D1           24                     FE  and	al,#$FE
28539                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28540 75D3           30E4                       xor	ah,ah
28541 75D5           8946         FA            mov	-6[bp],ax
28542                                           !BCC_EOS
28543                                           ! 3981         if (crtc_addr = 0x3d4)
28544                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28545 75D8           B8                   03D4  mov	ax,#$3D4
28546 75DB           8946         FC            mov	-4[bp],ax
28547 75DE           85C0                       test	ax,ax
28548 75E0           74           08            je  	.27D
28549                       000075E2            .27E:
28550                                           ! 3982             v |= 0x01;
28551                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28552 75E2           8B46         FA            mov	ax,-6[bp]
28553 75E5           0C                     01  or	al,*1
28554 75E7           8946         FA            mov	-6[bp],ax
28555                                           !BCC_EOS
28556                                           ! 3983         outb(0x3c2, v);
28557                       000075EA            .27D:
28558                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28559 75EA           FF76         FA            push	-6[bp]
28560                                           ! Debug: list int = const $3C2 (used reg = )
28561 75ED           B8                   03C2  mov	ax,#$3C2
28562 75F0           50                         push	ax
28563                                           ! Debug: func () void = outb+0 (used reg = )
28564 75F1           E8         0605            call	_outb
28565 75F4           83C4                   04  add	sp,*4
28566                                           !BCC_EOS
28567                                           ! 3984         outb(crtc_addr, 0x11);
28568                                           ! Debug: list int = const $11 (used reg = )
28569 75F7           B8                   0011  mov	ax,*$11
28570 75FA           50                         push	ax
28571                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28572 75FB           FF76         FC            push	-4[bp]
28573                                           ! Debug: func () void = outb+0 (used reg = )
28574 75FE           E8         05F8            call	_outb
28575 7601           83C4                   04  add	sp,*4
28576                                           !BCC_EOS
28577                                           ! 3985         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28578                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28579 7604           8B46         08            mov	ax,8[bp]
28580                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28581                                           ! Debug: list unsigned int = ax-7 (used reg = )
28582 7607           05                   FFF9  add	ax,*-7
28583 760A           50                         push	ax
28584                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28585 760B           FF76         06            push	6[bp]
28586                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28587 760E           E8         057C            call	_read_byte
28588 7611           83C4                   04  add	sp,*4
28589                                           ! Debug: list unsigned char = al+0 (used reg = )
28590 7614           30E4                       xor	ah,ah
28591 7616           50                         push	ax
28592                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28593 7617           8B46         FC            mov	ax,-4[bp]
28594                                           ! Debug: list unsigned int = ax+1 (used reg = )
28595 761A           40                         inc	ax
28596 761B           50                         push	ax
28597                                           ! Debug: func () void = outb+0 (used reg = )
28598 761C           E8         05DA            call	_outb
28599 761F           83C4                   04  add	sp,*4
28600                                           !BCC_EOS
28601                                           ! 3986         ar_index = read_byte(ES, addr1 + 0x03);
28602                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28603 7622           8B46         F8            mov	ax,-8[bp]
28604                                           ! Debug: list unsigned int = ax+3 (used reg = )
28605 7625           05                   0003  add	ax,*3
28606 7628           50                         push	ax
28607                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28608 7629           FF76         06            push	6[bp]
28609                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28610 762C           E8         055E            call	_read_byte
28611 762F           83C4                   04  add	sp,*4
28612                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28613 7632           30E4                       xor	ah,ah
28614 7634           8946         F6            mov	-$A[bp],ax
28615                                           !BCC_EOS
28616                                           ! 3987         inb(0x3da);
28617                                           ! Debug: list int = const $3DA (used reg = )
28618 7637           B8                   03DA  mov	ax,#$3DA
28619 763A           50                         push	ax
28620                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28621 763B           E8         05A5            call	_inb
28622 763E           44                         inc	sp
28623 763F           44                         inc	sp
28624                                           !BCC_EOS
28625                                           ! 3988         for(i=0;i<=0x13;i++) {
28626                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28627 7640           31C0                       xor	ax,ax
28628 7642           8946         FE            mov	-2[bp],ax
28629                                           !BCC_EOS
28630                                           !BCC_EOS
28631 7645           EB           3C            jmp .281
28632                       00007647            .282:
28633                                           ! 3989             outb(0x3c0, i | (ar_index & 0x20));
28634                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28635 7647           8A46         F6            mov	al,-$A[bp]
28636 764A           24                     20  and	al,*$20
28637                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28638                                           ! Debug: expression subtree swapping
28639 764C           30E4                       xor	ah,ah
28640 764E           0B46         FE            or	ax,-2[bp]
28641                                           ! Debug: list unsigned int = ax+0 (used reg = )
28642 7651           50                         push	ax
28643                                           ! Debug: list int = const $3C0 (used reg = )
28644 7652           B8                   03C0  mov	ax,#$3C0
28645 7655           50                         push	ax
28646                                           ! Debug: func () void = outb+0 (used reg = )
28647 7656           E8         05A0            call	_outb
28648 7659           83C4                   04  add	sp,*4
28649                                           !BCC_EOS
28650                                           ! 3990             outb(0x3c0, read_byte(ES, BX)); BX++;
28651                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28652 765C           FF76         08            push	8[bp]
28653                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28654 765F           FF76         06            push	6[bp]
28655                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28656 7662           E8         0528            call	_read_byte
28657 7665           83C4                   04  add	sp,*4
28658                                           ! Debug: list unsigned char = al+0 (used reg = )
28659 7668           30E4                       xor	ah,ah
28660 766A           50                         push	ax
28661                                           ! Debug: list int = const $3C0 (used reg = )
28662 766B           B8                   03C0  mov	ax,#$3C0
28663 766E           50                         push	ax
28664                                           ! Debug: func () void = outb+0 (used reg = )
28665 766F           E8         0587            call	_outb
28666 7672           83C4                   04  add	sp,*4
28667                                           !BCC_EOS
28668                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28669 7675           8B46         08            mov	ax,8[bp]
28670 7678           40                         inc	ax
28671 7679           8946         08            mov	8[bp],ax
28672                                           !BCC_EOS
28673                                           ! 3991         }
28674                                           ! 3992         outb(0x3c0, ar_index);
28675                       0000767C            .280:
28676                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28677 767C           8B46         FE            mov	ax,-2[bp]
28678 767F           40                         inc	ax
28679 7680           8946         FE            mov	-2[bp],ax
28680                       00007683            .281:
28681                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28682 7683           8B46         FE            mov	ax,-2[bp]
28683 7686           3D                   0013  cmp	ax,*$13
28684 7689           76           BC            jbe	.282
28685                       0000768B            .283:
28686                       0000768B            .27F:
28687                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28688 768B           FF76         F6            push	-$A[bp]
28689                                           ! Debug: list int = const $3C0 (used reg = )
28690 768E           B8                   03C0  mov	ax,#$3C0
28691 7691           50                         push	ax
28692                                           ! Debug: func () void = outb+0 (used reg = )
28693 7692           E8         0564            call	_outb
28694 7695           83C4                   04  add	sp,*4
28695                                           !BCC_EOS
28696                                           ! 3993         inb(0x3da);
28697                                           ! Debug: list int = const $3DA (used reg = )
28698 7698           B8                   03DA  mov	ax,#$3DA
28699 769B           50                         push	ax
28700                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28701 769C           E8         0544            call	_inb
28702 769F           44                         inc	sp
28703 76A0           44                         inc	sp
28704                                           !BCC_EOS
28705                                           ! 3994         for(i=0;i<=8;i++) {
28706                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28707 76A1           31C0                       xor	ax,ax
28708 76A3           8946         FE            mov	-2[bp],ax
28709                                           !BCC_EOS
28710                                           !BCC_EOS
28711 76A6           EB           34            jmp .286
28712                       000076A8            .287:
28713                                           ! 3995             outb(0x3ce,i);
28714                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28715 76A8           FF76         FE            push	-2[bp]
28716                                           ! Debug: list int = const $3CE (used reg = )
28717 76AB           B8                   03CE  mov	ax,#$3CE
28718 76AE           50                         push	ax
28719                                           ! Debug: func () void = outb+0 (used reg = )
28720 76AF           E8         0547            call	_outb
28721 76B2           83C4                   04  add	sp,*4
28722                                           !BCC_EOS
28723                                           ! 3996             outb(0x3cf, read_byte(ES, BX)); BX++;
28724                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28725 76B5           FF76         08            push	8[bp]
28726                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28727 76B8           FF76         06            push	6[bp]
28728                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28729 76BB           E8         04CF            call	_read_byte
28730 76BE           83C4                   04  add	sp,*4
28731                                           ! Debug: list unsigned char = al+0 (used reg = )
28732 76C1           30E4                       xor	ah,ah
28733 76C3           50                         push	ax
28734                                           ! Debug: list int = const $3CF (used reg = )
28735 76C4           B8                   03CF  mov	ax,#$3CF
28736 76C7           50                         push	ax
28737                                           ! Debug: func () void = outb+0 (used reg = )
28738 76C8           E8         052E            call	_outb
28739 76CB           83C4                   04  add	sp,*4
28740                                           !BCC_EOS
28741                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28742 76CE           8B46         08            mov	ax,8[bp]
28743 76D1           40                         inc	ax
28744 76D2           8946         08            mov	8[bp],ax
28745                                           !BCC_EOS
28746                                           ! 3997         }
28747                                           ! 3998         BX += 2;
28748                       000076D5            .285:
28749                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28750 76D5           8B46         FE            mov	ax,-2[bp]
28751 76D8           40                         inc	ax
28752 76D9           8946         FE            mov	-2[bp],ax
28753                       000076DC            .286:
28754                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28755 76DC           8B46         FE            mov	ax,-2[bp]
28756 76DF           3D                   0008  cmp	ax,*8
28757 76E2           76           C4            jbe	.287
28758                       000076E4            .288:
28759                       000076E4            .284:
28760                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28761 76E4           8B46         08            mov	ax,8[bp]
28762 76E7           40                         inc	ax
28763 76E8           40                         inc	ax
28764 76E9           8946         08            mov	8[bp],ax
28765                                           !BCC_EOS
28766                                           ! 3999         BX += 4;
28767                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28768 76EC           8B46         08            mov	ax,8[bp]
28769 76EF           05                   0004  add	ax,*4
28770 76F2           8946         08            mov	8[bp],ax
28771                                           !BCC_EOS
28772                                           ! 4000         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28773                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28774 76F5           FF76         F8            push	-8[bp]
28775                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28776 76F8           FF76         06            push	6[bp]
28777                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28778 76FB           E8         048F            call	_read_byte
28779 76FE           83C4                   04  add	sp,*4
28780                                           ! Debug: list unsigned char = al+0 (used reg = )
28781 7701           30E4                       xor	ah,ah
28782 7703           50                         push	ax
28783                                           ! Debug: list int = const $3C4 (used reg = )
28784 7704           B8                   03C4  mov	ax,#$3C4
28785 7707           50                         push	ax
28786                                           ! Debug: func () void = outb+0 (used reg = )
28787 7708           E8         04EE            call	_outb
28788 770B           83C4                   04  add	sp,*4
28789                                           !BCC_EOS
28790                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28791 770E           8B46         F8            mov	ax,-8[bp]
28792 7711           40                         inc	ax
28793 7712           8946         F8            mov	-8[bp],ax
28794                                           !BCC_EOS
28795                                           ! 4001         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28796                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28797 7715           FF76         F8            push	-8[bp]
28798                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28799 7718           FF76         06            push	6[bp]
28800                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28801 771B           E8         046F            call	_read_byte
28802 771E           83C4                   04  add	sp,*4
28803                                           ! Debug: list unsigned char = al+0 (used reg = )
28804 7721           30E4                       xor	ah,ah
28805 7723           50                         push	ax
28806                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28807 7724           FF76         FC            push	-4[bp]
28808                                           ! Debug: func () void = outb+0 (used reg = )
28809 7727           E8         04CF            call	_outb
28810 772A           83C4                   04  add	sp,*4
28811                                           !BCC_EOS
28812                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28813 772D           8B46         F8            mov	ax,-8[bp]
28814 7730           40                         inc	ax
28815 7731           8946         F8            mov	-8[bp],ax
28816                                           !BCC_EOS
28817                                           ! 4002         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28818                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28819 7734           FF76         F8            push	-8[bp]
28820                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28821 7737           FF76         06            push	6[bp]
28822                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28823 773A           E8         0450            call	_read_byte
28824 773D           83C4                   04  add	sp,*4
28825                                           ! Debug: list unsigned char = al+0 (used reg = )
28826 7740           30E4                       xor	ah,ah
28827 7742           50                         push	ax
28828                                           ! Debug: list int = const $3CE (used reg = )
28829 7743           B8                   03CE  mov	ax,#$3CE
28830 7746           50                         push	ax
28831                                           ! Debug: func () void = outb+0 (used reg = )
28832 7747           E8         04AF            call	_outb
28833 774A           83C4                   04  add	sp,*4
28834                                           !BCC_EOS
28835                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28836 774D           8B46         F8            mov	ax,-8[bp]
28837 7750           40                         inc	ax
28838 7751           8946         F8            mov	-8[bp],ax
28839                                           !BCC_EOS
28840                                           ! 4003         addr1++;
28841                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28842 7754           8B46         F8            mov	ax,-8[bp]
28843 7757           40                         inc	ax
28844 7758           8946         F8            mov	-8[bp],ax
28845                                           !BCC_EOS
28846                                           ! 4004         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28847                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28848 775B           FF76         F8            push	-8[bp]
28849                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28850 775E           FF76         06            push	6[bp]
28851                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28852 7761           E8         0429            call	_read_byte
28853 7764           83C4                   04  add	sp,*4
28854                                           ! Debug: list unsigned char = al+0 (used reg = )
28855 7767           30E4                       xor	ah,ah
28856 7769           50                         push	ax
28857                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28858 776A           8B46         FC            mov	ax,-4[bp]
28859                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28860                                           ! Debug: list unsigned int = ax+6 (used reg = )
28861 776D           05                   0006  add	ax,*6
28862 7770           50                         push	ax
28863                                           ! Debug: func () void = outb+0 (used reg = )
28864 7771           E8         0485            call	_outb
28865 7774           83C4                   04  add	sp,*4
28866                                           !BCC_EOS
28867                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28868 7777           8B46         F8            mov	ax,-8[bp]
28869 777A           40                         inc	ax
28870 777B           8946         F8            mov	-8[bp],ax
28871                                           !BCC_EOS
28872                                           ! 4005     }
28873                                           ! 4006     if (CX & 2) {
28874                       0000777E            .26F:
28875                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28876 777E           8A46         04            mov	al,4[bp]
28877 7781           24                     02  and	al,*2
28878 7783           84C0                       test	al,al
28879 7785         0F84         0270            beq 	.289
28880                       00007789            .28A:
28881                                           ! 4007         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28882                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28883 7789           FF76         08            push	8[bp]
28884                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28885 778C           FF76         06            push	6[bp]
28886                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28887 778F           E8         03FB            call	_read_byte
28888 7792           83C4                   04  add	sp,*4
28889                                           ! Debug: list unsigned char = al+0 (used reg = )
28890 7795           30E4                       xor	ah,ah
28891 7797           50                         push	ax
28892                                           ! Debug: list int = const $49 (used reg = )
28893 7798           B8                   0049  mov	ax,*$49
28894 779B           50                         push	ax
28895                                           ! Debug: list int = const $40 (used reg = )
28896 779C           B8                   0040  mov	ax,*$40
28897 779F           50                         push	ax
28898                                           ! Debug: func () void = write_byte+0 (used reg = )
28899 77A0           E8         0410            call	_write_byte
28900 77A3           83C4                   06  add	sp,*6
28901                                           !BCC_EOS
28902                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28903 77A6           8B46         08            mov	ax,8[bp]
28904 77A9           40                         inc	ax
28905 77AA           8946         08            mov	8[bp],ax
28906                                           !BCC_EOS
28907                                           ! 4008         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28908                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28909 77AD           FF76         08            push	8[bp]
28910                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28911 77B0           FF76         06            push	6[bp]
28912                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28913 77B3           E8         03EA            call	_read_word
28914 77B6           83C4                   04  add	sp,*4
28915                                           ! Debug: list unsigned short = ax+0 (used reg = )
28916 77B9           50                         push	ax
28917                                           ! Debug: list int = const $4A (used reg = )
28918 77BA           B8                   004A  mov	ax,*$4A
28919 77BD           50                         push	ax
28920                                           ! Debug: list int = const $40 (used reg = )
28921 77BE           B8                   0040  mov	ax,*$40
28922 77C1           50                         push	ax
28923                                           ! Debug: func () void = write_word+0 (used reg = )
28924 77C2           E8         0406            call	_write_word
28925 77C5           83C4                   06  add	sp,*6
28926                                           !BCC_EOS
28927                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28928 77C8           8B46         08            mov	ax,8[bp]
28929 77CB           40                         inc	ax
28930 77CC           40                         inc	ax
28931 77CD           8946         08            mov	8[bp],ax
28932                                           !BCC_EOS
28933                                           ! 4009         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28934                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28935 77D0           FF76         08            push	8[bp]
28936                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28937 77D3           FF76         06            push	6[bp]
28938                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28939 77D6           E8         03C7            call	_read_word
28940 77D9           83C4                   04  add	sp,*4
28941                                           ! Debug: list unsigned short = ax+0 (used reg = )
28942 77DC           50                         push	ax
28943                                           ! Debug: list int = const $4C (used reg = )
28944 77DD           B8                   004C  mov	ax,*$4C
28945 77E0           50                         push	ax
28946                                           ! Debug: list int = const $40 (used reg = )
28947 77E1           B8                   0040  mov	ax,*$40
28948 77E4           50                         push	ax
28949                                           ! Debug: func () void = write_word+0 (used reg = )
28950 77E5           E8         03E3            call	_write_word
28951 77E8           83C4                   06  add	sp,*6
28952                                           !BCC_EOS
28953                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28954 77EB           8B46         08            mov	ax,8[bp]
28955 77EE           40                         inc	ax
28956 77EF           40                         inc	ax
28957 77F0           8946         08            mov	8[bp],ax
28958                                           !BCC_EOS
28959                                           ! 4010         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
28960                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28961 77F3           FF76         08            push	8[bp]
28962                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28963 77F6           FF76         06            push	6[bp]
28964                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28965 77F9           E8         03A4            call	_read_word
28966 77FC           83C4                   04  add	sp,*4
28967                                           ! Debug: list unsigned short = ax+0 (used reg = )
28968 77FF           50                         push	ax
28969                                           ! Debug: list int = const $63 (used reg = )
28970 7800           B8                   0063  mov	ax,*$63
28971 7803           50                         push	ax
28972                                           ! Debug: list int = const $40 (used reg = )
28973 7804           B8                   0040  mov	ax,*$40
28974 7807           50                         push	ax
28975                                           ! Debug: func () void = write_word+0 (used reg = )
28976 7808           E8         03C0            call	_write_word
28977 780B           83C4                   06  add	sp,*6
28978                                           !BCC_EOS
28979                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28980 780E           8B46         08            mov	ax,8[bp]
28981 7811           40                         inc	ax
28982 7812           40                         inc	ax
28983 7813           8946         08            mov	8[bp],ax
28984                                           !BCC_EOS
28985                                           ! 4011         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
28986                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28987 7816           FF76         08            push	8[bp]
28988                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28989 7819           FF76         06            push	6[bp]
28990                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28991 781C           E8         036E            call	_read_byte
28992 781F           83C4                   04  add	sp,*4
28993                                           ! Debug: list unsigned char = al+0 (used reg = )
28994 7822           30E4                       xor	ah,ah
28995 7824           50                         push	ax
28996                                           ! Debug: list int = const $84 (used reg = )
28997 7825           B8                   0084  mov	ax,#$84
28998 7828           50                         push	ax
28999                                           ! Debug: list int = const $40 (used reg = )
29000 7829           B8                   0040  mov	ax,*$40
29001 782C           50                         push	ax
29002                                           ! Debug: func () void = write_byte+0 (used reg = )
29003 782D           E8         0383            call	_write_byte
29004 7830           83C4                   06  add	sp,*6
29005                                           !BCC_EOS
29006                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29007 7833           8B46         08            mov	ax,8[bp]
29008 7836           40                         inc	ax
29009 7837           8946         08            mov	8[bp],ax
29010                                           !BCC_EOS
29011                                           ! 4012         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29012                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29013 783A           FF76         08            push	8[bp]
29014                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29015 783D           FF76         06            push	6[bp]
29016                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29017 7840           E8         035D            call	_read_word
29018 7843           83C4                   04  add	sp,*4
29019                                           ! Debug: list unsigned short = ax+0 (used reg = )
29020 7846           50                         push	ax
29021                                           ! Debug: list int = const $85 (used reg = )
29022 7847           B8                   0085  mov	ax,#$85
29023 784A           50                         push	ax
29024                                           ! Debug: list int = const $40 (used reg = )
29025 784B           B8                   0040  mov	ax,*$40
29026 784E           50                         push	ax
29027                                           ! Debug: func () void = write_word+0 (used reg = )
29028 784F           E8         0379            call	_write_word
29029 7852           83C4                   06  add	sp,*6
29030                                           !BCC_EOS
29031                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29032 7855           8B46         08            mov	ax,8[bp]
29033 7858           40                         inc	ax
29034 7859           40                         inc	ax
29035 785A           8946         08            mov	8[bp],ax
29036                                           !BCC_EOS
29037                                           ! 4013         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29038                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29039 785D           FF76         08            push	8[bp]
29040                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29041 7860           FF76         06            push	6[bp]
29042                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29043 7863           E8         0327            call	_read_byte
29044 7866           83C4                   04  add	sp,*4
29045                                           ! Debug: list unsigned char = al+0 (used reg = )
29046 7869           30E4                       xor	ah,ah
29047 786B           50                         push	ax
29048                                           ! Debug: list int = const $87 (used reg = )
29049 786C           B8                   0087  mov	ax,#$87
29050 786F           50                         push	ax
29051                                           ! Debug: list int = const $40 (used reg = )
29052 7870           B8                   0040  mov	ax,*$40
29053 7873           50                         push	ax
29054                                           ! Debug: func () void = write_byte+0 (used reg = )
29055 7874           E8         033C            call	_write_byte
29056 7877           83C4                   06  add	sp,*6
29057                                           !BCC_EOS
29058                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29059 787A           8B46         08            mov	ax,8[bp]
29060 787D           40                         inc	ax
29061 787E           8946         08            mov	8[bp],ax
29062                                           !BCC_EOS
29063                                           ! 4014         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29064                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29065 7881           FF76         08            push	8[bp]
29066                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29067 7884           FF76         06            push	6[bp]
29068                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29069 7887           E8         0303            call	_read_byte
29070 788A           83C4                   04  add	sp,*4
29071                                           ! Debug: list unsigned char = al+0 (used reg = )
29072 788D           30E4                       xor	ah,ah
29073 788F           50                         push	ax
29074                                           ! Debug: list int = const $88 (used reg = )
29075 7890           B8                   0088  mov	ax,#$88
29076 7893           50                         push	ax
29077                                           ! Debug: list int = const $40 (used reg = )
29078 7894           B8                   0040  mov	ax,*$40
29079 7897           50                         push	ax
29080                                           ! Debug: func () void = write_byte+0 (used reg = )
29081 7898           E8         0318            call	_write_byte
29082 789B           83C4                   06  add	sp,*6
29083                                           !BCC_EOS
29084                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29085 789E           8B46         08            mov	ax,8[bp]
29086 78A1           40                         inc	ax
29087 78A2           8946         08            mov	8[bp],ax
29088                                           !BCC_EOS
29089                                           ! 4015         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29090                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29091 78A5           FF76         08            push	8[bp]
29092                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29093 78A8           FF76         06            push	6[bp]
29094                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29095 78AB           E8         02DF            call	_read_byte
29096 78AE           83C4                   04  add	sp,*4
29097                                           ! Debug: list unsigned char = al+0 (used reg = )
29098 78B1           30E4                       xor	ah,ah
29099 78B3           50                         push	ax
29100                                           ! Debug: list int = const $89 (used reg = )
29101 78B4           B8                   0089  mov	ax,#$89
29102 78B7           50                         push	ax
29103                                           ! Debug: list int = const $40 (used reg = )
29104 78B8           B8                   0040  mov	ax,*$40
29105 78BB           50                         push	ax
29106                                           ! Debug: func () void = write_byte+0 (used reg = )
29107 78BC           E8         02F4            call	_write_byte
29108 78BF           83C4                   06  add	sp,*6
29109                                           !BCC_EOS
29110                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29111 78C2           8B46         08            mov	ax,8[bp]
29112 78C5           40                         inc	ax
29113 78C6           8946         08            mov	8[bp],ax
29114                                           !BCC_EOS
29115                                           ! 4016         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
29116                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29117 78C9           FF76         08            push	8[bp]
29118                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29119 78CC           FF76         06            push	6[bp]
29120                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29121 78CF           E8         02CE            call	_read_word
29122 78D2           83C4                   04  add	sp,*4
29123                                           ! Debug: list unsigned short = ax+0 (used reg = )
29124 78D5           50                         push	ax
29125                                           ! Debug: list int = const $60 (used reg = )
29126 78D6           B8                   0060  mov	ax,*$60
29127 78D9           50                         push	ax
29128                                           ! Debug: list int = const $40 (used reg = )
29129 78DA           B8                   0040  mov	ax,*$40
29130 78DD           50                         push	ax
29131                                           ! Debug: func () void = write_word+0 (used reg = )
29132 78DE           E8         02EA            call	_write_word
29133 78E1           83C4                   06  add	sp,*6
29134                                           !BCC_EOS
29135                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29136 78E4           8B46         08            mov	ax,8[bp]
29137 78E7           40                         inc	ax
29138 78E8           40                         inc	ax
29139 78E9           8946         08            mov	8[bp],ax
29140                                           !BCC_EOS
29141                                           ! 4017         for(i=0;i<8;i++) {
29142                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29143 78EC           31C0                       xor	ax,ax
29144 78EE           8946         FE            mov	-2[bp],ax
29145                                           !BCC_EOS
29146                                           !BCC_EOS
29147 78F1           EB           2F            jmp .28D
29148                       000078F3            .28E:
29149                                           ! 4018             write_word(0x40, 0x5
29150                                           ! 4018 0 +2*i, read_word(ES, BX));
29151                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29152 78F3           FF76         08            push	8[bp]
29153                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29154 78F6           FF76         06            push	6[bp]
29155                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29156 78F9           E8         02A4            call	_read_word
29157 78FC           83C4                   04  add	sp,*4
29158                                           ! Debug: list unsigned short = ax+0 (used reg = )
29159 78FF           50                         push	ax
29160                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29161                                           ! Debug: expression subtree swapping
29162 7900           8B46         FE            mov	ax,-2[bp]
29163 7903           D1E0                       shl	ax,*1
29164                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29165                                           ! Debug: expression subtree swapping
29166                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29167 7905           05                   0050  add	ax,*$50
29168 7908           50                         push	ax
29169                                           ! Debug: list int = const $40 (used reg = )
29170 7909           B8                   0040  mov	ax,*$40
29171 790C           50                         push	ax
29172                                           ! Debug: func () void = write_word+0 (used reg = )
29173 790D           E8         02BB            call	_write_word
29174 7910           83C4                   06  add	sp,*6
29175                                           !BCC_EOS
29176                                           ! 4019             BX += 2;
29177                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29178 7913           8B46         08            mov	ax,8[bp]
29179 7916           40                         inc	ax
29180 7917           40                         inc	ax
29181 7918           8946         08            mov	8[bp],ax
29182                                           !BCC_EOS
29183                                           ! 4020         }
29184                                           ! 4021         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29185                       0000791B            .28C:
29186                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29187 791B           8B46         FE            mov	ax,-2[bp]
29188 791E           40                         inc	ax
29189 791F           8946         FE            mov	-2[bp],ax
29190                       00007922            .28D:
29191                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29192 7922           8B46         FE            mov	ax,-2[bp]
29193 7925           3D                   0008  cmp	ax,*8
29194 7928           72           C9            jb 	.28E
29195                       0000792A            .28F:
29196                       0000792A            .28B:
29197                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29198 792A           FF76         08            push	8[bp]
29199                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29200 792D           FF76         06            push	6[bp]
29201                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29202 7930           E8         026D            call	_read_word
29203 7933           83C4                   04  add	sp,*4
29204                                           ! Debug: list unsigned short = ax+0 (used reg = )
29205 7936           50                         push	ax
29206                                           ! Debug: list int = const $4E (used reg = )
29207 7937           B8                   004E  mov	ax,*$4E
29208 793A           50                         push	ax
29209                                           ! Debug: list int = const $40 (used reg = )
29210 793B           B8                   0040  mov	ax,*$40
29211 793E           50                         push	ax
29212                                           ! Debug: func () void = write_word+0 (used reg = )
29213 793F           E8         0289            call	_write_word
29214 7942           83C4                   06  add	sp,*6
29215                                           !BCC_EOS
29216                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29217 7945           8B46         08            mov	ax,8[bp]
29218 7948           40                         inc	ax
29219 7949           40                         inc	ax
29220 794A           8946         08            mov	8[bp],ax
29221                                           !BCC_EOS
29222                                           ! 4022         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29223                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29224 794D           FF76         08            push	8[bp]
29225                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29226 7950           FF76         06            push	6[bp]
29227                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29228 7953           E8         0237            call	_read_byte
29229 7956           83C4                   04  add	sp,*4
29230                                           ! Debug: list unsigned char = al+0 (used reg = )
29231 7959           30E4                       xor	ah,ah
29232 795B           50                         push	ax
29233                                           ! Debug: list int = const $62 (used reg = )
29234 795C           B8                   0062  mov	ax,*$62
29235 795F           50                         push	ax
29236                                           ! Debug: list int = const $40 (used reg = )
29237 7960           B8                   0040  mov	ax,*$40
29238 7963           50                         push	ax
29239                                           ! Debug: func () void = write_byte+0 (used reg = )
29240 7964           E8         024C            call	_write_byte
29241 7967           83C4                   06  add	sp,*6
29242                                           !BCC_EOS
29243                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29244 796A           8B46         08            mov	ax,8[bp]
29245 796D           40                         inc	ax
29246 796E           8946         08            mov	8[bp],ax
29247                                           !BCC_EOS
29248                                           ! 4023         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29249                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29250 7971           FF76         08            push	8[bp]
29251                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29252 7974           FF76         06            push	6[bp]
29253                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29254 7977           E8         0226            call	_read_word
29255 797A           83C4                   04  add	sp,*4
29256                                           ! Debug: list unsigned short = ax+0 (used reg = )
29257 797D           50                         push	ax
29258                                           ! Debug: list int = const $7C (used reg = )
29259 797E           B8                   007C  mov	ax,*$7C
29260 7981           50                         push	ax
29261                                           ! Debug: list int = const 0 (used reg = )
29262 7982           31C0                       xor	ax,ax
29263 7984           50                         push	ax
29264                                           ! Debug: func () void = write_word+0 (used reg = )
29265 7985           E8         0243            call	_write_word
29266 7988           83C4                   06  add	sp,*6
29267                                           !BCC_EOS
29268                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29269 798B           8B46         08            mov	ax,8[bp]
29270 798E           40                         inc	ax
29271 798F           40                         inc	ax
29272 7990           8946         08            mov	8[bp],ax
29273                                           !BCC_EOS
29274                                           ! 4024         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29275                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29276 7993           FF76         08            push	8[bp]
29277                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29278 7996           FF76         06            push	6[bp]
29279                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29280 7999           E8         0204            call	_read_word
29281 799C           83C4                   04  add	sp,*4
29282                                           ! Debug: list unsigned short = ax+0 (used reg = )
29283 799F           50                         push	ax
29284                                           ! Debug: list int = const $7E (used reg = )
29285 79A0           B8                   007E  mov	ax,*$7E
29286 79A3           50                         push	ax
29287                                           ! Debug: list int = const 0 (used reg = )
29288 79A4           31C0                       xor	ax,ax
29289 79A6           50                         push	ax
29290                                           ! Debug: func () void = write_word+0 (used reg = )
29291 79A7           E8         0221            call	_write_word
29292 79AA           83C4                   06  add	sp,*6
29293                                           !BCC_EOS
29294                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29295 79AD           8B46         08            mov	ax,8[bp]
29296 79B0           40                         inc	ax
29297 79B1           40                         inc	ax
29298 79B2           8946         08            mov	8[bp],ax
29299                                           !BCC_EOS
29300                                           ! 4025         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29301                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29302 79B5           FF76         08            push	8[bp]
29303                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29304 79B8           FF76         06            push	6[bp]
29305                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29306 79BB           E8         01E2            call	_read_word
29307 79BE           83C4                   04  add	sp,*4
29308                                           ! Debug: list unsigned short = ax+0 (used reg = )
29309 79C1           50                         push	ax
29310                                           ! Debug: list int = const $10C (used reg = )
29311 79C2           B8                   010C  mov	ax,#$10C
29312 79C5           50                         push	ax
29313                                           ! Debug: list int = const 0 (used reg = )
29314 79C6           31C0                       xor	ax,ax
29315 79C8           50                         push	ax
29316                                           ! Debug: func () void = write_word+0 (used reg = )
29317 79C9           E8         01FF            call	_write_word
29318 79CC           83C4                   06  add	sp,*6
29319                                           !BCC_EOS
29320                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29321 79CF           8B46         08            mov	ax,8[bp]
29322 79D2           40                         inc	ax
29323 79D3           40                         inc	ax
29324 79D4           8946         08            mov	8[bp],ax
29325                                           !BCC_EOS
29326                                           ! 4026         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29327                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29328 79D7           FF76         08            push	8[bp]
29329                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29330 79DA           FF76         06            push	6[bp]
29331                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29332 79DD           E8         01C0            call	_read_word
29333 79E0           83C4                   04  add	sp,*4
29334                                           ! Debug: list unsigned short = ax+0 (used reg = )
29335 79E3           50                         push	ax
29336                                           ! Debug: list int = const $10E (used reg = )
29337 79E4           B8                   010E  mov	ax,#$10E
29338 79E7           50                         push	ax
29339                                           ! Debug: list int = const 0 (used reg = )
29340 79E8           31C0                       xor	ax,ax
29341 79EA           50                         push	ax
29342                                           ! Debug: func () void = write_word+0 (used reg = )
29343 79EB           E8         01DD            call	_write_word
29344 79EE           83C4                   06  add	sp,*6
29345                                           !BCC_EOS
29346                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29347 79F1           8B46         08            mov	ax,8[bp]
29348 79F4           40                         inc	ax
29349 79F5           40                         inc	ax
29350 79F6           8946         08            mov	8[bp],ax
29351                                           !BCC_EOS
29352                                           ! 4027     }
29353                                           ! 4028     if (CX & 4) {
29354                       000079F9            .289:
29355                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29356 79F9           8A46         04            mov	al,4[bp]
29357 79FC           24                     04  and	al,*4
29358 79FE           84C0                       test	al,al
29359 7A00         0F84         0096            beq 	.290
29360                       00007A04            .291:
29361                                           ! 4029         BX++;
29362                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29363 7A04           8B46         08            mov	ax,8[bp]
29364 7A07           40                         inc	ax
29365 7A08           8946         08            mov	8[bp],ax
29366                                           !BCC_EOS
29367                                           ! 4030         v = read_byte(ES, BX); BX++;
29368                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29369 7A0B           FF76         08            push	8[bp]
29370                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29371 7A0E           FF76         06            push	6[bp]
29372                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29373 7A11           E8         0179            call	_read_byte
29374 7A14           83C4                   04  add	sp,*4
29375                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29376 7A17           30E4                       xor	ah,ah
29377 7A19           8946         FA            mov	-6[bp],ax
29378                                           !BCC_EOS
29379                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29380 7A1C           8B46         08            mov	ax,8[bp]
29381 7A1F           40                         inc	ax
29382 7A20           8946         08            mov	8[bp],ax
29383                                           !BCC_EOS
29384                                           ! 4031         outb(0x3c6, read_byte(ES, BX)); BX++;
29385                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29386 7A23           FF76         08            push	8[bp]
29387                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29388 7A26           FF76         06            push	6[bp]
29389                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29390 7A29           E8         0161            call	_read_byte
29391 7A2C           83C4                   04  add	sp,*4
29392                                           ! Debug: list unsigned char = al+0 (used reg = )
29393 7A2F           30E4                       xor	ah,ah
29394 7A31           50                         push	ax
29395                                           ! Debug: list int = const $3C6 (used reg = )
29396 7A32           B8                   03C6  mov	ax,#$3C6
29397 7A35           50                         push	ax
29398                                           ! Debug: func () void = outb+0 (used reg = )
29399 7A36           E8         01C0            call	_outb
29400 7A39           83C4                   04  add	sp,*4
29401                                           !BCC_EOS
29402                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29403 7A3C           8B46         08            mov	ax,8[bp]
29404 7A3F           40                         inc	ax
29405 7A40           8946         08            mov	8[bp],ax
29406                                           !BCC_EOS
29407                                           ! 4032         outb(0x3c8,0x00);
29408                                           ! Debug: list int = const 0 (used reg = )
29409 7A43           31C0                       xor	ax,ax
29410 7A45           50                         push	ax
29411                                           ! Debug: list int = const $3C8 (used reg = )
29412 7A46           B8                   03C8  mov	ax,#$3C8
29413 7A49           50                         push	ax
29414                                           ! Debug: func () void = outb+0 (used reg = )
29415 7A4A           E8         01AC            call	_outb
29416 7A4D           83C4                   04  add	sp,*4
29417                                           !BCC_EOS
29418                                           ! 4033         for(i=0;i<256*3;i++) {
29419                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29420 7A50           31C0                       xor	ax,ax
29421 7A52           8946         FE            mov	-2[bp],ax
29422                                           !BCC_EOS
29423                                           !BCC_EOS
29424 7A55           EB           27            jmp .294
29425                       00007A57            .295:
29426                                           ! 4034             outb(0x3c9, read_byte(ES, BX)); BX++;
29427                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29428 7A57           FF76         08            push	8[bp]
29429                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29430 7A5A           FF76         06            push	6[bp]
29431                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29432 7A5D           E8         012D            call	_read_byte
29433 7A60           83C4                   04  add	sp,*4
29434                                           ! Debug: list unsigned char = al+0 (used reg = )
29435 7A63           30E4                       xor	ah,ah
29436 7A65           50                         push	ax
29437                                           ! Debug: list int = const $3C9 (used reg = )
29438 7A66           B8                   03C9  mov	ax,#$3C9
29439 7A69           50                         push	ax
29440                                           ! Debug: func () void = outb+0 (used reg = )
29441 7A6A           E8         018C            call	_outb
29442 7A6D           83C4                   04  add	sp,*4
29443                                           !BCC_EOS
29444                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29445 7A70           8B46         08            mov	ax,8[bp]
29446 7A73           40                         inc	ax
29447 7A74           8946         08            mov	8[bp],ax
29448                                           !BCC_EOS
29449                                           ! 4035         }
29450                                           ! 4036         BX++;
29451                       00007A77            .293:
29452                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29453 7A77           8B46         FE            mov	ax,-2[bp]
29454 7A7A           40                         inc	ax
29455 7A7B           8946         FE            mov	-2[bp],ax
29456                       00007A7E            .294:
29457                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29458 7A7E           8B46         FE            mov	ax,-2[bp]
29459 7A81           3D                   0300  cmp	ax,#$300
29460 7A84           72           D1            jb 	.295
29461                       00007A86            .296:
29462                       00007A86            .292:
29463                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29464 7A86           8B46         08            mov	ax,8[bp]
29465 7A89           40                         inc	ax
29466 7A8A           8946         08            mov	8[bp],ax
29467                                           !BCC_EOS
29468                                           ! 4037         outb(0x3c8, v);
29469                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29470 7A8D           FF76         FA            push	-6[bp]
29471                                           ! Debug: list int = const $3C8 (used reg = )
29472 7A90           B8                   03C8  mov	ax,#$3C8
29473 7A93           50                         push	ax
29474                                           ! Debug: func () void = outb+0 (used reg = )
29475 7A94           E8         0162            call	_outb
29476 7A97           83C4                   04  add	sp,*4
29477                                           !BCC_EOS
29478                                           ! 4038     }
29479                                           ! 4039     return BX;
29480                       00007A9A            .290:
29481 7A9A           8B46         08            mov	ax,8[bp]
29482 7A9D           89EC                       mov	sp,bp
29483 7A9F           5D                         pop	bp
29484 7AA0           C3                         ret
29485                                           !BCC_EOS
29486                                           ! 4040 }
29487                                           ! 4041 static Bit8u find_vga_entry(mode)
29488                                           ! 4042 Bit8u mode;
29489                       00007AA1            _find_vga_entry:
29490                                           !BCC_EOS
29491                                           ! 4043 {
29492                                           ! 4044  Bit8u i,line=0xFF;
29493 7AA1           55                         push	bp
29494 7AA2           89E5                       mov	bp,sp
29495 7AA4           4C                         dec	sp
29496 7AA5           4C                         dec	sp
29497                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29498 7AA6           B0                     FF  mov	al,#$FF
29499 7AA8           8846         FE            mov	-2[bp],al
29500                                           !BCC_EOS
29501                                           ! 4045  for(i=0;i<=15;i++)
29502                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29503 7AAB           30C0                       xor	al,al
29504 7AAD           8846         FF            mov	-1[bp],al
29505                                           !BCC_EOS
29506                                           !BCC_EOS
29507                                           ! 4046   if(vga_modes[i].svgamode==mode)
29508 7AB0           EB           23            jmp .299
29509                       00007AB2            .29A:
29510                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29511 7AB2           8A46         FF            mov	al,-1[bp]
29512 7AB5           30E4                       xor	ah,ah
29513 7AB7           B1                     03  mov	cl,*3
29514 7AB9           D3E0                       shl	ax,cl
29515 7ABB           89C3                       mov	bx,ax
29516                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29517 7ABD           8A87       01FD            mov	al,_vga_modes[bx]
29518 7AC1           3A46         04            cmp	al,4[bp]
29519 7AC4           75           08            jne 	.29B
29520                       00007AC6            .29C:
29521                                           ! 4047    {line=i;
29522                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29523 7AC6           8A46         FF            mov	al,-1[bp]
29524 7AC9           8846         FE            mov	-2[bp],al
29525                                           !BCC_EOS
29526                                           ! 4048     break;
29527 7ACC           EB           0E            jmp .297
29528                                           !BCC_EOS
29529                                           ! 4049    }
29530                                           ! 4050  return line;
29531                       00007ACE            .29B:
29532                       00007ACE            .298:
29533                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29534 7ACE           8A46         FF            mov	al,-1[bp]
29535 7AD1           40                         inc	ax
29536 7AD2           8846         FF            mov	-1[bp],al
29537                       00007AD5            .299:
29538                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29539 7AD5           8A46         FF            mov	al,-1[bp]
29540 7AD8           3C                     0F  cmp	al,*$F
29541 7ADA           76           D6            jbe	.29A
29542                       00007ADC            .29D:
29543                       00007ADC            .297:
29544 7ADC           8A46         FE            mov	al,-2[bp]
29545 7ADF           89EC                       mov	sp,bp
29546 7AE1           5D                         pop	bp
29547 7AE2           C3                         ret
29548                                           !BCC_EOS
29549                                           ! 4051 }
29550                                           ! 4052 static void memsetb(seg,offset,value,count)
29551                                           ! Register BX used in function find_vga_entry
29552                                           ! 4053   Bit16u seg;
29553                       00007AE3            _memsetb:
29554                                           !BCC_EOS
29555                                           ! 4054   Bit16u offset;
29556                                           !BCC_EOS
29557                                           ! 4055   Bit16u value;
29558                                           !BCC_EOS
29559                                           ! 4056   Bit16u count;
29560                                           !BCC_EOS
29561                                           ! 4057 {
29562                                           ! 4058 #asm
29563                                           !BCC_ASM
29564                       00000008            _memsetb.count	set	8
29565                       00000002            _memsetb.seg	set	2
29566                       00000006            _memsetb.value	set	6
29567                       00000004            _memsetb.offset	set	4
29568 7AE3           55                           push bp
29569 7AE4           89E5                         mov bp, sp
29570 7AE6           50                             push ax
29571 7AE7           51                             push cx
29572 7AE8           06                             push es
29573 7AE9           57                             push di
29574 7AEA           8B4E         0A                mov cx, 10[bp] ; count
29575 7AED           83F9                   00      cmp cx, #0x00
29576 7AF0           74           10                je memsetb_end
29577 7AF2           8B46         04                mov ax, 4[bp] ; segment
29578 7AF5           8EC0                           mov es, ax
29579 7AF7           8B46         06                mov ax, 6[bp] ; offset
29580 7AFA           89C7                           mov di, ax
29581 7AFC           8A46         08                mov al, 8[bp] ; value
29582 7AFF           FC                             cld
29583 7B00           F3                             rep
29584 7B01           AA                              stosb
29585                       00007B02            memsetb_end:
29586 7B02           5F                             pop di
29587 7B03           07                             pop es
29588 7B04           59                             pop cx
29589 7B05           58                             pop ax
29590 7B06           5D                           pop bp
29591                                           ! 4082 endasm
29592                                           !BCC_ENDASM
29593                                           ! 4083 }
29594 7B07           C3                         ret
29595                                           ! 4084 static void memsetw(seg,offset,value,count)
29596                                           ! 4085   Bit16u seg;
29597                       00007B08            _memsetw:
29598                                           !BCC_EOS
29599                                           ! 4086   Bit16u offset;
29600                                           !BCC_EOS
29601                                           ! 4087   Bit16u value;
29602                                           !BCC_EOS
29603                                           ! 4088   Bit16u count;
29604                                           !BCC_EOS
29605                                           ! 4089 {
29606                                           ! 4090 #asm
29607                                           !BCC_ASM
29608                       00000008            _memsetw.count	set	8
29609                       00000002            _memsetw.seg	set	2
29610                       00000006            _memsetw.value	set	6
29611                       00000004            _memsetw.offset	set	4
29612 7B08           55                           push bp
29613 7B09           89E5                         mov bp, sp
29614 7B0B           50                             push ax
29615 7B0C           51                             push cx
29616 7B0D           06                             push es
29617 7B0E           57                             push di
29618 7B0F           8B4E         0A                mov cx, 10[bp] ; count
29619 7B12           83F9                   00      cmp cx, #0x00
29620 7B15           74           10                je memsetw_end
29621 7B17           8B46         04                mov ax, 4[bp] ; segment
29622 7B1A           8EC0                           mov es, ax
29623 7B1C           8B46         06                mov ax, 6[bp] ; offset
29624 7B1F           89C7                           mov di, ax
29625 7B21           8B46         08                mov ax, 8[bp] ; value
29626 7B24           FC                             cld
29627 7B25           F3                             rep
29628 7B26           AB                              stosw
29629                       00007B27            memsetw_end:
29630 7B27           5F                             pop di
29631 7B28           07                             pop es
29632 7B29           59                             pop cx
29633 7B2A           58                             pop ax
29634 7B2B           5D                           pop bp
29635                                           ! 4114 endasm
29636                                           !BCC_ENDASM
29637                                           ! 4115 }
29638 7B2C           C3                         ret
29639                                           ! 4116 static void memcpyb(dseg,doffset,sseg,soffset,count)
29640                                           ! 4117   Bit16u dseg;
29641                       00007B2D            _memcpyb:
29642                                           !BCC_EOS
29643                                           ! 4118   Bit16u doffset;
29644                                           !BCC_EOS
29645                                           ! 4119   Bit16u sseg;
29646                                           !BCC_EOS
29647                                           ! 4120   Bit16u soffset;
29648                                           !BCC_EOS
29649                                           ! 4121   Bit16u count;
29650                                           !BCC_EOS
29651                                           ! 4122 {
29652                                           ! 4123 #asm
29653                                           !BCC_ASM
29654                       0000000A            _memcpyb.count	set	$A
29655                       00000006            _memcpyb.sseg	set	6
29656                       00000008            _memcpyb.soffset	set	8
29657                       00000002            _memcpyb.dseg	set	2
29658                       00000004            _memcpyb.doffset	set	4
29659 7B2D           55                           push bp
29660 7B2E           89E5                         mov bp, sp
29661 7B30           50                             push ax
29662 7B31           51                             push cx
29663 7B32           06                             push es
29664 7B33           57                             push di
29665 7B34           1E                             push ds
29666 7B35           56                             push si
29667 7B36           8B4E         0C                mov cx, 12[bp] ; count
29668 7B39           83F9                   00      cmp cx, #0x0000
29669 7B3C           74           17                je memcpyb_end
29670 7B3E           8B46         04                mov ax, 4[bp] ; dsegment
29671 7B41           8EC0                           mov es, ax
29672 7B43           8B46         06                mov ax, 6[bp] ; doffset
29673 7B46           89C7                           mov di, ax
29674 7B48           8B46         08                mov ax, 8[bp] ; ssegment
29675 7B4B           8ED8                           mov ds, ax
29676 7B4D           8B46         0A                mov ax, 10[bp] ; soffset
29677 7B50           89C6                           mov si, ax
29678 7B52           FC                             cld
29679 7B53           F3                             rep
29680 7B54           A4                              movsb
29681                       00007B55            memcpyb_end:
29682 7B55           5E                             pop si
29683 7B56           1F                             pop ds
29684 7B57           5F                             pop di
29685 7B58           07                             pop es
29686 7B59           59                             pop cx
29687 7B5A           58                             pop ax
29688 7B5B           5D                           pop bp
29689                                           ! 4154 endasm
29690                                           !BCC_ENDASM
29691                                           ! 4155 }
29692 7B5C           C3                         ret
29693                                           ! 4156 static void memcpyw(dseg,doffset,sseg,soffset,count)
29694                                           ! 4157   Bit16u dseg;
29695                       00007B5D            _memcpyw:
29696                                           !BCC_EOS
29697                                           ! 4158   Bit16u doffset;
29698                                           !BCC_EOS
29699                                           ! 4159   Bit16u sseg;
29700                                           !BCC_EOS
29701                                           ! 4160   Bit16u soffset;
29702                                           !BCC_EOS
29703                                           ! 4161   Bit16u count;
29704                                           !BCC_EOS
29705                                           ! 4162 {
29706                                           ! 4163 #asm
29707                                           !BCC_ASM
29708                       0000000A            _memcpyw.count	set	$A
29709                       00000006            _memcpyw.sseg	set	6
29710                       00000008            _memcpyw.soffset	set	8
29711                       00000002            _memcpyw.dseg	set	2
29712                       00000004            _memcpyw.doffset	set	4
29713 7B5D           55                           push bp
29714 7B5E           89E5                         mov bp, sp
29715 7B60           50                             push ax
29716 7B61           51                             push cx
29717 7B62           06                             push es
29718 7B63           57                             push di
29719 7B64           1E                             push ds
29720 7B65           56                             push si
29721 7B66           8B4E         0C                mov cx, 12[bp] ; count
29722 7B69           83F9                   00      cmp cx, #0x0000
29723 7B6C           74           17                je memcpyw_end
29724 7B6E           8B46         04                mov ax, 4[bp] ; dsegment
29725 7B71           8EC0                           mov es, ax
29726 7B73           8B46         06                mov ax, 6[bp] ; doffset
29727 7B76           89C7                           mov di, ax
29728 7B78           8B46         08                mov ax, 8[bp] ; ssegment
29729 7B7B           8ED8                           mov ds, ax
29730 7B7D           8B46         0A                mov ax, 10[bp] ; soffset
29731 7B80           89C6                           mov si, ax
29732 7B82           FC                             cld
29733 7B83           F3                             rep
29734 7B84           A5                              movsw
29735                       00007B85            memcpyw_end:
29736 7B85           5E                             pop si
29737 7B86           1F                             pop ds
29738 7B87           5F                             pop di
29739 7B88           07                             pop es
29740 7B89           59                             pop cx
29741 7B8A           58                             pop ax
29742 7B8B           5D                           pop bp
29743                                           ! 4194 endasm
29744                                           !BCC_ENDASM
29745                                           ! 4195 }
29746 7B8C           C3                         ret
29747                                           ! 4196 static Bit8u
29748                                           ! 4197 read_byte(seg, offset)
29749                                           ! 4198   Bit16u seg;
29750                       00007B8D            _read_byte:
29751                                           !BCC_EOS
29752                                           ! 4199   Bit16u offset;
29753                                           !BCC_EOS
29754                                           ! 4200 {
29755                                           ! 4201 #asm
29756                                           !BCC_ASM
29757                       00000002            _read_byte.seg	set	2
29758                       00000004            _read_byte.offset	set	4
29759 7B8D           55                           push bp
29760 7B8E           89E5                         mov bp, sp
29761 7B90           53                             push bx
29762 7B91           1E                             push ds
29763 7B92           8B46         04                mov ax, 4[bp] ; segment
29764 7B95           8ED8                           mov ds, ax
29765 7B97           8B5E         06                mov bx, 6[bp] ; offset
29766 7B9A           8A07                           mov al, [bx]
29767                                               ;; al = return value (byte)
29768 7B9C           1F                             pop ds
29769 7B9D           5B                             pop bx
29770 7B9E           5D                           pop bp
29771                                           ! 4214 endasm
29772                                           !BCC_ENDASM
29773                                           ! 4215 }
29774 7B9F           C3                         ret
29775                                           ! 4216 static Bit16u
29776                                           ! 4217 read_word(seg, offset)
29777                                           ! 4218   Bit16u seg;
29778                       00007BA0            _read_word:
29779                                           !BCC_EOS
29780                                           ! 4219   Bit16u offset;
29781                                           !BCC_EOS
29782                                           ! 4220 {
29783                                           ! 4221 #asm
29784                                           !BCC_ASM
29785                       00000002            _read_word.seg	set	2
29786                       00000004            _read_word.offset	set	4
29787 7BA0           55                           push bp
29788 7BA1           89E5                         mov bp, sp
29789 7BA3           53                             push bx
29790 7BA4           1E                             push ds
29791 7BA5           8B46         04                mov ax, 4[bp] ; segment
29792 7BA8           8ED8                           mov ds, ax
29793 7BAA           8B5E         06                mov bx, 6[bp] ; offset
29794 7BAD           8B07                           mov ax, [bx]
29795                                               ;; ax = return value (word)
29796 7BAF           1F                             pop ds
29797 7BB0           5B                             pop bx
29798 7BB1           5D                           pop bp
29799                                           ! 4234 endasm
29800                                           !BCC_ENDASM
29801                                           ! 4235 }
29802 7BB2           C3                         ret
29803                                           ! 4236 static void
29804                                           ! 4237 write_byte(seg, offset, data)
29805                                           ! 4238   Bit16u seg;
29806                       00007BB3            _write_byte:
29807                                           !BCC_EOS
29808                                           ! 4239   Bit16u offset;
29809                                           !BCC_EOS
29810                                           ! 4240   Bit8u data;
29811                                           !BCC_EOS
29812                                           ! 4241 {
29813                                           ! 4242 #asm
29814                                           !BCC_ASM
29815                       00000002            _write_byte.seg	set	2
29816                       00000006            _write_byte.data	set	6
29817                       00000004            _write_byte.offset	set	4
29818 7BB3           55                           push bp
29819 7BB4           89E5                         mov bp, sp
29820 7BB6           50                             push ax
29821 7BB7           53                             push bx
29822 7BB8           1E                             push ds
29823 7BB9           8B46         04                mov ax, 4[bp] ; segment
29824 7BBC           8ED8                           mov ds, ax
29825 7BBE           8B5E         06                mov bx, 6[bp] ; offset
29826 7BC1           8A46         08                mov al, 8[bp] ; data byte
29827 7BC4           8807                           mov [bx], al ; write data byte
29828 7BC6           1F                             pop ds
29829 7BC7           5B                             pop bx
29830 7BC8           58                             pop ax
29831 7BC9           5D                           pop bp
29832                                           ! 4257 endasm
29833                                           !BCC_ENDASM
29834                                           ! 4258 }
29835 7BCA           C3                         ret
29836                                           ! 4259 static void
29837                                           ! 4260 write_word(seg, offset, data)
29838                                           ! 4261   Bit16u seg;
29839                       00007BCB            _write_word:
29840                                           !BCC_EOS
29841                                           ! 4262   Bit16u offset;
29842                                           !BCC_EOS
29843                                           ! 4263   Bit16u data;
29844                                           !BCC_EOS
29845                                           ! 4264 {
29846                                           ! 4265 #asm
29847                                           !BCC_ASM
29848                       00000002            _write_word.seg	set	2
29849                       00000006            _write_word.data	set	6
29850                       00000004            _write_word.offset	set	4
29851 7BCB           55                           push bp
29852 7BCC           89E5                         mov bp, sp
29853 7BCE           50                             push ax
29854 7BCF           53                             push bx
29855 7BD0           1E                             push ds
29856 7BD1           8B46         04                mov ax, 4[bp] ; segment
29857 7BD4           8ED8                           mov ds, ax
29858 7BD6           8B5E         06                mov bx, 6[bp] ; offset
29859 7BD9           8B46         08                mov ax, 8[bp] ; data word
29860 7BDC           8907                           mov [bx], ax ; write data word
29861 7BDE           1F                             pop ds
29862 7BDF           5B                             pop bx
29863 7BE0           58                             pop ax
29864 7BE1           5D                           pop bp
29865                                           ! 4280 endasm
29866                                           !BCC_ENDASM
29867                                           ! 4281 }
29868 7BE2           C3                         ret
29869                                           ! 4282  Bit8u
29870                                           ! 4283 inb(port)
29871                                           ! 4284   Bit16u port;
29872                                           export	_inb
29873                       00007BE3            _inb:
29874                                           !BCC_EOS
29875                                           ! 4285 {
29876                                           ! 4286 #asm
29877                                           !BCC_ASM
29878                       00000002            _inb.port	set	2
29879 7BE3           55                           push bp
29880 7BE4           89E5                         mov bp, sp
29881 7BE6           52                             push dx
29882 7BE7           8B56         04                mov dx, 4[bp]
29883 7BEA           EC                             in al, dx
29884 7BEB           5A                             pop dx
29885 7BEC           5D                           pop bp
29886                                           ! 4294 endasm
29887                                           !BCC_ENDASM
29888                                           ! 4295 }
29889 7BED           C3                         ret
29890                                           ! 4296   Bit16u
29891                                           ! 4297 inw(port)
29892                                           ! 4298   Bit16u port;
29893                                           export	_inw
29894                       00007BEE            _inw:
29895                                           !BCC_EOS
29896                                           ! 4299 {
29897                                           ! 4300 #asm
29898                                           !BCC_ASM
29899                       00000002            _inw.port	set	2
29900 7BEE           55                           push bp
29901 7BEF           89E5                         mov bp, sp
29902 7BF1           52                             push dx
29903 7BF2           8B56         04                mov dx, 4[bp]
29904 7BF5           ED                             in ax, dx
29905 7BF6           5A                             pop dx
29906 7BF7           5D                           pop bp
29907                                           ! 4308 endasm
29908                                           !BCC_ENDASM
29909                                           ! 4309 }
29910 7BF8           C3                         ret
29911                                           ! 4310   void
29912                                           ! 4311 outb(port, val)
29913                                           ! 4312   Bit16u port;
29914                                           export	_outb
29915                       00007BF9            _outb:
29916                                           !BCC_EOS
29917                                           ! 4313   Bit8u val;
29918                                           !BCC_EOS
29919                                           ! 4314 {
29920                                           ! 4315 #asm
29921                                           !BCC_ASM
29922                       00000004            _outb.val	set	4
29923                       00000002            _outb.port	set	2
29924 7BF9           55                           push bp
29925 7BFA           89E5                         mov bp, sp
29926 7BFC           50                             push ax
29927 7BFD           52                             push dx
29928 7BFE           8B56         04                mov dx, 4[bp]
29929 7C01           8A46         06                mov al, 6[bp]
29930 7C04           EE                             out dx, al
29931 7C05           5A                             pop dx
29932 7C06           58                             pop ax
29933 7C07           5D                           pop bp
29934                                           ! 4326 endasm
29935                                           !BCC_ENDASM
29936                                           ! 4327 }
29937 7C08           C3                         ret
29938                                           ! 4328   void
29939                                           ! 4329 outw(port, val)
29940                                           ! 4330   Bit16u port;
29941                                           export	_outw
29942                       00007C09            _outw:
29943                                           !BCC_EOS
29944                                           ! 4331   Bit16u val;
29945                                           !BCC_EOS
29946                                           ! 4332 {
29947                                           ! 4333 #asm
29948                                           !BCC_ASM
29949                       00000004            _outw.val	set	4
29950                       00000002            _outw.port	set	2
29951 7C09           55                           push bp
29952 7C0A           89E5                         mov bp, sp
29953 7C0C           50                             push ax
29954 7C0D           52                             push dx
29955 7C0E           8B56         04                mov dx, 4[bp]
29956 7C11           8B46         06                mov ax, 6[bp]
29957 7C14           EF                             out dx, ax
29958 7C15           5A                             pop dx
29959 7C16           58                             pop ax
29960 7C17           5D                           pop bp
29961                                           ! 4344 endasm
29962                                           !BCC_ENDASM
29963                                           ! 4345 }
29964 7C18           C3                         ret
29965                                           ! 4346 Bit16u get_SS()
29966                                           ! 4347 {
29967                                           export	_get_SS
29968                       00007C19            _get_SS:
29969                                           ! 4348 #asm
29970                                           !BCC_ASM
29971 7C19           8CD0                         mov ax, ss
29972                                           ! 4350 endasm
29973                                           !BCC_ENDASM
29974                                           ! 4351 }
29975 7C1B           C3                         ret
29976                                           ! 4352 void printf(s)
29977                                           ! 4353   Bit8u *s;
29978                                           export	_printf
29979                       00007C1C            _printf:
29980                                           !BCC_EOS
29981                                           ! 4354 {
29982                                           ! 4355   Bit8u c, format_char;
29983                                           !BCC_EOS
29984                                           ! 4356   Boolean in_format;
29985                                           !BCC_EOS
29986                                           ! 4357   unsigned format_width, i;
29987                                           !BCC_EOS
29988                                           ! 4358   Bit16u *arg_ptr;
29989                                           !BCC_EOS
29990                                           ! 4359   Bit16u arg_seg, arg, digit, nibble, shift_count;
29991                                           !BCC_EOS
29992                                           ! 4360   arg_ptr = &s;
29993 7C1C           55                         push	bp
29994 7C1D           89E5                       mov	bp,sp
29995 7C1F           83C4                   EC  add	sp,*-$14
29996                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29997 7C22           8D5E         04            lea	bx,4[bp]
29998 7C25           895E         F6            mov	-$A[bp],bx
29999                                           !BCC_EOS
30000                                           ! 4361   arg_seg = get_SS();
30001                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30002 7C28           E8         FFEE            call	_get_SS
30003                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30004 7C2B           8946         F4            mov	-$C[bp],ax
30005                                           !BCC_EOS
30006                                           ! 4362   in_format = 0;
30007                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30008 7C2E           31C0                       xor	ax,ax
30009 7C30           8946         FC            mov	-4[bp],ax
30010                                           !BCC_EOS
30011                                           ! 4363   format_width = 0;
30012                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30013 7C33           31C0                       xor	ax,ax
30014 7C35           8946         FA            mov	-6[bp],ax
30015                                           !BCC_EOS
30016                                           ! 4364   while (c = read_byte(0xc000, s)) {
30017 7C38           E9         0106            br 	.29F
30018                       00007C3B            .2A0:
30019                                           ! 4365     if ( c == '%' ) {
30020                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30021 7C3B           8A46         FF            mov	al,-1[bp]
30022 7C3E           3C                     25  cmp	al,*$25
30023 7C40         0F85         000E            bne 	.2A1
30024                       00007C44            .2A2:
30025                                           ! 4366       in_format = 1;
30026                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30027 7C44           B8                   0001  mov	ax,*1
30028 7C47           8946         FC            mov	-4[bp],ax
30029                                           !BCC_EOS
30030                                           ! 4367       format_width = 0;
30031                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30032 7C4A           31C0                       xor	ax,ax
30033 7C4C           8946         FA            mov	-6[bp],ax
30034                                           !BCC_EOS
30035                                           ! 4368       }
30036                                           ! 4369     else if (in_format) {
30037 7C4F           E9         00E8            br 	.2A3
30038                       00007C52            .2A1:
30039 7C52           8B46         FC            mov	ax,-4[bp]
30040 7C55           85C0                       test	ax,ax
30041 7C57         0F84         00CF            beq 	.2A4
30042                       00007C5B            .2A5:
30043                                           ! 4370       if ( (c>='0') && (c<='9') ) {
30044                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30045 7C5B           8A46         FF            mov	al,-1[bp]
30046 7C5E           3C                     30  cmp	al,*$30
30047 7C60           72           28            jb  	.2A6
30048                       00007C62            .2A8:
30049                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30050 7C62           8A46         FF            mov	al,-1[bp]
30051 7C65           3C                     39  cmp	al,*$39
30052 7C67           77           21            ja  	.2A6
30053                       00007C69            .2A7:
30054                                           ! 4371         format_width = (format_width * 10) + (c - '0');
30055                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30056 7C69           8A46         FF            mov	al,-1[bp]
30057 7C6C           30E4                       xor	ah,ah
30058 7C6E           05                   FFD0  add	ax,*-$30
30059 7C71           50                         push	ax
30060                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30061 7C72           8B46         FA            mov	ax,-6[bp]
30062 7C75           89C2                       mov	dx,ax
30063 7C77           D1E0                       shl	ax,*1
30064 7C79           D1E0                       shl	ax,*1
30065 7C7B           01D0                       add	ax,dx
30066 7C7D           D1E0                       shl	ax,*1
30067                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30068 7C7F           0346         EA            add	ax,-$16[bp]
30069 7C82           44                         inc	sp
30070 7C83           44                         inc	sp
30071                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30072 7C84           8946         FA            mov	-6[bp],ax
30073                                           !BCC_EOS
30074                                           ! 4372         }
30075                                           ! 4373       else if (c == 'x') {
30076 7C87           E9         009E            br 	.2A9
30077                       00007C8A            .2A6:
30078                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30079 7C8A           8A46         FF            mov	al,-1[bp]
30080 7C8D           3C                     78  cmp	al,*$78
30081 7C8F         0F85         0095            bne 	.2AA
30082                       00007C93            .2AB:
30083                                           ! 4374         arg_ptr++;
30084                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30085 7C93           8B5E         F6            mov	bx,-$A[bp]
30086 7C96           43                         inc	bx
30087 7C97           43                         inc	bx
30088 7C98           895E         F6            mov	-$A[bp],bx
30089                                           !BCC_EOS
30090                                           ! 4375         arg = read_word(arg_seg, arg_ptr);
30091                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30092 7C9B           FF76         F6            push	-$A[bp]
30093                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30094 7C9E           FF76         F4            push	-$C[bp]
30095                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30096 7CA1           E8         FEFC            call	_read_word
30097 7CA4           83C4                   04  add	sp,*4
30098                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30099 7CA7           8946         F2            mov	-$E[bp],ax
30100                                           !BCC_EOS
30101                                           ! 4376         if (format_width == 0)
30102                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30103 7CAA           8B46         FA            mov	ax,-6[bp]
30104 7CAD           85C0                       test	ax,ax
30105 7CAF           75           06            jne 	.2AC
30106                       00007CB1            .2AD:
30107                                           ! 4377           format_width = 4;
30108                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30109 7CB1           B8                   0004  mov	ax,*4
30110 7CB4           8946         FA            mov	-6[bp],ax
30111                                           !BCC_EOS
30112                                           ! 4378         i = 0;
30113                       00007CB7            .2AC:
30114                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30115 7CB7           31C0                       xor	ax,ax
30116 7CB9           8946         F8            mov	-8[bp],ax
30117                                           !BCC_EOS
30118                                           ! 4379         digit = format_width - 1;
30119                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30120 7CBC           8B46         FA            mov	ax,-6[bp]
30121                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30122 7CBF           48                         dec	ax
30123 7CC0           8946         F0            mov	-$10[bp],ax
30124                                           !BCC_EOS
30125                                           ! 4380         for (i=0; i<format_width; i++) {
30126                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30127 7CC3           31C0                       xor	ax,ax
30128 7CC5           8946         F8            mov	-8[bp],ax
30129                                           !BCC_EOS
30130                                           !BCC_EOS
30131 7CC8           EB           51            jmp .2B0
30132                       00007CCA            .2B1:
30133                                           ! 4381           nibble = (arg >> (4 * digit)) & 0x000f;
30134                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30135                                           ! Debug: expression subtree swapping
30136 7CCA           8B46         F0            mov	ax,-$10[bp]
30137 7CCD           D1E0                       shl	ax,*1
30138 7CCF           D1E0                       shl	ax,*1
30139                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30140 7CD1           89C3                       mov	bx,ax
30141 7CD3           8B46         F2            mov	ax,-$E[bp]
30142 7CD6           89D9                       mov	cx,bx
30143 7CD8           D3E8                       shr	ax,cl
30144                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30145 7CDA           24                     0F  and	al,*$F
30146                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30147 7CDC           30E4                       xor	ah,ah
30148 7CDE           8946         EE            mov	-$12[bp],ax
30149                                           !BCC_EOS
30150                                           ! 4382           if (nibble <= 9)
30151                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30152 7CE1           8B46         EE            mov	ax,-$12[bp]
30153 7CE4           3D                   0009  cmp	ax,*9
30154 7CE7           77           13            ja  	.2B2
30155                       00007CE9            .2B3:
30156                                           ! 4383             outb(0xe9, nibble + '0');
30157                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30158 7CE9           8B46         EE            mov	ax,-$12[bp]
30159                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30160 7CEC           05                   0030  add	ax,*$30
30161 7CEF           50                         push	ax
30162                                           ! Debug: list int = const $E9 (used reg = )
30163 7CF0           B8                   00E9  mov	ax,#$E9
30164 7CF3           50                         push	ax
30165                                           ! Debug: func () void = outb+0 (used reg = )
30166 7CF4           E8         FF02            call	_outb
30167 7CF7           83C4                   04  add	sp,*4
30168                                           !BCC_EOS
30169                                           ! 4384           else
30170                                           ! 4385             outb(0xe9, (nibble - 10) + 'A');
30171 7CFA           EB           11            jmp .2B4
30172                       00007CFC            .2B2:
30173                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30174 7CFC           8B46         EE            mov	ax,-$12[bp]
30175                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30176                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30177 7CFF           05                   0037  add	ax,*$37
30178 7D02           50                         push	ax
30179                                           ! Debug: list int = const $E9 (used reg = )
30180 7D03           B8                   00E9  mov	ax,#$E9
30181 7D06           50                         push	ax
30182                                           ! Debug: func () void = outb+0 (used reg = )
30183 7D07           E8         FEEF            call	_outb
30184 7D0A           83C4                   04  add	sp,*4
30185                                           !BCC_EOS
30186                                           ! 4386           digit--;
30187                       00007D0D            .2B4:
30188                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30189 7D0D           8B46         F0            mov	ax,-$10[bp]
30190 7D10           48                         dec	ax
30191 7D11           8946         F0            mov	-$10[bp],ax
30192                                           !BCC_EOS
30193                                           ! 4387           }
30194                                           ! 4388         in_format = 0;
30195                       00007D14            .2AF:
30196                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30197 7D14           8B46         F8            mov	ax,-8[bp]
30198 7D17           40                         inc	ax
30199 7D18           8946         F8            mov	-8[bp],ax
30200                       00007D1B            .2B0:
30201                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30202 7D1B           8B46         F8            mov	ax,-8[bp]
30203 7D1E           3B46         FA            cmp	ax,-6[bp]
30204 7D21           72           A7            jb 	.2B1
30205                       00007D23            .2B5:
30206                       00007D23            .2AE:
30207                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30208 7D23           31C0                       xor	ax,ax
30209 7D25           8946         FC            mov	-4[bp],ax
30210                                           !BCC_EOS
30211                                           ! 4389         }
30212                                           ! 4390       }
30213                       00007D28            .2AA:
30214                       00007D28            .2A9:
30215                                           ! 4391     else {
30216 7D28           EB           10            jmp .2B6
30217                       00007D2A            .2A4:
30218                                           ! 4392       outb(0xe9, c);
30219                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30220 7D2A           8A46         FF            mov	al,-1[bp]
30221 7D2D           30E4                       xor	ah,ah
30222 7D2F           50                         push	ax
30223                                           ! Debug: list int = const $E9 (used reg = )
30224 7D30           B8                   00E9  mov	ax,#$E9
30225 7D33           50                         push	ax
30226                                           ! Debug: func () void = outb+0 (used reg = )
30227 7D34           E8         FEC2            call	_outb
30228 7D37           83C4                   04  add	sp,*4
30229                                           !BCC_EOS
30230                                           ! 4393       }
30231                                           ! 4394     s ++;
30232                       00007D3A            .2B6:
30233                       00007D3A            .2A3:
30234                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30235 7D3A           8B5E         04            mov	bx,4[bp]
30236 7D3D           43                         inc	bx
30237 7D3E           895E         04            mov	4[bp],bx
30238                                           !BCC_EOS
30239                                           ! 4395     }
30240                                           ! 4396 }
30241                       00007D41            .29F:
30242                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30243 7D41           FF76         04            push	4[bp]
30244                                           ! Debug: list unsigned int = const $C000 (used reg = )
30245 7D44           B8                   C000  mov	ax,#$C000
30246 7D47           50                         push	ax
30247                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30248 7D48           E8         FE42            call	_read_byte
30249 7D4B           83C4                   04  add	sp,*4
30250                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30251 7D4E           8846         FF            mov	-1[bp],al
30252 7D51           84C0                       test	al,al
30253 7D53         0F85         FEE4            bne 	.2A0
30254                       00007D57            .2B7:
30255                       00007D57            .29E:
30256 7D57           89EC                       mov	sp,bp
30257 7D59           5D                         pop	bp
30258 7D5A           C3                         ret
30259                                           ! 4397 static ModeInfoListItem mode_info_list[]=
30260                                           ! Register BX used in function printf
30261                                           ! 4398 {
30262                                           
30263                       00007D5B            _mode_info_list:
30264                                           ! 4399 { 0x0100,
30265 7D5B                      0100            .word	$100
30266                                           ! 4400 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30267 7D5D                      009B            .word	$9B
30268                                           ! 4401                           0x01 |
30269                                           ! 4401  0x02 | 0x04,
30270 7D5F                        07            .byte	7
30271                                           ! 4402                           0,
30272 7D60                        00            .byte	0
30273                                           ! 4403                           64,
30274 7D61                      0040            .word	$40
30275                                           ! 4404                    64,
30276 7D63                      0040            .word	$40
30277                                           ! 4405                        0xA000,
30278 7D65                      A000            .word	$A000
30279                                           ! 4406                        0x0000,
30280 7D67                      0000            .word	0
30281                                           ! 4407                       0,
30282 7D69                      0000            .word	0
30283 7D6B                      0000            .word	0
30284                                           ! 4408                             640,
30285 7D6D                      0280            .word	$280
30286                                           ! 4409                        640,
30287 7D6F                      0280            .word	$280
30288                                           ! 4410                        400,
30289 7D71                      0190            .word	$190
30290                                           ! 4411                      8,
30291 7D73                        08            .byte	8
30292                                           ! 4412                      16,
30293 7D74                        10            .byte	$10
30294                                           ! 4413                           1,
30295 7D75                        01            .byte	1
30296                                           ! 4414                         8,
30297 7D76                        08            .byte	8
30298                                           ! 4415                          4,
30299 7D77                        04            .byte	4
30300                                           ! 4416                        0x04,
30301 7D78                        04            .byte	4
30302                                           ! 4417                     0,
30303 7D79                        00            .byte	0
30304                                           ! 4418                               64,
30305 7D7A                        40            .byte	$40
30306                                           ! 4419                          0,
30307 7D7B                        00            .byte	0
30308                                           ! 4420                        0,
30309 7D7C                        00            .byte	0
30310                                           ! 4421                             0,
30311 7D7D                        00            .byte	0
30312                                           ! 4422                          0,
30313 7D7E                        00            .byte	0
30314                                           ! 4423                               0,
30315 7D7F                        00            .byte	0
30316                                           ! 4424                         0,
30317 7D80                        00            .byte	0
30318                                           ! 4425                              0,
30319 7D81                        00            .byte	0
30320                                           ! 4426                         0,
30321 7D82                        00            .byte	0
30322                                           ! 4427                              0,
30323 7D83                        00            .byte	0
30324                                           ! 4428                                0,
30325 7D84                        00            .byte	0
30326                                           ! 4429                        0xE0000000,
30327 7D85                      0000            .word	0
30328 7D87                      E000            .word	$E000
30329                                           ! 4430                               0,
30330 7D89                      0000            .word	0
30331 7D8B                      0000            .word	0
30332                                           ! 4431                             0,
30333 7D8D                      0000            .word	0
30334                                           ! 4432                                640,
30335 7D8F                      0280            .word	$280
30336                                           ! 4433                             0,
30337 7D91                        00            .byte	0
30338                                           ! 4434                             0,
30339 7D92                        00            .byte	0
30340                                           ! 4435                           0,
30341 7D93                        00            .byte	0
30342                                           ! 4436                                0,
30343 7D94                        00            .byte	0
30344                                           ! 4437                             0,
30345 7D95                        00            .byte	0
30346                                           ! 4438                                  0,
30347 7D96                        00            .byte	0
30348                                           ! 4439                            0,
30349 7D97                        00            .byte	0
30350                                           ! 4440                                 0,
30351 7D98                        00            .byte	0
30352                                           ! 4441                            0,
30353 7D99                        00            .byte	0
30354                                           ! 4442                                 0,
30355 7D9A                        00            .byte	0
30356                                           ! 4443                          0,
30357 7D9B                      0000            .word	0
30358 7D9D                      0000            .word	0
30359                                           ! 4444 } },
30360                                           ! 4445 { 0x0101,
30361 7D9F                      0101            .word	$101
30362                                           ! 4446 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30363 7DA1                      009B            .word	$9B
30364                                           ! 4447                           0x01 | 0x02 | 0x04,
30365 7DA3                        07            .byte	7
30366                                           ! 4448                           0,
30367 7DA4                        00            .byte	0
30368                                           ! 4449                           64,
30369 7DA5                      0040            .word	$40
30370                                           ! 4450                    64,
30371 7DA7                      0040            .word	$40
30372                                           ! 4451                        0xA000,
30373 7DA9                      A000            .word	$A000
30374                                           ! 4452                        0x0000,
30375 7DAB                      0000            .word	0
30376                                           ! 4453                       0,
30377 7DAD                      0000            .word	0
30378 7DAF                      0000            .word	0
30379                                           ! 4454                             640,
30380 7DB1                      0280            .word	$280
30381                                           ! 4455                        640,
30382 7DB3                      0280            .word	$280
30383                                           ! 4456                        480,
30384 7DB5                      01E0            .word	$1E0
30385                                           ! 4457                      8,
30386 7DB7                        08            .byte	8
30387                                           ! 4458                      16,
30388 7DB8                        10            .byte	$10
30389                                           ! 4459                           1,
30390 7DB9                        01            .byte	1
30391                                           ! 4460                         8,
30392 7DBA                        08            .byte	8
30393                                           ! 4461                          5,
30394 7DBB                        05            .byte	5
30395                                           ! 4462                        0x04,
30396 7DBC                        04            .byte	4
30397                                           ! 4463                     0,
30398 7DBD                        00            .byte	0
30399                                           ! 4464                               53,
30400 7DBE                        35            .byte	$35
30401                                           ! 4465                          0,
30402 7DBF                        00            .byte	0
30403                                           ! 4466                        0,
30404 7DC0                        00            .byte	0
30405                                           ! 4467                             0,
30406 7DC1                        00            .byte	0
30407                                           ! 4468                          0,
30408 7DC2                        00            .byte	0
30409                                           ! 4469                               0,
30410 7DC3                        00            .byte	0
30411                                           ! 4470                         0,
30412 7DC4                        00            .byte	0
30413                                           ! 4471                  
30414                                           ! 4471             0,
30415 7DC5                        00            .byte	0
30416                                           ! 4472                         0,
30417 7DC6                        00            .byte	0
30418                                           ! 4473                              0,
30419 7DC7                        00            .byte	0
30420                                           ! 4474                                0,
30421 7DC8                        00            .byte	0
30422                                           ! 4475                        0xE0000000,
30423 7DC9                      0000            .word	0
30424 7DCB                      E000            .word	$E000
30425                                           ! 4476                               0,
30426 7DCD                      0000            .word	0
30427 7DCF                      0000            .word	0
30428                                           ! 4477                             0,
30429 7DD1                      0000            .word	0
30430                                           ! 4478                                640,
30431 7DD3                      0280            .word	$280
30432                                           ! 4479                             0,
30433 7DD5                        00            .byte	0
30434                                           ! 4480                             0,
30435 7DD6                        00            .byte	0
30436                                           ! 4481                           0,
30437 7DD7                        00            .byte	0
30438                                           ! 4482                                0,
30439 7DD8                        00            .byte	0
30440                                           ! 4483                             0,
30441 7DD9                        00            .byte	0
30442                                           ! 4484                                  0,
30443 7DDA                        00            .byte	0
30444                                           ! 4485                            0,
30445 7DDB                        00            .byte	0
30446                                           ! 4486                                 0,
30447 7DDC                        00            .byte	0
30448                                           ! 4487                            0,
30449 7DDD                        00            .byte	0
30450                                           ! 4488                                 0,
30451 7DDE                        00            .byte	0
30452                                           ! 4489                          0,
30453 7DDF                      0000            .word	0
30454 7DE1                      0000            .word	0
30455                                           ! 4490 } },
30456                                           ! 4491 { 0x0102,
30457 7DE3                      0102            .word	$102
30458                                           ! 4492 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30459 7DE5                      001F            .word	$1F
30460                                           ! 4493                           0x01 | 0x02 | 0x04,
30461 7DE7                        07            .byte	7
30462                                           ! 4494                           0,
30463 7DE8                        00            .byte	0
30464                                           ! 4495                           64,
30465 7DE9                      0040            .word	$40
30466                                           ! 4496                    64,
30467 7DEB                      0040            .word	$40
30468                                           ! 4497                        0xA000,
30469 7DED                      A000            .word	$A000
30470                                           ! 4498                        0x0000,
30471 7DEF                      0000            .word	0
30472                                           ! 4499                       0,
30473 7DF1                      0000            .word	0
30474 7DF3                      0000            .word	0
30475                                           ! 4500                             100,
30476 7DF5                      0064            .word	$64
30477                                           ! 4501                        800,
30478 7DF7                      0320            .word	$320
30479                                           ! 4502                        600,
30480 7DF9                      0258            .word	$258
30481                                           ! 4503                      8,
30482 7DFB                        08            .byte	8
30483                                           ! 4504                      16,
30484 7DFC                        10            .byte	$10
30485                                           ! 4505                           4,
30486 7DFD                        04            .byte	4
30487                                           ! 4506                         4,
30488 7DFE                        04            .byte	4
30489                                           ! 4507                          1,
30490 7DFF                        01            .byte	1
30491                                           ! 4508                        0x03,
30492 7E00                        03            .byte	3
30493                                           ! 4509                     0,
30494 7E01                        00            .byte	0
30495                                           ! 4510                               68,
30496 7E02                        44            .byte	$44
30497                                           ! 4511                          0,
30498 7E03                        00            .byte	0
30499                                           ! 4512                        0,
30500 7E04                        00            .byte	0
30501                                           ! 4513                             0,
30502 7E05                        00            .byte	0
30503                                           ! 4514                          0,
30504 7E06                        00            .byte	0
30505                                           ! 4515                               0,
30506 7E07                        00            .byte	0
30507                                           ! 4516                         0,
30508 7E08                        00            .byte	0
30509                                           ! 4517                              0,
30510 7E09                        00            .byte	0
30511                                           ! 4518                         0,
30512 7E0A                        00            .byte	0
30513                                           ! 4519                              0,
30514 7E0B                        00            .byte	0
30515                                           ! 4520                                0,
30516 7E0C                        00            .byte	0
30517                                           ! 4521                        0,
30518 7E0D                      0000            .word	0
30519 7E0F                      0000            .word	0
30520                                           ! 4522                               0,
30521 7E11                      0000            .word	0
30522 7E13                      0000            .word	0
30523                                           ! 4523                             0,
30524 7E15                      0000            .word	0
30525                                           ! 4524                                100,
30526 7E17                      0064            .word	$64
30527                                           ! 4525                             0,
30528 7E19                        00            .byte	0
30529                                           ! 4526                             0,
30530 7E1A                        00            .byte	0
30531                                           ! 4527                           0,
30532 7E1B                        00            .byte	0
30533                                           ! 4528                                0,
30534 7E1C                        00            .byte	0
30535                                           ! 4529                             0,
30536 7E1D                        00            .byte	0
30537                                           ! 4530                                  0,
30538 7E1E                        00            .byte	0
30539                                           ! 4531                            0,
30540 7E1F                        00            .byte	0
30541                                           ! 4532                                 0,
30542 7E20                        00            .byte	0
30543                                           ! 4533                            0,
30544 7E21                        00            .byte	0
30545                                           ! 4534                                 0,
30546 7E22                        00            .byte	0
30547                                           ! 4535                          0,
30548 7E23                      0000            .word	0
30549 7E25                      0000            .word	0
30550                                           ! 4536 } },
30551                                           ! 4537 { 0x0103,
30552 7E27                      0103            .word	$103
30553                                           ! 4538 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30554 7E29                      009B            .word	$9B
30555                                           ! 4539                           0x01 | 0x0
30556                                           ! 4539 2 | 0x04,
30557 7E2B                        07            .byte	7
30558                                           ! 4540                           0,
30559 7E2C                        00            .byte	0
30560                                           ! 4541                           64,
30561 7E2D                      0040            .word	$40
30562                                           ! 4542                    64,
30563 7E2F                      0040            .word	$40
30564                                           ! 4543                        0xA000,
30565 7E31                      A000            .word	$A000
30566                                           ! 4544                        0x0000,
30567 7E33                      0000            .word	0
30568                                           ! 4545                       0,
30569 7E35                      0000            .word	0
30570 7E37                      0000            .word	0
30571                                           ! 4546                             800,
30572 7E39                      0320            .word	$320
30573                                           ! 4547                        800,
30574 7E3B                      0320            .word	$320
30575                                           ! 4548                        600,
30576 7E3D                      0258            .word	$258
30577                                           ! 4549                      8,
30578 7E3F                        08            .byte	8
30579                                           ! 4550                      16,
30580 7E40                        10            .byte	$10
30581                                           ! 4551                           1,
30582 7E41                        01            .byte	1
30583                                           ! 4552                         8,
30584 7E42                        08            .byte	8
30585                                           ! 4553                          8,
30586 7E43                        08            .byte	8
30587                                           ! 4554                        0x04,
30588 7E44                        04            .byte	4
30589                                           ! 4555                     0,
30590 7E45                        00            .byte	0
30591                                           ! 4556                               33,
30592 7E46                        21            .byte	$21
30593                                           ! 4557                          0,
30594 7E47                        00            .byte	0
30595                                           ! 4558                        0,
30596 7E48                        00            .byte	0
30597                                           ! 4559                             0,
30598 7E49                        00            .byte	0
30599                                           ! 4560                          0,
30600 7E4A                        00            .byte	0
30601                                           ! 4561                               0,
30602 7E4B                        00            .byte	0
30603                                           ! 4562                         0,
30604 7E4C                        00            .byte	0
30605                                           ! 4563                              0,
30606 7E4D                        00            .byte	0
30607                                           ! 4564                         0,
30608 7E4E                        00            .byte	0
30609                                           ! 4565                              0,
30610 7E4F                        00            .byte	0
30611                                           ! 4566                                0,
30612 7E50                        00            .byte	0
30613                                           ! 4567                        0xE0000000,
30614 7E51                      0000            .word	0
30615 7E53                      E000            .word	$E000
30616                                           ! 4568                               0,
30617 7E55                      0000            .word	0
30618 7E57                      0000            .word	0
30619                                           ! 4569                             0,
30620 7E59                      0000            .word	0
30621                                           ! 4570                                800,
30622 7E5B                      0320            .word	$320
30623                                           ! 4571                             0,
30624 7E5D                        00            .byte	0
30625                                           ! 4572                             0,
30626 7E5E                        00            .byte	0
30627                                           ! 4573                           0,
30628 7E5F                        00            .byte	0
30629                                           ! 4574                                0,
30630 7E60                        00            .byte	0
30631                                           ! 4575                             0,
30632 7E61                        00            .byte	0
30633                                           ! 4576                                  0,
30634 7E62                        00            .byte	0
30635                                           ! 4577                            0,
30636 7E63                        00            .byte	0
30637                                           ! 4578                                 0,
30638 7E64                        00            .byte	0
30639                                           ! 4579                            0,
30640 7E65                        00            .byte	0
30641                                           ! 4580                                 0,
30642 7E66                        00            .byte	0
30643                                           ! 4581                          0,
30644 7E67                      0000            .word	0
30645 7E69                      0000            .word	0
30646                                           ! 4582 } },
30647                                           ! 4583 { 0x0104,
30648 7E6B                      0104            .word	$104
30649                                           ! 4584 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30650 7E6D                      001F            .word	$1F
30651                                           ! 4585                           0x01 | 0x02 | 0x04,
30652 7E6F                        07            .byte	7
30653                                           ! 4586                           0,
30654 7E70                        00            .byte	0
30655                                           ! 4587                           64,
30656 7E71                      0040            .word	$40
30657                                           ! 4588                    64,
30658 7E73                      0040            .word	$40
30659                                           ! 4589                        0xA000,
30660 7E75                      A000            .word	$A000
30661                                           ! 4590                        0x0000,
30662 7E77                      0000            .word	0
30663                                           ! 4591                       0,
30664 7E79                      0000            .word	0
30665 7E7B                      0000            .word	0
30666                                           ! 4592                             128,
30667 7E7D                      0080            .word	$80
30668                                           ! 4593                        1024,
30669 7E7F                      0400            .word	$400
30670                                           ! 4594                        768,
30671 7E81                      0300            .word	$300
30672                                           ! 4595                      8,
30673 7E83                        08            .byte	8
30674                                           ! 4596                      16,
30675 7E84                        10            .byte	$10
30676                                           ! 4597                           4,
30677 7E85                        04            .byte	4
30678                                           ! 4598                         4,
30679 7E86                        04            .byte	4
30680                                           ! 4599                          2,
30681 7E87                        02            .byte	2
30682                                           ! 4600                        0x03,
30683 7E88                        03            .byte	3
30684                                           ! 4601                     0,
30685 7E89                        00            .byte	0
30686                                           ! 4602                               41,
30687 7E8A                        29            .byte	$29
30688                                           ! 4603                          0,
30689 7E8B                        00            .byte	0
30690                                           ! 4604                        0,
30691 7E8C                        00            .byte	0
30692                                           ! 4605                             0,
30693 7E8D                        00            .byte	0
30694                                           ! 4606                          0,
30695 7E8E                        00            .byte	0
30696                                           ! 4607                               0,
30697 7E8F                        00            .byte	0
30698                                           ! 4608                         0,
30699 7E90                        00            .byte	0
30700                                           ! 4609                     
30701                                           ! 4609          0,
30702 7E91                        00            .byte	0
30703                                           ! 4610                         0,
30704 7E92                        00            .byte	0
30705                                           ! 4611                              0,
30706 7E93                        00            .byte	0
30707                                           ! 4612                                0,
30708 7E94                        00            .byte	0
30709                                           ! 4613                        0,
30710 7E95                      0000            .word	0
30711 7E97                      0000            .word	0
30712                                           ! 4614                               0,
30713 7E99                      0000            .word	0
30714 7E9B                      0000            .word	0
30715                                           ! 4615                             0,
30716 7E9D                      0000            .word	0
30717                                           ! 4616                                128,
30718 7E9F                      0080            .word	$80
30719                                           ! 4617                             0,
30720 7EA1                        00            .byte	0
30721                                           ! 4618                             0,
30722 7EA2                        00            .byte	0
30723                                           ! 4619                           0,
30724 7EA3                        00            .byte	0
30725                                           ! 4620                                0,
30726 7EA4                        00            .byte	0
30727                                           ! 4621                             0,
30728 7EA5                        00            .byte	0
30729                                           ! 4622                                  0,
30730 7EA6                        00            .byte	0
30731                                           ! 4623                            0,
30732 7EA7                        00            .byte	0
30733                                           ! 4624                                 0,
30734 7EA8                        00            .byte	0
30735                                           ! 4625                            0,
30736 7EA9                        00            .byte	0
30737                                           ! 4626                                 0,
30738 7EAA                        00            .byte	0
30739                                           ! 4627                          0,
30740 7EAB                      0000            .word	0
30741 7EAD                      0000            .word	0
30742                                           ! 4628 } },
30743                                           ! 4629 { 0x0105,
30744 7EAF                      0105            .word	$105
30745                                           ! 4630 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30746 7EB1                      009B            .word	$9B
30747                                           ! 4631                           0x01 | 0x02 | 0x04,
30748 7EB3                        07            .byte	7
30749                                           ! 4632                           0,
30750 7EB4                        00            .byte	0
30751                                           ! 4633                           64,
30752 7EB5                      0040            .word	$40
30753                                           ! 4634                    64,
30754 7EB7                      0040            .word	$40
30755                                           ! 4635                        0xA000,
30756 7EB9                      A000            .word	$A000
30757                                           ! 4636                        0x0000,
30758 7EBB                      0000            .word	0
30759                                           ! 4637                       0,
30760 7EBD                      0000            .word	0
30761 7EBF                      0000            .word	0
30762                                           ! 4638                             1024,
30763 7EC1                      0400            .word	$400
30764                                           ! 4639                        1024,
30765 7EC3                      0400            .word	$400
30766                                           ! 4640                        768,
30767 7EC5                      0300            .word	$300
30768                                           ! 4641                      8,
30769 7EC7                        08            .byte	8
30770                                           ! 4642                      16,
30771 7EC8                        10            .byte	$10
30772                                           ! 4643                           1,
30773 7EC9                        01            .byte	1
30774                                           ! 4644                         8,
30775 7ECA                        08            .byte	8
30776                                           ! 4645                          12,
30777 7ECB                        0C            .byte	$C
30778                                           ! 4646                        0x04,
30779 7ECC                        04            .byte	4
30780                                           ! 4647                     0,
30781 7ECD                        00            .byte	0
30782                                           ! 4648                               20,
30783 7ECE                        14            .byte	$14
30784                                           ! 4649                          0,
30785 7ECF                        00            .byte	0
30786                                           ! 4650                        0,
30787 7ED0                        00            .byte	0
30788                                           ! 4651                             0,
30789 7ED1                        00            .byte	0
30790                                           ! 4652                          0,
30791 7ED2                        00            .byte	0
30792                                           ! 4653                               0,
30793 7ED3                        00            .byte	0
30794                                           ! 4654                         0,
30795 7ED4                        00            .byte	0
30796                                           ! 4655                              0,
30797 7ED5                        00            .byte	0
30798                                           ! 4656                         0,
30799 7ED6                        00            .byte	0
30800                                           ! 4657                              0,
30801 7ED7                        00            .byte	0
30802                                           ! 4658                                0,
30803 7ED8                        00            .byte	0
30804                                           ! 4659                        0xE0000000,
30805 7ED9                      0000            .word	0
30806 7EDB                      E000            .word	$E000
30807                                           ! 4660                               0,
30808 7EDD                      0000            .word	0
30809 7EDF                      0000            .word	0
30810                                           ! 4661                             0,
30811 7EE1                      0000            .word	0
30812                                           ! 4662                                1024,
30813 7EE3                      0400            .word	$400
30814                                           ! 4663                             0,
30815 7EE5                        00            .byte	0
30816                                           ! 4664                             0,
30817 7EE6                        00            .byte	0
30818                                           ! 4665                           0,
30819 7EE7                        00            .byte	0
30820                                           ! 4666                                0,
30821 7EE8                        00            .byte	0
30822                                           ! 4667                             0,
30823 7EE9                        00            .byte	0
30824                                           ! 4668                                  0,
30825 7EEA                        00            .byte	0
30826                                           ! 4669                            0,
30827 7EEB                        00            .byte	0
30828                                           ! 4670                                 0,
30829 7EEC                        00            .byte	0
30830                                           ! 4671                            0,
30831 7EED                        00            .byte	0
30832                                           ! 4672                                 0,
30833 7EEE                        00            .byte	0
30834                                           ! 4673                          0,
30835 7EEF                      0000            .word	0
30836 7EF1                      0000            .word	0
30837                                           ! 4674 } },
30838                                           ! 4675 { 0x0106,
30839 7EF3                      0106            .word	$106
30840                                           ! 4676 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30841 7EF5                      001F            .word	$1F
30842                                           ! 4677                           0x01 | 0x
30843                                           ! 4677 02 | 0x04,
30844 7EF7                        07            .byte	7
30845                                           ! 4678                           0,
30846 7EF8                        00            .byte	0
30847                                           ! 4679                           64,
30848 7EF9                      0040            .word	$40
30849                                           ! 4680                    64,
30850 7EFB                      0040            .word	$40
30851                                           ! 4681                        0xA000,
30852 7EFD                      A000            .word	$A000
30853                                           ! 4682                        0x0000,
30854 7EFF                      0000            .word	0
30855                                           ! 4683                       0,
30856 7F01                      0000            .word	0
30857 7F03                      0000            .word	0
30858                                           ! 4684                             160,
30859 7F05                      00A0            .word	$A0
30860                                           ! 4685                        1280,
30861 7F07                      0500            .word	$500
30862                                           ! 4686                        1024,
30863 7F09                      0400            .word	$400
30864                                           ! 4687                      8,
30865 7F0B                        08            .byte	8
30866                                           ! 4688                      16,
30867 7F0C                        10            .byte	$10
30868                                           ! 4689                           4,
30869 7F0D                        04            .byte	4
30870                                           ! 4690                         4,
30871 7F0E                        04            .byte	4
30872                                           ! 4691                          3,
30873 7F0F                        03            .byte	3
30874                                           ! 4692                        0x03,
30875 7F10                        03            .byte	3
30876                                           ! 4693                     0,
30877 7F11                        00            .byte	0
30878                                           ! 4694                               24,
30879 7F12                        18            .byte	$18
30880                                           ! 4695                          0,
30881 7F13                        00            .byte	0
30882                                           ! 4696                        0,
30883 7F14                        00            .byte	0
30884                                           ! 4697                             0,
30885 7F15                        00            .byte	0
30886                                           ! 4698                          0,
30887 7F16                        00            .byte	0
30888                                           ! 4699                               0,
30889 7F17                        00            .byte	0
30890                                           ! 4700                         0,
30891 7F18                        00            .byte	0
30892                                           ! 4701                              0,
30893 7F19                        00            .byte	0
30894                                           ! 4702                         0,
30895 7F1A                        00            .byte	0
30896                                           ! 4703                              0,
30897 7F1B                        00            .byte	0
30898                                           ! 4704                                0,
30899 7F1C                        00            .byte	0
30900                                           ! 4705                        0,
30901 7F1D                      0000            .word	0
30902 7F1F                      0000            .word	0
30903                                           ! 4706                               0,
30904 7F21                      0000            .word	0
30905 7F23                      0000            .word	0
30906                                           ! 4707                             0,
30907 7F25                      0000            .word	0
30908                                           ! 4708                                160,
30909 7F27                      00A0            .word	$A0
30910                                           ! 4709                             0,
30911 7F29                        00            .byte	0
30912                                           ! 4710                             0,
30913 7F2A                        00            .byte	0
30914                                           ! 4711                           0,
30915 7F2B                        00            .byte	0
30916                                           ! 4712                                0,
30917 7F2C                        00            .byte	0
30918                                           ! 4713                             0,
30919 7F2D                        00            .byte	0
30920                                           ! 4714                                  0,
30921 7F2E                        00            .byte	0
30922                                           ! 4715                            0,
30923 7F2F                        00            .byte	0
30924                                           ! 4716                                 0,
30925 7F30                        00            .byte	0
30926                                           ! 4717                            0,
30927 7F31                        00            .byte	0
30928                                           ! 4718                                 0,
30929 7F32                        00            .byte	0
30930                                           ! 4719                          0,
30931 7F33                      0000            .word	0
30932 7F35                      0000            .word	0
30933                                           ! 4720 } },
30934                                           ! 4721 { 0x0107,
30935 7F37                      0107            .word	$107
30936                                           ! 4722 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30937 7F39                      009B            .word	$9B
30938                                           ! 4723                           0x01 | 0x02 | 0x04,
30939 7F3B                        07            .byte	7
30940                                           ! 4724                           0,
30941 7F3C                        00            .byte	0
30942                                           ! 4725                           64,
30943 7F3D                      0040            .word	$40
30944                                           ! 4726                    64,
30945 7F3F                      0040            .word	$40
30946                                           ! 4727                        0xA000,
30947 7F41                      A000            .word	$A000
30948                                           ! 4728                        0x0000,
30949 7F43                      0000            .word	0
30950                                           ! 4729                       0,
30951 7F45                      0000            .word	0
30952 7F47                      0000            .word	0
30953                                           ! 4730                             1280,
30954 7F49                      0500            .word	$500
30955                                           ! 4731                        1280,
30956 7F4B                      0500            .word	$500
30957                                           ! 4732                        1024,
30958 7F4D                      0400            .word	$400
30959                                           ! 4733                      8,
30960 7F4F                        08            .byte	8
30961                                           ! 4734                      16,
30962 7F50                        10            .byte	$10
30963                                           ! 4735                           1,
30964 7F51                        01            .byte	1
30965                                           ! 4736                         8,
30966 7F52                        08            .byte	8
30967                                           ! 4737                          20,
30968 7F53                        14            .byte	$14
30969                                           ! 4738                        0x04,
30970 7F54                        04            .byte	4
30971                                           ! 4739                     0,
30972 7F55                        00            .byte	0
30973                                           ! 4740                               11,
30974 7F56                        0B            .byte	$B
30975                                           ! 4741                          0,
30976 7F57                        00            .byte	0
30977                                           ! 4742                        0,
30978 7F58                        00            .byte	0
30979                                           ! 4743                             0,
30980 7F59                        00            .byte	0
30981                                           ! 4744                          0,
30982 7F5A                        00            .byte	0
30983                                           ! 4745                               0,
30984 7F5B                        00            .byte	0
30985                                           ! 4746                         0,
30986 7F5C                        00            .byte	0
30987                                           ! 4747                        
30988                                           ! 4747       0,
30989 7F5D                        00            .byte	0
30990                                           ! 4748                         0,
30991 7F5E                        00            .byte	0
30992                                           ! 4749                              0,
30993 7F5F                        00            .byte	0
30994                                           ! 4750                                0,
30995 7F60                        00            .byte	0
30996                                           ! 4751                        0xE0000000,
30997 7F61                      0000            .word	0
30998 7F63                      E000            .word	$E000
30999                                           ! 4752                               0,
31000 7F65                      0000            .word	0
31001 7F67                      0000            .word	0
31002                                           ! 4753                             0,
31003 7F69                      0000            .word	0
31004                                           ! 4754                                1280,
31005 7F6B                      0500            .word	$500
31006                                           ! 4755                             0,
31007 7F6D                        00            .byte	0
31008                                           ! 4756                             0,
31009 7F6E                        00            .byte	0
31010                                           ! 4757                           0,
31011 7F6F                        00            .byte	0
31012                                           ! 4758                                0,
31013 7F70                        00            .byte	0
31014                                           ! 4759                             0,
31015 7F71                        00            .byte	0
31016                                           ! 4760                                  0,
31017 7F72                        00            .byte	0
31018                                           ! 4761                            0,
31019 7F73                        00            .byte	0
31020                                           ! 4762                                 0,
31021 7F74                        00            .byte	0
31022                                           ! 4763                            0,
31023 7F75                        00            .byte	0
31024                                           ! 4764                                 0,
31025 7F76                        00            .byte	0
31026                                           ! 4765                          0,
31027 7F77                      0000            .word	0
31028 7F79                      0000            .word	0
31029                                           ! 4766 } },
31030                                           ! 4767 { 0x010d,
31031 7F7B                      010D            .word	$10D
31032                                           ! 4768 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31033 7F7D                      009B            .word	$9B
31034                                           ! 4769                           0x01 | 0x02 | 0x04,
31035 7F7F                        07            .byte	7
31036                                           ! 4770                           0,
31037 7F80                        00            .byte	0
31038                                           ! 4771                           64,
31039 7F81                      0040            .word	$40
31040                                           ! 4772                    64,
31041 7F83                      0040            .word	$40
31042                                           ! 4773                        0xA000,
31043 7F85                      A000            .word	$A000
31044                                           ! 4774                        0x0000,
31045 7F87                      0000            .word	0
31046                                           ! 4775                       0,
31047 7F89                      0000            .word	0
31048 7F8B                      0000            .word	0
31049                                           ! 4776                             640,
31050 7F8D                      0280            .word	$280
31051                                           ! 4777                        320,
31052 7F8F                      0140            .word	$140
31053                                           ! 4778                        200,
31054 7F91                      00C8            .word	$C8
31055                                           ! 4779                      8,
31056 7F93                        08            .byte	8
31057                                           ! 4780                      16,
31058 7F94                        10            .byte	$10
31059                                           ! 4781                           1,
31060 7F95                        01            .byte	1
31061                                           ! 4782                         15,
31062 7F96                        0F            .byte	$F
31063                                           ! 4783                          2,
31064 7F97                        02            .byte	2
31065                                           ! 4784                        0x06,
31066 7F98                        06            .byte	6
31067                                           ! 4785                     0,
31068 7F99                        00            .byte	0
31069                                           ! 4786                               130,
31070 7F9A                        82            .byte	$82
31071                                           ! 4787                          0,
31072 7F9B                        00            .byte	0
31073                                           ! 4788                        5,
31074 7F9C                        05            .byte	5
31075                                           ! 4789                             10,
31076 7F9D                        0A            .byte	$A
31077                                           ! 4790                          5,
31078 7F9E                        05            .byte	5
31079                                           ! 4791                               5,
31080 7F9F                        05            .byte	5
31081                                           ! 4792                         5,
31082 7FA0                        05            .byte	5
31083                                           ! 4793                              0,
31084 7FA1                        00            .byte	0
31085                                           ! 4794                         1,
31086 7FA2                        01            .byte	1
31087                                           ! 4795                              15,
31088 7FA3                        0F            .byte	$F
31089                                           ! 4796                                0,
31090 7FA4                        00            .byte	0
31091                                           ! 4797                        0xE0000000,
31092 7FA5                      0000            .word	0
31093 7FA7                      E000            .word	$E000
31094                                           ! 4798                               0,
31095 7FA9                      0000            .word	0
31096 7FAB                      0000            .word	0
31097                                           ! 4799                             0,
31098 7FAD                      0000            .word	0
31099                                           ! 4800                                640,
31100 7FAF                      0280            .word	$280
31101                                           ! 4801                             0,
31102 7FB1                        00            .byte	0
31103                                           ! 4802                             0,
31104 7FB2                        00            .byte	0
31105                                           ! 4803                           5,
31106 7FB3                        05            .byte	5
31107                                           ! 4804                                10,
31108 7FB4                        0A            .byte	$A
31109                                           ! 4805                             5,
31110 7FB5                        05            .byte	5
31111                                           ! 4806                                  5,
31112 7FB6                        05            .byte	5
31113                                           ! 4807                            5,
31114 7FB7                        05            .byte	5
31115                                           ! 4808                                 0,
31116 7FB8                        00            .byte	0
31117                                           ! 4809                            1,
31118 7FB9                        01            .byte	1
31119                                           ! 4810                                 15,
31120 7FBA                        0F            .byte	$F
31121                                           ! 4811                          0,
31122 7FBB                      0000            .word	0
31123 7FBD                      0000            .word	0
31124                                           ! 4812 } },
31125                                           ! 4813 { 0x010e,
31126 7FBF                      010E            .word	$10E
31127                                           ! 4814 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31128 7FC1                      009B            .word	$9B
31129                                           ! 4815                           
31130                                           ! 4815 0x01 | 0x02 | 0x04,
31131 7FC3                        07            .byte	7
31132                                           ! 4816                           0,
31133 7FC4                        00            .byte	0
31134                                           ! 4817                           64,
31135 7FC5                      0040            .word	$40
31136                                           ! 4818                    64,
31137 7FC7                      0040            .word	$40
31138                                           ! 4819                        0xA000,
31139 7FC9                      A000            .word	$A000
31140                                           ! 4820                        0x0000,
31141 7FCB                      0000            .word	0
31142                                           ! 4821                       0,
31143 7FCD                      0000            .word	0
31144 7FCF                      0000            .word	0
31145                                           ! 4822                             640,
31146 7FD1                      0280            .word	$280
31147                                           ! 4823                        320,
31148 7FD3                      0140            .word	$140
31149                                           ! 4824                        200,
31150 7FD5                      00C8            .word	$C8
31151                                           ! 4825                      8,
31152 7FD7                        08            .byte	8
31153                                           ! 4826                      16,
31154 7FD8                        10            .byte	$10
31155                                           ! 4827                           1,
31156 7FD9                        01            .byte	1
31157                                           ! 4828                         16,
31158 7FDA                        10            .byte	$10
31159                                           ! 4829                          2,
31160 7FDB                        02            .byte	2
31161                                           ! 4830                        0x06,
31162 7FDC                        06            .byte	6
31163                                           ! 4831                     0,
31164 7FDD                        00            .byte	0
31165                                           ! 4832                               130,
31166 7FDE                        82            .byte	$82
31167                                           ! 4833                          0,
31168 7FDF                        00            .byte	0
31169                                           ! 4834                        5,
31170 7FE0                        05            .byte	5
31171                                           ! 4835                             11,
31172 7FE1                        0B            .byte	$B
31173                                           ! 4836                          6,
31174 7FE2                        06            .byte	6
31175                                           ! 4837                               5,
31176 7FE3                        05            .byte	5
31177                                           ! 4838                         5,
31178 7FE4                        05            .byte	5
31179                                           ! 4839                              0,
31180 7FE5                        00            .byte	0
31181                                           ! 4840                         0,
31182 7FE6                        00            .byte	0
31183                                           ! 4841                              0,
31184 7FE7                        00            .byte	0
31185                                           ! 4842                                0,
31186 7FE8                        00            .byte	0
31187                                           ! 4843                        0xE0000000,
31188 7FE9                      0000            .word	0
31189 7FEB                      E000            .word	$E000
31190                                           ! 4844                               0,
31191 7FED                      0000            .word	0
31192 7FEF                      0000            .word	0
31193                                           ! 4845                             0,
31194 7FF1                      0000            .word	0
31195                                           ! 4846                                640,
31196 7FF3                      0280            .word	$280
31197                                           ! 4847                             0,
31198 7FF5                        00            .byte	0
31199                                           ! 4848                             0,
31200 7FF6                        00            .byte	0
31201                                           ! 4849                           5,
31202 7FF7                        05            .byte	5
31203                                           ! 4850                                11,
31204 7FF8                        0B            .byte	$B
31205                                           ! 4851                             6,
31206 7FF9                        06            .byte	6
31207                                           ! 4852                                  5,
31208 7FFA                        05            .byte	5
31209                                           ! 4853                            5,
31210 7FFB                        05            .byte	5
31211                                           ! 4854                                 0,
31212 7FFC                        00            .byte	0
31213                                           ! 4855                            0,
31214 7FFD                        00            .byte	0
31215                                           ! 4856                                 0,
31216 7FFE                        00            .byte	0
31217                                           ! 4857                          0,
31218 7FFF                      0000            .word	0
31219 8001                      0000            .word	0
31220                                           ! 4858 } },
31221                                           ! 4859 { 0x010f,
31222 8003                      010F            .word	$10F
31223                                           ! 4860 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31224 8005                      009B            .word	$9B
31225                                           ! 4861                           0x01 | 0x02 | 0x04,
31226 8007                        07            .byte	7
31227                                           ! 4862                           0,
31228 8008                        00            .byte	0
31229                                           ! 4863                           64,
31230 8009                      0040            .word	$40
31231                                           ! 4864                    64,
31232 800B                      0040            .word	$40
31233                                           ! 4865                        0xA000,
31234 800D                      A000            .word	$A000
31235                                           ! 4866                        0x0000,
31236 800F                      0000            .word	0
31237                                           ! 4867                       0,
31238 8011                      0000            .word	0
31239 8013                      0000            .word	0
31240                                           ! 4868                             960,
31241 8015                      03C0            .word	$3C0
31242                                           ! 4869                        320,
31243 8017                      0140            .word	$140
31244                                           ! 4870                        200,
31245 8019                      00C8            .word	$C8
31246                                           ! 4871                      8,
31247 801B                        08            .byte	8
31248                                           ! 4872                      16,
31249 801C                        10            .byte	$10
31250                                           ! 4873                           1,
31251 801D                        01            .byte	1
31252                                           ! 4874                         24,
31253 801E                        18            .byte	$18
31254                                           ! 4875                          3,
31255 801F                        03            .byte	3
31256                                           ! 4876                        0x06,
31257 8020                        06            .byte	6
31258                                           ! 4877                     0,
31259 8021                        00            .byte	0
31260                                           ! 4878                               86,
31261 8022                        56            .byte	$56
31262                                           ! 4879                          0,
31263 8023                        00            .byte	0
31264                                           ! 4880                        8,
31265 8024                        08            .byte	8
31266                                           ! 4881                             16,
31267 8025                        10            .byte	$10
31268                                           ! 4882                          8,
31269 8026                        08            .byte	8
31270                                           ! 4883                               8,
31271 8027                        08            .byte	8
31272                                           ! 4884                         8,
31273 8028                        08            .byte	8
31274                                           ! 4885      
31275                                           ! 4885                         0,
31276 8029                        00            .byte	0
31277                                           ! 4886                         0,
31278 802A                        00            .byte	0
31279                                           ! 4887                              0,
31280 802B                        00            .byte	0
31281                                           ! 4888                                0,
31282 802C                        00            .byte	0
31283                                           ! 4889                        0xE0000000,
31284 802D                      0000            .word	0
31285 802F                      E000            .word	$E000
31286                                           ! 4890                               0,
31287 8031                      0000            .word	0
31288 8033                      0000            .word	0
31289                                           ! 4891                             0,
31290 8035                      0000            .word	0
31291                                           ! 4892                                960,
31292 8037                      03C0            .word	$3C0
31293                                           ! 4893                             0,
31294 8039                        00            .byte	0
31295                                           ! 4894                             0,
31296 803A                        00            .byte	0
31297                                           ! 4895                           8,
31298 803B                        08            .byte	8
31299                                           ! 4896                                16,
31300 803C                        10            .byte	$10
31301                                           ! 4897                             8,
31302 803D                        08            .byte	8
31303                                           ! 4898                                  8,
31304 803E                        08            .byte	8
31305                                           ! 4899                            8,
31306 803F                        08            .byte	8
31307                                           ! 4900                                 0,
31308 8040                        00            .byte	0
31309                                           ! 4901                            0,
31310 8041                        00            .byte	0
31311                                           ! 4902                                 0,
31312 8042                        00            .byte	0
31313                                           ! 4903                          0,
31314 8043                      0000            .word	0
31315 8045                      0000            .word	0
31316                                           ! 4904 } },
31317                                           ! 4905 { 0x0110,
31318 8047                      0110            .word	$110
31319                                           ! 4906 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31320 8049                      009B            .word	$9B
31321                                           ! 4907                           0x01 | 0x02 | 0x04,
31322 804B                        07            .byte	7
31323                                           ! 4908                           0,
31324 804C                        00            .byte	0
31325                                           ! 4909                           64,
31326 804D                      0040            .word	$40
31327                                           ! 4910                    64,
31328 804F                      0040            .word	$40
31329                                           ! 4911                        0xA000,
31330 8051                      A000            .word	$A000
31331                                           ! 4912                        0x0000,
31332 8053                      0000            .word	0
31333                                           ! 4913                       0,
31334 8055                      0000            .word	0
31335 8057                      0000            .word	0
31336                                           ! 4914                             1280,
31337 8059                      0500            .word	$500
31338                                           ! 4915                        640,
31339 805B                      0280            .word	$280
31340                                           ! 4916                        480,
31341 805D                      01E0            .word	$1E0
31342                                           ! 4917                      8,
31343 805F                        08            .byte	8
31344                                           ! 4918                      16,
31345 8060                        10            .byte	$10
31346                                           ! 4919                           1,
31347 8061                        01            .byte	1
31348                                           ! 4920                         15,
31349 8062                        0F            .byte	$F
31350                                           ! 4921                          10,
31351 8063                        0A            .byte	$A
31352                                           ! 4922                        0x06,
31353 8064                        06            .byte	6
31354                                           ! 4923                     0,
31355 8065                        00            .byte	0
31356                                           ! 4924                               26,
31357 8066                        1A            .byte	$1A
31358                                           ! 4925                          0,
31359 8067                        00            .byte	0
31360                                           ! 4926                        5,
31361 8068                        05            .byte	5
31362                                           ! 4927                             10,
31363 8069                        0A            .byte	$A
31364                                           ! 4928                          5,
31365 806A                        05            .byte	5
31366                                           ! 4929                               5,
31367 806B                        05            .byte	5
31368                                           ! 4930                         5,
31369 806C                        05            .byte	5
31370                                           ! 4931                              0,
31371 806D                        00            .byte	0
31372                                           ! 4932                         1,
31373 806E                        01            .byte	1
31374                                           ! 4933                              15,
31375 806F                        0F            .byte	$F
31376                                           ! 4934                                0,
31377 8070                        00            .byte	0
31378                                           ! 4935                        0xE0000000,
31379 8071                      0000            .word	0
31380 8073                      E000            .word	$E000
31381                                           ! 4936                               0,
31382 8075                      0000            .word	0
31383 8077                      0000            .word	0
31384                                           ! 4937                             0,
31385 8079                      0000            .word	0
31386                                           ! 4938                                1280,
31387 807B                      0500            .word	$500
31388                                           ! 4939                             0,
31389 807D                        00            .byte	0
31390                                           ! 4940                             0,
31391 807E                        00            .byte	0
31392                                           ! 4941                           5,
31393 807F                        05            .byte	5
31394                                           ! 4942                                10,
31395 8080                        0A            .byte	$A
31396                                           ! 4943                             5,
31397 8081                        05            .byte	5
31398                                           ! 4944                                  5,
31399 8082                        05            .byte	5
31400                                           ! 4945                            5,
31401 8083                        05            .byte	5
31402                                           ! 4946                                 0,
31403 8084                        00            .byte	0
31404                                           ! 4947                            1,
31405 8085                        01            .byte	1
31406                                           ! 4948                                 15,
31407 8086                        0F            .byte	$F
31408                                           ! 4949                          0,
31409 8087                      0000            .word	0
31410 8089                      0000            .word	0
31411                                           ! 4950 } },
31412                                           ! 4951 { 0x0111,
31413 808B                      0111            .word	$111
31414                                           ! 4952 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31415 808D                      009B            .word	$9B
31416                                           ! 4953       
31417                                           ! 4953                     0x01 | 0x02 | 0x04,
31418 808F                        07            .byte	7
31419                                           ! 4954                           0,
31420 8090                        00            .byte	0
31421                                           ! 4955                           64,
31422 8091                      0040            .word	$40
31423                                           ! 4956                    64,
31424 8093                      0040            .word	$40
31425                                           ! 4957                        0xA000,
31426 8095                      A000            .word	$A000
31427                                           ! 4958                        0x0000,
31428 8097                      0000            .word	0
31429                                           ! 4959                       0,
31430 8099                      0000            .word	0
31431 809B                      0000            .word	0
31432                                           ! 4960                             1280,
31433 809D                      0500            .word	$500
31434                                           ! 4961                        640,
31435 809F                      0280            .word	$280
31436                                           ! 4962                        480,
31437 80A1                      01E0            .word	$1E0
31438                                           ! 4963                      8,
31439 80A3                        08            .byte	8
31440                                           ! 4964                      16,
31441 80A4                        10            .byte	$10
31442                                           ! 4965                           1,
31443 80A5                        01            .byte	1
31444                                           ! 4966                         16,
31445 80A6                        10            .byte	$10
31446                                           ! 4967                          10,
31447 80A7                        0A            .byte	$A
31448                                           ! 4968                        0x06,
31449 80A8                        06            .byte	6
31450                                           ! 4969                     0,
31451 80A9                        00            .byte	0
31452                                           ! 4970                               26,
31453 80AA                        1A            .byte	$1A
31454                                           ! 4971                          0,
31455 80AB                        00            .byte	0
31456                                           ! 4972                        5,
31457 80AC                        05            .byte	5
31458                                           ! 4973                             11,
31459 80AD                        0B            .byte	$B
31460                                           ! 4974                          6,
31461 80AE                        06            .byte	6
31462                                           ! 4975                               5,
31463 80AF                        05            .byte	5
31464                                           ! 4976                         5,
31465 80B0                        05            .byte	5
31466                                           ! 4977                              0,
31467 80B1                        00            .byte	0
31468                                           ! 4978                         0,
31469 80B2                        00            .byte	0
31470                                           ! 4979                              0,
31471 80B3                        00            .byte	0
31472                                           ! 4980                                0,
31473 80B4                        00            .byte	0
31474                                           ! 4981                        0xE0000000,
31475 80B5                      0000            .word	0
31476 80B7                      E000            .word	$E000
31477                                           ! 4982                               0,
31478 80B9                      0000            .word	0
31479 80BB                      0000            .word	0
31480                                           ! 4983                             0,
31481 80BD                      0000            .word	0
31482                                           ! 4984                                1280,
31483 80BF                      0500            .word	$500
31484                                           ! 4985                             0,
31485 80C1                        00            .byte	0
31486                                           ! 4986                             0,
31487 80C2                        00            .byte	0
31488                                           ! 4987                           5,
31489 80C3                        05            .byte	5
31490                                           ! 4988                                11,
31491 80C4                        0B            .byte	$B
31492                                           ! 4989                             6,
31493 80C5                        06            .byte	6
31494                                           ! 4990                                  5,
31495 80C6                        05            .byte	5
31496                                           ! 4991                            5,
31497 80C7                        05            .byte	5
31498                                           ! 4992                                 0,
31499 80C8                        00            .byte	0
31500                                           ! 4993                            0,
31501 80C9                        00            .byte	0
31502                                           ! 4994                                 0,
31503 80CA                        00            .byte	0
31504                                           ! 4995                          0,
31505 80CB                      0000            .word	0
31506 80CD                      0000            .word	0
31507                                           ! 4996 } },
31508                                           ! 4997 { 0x0112,
31509 80CF                      0112            .word	$112
31510                                           ! 4998 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31511 80D1                      009B            .word	$9B
31512                                           ! 4999                           0x01 | 0x02 | 0x04,
31513 80D3                        07            .byte	7
31514                                           ! 5000                           0,
31515 80D4                        00            .byte	0
31516                                           ! 5001                           64,
31517 80D5                      0040            .word	$40
31518                                           ! 5002                    64,
31519 80D7                      0040            .word	$40
31520                                           ! 5003                        0xA000,
31521 80D9                      A000            .word	$A000
31522                                           ! 5004                        0x0000,
31523 80DB                      0000            .word	0
31524                                           ! 5005                       0,
31525 80DD                      0000            .word	0
31526 80DF                      0000            .word	0
31527                                           ! 5006                             1920,
31528 80E1                      0780            .word	$780
31529                                           ! 5007                        640,
31530 80E3                      0280            .word	$280
31531                                           ! 5008                        480,
31532 80E5                      01E0            .word	$1E0
31533                                           ! 5009                      8,
31534 80E7                        08            .byte	8
31535                                           ! 5010                      16,
31536 80E8                        10            .byte	$10
31537                                           ! 5011                           1,
31538 80E9                        01            .byte	1
31539                                           ! 5012                         24,
31540 80EA                        18            .byte	$18
31541                                           ! 5013                          15,
31542 80EB                        0F            .byte	$F
31543                                           ! 5014                        0x06,
31544 80EC                        06            .byte	6
31545                                           ! 5015                     0,
31546 80ED                        00            .byte	0
31547                                           ! 5016                               17,
31548 80EE                        11            .byte	$11
31549                                           ! 5017                          0,
31550 80EF                        00            .byte	0
31551                                           ! 5018                        8,
31552 80F0                        08            .byte	8
31553                                           ! 5019                             16,
31554 80F1                        10            .byte	$10
31555                                           ! 5020                          8,
31556 80F2                        08            .byte	8
31557                                           ! 5021                               8,
31558 80F3                        08            .byte	8
31559                                           ! 5022         
31560                                           ! 5022                 8,
31561 80F4                        08            .byte	8
31562                                           ! 5023                              0,
31563 80F5                        00            .byte	0
31564                                           ! 5024                         0,
31565 80F6                        00            .byte	0
31566                                           ! 5025                              0,
31567 80F7                        00            .byte	0
31568                                           ! 5026                                0,
31569 80F8                        00            .byte	0
31570                                           ! 5027                        0xE0000000,
31571 80F9                      0000            .word	0
31572 80FB                      E000            .word	$E000
31573                                           ! 5028                               0,
31574 80FD                      0000            .word	0
31575 80FF                      0000            .word	0
31576                                           ! 5029                             0,
31577 8101                      0000            .word	0
31578                                           ! 5030                                1920,
31579 8103                      0780            .word	$780
31580                                           ! 5031                             0,
31581 8105                        00            .byte	0
31582                                           ! 5032                             0,
31583 8106                        00            .byte	0
31584                                           ! 5033                           8,
31585 8107                        08            .byte	8
31586                                           ! 5034                                16,
31587 8108                        10            .byte	$10
31588                                           ! 5035                             8,
31589 8109                        08            .byte	8
31590                                           ! 5036                                  8,
31591 810A                        08            .byte	8
31592                                           ! 5037                            8,
31593 810B                        08            .byte	8
31594                                           ! 5038                                 0,
31595 810C                        00            .byte	0
31596                                           ! 5039                            0,
31597 810D                        00            .byte	0
31598                                           ! 5040                                 0,
31599 810E                        00            .byte	0
31600                                           ! 5041                          0,
31601 810F                      0000            .word	0
31602 8111                      0000            .word	0
31603                                           ! 5042 } },
31604                                           ! 5043 { 0x0113,
31605 8113                      0113            .word	$113
31606                                           ! 5044 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31607 8115                      009B            .word	$9B
31608                                           ! 5045                           0x01 | 0x02 | 0x04,
31609 8117                        07            .byte	7
31610                                           ! 5046                           0,
31611 8118                        00            .byte	0
31612                                           ! 5047                           64,
31613 8119                      0040            .word	$40
31614                                           ! 5048                    64,
31615 811B                      0040            .word	$40
31616                                           ! 5049                        0xA000,
31617 811D                      A000            .word	$A000
31618                                           ! 5050                        0x0000,
31619 811F                      0000            .word	0
31620                                           ! 5051                       0,
31621 8121                      0000            .word	0
31622 8123                      0000            .word	0
31623                                           ! 5052                             1600,
31624 8125                      0640            .word	$640
31625                                           ! 5053                        800,
31626 8127                      0320            .word	$320
31627                                           ! 5054                        600,
31628 8129                      0258            .word	$258
31629                                           ! 5055                      8,
31630 812B                        08            .byte	8
31631                                           ! 5056                      16,
31632 812C                        10            .byte	$10
31633                                           ! 5057                           1,
31634 812D                        01            .byte	1
31635                                           ! 5058                         15,
31636 812E                        0F            .byte	$F
31637                                           ! 5059                          15,
31638 812F                        0F            .byte	$F
31639                                           ! 5060                        0x06,
31640 8130                        06            .byte	6
31641                                           ! 5061                     0,
31642 8131                        00            .byte	0
31643                                           ! 5062                               16,
31644 8132                        10            .byte	$10
31645                                           ! 5063                          0,
31646 8133                        00            .byte	0
31647                                           ! 5064                        5,
31648 8134                        05            .byte	5
31649                                           ! 5065                             10,
31650 8135                        0A            .byte	$A
31651                                           ! 5066                          5,
31652 8136                        05            .byte	5
31653                                           ! 5067                               5,
31654 8137                        05            .byte	5
31655                                           ! 5068                         5,
31656 8138                        05            .byte	5
31657                                           ! 5069                              0,
31658 8139                        00            .byte	0
31659                                           ! 5070                         1,
31660 813A                        01            .byte	1
31661                                           ! 5071                              15,
31662 813B                        0F            .byte	$F
31663                                           ! 5072                                0,
31664 813C                        00            .byte	0
31665                                           ! 5073                        0xE0000000,
31666 813D                      0000            .word	0
31667 813F                      E000            .word	$E000
31668                                           ! 5074                               0,
31669 8141                      0000            .word	0
31670 8143                      0000            .word	0
31671                                           ! 5075                             0,
31672 8145                      0000            .word	0
31673                                           ! 5076                                1600,
31674 8147                      0640            .word	$640
31675                                           ! 5077                             0,
31676 8149                        00            .byte	0
31677                                           ! 5078                             0,
31678 814A                        00            .byte	0
31679                                           ! 5079                           5,
31680 814B                        05            .byte	5
31681                                           ! 5080                                10,
31682 814C                        0A            .byte	$A
31683                                           ! 5081                             5,
31684 814D                        05            .byte	5
31685                                           ! 5082                                  5,
31686 814E                        05            .byte	5
31687                                           ! 5083                            5,
31688 814F                        05            .byte	5
31689                                           ! 5084                                 0,
31690 8150                        00            .byte	0
31691                                           ! 5085                            1,
31692 8151                        01            .byte	1
31693                                           ! 5086                                 15,
31694 8152                        0F            .byte	$F
31695                                           ! 5087                          0,
31696 8153                      0000            .word	0
31697 8155                      0000            .word	0
31698                                           ! 5088 } },
31699                                           ! 5089 { 0x0114,
31700 8157                      0114            .word	$114
31701                                           ! 5090 { 0x0001 | 0x0002 | 0x0008 
31702                                           ! 5090 | 0x0080 | 0x0010,
31703 8159                      009B            .word	$9B
31704                                           ! 5091                           0x01 | 0x02 | 0x04,
31705 815B                        07            .byte	7
31706                                           ! 5092                           0,
31707 815C                        00            .byte	0
31708                                           ! 5093                           64,
31709 815D                      0040            .word	$40
31710                                           ! 5094                    64,
31711 815F                      0040            .word	$40
31712                                           ! 5095                        0xA000,
31713 8161                      A000            .word	$A000
31714                                           ! 5096                        0x0000,
31715 8163                      0000            .word	0
31716                                           ! 5097                       0,
31717 8165                      0000            .word	0
31718 8167                      0000            .word	0
31719                                           ! 5098                             1600,
31720 8169                      0640            .word	$640
31721                                           ! 5099                        800,
31722 816B                      0320            .word	$320
31723                                           ! 5100                        600,
31724 816D                      0258            .word	$258
31725                                           ! 5101                      8,
31726 816F                        08            .byte	8
31727                                           ! 5102                      16,
31728 8170                        10            .byte	$10
31729                                           ! 5103                           1,
31730 8171                        01            .byte	1
31731                                           ! 5104                         16,
31732 8172                        10            .byte	$10
31733                                           ! 5105                          15,
31734 8173                        0F            .byte	$F
31735                                           ! 5106                        0x06,
31736 8174                        06            .byte	6
31737                                           ! 5107                     0,
31738 8175                        00            .byte	0
31739                                           ! 5108                               16,
31740 8176                        10            .byte	$10
31741                                           ! 5109                          0,
31742 8177                        00            .byte	0
31743                                           ! 5110                        5,
31744 8178                        05            .byte	5
31745                                           ! 5111                             11,
31746 8179                        0B            .byte	$B
31747                                           ! 5112                          6,
31748 817A                        06            .byte	6
31749                                           ! 5113                               5,
31750 817B                        05            .byte	5
31751                                           ! 5114                         5,
31752 817C                        05            .byte	5
31753                                           ! 5115                              0,
31754 817D                        00            .byte	0
31755                                           ! 5116                         0,
31756 817E                        00            .byte	0
31757                                           ! 5117                              0,
31758 817F                        00            .byte	0
31759                                           ! 5118                                0,
31760 8180                        00            .byte	0
31761                                           ! 5119                        0xE0000000,
31762 8181                      0000            .word	0
31763 8183                      E000            .word	$E000
31764                                           ! 5120                               0,
31765 8185                      0000            .word	0
31766 8187                      0000            .word	0
31767                                           ! 5121                             0,
31768 8189                      0000            .word	0
31769                                           ! 5122                                1600,
31770 818B                      0640            .word	$640
31771                                           ! 5123                             0,
31772 818D                        00            .byte	0
31773                                           ! 5124                             0,
31774 818E                        00            .byte	0
31775                                           ! 5125                           5,
31776 818F                        05            .byte	5
31777                                           ! 5126                                11,
31778 8190                        0B            .byte	$B
31779                                           ! 5127                             6,
31780 8191                        06            .byte	6
31781                                           ! 5128                                  5,
31782 8192                        05            .byte	5
31783                                           ! 5129                            5,
31784 8193                        05            .byte	5
31785                                           ! 5130                                 0,
31786 8194                        00            .byte	0
31787                                           ! 5131                            0,
31788 8195                        00            .byte	0
31789                                           ! 5132                                 0,
31790 8196                        00            .byte	0
31791                                           ! 5133                          0,
31792 8197                      0000            .word	0
31793 8199                      0000            .word	0
31794                                           ! 5134 } },
31795                                           ! 5135 { 0x0115,
31796 819B                      0115            .word	$115
31797                                           ! 5136 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31798 819D                      009B            .word	$9B
31799                                           ! 5137                           0x01 | 0x02 | 0x04,
31800 819F                        07            .byte	7
31801                                           ! 5138                           0,
31802 81A0                        00            .byte	0
31803                                           ! 5139                           64,
31804 81A1                      0040            .word	$40
31805                                           ! 5140                    64,
31806 81A3                      0040            .word	$40
31807                                           ! 5141                        0xA000,
31808 81A5                      A000            .word	$A000
31809                                           ! 5142                        0x0000,
31810 81A7                      0000            .word	0
31811                                           ! 5143                       0,
31812 81A9                      0000            .word	0
31813 81AB                      0000            .word	0
31814                                           ! 5144                             2400,
31815 81AD                      0960            .word	$960
31816                                           ! 5145                        800,
31817 81AF                      0320            .word	$320
31818                                           ! 5146                        600,
31819 81B1                      0258            .word	$258
31820                                           ! 5147                      8,
31821 81B3                        08            .byte	8
31822                                           ! 5148                      16,
31823 81B4                        10            .byte	$10
31824                                           ! 5149                           1,
31825 81B5                        01            .byte	1
31826                                           ! 5150                         24,
31827 81B6                        18            .byte	$18
31828                                           ! 5151                          22,
31829 81B7                        16            .byte	$16
31830                                           ! 5152                        0x06,
31831 81B8                        06            .byte	6
31832                                           ! 5153                     0,
31833 81B9                        00            .byte	0
31834                                           ! 5154                               10,
31835 81BA                        0A            .byte	$A
31836                                           ! 5155                          0,
31837 81BB                        00            .byte	0
31838                                           ! 5156                        8,
31839 81BC                        08            .byte	8
31840                                           ! 5157                             16,
31841 81BD                        10            .byte	$10
31842                                           ! 5158                          8,
31843 81BE                        08            .byte	8
31844                                           ! 5159                 
31845                                           ! 5159               8,
31846 81BF                        08            .byte	8
31847                                           ! 5160                         8,
31848 81C0                        08            .byte	8
31849                                           ! 5161                              0,
31850 81C1                        00            .byte	0
31851                                           ! 5162                         0,
31852 81C2                        00            .byte	0
31853                                           ! 5163                              0,
31854 81C3                        00            .byte	0
31855                                           ! 5164                                0,
31856 81C4                        00            .byte	0
31857                                           ! 5165                        0xE0000000,
31858 81C5                      0000            .word	0
31859 81C7                      E000            .word	$E000
31860                                           ! 5166                               0,
31861 81C9                      0000            .word	0
31862 81CB                      0000            .word	0
31863                                           ! 5167                             0,
31864 81CD                      0000            .word	0
31865                                           ! 5168                                2400,
31866 81CF                      0960            .word	$960
31867                                           ! 5169                             0,
31868 81D1                        00            .byte	0
31869                                           ! 5170                             0,
31870 81D2                        00            .byte	0
31871                                           ! 5171                           8,
31872 81D3                        08            .byte	8
31873                                           ! 5172                                16,
31874 81D4                        10            .byte	$10
31875                                           ! 5173                             8,
31876 81D5                        08            .byte	8
31877                                           ! 5174                                  8,
31878 81D6                        08            .byte	8
31879                                           ! 5175                            8,
31880 81D7                        08            .byte	8
31881                                           ! 5176                                 0,
31882 81D8                        00            .byte	0
31883                                           ! 5177                            0,
31884 81D9                        00            .byte	0
31885                                           ! 5178                                 0,
31886 81DA                        00            .byte	0
31887                                           ! 5179                          0,
31888 81DB                      0000            .word	0
31889 81DD                      0000            .word	0
31890                                           ! 5180 } },
31891                                           ! 5181 { 0x0116,
31892 81DF                      0116            .word	$116
31893                                           ! 5182 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31894 81E1                      009B            .word	$9B
31895                                           ! 5183                           0x01 | 0x02 | 0x04,
31896 81E3                        07            .byte	7
31897                                           ! 5184                           0,
31898 81E4                        00            .byte	0
31899                                           ! 5185                           64,
31900 81E5                      0040            .word	$40
31901                                           ! 5186                    64,
31902 81E7                      0040            .word	$40
31903                                           ! 5187                        0xA000,
31904 81E9                      A000            .word	$A000
31905                                           ! 5188                        0x0000,
31906 81EB                      0000            .word	0
31907                                           ! 5189                       0,
31908 81ED                      0000            .word	0
31909 81EF                      0000            .word	0
31910                                           ! 5190                             2048,
31911 81F1                      0800            .word	$800
31912                                           ! 5191                        1024,
31913 81F3                      0400            .word	$400
31914                                           ! 5192                        768,
31915 81F5                      0300            .word	$300
31916                                           ! 5193                      8,
31917 81F7                        08            .byte	8
31918                                           ! 5194                      16,
31919 81F8                        10            .byte	$10
31920                                           ! 5195                           1,
31921 81F9                        01            .byte	1
31922                                           ! 5196                         15,
31923 81FA                        0F            .byte	$F
31924                                           ! 5197                          24,
31925 81FB                        18            .byte	$18
31926                                           ! 5198                        0x06,
31927 81FC                        06            .byte	6
31928                                           ! 5199                     0,
31929 81FD                        00            .byte	0
31930                                           ! 5200                               9,
31931 81FE                        09            .byte	9
31932                                           ! 5201                          0,
31933 81FF                        00            .byte	0
31934                                           ! 5202                        5,
31935 8200                        05            .byte	5
31936                                           ! 5203                             10,
31937 8201                        0A            .byte	$A
31938                                           ! 5204                          5,
31939 8202                        05            .byte	5
31940                                           ! 5205                               5,
31941 8203                        05            .byte	5
31942                                           ! 5206                         5,
31943 8204                        05            .byte	5
31944                                           ! 5207                              0,
31945 8205                        00            .byte	0
31946                                           ! 5208                         1,
31947 8206                        01            .byte	1
31948                                           ! 5209                              15,
31949 8207                        0F            .byte	$F
31950                                           ! 5210                                0,
31951 8208                        00            .byte	0
31952                                           ! 5211                        0xE0000000,
31953 8209                      0000            .word	0
31954 820B                      E000            .word	$E000
31955                                           ! 5212                               0,
31956 820D                      0000            .word	0
31957 820F                      0000            .word	0
31958                                           ! 5213                             0,
31959 8211                      0000            .word	0
31960                                           ! 5214                                2048,
31961 8213                      0800            .word	$800
31962                                           ! 5215                             0,
31963 8215                        00            .byte	0
31964                                           ! 5216                             0,
31965 8216                        00            .byte	0
31966                                           ! 5217                           5,
31967 8217                        05            .byte	5
31968                                           ! 5218                                10,
31969 8218                        0A            .byte	$A
31970                                           ! 5219                             5,
31971 8219                        05            .byte	5
31972                                           ! 5220                                  5,
31973 821A                        05            .byte	5
31974                                           ! 5221                            5,
31975 821B                        05            .byte	5
31976                                           ! 5222                                 0,
31977 821C                        00            .byte	0
31978                                           ! 5223                            1,
31979 821D                        01            .byte	1
31980                                           ! 5224                                 15,
31981 821E                        0F            .byte	$F
31982                                           ! 5225                          0,
31983 821F                      0000            .word	0
31984 8221                      0000            .word	0
31985                                           ! 5226 } },
31986                                           ! 5227 { 0x0117,
31987 8223                      0117            .word	$117
31988                                           ! 5228 { 
31989                                           ! 5228 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31990 8225                      009B            .word	$9B
31991                                           ! 5229                           0x01 | 0x02 | 0x04,
31992 8227                        07            .byte	7
31993                                           ! 5230                           0,
31994 8228                        00            .byte	0
31995                                           ! 5231                           64,
31996 8229                      0040            .word	$40
31997                                           ! 5232                    64,
31998 822B                      0040            .word	$40
31999                                           ! 5233                        0xA000,
32000 822D                      A000            .word	$A000
32001                                           ! 5234                        0x0000,
32002 822F                      0000            .word	0
32003                                           ! 5235                       0,
32004 8231                      0000            .word	0
32005 8233                      0000            .word	0
32006                                           ! 5236                             2048,
32007 8235                      0800            .word	$800
32008                                           ! 5237                        1024,
32009 8237                      0400            .word	$400
32010                                           ! 5238                        768,
32011 8239                      0300            .word	$300
32012                                           ! 5239                      8,
32013 823B                        08            .byte	8
32014                                           ! 5240                      16,
32015 823C                        10            .byte	$10
32016                                           ! 5241                           1,
32017 823D                        01            .byte	1
32018                                           ! 5242                         16,
32019 823E                        10            .byte	$10
32020                                           ! 5243                          24,
32021 823F                        18            .byte	$18
32022                                           ! 5244                        0x06,
32023 8240                        06            .byte	6
32024                                           ! 5245                     0,
32025 8241                        00            .byte	0
32026                                           ! 5246                               9,
32027 8242                        09            .byte	9
32028                                           ! 5247                          0,
32029 8243                        00            .byte	0
32030                                           ! 5248                        5,
32031 8244                        05            .byte	5
32032                                           ! 5249                             11,
32033 8245                        0B            .byte	$B
32034                                           ! 5250                          6,
32035 8246                        06            .byte	6
32036                                           ! 5251                               5,
32037 8247                        05            .byte	5
32038                                           ! 5252                         5,
32039 8248                        05            .byte	5
32040                                           ! 5253                              0,
32041 8249                        00            .byte	0
32042                                           ! 5254                         0,
32043 824A                        00            .byte	0
32044                                           ! 5255                              0,
32045 824B                        00            .byte	0
32046                                           ! 5256                                0,
32047 824C                        00            .byte	0
32048                                           ! 5257                        0xE0000000,
32049 824D                      0000            .word	0
32050 824F                      E000            .word	$E000
32051                                           ! 5258                               0,
32052 8251                      0000            .word	0
32053 8253                      0000            .word	0
32054                                           ! 5259                             0,
32055 8255                      0000            .word	0
32056                                           ! 5260                                2048,
32057 8257                      0800            .word	$800
32058                                           ! 5261                             0,
32059 8259                        00            .byte	0
32060                                           ! 5262                             0,
32061 825A                        00            .byte	0
32062                                           ! 5263                           5,
32063 825B                        05            .byte	5
32064                                           ! 5264                                11,
32065 825C                        0B            .byte	$B
32066                                           ! 5265                             6,
32067 825D                        06            .byte	6
32068                                           ! 5266                                  5,
32069 825E                        05            .byte	5
32070                                           ! 5267                            5,
32071 825F                        05            .byte	5
32072                                           ! 5268                                 0,
32073 8260                        00            .byte	0
32074                                           ! 5269                            0,
32075 8261                        00            .byte	0
32076                                           ! 5270                                 0,
32077 8262                        00            .byte	0
32078                                           ! 5271                          0,
32079 8263                      0000            .word	0
32080 8265                      0000            .word	0
32081                                           ! 5272 } },
32082                                           ! 5273 { 0x0118,
32083 8267                      0118            .word	$118
32084                                           ! 5274 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32085 8269                      009B            .word	$9B
32086                                           ! 5275                           0x01 | 0x02 | 0x04,
32087 826B                        07            .byte	7
32088                                           ! 5276                           0,
32089 826C                        00            .byte	0
32090                                           ! 5277                           64,
32091 826D                      0040            .word	$40
32092                                           ! 5278                    64,
32093 826F                      0040            .word	$40
32094                                           ! 5279                        0xA000,
32095 8271                      A000            .word	$A000
32096                                           ! 5280                        0x0000,
32097 8273                      0000            .word	0
32098                                           ! 5281                       0,
32099 8275                      0000            .word	0
32100 8277                      0000            .word	0
32101                                           ! 5282                             3072,
32102 8279                      0C00            .word	$C00
32103                                           ! 5283                        1024,
32104 827B                      0400            .word	$400
32105                                           ! 5284                        768,
32106 827D                      0300            .word	$300
32107                                           ! 5285                      8,
32108 827F                        08            .byte	8
32109                                           ! 5286                      16,
32110 8280                        10            .byte	$10
32111                                           ! 5287                           1,
32112 8281                        01            .byte	1
32113                                           ! 5288                         24,
32114 8282                        18            .byte	$18
32115                                           ! 5289                          36,
32116 8283                        24            .byte	$24
32117                                           ! 5290                        0x06,
32118 8284                        06            .byte	6
32119                                           ! 5291                     0,
32120 8285                        00            .byte	0
32121                                           ! 5292                               6,
32122 8286                        06            .byte	6
32123                                           ! 5293                          0,
32124 8287                        00            .byte	0
32125                                           ! 5294                        8,
32126 8288                        08            .byte	8
32127                                           ! 5295                             16,
32128 8289                        10            .byte	$10
32129                                           ! 5296                    
32130                                           ! 5296       8,
32131 828A                        08            .byte	8
32132                                           ! 5297                               8,
32133 828B                        08            .byte	8
32134                                           ! 5298                         8,
32135 828C                        08            .byte	8
32136                                           ! 5299                              0,
32137 828D                        00            .byte	0
32138                                           ! 5300                         0,
32139 828E                        00            .byte	0
32140                                           ! 5301                              0,
32141 828F                        00            .byte	0
32142                                           ! 5302                                0,
32143 8290                        00            .byte	0
32144                                           ! 5303                        0xE0000000,
32145 8291                      0000            .word	0
32146 8293                      E000            .word	$E000
32147                                           ! 5304                               0,
32148 8295                      0000            .word	0
32149 8297                      0000            .word	0
32150                                           ! 5305                             0,
32151 8299                      0000            .word	0
32152                                           ! 5306                                3072,
32153 829B                      0C00            .word	$C00
32154                                           ! 5307                             0,
32155 829D                        00            .byte	0
32156                                           ! 5308                             0,
32157 829E                        00            .byte	0
32158                                           ! 5309                           8,
32159 829F                        08            .byte	8
32160                                           ! 5310                                16,
32161 82A0                        10            .byte	$10
32162                                           ! 5311                             8,
32163 82A1                        08            .byte	8
32164                                           ! 5312                                  8,
32165 82A2                        08            .byte	8
32166                                           ! 5313                            8,
32167 82A3                        08            .byte	8
32168                                           ! 5314                                 0,
32169 82A4                        00            .byte	0
32170                                           ! 5315                            0,
32171 82A5                        00            .byte	0
32172                                           ! 5316                                 0,
32173 82A6                        00            .byte	0
32174                                           ! 5317                          0,
32175 82A7                      0000            .word	0
32176 82A9                      0000            .word	0
32177                                           ! 5318 } },
32178                                           ! 5319 { 0x0119,
32179 82AB                      0119            .word	$119
32180                                           ! 5320 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32181 82AD                      009B            .word	$9B
32182                                           ! 5321                           0x01 | 0x02 | 0x04,
32183 82AF                        07            .byte	7
32184                                           ! 5322                           0,
32185 82B0                        00            .byte	0
32186                                           ! 5323                           64,
32187 82B1                      0040            .word	$40
32188                                           ! 5324                    64,
32189 82B3                      0040            .word	$40
32190                                           ! 5325                        0xA000,
32191 82B5                      A000            .word	$A000
32192                                           ! 5326                        0x0000,
32193 82B7                      0000            .word	0
32194                                           ! 5327                       0,
32195 82B9                      0000            .word	0
32196 82BB                      0000            .word	0
32197                                           ! 5328                             2560,
32198 82BD                      0A00            .word	$A00
32199                                           ! 5329                        1280,
32200 82BF                      0500            .word	$500
32201                                           ! 5330                        1024,
32202 82C1                      0400            .word	$400
32203                                           ! 5331                      8,
32204 82C3                        08            .byte	8
32205                                           ! 5332                      16,
32206 82C4                        10            .byte	$10
32207                                           ! 5333                           1,
32208 82C5                        01            .byte	1
32209                                           ! 5334                         15,
32210 82C6                        0F            .byte	$F
32211                                           ! 5335                          40,
32212 82C7                        28            .byte	$28
32213                                           ! 5336                        0x06,
32214 82C8                        06            .byte	6
32215                                           ! 5337                     0,
32216 82C9                        00            .byte	0
32217                                           ! 5338                               5,
32218 82CA                        05            .byte	5
32219                                           ! 5339                          0,
32220 82CB                        00            .byte	0
32221                                           ! 5340                        5,
32222 82CC                        05            .byte	5
32223                                           ! 5341                             10,
32224 82CD                        0A            .byte	$A
32225                                           ! 5342                          5,
32226 82CE                        05            .byte	5
32227                                           ! 5343                               5,
32228 82CF                        05            .byte	5
32229                                           ! 5344                         5,
32230 82D0                        05            .byte	5
32231                                           ! 5345                              0,
32232 82D1                        00            .byte	0
32233                                           ! 5346                         1,
32234 82D2                        01            .byte	1
32235                                           ! 5347                              15,
32236 82D3                        0F            .byte	$F
32237                                           ! 5348                                0,
32238 82D4                        00            .byte	0
32239                                           ! 5349                        0xE0000000,
32240 82D5                      0000            .word	0
32241 82D7                      E000            .word	$E000
32242                                           ! 5350                               0,
32243 82D9                      0000            .word	0
32244 82DB                      0000            .word	0
32245                                           ! 5351                             0,
32246 82DD                      0000            .word	0
32247                                           ! 5352                                2560,
32248 82DF                      0A00            .word	$A00
32249                                           ! 5353                             0,
32250 82E1                        00            .byte	0
32251                                           ! 5354                             0,
32252 82E2                        00            .byte	0
32253                                           ! 5355                           5,
32254 82E3                        05            .byte	5
32255                                           ! 5356                                10,
32256 82E4                        0A            .byte	$A
32257                                           ! 5357                             5,
32258 82E5                        05            .byte	5
32259                                           ! 5358                                  5,
32260 82E6                        05            .byte	5
32261                                           ! 5359                            5,
32262 82E7                        05            .byte	5
32263                                           ! 5360                                 0,
32264 82E8                        00            .byte	0
32265                                           ! 5361                            1,
32266 82E9                        01            .byte	1
32267                                           ! 5362                                 15,
32268 82EA                        0F            .byte	$F
32269                                           ! 5363                    
32270                                           ! 5363       0,
32271 82EB                      0000            .word	0
32272 82ED                      0000            .word	0
32273                                           ! 5364 } },
32274                                           ! 5365 { 0x011a,
32275 82EF                      011A            .word	$11A
32276                                           ! 5366 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32277 82F1                      009B            .word	$9B
32278                                           ! 5367                           0x01 | 0x02 | 0x04,
32279 82F3                        07            .byte	7
32280                                           ! 5368                           0,
32281 82F4                        00            .byte	0
32282                                           ! 5369                           64,
32283 82F5                      0040            .word	$40
32284                                           ! 5370                    64,
32285 82F7                      0040            .word	$40
32286                                           ! 5371                        0xA000,
32287 82F9                      A000            .word	$A000
32288                                           ! 5372                        0x0000,
32289 82FB                      0000            .word	0
32290                                           ! 5373                       0,
32291 82FD                      0000            .word	0
32292 82FF                      0000            .word	0
32293                                           ! 5374                             2560,
32294 8301                      0A00            .word	$A00
32295                                           ! 5375                        1280,
32296 8303                      0500            .word	$500
32297                                           ! 5376                        1024,
32298 8305                      0400            .word	$400
32299                                           ! 5377                      8,
32300 8307                        08            .byte	8
32301                                           ! 5378                      16,
32302 8308                        10            .byte	$10
32303                                           ! 5379                           1,
32304 8309                        01            .byte	1
32305                                           ! 5380                         16,
32306 830A                        10            .byte	$10
32307                                           ! 5381                          40,
32308 830B                        28            .byte	$28
32309                                           ! 5382                        0x06,
32310 830C                        06            .byte	6
32311                                           ! 5383                     0,
32312 830D                        00            .byte	0
32313                                           ! 5384                               5,
32314 830E                        05            .byte	5
32315                                           ! 5385                          0,
32316 830F                        00            .byte	0
32317                                           ! 5386                        5,
32318 8310                        05            .byte	5
32319                                           ! 5387                             11,
32320 8311                        0B            .byte	$B
32321                                           ! 5388                          6,
32322 8312                        06            .byte	6
32323                                           ! 5389                               5,
32324 8313                        05            .byte	5
32325                                           ! 5390                         5,
32326 8314                        05            .byte	5
32327                                           ! 5391                              0,
32328 8315                        00            .byte	0
32329                                           ! 5392                         0,
32330 8316                        00            .byte	0
32331                                           ! 5393                              0,
32332 8317                        00            .byte	0
32333                                           ! 5394                                0,
32334 8318                        00            .byte	0
32335                                           ! 5395                        0xE0000000,
32336 8319                      0000            .word	0
32337 831B                      E000            .word	$E000
32338                                           ! 5396                               0,
32339 831D                      0000            .word	0
32340 831F                      0000            .word	0
32341                                           ! 5397                             0,
32342 8321                      0000            .word	0
32343                                           ! 5398                                2560,
32344 8323                      0A00            .word	$A00
32345                                           ! 5399                             0,
32346 8325                        00            .byte	0
32347                                           ! 5400                             0,
32348 8326                        00            .byte	0
32349                                           ! 5401                           5,
32350 8327                        05            .byte	5
32351                                           ! 5402                                11,
32352 8328                        0B            .byte	$B
32353                                           ! 5403                             6,
32354 8329                        06            .byte	6
32355                                           ! 5404                                  5,
32356 832A                        05            .byte	5
32357                                           ! 5405                            5,
32358 832B                        05            .byte	5
32359                                           ! 5406                                 0,
32360 832C                        00            .byte	0
32361                                           ! 5407                            0,
32362 832D                        00            .byte	0
32363                                           ! 5408                                 0,
32364 832E                        00            .byte	0
32365                                           ! 5409                          0,
32366 832F                      0000            .word	0
32367 8331                      0000            .word	0
32368                                           ! 5410 } },
32369                                           ! 5411 { 0x011b,
32370 8333                      011B            .word	$11B
32371                                           ! 5412 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32372 8335                      009B            .word	$9B
32373                                           ! 5413                           0x01 | 0x02 | 0x04,
32374 8337                        07            .byte	7
32375                                           ! 5414                           0,
32376 8338                        00            .byte	0
32377                                           ! 5415                           64,
32378 8339                      0040            .word	$40
32379                                           ! 5416                    64,
32380 833B                      0040            .word	$40
32381                                           ! 5417                        0xA000,
32382 833D                      A000            .word	$A000
32383                                           ! 5418                        0x0000,
32384 833F                      0000            .word	0
32385                                           ! 5419                       0,
32386 8341                      0000            .word	0
32387 8343                      0000            .word	0
32388                                           ! 5420                             3840,
32389 8345                      0F00            .word	$F00
32390                                           ! 5421                        1280,
32391 8347                      0500            .word	$500
32392                                           ! 5422                        1024,
32393 8349                      0400            .word	$400
32394                                           ! 5423                      8,
32395 834B                        08            .byte	8
32396                                           ! 5424                      16,
32397 834C                        10            .byte	$10
32398                                           ! 5425                           1,
32399 834D                        01            .byte	1
32400                                           ! 5426                         24,
32401 834E                        18            .byte	$18
32402                                           ! 5427                          60,
32403 834F                        3C            .byte	$3C
32404                                           ! 5428                        0x06,
32405 8350                        06            .byte	6
32406                                           ! 5429                     0,
32407 8351                        00            .byte	0
32408                                           ! 5430                               3,
32409 8352                        03            .byte	3
32410                                           ! 5431                          0,
32411 8353                        00            .byte	0
32412                                           ! 5432                        8,
32413 8354                        08            .byte	8
32414                                           ! 5433                        
32415                                           ! 5433      16,
32416 8355                        10            .byte	$10
32417                                           ! 5434                          8,
32418 8356                        08            .byte	8
32419                                           ! 5435                               8,
32420 8357                        08            .byte	8
32421                                           ! 5436                         8,
32422 8358                        08            .byte	8
32423                                           ! 5437                              0,
32424 8359                        00            .byte	0
32425                                           ! 5438                         0,
32426 835A                        00            .byte	0
32427                                           ! 5439                              0,
32428 835B                        00            .byte	0
32429                                           ! 5440                                0,
32430 835C                        00            .byte	0
32431                                           ! 5441                        0xE0000000,
32432 835D                      0000            .word	0
32433 835F                      E000            .word	$E000
32434                                           ! 5442                               0,
32435 8361                      0000            .word	0
32436 8363                      0000            .word	0
32437                                           ! 5443                             0,
32438 8365                      0000            .word	0
32439                                           ! 5444                                3840,
32440 8367                      0F00            .word	$F00
32441                                           ! 5445                             0,
32442 8369                        00            .byte	0
32443                                           ! 5446                             0,
32444 836A                        00            .byte	0
32445                                           ! 5447                           8,
32446 836B                        08            .byte	8
32447                                           ! 5448                                16,
32448 836C                        10            .byte	$10
32449                                           ! 5449                             8,
32450 836D                        08            .byte	8
32451                                           ! 5450                                  8,
32452 836E                        08            .byte	8
32453                                           ! 5451                            8,
32454 836F                        08            .byte	8
32455                                           ! 5452                                 0,
32456 8370                        00            .byte	0
32457                                           ! 5453                            0,
32458 8371                        00            .byte	0
32459                                           ! 5454                                 0,
32460 8372                        00            .byte	0
32461                                           ! 5455                          0,
32462 8373                      0000            .word	0
32463 8375                      0000            .word	0
32464                                           ! 5456 } },
32465                                           ! 5457 { 0x011c,
32466 8377                      011C            .word	$11C
32467                                           ! 5458 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32468 8379                      009B            .word	$9B
32469                                           ! 5459                           0x01 | 0x02 | 0x04,
32470 837B                        07            .byte	7
32471                                           ! 5460                           0,
32472 837C                        00            .byte	0
32473                                           ! 5461                           64,
32474 837D                      0040            .word	$40
32475                                           ! 5462                    64,
32476 837F                      0040            .word	$40
32477                                           ! 5463                        0xA000,
32478 8381                      A000            .word	$A000
32479                                           ! 5464                        0x0000,
32480 8383                      0000            .word	0
32481                                           ! 5465                       0,
32482 8385                      0000            .word	0
32483 8387                      0000            .word	0
32484                                           ! 5466                             1600,
32485 8389                      0640            .word	$640
32486                                           ! 5467                        1600,
32487 838B                      0640            .word	$640
32488                                           ! 5468                        1200,
32489 838D                      04B0            .word	$4B0
32490                                           ! 5469                      8,
32491 838F                        08            .byte	8
32492                                           ! 5470                      16,
32493 8390                        10            .byte	$10
32494                                           ! 5471                           1,
32495 8391                        01            .byte	1
32496                                           ! 5472                         8,
32497 8392                        08            .byte	8
32498                                           ! 5473                          30,
32499 8393                        1E            .byte	$1E
32500                                           ! 5474                        0x04,
32501 8394                        04            .byte	4
32502                                           ! 5475                     0,
32503 8395                        00            .byte	0
32504                                           ! 5476                               7,
32505 8396                        07            .byte	7
32506                                           ! 5477                          0,
32507 8397                        00            .byte	0
32508                                           ! 5478                        0,
32509 8398                        00            .byte	0
32510                                           ! 5479                             0,
32511 8399                        00            .byte	0
32512                                           ! 5480                          0,
32513 839A                        00            .byte	0
32514                                           ! 5481                               0,
32515 839B                        00            .byte	0
32516                                           ! 5482                         0,
32517 839C                        00            .byte	0
32518                                           ! 5483                              0,
32519 839D                        00            .byte	0
32520                                           ! 5484                         0,
32521 839E                        00            .byte	0
32522                                           ! 5485                              0,
32523 839F                        00            .byte	0
32524                                           ! 5486                                0,
32525 83A0                        00            .byte	0
32526                                           ! 5487                        0xE0000000,
32527 83A1                      0000            .word	0
32528 83A3                      E000            .word	$E000
32529                                           ! 5488                               0,
32530 83A5                      0000            .word	0
32531 83A7                      0000            .word	0
32532                                           ! 5489                             0,
32533 83A9                      0000            .word	0
32534                                           ! 5490                                1600,
32535 83AB                      0640            .word	$640
32536                                           ! 5491                             0,
32537 83AD                        00            .byte	0
32538                                           ! 5492                             0,
32539 83AE                        00            .byte	0
32540                                           ! 5493                           0,
32541 83AF                        00            .byte	0
32542                                           ! 5494                                0,
32543 83B0                        00            .byte	0
32544                                           ! 5495                             0,
32545 83B1                        00            .byte	0
32546                                           ! 5496                                  0,
32547 83B2                        00            .byte	0
32548                                           ! 5497                            0,
32549 83B3                        00            .byte	0
32550                                           ! 5498                                 0,
32551 83B4                        00            .byte	0
32552                                           ! 5499                            0,
32553 83B5                        00            .byte	0
32554                                           ! 5500                                
32555                                           ! 5500  0,
32556 83B6                        00            .byte	0
32557                                           ! 5501                          0,
32558 83B7                      0000            .word	0
32559 83B9                      0000            .word	0
32560                                           ! 5502 } },
32561                                           ! 5503 { 0x011d,
32562 83BB                      011D            .word	$11D
32563                                           ! 5504 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32564 83BD                      009B            .word	$9B
32565                                           ! 5505                           0x01 | 0x02 | 0x04,
32566 83BF                        07            .byte	7
32567                                           ! 5506                           0,
32568 83C0                        00            .byte	0
32569                                           ! 5507                           64,
32570 83C1                      0040            .word	$40
32571                                           ! 5508                    64,
32572 83C3                      0040            .word	$40
32573                                           ! 5509                        0xA000,
32574 83C5                      A000            .word	$A000
32575                                           ! 5510                        0x0000,
32576 83C7                      0000            .word	0
32577                                           ! 5511                       0,
32578 83C9                      0000            .word	0
32579 83CB                      0000            .word	0
32580                                           ! 5512                             3200,
32581 83CD                      0C80            .word	$C80
32582                                           ! 5513                        1600,
32583 83CF                      0640            .word	$640
32584                                           ! 5514                        1200,
32585 83D1                      04B0            .word	$4B0
32586                                           ! 5515                      8,
32587 83D3                        08            .byte	8
32588                                           ! 5516                      16,
32589 83D4                        10            .byte	$10
32590                                           ! 5517                           1,
32591 83D5                        01            .byte	1
32592                                           ! 5518                         15,
32593 83D6                        0F            .byte	$F
32594                                           ! 5519                          59,
32595 83D7                        3B            .byte	$3B
32596                                           ! 5520                        0x06,
32597 83D8                        06            .byte	6
32598                                           ! 5521                     0,
32599 83D9                        00            .byte	0
32600                                           ! 5522                               3,
32601 83DA                        03            .byte	3
32602                                           ! 5523                          0,
32603 83DB                        00            .byte	0
32604                                           ! 5524                        5,
32605 83DC                        05            .byte	5
32606                                           ! 5525                             10,
32607 83DD                        0A            .byte	$A
32608                                           ! 5526                          5,
32609 83DE                        05            .byte	5
32610                                           ! 5527                               5,
32611 83DF                        05            .byte	5
32612                                           ! 5528                         5,
32613 83E0                        05            .byte	5
32614                                           ! 5529                              0,
32615 83E1                        00            .byte	0
32616                                           ! 5530                         1,
32617 83E2                        01            .byte	1
32618                                           ! 5531                              15,
32619 83E3                        0F            .byte	$F
32620                                           ! 5532                                0,
32621 83E4                        00            .byte	0
32622                                           ! 5533                        0xE0000000,
32623 83E5                      0000            .word	0
32624 83E7                      E000            .word	$E000
32625                                           ! 5534                               0,
32626 83E9                      0000            .word	0
32627 83EB                      0000            .word	0
32628                                           ! 5535                             0,
32629 83ED                      0000            .word	0
32630                                           ! 5536                                3200,
32631 83EF                      0C80            .word	$C80
32632                                           ! 5537                             0,
32633 83F1                        00            .byte	0
32634                                           ! 5538                             0,
32635 83F2                        00            .byte	0
32636                                           ! 5539                           5,
32637 83F3                        05            .byte	5
32638                                           ! 5540                                10,
32639 83F4                        0A            .byte	$A
32640                                           ! 5541                             5,
32641 83F5                        05            .byte	5
32642                                           ! 5542                                  5,
32643 83F6                        05            .byte	5
32644                                           ! 5543                            5,
32645 83F7                        05            .byte	5
32646                                           ! 5544                                 0,
32647 83F8                        00            .byte	0
32648                                           ! 5545                            1,
32649 83F9                        01            .byte	1
32650                                           ! 5546                                 15,
32651 83FA                        0F            .byte	$F
32652                                           ! 5547                          0,
32653 83FB                      0000            .word	0
32654 83FD                      0000            .word	0
32655                                           ! 5548 } },
32656                                           ! 5549 { 0x011e,
32657 83FF                      011E            .word	$11E
32658                                           ! 5550 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32659 8401                      009B            .word	$9B
32660                                           ! 5551                           0x01 | 0x02 | 0x04,
32661 8403                        07            .byte	7
32662                                           ! 5552                           0,
32663 8404                        00            .byte	0
32664                                           ! 5553                           64,
32665 8405                      0040            .word	$40
32666                                           ! 5554                    64,
32667 8407                      0040            .word	$40
32668                                           ! 5555                        0xA000,
32669 8409                      A000            .word	$A000
32670                                           ! 5556                        0x0000,
32671 840B                      0000            .word	0
32672                                           ! 5557                       0,
32673 840D                      0000            .word	0
32674 840F                      0000            .word	0
32675                                           ! 5558                             3200,
32676 8411                      0C80            .word	$C80
32677                                           ! 5559                        1600,
32678 8413                      0640            .word	$640
32679                                           ! 5560                        1200,
32680 8415                      04B0            .word	$4B0
32681                                           ! 5561                      8,
32682 8417                        08            .byte	8
32683                                           ! 5562                      16,
32684 8418                        10            .byte	$10
32685                                           ! 5563                           1,
32686 8419                        01            .byte	1
32687                                           ! 5564                         16,
32688 841A                        10            .byte	$10
32689                                           ! 5565                          59,
32690 841B                        3B            .byte	$3B
32691                                           ! 5566                        0x06,
32692 841C                        06            .byte	6
32693                                           ! 5567                     0,
32694 841D                        00            .byte	0
32695                                           ! 5568                               3,
32696 841E                        03            .byte	3
32697                                           ! 5569                          0,
32698 841F                        00            .byte	0
32699                                           ! 5570                        5
32700                                           ! 5570 ,
32701 8420                        05            .byte	5
32702                                           ! 5571                             11,
32703 8421                        0B            .byte	$B
32704                                           ! 5572                          6,
32705 8422                        06            .byte	6
32706                                           ! 5573                               5,
32707 8423                        05            .byte	5
32708                                           ! 5574                         5,
32709 8424                        05            .byte	5
32710                                           ! 5575                              0,
32711 8425                        00            .byte	0
32712                                           ! 5576                         0,
32713 8426                        00            .byte	0
32714                                           ! 5577                              0,
32715 8427                        00            .byte	0
32716                                           ! 5578                                0,
32717 8428                        00            .byte	0
32718                                           ! 5579                        0xE0000000,
32719 8429                      0000            .word	0
32720 842B                      E000            .word	$E000
32721                                           ! 5580                               0,
32722 842D                      0000            .word	0
32723 842F                      0000            .word	0
32724                                           ! 5581                             0,
32725 8431                      0000            .word	0
32726                                           ! 5582                                3200,
32727 8433                      0C80            .word	$C80
32728                                           ! 5583                             0,
32729 8435                        00            .byte	0
32730                                           ! 5584                             0,
32731 8436                        00            .byte	0
32732                                           ! 5585                           5,
32733 8437                        05            .byte	5
32734                                           ! 5586                                11,
32735 8438                        0B            .byte	$B
32736                                           ! 5587                             6,
32737 8439                        06            .byte	6
32738                                           ! 5588                                  5,
32739 843A                        05            .byte	5
32740                                           ! 5589                            5,
32741 843B                        05            .byte	5
32742                                           ! 5590                                 0,
32743 843C                        00            .byte	0
32744                                           ! 5591                            0,
32745 843D                        00            .byte	0
32746                                           ! 5592                                 0,
32747 843E                        00            .byte	0
32748                                           ! 5593                          0,
32749 843F                      0000            .word	0
32750 8441                      0000            .word	0
32751                                           ! 5594 } },
32752                                           ! 5595 { 0x011f,
32753 8443                      011F            .word	$11F
32754                                           ! 5596 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32755 8445                      009B            .word	$9B
32756                                           ! 5597                           0x01 | 0x02 | 0x04,
32757 8447                        07            .byte	7
32758                                           ! 5598                           0,
32759 8448                        00            .byte	0
32760                                           ! 5599                           64,
32761 8449                      0040            .word	$40
32762                                           ! 5600                    64,
32763 844B                      0040            .word	$40
32764                                           ! 5601                        0xA000,
32765 844D                      A000            .word	$A000
32766                                           ! 5602                        0x0000,
32767 844F                      0000            .word	0
32768                                           ! 5603                       0,
32769 8451                      0000            .word	0
32770 8453                      0000            .word	0
32771                                           ! 5604                             4800,
32772 8455                      12C0            .word	$12C0
32773                                           ! 5605                        1600,
32774 8457                      0640            .word	$640
32775                                           ! 5606                        1200,
32776 8459                      04B0            .word	$4B0
32777                                           ! 5607                      8,
32778 845B                        08            .byte	8
32779                                           ! 5608                      16,
32780 845C                        10            .byte	$10
32781                                           ! 5609                           1,
32782 845D                        01            .byte	1
32783                                           ! 5610                         24,
32784 845E                        18            .byte	$18
32785                                           ! 5611                          88,
32786 845F                        58            .byte	$58
32787                                           ! 5612                        0x06,
32788 8460                        06            .byte	6
32789                                           ! 5613                     0,
32790 8461                        00            .byte	0
32791                                           ! 5614                               1,
32792 8462                        01            .byte	1
32793                                           ! 5615                          0,
32794 8463                        00            .byte	0
32795                                           ! 5616                        8,
32796 8464                        08            .byte	8
32797                                           ! 5617                             16,
32798 8465                        10            .byte	$10
32799                                           ! 5618                          8,
32800 8466                        08            .byte	8
32801                                           ! 5619                               8,
32802 8467                        08            .byte	8
32803                                           ! 5620                         8,
32804 8468                        08            .byte	8
32805                                           ! 5621                              0,
32806 8469                        00            .byte	0
32807                                           ! 5622                         0,
32808 846A                        00            .byte	0
32809                                           ! 5623                              0,
32810 846B                        00            .byte	0
32811                                           ! 5624                                0,
32812 846C                        00            .byte	0
32813                                           ! 5625                        0xE0000000,
32814 846D                      0000            .word	0
32815 846F                      E000            .word	$E000
32816                                           ! 5626                               0,
32817 8471                      0000            .word	0
32818 8473                      0000            .word	0
32819                                           ! 5627                             0,
32820 8475                      0000            .word	0
32821                                           ! 5628                                4800,
32822 8477                      12C0            .word	$12C0
32823                                           ! 5629                             0,
32824 8479                        00            .byte	0
32825                                           ! 5630                             0,
32826 847A                        00            .byte	0
32827                                           ! 5631                           8,
32828 847B                        08            .byte	8
32829                                           ! 5632                                16,
32830 847C                        10            .byte	$10
32831                                           ! 5633                             8,
32832 847D                        08            .byte	8
32833                                           ! 5634                                  8,
32834 847E                        08            .byte	8
32835                                           ! 5635                            8,
32836 847F                        08            .byte	8
32837                                           ! 5636                                 0,
32838 8480                        00            .byte	0
32839                                           ! 5637                            0,
32840 8481                        00            .byte	0
32841                                           ! 5638    
32842                                           ! 5638                              0,
32843 8482                        00            .byte	0
32844                                           ! 5639                          0,
32845 8483                      0000            .word	0
32846 8485                      0000            .word	0
32847                                           ! 5640 } },
32848                                           ! 5641 { 0x0140,
32849 8487                      0140            .word	$140
32850                                           ! 5642 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32851 8489                      009B            .word	$9B
32852                                           ! 5643                           0x01 | 0x02 | 0x04,
32853 848B                        07            .byte	7
32854                                           ! 5644                           0,
32855 848C                        00            .byte	0
32856                                           ! 5645                           64,
32857 848D                      0040            .word	$40
32858                                           ! 5646                    64,
32859 848F                      0040            .word	$40
32860                                           ! 5647                        0xA000,
32861 8491                      A000            .word	$A000
32862                                           ! 5648                        0x0000,
32863 8493                      0000            .word	0
32864                                           ! 5649                       0,
32865 8495                      0000            .word	0
32866 8497                      0000            .word	0
32867                                           ! 5650                             1280,
32868 8499                      0500            .word	$500
32869                                           ! 5651                        320,
32870 849B                      0140            .word	$140
32871                                           ! 5652                        200,
32872 849D                      00C8            .word	$C8
32873                                           ! 5653                      8,
32874 849F                        08            .byte	8
32875                                           ! 5654                      16,
32876 84A0                        10            .byte	$10
32877                                           ! 5655                           1,
32878 84A1                        01            .byte	1
32879                                           ! 5656                         32,
32880 84A2                        20            .byte	$20
32881                                           ! 5657                          4,
32882 84A3                        04            .byte	4
32883                                           ! 5658                        0x06,
32884 84A4                        06            .byte	6
32885                                           ! 5659                     0,
32886 84A5                        00            .byte	0
32887                                           ! 5660                               64,
32888 84A6                        40            .byte	$40
32889                                           ! 5661                          0,
32890 84A7                        00            .byte	0
32891                                           ! 5662                        8,
32892 84A8                        08            .byte	8
32893                                           ! 5663                             16,
32894 84A9                        10            .byte	$10
32895                                           ! 5664                          8,
32896 84AA                        08            .byte	8
32897                                           ! 5665                               8,
32898 84AB                        08            .byte	8
32899                                           ! 5666                         8,
32900 84AC                        08            .byte	8
32901                                           ! 5667                              0,
32902 84AD                        00            .byte	0
32903                                           ! 5668                         8,
32904 84AE                        08            .byte	8
32905                                           ! 5669                              24,
32906 84AF                        18            .byte	$18
32907                                           ! 5670                                0x02,
32908 84B0                        02            .byte	2
32909                                           ! 5671                        0xE0000000,
32910 84B1                      0000            .word	0
32911 84B3                      E000            .word	$E000
32912                                           ! 5672                               0,
32913 84B5                      0000            .word	0
32914 84B7                      0000            .word	0
32915                                           ! 5673                             0,
32916 84B9                      0000            .word	0
32917                                           ! 5674                                1280,
32918 84BB                      0500            .word	$500
32919                                           ! 5675                             0,
32920 84BD                        00            .byte	0
32921                                           ! 5676                             0,
32922 84BE                        00            .byte	0
32923                                           ! 5677                           8,
32924 84BF                        08            .byte	8
32925                                           ! 5678                                16,
32926 84C0                        10            .byte	$10
32927                                           ! 5679                             8,
32928 84C1                        08            .byte	8
32929                                           ! 5680                                  8,
32930 84C2                        08            .byte	8
32931                                           ! 5681                            8,
32932 84C3                        08            .byte	8
32933                                           ! 5682                                 0,
32934 84C4                        00            .byte	0
32935                                           ! 5683                            8,
32936 84C5                        08            .byte	8
32937                                           ! 5684                                 24,
32938 84C6                        18            .byte	$18
32939                                           ! 5685                          0,
32940 84C7                      0000            .word	0
32941 84C9                      0000            .word	0
32942                                           ! 5686 } },
32943                                           ! 5687 { 0x0141,
32944 84CB                      0141            .word	$141
32945                                           ! 5688 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32946 84CD                      009B            .word	$9B
32947                                           ! 5689                           0x01 | 0x02 | 0x04,
32948 84CF                        07            .byte	7
32949                                           ! 5690                           0,
32950 84D0                        00            .byte	0
32951                                           ! 5691                           64,
32952 84D1                      0040            .word	$40
32953                                           ! 5692                    64,
32954 84D3                      0040            .word	$40
32955                                           ! 5693                        0xA000,
32956 84D5                      A000            .word	$A000
32957                                           ! 5694                        0x0000,
32958 84D7                      0000            .word	0
32959                                           ! 5695                       0,
32960 84D9                      0000            .word	0
32961 84DB                      0000            .word	0
32962                                           ! 5696                             2560,
32963 84DD                      0A00            .word	$A00
32964                                           ! 5697                        640,
32965 84DF                      0280            .word	$280
32966                                           ! 5698                        400,
32967 84E1                      0190            .word	$190
32968                                           ! 5699                      8,
32969 84E3                        08            .byte	8
32970                                           ! 5700                      16,
32971 84E4                        10            .byte	$10
32972                                           ! 5701                           1,
32973 84E5                        01            .byte	1
32974                                           ! 5702                         32,
32975 84E6                        20            .byte	$20
32976                                           ! 5703                          16,
32977 84E7                        10            .byte	$10
32978                                           ! 5704                        0x06,
32979 84E8                        06            .byte	6
32980                                           ! 5705                     0,
32981 84E9                        00            .byte	0
32982                                           ! 5706                               15,
32983 84EA                        0F            .byte	$F
32984                                           ! 5707                         
32985                                           ! 5707  0,
32986 84EB                        00            .byte	0
32987                                           ! 5708                        8,
32988 84EC                        08            .byte	8
32989                                           ! 5709                             16,
32990 84ED                        10            .byte	$10
32991                                           ! 5710                          8,
32992 84EE                        08            .byte	8
32993                                           ! 5711                               8,
32994 84EF                        08            .byte	8
32995                                           ! 5712                         8,
32996 84F0                        08            .byte	8
32997                                           ! 5713                              0,
32998 84F1                        00            .byte	0
32999                                           ! 5714                         8,
33000 84F2                        08            .byte	8
33001                                           ! 5715                              24,
33002 84F3                        18            .byte	$18
33003                                           ! 5716                                0x02,
33004 84F4                        02            .byte	2
33005                                           ! 5717                        0xE0000000,
33006 84F5                      0000            .word	0
33007 84F7                      E000            .word	$E000
33008                                           ! 5718                               0,
33009 84F9                      0000            .word	0
33010 84FB                      0000            .word	0
33011                                           ! 5719                             0,
33012 84FD                      0000            .word	0
33013                                           ! 5720                                2560,
33014 84FF                      0A00            .word	$A00
33015                                           ! 5721                             0,
33016 8501                        00            .byte	0
33017                                           ! 5722                             0,
33018 8502                        00            .byte	0
33019                                           ! 5723                           8,
33020 8503                        08            .byte	8
33021                                           ! 5724                                16,
33022 8504                        10            .byte	$10
33023                                           ! 5725                             8,
33024 8505                        08            .byte	8
33025                                           ! 5726                                  8,
33026 8506                        08            .byte	8
33027                                           ! 5727                            8,
33028 8507                        08            .byte	8
33029                                           ! 5728                                 0,
33030 8508                        00            .byte	0
33031                                           ! 5729                            8,
33032 8509                        08            .byte	8
33033                                           ! 5730                                 24,
33034 850A                        18            .byte	$18
33035                                           ! 5731                          0,
33036 850B                      0000            .word	0
33037 850D                      0000            .word	0
33038                                           ! 5732 } },
33039                                           ! 5733 { 0x0142,
33040 850F                      0142            .word	$142
33041                                           ! 5734 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33042 8511                      009B            .word	$9B
33043                                           ! 5735                           0x01 | 0x02 | 0x04,
33044 8513                        07            .byte	7
33045                                           ! 5736                           0,
33046 8514                        00            .byte	0
33047                                           ! 5737                           64,
33048 8515                      0040            .word	$40
33049                                           ! 5738                    64,
33050 8517                      0040            .word	$40
33051                                           ! 5739                        0xA000,
33052 8519                      A000            .word	$A000
33053                                           ! 5740                        0x0000,
33054 851B                      0000            .word	0
33055                                           ! 5741                       0,
33056 851D                      0000            .word	0
33057 851F                      0000            .word	0
33058                                           ! 5742                             2560,
33059 8521                      0A00            .word	$A00
33060                                           ! 5743                        640,
33061 8523                      0280            .word	$280
33062                                           ! 5744                        480,
33063 8525                      01E0            .word	$1E0
33064                                           ! 5745                      8,
33065 8527                        08            .byte	8
33066                                           ! 5746                      16,
33067 8528                        10            .byte	$10
33068                                           ! 5747                           1,
33069 8529                        01            .byte	1
33070                                           ! 5748                         32,
33071 852A                        20            .byte	$20
33072                                           ! 5749                          19,
33073 852B                        13            .byte	$13
33074                                           ! 5750                        0x06,
33075 852C                        06            .byte	6
33076                                           ! 5751                     0,
33077 852D                        00            .byte	0
33078                                           ! 5752                               12,
33079 852E                        0C            .byte	$C
33080                                           ! 5753                          0,
33081 852F                        00            .byte	0
33082                                           ! 5754                        8,
33083 8530                        08            .byte	8
33084                                           ! 5755                             16,
33085 8531                        10            .byte	$10
33086                                           ! 5756                          8,
33087 8532                        08            .byte	8
33088                                           ! 5757                               8,
33089 8533                        08            .byte	8
33090                                           ! 5758                         8,
33091 8534                        08            .byte	8
33092                                           ! 5759                              0,
33093 8535                        00            .byte	0
33094                                           ! 5760                         8,
33095 8536                        08            .byte	8
33096                                           ! 5761                              24,
33097 8537                        18            .byte	$18
33098                                           ! 5762                                0x02,
33099 8538                        02            .byte	2
33100                                           ! 5763                        0xE0000000,
33101 8539                      0000            .word	0
33102 853B                      E000            .word	$E000
33103                                           ! 5764                               0,
33104 853D                      0000            .word	0
33105 853F                      0000            .word	0
33106                                           ! 5765                             0,
33107 8541                      0000            .word	0
33108                                           ! 5766                                2560,
33109 8543                      0A00            .word	$A00
33110                                           ! 5767                             0,
33111 8545                        00            .byte	0
33112                                           ! 5768                             0,
33113 8546                        00            .byte	0
33114                                           ! 5769                           8,
33115 8547                        08            .byte	8
33116                                           ! 5770                                16,
33117 8548                        10            .byte	$10
33118                                           ! 5771                             8,
33119 8549                        08            .byte	8
33120                                           ! 5772                                  8,
33121 854A                        08            .byte	8
33122                                           ! 5773                            8,
33123 854B                        08            .byte	8
33124                                           ! 5774                                 
33125                                           ! 5774 0,
33126 854C                        00            .byte	0
33127                                           ! 5775                            8,
33128 854D                        08            .byte	8
33129                                           ! 5776                                 24,
33130 854E                        18            .byte	$18
33131                                           ! 5777                          0,
33132 854F                      0000            .word	0
33133 8551                      0000            .word	0
33134                                           ! 5778 } },
33135                                           ! 5779 { 0x0143,
33136 8553                      0143            .word	$143
33137                                           ! 5780 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33138 8555                      009B            .word	$9B
33139                                           ! 5781                           0x01 | 0x02 | 0x04,
33140 8557                        07            .byte	7
33141                                           ! 5782                           0,
33142 8558                        00            .byte	0
33143                                           ! 5783                           64,
33144 8559                      0040            .word	$40
33145                                           ! 5784                    64,
33146 855B                      0040            .word	$40
33147                                           ! 5785                        0xA000,
33148 855D                      A000            .word	$A000
33149                                           ! 5786                        0x0000,
33150 855F                      0000            .word	0
33151                                           ! 5787                       0,
33152 8561                      0000            .word	0
33153 8563                      0000            .word	0
33154                                           ! 5788                             3200,
33155 8565                      0C80            .word	$C80
33156                                           ! 5789                        800,
33157 8567                      0320            .word	$320
33158                                           ! 5790                        600,
33159 8569                      0258            .word	$258
33160                                           ! 5791                      8,
33161 856B                        08            .byte	8
33162                                           ! 5792                      16,
33163 856C                        10            .byte	$10
33164                                           ! 5793                           1,
33165 856D                        01            .byte	1
33166                                           ! 5794                         32,
33167 856E                        20            .byte	$20
33168                                           ! 5795                          30,
33169 856F                        1E            .byte	$1E
33170                                           ! 5796                        0x06,
33171 8570                        06            .byte	6
33172                                           ! 5797                     0,
33173 8571                        00            .byte	0
33174                                           ! 5798                               7,
33175 8572                        07            .byte	7
33176                                           ! 5799                          0,
33177 8573                        00            .byte	0
33178                                           ! 5800                        8,
33179 8574                        08            .byte	8
33180                                           ! 5801                             16,
33181 8575                        10            .byte	$10
33182                                           ! 5802                          8,
33183 8576                        08            .byte	8
33184                                           ! 5803                               8,
33185 8577                        08            .byte	8
33186                                           ! 5804                         8,
33187 8578                        08            .byte	8
33188                                           ! 5805                              0,
33189 8579                        00            .byte	0
33190                                           ! 5806                         8,
33191 857A                        08            .byte	8
33192                                           ! 5807                              24,
33193 857B                        18            .byte	$18
33194                                           ! 5808                                0x02,
33195 857C                        02            .byte	2
33196                                           ! 5809                        0xE0000000,
33197 857D                      0000            .word	0
33198 857F                      E000            .word	$E000
33199                                           ! 5810                               0,
33200 8581                      0000            .word	0
33201 8583                      0000            .word	0
33202                                           ! 5811                             0,
33203 8585                      0000            .word	0
33204                                           ! 5812                                3200,
33205 8587                      0C80            .word	$C80
33206                                           ! 5813                             0,
33207 8589                        00            .byte	0
33208                                           ! 5814                             0,
33209 858A                        00            .byte	0
33210                                           ! 5815                           8,
33211 858B                        08            .byte	8
33212                                           ! 5816                                16,
33213 858C                        10            .byte	$10
33214                                           ! 5817                             8,
33215 858D                        08            .byte	8
33216                                           ! 5818                                  8,
33217 858E                        08            .byte	8
33218                                           ! 5819                            8,
33219 858F                        08            .byte	8
33220                                           ! 5820                                 0,
33221 8590                        00            .byte	0
33222                                           ! 5821                            8,
33223 8591                        08            .byte	8
33224                                           ! 5822                                 24,
33225 8592                        18            .byte	$18
33226                                           ! 5823                          0,
33227 8593                      0000            .word	0
33228 8595                      0000            .word	0
33229                                           ! 5824 } },
33230                                           ! 5825 { 0x0144,
33231 8597                      0144            .word	$144
33232                                           ! 5826 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33233 8599                      009B            .word	$9B
33234                                           ! 5827                           0x01 | 0x02 | 0x04,
33235 859B                        07            .byte	7
33236                                           ! 5828                           0,
33237 859C                        00            .byte	0
33238                                           ! 5829                           64,
33239 859D                      0040            .word	$40
33240                                           ! 5830                    64,
33241 859F                      0040            .word	$40
33242                                           ! 5831                        0xA000,
33243 85A1                      A000            .word	$A000
33244                                           ! 5832                        0x0000,
33245 85A3                      0000            .word	0
33246                                           ! 5833                       0,
33247 85A5                      0000            .word	0
33248 85A7                      0000            .word	0
33249                                           ! 5834                             4096,
33250 85A9                      1000            .word	$1000
33251                                           ! 5835                        1024,
33252 85AB                      0400            .word	$400
33253                                           ! 5836                        768,
33254 85AD                      0300            .word	$300
33255                                           ! 5837                      8,
33256 85AF                        08            .byte	8
33257                                           ! 5838                      16,
33258 85B0                        10            .byte	$10
33259                                           ! 5839                           1,
33260 85B1                        01            .byte	1
33261                                           ! 5840                         32,
33262 85B2                        20            .byte	$20
33263                                           ! 5841                          48,
33264 85B3                        30            .byte	$30
33265                                           ! 5842                        0x06,
33266 85B4                        06            .byte	6
33267                                           ! 5843                     0,
33268 85B5                        00            .byte	0
33269                                           ! 5844                     
33270                                           ! 5844           4,
33271 85B6                        04            .byte	4
33272                                           ! 5845                          0,
33273 85B7                        00            .byte	0
33274                                           ! 5846                        8,
33275 85B8                        08            .byte	8
33276                                           ! 5847                             16,
33277 85B9                        10            .byte	$10
33278                                           ! 5848                          8,
33279 85BA                        08            .byte	8
33280                                           ! 5849                               8,
33281 85BB                        08            .byte	8
33282                                           ! 5850                         8,
33283 85BC                        08            .byte	8
33284                                           ! 5851                              0,
33285 85BD                        00            .byte	0
33286                                           ! 5852                         8,
33287 85BE                        08            .byte	8
33288                                           ! 5853                              24,
33289 85BF                        18            .byte	$18
33290                                           ! 5854                                0x02,
33291 85C0                        02            .byte	2
33292                                           ! 5855                        0xE0000000,
33293 85C1                      0000            .word	0
33294 85C3                      E000            .word	$E000
33295                                           ! 5856                               0,
33296 85C5                      0000            .word	0
33297 85C7                      0000            .word	0
33298                                           ! 5857                             0,
33299 85C9                      0000            .word	0
33300                                           ! 5858                                4096,
33301 85CB                      1000            .word	$1000
33302                                           ! 5859                             0,
33303 85CD                        00            .byte	0
33304                                           ! 5860                             0,
33305 85CE                        00            .byte	0
33306                                           ! 5861                           8,
33307 85CF                        08            .byte	8
33308                                           ! 5862                                16,
33309 85D0                        10            .byte	$10
33310                                           ! 5863                             8,
33311 85D1                        08            .byte	8
33312                                           ! 5864                                  8,
33313 85D2                        08            .byte	8
33314                                           ! 5865                            8,
33315 85D3                        08            .byte	8
33316                                           ! 5866                                 0,
33317 85D4                        00            .byte	0
33318                                           ! 5867                            8,
33319 85D5                        08            .byte	8
33320                                           ! 5868                                 24,
33321 85D6                        18            .byte	$18
33322                                           ! 5869                          0,
33323 85D7                      0000            .word	0
33324 85D9                      0000            .word	0
33325                                           ! 5870 } },
33326                                           ! 5871 { 0x0145,
33327 85DB                      0145            .word	$145
33328                                           ! 5872 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33329 85DD                      009B            .word	$9B
33330                                           ! 5873                           0x01 | 0x02 | 0x04,
33331 85DF                        07            .byte	7
33332                                           ! 5874                           0,
33333 85E0                        00            .byte	0
33334                                           ! 5875                           64,
33335 85E1                      0040            .word	$40
33336                                           ! 5876                    64,
33337 85E3                      0040            .word	$40
33338                                           ! 5877                        0xA000,
33339 85E5                      A000            .word	$A000
33340                                           ! 5878                        0x0000,
33341 85E7                      0000            .word	0
33342                                           ! 5879                       0,
33343 85E9                      0000            .word	0
33344 85EB                      0000            .word	0
33345                                           ! 5880                             5120,
33346 85ED                      1400            .word	$1400
33347                                           ! 5881                        1280,
33348 85EF                      0500            .word	$500
33349                                           ! 5882                        1024,
33350 85F1                      0400            .word	$400
33351                                           ! 5883                      8,
33352 85F3                        08            .byte	8
33353                                           ! 5884                      16,
33354 85F4                        10            .byte	$10
33355                                           ! 5885                           1,
33356 85F5                        01            .byte	1
33357                                           ! 5886                         32,
33358 85F6                        20            .byte	$20
33359                                           ! 5887                          80,
33360 85F7                        50            .byte	$50
33361                                           ! 5888                        0x06,
33362 85F8                        06            .byte	6
33363                                           ! 5889                     0,
33364 85F9                        00            .byte	0
33365                                           ! 5890                               2,
33366 85FA                        02            .byte	2
33367                                           ! 5891                          0,
33368 85FB                        00            .byte	0
33369                                           ! 5892                        8,
33370 85FC                        08            .byte	8
33371                                           ! 5893                             16,
33372 85FD                        10            .byte	$10
33373                                           ! 5894                          8,
33374 85FE                        08            .byte	8
33375                                           ! 5895                               8,
33376 85FF                        08            .byte	8
33377                                           ! 5896                         8,
33378 8600                        08            .byte	8
33379                                           ! 5897                              0,
33380 8601                        00            .byte	0
33381                                           ! 5898                         8,
33382 8602                        08            .byte	8
33383                                           ! 5899                              24,
33384 8603                        18            .byte	$18
33385                                           ! 5900                                0x02,
33386 8604                        02            .byte	2
33387                                           ! 5901                        0xE0000000,
33388 8605                      0000            .word	0
33389 8607                      E000            .word	$E000
33390                                           ! 5902                               0,
33391 8609                      0000            .word	0
33392 860B                      0000            .word	0
33393                                           ! 5903                             0,
33394 860D                      0000            .word	0
33395                                           ! 5904                                5120,
33396 860F                      1400            .word	$1400
33397                                           ! 5905                             0,
33398 8611                        00            .byte	0
33399                                           ! 5906                             0,
33400 8612                        00            .byte	0
33401                                           ! 5907                           8,
33402 8613                        08            .byte	8
33403                                           ! 5908                                16,
33404 8614                        10            .byte	$10
33405                                           ! 5909                             8,
33406 8615                        08            .byte	8
33407                                           ! 5910                                  8,
33408 8616                        08            .byte	8
33409                                           ! 5911                         
33410                                           ! 5911    8,
33411 8617                        08            .byte	8
33412                                           ! 5912                                 0,
33413 8618                        00            .byte	0
33414                                           ! 5913                            8,
33415 8619                        08            .byte	8
33416                                           ! 5914                                 24,
33417 861A                        18            .byte	$18
33418                                           ! 5915                          0,
33419 861B                      0000            .word	0
33420 861D                      0000            .word	0
33421                                           ! 5916 } },
33422                                           ! 5917 { 0x0146,
33423 861F                      0146            .word	$146
33424                                           ! 5918 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33425 8621                      009B            .word	$9B
33426                                           ! 5919                           0x01 | 0x02 | 0x04,
33427 8623                        07            .byte	7
33428                                           ! 5920                           0,
33429 8624                        00            .byte	0
33430                                           ! 5921                           64,
33431 8625                      0040            .word	$40
33432                                           ! 5922                    64,
33433 8627                      0040            .word	$40
33434                                           ! 5923                        0xA000,
33435 8629                      A000            .word	$A000
33436                                           ! 5924                        0x0000,
33437 862B                      0000            .word	0
33438                                           ! 5925                       0,
33439 862D                      0000            .word	0
33440 862F                      0000            .word	0
33441                                           ! 5926                             320,
33442 8631                      0140            .word	$140
33443                                           ! 5927                        320,
33444 8633                      0140            .word	$140
33445                                           ! 5928                        200,
33446 8635                      00C8            .word	$C8
33447                                           ! 5929                      8,
33448 8637                        08            .byte	8
33449                                           ! 5930                      16,
33450 8638                        10            .byte	$10
33451                                           ! 5931                           1,
33452 8639                        01            .byte	1
33453                                           ! 5932                         8,
33454 863A                        08            .byte	8
33455                                           ! 5933                          1,
33456 863B                        01            .byte	1
33457                                           ! 5934                        0x04,
33458 863C                        04            .byte	4
33459                                           ! 5935                     0,
33460 863D                        00            .byte	0
33461                                           ! 5936                               261,
33462 863E                        05            .byte	5
33463                                           ! 5937                          0,
33464 863F                        00            .byte	0
33465                                           ! 5938                        0,
33466 8640                        00            .byte	0
33467                                           ! 5939                             0,
33468 8641                        00            .byte	0
33469                                           ! 5940                          0,
33470 8642                        00            .byte	0
33471                                           ! 5941                               0,
33472 8643                        00            .byte	0
33473                                           ! 5942                         0,
33474 8644                        00            .byte	0
33475                                           ! 5943                              0,
33476 8645                        00            .byte	0
33477                                           ! 5944                         0,
33478 8646                        00            .byte	0
33479                                           ! 5945                              0,
33480 8647                        00            .byte	0
33481                                           ! 5946                                0,
33482 8648                        00            .byte	0
33483                                           ! 5947                        0xE0000000,
33484 8649                      0000            .word	0
33485 864B                      E000            .word	$E000
33486                                           ! 5948                               0,
33487 864D                      0000            .word	0
33488 864F                      0000            .word	0
33489                                           ! 5949                             0,
33490 8651                      0000            .word	0
33491                                           ! 5950                                320,
33492 8653                      0140            .word	$140
33493                                           ! 5951                             0,
33494 8655                        00            .byte	0
33495                                           ! 5952                             0,
33496 8656                        00            .byte	0
33497                                           ! 5953                           0,
33498 8657                        00            .byte	0
33499                                           ! 5954                                0,
33500 8658                        00            .byte	0
33501                                           ! 5955                             0,
33502 8659                        00            .byte	0
33503                                           ! 5956                                  0,
33504 865A                        00            .byte	0
33505                                           ! 5957                            0,
33506 865B                        00            .byte	0
33507                                           ! 5958                                 0,
33508 865C                        00            .byte	0
33509                                           ! 5959                            0,
33510 865D                        00            .byte	0
33511                                           ! 5960                                 0,
33512 865E                        00            .byte	0
33513                                           ! 5961                          0,
33514 865F                      0000            .word	0
33515 8661                      0000            .word	0
33516                                           ! 5962 } },
33517                                           ! 5963 { 0x0147,
33518 8663                      0147            .word	$147
33519                                           ! 5964 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33520 8665                      009B            .word	$9B
33521                                           ! 5965                           0x01 | 0x02 | 0x04,
33522 8667                        07            .byte	7
33523                                           ! 5966                           0,
33524 8668                        00            .byte	0
33525                                           ! 5967                           64,
33526 8669                      0040            .word	$40
33527                                           ! 5968                    64,
33528 866B                      0040            .word	$40
33529                                           ! 5969                        0xA000,
33530 866D                      A000            .word	$A000
33531                                           ! 5970                        0x0000,
33532 866F                      0000            .word	0
33533                                           ! 5971                       0,
33534 8671                      0000            .word	0
33535 8673                      0000            .word	0
33536                                           ! 5972                             6400,
33537 8675                      1900            .word	$1900
33538                                           ! 5973                        1600,
33539 8677                      0640            .word	$640
33540                                           ! 5974                        1200,
33541 8679                      04B0            .word	$4B0
33542                                           ! 5975                      8,
33543 867B                        08            .byte	8
33544                                           ! 5976                      16,
33545 867C                        10            .byte	$10
33546                                           ! 5977                           1,
33547 867D                        01            .byte	1
33548                                           ! 5978                         32,
33549 867E                        20            .byte	$20
33550                                           ! 5979                          118,
33551 867F                        76            .byte	$76
33552                                           ! 5980                        0x06,
33553 8680                        06            .byte	6
33554                                           ! 5981             
33555                                           ! 5981         0,
33556 8681                        00            .byte	0
33557                                           ! 5982                               1,
33558 8682                        01            .byte	1
33559                                           ! 5983                          0,
33560 8683                        00            .byte	0
33561                                           ! 5984                        8,
33562 8684                        08            .byte	8
33563                                           ! 5985                             16,
33564 8685                        10            .byte	$10
33565                                           ! 5986                          8,
33566 8686                        08            .byte	8
33567                                           ! 5987                               8,
33568 8687                        08            .byte	8
33569                                           ! 5988                         8,
33570 8688                        08            .byte	8
33571                                           ! 5989                              0,
33572 8689                        00            .byte	0
33573                                           ! 5990                         8,
33574 868A                        08            .byte	8
33575                                           ! 5991                              24,
33576 868B                        18            .byte	$18
33577                                           ! 5992                                0x02,
33578 868C                        02            .byte	2
33579                                           ! 5993                        0xE0000000,
33580 868D                      0000            .word	0
33581 868F                      E000            .word	$E000
33582                                           ! 5994                               0,
33583 8691                      0000            .word	0
33584 8693                      0000            .word	0
33585                                           ! 5995                             0,
33586 8695                      0000            .word	0
33587                                           ! 5996                                6400,
33588 8697                      1900            .word	$1900
33589                                           ! 5997                             0,
33590 8699                        00            .byte	0
33591                                           ! 5998                             0,
33592 869A                        00            .byte	0
33593                                           ! 5999                           8,
33594 869B                        08            .byte	8
33595                                           ! 6000                                16,
33596 869C                        10            .byte	$10
33597                                           ! 6001                             8,
33598 869D                        08            .byte	8
33599                                           ! 6002                                  8,
33600 869E                        08            .byte	8
33601                                           ! 6003                            8,
33602 869F                        08            .byte	8
33603                                           ! 6004                                 0,
33604 86A0                        00            .byte	0
33605                                           ! 6005                            8,
33606 86A1                        08            .byte	8
33607                                           ! 6006                                 24,
33608 86A2                        18            .byte	$18
33609                                           ! 6007                          0,
33610 86A3                      0000            .word	0
33611 86A5                      0000            .word	0
33612                                           ! 6008 } },
33613                                           ! 6009 { 0x0148,
33614 86A7                      0148            .word	$148
33615                                           ! 6010 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33616 86A9                      009B            .word	$9B
33617                                           ! 6011                           0x01 | 0x02 | 0x04,
33618 86AB                        07            .byte	7
33619                                           ! 6012                           0,
33620 86AC                        00            .byte	0
33621                                           ! 6013                           64,
33622 86AD                      0040            .word	$40
33623                                           ! 6014                    64,
33624 86AF                      0040            .word	$40
33625                                           ! 6015                        0xA000,
33626 86B1                      A000            .word	$A000
33627                                           ! 6016                        0x0000,
33628 86B3                      0000            .word	0
33629                                           ! 6017                       0,
33630 86B5                      0000            .word	0
33631 86B7                      0000            .word	0
33632                                           ! 6018                             1152,
33633 86B9                      0480            .word	$480
33634                                           ! 6019                        1152,
33635 86BB                      0480            .word	$480
33636                                           ! 6020                        864,
33637 86BD                      0360            .word	$360
33638                                           ! 6021                      8,
33639 86BF                        08            .byte	8
33640                                           ! 6022                      16,
33641 86C0                        10            .byte	$10
33642                                           ! 6023                           1,
33643 86C1                        01            .byte	1
33644                                           ! 6024                         8,
33645 86C2                        08            .byte	8
33646                                           ! 6025                          16,
33647 86C3                        10            .byte	$10
33648                                           ! 6026                        0x04,
33649 86C4                        04            .byte	4
33650                                           ! 6027                     0,
33651 86C5                        00            .byte	0
33652                                           ! 6028                               15,
33653 86C6                        0F            .byte	$F
33654                                           ! 6029                          0,
33655 86C7                        00            .byte	0
33656                                           ! 6030                        0,
33657 86C8                        00            .byte	0
33658                                           ! 6031                             0,
33659 86C9                        00            .byte	0
33660                                           ! 6032                          0,
33661 86CA                        00            .byte	0
33662                                           ! 6033                               0,
33663 86CB                        00            .byte	0
33664                                           ! 6034                         0,
33665 86CC                        00            .byte	0
33666                                           ! 6035                              0,
33667 86CD                        00            .byte	0
33668                                           ! 6036                         0,
33669 86CE                        00            .byte	0
33670                                           ! 6037                              0,
33671 86CF                        00            .byte	0
33672                                           ! 6038                                0,
33673 86D0                        00            .byte	0
33674                                           ! 6039                        0xE0000000,
33675 86D1                      0000            .word	0
33676 86D3                      E000            .word	$E000
33677                                           ! 6040                               0,
33678 86D5                      0000            .word	0
33679 86D7                      0000            .word	0
33680                                           ! 6041                             0,
33681 86D9                      0000            .word	0
33682                                           ! 6042                                1152,
33683 86DB                      0480            .word	$480
33684                                           ! 6043                             0,
33685 86DD                        00            .byte	0
33686                                           ! 6044                             0,
33687 86DE                        00            .byte	0
33688                                           ! 6045                           0,
33689 86DF                        00            .byte	0
33690                                           ! 6046                                0,
33691 86E0                        00            .byte	0
33692                                           ! 6047                             0,
33693 86E1                        00            .byte	0
33694                                           ! 6048                                  0,
33695 86E2                        00            .byte	0
33696                                           ! 6049 
33697                                           ! 6049                            0,
33698 86E3                        00            .byte	0
33699                                           ! 6050                                 0,
33700 86E4                        00            .byte	0
33701                                           ! 6051                            0,
33702 86E5                        00            .byte	0
33703                                           ! 6052                                 0,
33704 86E6                        00            .byte	0
33705                                           ! 6053                          0,
33706 86E7                      0000            .word	0
33707 86E9                      0000            .word	0
33708                                           ! 6054 } },
33709                                           ! 6055 { 0x0149,
33710 86EB                      0149            .word	$149
33711                                           ! 6056 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33712 86ED                      009B            .word	$9B
33713                                           ! 6057                           0x01 | 0x02 | 0x04,
33714 86EF                        07            .byte	7
33715                                           ! 6058                           0,
33716 86F0                        00            .byte	0
33717                                           ! 6059                           64,
33718 86F1                      0040            .word	$40
33719                                           ! 6060                    64,
33720 86F3                      0040            .word	$40
33721                                           ! 6061                        0xA000,
33722 86F5                      A000            .word	$A000
33723                                           ! 6062                        0x0000,
33724 86F7                      0000            .word	0
33725                                           ! 6063                       0,
33726 86F9                      0000            .word	0
33727 86FB                      0000            .word	0
33728                                           ! 6064                             2304,
33729 86FD                      0900            .word	$900
33730                                           ! 6065                        1152,
33731 86FF                      0480            .word	$480
33732                                           ! 6066                        864,
33733 8701                      0360            .word	$360
33734                                           ! 6067                      8,
33735 8703                        08            .byte	8
33736                                           ! 6068                      16,
33737 8704                        10            .byte	$10
33738                                           ! 6069                           1,
33739 8705                        01            .byte	1
33740                                           ! 6070                         15,
33741 8706                        0F            .byte	$F
33742                                           ! 6071                          31,
33743 8707                        1F            .byte	$1F
33744                                           ! 6072                        0x06,
33745 8708                        06            .byte	6
33746                                           ! 6073                     0,
33747 8709                        00            .byte	0
33748                                           ! 6074                               7,
33749 870A                        07            .byte	7
33750                                           ! 6075                          0,
33751 870B                        00            .byte	0
33752                                           ! 6076                        5,
33753 870C                        05            .byte	5
33754                                           ! 6077                             10,
33755 870D                        0A            .byte	$A
33756                                           ! 6078                          5,
33757 870E                        05            .byte	5
33758                                           ! 6079                               5,
33759 870F                        05            .byte	5
33760                                           ! 6080                         5,
33761 8710                        05            .byte	5
33762                                           ! 6081                              0,
33763 8711                        00            .byte	0
33764                                           ! 6082                         1,
33765 8712                        01            .byte	1
33766                                           ! 6083                              15,
33767 8713                        0F            .byte	$F
33768                                           ! 6084                                0,
33769 8714                        00            .byte	0
33770                                           ! 6085                        0xE0000000,
33771 8715                      0000            .word	0
33772 8717                      E000            .word	$E000
33773                                           ! 6086                               0,
33774 8719                      0000            .word	0
33775 871B                      0000            .word	0
33776                                           ! 6087                             0,
33777 871D                      0000            .word	0
33778                                           ! 6088                                2304,
33779 871F                      0900            .word	$900
33780                                           ! 6089                             0,
33781 8721                        00            .byte	0
33782                                           ! 6090                             0,
33783 8722                        00            .byte	0
33784                                           ! 6091                           5,
33785 8723                        05            .byte	5
33786                                           ! 6092                                10,
33787 8724                        0A            .byte	$A
33788                                           ! 6093                             5,
33789 8725                        05            .byte	5
33790                                           ! 6094                                  5,
33791 8726                        05            .byte	5
33792                                           ! 6095                            5,
33793 8727                        05            .byte	5
33794                                           ! 6096                                 0,
33795 8728                        00            .byte	0
33796                                           ! 6097                            1,
33797 8729                        01            .byte	1
33798                                           ! 6098                                 15,
33799 872A                        0F            .byte	$F
33800                                           ! 6099                          0,
33801 872B                      0000            .word	0
33802 872D                      0000            .word	0
33803                                           ! 6100 } },
33804                                           ! 6101 { 0x014a,
33805 872F                      014A            .word	$14A
33806                                           ! 6102 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33807 8731                      009B            .word	$9B
33808                                           ! 6103                           0x01 | 0x02 | 0x04,
33809 8733                        07            .byte	7
33810                                           ! 6104                           0,
33811 8734                        00            .byte	0
33812                                           ! 6105                           64,
33813 8735                      0040            .word	$40
33814                                           ! 6106                    64,
33815 8737                      0040            .word	$40
33816                                           ! 6107                        0xA000,
33817 8739                      A000            .word	$A000
33818                                           ! 6108                        0x0000,
33819 873B                      0000            .word	0
33820                                           ! 6109                       0,
33821 873D                      0000            .word	0
33822 873F                      0000            .word	0
33823                                           ! 6110                             2304,
33824 8741                      0900            .word	$900
33825                                           ! 6111                        1152,
33826 8743                      0480            .word	$480
33827                                           ! 6112                        864,
33828 8745                      0360            .word	$360
33829                                           ! 6113                      8,
33830 8747                        08            .byte	8
33831                                           ! 6114                      16,
33832 8748                        10            .byte	$10
33833                                           ! 6115                           1,
33834 8749                        01            .byte	1
33835                                           ! 6116                         16,
33836 874A                        10            .byte	$10
33837                                           ! 6117                          31,
33838 874B                        1F            .byte	$1F
33839                                           ! 6118              
33840                                           ! 6118           0x06,
33841 874C                        06            .byte	6
33842                                           ! 6119                     0,
33843 874D                        00            .byte	0
33844                                           ! 6120                               7,
33845 874E                        07            .byte	7
33846                                           ! 6121                          0,
33847 874F                        00            .byte	0
33848                                           ! 6122                        5,
33849 8750                        05            .byte	5
33850                                           ! 6123                             11,
33851 8751                        0B            .byte	$B
33852                                           ! 6124                          6,
33853 8752                        06            .byte	6
33854                                           ! 6125                               5,
33855 8753                        05            .byte	5
33856                                           ! 6126                         5,
33857 8754                        05            .byte	5
33858                                           ! 6127                              0,
33859 8755                        00            .byte	0
33860                                           ! 6128                         0,
33861 8756                        00            .byte	0
33862                                           ! 6129                              0,
33863 8757                        00            .byte	0
33864                                           ! 6130                                0,
33865 8758                        00            .byte	0
33866                                           ! 6131                        0xE0000000,
33867 8759                      0000            .word	0
33868 875B                      E000            .word	$E000
33869                                           ! 6132                               0,
33870 875D                      0000            .word	0
33871 875F                      0000            .word	0
33872                                           ! 6133                             0,
33873 8761                      0000            .word	0
33874                                           ! 6134                                2304,
33875 8763                      0900            .word	$900
33876                                           ! 6135                             0,
33877 8765                        00            .byte	0
33878                                           ! 6136                             0,
33879 8766                        00            .byte	0
33880                                           ! 6137                           5,
33881 8767                        05            .byte	5
33882                                           ! 6138                                11,
33883 8768                        0B            .byte	$B
33884                                           ! 6139                             6,
33885 8769                        06            .byte	6
33886                                           ! 6140                                  5,
33887 876A                        05            .byte	5
33888                                           ! 6141                            5,
33889 876B                        05            .byte	5
33890                                           ! 6142                                 0,
33891 876C                        00            .byte	0
33892                                           ! 6143                            0,
33893 876D                        00            .byte	0
33894                                           ! 6144                                 0,
33895 876E                        00            .byte	0
33896                                           ! 6145                          0,
33897 876F                      0000            .word	0
33898 8771                      0000            .word	0
33899                                           ! 6146 } },
33900                                           ! 6147 { 0x014b,
33901 8773                      014B            .word	$14B
33902                                           ! 6148 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33903 8775                      009B            .word	$9B
33904                                           ! 6149                           0x01 | 0x02 | 0x04,
33905 8777                        07            .byte	7
33906                                           ! 6150                           0,
33907 8778                        00            .byte	0
33908                                           ! 6151                           64,
33909 8779                      0040            .word	$40
33910                                           ! 6152                    64,
33911 877B                      0040            .word	$40
33912                                           ! 6153                        0xA000,
33913 877D                      A000            .word	$A000
33914                                           ! 6154                        0x0000,
33915 877F                      0000            .word	0
33916                                           ! 6155                       0,
33917 8781                      0000            .word	0
33918 8783                      0000            .word	0
33919                                           ! 6156                             3456,
33920 8785                      0D80            .word	$D80
33921                                           ! 6157                        1152,
33922 8787                      0480            .word	$480
33923                                           ! 6158                        864,
33924 8789                      0360            .word	$360
33925                                           ! 6159                      8,
33926 878B                        08            .byte	8
33927                                           ! 6160                      16,
33928 878C                        10            .byte	$10
33929                                           ! 6161                           1,
33930 878D                        01            .byte	1
33931                                           ! 6162                         24,
33932 878E                        18            .byte	$18
33933                                           ! 6163                          46,
33934 878F                        2E            .byte	$2E
33935                                           ! 6164                        0x06,
33936 8790                        06            .byte	6
33937                                           ! 6165                     0,
33938 8791                        00            .byte	0
33939                                           ! 6166                               4,
33940 8792                        04            .byte	4
33941                                           ! 6167                          0,
33942 8793                        00            .byte	0
33943                                           ! 6168                        8,
33944 8794                        08            .byte	8
33945                                           ! 6169                             16,
33946 8795                        10            .byte	$10
33947                                           ! 6170                          8,
33948 8796                        08            .byte	8
33949                                           ! 6171                               8,
33950 8797                        08            .byte	8
33951                                           ! 6172                         8,
33952 8798                        08            .byte	8
33953                                           ! 6173                              0,
33954 8799                        00            .byte	0
33955                                           ! 6174                         0,
33956 879A                        00            .byte	0
33957                                           ! 6175                              0,
33958 879B                        00            .byte	0
33959                                           ! 6176                                0,
33960 879C                        00            .byte	0
33961                                           ! 6177                        0xE0000000,
33962 879D                      0000            .word	0
33963 879F                      E000            .word	$E000
33964                                           ! 6178                               0,
33965 87A1                      0000            .word	0
33966 87A3                      0000            .word	0
33967                                           ! 6179                             0,
33968 87A5                      0000            .word	0
33969                                           ! 6180                                3456,
33970 87A7                      0D80            .word	$D80
33971                                           ! 6181                             0,
33972 87A9                        00            .byte	0
33973                                           ! 6182                             0,
33974 87AA                        00            .byte	0
33975                                           ! 6183                           8,
33976 87AB                        08            .byte	8
33977                                           ! 6184                                16,
33978 87AC                        10            .byte	$10
33979                                           ! 6185                             8,
33980 87AD                        08            .byte	8
33981                                           ! 6186            
33982                                           ! 6186                       8,
33983 87AE                        08            .byte	8
33984                                           ! 6187                            8,
33985 87AF                        08            .byte	8
33986                                           ! 6188                                 0,
33987 87B0                        00            .byte	0
33988                                           ! 6189                            0,
33989 87B1                        00            .byte	0
33990                                           ! 6190                                 0,
33991 87B2                        00            .byte	0
33992                                           ! 6191                          0,
33993 87B3                      0000            .word	0
33994 87B5                      0000            .word	0
33995                                           ! 6192 } },
33996                                           ! 6193 { 0x014c,
33997 87B7                      014C            .word	$14C
33998                                           ! 6194 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33999 87B9                      009B            .word	$9B
34000                                           ! 6195                           0x01 | 0x02 | 0x04,
34001 87BB                        07            .byte	7
34002                                           ! 6196                           0,
34003 87BC                        00            .byte	0
34004                                           ! 6197                           64,
34005 87BD                      0040            .word	$40
34006                                           ! 6198                    64,
34007 87BF                      0040            .word	$40
34008                                           ! 6199                        0xA000,
34009 87C1                      A000            .word	$A000
34010                                           ! 6200                        0x0000,
34011 87C3                      0000            .word	0
34012                                           ! 6201                       0,
34013 87C5                      0000            .word	0
34014 87C7                      0000            .word	0
34015                                           ! 6202                             4608,
34016 87C9                      1200            .word	$1200
34017                                           ! 6203                        1152,
34018 87CB                      0480            .word	$480
34019                                           ! 6204                        864,
34020 87CD                      0360            .word	$360
34021                                           ! 6205                      8,
34022 87CF                        08            .byte	8
34023                                           ! 6206                      16,
34024 87D0                        10            .byte	$10
34025                                           ! 6207                           1,
34026 87D1                        01            .byte	1
34027                                           ! 6208                         32,
34028 87D2                        20            .byte	$20
34029                                           ! 6209                          61,
34030 87D3                        3D            .byte	$3D
34031                                           ! 6210                        0x06,
34032 87D4                        06            .byte	6
34033                                           ! 6211                     0,
34034 87D5                        00            .byte	0
34035                                           ! 6212                               3,
34036 87D6                        03            .byte	3
34037                                           ! 6213                          0,
34038 87D7                        00            .byte	0
34039                                           ! 6214                        8,
34040 87D8                        08            .byte	8
34041                                           ! 6215                             16,
34042 87D9                        10            .byte	$10
34043                                           ! 6216                          8,
34044 87DA                        08            .byte	8
34045                                           ! 6217                               8,
34046 87DB                        08            .byte	8
34047                                           ! 6218                         8,
34048 87DC                        08            .byte	8
34049                                           ! 6219                              0,
34050 87DD                        00            .byte	0
34051                                           ! 6220                         8,
34052 87DE                        08            .byte	8
34053                                           ! 6221                              24,
34054 87DF                        18            .byte	$18
34055                                           ! 6222                                0x02,
34056 87E0                        02            .byte	2
34057                                           ! 6223                        0xE0000000,
34058 87E1                      0000            .word	0
34059 87E3                      E000            .word	$E000
34060                                           ! 6224                               0,
34061 87E5                      0000            .word	0
34062 87E7                      0000            .word	0
34063                                           ! 6225                             0,
34064 87E9                      0000            .word	0
34065                                           ! 6226                                4608,
34066 87EB                      1200            .word	$1200
34067                                           ! 6227                             0,
34068 87ED                        00            .byte	0
34069                                           ! 6228                             0,
34070 87EE                        00            .byte	0
34071                                           ! 6229                           8,
34072 87EF                        08            .byte	8
34073                                           ! 6230                                16,
34074 87F0                        10            .byte	$10
34075                                           ! 6231                             8,
34076 87F1                        08            .byte	8
34077                                           ! 6232                                  8,
34078 87F2                        08            .byte	8
34079                                           ! 6233                            8,
34080 87F3                        08            .byte	8
34081                                           ! 6234                                 0,
34082 87F4                        00            .byte	0
34083                                           ! 6235                            8,
34084 87F5                        08            .byte	8
34085                                           ! 6236                                 24,
34086 87F6                        18            .byte	$18
34087                                           ! 6237                          0,
34088 87F7                      0000            .word	0
34089 87F9                      0000            .word	0
34090                                           ! 6238 } },
34091                                           ! 6239 { 0x0178,
34092 87FB                      0178            .word	$178
34093                                           ! 6240 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34094 87FD                      009B            .word	$9B
34095                                           ! 6241                           0x01 | 0x02 | 0x04,
34096 87FF                        07            .byte	7
34097                                           ! 6242                           0,
34098 8800                        00            .byte	0
34099                                           ! 6243                           64,
34100 8801                      0040            .word	$40
34101                                           ! 6244                    64,
34102 8803                      0040            .word	$40
34103                                           ! 6245                        0xA000,
34104 8805                      A000            .word	$A000
34105                                           ! 6246                        0x0000,
34106 8807                      0000            .word	0
34107                                           ! 6247                       0,
34108 8809                      0000            .word	0
34109 880B                      0000            .word	0
34110                                           ! 6248                             2560,
34111 880D                      0A00            .word	$A00
34112                                           ! 6249                        1280,
34113 880F                      0500            .word	$500
34114                                           ! 6250                        800,
34115 8811                      0320            .word	$320
34116                                           ! 6251                      8,
34117 8813                        08            .byte	8
34118                                           ! 6252                      16,
34119 8814                        10            .byte	$10
34120                                           ! 6253                           1,
34121 8815                        01            .byte	1
34122                                           ! 6254                         16,
34123 8816                        10            .byte	$10
34124                                           ! 6255               
34125                                           ! 6255            32,
34126 8817                        20            .byte	$20
34127                                           ! 6256                        0x06,
34128 8818                        06            .byte	6
34129                                           ! 6257                     0,
34130 8819                        00            .byte	0
34131                                           ! 6258                               7,
34132 881A                        07            .byte	7
34133                                           ! 6259                          0,
34134 881B                        00            .byte	0
34135                                           ! 6260                        5,
34136 881C                        05            .byte	5
34137                                           ! 6261                             11,
34138 881D                        0B            .byte	$B
34139                                           ! 6262                          6,
34140 881E                        06            .byte	6
34141                                           ! 6263                               5,
34142 881F                        05            .byte	5
34143                                           ! 6264                         5,
34144 8820                        05            .byte	5
34145                                           ! 6265                              0,
34146 8821                        00            .byte	0
34147                                           ! 6266                         0,
34148 8822                        00            .byte	0
34149                                           ! 6267                              0,
34150 8823                        00            .byte	0
34151                                           ! 6268                                0,
34152 8824                        00            .byte	0
34153                                           ! 6269                        0xE0000000,
34154 8825                      0000            .word	0
34155 8827                      E000            .word	$E000
34156                                           ! 6270                               0,
34157 8829                      0000            .word	0
34158 882B                      0000            .word	0
34159                                           ! 6271                             0,
34160 882D                      0000            .word	0
34161                                           ! 6272                                2560,
34162 882F                      0A00            .word	$A00
34163                                           ! 6273                             0,
34164 8831                        00            .byte	0
34165                                           ! 6274                             0,
34166 8832                        00            .byte	0
34167                                           ! 6275                           5,
34168 8833                        05            .byte	5
34169                                           ! 6276                                11,
34170 8834                        0B            .byte	$B
34171                                           ! 6277                             6,
34172 8835                        06            .byte	6
34173                                           ! 6278                                  5,
34174 8836                        05            .byte	5
34175                                           ! 6279                            5,
34176 8837                        05            .byte	5
34177                                           ! 6280                                 0,
34178 8838                        00            .byte	0
34179                                           ! 6281                            0,
34180 8839                        00            .byte	0
34181                                           ! 6282                                 0,
34182 883A                        00            .byte	0
34183                                           ! 6283                          0,
34184 883B                      0000            .word	0
34185 883D                      0000            .word	0
34186                                           ! 6284 } },
34187                                           ! 6285 { 0x0179,
34188 883F                      0179            .word	$179
34189                                           ! 6286 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34190 8841                      009B            .word	$9B
34191                                           ! 6287                           0x01 | 0x02 | 0x04,
34192 8843                        07            .byte	7
34193                                           ! 6288                           0,
34194 8844                        00            .byte	0
34195                                           ! 6289                           64,
34196 8845                      0040            .word	$40
34197                                           ! 6290                    64,
34198 8847                      0040            .word	$40
34199                                           ! 6291                        0xA000,
34200 8849                      A000            .word	$A000
34201                                           ! 6292                        0x0000,
34202 884B                      0000            .word	0
34203                                           ! 6293                       0,
34204 884D                      0000            .word	0
34205 884F                      0000            .word	0
34206                                           ! 6294                             3840,
34207 8851                      0F00            .word	$F00
34208                                           ! 6295                        1280,
34209 8853                      0500            .word	$500
34210                                           ! 6296                        800,
34211 8855                      0320            .word	$320
34212                                           ! 6297                      8,
34213 8857                        08            .byte	8
34214                                           ! 6298                      16,
34215 8858                        10            .byte	$10
34216                                           ! 6299                           1,
34217 8859                        01            .byte	1
34218                                           ! 6300                         24,
34219 885A                        18            .byte	$18
34220                                           ! 6301                          47,
34221 885B                        2F            .byte	$2F
34222                                           ! 6302                        0x06,
34223 885C                        06            .byte	6
34224                                           ! 6303                     0,
34225 885D                        00            .byte	0
34226                                           ! 6304                               4,
34227 885E                        04            .byte	4
34228                                           ! 6305                          0,
34229 885F                        00            .byte	0
34230                                           ! 6306                        8,
34231 8860                        08            .byte	8
34232                                           ! 6307                             16,
34233 8861                        10            .byte	$10
34234                                           ! 6308                          8,
34235 8862                        08            .byte	8
34236                                           ! 6309                               8,
34237 8863                        08            .byte	8
34238                                           ! 6310                         8,
34239 8864                        08            .byte	8
34240                                           ! 6311                              0,
34241 8865                        00            .byte	0
34242                                           ! 6312                         0,
34243 8866                        00            .byte	0
34244                                           ! 6313                              0,
34245 8867                        00            .byte	0
34246                                           ! 6314                                0,
34247 8868                        00            .byte	0
34248                                           ! 6315                        0xE0000000,
34249 8869                      0000            .word	0
34250 886B                      E000            .word	$E000
34251                                           ! 6316                               0,
34252 886D                      0000            .word	0
34253 886F                      0000            .word	0
34254                                           ! 6317                             0,
34255 8871                      0000            .word	0
34256                                           ! 6318                                3840,
34257 8873                      0F00            .word	$F00
34258                                           ! 6319                             0,
34259 8875                        00            .byte	0
34260                                           ! 6320                             0,
34261 8876                        00            .byte	0
34262                                           ! 6321                           8,
34263 8877                        08            .byte	8
34264                                           ! 6322                                16,
34265 8878                        10            .byte	$10
34266                                           ! 6323               
34267                                           ! 6323               8,
34268 8879                        08            .byte	8
34269                                           ! 6324                                  8,
34270 887A                        08            .byte	8
34271                                           ! 6325                            8,
34272 887B                        08            .byte	8
34273                                           ! 6326                                 0,
34274 887C                        00            .byte	0
34275                                           ! 6327                            0,
34276 887D                        00            .byte	0
34277                                           ! 6328                                 0,
34278 887E                        00            .byte	0
34279                                           ! 6329                          0,
34280 887F                      0000            .word	0
34281 8881                      0000            .word	0
34282                                           ! 6330 } },
34283                                           ! 6331 { 0x017a,
34284 8883                      017A            .word	$17A
34285                                           ! 6332 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34286 8885                      009B            .word	$9B
34287                                           ! 6333                           0x01 | 0x02 | 0x04,
34288 8887                        07            .byte	7
34289                                           ! 6334                           0,
34290 8888                        00            .byte	0
34291                                           ! 6335                           64,
34292 8889                      0040            .word	$40
34293                                           ! 6336                    64,
34294 888B                      0040            .word	$40
34295                                           ! 6337                        0xA000,
34296 888D                      A000            .word	$A000
34297                                           ! 6338                        0x0000,
34298 888F                      0000            .word	0
34299                                           ! 6339                       0,
34300 8891                      0000            .word	0
34301 8893                      0000            .word	0
34302                                           ! 6340                             5120,
34303 8895                      1400            .word	$1400
34304                                           ! 6341                        1280,
34305 8897                      0500            .word	$500
34306                                           ! 6342                        800,
34307 8899                      0320            .word	$320
34308                                           ! 6343                      8,
34309 889B                        08            .byte	8
34310                                           ! 6344                      16,
34311 889C                        10            .byte	$10
34312                                           ! 6345                           1,
34313 889D                        01            .byte	1
34314                                           ! 6346                         32,
34315 889E                        20            .byte	$20
34316                                           ! 6347                          63,
34317 889F                        3F            .byte	$3F
34318                                           ! 6348                        0x06,
34319 88A0                        06            .byte	6
34320                                           ! 6349                     0,
34321 88A1                        00            .byte	0
34322                                           ! 6350                               3,
34323 88A2                        03            .byte	3
34324                                           ! 6351                          0,
34325 88A3                        00            .byte	0
34326                                           ! 6352                        8,
34327 88A4                        08            .byte	8
34328                                           ! 6353                             16,
34329 88A5                        10            .byte	$10
34330                                           ! 6354                          8,
34331 88A6                        08            .byte	8
34332                                           ! 6355                               8,
34333 88A7                        08            .byte	8
34334                                           ! 6356                         8,
34335 88A8                        08            .byte	8
34336                                           ! 6357                              0,
34337 88A9                        00            .byte	0
34338                                           ! 6358                         8,
34339 88AA                        08            .byte	8
34340                                           ! 6359                              24,
34341 88AB                        18            .byte	$18
34342                                           ! 6360                                0x02,
34343 88AC                        02            .byte	2
34344                                           ! 6361                        0xE0000000,
34345 88AD                      0000            .word	0
34346 88AF                      E000            .word	$E000
34347                                           ! 6362                               0,
34348 88B1                      0000            .word	0
34349 88B3                      0000            .word	0
34350                                           ! 6363                             0,
34351 88B5                      0000            .word	0
34352                                           ! 6364                                5120,
34353 88B7                      1400            .word	$1400
34354                                           ! 6365                             0,
34355 88B9                        00            .byte	0
34356                                           ! 6366                             0,
34357 88BA                        00            .byte	0
34358                                           ! 6367                           8,
34359 88BB                        08            .byte	8
34360                                           ! 6368                                16,
34361 88BC                        10            .byte	$10
34362                                           ! 6369                             8,
34363 88BD                        08            .byte	8
34364                                           ! 6370                                  8,
34365 88BE                        08            .byte	8
34366                                           ! 6371                            8,
34367 88BF                        08            .byte	8
34368                                           ! 6372                                 0,
34369 88C0                        00            .byte	0
34370                                           ! 6373                            8,
34371 88C1                        08            .byte	8
34372                                           ! 6374                                 24,
34373 88C2                        18            .byte	$18
34374                                           ! 6375                          0,
34375 88C3                      0000            .word	0
34376 88C5                      0000            .word	0
34377                                           ! 6376 } },
34378                                           ! 6377 { 0x017b,
34379 88C7                      017B            .word	$17B
34380                                           ! 6378 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34381 88C9                      009B            .word	$9B
34382                                           ! 6379                           0x01 | 0x02 | 0x04,
34383 88CB                        07            .byte	7
34384                                           ! 6380                           0,
34385 88CC                        00            .byte	0
34386                                           ! 6381                           64,
34387 88CD                      0040            .word	$40
34388                                           ! 6382                    64,
34389 88CF                      0040            .word	$40
34390                                           ! 6383                        0xA000,
34391 88D1                      A000            .word	$A000
34392                                           ! 6384                        0x0000,
34393 88D3                      0000            .word	0
34394                                           ! 6385                       0,
34395 88D5                      0000            .word	0
34396 88D7                      0000            .word	0
34397                                           ! 6386                             2560,
34398 88D9                      0A00            .word	$A00
34399                                           ! 6387                        1280,
34400 88DB                      0500            .word	$500
34401                                           ! 6388                        960,
34402 88DD                      03C0            .word	$3C0
34403                                           ! 6389                      8,
34404 88DF                        08            .byte	8
34405                                           ! 6390                      16,
34406 88E0                        10            .byte	$10
34407                                           ! 6391                           1,
34408 88E1                        01            .byte	1
34409                                           ! 6392               
34410                                           ! 6392           16,
34411 88E2                        10            .byte	$10
34412                                           ! 6393                          38,
34413 88E3                        26            .byte	$26
34414                                           ! 6394                        0x06,
34415 88E4                        06            .byte	6
34416                                           ! 6395                     0,
34417 88E5                        00            .byte	0
34418                                           ! 6396                               5,
34419 88E6                        05            .byte	5
34420                                           ! 6397                          0,
34421 88E7                        00            .byte	0
34422                                           ! 6398                        5,
34423 88E8                        05            .byte	5
34424                                           ! 6399                             11,
34425 88E9                        0B            .byte	$B
34426                                           ! 6400                          6,
34427 88EA                        06            .byte	6
34428                                           ! 6401                               5,
34429 88EB                        05            .byte	5
34430                                           ! 6402                         5,
34431 88EC                        05            .byte	5
34432                                           ! 6403                              0,
34433 88ED                        00            .byte	0
34434                                           ! 6404                         0,
34435 88EE                        00            .byte	0
34436                                           ! 6405                              0,
34437 88EF                        00            .byte	0
34438                                           ! 6406                                0,
34439 88F0                        00            .byte	0
34440                                           ! 6407                        0xE0000000,
34441 88F1                      0000            .word	0
34442 88F3                      E000            .word	$E000
34443                                           ! 6408                               0,
34444 88F5                      0000            .word	0
34445 88F7                      0000            .word	0
34446                                           ! 6409                             0,
34447 88F9                      0000            .word	0
34448                                           ! 6410                                2560,
34449 88FB                      0A00            .word	$A00
34450                                           ! 6411                             0,
34451 88FD                        00            .byte	0
34452                                           ! 6412                             0,
34453 88FE                        00            .byte	0
34454                                           ! 6413                           5,
34455 88FF                        05            .byte	5
34456                                           ! 6414                                11,
34457 8900                        0B            .byte	$B
34458                                           ! 6415                             6,
34459 8901                        06            .byte	6
34460                                           ! 6416                                  5,
34461 8902                        05            .byte	5
34462                                           ! 6417                            5,
34463 8903                        05            .byte	5
34464                                           ! 6418                                 0,
34465 8904                        00            .byte	0
34466                                           ! 6419                            0,
34467 8905                        00            .byte	0
34468                                           ! 6420                                 0,
34469 8906                        00            .byte	0
34470                                           ! 6421                          0,
34471 8907                      0000            .word	0
34472 8909                      0000            .word	0
34473                                           ! 6422 } },
34474                                           ! 6423 { 0x017c,
34475 890B                      017C            .word	$17C
34476                                           ! 6424 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34477 890D                      009B            .word	$9B
34478                                           ! 6425                           0x01 | 0x02 | 0x04,
34479 890F                        07            .byte	7
34480                                           ! 6426                           0,
34481 8910                        00            .byte	0
34482                                           ! 6427                           64,
34483 8911                      0040            .word	$40
34484                                           ! 6428                    64,
34485 8913                      0040            .word	$40
34486                                           ! 6429                        0xA000,
34487 8915                      A000            .word	$A000
34488                                           ! 6430                        0x0000,
34489 8917                      0000            .word	0
34490                                           ! 6431                       0,
34491 8919                      0000            .word	0
34492 891B                      0000            .word	0
34493                                           ! 6432                             3840,
34494 891D                      0F00            .word	$F00
34495                                           ! 6433                        1280,
34496 891F                      0500            .word	$500
34497                                           ! 6434                        960,
34498 8921                      03C0            .word	$3C0
34499                                           ! 6435                      8,
34500 8923                        08            .byte	8
34501                                           ! 6436                      16,
34502 8924                        10            .byte	$10
34503                                           ! 6437                           1,
34504 8925                        01            .byte	1
34505                                           ! 6438                         24,
34506 8926                        18            .byte	$18
34507                                           ! 6439                          57,
34508 8927                        39            .byte	$39
34509                                           ! 6440                        0x06,
34510 8928                        06            .byte	6
34511                                           ! 6441                     0,
34512 8929                        00            .byte	0
34513                                           ! 6442                               3,
34514 892A                        03            .byte	3
34515                                           ! 6443                          0,
34516 892B                        00            .byte	0
34517                                           ! 6444                        8,
34518 892C                        08            .byte	8
34519                                           ! 6445                             16,
34520 892D                        10            .byte	$10
34521                                           ! 6446                          8,
34522 892E                        08            .byte	8
34523                                           ! 6447                               8,
34524 892F                        08            .byte	8
34525                                           ! 6448                         8,
34526 8930                        08            .byte	8
34527                                           ! 6449                              0,
34528 8931                        00            .byte	0
34529                                           ! 6450                         0,
34530 8932                        00            .byte	0
34531                                           ! 6451                              0,
34532 8933                        00            .byte	0
34533                                           ! 6452                                0,
34534 8934                        00            .byte	0
34535                                           ! 6453                        0xE0000000,
34536 8935                      0000            .word	0
34537 8937                      E000            .word	$E000
34538                                           ! 6454                               0,
34539 8939                      0000            .word	0
34540 893B                      0000            .word	0
34541                                           ! 6455                             0,
34542 893D                      0000            .word	0
34543                                           ! 6456                                3840,
34544 893F                      0F00            .word	$F00
34545                                           ! 6457                             0,
34546 8941                        00            .byte	0
34547                                           ! 6458                             0,
34548 8942                        00            .byte	0
34549                                           ! 6459                           8,
34550 8943                        08            .byte	8
34551                                           ! 6460                      
34552                                           ! 6460           16,
34553 8944                        10            .byte	$10
34554                                           ! 6461                             8,
34555 8945                        08            .byte	8
34556                                           ! 6462                                  8,
34557 8946                        08            .byte	8
34558                                           ! 6463                            8,
34559 8947                        08            .byte	8
34560                                           ! 6464                                 0,
34561 8948                        00            .byte	0
34562                                           ! 6465                            0,
34563 8949                        00            .byte	0
34564                                           ! 6466                                 0,
34565 894A                        00            .byte	0
34566                                           ! 6467                          0,
34567 894B                      0000            .word	0
34568 894D                      0000            .word	0
34569                                           ! 6468 } },
34570                                           ! 6469 { 0x017d,
34571 894F                      017D            .word	$17D
34572                                           ! 6470 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34573 8951                      009B            .word	$9B
34574                                           ! 6471                           0x01 | 0x02 | 0x04,
34575 8953                        07            .byte	7
34576                                           ! 6472                           0,
34577 8954                        00            .byte	0
34578                                           ! 6473                           64,
34579 8955                      0040            .word	$40
34580                                           ! 6474                    64,
34581 8957                      0040            .word	$40
34582                                           ! 6475                        0xA000,
34583 8959                      A000            .word	$A000
34584                                           ! 6476                        0x0000,
34585 895B                      0000            .word	0
34586                                           ! 6477                       0,
34587 895D                      0000            .word	0
34588 895F                      0000            .word	0
34589                                           ! 6478                             5120,
34590 8961                      1400            .word	$1400
34591                                           ! 6479                        1280,
34592 8963                      0500            .word	$500
34593                                           ! 6480                        960,
34594 8965                      03C0            .word	$3C0
34595                                           ! 6481                      8,
34596 8967                        08            .byte	8
34597                                           ! 6482                      16,
34598 8968                        10            .byte	$10
34599                                           ! 6483                           1,
34600 8969                        01            .byte	1
34601                                           ! 6484                         32,
34602 896A                        20            .byte	$20
34603                                           ! 6485                          75,
34604 896B                        4B            .byte	$4B
34605                                           ! 6486                        0x06,
34606 896C                        06            .byte	6
34607                                           ! 6487                     0,
34608 896D                        00            .byte	0
34609                                           ! 6488                               2,
34610 896E                        02            .byte	2
34611                                           ! 6489                          0,
34612 896F                        00            .byte	0
34613                                           ! 6490                        8,
34614 8970                        08            .byte	8
34615                                           ! 6491                             16,
34616 8971                        10            .byte	$10
34617                                           ! 6492                          8,
34618 8972                        08            .byte	8
34619                                           ! 6493                               8,
34620 8973                        08            .byte	8
34621                                           ! 6494                         8,
34622 8974                        08            .byte	8
34623                                           ! 6495                              0,
34624 8975                        00            .byte	0
34625                                           ! 6496                         8,
34626 8976                        08            .byte	8
34627                                           ! 6497                              24,
34628 8977                        18            .byte	$18
34629                                           ! 6498                                0x02,
34630 8978                        02            .byte	2
34631                                           ! 6499                        0xE0000000,
34632 8979                      0000            .word	0
34633 897B                      E000            .word	$E000
34634                                           ! 6500                               0,
34635 897D                      0000            .word	0
34636 897F                      0000            .word	0
34637                                           ! 6501                             0,
34638 8981                      0000            .word	0
34639                                           ! 6502                                5120,
34640 8983                      1400            .word	$1400
34641                                           ! 6503                             0,
34642 8985                        00            .byte	0
34643                                           ! 6504                             0,
34644 8986                        00            .byte	0
34645                                           ! 6505                           8,
34646 8987                        08            .byte	8
34647                                           ! 6506                                16,
34648 8988                        10            .byte	$10
34649                                           ! 6507                             8,
34650 8989                        08            .byte	8
34651                                           ! 6508                                  8,
34652 898A                        08            .byte	8
34653                                           ! 6509                            8,
34654 898B                        08            .byte	8
34655                                           ! 6510                                 0,
34656 898C                        00            .byte	0
34657                                           ! 6511                            8,
34658 898D                        08            .byte	8
34659                                           ! 6512                                 24,
34660 898E                        18            .byte	$18
34661                                           ! 6513                          0,
34662 898F                      0000            .word	0
34663 8991                      0000            .word	0
34664                                           ! 6514 } },
34665                                           ! 6515 { 0x017e,
34666 8993                      017E            .word	$17E
34667                                           ! 6516 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34668 8995                      009B            .word	$9B
34669                                           ! 6517                           0x01 | 0x02 | 0x04,
34670 8997                        07            .byte	7
34671                                           ! 6518                           0,
34672 8998                        00            .byte	0
34673                                           ! 6519                           64,
34674 8999                      0040            .word	$40
34675                                           ! 6520                    64,
34676 899B                      0040            .word	$40
34677                                           ! 6521                        0xA000,
34678 899D                      A000            .word	$A000
34679                                           ! 6522                        0x0000,
34680 899F                      0000            .word	0
34681                                           ! 6523                       0,
34682 89A1                      0000            .word	0
34683 89A3                      0000            .word	0
34684                                           ! 6524                             2880,
34685 89A5                      0B40            .word	$B40
34686                                           ! 6525                        1440,
34687 89A7                      05A0            .word	$5A0
34688                                           ! 6526                        900,
34689 89A9                      0384            .word	$384
34690                                           ! 6527                      8,
34691 89AB                        08            .byte	8
34692                                           ! 6528                      16,
34693 89AC                        10            .byte	$10
34694                                           ! 6529                
34695                                           ! 6529            1,
34696 89AD                        01            .byte	1
34697                                           ! 6530                         16,
34698 89AE                        10            .byte	$10
34699                                           ! 6531                          40,
34700 89AF                        28            .byte	$28
34701                                           ! 6532                        0x06,
34702 89B0                        06            .byte	6
34703                                           ! 6533                     0,
34704 89B1                        00            .byte	0
34705                                           ! 6534                               5,
34706 89B2                        05            .byte	5
34707                                           ! 6535                          0,
34708 89B3                        00            .byte	0
34709                                           ! 6536                        5,
34710 89B4                        05            .byte	5
34711                                           ! 6537                             11,
34712 89B5                        0B            .byte	$B
34713                                           ! 6538                          6,
34714 89B6                        06            .byte	6
34715                                           ! 6539                               5,
34716 89B7                        05            .byte	5
34717                                           ! 6540                         5,
34718 89B8                        05            .byte	5
34719                                           ! 6541                              0,
34720 89B9                        00            .byte	0
34721                                           ! 6542                         0,
34722 89BA                        00            .byte	0
34723                                           ! 6543                              0,
34724 89BB                        00            .byte	0
34725                                           ! 6544                                0,
34726 89BC                        00            .byte	0
34727                                           ! 6545                        0xE0000000,
34728 89BD                      0000            .word	0
34729 89BF                      E000            .word	$E000
34730                                           ! 6546                               0,
34731 89C1                      0000            .word	0
34732 89C3                      0000            .word	0
34733                                           ! 6547                             0,
34734 89C5                      0000            .word	0
34735                                           ! 6548                                2880,
34736 89C7                      0B40            .word	$B40
34737                                           ! 6549                             0,
34738 89C9                        00            .byte	0
34739                                           ! 6550                             0,
34740 89CA                        00            .byte	0
34741                                           ! 6551                           5,
34742 89CB                        05            .byte	5
34743                                           ! 6552                                11,
34744 89CC                        0B            .byte	$B
34745                                           ! 6553                             6,
34746 89CD                        06            .byte	6
34747                                           ! 6554                                  5,
34748 89CE                        05            .byte	5
34749                                           ! 6555                            5,
34750 89CF                        05            .byte	5
34751                                           ! 6556                                 0,
34752 89D0                        00            .byte	0
34753                                           ! 6557                            0,
34754 89D1                        00            .byte	0
34755                                           ! 6558                                 0,
34756 89D2                        00            .byte	0
34757                                           ! 6559                          0,
34758 89D3                      0000            .word	0
34759 89D5                      0000            .word	0
34760                                           ! 6560 } },
34761                                           ! 6561 { 0x017f,
34762 89D7                      017F            .word	$17F
34763                                           ! 6562 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34764 89D9                      009B            .word	$9B
34765                                           ! 6563                           0x01 | 0x02 | 0x04,
34766 89DB                        07            .byte	7
34767                                           ! 6564                           0,
34768 89DC                        00            .byte	0
34769                                           ! 6565                           64,
34770 89DD                      0040            .word	$40
34771                                           ! 6566                    64,
34772 89DF                      0040            .word	$40
34773                                           ! 6567                        0xA000,
34774 89E1                      A000            .word	$A000
34775                                           ! 6568                        0x0000,
34776 89E3                      0000            .word	0
34777                                           ! 6569                       0,
34778 89E5                      0000            .word	0
34779 89E7                      0000            .word	0
34780                                           ! 6570                             4320,
34781 89E9                      10E0            .word	$10E0
34782                                           ! 6571                        1440,
34783 89EB                      05A0            .word	$5A0
34784                                           ! 6572                        900,
34785 89ED                      0384            .word	$384
34786                                           ! 6573                      8,
34787 89EF                        08            .byte	8
34788                                           ! 6574                      16,
34789 89F0                        10            .byte	$10
34790                                           ! 6575                           1,
34791 89F1                        01            .byte	1
34792                                           ! 6576                         24,
34793 89F2                        18            .byte	$18
34794                                           ! 6577                          60,
34795 89F3                        3C            .byte	$3C
34796                                           ! 6578                        0x06,
34797 89F4                        06            .byte	6
34798                                           ! 6579                     0,
34799 89F5                        00            .byte	0
34800                                           ! 6580                               3,
34801 89F6                        03            .byte	3
34802                                           ! 6581                          0,
34803 89F7                        00            .byte	0
34804                                           ! 6582                        8,
34805 89F8                        08            .byte	8
34806                                           ! 6583                             16,
34807 89F9                        10            .byte	$10
34808                                           ! 6584                          8,
34809 89FA                        08            .byte	8
34810                                           ! 6585                               8,
34811 89FB                        08            .byte	8
34812                                           ! 6586                         8,
34813 89FC                        08            .byte	8
34814                                           ! 6587                              0,
34815 89FD                        00            .byte	0
34816                                           ! 6588                         0,
34817 89FE                        00            .byte	0
34818                                           ! 6589                              0,
34819 89FF                        00            .byte	0
34820                                           ! 6590                                0,
34821 8A00                        00            .byte	0
34822                                           ! 6591                        0xE0000000,
34823 8A01                      0000            .word	0
34824 8A03                      E000            .word	$E000
34825                                           ! 6592                               0,
34826 8A05                      0000            .word	0
34827 8A07                      0000            .word	0
34828                                           ! 6593                             0,
34829 8A09                      0000            .word	0
34830                                           ! 6594                                4320,
34831 8A0B                      10E0            .word	$10E0
34832                                           ! 6595                             0,
34833 8A0D                        00            .byte	0
34834                                           ! 6596                             0,
34835 8A0E                        00            .byte	0
34836                                           ! 6597                       
34837                                           ! 6597     8,
34838 8A0F                        08            .byte	8
34839                                           ! 6598                                16,
34840 8A10                        10            .byte	$10
34841                                           ! 6599                             8,
34842 8A11                        08            .byte	8
34843                                           ! 6600                                  8,
34844 8A12                        08            .byte	8
34845                                           ! 6601                            8,
34846 8A13                        08            .byte	8
34847                                           ! 6602                                 0,
34848 8A14                        00            .byte	0
34849                                           ! 6603                            0,
34850 8A15                        00            .byte	0
34851                                           ! 6604                                 0,
34852 8A16                        00            .byte	0
34853                                           ! 6605                          0,
34854 8A17                      0000            .word	0
34855 8A19                      0000            .word	0
34856                                           ! 6606 } },
34857                                           ! 6607 { 0x0180,
34858 8A1B                      0180            .word	$180
34859                                           ! 6608 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34860 8A1D                      009B            .word	$9B
34861                                           ! 6609                           0x01 | 0x02 | 0x04,
34862 8A1F                        07            .byte	7
34863                                           ! 6610                           0,
34864 8A20                        00            .byte	0
34865                                           ! 6611                           64,
34866 8A21                      0040            .word	$40
34867                                           ! 6612                    64,
34868 8A23                      0040            .word	$40
34869                                           ! 6613                        0xA000,
34870 8A25                      A000            .word	$A000
34871                                           ! 6614                        0x0000,
34872 8A27                      0000            .word	0
34873                                           ! 6615                       0,
34874 8A29                      0000            .word	0
34875 8A2B                      0000            .word	0
34876                                           ! 6616                             5760,
34877 8A2D                      1680            .word	$1680
34878                                           ! 6617                        1440,
34879 8A2F                      05A0            .word	$5A0
34880                                           ! 6618                        900,
34881 8A31                      0384            .word	$384
34882                                           ! 6619                      8,
34883 8A33                        08            .byte	8
34884                                           ! 6620                      16,
34885 8A34                        10            .byte	$10
34886                                           ! 6621                           1,
34887 8A35                        01            .byte	1
34888                                           ! 6622                         32,
34889 8A36                        20            .byte	$20
34890                                           ! 6623                          80,
34891 8A37                        50            .byte	$50
34892                                           ! 6624                        0x06,
34893 8A38                        06            .byte	6
34894                                           ! 6625                     0,
34895 8A39                        00            .byte	0
34896                                           ! 6626                               2,
34897 8A3A                        02            .byte	2
34898                                           ! 6627                          0,
34899 8A3B                        00            .byte	0
34900                                           ! 6628                        8,
34901 8A3C                        08            .byte	8
34902                                           ! 6629                             16,
34903 8A3D                        10            .byte	$10
34904                                           ! 6630                          8,
34905 8A3E                        08            .byte	8
34906                                           ! 6631                               8,
34907 8A3F                        08            .byte	8
34908                                           ! 6632                         8,
34909 8A40                        08            .byte	8
34910                                           ! 6633                              0,
34911 8A41                        00            .byte	0
34912                                           ! 6634                         8,
34913 8A42                        08            .byte	8
34914                                           ! 6635                              24,
34915 8A43                        18            .byte	$18
34916                                           ! 6636                                0x02,
34917 8A44                        02            .byte	2
34918                                           ! 6637                        0xE0000000,
34919 8A45                      0000            .word	0
34920 8A47                      E000            .word	$E000
34921                                           ! 6638                               0,
34922 8A49                      0000            .word	0
34923 8A4B                      0000            .word	0
34924                                           ! 6639                             0,
34925 8A4D                      0000            .word	0
34926                                           ! 6640                                5760,
34927 8A4F                      1680            .word	$1680
34928                                           ! 6641                             0,
34929 8A51                        00            .byte	0
34930                                           ! 6642                             0,
34931 8A52                        00            .byte	0
34932                                           ! 6643                           8,
34933 8A53                        08            .byte	8
34934                                           ! 6644                                16,
34935 8A54                        10            .byte	$10
34936                                           ! 6645                             8,
34937 8A55                        08            .byte	8
34938                                           ! 6646                                  8,
34939 8A56                        08            .byte	8
34940                                           ! 6647                            8,
34941 8A57                        08            .byte	8
34942                                           ! 6648                                 0,
34943 8A58                        00            .byte	0
34944                                           ! 6649                            8,
34945 8A59                        08            .byte	8
34946                                           ! 6650                                 24,
34947 8A5A                        18            .byte	$18
34948                                           ! 6651                          0,
34949 8A5B                      0000            .word	0
34950 8A5D                      0000            .word	0
34951                                           ! 6652 } },
34952                                           ! 6653 { 0x0181,
34953 8A5F                      0181            .word	$181
34954                                           ! 6654 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34955 8A61                      009B            .word	$9B
34956                                           ! 6655                           0x01 | 0x02 | 0x04,
34957 8A63                        07            .byte	7
34958                                           ! 6656                           0,
34959 8A64                        00            .byte	0
34960                                           ! 6657                           64,
34961 8A65                      0040            .word	$40
34962                                           ! 6658                    64,
34963 8A67                      0040            .word	$40
34964                                           ! 6659                        0xA000,
34965 8A69                      A000            .word	$A000
34966                                           ! 6660                        0x0000,
34967 8A6B                      0000            .word	0
34968                                           ! 6661                       0,
34969 8A6D                      0000            .word	0
34970 8A6F                      0000            .word	0
34971                                           ! 6662                             2800,
34972 8A71                      0AF0            .word	$AF0
34973                                           ! 6663                        1400,
34974 8A73                      0578            .word	$578
34975                                           ! 6664                        1050,
34976 8A75                      041A            .word	$41A
34977                                           ! 6665                      8,
34978 8A77                        08            .byte	8
34979                                           ! 6666            
34980                                           ! 6666           16,
34981 8A78                        10            .byte	$10
34982                                           ! 6667                           1,
34983 8A79                        01            .byte	1
34984                                           ! 6668                         16,
34985 8A7A                        10            .byte	$10
34986                                           ! 6669                          45,
34987 8A7B                        2D            .byte	$2D
34988                                           ! 6670                        0x06,
34989 8A7C                        06            .byte	6
34990                                           ! 6671                     0,
34991 8A7D                        00            .byte	0
34992                                           ! 6672                               4,
34993 8A7E                        04            .byte	4
34994                                           ! 6673                          0,
34995 8A7F                        00            .byte	0
34996                                           ! 6674                        5,
34997 8A80                        05            .byte	5
34998                                           ! 6675                             11,
34999 8A81                        0B            .byte	$B
35000                                           ! 6676                          6,
35001 8A82                        06            .byte	6
35002                                           ! 6677                               5,
35003 8A83                        05            .byte	5
35004                                           ! 6678                         5,
35005 8A84                        05            .byte	5
35006                                           ! 6679                              0,
35007 8A85                        00            .byte	0
35008                                           ! 6680                         0,
35009 8A86                        00            .byte	0
35010                                           ! 6681                              0,
35011 8A87                        00            .byte	0
35012                                           ! 6682                                0,
35013 8A88                        00            .byte	0
35014                                           ! 6683                        0xE0000000,
35015 8A89                      0000            .word	0
35016 8A8B                      E000            .word	$E000
35017                                           ! 6684                               0,
35018 8A8D                      0000            .word	0
35019 8A8F                      0000            .word	0
35020                                           ! 6685                             0,
35021 8A91                      0000            .word	0
35022                                           ! 6686                                2800,
35023 8A93                      0AF0            .word	$AF0
35024                                           ! 6687                             0,
35025 8A95                        00            .byte	0
35026                                           ! 6688                             0,
35027 8A96                        00            .byte	0
35028                                           ! 6689                           5,
35029 8A97                        05            .byte	5
35030                                           ! 6690                                11,
35031 8A98                        0B            .byte	$B
35032                                           ! 6691                             6,
35033 8A99                        06            .byte	6
35034                                           ! 6692                                  5,
35035 8A9A                        05            .byte	5
35036                                           ! 6693                            5,
35037 8A9B                        05            .byte	5
35038                                           ! 6694                                 0,
35039 8A9C                        00            .byte	0
35040                                           ! 6695                            0,
35041 8A9D                        00            .byte	0
35042                                           ! 6696                                 0,
35043 8A9E                        00            .byte	0
35044                                           ! 6697                          0,
35045 8A9F                      0000            .word	0
35046 8AA1                      0000            .word	0
35047                                           ! 6698 } },
35048                                           ! 6699 { 0x0182,
35049 8AA3                      0182            .word	$182
35050                                           ! 6700 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35051 8AA5                      009B            .word	$9B
35052                                           ! 6701                           0x01 | 0x02 | 0x04,
35053 8AA7                        07            .byte	7
35054                                           ! 6702                           0,
35055 8AA8                        00            .byte	0
35056                                           ! 6703                           64,
35057 8AA9                      0040            .word	$40
35058                                           ! 6704                    64,
35059 8AAB                      0040            .word	$40
35060                                           ! 6705                        0xA000,
35061 8AAD                      A000            .word	$A000
35062                                           ! 6706                        0x0000,
35063 8AAF                      0000            .word	0
35064                                           ! 6707                       0,
35065 8AB1                      0000            .word	0
35066 8AB3                      0000            .word	0
35067                                           ! 6708                             4200,
35068 8AB5                      1068            .word	$1068
35069                                           ! 6709                        1400,
35070 8AB7                      0578            .word	$578
35071                                           ! 6710                        1050,
35072 8AB9                      041A            .word	$41A
35073                                           ! 6711                      8,
35074 8ABB                        08            .byte	8
35075                                           ! 6712                      16,
35076 8ABC                        10            .byte	$10
35077                                           ! 6713                           1,
35078 8ABD                        01            .byte	1
35079                                           ! 6714                         24,
35080 8ABE                        18            .byte	$18
35081                                           ! 6715                          68,
35082 8ABF                        44            .byte	$44
35083                                           ! 6716                        0x06,
35084 8AC0                        06            .byte	6
35085                                           ! 6717                     0,
35086 8AC1                        00            .byte	0
35087                                           ! 6718                               2,
35088 8AC2                        02            .byte	2
35089                                           ! 6719                          0,
35090 8AC3                        00            .byte	0
35091                                           ! 6720                        8,
35092 8AC4                        08            .byte	8
35093                                           ! 6721                             16,
35094 8AC5                        10            .byte	$10
35095                                           ! 6722                          8,
35096 8AC6                        08            .byte	8
35097                                           ! 6723                               8,
35098 8AC7                        08            .byte	8
35099                                           ! 6724                         8,
35100 8AC8                        08            .byte	8
35101                                           ! 6725                              0,
35102 8AC9                        00            .byte	0
35103                                           ! 6726                         0,
35104 8ACA                        00            .byte	0
35105                                           ! 6727                              0,
35106 8ACB                        00            .byte	0
35107                                           ! 6728                                0,
35108 8ACC                        00            .byte	0
35109                                           ! 6729                        0xE0000000,
35110 8ACD                      0000            .word	0
35111 8ACF                      E000            .word	$E000
35112                                           ! 6730                               0,
35113 8AD1                      0000            .word	0
35114 8AD3                      0000            .word	0
35115                                           ! 6731                             0,
35116 8AD5                      0000            .word	0
35117                                           ! 6732                                4200,
35118 8AD7                      1068            .word	$1068
35119                                           ! 6733                             0,
35120 8AD9                        00            .byte	0
35121                                           ! 6734                        
35122                                           ! 6734      0,
35123 8ADA                        00            .byte	0
35124                                           ! 6735                           8,
35125 8ADB                        08            .byte	8
35126                                           ! 6736                                16,
35127 8ADC                        10            .byte	$10
35128                                           ! 6737                             8,
35129 8ADD                        08            .byte	8
35130                                           ! 6738                                  8,
35131 8ADE                        08            .byte	8
35132                                           ! 6739                            8,
35133 8ADF                        08            .byte	8
35134                                           ! 6740                                 0,
35135 8AE0                        00            .byte	0
35136                                           ! 6741                            0,
35137 8AE1                        00            .byte	0
35138                                           ! 6742                                 0,
35139 8AE2                        00            .byte	0
35140                                           ! 6743                          0,
35141 8AE3                      0000            .word	0
35142 8AE5                      0000            .word	0
35143                                           ! 6744 } },
35144                                           ! 6745 { 0x0183,
35145 8AE7                      0183            .word	$183
35146                                           ! 6746 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35147 8AE9                      009B            .word	$9B
35148                                           ! 6747                           0x01 | 0x02 | 0x04,
35149 8AEB                        07            .byte	7
35150                                           ! 6748                           0,
35151 8AEC                        00            .byte	0
35152                                           ! 6749                           64,
35153 8AED                      0040            .word	$40
35154                                           ! 6750                    64,
35155 8AEF                      0040            .word	$40
35156                                           ! 6751                        0xA000,
35157 8AF1                      A000            .word	$A000
35158                                           ! 6752                        0x0000,
35159 8AF3                      0000            .word	0
35160                                           ! 6753                       0,
35161 8AF5                      0000            .word	0
35162 8AF7                      0000            .word	0
35163                                           ! 6754                             5600,
35164 8AF9                      15E0            .word	$15E0
35165                                           ! 6755                        1400,
35166 8AFB                      0578            .word	$578
35167                                           ! 6756                        1050,
35168 8AFD                      041A            .word	$41A
35169                                           ! 6757                      8,
35170 8AFF                        08            .byte	8
35171                                           ! 6758                      16,
35172 8B00                        10            .byte	$10
35173                                           ! 6759                           1,
35174 8B01                        01            .byte	1
35175                                           ! 6760                         32,
35176 8B02                        20            .byte	$20
35177                                           ! 6761                          90,
35178 8B03                        5A            .byte	$5A
35179                                           ! 6762                        0x06,
35180 8B04                        06            .byte	6
35181                                           ! 6763                     0,
35182 8B05                        00            .byte	0
35183                                           ! 6764                               1,
35184 8B06                        01            .byte	1
35185                                           ! 6765                          0,
35186 8B07                        00            .byte	0
35187                                           ! 6766                        8,
35188 8B08                        08            .byte	8
35189                                           ! 6767                             16,
35190 8B09                        10            .byte	$10
35191                                           ! 6768                          8,
35192 8B0A                        08            .byte	8
35193                                           ! 6769                               8,
35194 8B0B                        08            .byte	8
35195                                           ! 6770                         8,
35196 8B0C                        08            .byte	8
35197                                           ! 6771                              0,
35198 8B0D                        00            .byte	0
35199                                           ! 6772                         8,
35200 8B0E                        08            .byte	8
35201                                           ! 6773                              24,
35202 8B0F                        18            .byte	$18
35203                                           ! 6774                                0x02,
35204 8B10                        02            .byte	2
35205                                           ! 6775                        0xE0000000,
35206 8B11                      0000            .word	0
35207 8B13                      E000            .word	$E000
35208                                           ! 6776                               0,
35209 8B15                      0000            .word	0
35210 8B17                      0000            .word	0
35211                                           ! 6777                             0,
35212 8B19                      0000            .word	0
35213                                           ! 6778                                5600,
35214 8B1B                      15E0            .word	$15E0
35215                                           ! 6779                             0,
35216 8B1D                        00            .byte	0
35217                                           ! 6780                             0,
35218 8B1E                        00            .byte	0
35219                                           ! 6781                           8,
35220 8B1F                        08            .byte	8
35221                                           ! 6782                                16,
35222 8B20                        10            .byte	$10
35223                                           ! 6783                             8,
35224 8B21                        08            .byte	8
35225                                           ! 6784                                  8,
35226 8B22                        08            .byte	8
35227                                           ! 6785                            8,
35228 8B23                        08            .byte	8
35229                                           ! 6786                                 0,
35230 8B24                        00            .byte	0
35231                                           ! 6787                            8,
35232 8B25                        08            .byte	8
35233                                           ! 6788                                 24,
35234 8B26                        18            .byte	$18
35235                                           ! 6789                          0,
35236 8B27                      0000            .word	0
35237 8B29                      0000            .word	0
35238                                           ! 6790 } },
35239                                           ! 6791 { 0x0184,
35240 8B2B                      0184            .word	$184
35241                                           ! 6792 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35242 8B2D                      009B            .word	$9B
35243                                           ! 6793                           0x01 | 0x02 | 0x04,
35244 8B2F                        07            .byte	7
35245                                           ! 6794                           0,
35246 8B30                        00            .byte	0
35247                                           ! 6795                           64,
35248 8B31                      0040            .word	$40
35249                                           ! 6796                    64,
35250 8B33                      0040            .word	$40
35251                                           ! 6797                        0xA000,
35252 8B35                      A000            .word	$A000
35253                                           ! 6798                        0x0000,
35254 8B37                      0000            .word	0
35255                                           ! 6799                       0,
35256 8B39                      0000            .word	0
35257 8B3B                      0000            .word	0
35258                                           ! 6800                             3360,
35259 8B3D                      0D20            .word	$D20
35260                                           ! 6801                        1680,
35261 8B3F                      0690            .word	$690
35262                                           ! 6802                        1050,
35263 8B41                      041A            .word	$41A
35264                                           ! 6803     
35265                                           ! 6803                  8,
35266 8B43                        08            .byte	8
35267                                           ! 6804                      16,
35268 8B44                        10            .byte	$10
35269                                           ! 6805                           1,
35270 8B45                        01            .byte	1
35271                                           ! 6806                         16,
35272 8B46                        10            .byte	$10
35273                                           ! 6807                          54,
35274 8B47                        36            .byte	$36
35275                                           ! 6808                        0x06,
35276 8B48                        06            .byte	6
35277                                           ! 6809                     0,
35278 8B49                        00            .byte	0
35279                                           ! 6810                               3,
35280 8B4A                        03            .byte	3
35281                                           ! 6811                          0,
35282 8B4B                        00            .byte	0
35283                                           ! 6812                        5,
35284 8B4C                        05            .byte	5
35285                                           ! 6813                             11,
35286 8B4D                        0B            .byte	$B
35287                                           ! 6814                          6,
35288 8B4E                        06            .byte	6
35289                                           ! 6815                               5,
35290 8B4F                        05            .byte	5
35291                                           ! 6816                         5,
35292 8B50                        05            .byte	5
35293                                           ! 6817                              0,
35294 8B51                        00            .byte	0
35295                                           ! 6818                         0,
35296 8B52                        00            .byte	0
35297                                           ! 6819                              0,
35298 8B53                        00            .byte	0
35299                                           ! 6820                                0,
35300 8B54                        00            .byte	0
35301                                           ! 6821                        0xE0000000,
35302 8B55                      0000            .word	0
35303 8B57                      E000            .word	$E000
35304                                           ! 6822                               0,
35305 8B59                      0000            .word	0
35306 8B5B                      0000            .word	0
35307                                           ! 6823                             0,
35308 8B5D                      0000            .word	0
35309                                           ! 6824                                3360,
35310 8B5F                      0D20            .word	$D20
35311                                           ! 6825                             0,
35312 8B61                        00            .byte	0
35313                                           ! 6826                             0,
35314 8B62                        00            .byte	0
35315                                           ! 6827                           5,
35316 8B63                        05            .byte	5
35317                                           ! 6828                                11,
35318 8B64                        0B            .byte	$B
35319                                           ! 6829                             6,
35320 8B65                        06            .byte	6
35321                                           ! 6830                                  5,
35322 8B66                        05            .byte	5
35323                                           ! 6831                            5,
35324 8B67                        05            .byte	5
35325                                           ! 6832                                 0,
35326 8B68                        00            .byte	0
35327                                           ! 6833                            0,
35328 8B69                        00            .byte	0
35329                                           ! 6834                                 0,
35330 8B6A                        00            .byte	0
35331                                           ! 6835                          0,
35332 8B6B                      0000            .word	0
35333 8B6D                      0000            .word	0
35334                                           ! 6836 } },
35335                                           ! 6837 { 0x0185,
35336 8B6F                      0185            .word	$185
35337                                           ! 6838 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35338 8B71                      009B            .word	$9B
35339                                           ! 6839                           0x01 | 0x02 | 0x04,
35340 8B73                        07            .byte	7
35341                                           ! 6840                           0,
35342 8B74                        00            .byte	0
35343                                           ! 6841                           64,
35344 8B75                      0040            .word	$40
35345                                           ! 6842                    64,
35346 8B77                      0040            .word	$40
35347                                           ! 6843                        0xA000,
35348 8B79                      A000            .word	$A000
35349                                           ! 6844                        0x0000,
35350 8B7B                      0000            .word	0
35351                                           ! 6845                       0,
35352 8B7D                      0000            .word	0
35353 8B7F                      0000            .word	0
35354                                           ! 6846                             5040,
35355 8B81                      13B0            .word	$13B0
35356                                           ! 6847                        1680,
35357 8B83                      0690            .word	$690
35358                                           ! 6848                        1050,
35359 8B85                      041A            .word	$41A
35360                                           ! 6849                      8,
35361 8B87                        08            .byte	8
35362                                           ! 6850                      16,
35363 8B88                        10            .byte	$10
35364                                           ! 6851                           1,
35365 8B89                        01            .byte	1
35366                                           ! 6852                         24,
35367 8B8A                        18            .byte	$18
35368                                           ! 6853                          81,
35369 8B8B                        51            .byte	$51
35370                                           ! 6854                        0x06,
35371 8B8C                        06            .byte	6
35372                                           ! 6855                     0,
35373 8B8D                        00            .byte	0
35374                                           ! 6856                               2,
35375 8B8E                        02            .byte	2
35376                                           ! 6857                          0,
35377 8B8F                        00            .byte	0
35378                                           ! 6858                        8,
35379 8B90                        08            .byte	8
35380                                           ! 6859                             16,
35381 8B91                        10            .byte	$10
35382                                           ! 6860                          8,
35383 8B92                        08            .byte	8
35384                                           ! 6861                               8,
35385 8B93                        08            .byte	8
35386                                           ! 6862                         8,
35387 8B94                        08            .byte	8
35388                                           ! 6863                              0,
35389 8B95                        00            .byte	0
35390                                           ! 6864                         0,
35391 8B96                        00            .byte	0
35392                                           ! 6865                              0,
35393 8B97                        00            .byte	0
35394                                           ! 6866                                0,
35395 8B98                        00            .byte	0
35396                                           ! 6867                        0xE0000000,
35397 8B99                      0000            .word	0
35398 8B9B                      E000            .word	$E000
35399                                           ! 6868                               0,
35400 8B9D                      0000            .word	0
35401 8B9F                      0000            .word	0
35402                                           ! 6869                             0,
35403 8BA1                      0000            .word	0
35404                                           ! 6870                                5040,
35405 8BA3                      13B0            .word	$13B0
35406                                           ! 6871                        
35407                                           ! 6871      0,
35408 8BA5                        00            .byte	0
35409                                           ! 6872                             0,
35410 8BA6                        00            .byte	0
35411                                           ! 6873                           8,
35412 8BA7                        08            .byte	8
35413                                           ! 6874                                16,
35414 8BA8                        10            .byte	$10
35415                                           ! 6875                             8,
35416 8BA9                        08            .byte	8
35417                                           ! 6876                                  8,
35418 8BAA                        08            .byte	8
35419                                           ! 6877                            8,
35420 8BAB                        08            .byte	8
35421                                           ! 6878                                 0,
35422 8BAC                        00            .byte	0
35423                                           ! 6879                            0,
35424 8BAD                        00            .byte	0
35425                                           ! 6880                                 0,
35426 8BAE                        00            .byte	0
35427                                           ! 6881                          0,
35428 8BAF                      0000            .word	0
35429 8BB1                      0000            .word	0
35430                                           ! 6882 } },
35431                                           ! 6883 { 0x0186,
35432 8BB3                      0186            .word	$186
35433                                           ! 6884 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35434 8BB5                      009B            .word	$9B
35435                                           ! 6885                           0x01 | 0x02 | 0x04,
35436 8BB7                        07            .byte	7
35437                                           ! 6886                           0,
35438 8BB8                        00            .byte	0
35439                                           ! 6887                           64,
35440 8BB9                      0040            .word	$40
35441                                           ! 6888                    64,
35442 8BBB                      0040            .word	$40
35443                                           ! 6889                        0xA000,
35444 8BBD                      A000            .word	$A000
35445                                           ! 6890                        0x0000,
35446 8BBF                      0000            .word	0
35447                                           ! 6891                       0,
35448 8BC1                      0000            .word	0
35449 8BC3                      0000            .word	0
35450                                           ! 6892                             6720,
35451 8BC5                      1A40            .word	$1A40
35452                                           ! 6893                        1680,
35453 8BC7                      0690            .word	$690
35454                                           ! 6894                        1050,
35455 8BC9                      041A            .word	$41A
35456                                           ! 6895                      8,
35457 8BCB                        08            .byte	8
35458                                           ! 6896                      16,
35459 8BCC                        10            .byte	$10
35460                                           ! 6897                           1,
35461 8BCD                        01            .byte	1
35462                                           ! 6898                         32,
35463 8BCE                        20            .byte	$20
35464                                           ! 6899                          108,
35465 8BCF                        6C            .byte	$6C
35466                                           ! 6900                        0x06,
35467 8BD0                        06            .byte	6
35468                                           ! 6901                     0,
35469 8BD1                        00            .byte	0
35470                                           ! 6902                               1,
35471 8BD2                        01            .byte	1
35472                                           ! 6903                          0,
35473 8BD3                        00            .byte	0
35474                                           ! 6904                        8,
35475 8BD4                        08            .byte	8
35476                                           ! 6905                             16,
35477 8BD5                        10            .byte	$10
35478                                           ! 6906                          8,
35479 8BD6                        08            .byte	8
35480                                           ! 6907                               8,
35481 8BD7                        08            .byte	8
35482                                           ! 6908                         8,
35483 8BD8                        08            .byte	8
35484                                           ! 6909                              0,
35485 8BD9                        00            .byte	0
35486                                           ! 6910                         8,
35487 8BDA                        08            .byte	8
35488                                           ! 6911                              24,
35489 8BDB                        18            .byte	$18
35490                                           ! 6912                                0x02,
35491 8BDC                        02            .byte	2
35492                                           ! 6913                        0xE0000000,
35493 8BDD                      0000            .word	0
35494 8BDF                      E000            .word	$E000
35495                                           ! 6914                               0,
35496 8BE1                      0000            .word	0
35497 8BE3                      0000            .word	0
35498                                           ! 6915                             0,
35499 8BE5                      0000            .word	0
35500                                           ! 6916                                6720,
35501 8BE7                      1A40            .word	$1A40
35502                                           ! 6917                             0,
35503 8BE9                        00            .byte	0
35504                                           ! 6918                             0,
35505 8BEA                        00            .byte	0
35506                                           ! 6919                           8,
35507 8BEB                        08            .byte	8
35508                                           ! 6920                                16,
35509 8BEC                        10            .byte	$10
35510                                           ! 6921                             8,
35511 8BED                        08            .byte	8
35512                                           ! 6922                                  8,
35513 8BEE                        08            .byte	8
35514                                           ! 6923                            8,
35515 8BEF                        08            .byte	8
35516                                           ! 6924                                 0,
35517 8BF0                        00            .byte	0
35518                                           ! 6925                            8,
35519 8BF1                        08            .byte	8
35520                                           ! 6926                                 24,
35521 8BF2                        18            .byte	$18
35522                                           ! 6927                          0,
35523 8BF3                      0000            .word	0
35524 8BF5                      0000            .word	0
35525                                           ! 6928 } },
35526                                           ! 6929 { 0x0187,
35527 8BF7                      0187            .word	$187
35528                                           ! 6930 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35529 8BF9                      009B            .word	$9B
35530                                           ! 6931                           0x01 | 0x02 | 0x04,
35531 8BFB                        07            .byte	7
35532                                           ! 6932                           0,
35533 8BFC                        00            .byte	0
35534                                           ! 6933                           64,
35535 8BFD                      0040            .word	$40
35536                                           ! 6934                    64,
35537 8BFF                      0040            .word	$40
35538                                           ! 6935                        0xA000,
35539 8C01                      A000            .word	$A000
35540                                           ! 6936                        0x0000,
35541 8C03                      0000            .word	0
35542                                           ! 6937                       0,
35543 8C05                      0000            .word	0
35544 8C07                      0000            .word	0
35545                                           ! 6938                             3840,
35546 8C09                      0F00            .word	$F00
35547                                           ! 6939                        1920,
35548 8C0B                      0780            .word	$780
35549                                           ! 6940  
35550                                           ! 6940                       1200,
35551 8C0D                      04B0            .word	$4B0
35552                                           ! 6941                      8,
35553 8C0F                        08            .byte	8
35554                                           ! 6942                      16,
35555 8C10                        10            .byte	$10
35556                                           ! 6943                           1,
35557 8C11                        01            .byte	1
35558                                           ! 6944                         16,
35559 8C12                        10            .byte	$10
35560                                           ! 6945                          71,
35561 8C13                        47            .byte	$47
35562                                           ! 6946                        0x06,
35563 8C14                        06            .byte	6
35564                                           ! 6947                     0,
35565 8C15                        00            .byte	0
35566                                           ! 6948                               2,
35567 8C16                        02            .byte	2
35568                                           ! 6949                          0,
35569 8C17                        00            .byte	0
35570                                           ! 6950                        5,
35571 8C18                        05            .byte	5
35572                                           ! 6951                             11,
35573 8C19                        0B            .byte	$B
35574                                           ! 6952                          6,
35575 8C1A                        06            .byte	6
35576                                           ! 6953                               5,
35577 8C1B                        05            .byte	5
35578                                           ! 6954                         5,
35579 8C1C                        05            .byte	5
35580                                           ! 6955                              0,
35581 8C1D                        00            .byte	0
35582                                           ! 6956                         0,
35583 8C1E                        00            .byte	0
35584                                           ! 6957                              0,
35585 8C1F                        00            .byte	0
35586                                           ! 6958                                0,
35587 8C20                        00            .byte	0
35588                                           ! 6959                        0xE0000000,
35589 8C21                      0000            .word	0
35590 8C23                      E000            .word	$E000
35591                                           ! 6960                               0,
35592 8C25                      0000            .word	0
35593 8C27                      0000            .word	0
35594                                           ! 6961                             0,
35595 8C29                      0000            .word	0
35596                                           ! 6962                                3840,
35597 8C2B                      0F00            .word	$F00
35598                                           ! 6963                             0,
35599 8C2D                        00            .byte	0
35600                                           ! 6964                             0,
35601 8C2E                        00            .byte	0
35602                                           ! 6965                           5,
35603 8C2F                        05            .byte	5
35604                                           ! 6966                                11,
35605 8C30                        0B            .byte	$B
35606                                           ! 6967                             6,
35607 8C31                        06            .byte	6
35608                                           ! 6968                                  5,
35609 8C32                        05            .byte	5
35610                                           ! 6969                            5,
35611 8C33                        05            .byte	5
35612                                           ! 6970                                 0,
35613 8C34                        00            .byte	0
35614                                           ! 6971                            0,
35615 8C35                        00            .byte	0
35616                                           ! 6972                                 0,
35617 8C36                        00            .byte	0
35618                                           ! 6973                          0,
35619 8C37                      0000            .word	0
35620 8C39                      0000            .word	0
35621                                           ! 6974 } },
35622                                           ! 6975 { 0x0188,
35623 8C3B                      0188            .word	$188
35624                                           ! 6976 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35625 8C3D                      009B            .word	$9B
35626                                           ! 6977                           0x01 | 0x02 | 0x04,
35627 8C3F                        07            .byte	7
35628                                           ! 6978                           0,
35629 8C40                        00            .byte	0
35630                                           ! 6979                           64,
35631 8C41                      0040            .word	$40
35632                                           ! 6980                    64,
35633 8C43                      0040            .word	$40
35634                                           ! 6981                        0xA000,
35635 8C45                      A000            .word	$A000
35636                                           ! 6982                        0x0000,
35637 8C47                      0000            .word	0
35638                                           ! 6983                       0,
35639 8C49                      0000            .word	0
35640 8C4B                      0000            .word	0
35641                                           ! 6984                             5760,
35642 8C4D                      1680            .word	$1680
35643                                           ! 6985                        1920,
35644 8C4F                      0780            .word	$780
35645                                           ! 6986                        1200,
35646 8C51                      04B0            .word	$4B0
35647                                           ! 6987                      8,
35648 8C53                        08            .byte	8
35649                                           ! 6988                      16,
35650 8C54                        10            .byte	$10
35651                                           ! 6989                           1,
35652 8C55                        01            .byte	1
35653                                           ! 6990                         24,
35654 8C56                        18            .byte	$18
35655                                           ! 6991                          106,
35656 8C57                        6A            .byte	$6A
35657                                           ! 6992                        0x06,
35658 8C58                        06            .byte	6
35659                                           ! 6993                     0,
35660 8C59                        00            .byte	0
35661                                           ! 6994                               1,
35662 8C5A                        01            .byte	1
35663                                           ! 6995                          0,
35664 8C5B                        00            .byte	0
35665                                           ! 6996                        8,
35666 8C5C                        08            .byte	8
35667                                           ! 6997                             16,
35668 8C5D                        10            .byte	$10
35669                                           ! 6998                          8,
35670 8C5E                        08            .byte	8
35671                                           ! 6999                               8,
35672 8C5F                        08            .byte	8
35673                                           ! 7000                         8,
35674 8C60                        08            .byte	8
35675                                           ! 7001                              0,
35676 8C61                        00            .byte	0
35677                                           ! 7002                         0,
35678 8C62                        00            .byte	0
35679                                           ! 7003                              0,
35680 8C63                        00            .byte	0
35681                                           ! 7004                                0,
35682 8C64                        00            .byte	0
35683                                           ! 7005                        0xE0000000,
35684 8C65                      0000            .word	0
35685 8C67                      E000            .word	$E000
35686                                           ! 7006                               0,
35687 8C69                      0000            .word	0
35688 8C6B                      0000            .word	0
35689                                           ! 7007                             0,
35690 8C6D                      0000            .word	0
35691                                           ! 7008                            
35692                                           ! 7008     5760,
35693 8C6F                      1680            .word	$1680
35694                                           ! 7009                             0,
35695 8C71                        00            .byte	0
35696                                           ! 7010                             0,
35697 8C72                        00            .byte	0
35698                                           ! 7011                           8,
35699 8C73                        08            .byte	8
35700                                           ! 7012                                16,
35701 8C74                        10            .byte	$10
35702                                           ! 7013                             8,
35703 8C75                        08            .byte	8
35704                                           ! 7014                                  8,
35705 8C76                        08            .byte	8
35706                                           ! 7015                            8,
35707 8C77                        08            .byte	8
35708                                           ! 7016                                 0,
35709 8C78                        00            .byte	0
35710                                           ! 7017                            0,
35711 8C79                        00            .byte	0
35712                                           ! 7018                                 0,
35713 8C7A                        00            .byte	0
35714                                           ! 7019                          0,
35715 8C7B                      0000            .word	0
35716 8C7D                      0000            .word	0
35717                                           ! 7020 } },
35718                                           ! 7021 { 0x0189,
35719 8C7F                      0189            .word	$189
35720                                           ! 7022 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35721 8C81                      009B            .word	$9B
35722                                           ! 7023                           0x01 | 0x02 | 0x04,
35723 8C83                        07            .byte	7
35724                                           ! 7024                           0,
35725 8C84                        00            .byte	0
35726                                           ! 7025                           64,
35727 8C85                      0040            .word	$40
35728                                           ! 7026                    64,
35729 8C87                      0040            .word	$40
35730                                           ! 7027                        0xA000,
35731 8C89                      A000            .word	$A000
35732                                           ! 7028                        0x0000,
35733 8C8B                      0000            .word	0
35734                                           ! 7029                       0,
35735 8C8D                      0000            .word	0
35736 8C8F                      0000            .word	0
35737                                           ! 7030                             7680,
35738 8C91                      1E00            .word	$1E00
35739                                           ! 7031                        1920,
35740 8C93                      0780            .word	$780
35741                                           ! 7032                        1200,
35742 8C95                      04B0            .word	$4B0
35743                                           ! 7033                      8,
35744 8C97                        08            .byte	8
35745                                           ! 7034                      16,
35746 8C98                        10            .byte	$10
35747                                           ! 7035                           1,
35748 8C99                        01            .byte	1
35749                                           ! 7036                         32,
35750 8C9A                        20            .byte	$20
35751                                           ! 7037                          141,
35752 8C9B                        8D            .byte	$8D
35753                                           ! 7038                        0x06,
35754 8C9C                        06            .byte	6
35755                                           ! 7039                     0,
35756 8C9D                        00            .byte	0
35757                                           ! 7040                               0,
35758 8C9E                        00            .byte	0
35759                                           ! 7041                          0,
35760 8C9F                        00            .byte	0
35761                                           ! 7042                        8,
35762 8CA0                        08            .byte	8
35763                                           ! 7043                             16,
35764 8CA1                        10            .byte	$10
35765                                           ! 7044                          8,
35766 8CA2                        08            .byte	8
35767                                           ! 7045                               8,
35768 8CA3                        08            .byte	8
35769                                           ! 7046                         8,
35770 8CA4                        08            .byte	8
35771                                           ! 7047                              0,
35772 8CA5                        00            .byte	0
35773                                           ! 7048                         8,
35774 8CA6                        08            .byte	8
35775                                           ! 7049                              24,
35776 8CA7                        18            .byte	$18
35777                                           ! 7050                                0x02,
35778 8CA8                        02            .byte	2
35779                                           ! 7051                        0xE0000000,
35780 8CA9                      0000            .word	0
35781 8CAB                      E000            .word	$E000
35782                                           ! 7052                               0,
35783 8CAD                      0000            .word	0
35784 8CAF                      0000            .word	0
35785                                           ! 7053                             0,
35786 8CB1                      0000            .word	0
35787                                           ! 7054                                7680,
35788 8CB3                      1E00            .word	$1E00
35789                                           ! 7055                             0,
35790 8CB5                        00            .byte	0
35791                                           ! 7056                             0,
35792 8CB6                        00            .byte	0
35793                                           ! 7057                           8,
35794 8CB7                        08            .byte	8
35795                                           ! 7058                                16,
35796 8CB8                        10            .byte	$10
35797                                           ! 7059                             8,
35798 8CB9                        08            .byte	8
35799                                           ! 7060                                  8,
35800 8CBA                        08            .byte	8
35801                                           ! 7061                            8,
35802 8CBB                        08            .byte	8
35803                                           ! 7062                                 0,
35804 8CBC                        00            .byte	0
35805                                           ! 7063                            8,
35806 8CBD                        08            .byte	8
35807                                           ! 7064                                 24,
35808 8CBE                        18            .byte	$18
35809                                           ! 7065                          0,
35810 8CBF                      0000            .word	0
35811 8CC1                      0000            .word	0
35812                                           ! 7066 } },
35813                                           ! 7067 { 0x018a,
35814 8CC3                      018A            .word	$18A
35815                                           ! 7068 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35816 8CC5                      009B            .word	$9B
35817                                           ! 7069                           0x01 | 0x02 | 0x04,
35818 8CC7                        07            .byte	7
35819                                           ! 7070                           0,
35820 8CC8                        00            .byte	0
35821                                           ! 7071                           64,
35822 8CC9                      0040            .word	$40
35823                                           ! 7072                    64,
35824 8CCB                      0040            .word	$40
35825                                           ! 7073                        0xA000,
35826 8CCD                      A000            .word	$A000
35827                                           ! 7074                        0x0000,
35828 8CCF                      0000            .word	0
35829                                           ! 7075                       0,
35830 8CD1                      0000            .word	0
35831 8CD3                      0000            .word	0
35832                                           ! 7076                             512
35833                                           ! 7076 0,
35834 8CD5                      1400            .word	$1400
35835                                           ! 7077                        2560,
35836 8CD7                      0A00            .word	$A00
35837                                           ! 7078                        1600,
35838 8CD9                      0640            .word	$640
35839                                           ! 7079                      8,
35840 8CDB                        08            .byte	8
35841                                           ! 7080                      16,
35842 8CDC                        10            .byte	$10
35843                                           ! 7081                           1,
35844 8CDD                        01            .byte	1
35845                                           ! 7082                         16,
35846 8CDE                        10            .byte	$10
35847                                           ! 7083                          125,
35848 8CDF                        7D            .byte	$7D
35849                                           ! 7084                        0x06,
35850 8CE0                        06            .byte	6
35851                                           ! 7085                     0,
35852 8CE1                        00            .byte	0
35853                                           ! 7086                               1,
35854 8CE2                        01            .byte	1
35855                                           ! 7087                          0,
35856 8CE3                        00            .byte	0
35857                                           ! 7088                        5,
35858 8CE4                        05            .byte	5
35859                                           ! 7089                             11,
35860 8CE5                        0B            .byte	$B
35861                                           ! 7090                          6,
35862 8CE6                        06            .byte	6
35863                                           ! 7091                               5,
35864 8CE7                        05            .byte	5
35865                                           ! 7092                         5,
35866 8CE8                        05            .byte	5
35867                                           ! 7093                              0,
35868 8CE9                        00            .byte	0
35869                                           ! 7094                         0,
35870 8CEA                        00            .byte	0
35871                                           ! 7095                              0,
35872 8CEB                        00            .byte	0
35873                                           ! 7096                                0,
35874 8CEC                        00            .byte	0
35875                                           ! 7097                        0xE0000000,
35876 8CED                      0000            .word	0
35877 8CEF                      E000            .word	$E000
35878                                           ! 7098                               0,
35879 8CF1                      0000            .word	0
35880 8CF3                      0000            .word	0
35881                                           ! 7099                             0,
35882 8CF5                      0000            .word	0
35883                                           ! 7100                                5120,
35884 8CF7                      1400            .word	$1400
35885                                           ! 7101                             0,
35886 8CF9                        00            .byte	0
35887                                           ! 7102                             0,
35888 8CFA                        00            .byte	0
35889                                           ! 7103                           5,
35890 8CFB                        05            .byte	5
35891                                           ! 7104                                11,
35892 8CFC                        0B            .byte	$B
35893                                           ! 7105                             6,
35894 8CFD                        06            .byte	6
35895                                           ! 7106                                  5,
35896 8CFE                        05            .byte	5
35897                                           ! 7107                            5,
35898 8CFF                        05            .byte	5
35899                                           ! 7108                                 0,
35900 8D00                        00            .byte	0
35901                                           ! 7109                            0,
35902 8D01                        00            .byte	0
35903                                           ! 7110                                 0,
35904 8D02                        00            .byte	0
35905                                           ! 7111                          0,
35906 8D03                      0000            .word	0
35907 8D05                      0000            .word	0
35908                                           ! 7112 } },
35909                                           ! 7113 { 0x018b,
35910 8D07                      018B            .word	$18B
35911                                           ! 7114 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35912 8D09                      009B            .word	$9B
35913                                           ! 7115                           0x01 | 0x02 | 0x04,
35914 8D0B                        07            .byte	7
35915                                           ! 7116                           0,
35916 8D0C                        00            .byte	0
35917                                           ! 7117                           64,
35918 8D0D                      0040            .word	$40
35919                                           ! 7118                    64,
35920 8D0F                      0040            .word	$40
35921                                           ! 7119                        0xA000,
35922 8D11                      A000            .word	$A000
35923                                           ! 7120                        0x0000,
35924 8D13                      0000            .word	0
35925                                           ! 7121                       0,
35926 8D15                      0000            .word	0
35927 8D17                      0000            .word	0
35928                                           ! 7122                             7680,
35929 8D19                      1E00            .word	$1E00
35930                                           ! 7123                        2560,
35931 8D1B                      0A00            .word	$A00
35932                                           ! 7124                        1600,
35933 8D1D                      0640            .word	$640
35934                                           ! 7125                      8,
35935 8D1F                        08            .byte	8
35936                                           ! 7126                      16,
35937 8D20                        10            .byte	$10
35938                                           ! 7127                           1,
35939 8D21                        01            .byte	1
35940                                           ! 7128                         24,
35941 8D22                        18            .byte	$18
35942                                           ! 7129                          188,
35943 8D23                        BC            .byte	$BC
35944                                           ! 7130                        0x06,
35945 8D24                        06            .byte	6
35946                                           ! 7131                     0,
35947 8D25                        00            .byte	0
35948                                           ! 7132                               0,
35949 8D26                        00            .byte	0
35950                                           ! 7133                          0,
35951 8D27                        00            .byte	0
35952                                           ! 7134                        8,
35953 8D28                        08            .byte	8
35954                                           ! 7135                             16,
35955 8D29                        10            .byte	$10
35956                                           ! 7136                          8,
35957 8D2A                        08            .byte	8
35958                                           ! 7137                               8,
35959 8D2B                        08            .byte	8
35960                                           ! 7138                         8,
35961 8D2C                        08            .byte	8
35962                                           ! 7139                              0,
35963 8D2D                        00            .byte	0
35964                                           ! 7140                         0,
35965 8D2E                        00            .byte	0
35966                                           ! 7141                              0,
35967 8D2F                        00            .byte	0
35968                                           ! 7142                                0,
35969 8D30                        00            .byte	0
35970                                           ! 7143                        0xE0000000,
35971 8D31                      0000            .word	0
35972 8D33                      E000            .word	$E000
35973                                           ! 7144                               0,
35974 8D35                      0000            .word	0
35975 8D37                      0000            .word	0
35976                                           ! 7145                         
35977                                           ! 7145     0,
35978 8D39                      0000            .word	0
35979                                           ! 7146                                7680,
35980 8D3B                      1E00            .word	$1E00
35981                                           ! 7147                             0,
35982 8D3D                        00            .byte	0
35983                                           ! 7148                             0,
35984 8D3E                        00            .byte	0
35985                                           ! 7149                           8,
35986 8D3F                        08            .byte	8
35987                                           ! 7150                                16,
35988 8D40                        10            .byte	$10
35989                                           ! 7151                             8,
35990 8D41                        08            .byte	8
35991                                           ! 7152                                  8,
35992 8D42                        08            .byte	8
35993                                           ! 7153                            8,
35994 8D43                        08            .byte	8
35995                                           ! 7154                                 0,
35996 8D44                        00            .byte	0
35997                                           ! 7155                            0,
35998 8D45                        00            .byte	0
35999                                           ! 7156                                 0,
36000 8D46                        00            .byte	0
36001                                           ! 7157                          0,
36002 8D47                      0000            .word	0
36003 8D49                      0000            .word	0
36004                                           ! 7158 } },
36005                                           ! 7159 { 0x018c,
36006 8D4B                      018C            .word	$18C
36007                                           ! 7160 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36008 8D4D                      009B            .word	$9B
36009                                           ! 7161                           0x01 | 0x02 | 0x04,
36010 8D4F                        07            .byte	7
36011                                           ! 7162                           0,
36012 8D50                        00            .byte	0
36013                                           ! 7163                           64,
36014 8D51                      0040            .word	$40
36015                                           ! 7164                    64,
36016 8D53                      0040            .word	$40
36017                                           ! 7165                        0xA000,
36018 8D55                      A000            .word	$A000
36019                                           ! 7166                        0x0000,
36020 8D57                      0000            .word	0
36021                                           ! 7167                       0,
36022 8D59                      0000            .word	0
36023 8D5B                      0000            .word	0
36024                                           ! 7168                             10240,
36025 8D5D                      2800            .word	$2800
36026                                           ! 7169                        2560,
36027 8D5F                      0A00            .word	$A00
36028                                           ! 7170                        1600,
36029 8D61                      0640            .word	$640
36030                                           ! 7171                      8,
36031 8D63                        08            .byte	8
36032                                           ! 7172                      16,
36033 8D64                        10            .byte	$10
36034                                           ! 7173                           1,
36035 8D65                        01            .byte	1
36036                                           ! 7174                         32,
36037 8D66                        20            .byte	$20
36038                                           ! 7175                          250,
36039 8D67                        FA            .byte	$FA
36040                                           ! 7176                        0x06,
36041 8D68                        06            .byte	6
36042                                           ! 7177                     0,
36043 8D69                        00            .byte	0
36044                                           ! 7178                               0,
36045 8D6A                        00            .byte	0
36046                                           ! 7179                          0,
36047 8D6B                        00            .byte	0
36048                                           ! 7180                        8,
36049 8D6C                        08            .byte	8
36050                                           ! 7181                             16,
36051 8D6D                        10            .byte	$10
36052                                           ! 7182                          8,
36053 8D6E                        08            .byte	8
36054                                           ! 7183                               8,
36055 8D6F                        08            .byte	8
36056                                           ! 7184                         8,
36057 8D70                        08            .byte	8
36058                                           ! 7185                              0,
36059 8D71                        00            .byte	0
36060                                           ! 7186                         8,
36061 8D72                        08            .byte	8
36062                                           ! 7187                              24,
36063 8D73                        18            .byte	$18
36064                                           ! 7188                                0x02,
36065 8D74                        02            .byte	2
36066                                           ! 7189                        0xE0000000,
36067 8D75                      0000            .word	0
36068 8D77                      E000            .word	$E000
36069                                           ! 7190                               0,
36070 8D79                      0000            .word	0
36071 8D7B                      0000            .word	0
36072                                           ! 7191                             0,
36073 8D7D                      0000            .word	0
36074                                           ! 7192                                10240,
36075 8D7F                      2800            .word	$2800
36076                                           ! 7193                             0,
36077 8D81                        00            .byte	0
36078                                           ! 7194                             0,
36079 8D82                        00            .byte	0
36080                                           ! 7195                           8,
36081 8D83                        08            .byte	8
36082                                           ! 7196                                16,
36083 8D84                        10            .byte	$10
36084                                           ! 7197                             8,
36085 8D85                        08            .byte	8
36086                                           ! 7198                                  8,
36087 8D86                        08            .byte	8
36088                                           ! 7199                            8,
36089 8D87                        08            .byte	8
36090                                           ! 7200                                 0,
36091 8D88                        00            .byte	0
36092                                           ! 7201                            8,
36093 8D89                        08            .byte	8
36094                                           ! 7202                                 24,
36095 8D8A                        18            .byte	$18
36096                                           ! 7203                          0,
36097 8D8B                      0000            .word	0
36098 8D8D                      0000            .word	0
36099                                           ! 7204 } },
36100                                           ! 7205 { 0xFFFF,
36101 8D8F                      FFFF            .word	$FFFF
36102                                           ! 7206 { 0,
36103 8D91                      0000            .word	0
36104                                           ! 7207 } },
36105 8D93                  00000040            .blkb	$40
36106                                           ! 7208 };
36107                                           !BCC_EOS
36108                                           ! 7209 extern char vbebios_copyright;
36109                                           !BCC_EOS
36110                                           ! 7210 extern char vbebios_vendor_name;
36111                                           !BCC_EOS
36112                                           ! 7211 extern char vbebios_product_name;
36113                                           !BCC_EOS
36114                                           ! 7212 extern char vbebios_product_revision;
36115                                           !BCC_EOS
36116                                           ! 7213 #asm
36117                                           !BCC_ASM
36118                       00008DD3            _vbebios_copyright:
36119 8DD3                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
36120 8E18                        00            .byte 0x00
36121                       00008E19            _vbebios_vendor_name:
36122 8E19                        42            .ascii "Bochs/Plex86 Developers"
36123 8E30                        00            .byte 0x00
36124                       00008E31            _vbebios_product_name:
36125 8E31                        42            .ascii "Bochs/Plex86 VBE Adapter"
36126 8E49                        00            .byte 0x00
36127                       00008E4A            _vbebios_product_revision:
36128 8E4A                        24            .ascii "$Id: vbe.c,v 1.60 2008/03/02 07:47:21 vruppert Exp $"
36129 8E7E                        00            .byte 0x00
36130                       00008E7F            _vbebios_info_string:
36131 8E7F                        42            .ascii "Bochs VBE Display Adapter enabled"
36132 8EA0                        0A            .byte 0x0a,0x0d
36133 8EA2                        0A            .byte 0x0a,0x0d
36134 8EA4                        00            .byte 0x00
36135                       00008EA5            _no_vbebios_info_string:
36136 8EA5                        4E            .ascii "NO Bochs VBE Support available!"
36137 8EC4                        0A            .byte 0x0a,0x0d
36138 8EC6                        0A            .byte 0x0a,0x0d
36139 8EC8                        00            .byte 0x00
36140                       00008EC9            msg_vbe_init:
36141 8EC9                        56            .ascii "VBE Bios $Id: vbe.c,v 1.60 2008/03/02 07:47:21 vruppert Exp $"
36142 8F06                        0A            .byte 0x0a,0x0d, 0x00
36143 8F09                  00000002              .align 2
36144                       00008F0A            vesa_pm_start:
36145 8F0A                      0014              dw vesa_pm_set_window - vesa_pm_start
36146 8F0C                      004B              dw vesa_pm_set_display_start - vesa_pm_start
36147 8F0E                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
36148 8F10                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
36149                       00008F12            vesa_pm_io_ports_table:
36150 8F12                      01CE              dw 0x01CE
36151 8F14                      01CF              dw 0x01CE + 1
36152 8F16                      01CF              dw 0x01CF
36153 8F18                      01D0              dw 0x01CF + 1
36154 8F1A                      FFFF              dw 0xffff
36155 8F1C                      FFFF              dw 0xffff
36156                                             USE32
36157                       00008F1E            vesa_pm_set_window:
36158 8F1E     66    83FB                   00    cmp bx, #0x00
36159 8F22           74           05              je vesa_pm_set_display_window1
36160 8F24     66    B8                   0100    mov ax, #0x0100
36161 8F28           C3                           ret
36162                       00008F29            vesa_pm_set_display_window1:
36163 8F29     66    89D0                         mov ax, dx
36164 8F2C     66    52                           push dx
36165 8F2E     66    50                           push ax
36166 8F30     66    BA                   01CE    mov dx, # 0x01CE
36167 8F34     66    B8                   0005    mov ax, # 0x5
36168 8F38     66    EF                           out dx, ax
36169 8F3A     66    58                           pop ax
36170 8F3C     66    BA                   01CF    mov dx, # 0x01CF
36171 8F40     66    EF                           out dx, ax
36172 8F42     66    ED                           in ax, dx
36173 8F44     66    5A                           pop dx
36174 8F46     66    39C2                         cmp dx, ax
36175 8F49           75           05              jne illegal_window
36176 8F4B     66    B8                   004F    mov ax, #0x004f
36177 8F4F           C3                           ret
36178                       00008F50            illegal_window:
36179 8F50     66    B8                   014F    mov ax, #0x014f
36180 8F54           C3                           ret
36181                       00008F55            vesa_pm_set_display_start:
36182 8F55           80FB                   80    cmp bl, #0x80
36183 8F58           74           0A              je vesa_pm_set_display_start1
36184 8F5A           80FB                   00    cmp bl, #0x00
36185 8F5D           74           05              je vesa_pm_set_display_start1
36186 8F5F     66    B8                   0100    mov ax, #0x0100
36187 8F63           C3                           ret
36188                       00008F64            vesa_pm_set_display_start1:
36189                                           ; convert offset to (X, Y) coordinate
36190                                           ; (would be simpler to change Bochs 1 API...)
36191 8F64           50                           push eax
36192 8F65           51                           push ecx
36193 8F66           52                           push edx
36194 8F67           56                           push esi
36195 8F68           57                           push edi
36196 8F69           C1E2                   10    shl edx, #16
36197 8F6C           81E1             0000FFFF    and ecx, #0xffff
36198 8F72           09D1                         or ecx, edx
36199 8F74           C1E1                   02    shl ecx, #2
36200 8F77           89C8                         mov eax, ecx
36201 8F79           50                           push eax
36202 8F7A     66    BA                   01CE    mov dx, # 0x01CE
36203 8F7E     66    B8                   0006    mov ax, # 0x6
36204 8F82     66    EF                           out dx, ax
36205 8F84     66    BA                   01CF    mov dx, # 0x01CF
36206 8F88     66    ED                           in ax, dx
36207 8F8A         0FB7C8                         movzx ecx, ax
36208 8F8D     66    BA                   01CE    mov dx, # 0x01CE
36209 8F91     66    B8                   0003    mov ax, # 0x3
36210 8F95     66    EF                           out dx, ax
36211 8F97     66    BA                   01CF    mov dx, # 0x01CF
36212 8F9B     66    ED                           in ax, dx
36213 8F9D         0FB7F0                         movzx esi, ax
36214 8FA0           58                           pop eax
36215 8FA1           83FE                   04    cmp esi, #4
36216 8FA4           74           17              jz bpp4_mode
36217 8FA6           83C6                   07    add esi, #7
36218 8FA9           C1EE                   03    shr esi, #3
36219 8FAC         0FAFCE                         imul ecx, esi
36220 8FAF           31D2                         xor edx, edx
36221 8FB1           F7F1                         div ecx
36222 8FB3           89C7                         mov edi, eax
36223 8FB5           89D0                         mov eax, edx
36224 8FB7           31D2                         xor edx, edx
36225 8FB9           F7F6                         div esi
36226 8FBB           EB           0C              jmp set_xy_regs
36227                       00008FBD            bpp4_mode:
36228 8FBD           D1E9                         shr ecx, #1
36229 8FBF           31D2                         xor edx, edx
36230 8FC1           F7F1                         div ecx
36231 8FC3           89C7                         mov edi, eax
36232 8FC5           89D0                         mov eax, edx
36233 8FC7           D1E0                         shl eax, #1
36234                       00008FC9            set_xy_regs:
36235 8FC9     66    52                           push dx
36236 8FCB     66    50                           push ax
36237 8FCD     66    BA                   01CE    mov dx, # 0x01CE
36238 8FD1     66    B8                   0008    mov ax, # 0x8
36239 8FD5     66    EF                           out dx, ax
36240 8FD7     66    58                           pop ax
36241 8FD9     66    BA                   01CF    mov dx, # 0x01CF
36242 8FDD     66    EF                           out dx, ax
36243 8FDF     66    5A                           pop dx
36244 8FE1     66    89F8                         mov ax, di
36245 8FE4     66    52                           push dx
36246 8FE6     66    50                           push ax
36247 8FE8     66    BA                   01CE    mov dx, # 0x01CE
36248 8FEC     66    B8                   0009    mov ax, # 0x9
36249 8FF0     66    EF                           out dx, ax
36250 8FF2     66    58                           pop ax
36251 8FF4     66    BA                   01CF    mov dx, # 0x01CF
36252 8FF8     66    EF                           out dx, ax
36253 8FFA     66    5A                           pop dx
36254 8FFC           5F                           pop edi
36255 8FFD           5E                           pop esi
36256 8FFE           5A                           pop edx
36257 8FFF           59                           pop ecx
36258 9000           58                           pop eax
36259 9001     66    B8                   004F    mov ax, #0x004f
36260 9005           C3                           ret
36261                       00009006            vesa_pm_unimplemented:
36262 9006     66    B8                   014F    mov ax, #0x014f
36263 900A           C3                           ret
36264                                             USE16
36265                       0000900B            vesa_pm_end:
36266                                           ; DISPI ioport functions
36267                       0000900B            dispi_get_id:
36268 900B           52                           push dx
36269 900C           BA                   01CE    mov dx, # 0x01CE
36270 900F           B8                   0000    mov ax, # 0x0
36271 9012           EF                           out dx, ax
36272 9013           BA                   01CF    mov dx, # 0x01CF
36273 9016           ED                           in ax, dx
36274 9017           5A                           pop dx
36275 9018           C3                           ret
36276                       00009019            dispi_set_id:
36277 9019           52                           push dx
36278 901A           50                           push ax
36279 901B           BA                   01CE    mov dx, # 0x01CE
36280 901E           B8                   0000    mov ax, # 0x0
36281 9021           EF                           out dx, ax
36282 9022           58                           pop ax
36283 9023           BA                   01CF    mov dx, # 0x01CF
36284 9026           EF                           out dx, ax
36285 9027           5A                           pop dx
36286 9028           C3                           ret
36287                                           ! 7383 endasm
36288                                           !BCC_ENDASM
36289                                           ! 7384 static void dispi_set_xres(xres)
36290                                           ! 7385   Bit16u xres;
36291                                           
36292                       00009029            _dispi_set_xres:
36293                                           !BCC_EOS
36294                                           ! 7386 {
36295                                           ! 7387 #asm
36296                                           !BCC_ASM
36297                       00000002            _dispi_set_xres.xres	set	2
36298 9029           55                           push bp
36299 902A           89E5                         mov bp, sp
36300 902C           50                           push ax
36301 902D           52                           push dx
36302 902E           BA                   01CE    mov dx, # 0x01CE
36303 9031           B8                   0001    mov ax, # 0x1
36304 9034           EF                           out dx, ax
36305 9035           BA                   01CF    mov dx, # 0x01CF
36306 9038           8B46         04              mov ax, 4[bp] ; xres
36307 903B           EF                           out dx, ax
36308 903C           5A                           pop dx
36309 903D           58                           pop ax
36310 903E           5D                           pop bp
36311                                           ! 7401 endasm
36312                                           !BCC_ENDASM
36313                                           ! 7402 }
36314 903F           C3                         ret
36315                                           ! 7403 static void dispi_set_yres(yres)
36316                                           ! 7404   Bit16u yres;
36317                       00009040            _dispi_set_yres:
36318                                           !BCC_EOS
36319                                           ! 7405 {
36320                                           ! 7406   outw(0x01CE,0x2);
36321 9040           55                         push	bp
36322 9041           89E5                       mov	bp,sp
36323                                           ! Debug: list int = const 2 (used reg = )
36324 9043           B8                   0002  mov	ax,*2
36325 9046           50                         push	ax
36326                                           ! Debug: list int = const $1CE (used reg = )
36327 9047           B8                   01CE  mov	ax,#$1CE
36328 904A           50                         push	ax
36329                                           ! Debug: func () void = outw+0 (used reg = )
36330 904B           E8         EBBB            call	_outw
36331 904E           89EC                       mov	sp,bp
36332                                           !BCC_EOS
36333                                           ! 7407   outw(0x01CF,yres);
36334                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
36335 9050           FF76         04            push	4[bp]
36336                                           ! Debug: list int = const $1CF (used reg = )
36337 9053           B8                   01CF  mov	ax,#$1CF
36338 9056           50                         push	ax
36339                                           ! Debug: func () void = outw+0 (used reg = )
36340 9057           E8         EBAF            call	_outw
36341 905A           89EC                       mov	sp,bp
36342                                           !BCC_EOS
36343                                           ! 7408 }
36344 905C           5D                         pop	bp
36345 905D           C3                         ret
36346                                           ! 7409 static void dispi_set_bpp(bpp)
36347                                           ! 7410   Bit16u bpp;
36348                       0000905E            _dispi_set_bpp:
36349                                           !BCC_EOS
36350                                           ! 7411 {
36351                                           ! 7412   outw(0x01CE,0x3);
36352 905E           55                         push	bp
36353 905F           89E5                       mov	bp,sp
36354                                           ! Debug: list int = const 3 (used reg = )
36355 9061           B8                   0003  mov	ax,*3
36356 9064           50                         push	ax
36357                                           ! Debug: list int = const $1CE (used reg = )
36358 9065           B8                   01CE  mov	ax,#$1CE
36359 9068           50                         push	ax
36360                                           ! Debug: func () void = outw+0 (used reg = )
36361 9069           E8         EB9D            call	_outw
36362 906C           89EC                       mov	sp,bp
36363                                           !BCC_EOS
36364                                           ! 7413   outw(0x01CF,bpp);
36365                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
36366 906E           FF76         04            push	4[bp]
36367                                           ! Debug: list int = const $1CF (used reg = )
36368 9071           B8                   01CF  mov	ax,#$1CF
36369 9074           50                         push	ax
36370                                           ! Debug: func () void = outw+0 (used reg = )
36371 9075           E8         EB91            call	_outw
36372 9078           89EC                       mov	sp,bp
36373                                           !BCC_EOS
36374                                           ! 7414 }
36375 907A           5D                         pop	bp
36376 907B           C3                         ret
36377                                           ! 7415 #asm
36378                                           !BCC_ASM
36379                       00000002            _dispi_set_bpp.bpp	set	2
36380                                           ; AL = bits per pixel / AH = bytes per pixel
36381                       0000907C            dispi_get_bpp:
36382 907C           52                           push dx
36383 907D           BA                   01CE    mov dx, # 0x01CE
36384 9080           B8                   0003    mov ax, # 0x3
36385 9083           EF                           out dx, ax
36386 9084           BA                   01CF    mov dx, # 0x01CF
36387 9087           ED                           in ax, dx
36388 9088           88C4                         mov ah, al
36389 908A           C0EC                   03    shr ah, 3
36390 908D           A8                     07    test al, #0x07
36391 908F           74           02              jz get_bpp_noinc
36392 9091           FEC4                         inc ah
36393                       00009093            get_bpp_noinc:
36394 9093           5A                           pop dx
36395 9094           C3                           ret
36396                                           ; get display capabilities
36397                       00009095            _dispi_get_max_xres:
36398 9095           52                           push dx
36399 9096           53                           push bx
36400 9097           E8         004F              call dispi_get_enable
36401 909A           89C3                         mov bx, ax
36402 909C           0D                   0002    or ax, # 0x02
36403 909F           E8         0037              call _dispi_set_enable
36404 90A2           BA                   01CE    mov dx, # 0x01CE
36405 90A5           B8                   0001    mov ax, # 0x1
36406 90A8           EF                           out dx, ax
36407 90A9           BA                   01CF    mov dx, # 0x01CF
36408 90AC           ED                           in ax, dx
36409 90AD           50                           push ax
36410 90AE           89D8                         mov ax, bx
36411 90B0           E8         0026              call _dispi_set_enable
36412 90B3           58                           pop ax
36413 90B4           5B                           pop bx
36414 90B5           5A                           pop dx
36415 90B6           C3                           ret
36416                       000090B7            _dispi_get_max_bpp:
36417 90B7           52                           push dx
36418 90B8           53                           push bx
36419 90B9           E8         002D              call dispi_get_enable
36420 90BC           89C3                         mov bx, ax
36421 90BE           0D                   0002    or ax, # 0x02
36422 90C1           E8         0015              call _dispi_set_enable
36423 90C4           BA                   01CE    mov dx, # 0x01CE
36424 90C7           B8                   0003    mov ax, # 0x3
36425 90CA           EF                           out dx, ax
36426 90CB           BA                   01CF    mov dx, # 0x01CF
36427 90CE           ED                           in ax, dx
36428 90CF           50                           push ax
36429 90D0           89D8                         mov ax, bx
36430 90D2           E8         0004              call _dispi_set_enable
36431 90D5           58                           pop ax
36432 90D6           5B                           pop bx
36433 90D7           5A                           pop dx
36434 90D8           C3                           ret
36435                       000090D9            _dispi_set_enable:
36436 90D9           52                           push dx
36437 90DA           50                           push ax
36438 90DB           BA                   01CE    mov dx, # 0x01CE
36439 90DE           B8                   0004    mov ax, # 0x4
36440 90E1           EF                           out dx, ax
36441 90E2           58                           pop ax
36442 90E3           BA                   01CF    mov dx, # 0x01CF
36443 90E6           EF                           out dx, ax
36444 90E7           5A                           pop dx
36445 90E8           C3                           ret
36446                       000090E9            dispi_get_enable:
36447 90E9           52                           push dx
36448 90EA           BA                   01CE    mov dx, # 0x01CE
36449 90ED           B8                   0004    mov ax, # 0x4
36450 90F0           EF                           out dx, ax
36451 90F1           BA                   01CF    mov dx, # 0x01CF
36452 90F4           ED                           in ax, dx
36453 90F5           5A                           pop dx
36454 90F6           C3                           ret
36455                       000090F7            _dispi_set_bank:
36456 90F7           52                           push dx
36457 90F8           50                           push ax
36458 90F9           BA                   01CE    mov dx, # 0x01CE
36459 90FC           B8                   0005    mov ax, # 0x5
36460 90FF           EF                           out dx, ax
36461 9100           58                           pop ax
36462 9101           BA                   01CF    mov dx, # 0x01CF
36463 9104           EF                           out dx, ax
36464 9105           5A                           pop dx
36465 9106           C3                           ret
36466                       00009107            dispi_get_bank:
36467 9107           52                           push dx
36468 9108           BA                   01CE    mov dx, # 0x01CE
36469 910B           B8                   0005    mov ax, # 0x5
36470 910E           EF                           out dx, ax
36471 910F           BA                   01CF    mov dx, # 0x01CF
36472 9112           ED                           in ax, dx
36473 9113           5A                           pop dx
36474 9114           C3                           ret
36475                                           ! 7511 endasm
36476                                           !BCC_ENDASM
36477                                           ! 7512 static void dispi_set_bank_farcall()
36478                                           ! 7513 {
36479                       00009115            _dispi_set_bank_farcall:
36480                                           ! 7514 #asm
36481                                           !BCC_ASM
36482 9115           81FB                 0100    cmp bx,#0x0100
36483 9119           74           1E              je dispi_set_bank_farcall_get
36484 911B           09DB                         or bx,bx
36485 911D           75           28              jnz dispi_set_bank_farcall_error
36486 911F           89D0                         mov ax,dx
36487 9121           52                           push dx
36488 9122           50                           push ax
36489 9123           B8                   0005    mov ax,# 0x5
36490 9126           BA                   01CE    mov dx,# 0x01CE
36491 9129           EF                           out dx,ax
36492 912A           58                           pop ax
36493 912B           BA                   01CF    mov dx,# 0x01CF
36494 912E           EF                           out dx,ax
36495 912F           ED                           in ax,dx
36496 9130           5A                           pop dx
36497 9131           39C2                         cmp dx,ax
36498 9133           75           12              jne dispi_set_bank_farcall_error
36499 9135           B8                   004F    mov ax, #0x004f
36500 9138           CB                           retf
36501                       00009139            dispi_set_bank_farcall_get:
36502 9139           B8                   0005    mov ax,# 0x5
36503 913C           BA                   01CE    mov dx,# 0x01CE
36504 913F           EF                           out dx,ax
36505 9140           BA                   01CF    mov dx,# 0x01CF
36506 9143           ED                           in ax,dx
36507 9144           89C2                         mov dx,ax
36508 9146           CB                           retf
36509                       00009147            dispi_set_bank_farcall_error:
36510 9147           B8                   014F    mov ax,#0x014F
36511 914A           CB                           retf
36512                                           ! 7545 endasm
36513                                           !BCC_ENDASM
36514                                           ! 7546 }
36515 914B           C3                         ret
36516                                           ! 7547 #asm
36517                                           !BCC_ASM
36518                       0000914C            dispi_set_x_offset:
36519 914C           52                           push dx
36520 914D           50                           push ax
36521 914E           BA                   01CE    mov dx, # 0x01CE
36522 9151           B8                   0008    mov ax, # 0x8
36523 9154           EF                           out dx, ax
36524 9155           58                           pop ax
36525 9156           BA                   01CF    mov dx, # 0x01CF
36526 9159           EF                           out dx, ax
36527 915A           5A                           pop dx
36528 915B           C3                           ret
36529                       0000915C            dispi_get_x_offset:
36530 915C           52                           push dx
36531 915D           BA                   01CE    mov dx, # 0x01CE
36532 9160           B8                   0008    mov ax, # 0x8
36533 9163           EF                           out dx, ax
36534 9164           BA                   01CF    mov dx, # 0x01CF
36535 9167           ED                           in ax, dx
36536 9168           5A                           pop dx
36537 9169           C3                           ret
36538                       0000916A            dispi_set_y_offset:
36539 916A           52                           push dx
36540 916B           50                           push ax
36541 916C           BA                   01CE    mov dx, # 0x01CE
36542 916F           B8                   0009    mov ax, # 0x9
36543 9172           EF                           out dx, ax
36544 9173           58                           pop ax
36545 9174           BA                   01CF    mov dx, # 0x01CF
36546 9177           EF                           out dx, ax
36547 9178           5A                           pop dx
36548 9179           C3                           ret
36549                       0000917A            dispi_get_y_offset:
36550 917A           52                           push dx
36551 917B           BA                   01CE    mov dx, # 0x01CE
36552 917E           B8                   0009    mov ax, # 0x9
36553 9181           EF                           out dx, ax
36554 9182           BA                   01CF    mov dx, # 0x01CF
36555 9185           ED                           in ax, dx
36556 9186           5A                           pop dx
36557 9187           C3                           ret
36558                       00009188            vga_set_virt_width:
36559 9188           50                           push ax
36560 9189           53                           push bx
36561 918A           52                           push dx
36562 918B           89C3                         mov bx, ax
36563 918D           E8         FEEC              call dispi_get_bpp
36564 9190           3C                     04    cmp al, #0x04
36565 9192           77           02              ja set_width_svga
36566 9194           D1EB                         shr bx, #1
36567                       00009196            set_width_svga:
36568 9196           C1EB                   03    shr bx, #3
36569 9199           BA                   03D4    mov dx, # 0x3d4
36570 919C           88DC                         mov ah, bl
36571 919E           B0                     13    mov al, #0x13
36572 91A0           EF                           out dx, ax
36573 91A1           5A                           pop dx
36574 91A2           5B                           pop bx
36575 91A3           58                           pop ax
36576 91A4           C3                           ret
36577                       000091A5            dispi_set_virt_width:
36578 91A5           E8         FFE0              call vga_set_virt_width
36579 91A8           52                           push dx
36580 91A9           50                           push ax
36581 91AA           BA                   01CE    mov dx, # 0x01CE
36582 91AD           B8                   0006    mov ax, # 0x6
36583 91B0           EF                           out dx, ax
36584 91B1           58                           pop ax
36585 91B2           BA                   01CF    mov dx, # 0x01CF
36586 91B5           EF                           out dx, ax
36587 91B6           5A                           pop dx
36588 91B7           C3                           ret
36589                       000091B8            dispi_get_virt_width:
36590 91B8           52                           push dx
36591 91B9           BA                   01CE    mov dx, # 0x01CE
36592 91BC           B8                   0006    mov ax, # 0x6
36593 91BF           EF                           out dx, ax
36594 91C0           BA                   01CF    mov dx, # 0x01CF
36595 91C3           ED                           in ax, dx
36596 91C4           5A                           pop dx
36597 91C5           C3                           ret
36598                       000091C6            dispi_get_virt_height:
36599 91C6           52                           push dx
36600 91C7           BA                   01CE    mov dx, # 0x01CE
36601 91CA           B8                   0007    mov ax, # 0x7
36602 91CD           EF                           out dx, ax
36603 91CE           BA                   01CF    mov dx, # 0x01CF
36604 91D1           ED                           in ax, dx
36605 91D2           5A                           pop dx
36606 91D3           C3                           ret
36607                       000091D4            _vga_compat_setup:
36608 91D4           50                           push ax
36609 91D5           52                           push dx
36610                                             ; set CRT X resolution
36611 91D6           BA                   01CE    mov dx, # 0x01CE
36612 91D9           B8                   0001    mov ax, # 0x1
36613 91DC           EF                           out dx, ax
36614 91DD           BA                   01CF    mov dx, # 0x01CF
36615 91E0           ED                           in ax, dx
36616 91E1           50                           push ax
36617 91E2           BA                   03D4    mov dx, # 0x3d4
36618 91E5           B8                   0011    mov ax, #0x0011
36619 91E8           EF                           out dx, ax
36620 91E9           58                           pop ax
36621 91EA           50                           push ax
36622 91EB           C1E8                   03    shr ax, #3
36623 91EE           48                           dec ax
36624 91EF           88C4                         mov ah, al
36625 91F1           B0                     01    mov al, #0x01
36626 91F3           EF                           out dx, ax
36627 91F4           58                           pop ax
36628 91F5           E8         FF90              call vga_set_virt_width
36629                                             ; set CRT Y resolution
36630 91F8           BA                   01CE    mov dx, # 0x01CE
36631 91FB           B8                   0002    mov ax, # 0x2
36632 91FE           EF                           out dx, ax
36633 91FF           BA                   01CF    mov dx, # 0x01CF
36634 9202           ED                           in ax, dx
36635 9203           48                           dec ax
36636 9204           50                           push ax
36637 9205           BA                   03D4    mov dx, # 0x3d4
36638 9208           88C4                         mov ah, al
36639 920A           B0                     12    mov al, #0x12
36640 920C           EF                           out dx, ax
36641 920D           58                           pop ax
36642 920E           B0                     07    mov al, #0x07
36643 9210           EE                           out dx, al
36644 9211           42                           inc dx
36645 9212           EC                           in al, dx
36646 9213           24                     BD    and al, #0xbd
36647 9215           F6C4                   01    test ah, #0x01
36648 9218           74           02              jz bit8_clear
36649 921A           0C                     02    or al, #0x02
36650                       0000921C            bit8_clear:
36651 921C           F6C4                   02    test ah, #0x02
36652 921F           74           02              jz bit9_clear
36653 9221           0C                     40    or al, #0x40
36654                       00009223            bit9_clear:
36655 9223           EE                           out dx, al
36656                                             ; other settings
36657 9224           BA                   03D4    mov dx, # 0x3d4
36658 9227           B8                   0009    mov ax, #0x0009
36659 922A           EF                           out dx, ax
36660 922B           B0                     17    mov al, #0x17
36661 922D           EE                           out dx, al
36662 922E           BA                   03D5    mov dx, # 0x3d5
36663 9231           EC                           in al, dx
36664 9232           0C                     03    or al, #0x03
36665 9234           EE                           out dx, al
36666 9235           BA                   03DA    mov dx, # 0x3da
36667 9238           EC                           in al, dx
36668 9239           BA                   03C0    mov dx, # 0x3c0
36669 923C           B0                     10    mov al, #0x10
36670 923E           EE                           out dx, al
36671 923F           BA                   03C1    mov dx, # 0x3c1
36672 9242           EC                           in al, dx
36673 9243           0C                     01    or al, #0x01
36674 9245           BA                   03C0    mov dx, # 0x3c0
36675 9248           EE                           out dx, al
36676 9249           B0                     20    mov al, #0x20
36677 924B           EE                           out dx, al
36678 924C           BA                   03CE    mov dx, # 0x3ce
36679 924F           B8                   0506    mov ax, #0x0506
36680 9252           EF                           out dx, ax
36681 9253           BA                   03C4    mov dx, # 0x3c4
36682 9256           B8                   0F02    mov ax, #0x0f02
36683 9259           EF                           out dx, ax
36684                                             ; settings for >= 8bpp
36685 925A           BA                   01CE    mov dx, # 0x01CE
36686 925D           B8                   0003    mov ax, # 0x3
36687 9260           EF                           out dx, ax
36688 9261           BA                   01CF    mov dx, # 0x01CF
36689 9264           ED                           in ax, dx
36690 9265           3C                     08    cmp al, #0x08
36691 9267           72           40              jb vga_compat_end
36692 9269           BA                   03D4    mov dx, # 0x3d4
36693 926C           B0                     14    mov al, #0x14
36694 926E           EE                           out dx, al
36695 926F           BA                   03D5    mov dx, # 0x3d5
36696 9272           EC                           in al, dx
36697 9273           0C                     40    or al, #0x40
36698 9275           EE                           out dx, al
36699 9276           BA                   03DA    mov dx, # 0x3da
36700 9279           EC                           in al, dx
36701 927A           BA                   03C0    mov dx, # 0x3c0
36702 927D           B0                     10    mov al, #0x10
36703 927F           EE                           out dx, al
36704 9280           BA                   03C1    mov dx, # 0x3c1
36705 9283           EC                           in al, dx
36706 9284           0C                     40    or al, #0x40
36707 9286           BA                   03C0    mov dx, # 0x3c0
36708 9289           EE                           out dx, al
36709 928A           B0                     20    mov al, #0x20
36710 928C           EE                           out dx, al
36711 928D           BA                   03C4    mov dx, # 0x3c4
36712 9290           B0                     04    mov al, #0x04
36713 9292           EE                           out dx, al
36714 9293           BA                   03C5    mov dx, # 0x3c5
36715 9296           EC                           in al, dx
36716 9297           0C                     08    or al, #0x08
36717 9299           EE                           out dx, al
36718 929A           BA                   03CE    mov dx, # 0x3ce
36719 929D           B0                     05    mov al, #0x05
36720 929F           EE                           out dx, al
36721 92A0           BA                   03CF    mov dx, # 0x3cf
36722 92A3           EC                           in al, dx
36723 92A4           24                     9F    and al, #0x9f
36724 92A6           0C                     40    or al, #0x40
36725 92A8           EE                           out dx, al
36726                       000092A9            vga_compat_end:
36727 92A9           5A                           pop dx
36728 92AA           58                           pop ax
36729                                           ! 7759 endasm
36730                                           !BCC_ENDASM
36731                                           ! 7760 stati
36732                                           ! 7760 c ModeInfoListItem* mode_info_find_mode(mode, using_lfb)
36733                                           ! 7761   Bit16u mode; Boolean using_lfb;
36734                       000092AB            _mode_info_find_mode:
36735                                           !BCC_EOS
36736                                           !BCC_EOS
36737                                           ! 7762 {
36738                                           ! 7763   ModeInfoListItem *cur_info=&mode_info_list;
36739 92AB           55                         push	bp
36740 92AC           89E5                       mov	bp,sp
36741 92AE           4C                         dec	sp
36742 92AF           4C                         dec	sp
36743                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36744 92B0           BB                   7D5B  mov	bx,#_mode_info_list
36745 92B3           895E         FE            mov	-2[bp],bx
36746                                           !BCC_EOS
36747                                           ! 7764   while (cur_info->mode != 0xFFFF)
36748                                           ! 7765   {
36749 92B6           EB           43            jmp .2B9
36750                       000092B8            .2BA:
36751                                           ! 7766     if (cur_info->mode == mode)
36752 92B8           8B5E         FE            mov	bx,-2[bp]
36753                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
36754 92BB           8B1F                       mov	bx,[bx]
36755 92BD           3B5E         04            cmp	bx,4[bp]
36756 92C0           75           30            jne 	.2BB
36757                       000092C2            .2BC:
36758                                           ! 7767     {
36759                                           ! 7768       if (!using_lfb)
36760 92C2           8B46         06            mov	ax,6[bp]
36761 92C5           85C0                       test	ax,ax
36762 92C7           75           09            jne 	.2BD
36763                       000092C9            .2BE:
36764                                           ! 7769       {
36765                                           ! 7770         return cur_info;
36766 92C9           8B46         FE            mov	ax,-2[bp]
36767 92CC           89EC                       mov	sp,bp
36768 92CE           5D                         pop	bp
36769 92CF           C3                         ret
36770                                           !BCC_EOS
36771                                           ! 7771       }
36772                                           ! 7772       else if (cur_info->info.ModeAttributes & 0x0080)
36773 92D0           EB           1E            jmp .2BF
36774                       000092D2            .2BD:
36775 92D2           8B5E         FE            mov	bx,-2[bp]
36776                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
36777 92D5           8A47         02            mov	al,2[bx]
36778 92D8           24                     80  and	al,#$80
36779 92DA           84C0                       test	al,al
36780 92DC           74           09            je  	.2C0
36781                       000092DE            .2C1:
36782                                           ! 7773       {
36783                                           ! 7774         return cur_info;
36784 92DE           8B46         FE            mov	ax,-2[bp]
36785 92E1           89EC                       mov	sp,bp
36786 92E3           5D                         pop	bp
36787 92E4           C3                         ret
36788                                           !BCC_EOS
36789                                           ! 7775       }
36790                                           ! 7776       else
36791                                           ! 7777       {
36792 92E5           EB           09            jmp .2C2
36793                       000092E7            .2C0:
36794                                           ! 7778         cur_info++;
36795                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36796 92E7           8B5E         FE            mov	bx,-2[bp]
36797 92EA           83C3                   44  add	bx,*$44
36798 92ED           895E         FE            mov	-2[bp],bx
36799                                           !BCC_EOS
36800                                           ! 7779       }
36801                                           ! 7780     }
36802                       000092F0            .2C2:
36803                       000092F0            .2BF:
36804                                           ! 7781     else
36805                                           ! 7782     {
36806 92F0           EB           09            jmp .2C3
36807                       000092F2            .2BB:
36808                                           ! 7783       cur_info++;
36809                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36810 92F2           8B5E         FE            mov	bx,-2[bp]
36811 92F5           83C3                   44  add	bx,*$44
36812 92F8           895E         FE            mov	-2[bp],bx
36813                                           !BCC_EOS
36814                                           ! 7784     }
36815                                           ! 7785   }
36816                       000092FB            .2C3:
36817                                           ! 7786   return 0;
36818                       000092FB            .2B9:
36819 92FB           8B5E         FE            mov	bx,-2[bp]
36820                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
36821 92FE           8B1F                       mov	bx,[bx]
36822 9300           81FB                 FFFF  cmp	bx,#$FFFF
36823 9304           75           B2            jne	.2BA
36824                       00009306            .2C4:
36825                       00009306            .2B8:
36826 9306           31C0                       xor	ax,ax
36827 9308           89EC                       mov	sp,bp
36828 930A           5D                         pop	bp
36829 930B           C3                         ret
36830                                           !BCC_EOS
36831                                           ! 7787 }
36832                                           ! 7788 #asm
36833                                           !BCC_ASM
36834                       00000004            _mode_info_find_mode.using_lfb	set	4
36835                       00000002            _mode_info_find_mode.mode	set	2
36836                                           ; Has 1 display - Returns true if 1 display detected
36837                       0000930C            _vbe_has_vbe_display:
36838 930C           1E                           push ds
36839 930D           53                           push bx
36840 930E           B8                   0040    mov ax, # 0x40
36841 9311           8ED8                         mov ds, ax
36842 9313           BB                   00B9    mov bx, # 0xB9
36843 9316           8A07                         mov al, [bx]
36844 9318           24                     01    and al, #0x01
36845 931A           30E4                         xor ah, ah
36846 931C           5B                           pop bx
36847 931D           1F                           pop ds
36848 931E           C3                           ret
36849                                           ; 1 Init - Initialise the Vesa Bios Extension Code
36850                                           ; This function does a sanity check on the host side display code interface.
36851                       0000931F            vbe_init:
36852 931F           B8                   B0C0    mov ax, # 0xB0C0
36853 9322           E8         FCF4              call dispi_set_id
36854 9325           E8         FCE3              call dispi_get_id
36855 9328           3D                   B0C0    cmp ax, # 0xB0C0
36856 932B           75           16              jne no_vbe_interface
36857 932D           1E                           push ds
36858 932E           53                           push bx
36859 932F           B8                   0040    mov ax, # 0x40
36860 9332           8ED8                         mov ds, ax
36861 9334           BB                   00B9    mov bx, # 0xB9
36862 9337           B0                     01    mov al, #0x01
36863 9339           8807                         mov [bx], al
36864 933B           5B                           pop bx
36865 933C           1F                           pop ds
36866 933D           B8                   B0C4    mov ax, # 0xB0C4
36867 9340           E8         FCD6              call dispi_set_id
36868                       00009343            no_vbe_interface:
36869 9343           BB                   8EC9    mov bx, #msg_vbe_init
36870 9346           53                           push bx
36871 9347           E8         E8D2              call _printf
36872 934A           44                           inc sp
36873 934B           44                           inc sp
36874 934C           C3                           ret
36875                                           ; 1 Display Info - Display information on screen about the 1
36876                       0000934D            vbe_display_info:
36877 934D           E8         FFBC              call _vbe_has_vbe_display
36878 9350           85C0                         test ax, ax
36879 9352           74           0B              jz no_vbe_flag
36880 9354           B8                   C000    mov ax, #0xc000
36881 9357           8ED8                         mov ds, ax
36882 9359           BE                   8E7F    mov si, #_vbebios_info_string
36883 935C           E9         A2D6              jmp _display_string
36884                       0000935F            no_vbe_flag:
36885 935F           B8                   C000    mov ax, #0xc000
36886 9362           8ED8                         mov ds, ax
36887 9364           BE                   8EA5    mov si, #_no_vbebios_info_string
36888 9367           E9         A2CB              jmp _display_string
36889                                           ! 7842 endasm
36890                                           !BCC_ENDASM
36891                                           ! 7843 void vbe_biosfn_return_controller_information(AX, ES, DI)
36892                                           ! Register BX used in function mode_info_find_mode
36893                                           ! 7844 Bit16u *AX;Bit16u ES;Bit16u DI;
36894                                           export	_vbe_biosfn_return_controller_information
36895                       0000936A            _vbe_biosfn_return_controller_information:
36896                                           !BCC_EOS
36897                                           !BCC_EOS
36898                                           !BCC_EOS
36899                                           ! 7845 {
36900                                           ! 7846         Bit16u ss=get_SS();
36901 936A           55                         push	bp
36902 936B           89E5                       mov	bp,sp
36903 936D           4C                         dec	sp
36904 936E           4C                         dec	sp
36905                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
36906 936F           E8         E8A7            call	_get_SS
36907                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
36908 9372           8946         FE            mov	-2[bp],ax
36909                                           !BCC_EOS
36910                                           ! 7847         VbeInfoBlock vbe_info_block;
36911                                           !BCC_EOS
36912                                           ! 7848         Bit16u status;
36913                                           !BCC_EOS
36914                                           ! 7849         Bit16u result;
36915                                           !BCC_EOS
36916                                           ! 7850         Bit16u vbe2_info;
36917                                           !BCC_EOS
36918                                           ! 7851         Bit16u cur_mode=0;
36919 9375           81C4                 FDF8  add	sp,#-$208
36920                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
36921 9379           31C0                       xor	ax,ax
36922 937B           8986       FDF6            mov	-$20A[bp],ax
36923                                           !BCC_EOS
36924                                           ! 7852         Bit16u cur_ptr=34;
36925 937F           4C                         dec	sp
36926 9380           4C                         dec	sp
36927                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
36928 9381           B8                   0022  mov	ax,*$22
36929 9384           8986       FDF4            mov	-$20C[bp],ax
36930                                           !BCC_EOS
36931                                           ! 7853         ModeInfoListItem *cur_info=&mode_info_list;
36932 9388           4C                         dec	sp
36933 9389           4C                         dec	sp
36934                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$210-$210] (used reg = )
36935 938A           BB                   7D5B  mov	bx,#_mode_info_list
36936 938D           899E       FDF2            mov	-$20E[bp],bx
36937                                           !BCC_EOS
36938                                           ! 7854         status = read_word(ss, AX);
36939                                           ! Debug: list * unsigned short AX = [S+$210+2] (used reg = )
36940 9391           FF76         04            push	4[bp]
36941                                           ! Debug: list unsigned short ss = [S+$212-4] (used reg = )
36942 9394           FF76         FE            push	-2[bp]
36943                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
36944 9397           E8         E806            call	_read_word
36945 939A           83C4                   04  add	sp,*4
36946                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$210-$206] (used reg = )
36947 939D           8986       FDFC            mov	-$204[bp],ax
36948                                           !BCC_EOS
36949                                           ! 7855         vbe2_info = 0;
36950                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$210-$20A] (used reg = )
36951 93A1           31C0                       xor	ax,ax
36952 93A3           8986       FDF8            mov	-$208[bp],ax
36953                                           !BCC_EOS
36954                                           ! 7856         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
36955                                           ! Debug: list int = const $200 (used reg = )
36956 93A7           B8                   0200  mov	ax,#$200
36957 93AA           50                         push	ax
36958                                           ! Debug: list unsigned short DI = [S+$212+6] (used reg = )
36959 93AB           FF76         08            push	8[bp]
36960                                           ! Debug: list unsigned short ES = [S+$214+4] (used reg = )
36961 93AE           FF76         06            push	6[bp]
36962                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$216-$204 (used reg = )
36963 93B1           8D9E       FDFE            lea	bx,-$202[bp]
36964 93B5           53                         push	bx
36965                                           ! Debug: list unsigned short ss = [S+$218-4] (used reg = )
36966 93B6           FF76         FE            push	-2[bp]
36967                                           ! Debug: func () void = memcpyb+0 (used reg = )
36968 93B9           E8         E771            call	_memcpyb
36969 93BC           83C4                   0A  add	sp,*$A
36970                                           !BCC_EOS
36971                                           ! 7857         if (((vbe_info_block.VbeSignature[0] == 'V') &&
36972                                           ! 7858            
36973                                           ! 7858   (vbe_info_block.VbeSignature[1] == 'B') &&
36974                                           ! 7859              (vbe_info_block.VbeSignature[2] == 'E') &&
36975                                           ! 7860              (vbe_info_block.VbeSignature[3] == '2')) ||
36976                                           ! 7861             ((vbe_info_block.VbeSignature[0] == 'V') &&
36977                                           ! 7862              (vbe_info_block.VbeSignature[1] == 'E') &&
36978                                           ! 7863              (vbe_info_block.VbeSignature[2] == 'S') &&
36979                                           ! 7864              (vbe_info_block.VbeSignature[3] == 'A')) )
36980                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
36981 93BF           8A86       FDFE            mov	al,-$202[bp]
36982 93C3           3C                     56  cmp	al,*$56
36983 93C5           75           18            jne 	.2C7
36984                       000093C7            .2CA:
36985                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
36986 93C7           8A86       FDFF            mov	al,-$201[bp]
36987 93CB           3C                     42  cmp	al,*$42
36988 93CD           75           10            jne 	.2C7
36989                       000093CF            .2C9:
36990                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
36991 93CF           8A86       FE00            mov	al,-$200[bp]
36992 93D3           3C                     45  cmp	al,*$45
36993 93D5           75           08            jne 	.2C7
36994                       000093D7            .2C8:
36995                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
36996 93D7           8A86       FE01            mov	al,-$1FF[bp]
36997 93DB           3C                     32  cmp	al,*$32
36998 93DD           74           20            je  	.2C6
36999                       000093DF            .2C7:
37000                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
37001 93DF           8A86       FDFE            mov	al,-$202[bp]
37002 93E3           3C                     56  cmp	al,*$56
37003 93E5           75           1F            jne 	.2C5
37004                       000093E7            .2CD:
37005                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
37006 93E7           8A86       FDFF            mov	al,-$201[bp]
37007 93EB           3C                     45  cmp	al,*$45
37008 93ED           75           17            jne 	.2C5
37009                       000093EF            .2CC:
37010                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
37011 93EF           8A86       FE00            mov	al,-$200[bp]
37012 93F3           3C                     53  cmp	al,*$53
37013 93F5           75           0F            jne 	.2C5
37014                       000093F7            .2CB:
37015                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
37016 93F7           8A86       FE01            mov	al,-$1FF[bp]
37017 93FB           3C                     41  cmp	al,*$41
37018 93FD           75           07            jne 	.2C5
37019                       000093FF            .2C6:
37020                                           ! 7865         {
37021                                           ! 7866                 vbe2_info = 1;
37022                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$210-$20A] (used reg = )
37023 93FF           B8                   0001  mov	ax,*1
37024 9402           8986       FDF8            mov	-$208[bp],ax
37025                                           !BCC_EOS
37026                                           ! 7867         }
37027                                           ! 7868         vbe_info_block.VbeSignature[0] = 'V';
37028                       00009406            .2C5:
37029                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
37030 9406           B0                     56  mov	al,*$56
37031 9408           8886       FDFE            mov	-$202[bp],al
37032                                           !BCC_EOS
37033                                           ! 7869         vbe_info_block.VbeSignature[1] = 'E';
37034                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
37035 940C           B0                     45  mov	al,*$45
37036 940E           8886       FDFF            mov	-$201[bp],al
37037                                           !BCC_EOS
37038                                           ! 7870         vbe_info_block.VbeSignature[2] = 'S';
37039                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
37040 9412           B0                     53  mov	al,*$53
37041 9414           8886       FE00            mov	-$200[bp],al
37042                                           !BCC_EOS
37043                                           ! 7871         vbe_info_block.VbeSignature[3] = 'A';
37044                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
37045 9418           B0                     41  mov	al,*$41
37046 941A           8886       FE01            mov	-$1FF[bp],al
37047                                           !BCC_EOS
37048                                           ! 7872         vbe_info_block.VbeVersion = 0x0200;
37049                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$210-$200] (used reg = )
37050 941E           B8                   0200  mov	ax,#$200
37051 9421           8986       FE02            mov	-$1FE[bp],ax
37052                                           !BCC_EOS
37053                                           ! 7873         vbe_info_block.OemStringPtr_Seg = 0xc000;
37054                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1FC] (used reg = )
37055 9425           B8                   C000  mov	ax,#$C000
37056 9428           8986       FE06            mov	-$1FA[bp],ax
37057                                           !BCC_EOS
37058                                           ! 7874         vbe_info_block.OemStringPtr_Off = &vbebios_copyright;
37059                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$210-$1FE] (used reg = )
37060 942C           BB                   8DD3  mov	bx,#_vbebios_copyright
37061 942F           899E       FE04            mov	-$1FC[bp],bx
37062                                           !BCC_EOS
37063                                           ! 7875         vbe_info_block.Capabilities[0] = 0x0001;
37064                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$210-$1FA] (used reg = )
37065 9433           B0                     01  mov	al,*1
37066 9435           8886       FE08            mov	-$1F8[bp],al
37067                                           !BCC_EOS
37068                                           ! 7876         vbe_info_block.Capabilities[1] = 0;
37069                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F9] (used reg = )
37070 9439           30C0                       xor	al,al
37071 943B           8886       FE09            mov	-$1F7[bp],al
37072                                           !BCC_EOS
37073                                           ! 7877         vbe_info_block.Capabilities[2] = 0;
37074                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F8] (used reg = )
37075 943F           30C0                       xor	al,al
37076 9441           8886       FE0A            mov	-$1F6[bp],al
37077                                           !BCC_EOS
37078                                           ! 7878         vbe_info_block.Capabilities[3] = 0;
37079                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F7] (used reg = )
37080 9445           30C0                       xor	al,al
37081 9447           8886       FE0B            mov	-$1F5[bp],al
37082                                           !BCC_EOS
37083                                           ! 7879         vbe_info_block.VideoModePtr_Seg= ES ;
37084                                           ! Debug: eq unsigned short ES = [S+$210+4] to unsigned short vbe_info_block = [S+$210-$1F4] (used reg = )
37085 944B           8B46         06            mov	ax,6[bp]
37086 944E           8986       FE0E            mov	-$1F2[bp],ax
37087                                           !BCC_EOS
37088                                           ! 7880         vbe_info_block.VideoModePtr_Off= DI + 34;
37089                                           ! Debug: add int = const $22 to unsigned short DI = [S+$210+6] (used reg = )
37090 9452           8B46         08            mov	ax,8[bp]
37091                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$210-$1F6] (used reg = )
37092 9455           05                   0022  add	ax,*$22
37093 9458           8986       FE0C            mov	-$1F4[bp],ax
37094                                           !BCC_EOS
37095                                           ! 7881         outw(0x01CE, 0xa);
37096                                           ! Debug: list int = const $A (used reg = )
37097 945C           B8                   000A  mov	ax,*$A
37098 945F           50                         push	ax
37099                                           ! Debug: list int = const $1CE (used reg = )
37100 9460           B8                   01CE  mov	ax,#$1CE
37101 9463           50                         push	ax
37102                                           ! Debug: func () void = outw+0 (used reg = )
37103 9464           E8         E7A2            call	_outw
37104 9467           83C4                   04  add	sp,*4
37105                                           !BCC_EOS
37106                                           ! 7882         vbe_info_block.TotalMemory = inw(0x01CF);
37107                                           ! Debug: list int = const $1CF (used reg = )
37108 946A           B8                   01CF  mov	ax,#$1CF
37109 946D           50                         push	ax
37110                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37111 946E           E8         E77D            call	_inw
37112 9471           44                         inc	sp
37113 9472           44                         inc	sp
37114                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$210-$1F2] (used reg = )
37115 9473           8986       FE10            mov	-$1F0[bp],ax
37116                                           !BCC_EOS
37117                                           ! 7883         if (vbe2_info)
37118 9477           8B86       FDF8            mov	ax,-$208[bp]
37119 947B           85C0                       test	ax,ax
37120 947D           74           4B            je  	.2CE
37121                       0000947F            .2CF:
37122                                           ! 7884  {
37123                                           ! 7885                 vbe_info_block.OemSoftwareRev = 0x0002;;
37124                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$210-$1F0] (used reg = )
37125 947F           B8                   0002  mov	ax,*2
37126 9482           8986       FE12            mov	-$1EE[bp],ax
37127                                           !BCC_EOS
37128                                           !BCC_EOS
37129                                           ! 7886                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
37130                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1EC] (used reg = )
37131 9486           B8                   C000  mov	ax,#$C000
37132 9489           8986       FE16            mov	-$1EA[bp],ax
37133                                           !BCC_EOS
37134                                           ! 7887                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
37135                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$210-$1EE] (used reg = )
37136 948D           BB                   8E19  mov	bx,#_vbebios_vendor_name
37137 9490           899E       FE14            mov	-$1EC[bp],bx
37138                                           !BCC_EOS
37139                                           ! 7888                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
37140                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1E8] (used reg = )
37141 9494           B8                   C000  mov	ax,#$C000
37142 9497           8986       FE1A            mov	-$1E6[bp],ax
37143                                           !BCC_EOS
37144                                           ! 7889                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
37145                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$210-$1EA] (used reg = )
37146 949B           BB                   8E31  mov	bx,#_vbebios_product_name
37147 949E           899E       FE18            mov	-$1E8[bp],bx
37148                                           !BCC_EOS
37149                                           ! 7890                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
37150                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1E4] (used reg = )
37151 94A2           B8                   C000  mov	ax,#$C000
37152 94A5           8986       FE1E            mov	-$1E2[bp],ax
37153                                           !BCC_EOS
37154                                           ! 7891                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
37155                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$210-$1E6] (used reg = )
37156 94A9           BB                   8E4A  mov	bx,#_vbebios_product_revision
37157 94AC           899E       FE1C            mov	-$1E4[bp],bx
37158                                           !BCC_EOS
37159                                           ! 7892                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
37160                                           ! Debug: list int = const $200 (used reg = )
37161 94B0           B8                   0200  mov	ax,#$200
37162 94B3           50                         push	ax
37163                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$212-$204 (used reg = )
37164 94B4           8D9E       FDFE            lea	bx,-$202[bp]
37165 94B8           53                         push	bx
37166                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37167 94B9           FF76         FE            push	-2[bp]
37168                                           ! Debug: list unsigned short DI = [S+$216+6] (used reg = )
37169 94BC           FF76         08            push	8[bp]
37170                                           ! Debug: list unsigned short ES = [S+$218+4] (used reg = )
37171 94BF           FF76         06            push	6[bp]
37172                                           ! Debug: func () void = memcpyb+0 (used reg = )
37173 94C2           E8         E668            call	_memcpyb
37174 94C5           83C4                   0A  add	sp,*$A
37175                                           !BCC_EOS
37176                                           ! 7893         }
37177                                           ! 7894  else
37178                                           ! 7895  {
37179 94C8           EB           18            jmp .2D0
37180                       000094CA            .2CE:
37181                                           ! 7896                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
37182                                           ! Debug: list int = const $100 (used reg = )
37183 94CA           B8                   0100  mov	ax,#$100
37184 94CD           50                         push	ax
37185                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$212-$204 (used reg = )
37186 94CE           8D9E       FDFE            lea	bx,-$202[bp]
37187 94D2           53                         push	bx
37188                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37189 94D3           FF76         FE            push	-2[bp]
37190                                           ! Debug: list unsigned short DI = [S+$216+6] (used reg = )
37191 94D6           FF76         08            push	8[bp]
37192                                           ! Debug: list unsigned short ES = [S+$218+4] (used reg = )
37193 94D9           FF76         06            push	6[bp]
37194                                           ! Debug: func () void = memcpyb+0 (used reg = )
37195 94DC           E8         E64E            call	_memcpyb
37196 94DF           83C4                   0A  add	sp,*$A
37197                                           !BCC_EOS
37198                                           ! 7897  }
37199                                           ! 7898         do
37200                       000094E2            .2D0:
37201                                           ! 7899         {
37202                       000094E2            .2D3:
37203                                           ! 7900                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
37204                                           ! 7901                     (cur_info->info.BitsPerPixel <= dispi_get_max_bpp()) &&
37205                                           ! 7902                     (cur_info->info.XResolution * cur_info->info.XResolution * cur_i
37206                                           ! 7902 nfo->info.BitsPerPixel <= vbe_info_block.TotalMemory << 19 )) {
37207                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
37208 94E2           E8         FBB0            call	_dispi_get_max_xres
37209 94E5           8B9E       FDF2            mov	bx,-$20E[bp]
37210                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
37211 94E9           3B47         14            cmp	ax,$14[bx]
37212 94EC           72           79            jb  	.2D4
37213                       000094EE            .2D7:
37214                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
37215 94EE           E8         FBC6            call	_dispi_get_max_bpp
37216 94F1           8B9E       FDF2            mov	bx,-$20E[bp]
37217                                           ! Debug: le int = ax+0 to unsigned char = [bx+$1B] (used reg = )
37218 94F5           50                         push	ax
37219 94F6           8A47         1B            mov	al,$1B[bx]
37220 94F9           30E4                       xor	ah,ah
37221 94FB           3B86       FDF0            cmp	ax,-$210[bp]
37222 94FF           8DA6       FDF2            lea	sp,-$20E[bp]
37223 9503           77           62            ja  	.2D4
37224                       00009505            .2D6:
37225                                           ! Debug: sl int = const $13 to unsigned short vbe_info_block = [S+$210-$1F2] (used reg = )
37226 9505           8B86       FE10            mov	ax,-$1F0[bp]
37227 9509           31C0                       xor	ax,ax
37228 950B           50                         push	ax
37229 950C           8B9E       FDF2            mov	bx,-$20E[bp]
37230 9510           8BB6       FDF2            mov	si,-$20E[bp]
37231 9514           8BBE       FDF2            mov	di,-$20E[bp]
37232                                           ! Debug: mul unsigned short = [si+$14] to unsigned short = [di+$14] (used reg = bx)
37233 9518           53                         push	bx
37234 9519           8B45         14            mov	ax,$14[di]
37235 951C           8B4C         14            mov	cx,$14[si]
37236 951F           F7E9                       imul	cx
37237 9521           5B                         pop	bx
37238                                           ! Debug: mul unsigned char = [bx+$1B] to unsigned int = ax+0 (used reg = )
37239 9522           89C6                       mov	si,ax
37240 9524           8A47         1B            mov	al,$1B[bx]
37241 9527           30E4                       xor	ah,ah
37242 9529           89C3                       mov	bx,ax
37243 952B           89F0                       mov	ax,si
37244 952D           89D9                       mov	cx,bx
37245 952F           F7E9                       imul	cx
37246                                           ! Debug: le unsigned int (temp) = [S+$212-$212] to unsigned int = ax+0 (used reg = )
37247 9531           3B86       FDF0            cmp	ax,-$210[bp]
37248 9535           8DA6       FDF2            lea	sp,-$20E[bp]
37249 9539           77           2C            ja  	.2D4
37250                       0000953B            .2D5:
37251                                           ! 7903                   write_word(ES, DI + cur_ptr, cur_info->mode);
37252 953B           8B9E       FDF2            mov	bx,-$20E[bp]
37253                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37254 953F           FF37                       push	[bx]
37255                                           ! Debug: add unsigned short cur_ptr = [S+$212-$20E] to unsigned short DI = [S+$212+6] (used reg = )
37256 9541           8B46         08            mov	ax,8[bp]
37257 9544           0386       FDF4            add	ax,-$20C[bp]
37258                                           ! Debug: list unsigned int = ax+0 (used reg = )
37259 9548           50                         push	ax
37260                                           ! Debug: list unsigned short ES = [S+$214+4] (used reg = )
37261 9549           FF76         06            push	6[bp]
37262                                           ! Debug: func () void = write_word+0 (used reg = )
37263 954C           E8         E67C            call	_write_word
37264 954F           83C4                   06  add	sp,*6
37265                                           !BCC_EOS
37266                                           ! 7904                   cur_mode++;
37267                                           ! Debug: postinc unsigned short cur_mode = [S+$210-$20C] (used reg = )
37268 9552           8B86       FDF6            mov	ax,-$20A[bp]
37269 9556           40                         inc	ax
37270 9557           8986       FDF6            mov	-$20A[bp],ax
37271                                           !BCC_EOS
37272                                           ! 7905                   cur_ptr+=2;
37273                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$210-$20E] (used reg = )
37274 955B           8B86       FDF4            mov	ax,-$20C[bp]
37275 955F           40                         inc	ax
37276 9560           40                         inc	ax
37277 9561           8986       FDF4            mov	-$20C[bp],ax
37278                                           !BCC_EOS
37279                                           ! 7906                 } else {
37280 9565           EB           00            jmp .2D8
37281                       00009567            .2D4:
37282                                           ! 7907                 }
37283                                           ! 7908                 cur_info++;
37284                       00009567            .2D8:
37285                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$210-$210] (used reg = )
37286 9567           8B9E       FDF2            mov	bx,-$20E[bp]
37287 956B           83C3                   44  add	bx,*$44
37288 956E           899E       FDF2            mov	-$20E[bp],bx
37289                                           !BCC_EOS
37290                                           ! 7909         } while (cur_info->mode != 0xFFFF);
37291                       00009572            .2D2:
37292 9572           8B9E       FDF2            mov	bx,-$20E[bp]
37293                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
37294 9576           8B1F                       mov	bx,[bx]
37295 9578           81FB                 FFFF  cmp	bx,#$FFFF
37296 957C         0F85         FF62            bne 	.2D3
37297                       00009580            .2D9:
37298                                           !BCC_EOS
37299                                           ! 7910         write_word(ES, DI + cur_ptr, cur_info->mode);
37300                       00009580            .2D1:
37301 9580           8B9E       FDF2            mov	bx,-$20E[bp]
37302                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37303 9584           FF37                       push	[bx]
37304                                           ! Debug: add unsigned short cur_ptr = [S+$212-$20E] to unsigned short DI = [S+$212+6] (used reg = )
37305 9586           8B46         08            mov	ax,8[bp]
37306 9589           0386       FDF4            add	ax,-$20C[bp]
37307                                           ! Debug: list unsigned int = ax+0 (used reg = )
37308 958D           50                         push	ax
37309                                           ! Debug: list unsigned short ES = [S+$214+4] (used reg = )
37310 958E           FF76         06            push	6[bp]
37311                                           ! Debug: func () void = write_word+0 (used reg = )
37312 9591           E8         E637            call	_write_word
37313 9594           83C4                   06  add	sp,*6
37314                                           !BCC_EOS
37315                                           ! 7911         result = 0x4f;
37316                                           ! Debug: eq int = const $4F to unsigned short result = [S+$210-$208] (used reg = )
37317 9597           B8                   004F  mov	ax,*$4F
37318 959A           8986       FDFA            mov	-$206[bp],ax
37319                                           !BCC_EOS
37320                                           ! 7912         write_word(ss, AX, result);
37321                                           ! Debug: list unsigned short result = [S+$210-$208] (used reg = )
37322 959E           FFB6       FDFA            push	-$206[bp]
37323                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
37324 95A2           FF76         04            push	4[bp]
37325                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37326 95A5           FF76         FE            push	-2[bp]
37327                                           ! Debug: func () void = write_word+0 (used reg = )
37328 95A8           E8         E620            call	_write_word
37329 95AB           83C4                   06  add	sp,*6
37330                                           !BCC_EOS
37331                                           ! 7913 }
37332 95AE           89EC                       mov	sp,bp
37333 95B0           5D                         pop	bp
37334 95B1           C3                         ret
37335                                           ! 7914 void vbe_biosfn_return_mode_information(AX, CX, ES, DI)
37336                                           ! Register BX used in function vbe_biosfn_return_controller_information
37337                                           ! 7915 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
37338                                           export	_vbe_biosfn_return_mode_information
37339                       000095B2            _vbe_biosfn_return_mode_information:
37340                                           !BCC_EOS
37341                                           !BCC_EOS
37342                                           !BCC_EOS
37343                                           !BCC_EOS
37344                                           ! 7916 {
37345                                           ! 7917         Bit16u result=0x0100;
37346 95B2           55                         push	bp
37347 95B3           89E5                       mov	bp,sp
37348 95B5           4C                         dec	sp
37349 95B6           4C                         dec	sp
37350                                           ! Debug: eq int = const $100 to unsigned short result = [S+4-4] (used reg = )
37351 95B7           B8                   0100  mov	ax,#$100
37352 95BA           8946         FE            mov	-2[bp],ax
37353                                           !BCC_EOS
37354                                           ! 7918         Bit16u ss=get_SS();
37355 95BD           4C                         dec	sp
37356 95BE           4C                         dec	sp
37357                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37358 95BF           E8         E657            call	_get_SS
37359                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
37360 95C2           8946         FC            mov	-4[bp],ax
37361                                           !BCC_EOS
37362                                           ! 7919         ModeInfoBlock info;
37363                                           !BCC_EOS
37364                                           ! 7920         ModeInfoListItem *cur_info;
37365                                           !BCC_EOS
37366                                           ! 7921         Boolean using_lfb;
37367                                           !BCC_EOS
37368                                           ! 7922         using_lfb=((CX & 0x4000) == 0x4000);
37369 95C5           81C4                 FEFC  add	sp,#-$104
37370                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$10A+4] (used reg = )
37371 95C9           8B46         06            mov	ax,6[bp]
37372 95CC           25                   4000  and	ax,#$4000
37373                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
37374 95CF           3D                   4000  cmp	ax,#$4000
37375 95D2           75           04            jne	.2DA
37376 95D4           B0                     01  mov	al,*1
37377 95D6           EB           02            jmp	.2DB
37378                       000095D8            .2DA:
37379 95D8           30C0                       xor	al,al
37380                       000095DA            .2DB:
37381                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$10A-$10A] (used reg = )
37382 95DA           30E4                       xor	ah,ah
37383 95DC           8986       FEF8            mov	-$108[bp],ax
37384                                           !BCC_EOS
37385                                           ! 7923         CX = (CX & 0x1ff);
37386                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$10A+4] (used reg = )
37387 95E0           8B46         06            mov	ax,6[bp]
37388 95E3           25                   01FF  and	ax,#$1FF
37389                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$10A+4] (used reg = )
37390 95E6           8946         06            mov	6[bp],ax
37391                                           !BCC_EOS
37392                                           ! 7924         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
37393                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$10A-$108 (used reg = )
37394 95E9           8D9E       FEFA            lea	bx,-$106[bp]
37395 95ED           53                         push	bx
37396                                           ! Debug: list unsigned short using_lfb = [S+$10C-$10A] (used reg = )
37397 95EE           FFB6       FEF8            push	-$108[bp]
37398                                           ! Debug: list unsigned short CX = [S+$10E+4] (used reg = )
37399 95F2           FF76         06            push	6[bp]
37400                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
37401 95F5           E8         FCB3            call	_mode_info_find_mode
37402 95F8           83C4                   06  add	sp,*6
37403                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$10A-$108] (used reg = )
37404 95FB           8986       FEFA            mov	-$106[bp],ax
37405                                           !BCC_EOS
37406                                           ! 7925         if (cur_info != 0)
37407                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$10A-$108] (used reg = )
37408 95FF           8B86       FEFA            mov	ax,-$106[bp]
37409 9603           85C0                       test	ax,ax
37410 9605         0F84         009A            beq 	.2DC
37411                       00009609            .2DD:
37412                                           ! 7926         {
37413                                           ! 7927                 memsetb(ss, &info, 0, sizeof(ModeInfoBlock));
37414                                           ! Debug: list int = const $100 (used reg = )
37415 9609           B8                   0100  mov	ax,#$100
37416 960C           50                         push	ax
37417                                           ! Debug: list int = const 0 (used reg = )
37418 960D           31C0                       xor	ax,ax
37419 960F           50                         push	ax
37420                                           ! Debug: list * struct ModeInfoBlock info = S+$10E-$106 (used reg = )
37421 9610           8D9E       FEFC            lea	bx,-$104[bp]
37422 9614           53                         push	bx
37423                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
37424 9615           FF76         FC            push	-4[bp]
37425                                           ! Debug: func () void = memsetb+0 (used reg = )
37426 9618           E8         E4C8            call	_memsetb
37427 961B           83C4                   08  add	sp,*8
37428                                           !BCC_EOS
37429                                           ! 7928                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
37430                                           ! Debug: list int = const $42 (used reg = )
37431 961E           B8                   0042  mov	ax,*$42
37432 9621           50                         push	ax
37433 9622           8B9E       FEFA            mov	bx,-$106[bp]
37434                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
37435                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
37436 9626           43                         inc	bx
37437 9627           43                         inc	bx
37438 9628           53                         push	bx
37439                                           ! Debug: list unsigned int = const $C000 (used reg = )
37440 9629           B8                   C000  mov	ax,#$C000
37441 962C           50                         push	ax
37442                                           ! Debug: list * struct ModeInfoBlock info = S+$110-$106 (used reg = )
37443 962D           8D9E       FEFC            lea	bx,-$104[bp]
37444 9631           53                         push	bx
37445                                           ! Debug: list unsigned short ss = [S+$112-6] (used reg = )
37446 9632           FF76         FC            push	-4[bp]
37447                                           ! Debug: func () void = memcpyb+0 (used reg = )
37448 9635           E8         E4F5            call	_memcpyb
37449 9638           83C4                   0A  add	sp,*$A
37450                                           !BCC_EOS
37451                                           ! 7929                 if (using_lfb) {
37452 963B           8B86       FEF8            mov	ax,-$108[bp]
37453 963F           85C0                       test	ax,ax
37454 9641           74           06            je  	.2DE
37455                       00009643            .2DF:
37456                                           ! 7930                   info.NumberOfBanks = 1;
37457                                           ! Debug: eq int = const 1 to unsigned char info = [S+$10A-$EC] (used reg = )
37458 9643           B0                     01  mov	al,*1
37459 9645           8886       FF16            mov	-$EA[bp],al
37460                                           !BCC_EOS
37461                                           ! 7931                 }
37462                                           ! 7932                 if (info.WinAAttributes & 0x01) {
37463                       00009649            .2DE:
37464                                           ! Debug: and int = const 1 to unsigned char info = [S+$10A-$104] (used reg = )
37465 9649           8A86       FEFE            mov	al,-$102[bp]
37466 964D           24                     01  and	al,*1
37467 964F           84C0                       test	al,al
37468 9651           74           14            je  	.2E0
37469                       00009653            .2E1:
37470                                           ! 7933                   info.WinFuncPtr = 0xC0000000UL;
37471                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$10A-$FA] (used reg = )
37472 9653           31C0                       xor	ax,ax
37473 9655           BB                   C000  mov	bx,#$C000
37474 9658           8986       FF08            mov	-$F8[bp],ax
37475 965C           899E       FF0A            mov	-$F6[bp],bx
37476                                           !BCC_EOS
37477                                           ! 7934                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
37478                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
37479                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$10A-$FA] (used reg = )
37480 9660           BB                   9115  mov	bx,#_dispi_set_bank_farcall
37481 9663           899E       FF08            mov	-$F8[bp],bx
37482                                           !BCC_EOS
37483                                           ! 7935                 }
37484                                           ! 7936                 outw(0x01CE,0xb);
37485                       00009667            .2E0:
37486                                           ! Debug: list int = const $B (used reg = )
37487 9667           B8                   000B  mov	ax,*$B
37488 966A           50                         push	ax
37489                                           ! Debug: list int = const $1CE (used reg = )
37490 966B           B8                   01CE  mov	ax,#$1CE
37491 966E           50                         push	ax
37492                                           ! Debug: func () void = outw+0 (used reg = )
37493 966F           E8         E597            call	_outw
37494 9672           83C4                   04  add	sp,*4
37495                                           !BCC_EOS
37496                                           ! 7937                 info.PhysBasePtr = inw(0x01CF);
37497                                           ! Debug: list int = const $1CF (used reg = )
37498 9675           B8                   01CF  mov	ax,#$1CF
37499 9678           50                         push	ax
37500                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37501 9679           E8         E572            call	_inw
37502 967C           44                         inc	sp
37503 967D           44                         inc	sp
37504                                           ! Debug: eq unsigned short = ax+0 to unsigned long info = [S+$10A-$DE] (used reg = )
37505 967E           31DB                       xor	bx,bx
37506 9680           8986       FF24            mov	-$DC[bp],ax
37507 9684           899E       FF26            mov	-$DA[bp],bx
37508                                           !BCC_EOS
37509                                           ! 7938                 info.PhysBasePtr = info.PhysBasePtr << 16;
37510                                           ! Debug: sl int = const $10 to unsigned long info = [S+$10A-$DE] (used reg = )
37511 9688           8B86       FF24            mov	ax,-$DC[bp]
37512 968C           8B9E       FF26            mov	bx,-$DA[bp]
37513 9690           93                         xchg	bx,ax
37514 9691           31C0                       xor	ax,ax
37515                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$10A-$DE] (used reg = )
37516 9693           8986       FF24            mov	-$DC[bp],ax
37517 9697           899E       FF26            mov	-$DA[bp],bx
37518                                           !BCC_EOS
37519                                           ! 7939                 result = 0x4f;
37520                                           ! Debug: eq int = const $4F to unsigned short result = [S+$10A-4] (used reg = )
37521 969B           B8                   004F  mov	ax,*$4F
37522 969E           8946         FE            mov	-2[bp],ax
37523                                           !BCC_EOS
37524                                           ! 7940         }
37525                                           ! 7941         else
37526                                           ! 7942         {
37527 96A1           EB           06            jmp .2E2
37528                       000096A3            .2DC:
37529                                           ! 7943                 result = 0x100;
37530                                           ! Debug: eq int = const $100 to unsigned short result = [S+$10A-4] (used reg = )
37531 96A3           B8                   0100  mov	ax,#$100
37532 96A6           8946         FE            mov	-2[bp],ax
37533                                           !BCC_EOS
37534                                           ! 7944         }
37535                                           ! 7945         if (result == 0x4f)
37536                       000096A9            .2E2:
37537                                           ! Debug: logeq int = const $4F to unsigned short result = [S+$10A-4] (used reg = )
37538 96A9           8B46         FE            mov	ax,-2[bp]
37539 96AC           3D                   004F  cmp	ax,*$4F
37540 96AF           75           18            jne 	.2E3
37541                       000096B1            .2E4:
37542                                           ! 7946         {
37543                                           ! 7947                 memcpyb(ES, DI, ss, &info, sizeof(info));
37544                                           ! Debug: list int = const $100 (used reg = )
37545 96B1           B8                   0100  mov	ax,#$100
37546 96B4           50                         push	ax
37547                                           ! Debug: list * struct ModeInfoBlock info = S+$10C-$106 (used reg = )
37548 96B5           8D9E       FEFC            lea	bx,-$104[bp]
37549 96B9           53                         push	bx
37550                                           ! Debug: list unsigned short ss = [S+$10E-6] (used reg = )
37551 96BA           FF76         FC            push	-4[bp]
37552                                           ! Debug: list unsigned short DI = [S+$110+8] (used reg = )
37553 96BD           FF76         0A            push	$A[bp]
37554                                           ! Debug: list unsigned short ES = [S+$112+6] (used reg = )
37555 96C0           FF76         08            push	8[bp]
37556                                           ! Debug: func () void = memcpyb+0 (used reg = )
37557 96C3           E8         E467            call	_memcpyb
37558 96C6           83C4                   0A  add	sp,*$A
37559                                           !BCC_EOS
37560                                           ! 7948         }
37561                                           ! 7949         write_word(ss, AX, result);
37562                       000096C9            .2E3:
37563                                           ! Debug: list unsigned short result = [S+$10A-4] (used reg = )
37564 96C9           FF76         FE            push	-2[bp]
37565                                           ! Debug: list * unsigned short AX = [S+$10C+2] (used reg = )
37566 96CC           FF76         04            push	4[bp]
37567                                           ! Debug: list unsigned short ss = [S+$10E-6] (used reg = )
37568 96CF           FF76         FC            push	-4[bp]
37569                                           ! Debug: func () void = write_word+0 (used reg = )
37570 96D2           E8         E4F6            call	_write_word
37571 96D5           83C4                   06  add	sp,*6
37572                                           !BCC_EOS
37573                                           ! 7950 }
37574 96D8           89EC                       mov	sp,bp
37575 96DA           5D                         pop	bp
37576 96DB           C3                         ret
37577                                           ! 7951 void vbe_biosfn_set_mode(AX, BX, ES, DI)
37578                                           ! Register BX used in function vbe_biosfn_return_mode_information
37579                                           ! 7952 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
37580                                           export	_vbe_biosfn_set_mode
37581                       000096DC            _vbe_biosfn_set_mode:
37582                                           !BCC_EOS
37583                                           !BCC_EOS
37584                                           !BCC_EOS
37585                                           !BCC_EOS
37586                                           ! 7953 {
37587                                           ! 7954         Bit16u ss = get_SS();
37588 96DC           55                         push	bp
37589 96DD           89E5                       mov	bp,sp
37590 96DF           4C                         dec	sp
37591 96E0           4C                         dec	sp
37592                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37593 96E1           E8         E535            call	_get_SS
37594                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
37595 96E4           8946         FE            mov	-2[bp],ax
37596                                           !BCC_EOS
37597                                           ! 7955         Bit16u result;
37598                                           !BCC_EOS
37599                                           ! 7956         ModeInfoListItem *cur_info;
37600                                           !BCC_EOS
37601                                           ! 7957         Boolean using_lfb;
37602                                           !BCC_EOS
37603                                           ! 7958         Bit8u no_clear;
37604                                           !BCC_EOS
37605                                           ! 7959         Bit8u lfb_flag;
37606                                           !BCC_EOS
37607                                           ! 7960         using_lfb=((BX & 0x4000) == 0x4000);
37608 96E7           83C4                   F8  add	sp,*-8
37609                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
37610 96EA           8B46         06            mov	ax,6[bp]
37611 96ED           25                   4000  and	ax,#$4000
37612                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
37613 96F0           3D                   4000  cmp	ax,#$4000
37614 96F3           75           04            jne	.2E5
37615 96F5           B0                     01  mov	al,*1
37616 96F7           EB           02            jmp	.2E6
37617                       000096F9            .2E5:
37618 96F9           30C0                       xor	al,al
37619                       000096FB            .2E6:
37620                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
37621 96FB           30E4                       xor	ah,ah
37622 96FD           8946         F8            mov	-8[bp],ax
37623                                           !BCC_EOS
37624                                           ! 7961         lfb_flag=using_lfb?0x40:0;
37625 9700           8B46         F8            mov	ax,-8[bp]
37626 9703           85C0                       test	ax,ax
37627 9705           74           04            je  	.2E7
37628                       00009707            .2E8:
37629 9707           B0                     40  mov	al,*$40
37630 9709           EB           02            jmp .2E9
37631                       0000970B            .2E7:
37632 970B           30C0                       xor	al,al
37633                       0000970D            .2E9:
37634                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
37635 970D           8846         F6            mov	-$A[bp],al
37636                                           !BCC_EOS
37637                                           ! 7962         no_clear=((BX & 0x8000) ==
37638                                           ! 7962  0x8000)?0x80:0;
37639                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
37640 9710           8B46         06            mov	ax,6[bp]
37641 9713           25                   8000  and	ax,#$8000
37642                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
37643 9716           3D                   8000  cmp	ax,#$8000
37644 9719           75           04            jne 	.2EA
37645                       0000971B            .2EB:
37646 971B           B0                     80  mov	al,#$80
37647 971D           EB           02            jmp .2EC
37648                       0000971F            .2EA:
37649 971F           30C0                       xor	al,al
37650                       00009721            .2EC:
37651                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
37652 9721           8846         F7            mov	-9[bp],al
37653                                           !BCC_EOS
37654                                           ! 7963         BX = (BX & 0x1ff);
37655                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
37656 9724           8B46         06            mov	ax,6[bp]
37657 9727           25                   01FF  and	ax,#$1FF
37658                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
37659 972A           8946         06            mov	6[bp],ax
37660                                           !BCC_EOS
37661                                           ! 7964         if (BX<0x0100)
37662                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
37663 972D           8B46         06            mov	ax,6[bp]
37664 9730           3D                   0100  cmp	ax,#$100
37665 9733           73           23            jae 	.2ED
37666                       00009735            .2EE:
37667                                           ! 7965         {
37668                                           ! 7966                 Bit8u mode;
37669                                           !BCC_EOS
37670                                           ! 7967                 dispi_set_enable(0x00);
37671 9735           4C                         dec	sp
37672 9736           4C                         dec	sp
37673                                           ! Debug: list int = const 0 (used reg = )
37674 9737           31C0                       xor	ax,ax
37675 9739           50                         push	ax
37676                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37677 973A           E8         F99C            call	_dispi_set_enable
37678 973D           44                         inc	sp
37679 973E           44                         inc	sp
37680                                           !BCC_EOS
37681                                           ! 7968                 mode=(BX & 0xff);
37682                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
37683 973F           8A46         06            mov	al,6[bp]
37684                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
37685 9742           8846         F5            mov	-$B[bp],al
37686                                           !BCC_EOS
37687                                           ! 7969                 biosfn_set_video_mode(mode);
37688                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
37689 9745           8A46         F5            mov	al,-$B[bp]
37690 9748           30E4                       xor	ah,ah
37691 974A           50                         push	ax
37692                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
37693 974B           E8         A448            call	_biosfn_set_video_mode
37694 974E           44                         inc	sp
37695 974F           44                         inc	sp
37696                                           !BCC_EOS
37697                                           ! 7970                 result = 0x4f;
37698                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
37699 9750           B8                   004F  mov	ax,*$4F
37700 9753           8946         FC            mov	-4[bp],ax
37701                                           !BCC_EOS
37702                                           ! 7971         }
37703 9756           44                         inc	sp
37704 9757           44                         inc	sp
37705                                           ! 7972         cur_info = mode_info_find_mode(BX, using_lfb, &cur_info);
37706                       00009758            .2ED:
37707                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
37708 9758           8D5E         FA            lea	bx,-6[bp]
37709 975B           53                         push	bx
37710                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
37711 975C           FF76         F8            push	-8[bp]
37712                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
37713 975F           FF76         06            push	6[bp]
37714                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
37715 9762           E8         FB46            call	_mode_info_find_mode
37716 9765           83C4                   06  add	sp,*6
37717                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
37718 9768           8946         FA            mov	-6[bp],ax
37719                                           !BCC_EOS
37720                                           ! 7973         if (cur_info != 0)
37721                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
37722 976B           8B46         FA            mov	ax,-6[bp]
37723 976E           85C0                       test	ax,ax
37724 9770         0F84         0089            beq 	.2EF
37725                       00009774            .2F0:
37726                                           ! 7974         {
37727                                           ! 7975                 dispi_set_enable(0x00);
37728                                           ! Debug: list int = const 0 (used reg = )
37729 9774           31C0                       xor	ax,ax
37730 9776           50                         push	ax
37731                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37732 9777           E8         F95F            call	_dispi_set_enable
37733 977A           44                         inc	sp
37734 977B           44                         inc	sp
37735                                           !BCC_EOS
37736                                           ! 7976                 if (cur_info->info.BitsPerPixel == 4)
37737 977C           8B5E         FA            mov	bx,-6[bp]
37738                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
37739 977F           8A47         1B            mov	al,$1B[bx]
37740 9782           3C                     04  cmp	al,*4
37741 9784           75           09            jne 	.2F1
37742                       00009786            .2F2:
37743                                           ! 7977                 {
37744                                           ! 7978                   biosfn_set_video_mode(0x6a);
37745                                           ! Debug: list int = const $6A (used reg = )
37746 9786           B8                   006A  mov	ax,*$6A
37747 9789           50                         push	ax
37748                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
37749 978A           E8         A409            call	_biosfn_set_video_mode
37750 978D           44                         inc	sp
37751 978E           44                         inc	sp
37752                                           !BCC_EOS
37753                                           ! 7979                 }
37754                                           ! 7980                 dispi_set_bpp(cur_info->info.BitsPerPixel);
37755                       0000978F            .2F1:
37756 978F           8B5E         FA            mov	bx,-6[bp]
37757                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
37758 9792           8A47         1B            mov	al,$1B[bx]
37759 9795           30E4                       xor	ah,ah
37760 9797           50                         push	ax
37761                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
37762 9798           E8         F8C3            call	_dispi_set_bpp
37763 979B           44                         inc	sp
37764 979C           44                         inc	sp
37765                                           !BCC_EOS
37766                                           ! 7981                 dispi_set_xres(cur_info->info.XResolution);
37767 979D           8B5E         FA            mov	bx,-6[bp]
37768                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
37769 97A0           FF77         14            push	$14[bx]
37770                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
37771 97A3           E8         F883            call	_dispi_set_xres
37772 97A6           44                         inc	sp
37773 97A7           44                         inc	sp
37774                                           !BCC_EOS
37775                                           ! 7982                 dispi_set_yres(cur_info->info.YResolution);
37776 97A8           8B5E         FA            mov	bx,-6[bp]
37777                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
37778 97AB           FF77         16            push	$16[bx]
37779                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
37780 97AE           E8         F88F            call	_dispi_set_yres
37781 97B1           44                         inc	sp
37782 97B2           44                         inc	sp
37783                                           !BCC_EOS
37784                                           ! 7983                 dispi_set_bank(0);
37785                                           ! Debug: list int = const 0 (used reg = )
37786 97B3           31C0                       xor	ax,ax
37787 97B5           50                         push	ax
37788                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
37789 97B6           E8         F93E            call	_dispi_set_bank
37790 97B9           44                         inc	sp
37791 97BA           44                         inc	sp
37792                                           !BCC_EOS
37793                                           ! 7984                 dispi_set_enable(0x01 | no_clear | lfb_flag);
37794                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
37795                                           ! Debug: expression subtree swapping
37796 97BB           8A46         F7            mov	al,-9[bp]
37797 97BE           0C                     01  or	al,*1
37798                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
37799 97C0           0A46         F6            or	al,-$A[bp]
37800                                           ! Debug: list unsigned char = al+0 (used reg = )
37801 97C3           30E4                       xor	ah,ah
37802 97C5           50                         push	ax
37803                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37804 97C6           E8         F910            call	_dispi_set_enable
37805 97C9           44                         inc	sp
37806 97CA           44                         inc	sp
37807                                           !BCC_EOS
37808                                           ! 7985                 vga_compat_setup();
37809                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
37810 97CB           E8         FA06            call	_vga_compat_setup
37811                                           !BCC_EOS
37812                                           ! 7986                 write_word(0x40,0xBA,BX);
37813                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
37814 97CE           FF76         06            push	6[bp]
37815                                           ! Debug: list int = const $BA (used reg = )
37816 97D1           B8                   00BA  mov	ax,#$BA
37817 97D4           50                         push	ax
37818                                           ! Debug: list int = const $40 (used reg = )
37819 97D5           B8                   0040  mov	ax,*$40
37820 97D8           50                         push	ax
37821                                           ! Debug: func () void = write_word+0 (used reg = )
37822 97D9           E8         E3EF            call	_write_word
37823 97DC           83C4                   06  add	sp,*6
37824                                           !BCC_EOS
37825                                           ! 7987                 write_byte(0x40,0x87,(0x60 | no_clear));
37826                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
37827                                           ! Debug: expression subtree swapping
37828 97DF           8A46         F7            mov	al,-9[bp]
37829 97E2           0C                     60  or	al,*$60
37830                                           ! Debug: list unsigned char = al+0 (used reg = )
37831 97E4           30E4                       xor	ah,ah
37832 97E6           50                         push	ax
37833                                           ! Debug: list int = const $87 (used reg = )
37834 97E7           B8                   0087  mov	ax,#$87
37835 97EA           50                         push	ax
37836                                           ! Debug: list int = const $40 (used reg = )
37837 97EB           B8                   0040  mov	ax,*$40
37838 97EE           50                         push	ax
37839                                           ! Debug: func () void = write_byte+0 (used reg = )
37840 97EF           E8         E3C1            call	_write_byte
37841 97F2           83C4                   06  add	sp,*6
37842                                           !BCC_EOS
37843                                           ! 7988                 result = 0x4f;
37844                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
37845 97F5           B8                   004F  mov	ax,*$4F
37846 97F8           8946         FC            mov	-4[bp],ax
37847                                           !BCC_EOS
37848                                           ! 7989         }
37849                                           ! 7990         else
37850                                           ! 7991         {
37851 97FB           EB           14            jmp .2F3
37852                       000097FD            .2EF:
37853                                           ! 7992                 result = 0x100;
37854                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
37855 97FD           B8                   0100  mov	ax,#$100
37856 9800           8946         FC            mov	-4[bp],ax
37857                                           !BCC_EOS
37858                                           ! 7993                 if (BX == 3)
37859                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
37860 9803           8B46         06            mov	ax,6[bp]
37861 9806           3D                   0003  cmp	ax,*3
37862 9809           75           06            jne 	.2F4
37863                       0000980B            .2F5:
37864                                           ! 7994                         result = 0x4f;
37865                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
37866 980B           B8                   004F  mov	ax,*$4F
37867 980E           8946         FC            mov	-4[bp],ax
37868                                           !BCC_EOS
37869                                           ! 7995         }
37870                       00009811            .2F4:
37871                                           ! 7996         write_word(ss, AX, result);
37872                       00009811            .2F3:
37873                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
37874 9811           FF76         FC            push	-4[bp]
37875                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
37876 9814           FF76         04            push	4[bp]
37877                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
37878 9817           FF76         FE            push	-2[bp]
37879                                           ! Debug: func () void = write_word+0 (used reg = )
37880 981A           E8         E3AE            call	_write_word
37881 981D           83C4                   06  add	sp,*6
37882                                           !BCC_EOS
37883                                           ! 7997 }
37884 9820           89EC                       mov	sp,bp
37885 9822           5D                         pop	bp
37886 9823           C3                         ret
37887                                           ! 7998 #asm
37888                                           !BCC_ASM
37889                       00000008            _vbe_biosfn_set_mode.DI	set	8
37890                       00000006            _vbe_biosfn_set_mode.ES	set	6
37891                       00000002            _vbe_biosfn_set_mode.AX	set	2
37892                       00000004            _vbe_biosfn_set_mode.BX	set	4
37893                       00009824            vbe_biosfn_return_current_mode:
37894 9824           1E                           push ds
37895 9825           B8                   0040    mov ax, # 0x40
37896 9828           8ED8                         mov ds, ax
37897 982A           E8         F8BC              call dispi_get_enable
37898 982D           25                   0001    and ax, # 0x01
37899 9830           74           09              jz no_vbe_mode
37900 9832           BB                   00BA    mov bx, # 0xBA
37901 9835           8B07                         mov ax, [bx]
37902 9837           89C3                         mov bx, ax
37903 9839           75           09              jnz vbe_03_ok
37904                       0000983B            no_vbe_mode:
37905 983B           BB                   0049    mov bx, # 0x49
37906 983E           8A07                         mov al, [bx]
37907 9840           88C3                         mov bl, al
37908 9842           30FF                         xor bh, bh
37909                       00009844            vbe_03_ok:
37910 9844           B8                   004F    mov ax, #0x004f
37911 9847           1F                           pop ds
37912 9848           C3                           ret
37913                                           ! 8019 endasm
37914                                           !BCC_ENDASM
37915                                           ! 8020 Bit16u vbe_biosfn_read_video_state_size()
37916                                           ! Register BX used in function vbe_biosfn_set_mode
37917                                           ! 8021 {
37918                                           export	_vbe_biosfn_read_video_state_size
37919                       00009849            _vbe_biosfn_read_video_state_size:
37920                                           ! 8022     return 9 * 2;
37921 9849           55                         push	bp
37922 984A           89E5                       mov	bp,sp
37923 984C           B8                   0012  mov	ax,*$12
37924 984F           5D                         pop	bp
37925 9850           C3                         ret
37926                                           !BCC_EOS
37927                                           ! 8023 }
37928                                           ! 8024 void vbe_biosfn_save_video_state(ES, BX)
37929                                           ! 8025      Bit16u ES; Bit16u BX;
37930                                           export	_vbe_biosfn_save_video_state
37931                       00009851            _vbe_biosfn_save_video_state:
37932                                           !BCC_EOS
37933                                           !BCC_EOS
37934                                           ! 8026 {
37935                                           ! 8027     Bit16u enable, i;
37936                                           !BCC_EOS
37937                                           ! 8028     outw(0x01CE,0x4);
37938 9851           55                         push	bp
37939 9852           89E5                       mov	bp,sp
37940 9854           83C4                   FC  add	sp,*-4
37941                                           ! Debug: list int = const 4 (used reg = )
37942 9857           B8                   0004  mov	ax,*4
37943 985A           50                         push	ax
37944                                           ! Debug: list int = const $1CE (used reg = )
37945 985B           B8                   01CE  mov	ax,#$1CE
37946 985E           50                         push	ax
37947                                           ! Debug: func () void = outw+0 (used reg = )
37948 985F           E8         E3A7            call	_outw
37949 9862           83C4                   04  add	sp,*4
37950                                           !BCC_EOS
37951                                           ! 8029     enable = inw(0x01CF);
37952                                           ! Debug: list int = const $1CF (used reg = )
37953 9865           B8                   01CF  mov	ax,#$1CF
37954 9868           50                         push	ax
37955                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37956 9869           E8         E382            call	_inw
37957 986C           44                         inc	sp
37958 986D           44                         inc	sp
37959                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
37960 986E           8946         FE            mov	-2[bp],ax
37961                                           !BCC_EOS
37962                                           ! 8030     write_word(ES, BX, enable);
37963                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
37964 9871           FF76         FE            push	-2[bp]
37965                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
37966 9874           FF76         06            push	6[bp]
37967                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
37968 9877           FF76         04            push	4[bp]
37969                                           ! Debug: func () void = write_word+0 (used reg = )
37970 987A           E8         E34E            call	_write_word
37971 987D           83C4                   06  add	sp,*6
37972                                           !BCC_EOS
37973                                           ! 8031     BX += 2;
37974                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
37975 9880           8B46         06            mov	ax,6[bp]
37976 9883           40                         inc	ax
37977 9884           40                         inc	ax
37978 9885           8946         06            mov	6[bp],ax
37979                                           !BCC_EOS
37980                                           ! 8032     if (!(enable & 0x01))
37981                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
37982 9888           8A46         FE            mov	al,-2[bp]
37983 988B           24                     01  and	al,*1
37984 988D           84C0                       test	al,al
37985 988F           75           04            jne 	.2F6
37986                       00009891            .2F7:
37987                                           ! 8033         return;
37988 9891           89EC                       mov	sp,bp
37989 9893           5D                         pop	bp
37990 9894           C3                         ret
37991                                           !BCC_EOS
37992                                           ! 8034     for(i = 0x1; i <= 0x9; i++) {
37993                       00009895            .2F6:
37994                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
37995 9895           B8                   0001  mov	ax,*1
37996 9898           8946         FC            mov	-4[bp],ax
37997                                           !BCC_EOS
37998                                           !BCC_EOS
37999 989B           EB           3A            jmp .2FA
38000                       0000989D            .2FB:
38001                                           ! 8035         if (i != 0x4) {
38002                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
38003 989D           8B46         FC            mov	ax,-4[bp]
38004 98A0           3D                   0004  cmp	ax,*4
38005 98A3           74           2B            je  	.2FC
38006                       000098A5            .2FD:
38007                                           ! 8036             outw(0x01CE, i);
38008                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38009 98A5           FF76         FC            push	-4[bp]
38010                                           ! Debug: list int = const $1CE (used reg = )
38011 98A8           B8                   01CE  mov	ax,#$1CE
38012 98AB           50                         push	ax
38013                                           ! Debug: func () void = outw+0 (used reg = )
38014 98AC           E8         E35A            call	_outw
38015 98AF           83C4                   04  add	sp,*4
38016                                           !BCC_EOS
38017                                           ! 8037             write_word(ES, BX, inw(0x01CF));
38018                                           ! Debug: list int = const $1CF (used reg = )
38019 98B2           B8                   01CF  mov	ax,#$1CF
38020 98B5           50                         push	ax
38021                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38022 98B6           E8         E335            call	_inw
38023 98B9           44                         inc	sp
38024 98BA           44                         inc	sp
38025                                           ! Debug: list unsigned short = ax+0 (used reg = )
38026 98BB           50                         push	ax
38027                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38028 98BC           FF76         06            push	6[bp]
38029                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38030 98BF           FF76         04            push	4[bp]
38031                                           ! Debug: func () void = write_word+0 (used reg = )
38032 98C2           E8         E306            call	_write_word
38033 98C5           83C4                   06  add	sp,*6
38034                                           !BCC_EOS
38035                                           ! 8038             BX += 2;
38036                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38037 98C8           8B46         06            mov	ax,6[bp]
38038 98CB           40                         inc	ax
38039 98CC           40                         inc	ax
38040 98CD           8946         06            mov	6[bp],ax
38041                                           !BCC_EOS
38042                                           ! 8039         }
38043                                           ! 8040     }
38044                       000098D0            .2FC:
38045                                           ! 8041 }
38046                       000098D0            .2F9:
38047                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38048 98D0           8B46         FC            mov	ax,-4[bp]
38049 98D3           40                         inc	ax
38050 98D4           8946         FC            mov	-4[bp],ax
38051                       000098D7            .2FA:
38052                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38053 98D7           8B46         FC            mov	ax,-4[bp]
38054 98DA           3D                   0009  cmp	ax,*9
38055 98DD           76           BE            jbe	.2FB
38056                       000098DF            .2FE:
38057                       000098DF            .2F8:
38058 98DF           89EC                       mov	sp,bp
38059 98E1           5D                         pop	bp
38060 98E2           C3                         ret
38061                                           ! 8042 void vbe_biosfn_restore_video_state(ES, BX)
38062                                           ! 8043      Bit16u ES; Bit16u BX;
38063                                           export	_vbe_biosfn_restore_video_state
38064                       000098E3            _vbe_biosfn_restore_video_state:
38065                                           !BCC_EOS
38066                                           !BCC_EOS
38067                                           ! 8044 {
38068                                           ! 8045     Bit16u enable, i;
38069                                           !BCC_EOS
38070                                           ! 8046    
38071                                           ! 8046  enable = read_word(ES, BX);
38072 98E3           55                         push	bp
38073 98E4           89E5                       mov	bp,sp
38074 98E6           83C4                   FC  add	sp,*-4
38075                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38076 98E9           FF76         06            push	6[bp]
38077                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38078 98EC           FF76         04            push	4[bp]
38079                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38080 98EF           E8         E2AE            call	_read_word
38081 98F2           83C4                   04  add	sp,*4
38082                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38083 98F5           8946         FE            mov	-2[bp],ax
38084                                           !BCC_EOS
38085                                           ! 8047     BX += 2;
38086                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38087 98F8           8B46         06            mov	ax,6[bp]
38088 98FB           40                         inc	ax
38089 98FC           40                         inc	ax
38090 98FD           8946         06            mov	6[bp],ax
38091                                           !BCC_EOS
38092                                           ! 8048     if (!(enable & 0x01)) {
38093                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38094 9900           8A46         FE            mov	al,-2[bp]
38095 9903           24                     01  and	al,*1
38096 9905           84C0                       test	al,al
38097 9907           75           1E            jne 	.2FF
38098                       00009909            .300:
38099                                           ! 8049         outw(0x01CE,0x4);
38100                                           ! Debug: list int = const 4 (used reg = )
38101 9909           B8                   0004  mov	ax,*4
38102 990C           50                         push	ax
38103                                           ! Debug: list int = const $1CE (used reg = )
38104 990D           B8                   01CE  mov	ax,#$1CE
38105 9910           50                         push	ax
38106                                           ! Debug: func () void = outw+0 (used reg = )
38107 9911           E8         E2F5            call	_outw
38108 9914           83C4                   04  add	sp,*4
38109                                           !BCC_EOS
38110                                           ! 8050         outw(0x01CF, enable);
38111                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38112 9917           FF76         FE            push	-2[bp]
38113                                           ! Debug: list int = const $1CF (used reg = )
38114 991A           B8                   01CF  mov	ax,#$1CF
38115 991D           50                         push	ax
38116                                           ! Debug: func () void = outw+0 (used reg = )
38117 991E           E8         E2E8            call	_outw
38118 9921           83C4                   04  add	sp,*4
38119                                           !BCC_EOS
38120                                           ! 8051     } else {
38121 9924           E9         00E5            br 	.301
38122                       00009927            .2FF:
38123                                           ! 8052         outw(0x01CE, 0x1);
38124                                           ! Debug: list int = const 1 (used reg = )
38125 9927           B8                   0001  mov	ax,*1
38126 992A           50                         push	ax
38127                                           ! Debug: list int = const $1CE (used reg = )
38128 992B           B8                   01CE  mov	ax,#$1CE
38129 992E           50                         push	ax
38130                                           ! Debug: func () void = outw+0 (used reg = )
38131 992F           E8         E2D7            call	_outw
38132 9932           83C4                   04  add	sp,*4
38133                                           !BCC_EOS
38134                                           ! 8053         outw(0x01CF, read_word(ES, BX));
38135                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38136 9935           FF76         06            push	6[bp]
38137                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38138 9938           FF76         04            push	4[bp]
38139                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38140 993B           E8         E262            call	_read_word
38141 993E           83C4                   04  add	sp,*4
38142                                           ! Debug: list unsigned short = ax+0 (used reg = )
38143 9941           50                         push	ax
38144                                           ! Debug: list int = const $1CF (used reg = )
38145 9942           B8                   01CF  mov	ax,#$1CF
38146 9945           50                         push	ax
38147                                           ! Debug: func () void = outw+0 (used reg = )
38148 9946           E8         E2C0            call	_outw
38149 9949           83C4                   04  add	sp,*4
38150                                           !BCC_EOS
38151                                           ! 8054         BX += 2;
38152                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38153 994C           8B46         06            mov	ax,6[bp]
38154 994F           40                         inc	ax
38155 9950           40                         inc	ax
38156 9951           8946         06            mov	6[bp],ax
38157                                           !BCC_EOS
38158                                           ! 8055         outw(0x01CE, 0x2);
38159                                           ! Debug: list int = const 2 (used reg = )
38160 9954           B8                   0002  mov	ax,*2
38161 9957           50                         push	ax
38162                                           ! Debug: list int = const $1CE (used reg = )
38163 9958           B8                   01CE  mov	ax,#$1CE
38164 995B           50                         push	ax
38165                                           ! Debug: func () void = outw+0 (used reg = )
38166 995C           E8         E2AA            call	_outw
38167 995F           83C4                   04  add	sp,*4
38168                                           !BCC_EOS
38169                                           ! 8056         outw(0x01CF, read_word(ES, BX));
38170                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38171 9962           FF76         06            push	6[bp]
38172                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38173 9965           FF76         04            push	4[bp]
38174                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38175 9968           E8         E235            call	_read_word
38176 996B           83C4                   04  add	sp,*4
38177                                           ! Debug: list unsigned short = ax+0 (used reg = )
38178 996E           50                         push	ax
38179                                           ! Debug: list int = const $1CF (used reg = )
38180 996F           B8                   01CF  mov	ax,#$1CF
38181 9972           50                         push	ax
38182                                           ! Debug: func () void = outw+0 (used reg = )
38183 9973           E8         E293            call	_outw
38184 9976           83C4                   04  add	sp,*4
38185                                           !BCC_EOS
38186                                           ! 8057         BX += 2;
38187                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38188 9979           8B46         06            mov	ax,6[bp]
38189 997C           40                         inc	ax
38190 997D           40                         inc	ax
38191 997E           8946         06            mov	6[bp],ax
38192                                           !BCC_EOS
38193                                           ! 8058         outw(0x01CE, 0x3);
38194                                           ! Debug: list int = const 3 (used reg = )
38195 9981           B8                   0003  mov	ax,*3
38196 9984           50                         push	ax
38197                                           ! Debug: list int = const $1CE (used reg = )
38198 9985           B8                   01CE  mov	ax,#$1CE
38199 9988           50                         push	ax
38200                                           ! Debug: func () void = outw+0 (used reg = )
38201 9989           E8         E27D            call	_outw
38202 998C           83C4                   04  add	sp,*4
38203                                           !BCC_EOS
38204                                           ! 8059         outw(0x01CF, read_word(ES, BX));
38205                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38206 998F           FF76         06            push	6[bp]
38207                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38208 9992           FF76         04            push	4[bp]
38209                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38210 9995           E8         E208            call	_read_word
38211 9998           83C4                   04  add	sp,*4
38212                                           ! Debug: list unsigned short = ax+0 (used reg = )
38213 999B           50                         push	ax
38214                                           ! Debug: list int = const $1CF (used reg = )
38215 999C           B8                   01CF  mov	ax,#$1CF
38216 999F           50                         push	ax
38217                                           ! Debug: func () void = outw+0 (used reg = )
38218 99A0           E8         E266            call	_outw
38219 99A3           83C4                   04  add	sp,*4
38220                                           !BCC_EOS
38221                                           ! 8060         BX += 2;
38222                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38223 99A6           8B46         06            mov	ax,6[bp]
38224 99A9           40                         inc	ax
38225 99AA           40                         inc	ax
38226 99AB           8946         06            mov	6[bp],ax
38227                                           !BCC_EOS
38228                                           ! 8061         outw(0x01CE,0x4);
38229                                           ! Debug: list int = const 4 (used reg = )
38230 99AE           B8                   0004  mov	ax,*4
38231 99B1           50                         push	ax
38232                                           ! Debug: list int = const $1CE (used reg = )
38233 99B2           B8                   01CE  mov	ax,#$1CE
38234 99B5           50                         push	ax
38235                                           ! Debug: func () void = outw+0 (used reg = )
38236 99B6           E8         E250            call	_outw
38237 99B9           83C4                   04  add	sp,*4
38238                                           !BCC_EOS
38239                                           ! 8062         outw(0x01CF, enable);
38240                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38241 99BC           FF76         FE            push	-2[bp]
38242                                           ! Debug: list int = const $1CF (used reg = )
38243 99BF           B8                   01CF  mov	ax,#$1CF
38244 99C2           50                         push	ax
38245                                           ! Debug: func () void = outw+0 (used reg = )
38246 99C3           E8         E243            call	_outw
38247 99C6           83C4                   04  add	sp,*4
38248                                           !BCC_EOS
38249                                           ! 8063         for(i = 0x5; i <= 0x9; i++) {
38250                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
38251 99C9           B8                   0005  mov	ax,*5
38252 99CC           8946         FC            mov	-4[bp],ax
38253                                           !BCC_EOS
38254                                           !BCC_EOS
38255 99CF           EB           33            jmp .304
38256                       000099D1            .305:
38257                                           ! 8064             outw(0x01CE, i);
38258                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38259 99D1           FF76         FC            push	-4[bp]
38260                                           ! Debug: list int = const $1CE (used reg = )
38261 99D4           B8                   01CE  mov	ax,#$1CE
38262 99D7           50                         push	ax
38263                                           ! Debug: func () void = outw+0 (used reg = )
38264 99D8           E8         E22E            call	_outw
38265 99DB           83C4                   04  add	sp,*4
38266                                           !BCC_EOS
38267                                           ! 8065             outw(0x01CF, read_word(ES, BX));
38268                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38269 99DE           FF76         06            push	6[bp]
38270                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38271 99E1           FF76         04            push	4[bp]
38272                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38273 99E4           E8         E1B9            call	_read_word
38274 99E7           83C4                   04  add	sp,*4
38275                                           ! Debug: list unsigned short = ax+0 (used reg = )
38276 99EA           50                         push	ax
38277                                           ! Debug: list int = const $1CF (used reg = )
38278 99EB           B8                   01CF  mov	ax,#$1CF
38279 99EE           50                         push	ax
38280                                           ! Debug: func () void = outw+0 (used reg = )
38281 99EF           E8         E217            call	_outw
38282 99F2           83C4                   04  add	sp,*4
38283                                           !BCC_EOS
38284                                           ! 8066             BX += 2;
38285                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38286 99F5           8B46         06            mov	ax,6[bp]
38287 99F8           40                         inc	ax
38288 99F9           40                         inc	ax
38289 99FA           8946         06            mov	6[bp],ax
38290                                           !BCC_EOS
38291                                           ! 8067         }
38292                                           ! 8068     }
38293                       000099FD            .303:
38294                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38295 99FD           8B46         FC            mov	ax,-4[bp]
38296 9A00           40                         inc	ax
38297 9A01           8946         FC            mov	-4[bp],ax
38298                       00009A04            .304:
38299                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38300 9A04           8B46         FC            mov	ax,-4[bp]
38301 9A07           3D                   0009  cmp	ax,*9
38302 9A0A           76           C5            jbe	.305
38303                       00009A0C            .306:
38304                       00009A0C            .302:
38305                                           ! 8069 }
38306                       00009A0C            .301:
38307 9A0C           89EC                       mov	sp,bp
38308 9A0E           5D                         pop	bp
38309 9A0F           C3                         ret
38310                                           ! 8070 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
38311                                           ! 8071 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
38312                                           export	_vbe_biosfn_save_restore_state
38313                       00009A10            _vbe_biosfn_save_restore_state:
38314                                           !BCC_EOS
38315                                           !BCC_EOS
38316                                           !BCC_EOS
38317                                           !BCC_EOS
38318                                           !BCC_EOS
38319                                           ! 8072 {
38320                                           ! 8073     Bit16u ss=get_SS();
38321 9A10           55                         push	bp
38322 9A11           89E5                       mov	bp,sp
38323 9A13           4C                         dec	sp
38324 9A14           4C                         dec	sp
38325                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38326 9A15           E8         E201            call	_get_SS
38327                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38328 9A18           8946         FE            mov	-2[bp],ax
38329                                           !BCC_EOS
38330                                           ! 8074     Bit16u result, val;
38331                                           !BCC_EOS
38332                                           ! 8075     result = 0x4f;
38333 9A1B           83C4                   FC  add	sp,*-4
38334                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
38335 9A1E           B8                   004F  mov	ax,*$4F
38336 9A21           8946         FC            mov	-4[bp],ax
38337                                           !BCC_EOS
38338                                           ! 8076     switch(( DX & 0x00ff )) {
38339                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
38340 9A24           8A46         08            mov	al,8[bp]
38341 9A27           E9         00A9            br 	.309
38342                                           ! 8077     case 0x00:
38343                                           ! 8078         val = biosfn_read_video_state_size2(CX);
38344                       00009A2A            .30A:
38345                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
38346 9A2A           FF76         06            push	6[bp]
38347                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
38348 9A2D           E8         D45E            call	_biosfn_read_video_state_size2
38349 9A30           44                         inc	sp
38350 9A31           44                         inc	sp
38351                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38352 9A32           8946         FA            mov	-6[bp],ax
38353                                           !BCC_EOS
38354                                           ! 8079         if (CX & 8)
38355                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38356 9A35           8A46         06            mov	al,6[bp]
38357 9A38           24                     08  and	al,*8
38358 9A3A           84C0                       test	al,al
38359 9A3C           74           09            je  	.30B
38360                       00009A3E            .30C:
38361                                           ! 8080             val += vbe_biosfn_read_video_state_size();
38362                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
38363 9A3E           E8         FE08            call	_vbe_biosfn_read_video_state_size
38364                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38365 9A41           0346         FA            add	ax,-6[bp]
38366 9A44           8946         FA            mov	-6[bp],ax
38367                                           !BCC_EOS
38368                                           ! 8081         write_word(ss, BX, val);
38369                       00009A47            .30B:
38370                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38371 9A47           FF76         FA            push	-6[bp]
38372                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
38373 9A4A           FF76         0C            push	$C[bp]
38374                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38375 9A4D           FF76         FE            push	-2[bp]
38376                                           ! Debug: func () void = write_word+0 (used reg = )
38377 9A50           E8         E178            call	_write_word
38378 9A53           83C4                   06  add	sp,*6
38379                                           !BCC_EOS
38380                                           ! 8082         break;
38381 9A56           E9         008C            br 	.307
38382                                           !BCC_EOS
38383                                           ! 8083     case 0x01:
38384                                           ! 8084         val = read_word(ss, BX);
38385                       00009A59            .30D:
38386                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38387 9A59           FF76         0C            push	$C[bp]
38388                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38389 9A5C           FF76         FE            push	-2[bp]
38390                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38391 9A5F           E8         E13E            call	_read_word
38392 9A62           83C4                   04  add	sp,*4
38393                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38394 9A65           8946         FA            mov	-6[bp],ax
38395                                           !BCC_EOS
38396                                           ! 8085         val = biosfn_save_video_state(CX, ES, val);
38397                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38398 9A68           FF76         FA            push	-6[bp]
38399                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38400 9A6B           FF76         0A            push	$A[bp]
38401                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38402 9A6E           FF76         06            push	6[bp]
38403                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
38404 9A71           E8         D485            call	_biosfn_save_video_state
38405 9A74           83C4                   06  add	sp,*6
38406                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38407 9A77           8946         FA            mov	-6[bp],ax
38408                                           !BCC_EOS
38409                                           ! 8086         if (CX & 8)
38410                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38411 9A7A           8A46         06            mov	al,6[bp]
38412 9A7D           24                     08  and	al,*8
38413 9A7F           84C0                       test	al,al
38414 9A81           74           0C            je  	.30E
38415                       00009A83            .30F:
38416                                           ! 8087             vbe_biosfn_save_video_state(ES, val);
38417                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38418 9A83           FF76         FA            push	-6[bp]
38419                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38420 9A86           FF76         0A            push	$A[bp]
38421                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
38422 9A89           E8         FDC5            call	_vbe_biosfn_save_video_state
38423 9A8C           83C4                   04  add	sp,*4
38424                                           !BCC_EOS
38425                                           ! 8088         break;
38426                       00009A8F            .30E:
38427 9A8F           EB           54            jmp .307
38428                                           !BCC_EOS
38429                                           ! 8089     case 0x02:
38430                                           ! 8090         val = read_word(ss, BX);
38431                       00009A91            .310:
38432                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38433 9A91           FF76         0C            push	$C[bp]
38434                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38435 9A94           FF76         FE            push	-2[bp]
38436                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38437 9A97           E8         E106            call	_read_word
38438 9A9A           83C4                   04  add	sp,*4
38439                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38440 9A9D           8946         FA            mov	-6[bp],ax
38441                                           !BCC_EOS
38442                                           ! 8091         val = biosfn_restore_video_state(CX, ES, val);
38443                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38444 9AA0           FF76         FA            push	-6[bp]
38445                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38446 9AA3           FF76         0A            push	$A[bp]
38447                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38448 9AA6           FF76         06            push	6[bp]
38449                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
38450 9AA9           E8         DA17            call	_biosfn_restore_video_state
38451 9AAC           83C4                   06  add	sp,*6
38452                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38453 9AAF           8946         FA            mov	-6[bp],ax
38454                                           !BCC_EOS
38455                                           ! 8092         if (CX & 8)
38456                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38457 9AB2           8A46         06            mov	al,6[bp]
38458 9AB5           24                     08  and	al,*8
38459 9AB7           84C0                       test	al,al
38460 9AB9           74           0C            je  	.311
38461                       00009ABB            .312:
38462                                           ! 8093             vbe_biosfn_restore_video_state(ES, val);
38463                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38464 9ABB           FF76         FA            push	-6[bp]
38465                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38466 9ABE           FF76         0A            push	$A[bp]
38467                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
38468 9AC1           E8         FE1F            call	_vbe_biosfn_restore_video_state
38469 9AC4           83C4                   04  add	sp,*4
38470                                           !BCC_EOS
38471                                           ! 8094         break;
38472                       00009AC7            .311:
38473 9AC7           EB           1C            jmp .307
38474                                           !BCC_EOS
38475                                           ! 8095     default:
38476                                           ! 8096         result = 0x100;
38477                       00009AC9            .313:
38478                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
38479 9AC9           B8                   0100  mov	ax,#$100
38480 9ACC           8946         FC            mov	-4[bp],ax
38481                                           !BCC_EOS
38482                                           ! 8097         break;
38483 9ACF           EB           14            jmp .307
38484                                           !BCC_EOS
38485                                           ! 8098     }
38486                                           ! 8099     write_word(ss, AX, result);
38487 9AD1           EB           12            jmp .307
38488                       00009AD3            .309:
38489 9AD3           2C                     00  sub	al,*0
38490 9AD5         0F84         FF51            beq 	.30A
38491 9AD9           2C                     01  sub	al,*1
38492 9ADB         0F84         FF7A            beq 	.30D
38493 9ADF           2C                     01  sub	al,*1
38494 9AE1           74           AE            je 	.310
38495 9AE3           EB           E4            jmp	.313
38496                       00009AE5            .307:
38497                       FFFFFFF8            ..FFF4	=	-8
38498                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
38499 9AE5           FF76         FC            push	-4[bp]
38500                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
38501 9AE8           FF76         04            push	4[bp]
38502                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38503 9AEB           FF76         FE            push	-2[bp]
38504                                           ! Debug: func () void = write_word+0 (used reg = )
38505 9AEE           E8         E0DA            call	_write_word
38506 9AF1           83C4                   06  add	sp,*6
38507                                           !BCC_EOS
38508                                           ! 8100 }
38509 9AF4           89EC                       mov	sp,bp
38510 9AF6           5D                         pop	bp
38511 9AF7           C3                         ret
38512                                           ! 8101 #asm
38513                                           !BCC_ASM
38514                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38515                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38516                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38517                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38518                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38519                       00009AF8            vbe_biosfn_display_window_control:
38520 9AF8           80FB                   00    cmp bl, #0x00
38521 9AFB           75           24              jne vbe_05_failed
38522 9AFD           80FF                   01    cmp bh, #0x01
38523 9B00           74           16              je get_display_window
38524 9B02           72           04              jb set_display_window
38525 9B04           B8                   0100    mov ax, #0x0100
38526 9B07           C3                           ret
38527                       00009B08            set_display_window:
38528 9B08           89D0                         mov ax, dx
38529 9B0A           E8         F5EA              call _dispi_set_bank
38530 9B0D           E8         F5F7              call dispi_get_bank
38531 9B10           39D0                         cmp ax, dx
38532 9B12           75           0D              jne vbe_05_failed
38533 9B14           B8                   004F    mov ax, #0x004f
38534 9B17           C3                           ret
38535                       00009B18            get_display_window:
38536 9B18           E8         F5EC              call dispi_get_bank
38537 9B1B           89C2                         mov dx, ax
38538 9B1D           B8                   004F    mov ax, #0x004f
38539 9B20           C3                           ret
38540                       00009B21            vbe_05_failed:
38541 9B21           B8                   014F    mov ax, #0x014f
38542 9B24           C3                           ret
38543                                           ! 8126 endasm
38544                                           !BCC_ENDASM
38545                                           ! 8127 #asm
38546                                           !BCC_ASM
38547                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38548                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38549                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38550                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38551                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38552                       00009B25            vbe_biosfn_set_get_logical_scan_line_length:
38553 9B25           89C8                         mov ax, cx
38554 9B27           80FB                   01    cmp bl, #0x01
38555 9B2A           74           24              je get_logical_scan_line_length
38556 9B2C           80FB                   02    cmp bl, #0x02
38557 9B2F           74           06              je set_logical_scan_line_bytes
38558 9B31           72           1A              jb set_logical_scan_line_pixels
38559 9B33           B8                   0100    mov ax, #0x0100
38560 9B36           C3                           ret
38561                       00009B37            set_logical_scan_line_bytes:
38562 9B37           50                           push ax
38563 9B38           E8         F541              call dispi_get_bpp
38564 9B3B           30FF                         xor bh, bh
38565 9B3D           88E3                         mov bl, ah
38566 9B3F           08DB                         or bl, bl
38567 9B41           75           05              jnz no_4bpp_1
38568 9B43           C1E0                   03    shl ax, #3
38569 9B46           B3                     01    mov bl, #1
38570                       00009B48            no_4bpp_1:
38571 9B48           31D2                         xor dx, dx
38572 9B4A           58                           pop ax
38573 9B4B           F7F3                         div bx
38574                       00009B4D            set_logical_scan_line_pixels:
38575 9B4D           E8         F655              call dispi_set_virt_width
38576                       00009B50            get_logical_scan_line_length:
38577 9B50           E8         F529              call dispi_get_bpp
38578 9B53           30FF                         xor bh, bh
38579 9B55           88E3                         mov bl, ah
38580 9B57           E8         F65E              call dispi_get_virt_width
38581 9B5A           89C1                         mov cx, ax
38582 9B5C           08DB                         or bl, bl
38583 9B5E           75           05              jnz no_4bpp_2
38584 9B60           C1E8                   03    shr ax, #3
38585 9B63           B3                     01    mov bl, #1
38586                       00009B65            no_4bpp_2:
38587 9B65           F7E3                         mul bx
38588 9B67           89C3                         mov bx, ax
38589 9B69           E8         F65A              call dispi_get_virt_height
38590 9B6C           89C2                         mov dx, ax
38591 9B6E           B8                   004F    mov ax, #0x004f
38592 9B71           C3                           ret
38593                                           ! 8169 endasm
38594                                           !BCC_ENDASM
38595                                           ! 8170 #asm
38596                                           !BCC_ASM
38597                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38598                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38599                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38600                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38601                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38602                       00009B72            vbe_biosfn_set_get_display_start:
38603 9B72           80FB                   80    cmp bl, #0x80
38604 9B75           74           0B              je set_display_start
38605 9B77           80FB                   01    cmp bl, #0x01
38606 9B7A           74           14              je get_display_start
38607 9B7C           72           04              jb set_display_start
38608 9B7E           B8                   0100    mov ax, #0x0100
38609 9B81           C3                           ret
38610                       00009B82            set_display_start:
38611 9B82           89C8                         mov ax, cx
38612 9B84           E8         F5C5              call dispi_set_x_offset
38613 9B87           89D0                         mov ax, dx
38614 9B89           E8         F5DE              call dispi_set_y_offset
38615 9B8C           B8                   004F    mov ax, #0x004f
38616 9B8F           C3                           ret
38617                       00009B90            get_display_start:
38618 9B90           E8         F5C9              call dispi_get_x_offset
38619 9B93           89C1                         mov cx, ax
38620 9B95           E8         F5E2              call dispi_get_y_offset
38621 9B98           89C2                         mov dx, ax
38622 9B9A           30FF                         xor bh, bh
38623 9B9C           B8                   004F    mov ax, #0x004f
38624 9B9F           C3                           ret
38625                                           ! 8194 endasm
38626                                           !BCC_ENDASM
38627                                           ! 8195 #asm
38628                                           !BCC_ASM
38629                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38630                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38631                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38632                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38633                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38634                       00009BA0            vbe_biosfn_set_get_dac_palette_format:
38635 9BA0           80FB                   01    cmp bl, #0x01
38636 9BA3           74           1E              je get_dac_palette_format
38637 9BA5           72           04              jb set_dac_palette_format
38638 9BA7           B8                   0100    mov ax, #0x0100
38639 9BAA           C3                           ret
38640                       00009BAB            set_dac_palette_format:
38641 9BAB           E8         F53B              call dispi_get_enable
38642 9BAE           80FF                   06    cmp bh, #0x06
38643 9BB1           74           0A              je set_normal_dac
38644 9BB3           80FF                   08    cmp bh, #0x08
38645 9BB6           75           1B              jne vbe_08_unsupported
38646 9BB8           0D                   0020    or ax, # 0x20
38647 9BBB           75           03              jnz set_dac_mode
38648                       00009BBD            set_normal_dac:
38649 9BBD           25                   FFDF    and ax, #~ 0x20
38650                       00009BC0            set_dac_mode:
38651 9BC0           E8         F516              call _dispi_set_enable
38652                       00009BC3            get_dac_palette_format:
38653 9BC3           B7                     06    mov bh, #0x06
38654 9BC5           E8         F521              call dispi_get_enable
38655 9BC8           25                   0020    and ax, # 0x20
38656 9BCB           74           02              jz vbe_08_ok
38657 9BCD           B7                     08    mov bh, #0x08
38658                       00009BCF            vbe_08_ok:
38659 9BCF           B8                   004F    mov ax, #0x004f
38660 9BD2           C3                           ret
38661                       00009BD3            vbe_08_unsupported:
38662 9BD3           B8                   014F    mov ax, #0x014f
38663 9BD6           C3                           ret
38664                                           ! 8226 endasm
38665                                           !BCC_ENDASM
38666                                           ! 8227 void vbe_biosfn_set_get_palette_data(AX)
38667                                           ! 8228 {
38668                                           export	_vbe_biosfn_set_get_palette_data
38669                       00009BD7            _vbe_biosfn_set_get_palette_data:
38670                                           ! 8229 }
38671 9BD7           C3                         ret
38672                                           ! 8230 #asm
38673                                           !BCC_ASM
38674                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38675                       00009BD8            vbe_biosfn_return_protected_mode_interface:
38676 9BD8           84DB                         test bl, bl
38677 9BDA           75           11              jnz _fail
38678 9BDC           BF                   C000    mov di, #0xc000
38679 9BDF           8EC7                         mov es, di
38680 9BE1           BF                   8F0A    mov di, # vesa_pm_start
38681 9BE4           B9                   900B    mov cx, # vesa_pm_end
38682 9BE7           29F9                         sub cx, di
38683 9BE9           B8                   004F    mov ax, #0x004f
38684 9BEC           C3                           ret
38685                       00009BED            _fail:
38686 9BED           B8                   014F    mov ax, #0x014f
38687 9BF0           C3                           ret
38688                                           ! 8244 endasm
38689                                           !BCC_ENDASM
38690                                           ! 8245 #asm
38691                                           !BCC_ASM
38692                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38693                                           ;; DATA_SEG_DEFS_HERE
38694                                           ! 8247 endasm
38695                                           !BCC_ENDASM
38696                                           ! 8248 #asm
38697                                           !BCC_ASM
38698                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38699 9BF1                        76            .ascii "vgabios ends here"
38700 9C02                        00            .byte 0x00
38701                       00009C03            vgabios_end:
38702 9C03                        CB            .byte 0xCB
38703                                           ;; BLOCK_STRINGS_BEGIN
38704                                           ! 8254 endasm
38705                                           !BCC_ENDASM
38706                                           ! 8255 
38707                                           
38708 9C04                                      .bss
38709                                           
38710                                           ! 0 errors detected

Symbols:
..FFF4                      0 FFF8 A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFE8 A   ..FFFF                      0 FFFE A   
.1                          0 3B94 A   .10                         0 3693 A   
.100                        0 4CB9 A   .101                        0 4CB2 A   
.102                        0 4CA9 A   .103                        0 4E53 A   
.104                        0 4DC5 A   .105                        0 4D3B A   
.106                        0 4DC2 A   .107                        0 4DB1 A   
.108                        0 4DB8 A   .109                        0 4D45 A   
.10A                        0 4D89 A   .10B                        0 4D63 A   
.10C                        0 4D5C A   .10D                        0 4DB1 A   
.10E                        0 4DC2 A   .10F                        0 4E53 A   
.11                         0 36C2 A   .110                        0 4E53 A   
.111                        0 4E40 A   .112                        0 4E47 A   
.113                        0 4DCF A   .114                        0 4E0C A   
.115                        0 4DE6 A   .116                        0 4DDF A   
.117                        0 4E34 A   .118                        0 4E40 A   
.119                        0 4E3E A   .11A                        0 4E53 A   
.11B                        0 4E56 A   .11C                        0 4EE9 A   
.11D                        0 4EA4 A   .11E                        0 4E92 A   
.11F                        0 4E80 A   .12                         0 36B2 A   
.120                        0 4E79 A   .121                        0 4E72 A   
.122                        0 502D A   .123                        0 4F0C A   
.124                        0 4EF0 A   .125                        0 4F9F A   
.126                        0 4F15 A   .127                        0 4F9C A   
.128                        0 4F8B A   .129                        0 4F92 A   
.12A                        0 4F1F A   .12B                        0 4F63 A   
.12C                        0 4F3D A   .12D                        0 4F36 A   
.12E                        0 4F8B A   .12F                        0 4F9C A   
.13                         0 36C7 A   .130                        0 502D A   
.131                        0 502D A   .132                        0 501A A   
.133                        0 5021 A   .134                        0 4FA9 A   
.135                        0 4FE6 A   .136                        0 4FC0 A   
.137                        0 4FB9 A   .138                        0 500E A   
.139                        0 501A A   .13A                        0 5018 A   
.13B                        0 502D A   .13C                        0 507F A   
.13D                        0 507B A   .13E                        0 513E A   
.13F                        0 50E0 A   .14                         0 36DE A   
.140                        0 513E A   .141                        0 516F A   
.143                        0 5165 A   .144                        0 514D A   
.145                        0 5155 A   .146                        0 515D A   
.147                        0 51DC A   .148                        0 51CC A   
.149                        0 51EA A   .14A                        0 52A2 A   
.14B                        0 5291 A   .14C                        0 5298 A   
.14D                        0 51F2 A   .14E                        0 5291 A   
.14F                        0 5281 A   .15                         0 36F2 A   
.150                        0 5288 A   .151                        0 520F A   
.152                        0 5271 A   .153                        0 525A A   
.154                        0 5281 A   .155                        0 5291 A   
.156                        0 52A2 A   .157                        0 54B4 A   
.158                        0 54A4 A   .159                        0 54AB A   
.15A                        0 52F8 A   .15B                        0 531C A   
.15C                        0 5313 A   .15D                        0 53DD A   
.15E                        0 532A A   .15F                        0 5345 A   
.16                         0 370B A   .160                        0 5333 A   
.161                        0 534A A   .162                        0 53C7 A   
.163                        0 53B9 A   .164                        0 53C0 A   
.165                        0 5351 A   .166                        0 53AF A   
.167                        0 5368 A   .168                        0 5391 A   
.169                        0 5371 A   .16A                        0 53AF A   
.16B                        0 53C7 A   .16C                        0 54A4 A   
.16D                        0 54A4 A   .16E                        0 549B A   
.16F                        0 53E0 A   .17                         0 3722 A   
.170                        0 53FB A   .171                        0 53E9 A   
.172                        0 5400 A   .173                        0 5481 A   
.174                        0 5473 A   .175                        0 547A A   
.176                        0 5407 A   .177                        0 5469 A   
.178                        0 541E A   .179                        0 5449 A   
.17A                        0 5427 A   .17B                        0 5469 A   
.17C                        0 5481 A   .17D                        0 54A4 A   
.17E                        0 54B4 A   .17F                        0 5588 A   
.18                         0 3730 A   .180                        0 5578 A   
.181                        0 557F A   .182                        0 54FE A   
.183                        0 5578 A   .184                        0 556A A   
.185                        0 5571 A   .186                        0 5524 A   
.187                        0 5546 A   .188                        0 5540 A   
.189                        0 5578 A   .18A                        0 5588 A   
.18B                        0 55BC A   .18C                        0 55B8 A   
.18D                        0 5687 A   .18E                        0 561D A   
.18F                        0 577A A   .19                         0 376B A   
.190                        0 577A A   .191                        0 5762 A   
.192                        0 56BC A   .193                        0 575B A   
.195                        0 5747 A   .196                        0 56D0 A   
.197                        0 56D0 A   .198                        0 56F9 A   
.199                        0 5722 A   .19A                        0 577A A   
.19B                        0 576E A   .19C                        0 57AE A   
.19D                        0 57AA A   .19E                        0 587D A   
.19F                        0 580F A   .1A                         0 37A5 A   
.1A0                        0 587A A   .1A1                        0 586E A   
.1A2                        0 5845 A   .1A3                        0 587A A   
.1A4                        0 5970 A   .1A5                        0 5970 A   
.1A6                        0 5958 A   .1A7                        0 58B2 A   
.1A8                        0 5951 A   .1AA                        0 593D A   
.1AB                        0 58C6 A   .1AC                        0 58C6 A   
.1AD                        0 58EF A   .1AE                        0 5918 A   
.1AF                        0 5970 A   .1B                         0 37BA A   
.1B0                        0 5964 A   .1B1                        0 5A1C A   
.1B2                        0 5A18 A   .1B3                        0 5A36 A   
.1B4                        0 5A32 A   .1B5                        0 5C84 A   
.1B7                        0 5C6E A   .1B8                        0 5A4B A   
.1B9                        0 5A4B A   .1BA                        0 5ACC A   
.1BB                        0 5ABE A   .1BC                        0 5AF1 A   
.1BD                        0 5B23 A   .1BE                        0 5B07 A   
.1BF                        0 5B3D A   .1C                         0 37DA A   
.1C0                        0 5B4F A   .1C1                        0 5B46 A   
.1C2                        0 5BBB A   .1C3                        0 5B75 A   
.1C4                        0 5BFB A   .1C5                        0 5C0F A   
.1C6                        0 5C04 A   .1C7                        0 5C25 A   
.1C8                        0 5C3A A   .1C9                        0 5CBE A   
.1CA                        0 5CBA A   .1CB                        0 5CD8 A   
.1CC                        0 5CD4 A   .1CD                        0 5E6C A   
.1CF                        0 5E54 A   .1D                         0 37FA A   
.1D0                        0 5CED A   .1D1                        0 5CED A   
.1D2                        0 5D81 A   .1D3                        0 5D73 A   
.1D4                        0 5D7A A   .1D5                        0 5D2F A   
.1D6                        0 5D73 A   .1D7                        0 5D5F A   
.1D8                        0 5D81 A   .1D9                        0 5D84 A   
.1DA                        0 5DB0 A   .1DB                        0 5DA7 A   
.1DC                        0 5DFB A   .1DD                        0 5DD6 A   
.1DE                        0 5E1C A   .1DF                        0 5E1E A   
.1E                         0 3817 A   .1E0                        0 5E4D A   
.1E1                        0 5EAC A   .1E2                        0 5E9B A   
.1E3                        0 5ED6 A   .1E4                        0 5ED2 A   
.1E5                        0 6135 A   .1E7                        0 6114 A   
.1E8                        0 5F27 A   .1E9                        0 5F2A A   
.1EA                        0 5F38 A   .1EB                        0 5F31 A   
.1EC                        0 5F3B A   .1ED                        0 5F43 A   
.1EE                        0 5F4D A   .1EF                        0 5F9A A   
.1F                         0 3832 A   .1F0                        0 5F8F A   
.1F1                        0 5F4D A   .1F2                        0 5F9A A   
.1F3                        0 5F9D A   .1F4                        0 6039 A   
.1F5                        0 5FB5 A   .1F6                        0 6036 A   
.1F7                        0 6013 A   .1F8                        0 610B A   
.1F9                        0 610B A   .1FB                        0 60F7 A   
.1FC                        0 6080 A   .1FD                        0 6080 A   
.1FE                        0 60A9 A   .1FF                        0 60D2 A   
.20                         0 384F A   .200                        0 614B A   
.201                        0 613F A   .202                        0 61C5 A   
.203                        0 6155 A   .204                        0 6195 A   
.205                        0 616B A   .206                        0 61BC A   
.207                        0 6572 A   .208                        0 6561 A   
.209                        0 6568 A   .20A                        0 64AA A   
.20B                        0 651D A   .20C                        0 6517 A   
.20D                        0 6572 A   .20E                        0 6653 A   
.20F                        0 6643 A   .21                         0 385E A   
.210                        0 666B A   .211                        0 67B0 A   
.212                        0 67A1 A   .213                        0 67A8 A   
.214                        0 6764 A   .215                        0 67B0 A   
.216                        0 67C5 A   .217                        0 67BA A   
.218                        0 6849 A   .219                        0 683A A   
.21A                        0 6841 A   .21B                        0 6800 A   
.21C                        0 6849 A   .21D                        0 685C A   
.21E                        0 6853 A   .21F                        0 68DA A   
.22                         0 3999 A   .220                        0 68CB A   
.221                        0 68D2 A   .222                        0 6897 A   
.223                        0 68DA A   .224                        0 68ED A   
.225                        0 68E4 A   .226                        0 6978 A   
.227                        0 6969 A   .228                        0 6970 A   
.229                        0 6935 A   .22A                        0 6978 A   
.22B                        0 698B A   .22C                        0 6982 A   
.22D                        0 6B0D A   .22F                        0 6AE8 A   
.230                        0 69A5 A   .231                        0 69DC A   
.232                        0 6A13 A   .233                        0 6A36 A   
.234                        0 6A59 A   .235                        0 6A7C A   
.236                        0 6A9E A   .237                        0 6AC0 A   
.238                        0 6AE2 A   .239                        0 6B0B A   
.23A                        0 6AFB A   .23B                        0 6C7D A   
.23C                        0 6C6B A   .23D                        0 6D07 A   
.23E                        0 6CFB A   .23F                        0 6CAC A   
.24                         0 3945 A   .240                        0 6CDF A   
.241                        0 6CCA A   .242                        0 6D07 A   
.243                        0 6D1F A   .244                        0 6D10 A   
.245                        0 6EAA A   .246                        0 6EA1 A   
.247                        0 6EBC A   .248                        0 6EB3 A   
.249                        0 6ECE A   .24A                        0 6EC5 A   
.24B                        0 7181 A   .24C                        0 6F1B A   
.24D                        0 7006 A   .24E                        0 6FF7 A   
.24F                        0 6FFE A   .25                         0 3864 A   
.250                        0 6FCB A   .251                        0 7006 A   
.252                        0 7074 A   .253                        0 7065 A   
.254                        0 706C A   .255                        0 7039 A   
.256                        0 7074 A   .257                        0 70C7 A   
.258                        0 70B8 A   .259                        0 70BF A   
.25A                        0 707B A   .25B                        0 70C7 A   
.25C                        0 7112 A   .25D                        0 7103 A   
.25E                        0 710A A   .25F                        0 70D7 A   
.26                         0 3864 A   .260                        0 7112 A   
.261                        0 73FC A   .262                        0 718C A   
.263                        0 732D A   .264                        0 731E A   
.265                        0 7325 A   .266                        0 72F6 A   
.267                        0 732D A   .268                        0 74BC A   
.269                        0 7407 A   .26A                        0 74A6 A   
.26B                        0 7497 A   .26C                        0 749E A   
.26D                        0 7478 A   .26E                        0 74A6 A   
.26F                        0 777E A   .27                         0 388D A   
.270                        0 74D4 A   .271                        0 7543 A   
.272                        0 7534 A   .273                        0 753B A   
.274                        0 7507 A   .275                        0 7543 A   
.276                        0 75C8 A   .277                        0 75B9 A   
.278                        0 75C0 A   .279                        0 7584 A   
.27A                        0 75B2 A   .27B                        0 758C A   
.27C                        0 75C8 A   .27D                        0 75EA A   
.27E                        0 75E2 A   .27F                        0 768B A   
.28                         0 388D A   .280                        0 767C A   
.281                        0 7683 A   .282                        0 7647 A   
.283                        0 768B A   .284                        0 76E4 A   
.285                        0 76D5 A   .286                        0 76DC A   
.287                        0 76A8 A   .288                        0 76E4 A   
.289                        0 79F9 A   .28A                        0 7789 A   
.28B                        0 792A A   .28C                        0 791B A   
.28D                        0 7922 A   .28E                        0 78F3 A   
.28F                        0 792A A   .29                         0 38A2 A   
.290                        0 7A9A A   .291                        0 7A04 A   
.292                        0 7A86 A   .293                        0 7A77 A   
.294                        0 7A7E A   .295                        0 7A57 A   
.296                        0 7A86 A   .297                        0 7ADC A   
.298                        0 7ACE A   .299                        0 7AD5 A   
.29A                        0 7AB2 A   .29B                        0 7ACE A   
.29C                        0 7AC6 A   .29D                        0 7ADC A   
.29E                        0 7D57 A   .29F                        0 7D41 A   
.2A                         0 38A2 A   .2A0                        0 7C3B A   
.2A1                        0 7C52 A   .2A2                        0 7C44 A   
.2A3                        0 7D3A A   .2A4                        0 7D2A A   
.2A5                        0 7C5B A   .2A6                        0 7C8A A   
.2A7                        0 7C69 A   .2A8                        0 7C62 A   
.2A9                        0 7D28 A   .2AA                        0 7D28 A   
.2AB                        0 7C93 A   .2AC                        0 7CB7 A   
.2AD                        0 7CB1 A   .2AE                        0 7D23 A   
.2AF                        0 7D14 A   .2B                         0 38B7 A   
.2B0                        0 7D1B A   .2B1                        0 7CCA A   
.2B2                        0 7CFC A   .2B3                        0 7CE9 A   
.2B4                        0 7D0D A   .2B5                        0 7D23 A   
.2B6                        0 7D3A A   .2B7                        0 7D57 A   
.2B8                        0 9306 A   .2B9                        0 92FB A   
.2BA                        0 92B8 A   .2BB                        0 92F2 A   
.2BC                        0 92C2 A   .2BD                        0 92D2 A   
.2BE                        0 92C9 A   .2BF                        0 92F0 A   
.2C                         0 38B7 A   .2C0                        0 92E7 A   
.2C1                        0 92DE A   .2C2                        0 92F0 A   
.2C3                        0 92FB A   .2C4                        0 9306 A   
.2C5                        0 9406 A   .2C6                        0 93FF A   
.2C7                        0 93DF A   .2C8                        0 93D7 A   
.2C9                        0 93CF A   .2CA                        0 93C7 A   
.2CB                        0 93F7 A   .2CC                        0 93EF A   
.2CD                        0 93E7 A   .2CE                        0 94CA A   
.2CF                        0 947F A   .2D                         0 38CC A   
.2D0                        0 94E2 A   .2D1                        0 9580 A   
.2D2                        0 9572 A   .2D3                        0 94E2 A   
.2D4                        0 9567 A   .2D5                        0 953B A   
.2D6                        0 9505 A   .2D7                        0 94EE A   
.2D8                        0 9567 A   .2D9                        0 9580 A   
.2DA                        0 95D8 A   .2DB                        0 95DA A   
.2DC                        0 96A3 A   .2DD                        0 9609 A   
.2DE                        0 9649 A   .2DF                        0 9643 A   
.2E                         0 38DB A   .2E0                        0 9667 A   
.2E1                        0 9653 A   .2E2                        0 96A9 A   
.2E3                        0 96C9 A   .2E4                        0 96B1 A   
.2E5                        0 96F9 A   .2E6                        0 96FB A   
.2E7                        0 970B A   .2E8                        0 9707 A   
.2E9                        0 970D A   .2EA                        0 971F A   
.2EB                        0 971B A   .2EC                        0 9721 A   
.2ED                        0 9758 A   .2EE                        0 9735 A   
.2EF                        0 97FD A   .2F                         0 38F9 A   
.2F0                        0 9774 A   .2F1                        0 978F A   
.2F2                        0 9786 A   .2F3                        0 9811 A   
.2F4                        0 9811 A   .2F5                        0 980B A   
.2F6                        0 9895 A   .2F7                        0 9891 A   
.2F8                        0 98DF A   .2F9                        0 98D0 A   
.2FA                        0 98D7 A   .2FB                        0 989D A   
.2FC                        0 98D0 A   .2FD                        0 98A5 A   
.2FE                        0 98DF A   .2FF                        0 9927 A   
.3                          0 3B40 A   .30                         0 3907 A   
.300                        0 9909 A   .301                        0 9A0C A   
.302                        0 9A0C A   .303                        0 99FD A   
.304                        0 9A04 A   .305                        0 99D1 A   
.306                        0 9A0C A   .307                        0 9AE5 A   
.309                        0 9AD3 A   .30A                        0 9A2A A   
.30B                        0 9A47 A   .30C                        0 9A3E A   
.30D                        0 9A59 A   .30E                        0 9A8F A   
.30F                        0 9A83 A   .31                         0 3915 A   
.310                        0 9A91 A   .311                        0 9AC7 A   
.312                        0 9ABB A   .313                        0 9AC9 A   
.32                         0 3923 A   .33                         0 399C A   
.34                         0 39E9 A   .36                         0 39DD A   
.37                         0 39A1 A   .38                         0 39A6 A   
.39                         0 39C4 A   .3A                         0 39EC A   
.3B                         0 3A20 A   .3C                         0 3A3C A   
.3D                         0 3A80 A   .3F                         0 3A74 A   
.4                          0 3669 A   .40                         0 3A41 A   
.41                         0 3A50 A   .42                         0 3A61 A   
.43                         0 3A8D A   .44                         0 3B36 A   
.45                         0 3A96 A   .46                         0 3B34 A   
.48                         0 3B09 A   .49                         0 3A9B A   
.4A                         0 3AAE A   .4B                         0 3AC3 A   
.4C                         0 3AD8 A   .4D                         0 3AF1 A   
.4E                         0 3AF9 A   .4F                         0 3B01 A   
.5                          0 36C4 A   .50                         0 3B32 A   
.51                         0 3B1C A   .52                         0 3B3C A   
.53                         0 3B8D A   .54                         0 3B53 A   
.55                         0 3BB4 A   .56                         0 3BAC A   
.57                         0 3BD5 A   .58                         0 3BD1 A   
.59                         0 3DA8 A   .5A                         0 3C63 A   
.5B                         0 3CD5 A   .5D                         0 3CC5 A   
.5E                         0 3CA3 A   .5F                         0 3CAB A   
.60                         0 3CB3 A   .61                         0 3CBB A   
.62                         0 3D92 A   .63                         0 3D81 A   
.64                         0 3D88 A   .65                         0 3CDD A   
.66                         0 3D5A A   .67                         0 3CFE A   
.68                         0 3D81 A   .69                         0 3D92 A   
.6A                         0 3DA8 A   .6B                         0 3D9B A   
.6C                         0 3DF8 A   .6D                         0 3DE9 A   
.6E                         0 3DF0 A   .6F                         0 3DB8 A   
.7                          0 369F A   .70                         0 3DF8 A   
.71                         0 3E7D A   .72                         0 3E6E A   
.73                         0 3E75 A   .74                         0 3E36 A   
.75                         0 3E7D A   .76                         0 3EC4 A   
.77                         0 3EB5 A   .78                         0 3EBC A   
.79                         0 3E84 A   .7A                         0 3EC4 A   
.7B                         0 3EDF A   .7C                         0 3EDA A   
.7D                         0 3EE2 A   .7E                         0 3F39 A   
.7F                         0 3F2A A   .8                          0 367B A   
.80                         0 3F31 A   .81                         0 3EF9 A   
.82                         0 3F39 A   .83                         0 4039 A   
.84                         0 3F78 A   .85                         0 3FB4 A   
.86                         0 3F8E A   .87                         0 4039 A   
.88                         0 3FDF A   .89                         0 3FBB A   
.8A                         0 4039 A   .8B                         0 4176 A   
.8C                         0 4168 A   .8D                         0 4198 A   
.8E                         0 4189 A   .8F                         0 4190 A   
.9                          0 3687 A   .90                         0 417D A   
.91                         0 4198 A   .92                         0 41C4 A   
.93                         0 41B6 A   .94                         0 422A A   
.96                         0 421B A   .97                         0 41DC A   
.98                         0 41F1 A   .99                         0 4205 A   
.9A                         0 42F8 A   .9B                         0 42A8 A   
.9C                         0 42A1 A   .9D                         0 429A A   
.9E                         0 4292 A   .9F                         0 42D1 A   
.A                          0 3687 A   .A0                         0 42BC A   
.A1                         0 42E5 A   .A2                         0 435A A   
.A3                         0 4356 A   .A4                         0 4445 A   
.A5                         0 438D A   .A6                         0 447D A   
.A7                         0 4479 A   .A8                         0 44CF A   
.A9                         0 44CB A   .AA                         0 44F9 A   
.AB                         0 44F5 A   .AC                         0 4591 A   
.AD                         0 4523 A   .AE                         0 45B5 A   
.AF                         0 46DD A   .B                          0 3687 A   
.B0                         0 46CE A   .B1                         0 46D5 A   
.B2                         0 4692 A   .B3                         0 46DD A   
.B4                         0 4768 A   .B5                         0 4759 A   
.B6                         0 4760 A   .B7                         0 472F A   
.B8                         0 4768 A   .B9                         0 4888 A   
.BA                         0 4877 A   .BB                         0 487E A   
.BC                         0 47D6 A   .BD                         0 4835 A   
.BE                         0 47DF A   .BF                         0 4877 A   
.C                          0 3687 A   .C0                         0 4888 A   
.C1                         0 493D A   .C2                         0 492E A   
.C3                         0 4935 A   .C4                         0 48C0 A   
.C5                         0 4901 A   .C6                         0 48C9 A   
.C7                         0 492E A   .C8                         0 493D A   
.C9                         0 4953 A   .CA                         0 494F A   
.CB                         0 495F A   .CC                         0 495B A   
.CD                         0 4989 A   .CE                         0 4985 A   
.CF                         0 49C6 A   .D                          0 3687 A   
.D0                         0 49B5 A   .D1                         0 49D7 A   
.D2                         0 49D0 A   .D3                         0 49E8 A   
.D4                         0 49E1 A   .D5                         0 49F7 A   
.D6                         0 49F2 A   .D7                         0 4C6E A   
.D8                         0 4A1E A   .D9                         0 4AA8 A   
.DA                         0 4A73 A   .DB                         0 4A61 A   
.DC                         0 4A4F A   .DD                         0 4A48 A   
.DE                         0 4A41 A   .DF                         0 4C6B A   
.E                          0 3687 A   .E0                         0 4B8D A   
.E1                         0 4AB1 A   .E2                         0 4B8A A   
.E3                         0 4B77 A   .E4                         0 4B7E A   
.E5                         0 4ABC A   .E6                         0 4B1C A   
.E7                         0 4ADA A   .E8                         0 4AD3 A   
.E9                         0 4B77 A   .EA                         0 4B8A A   
.EB                         0 4C6B A   .EC                         0 4C6B A   
.ED                         0 4C58 A   .EE                         0 4C5F A   
.EF                         0 4B98 A   .F                          0 3687 A   
.F0                         0 4BF1 A   .F1                         0 4BAF A   
.F2                         0 4BA8 A   .F3                         0 4C4C A   
.F4                         0 4C58 A   .F5                         0 4C56 A   
.F6                         0 4C6B A   .F7                         0 5043 A   
.F8                         0 5043 A   .FA                         0 5031 A   
.FB                         0 4CA0 A   .FC                         0 4CA0 A   
.FD                         0 4D32 A   .FE                         0 4CDD A   
.FF                         0 4CCB A   _biosfn_alternate_prtsc     0 6B6E A   
_biosfn_enable_video_refre+ 0 6C49 A   _biosfn_get_cursor_pos      0 4449 A   
_biosfn_get_font_info       0 6994 A   _biosfn_load_gfx_8_14_char+ 0 6991 A   
_biosfn_load_gfx_8_16_char+ 0 6993 A   _biosfn_load_gfx_8_8_chars  0 698F A   
_biosfn_load_gfx_8_8_dd_ch+ 0 6992 A   _biosfn_load_gfx_user_char+ 0 6990 A   
_biosfn_load_text_8_14_pat  0 67C9 A   _biosfn_load_text_8_16_pat  0 68FE A   
_biosfn_load_text_8_8_pat   0 6860 A   _biosfn_load_text_user_pat  0 672D A   
_biosfn_perform_gray_scale+ 0 6486 A   _biosfn_read_char_attr      0 5047 A   
_biosfn_read_pixel          0 5C88 A   _biosfn_read_state_info     0 6D56 A   
_biosfn_read_video_state_s+ 0 6ED5 A   _biosfn_read_video_state_s+ 0 6E8E A   
_biosfn_restore_video_stat+ 0 74C3 A   _biosfn_save_video_state    0 6EF9 A   
_biosfn_scroll              0 4941 A   _biosfn_set_active_page     0 44BE A   
_biosfn_set_cursor_pos      0 4349 A   _biosfn_set_cursor_shape    0 422E A   
_biosfn_set_video_mode      0 3B96 A   _biosfn_switch_video_inter+ 0 6C48 A   
_biosfn_write_char_attr     0 558C A   _biosfn_write_char_only     0 577E A   
_biosfn_write_pixel         0 59EC A   _biosfn_write_string        0 6C4A A   
_biosfn_write_teletype      0 5E8E A   _dac_regs                   0 028D A   
_dispi_get_max_bpp          0 90B7 A   _dispi_get_max_xres         0 9095 A   
_dispi_set_bank             0 90F7 A   _dispi_set_bank_farcall     0 9115 A   
_dispi_set_bpp              0 905E A   _dispi_set_enable           0 90D9 A   
_dispi_set_xres             0 9029 A   _dispi_set_yres             0 9040 A   
_display_info               0 3617 A   _display_splash_screen      0 3616 A   
_display_string             0 3635 A   _fail                       0 9BED A   
_find_vga_entry             0 7AA1 A   _get_SS                     0 7C19 A E 
_get_font_access            0 658D A   _inb                        0 7BE3 A E 
_int10_func                 0 365C A   _inw                        0 7BEE A E 
_line_to_vpti               0 027D A   _memcpyb                    0 7B2D A   
_memcpyw                    0 7B5D A   _memsetb                    0 7AE3 A   
_memsetw                    0 7B08 A   _mode_info_find_mode        0 92AB A   
_mode_info_list             0 7D5B A   _no_vbebios_info_string     0 8EA5 A   
_outb                       0 7BF9 A E _outw                       0 7C09 A E 
_palette0                   0 0A11 A   _palette1                   0 0AD1 A   
_palette2                   0 0B91 A   _palette3                   0 0C51 A   
_printf                     0 7C1C A E _read_byte                  0 7B8D A   
_read_word                  0 7BA0 A   _release_font_access        0 65B0 A   
_set_scan_lines             0 65E4 A   _static_functionality       0 0F51 A   
_vbe_biosfn_read_video_sta+ 0 9849 A E _vbe_biosfn_restore_video_+ 0 98E3 A E 
_vbe_biosfn_return_control+ 0 936A A E _vbe_biosfn_return_mode_in+ 0 95B2 A E 
_vbe_biosfn_save_restore_s+ 0 9A10 A E _vbe_biosfn_save_video_sta+ 0 9851 A E 
_vbe_biosfn_set_get_palett+ 0 9BD7 A E _vbe_biosfn_set_mode        0 96DC A E 
_vbe_has_vbe_display        0 930C A   _vbebios_copyright          0 8DD3 A   
_vbebios_info_string        0 8E7F A   _vbebios_product_name       0 8E31 A   
_vbebios_product_revision   0 8E4A A   _vbebios_vendor_name        0 8E19 A   
_vga_compat_setup           0 91D4 A   _vga_modes                  0 01FD A   
_vgafont14                  0 1761 A   _vgafont14alt               0 3561 A   
_vgafont16                  0 2561 A   _vgafont16alt               0 3562 A   
_vgafont8                   0 0F61 A   _vgamem_copy_cga            0 477A A   
_vgamem_copy_pl4            0 462D A   _vgamem_fill_cga            0 488C A   
_vgamem_fill_pl4            0 46EF A   _video_param_table          0 0291 A   
_video_save_pointer_table   0 35FA A   _write_byte                 0 7BB3 A   
_write_gfx_char_cga         0 52B5 A   _write_gfx_char_lin         0 54B8 A   
_write_gfx_char_pl4         0 5142 A   _write_word                 0 7BCB A   
biosfn_enable_cursor_emula+ 0 6C26 A   biosfn_enable_default_pale+ 0 6BC2 A   
biosfn_enable_grayscale_su+ 0 6C02 A   biosfn_enable_video_addres+ 0 6BE4 A   
biosfn_get_all_palette_reg  0 632B A   biosfn_get_ega_info         0 6B4B A   
biosfn_get_single_palette_+ 0 62F9 A   biosfn_get_video_mode       0 61F6 A   
biosfn_group_0B             0 5974 A   biosfn_group_10             0 621D A   
biosfn_group_1A             0 6D23 A   biosfn_read_all_dac_reg     0 640B A   
biosfn_read_display_code    0 6D2C A   biosfn_read_overscan_borde+ 0 631D A   
biosfn_read_pel_mask        0 643E A   biosfn_read_single_dac_reg  0 63F0 A   
biosfn_read_video_dac_stat+ 0 6449 A   biosfn_select_vert_res      0 6B6F A   
biosfn_select_video_dac_co+ 0 63AD A   biosfn_set_all_dac_reg      0 6385 A   
biosfn_set_all_palette_reg  0 62A6 A   biosfn_set_border_color     0 597F A   
biosfn_set_display_code     0 6D41 A   biosfn_set_overscan_border+ 0 629E A   
biosfn_set_palette          0 59BE A   biosfn_set_pel_mask         0 6433 A   
biosfn_set_single_dac_reg   0 636C A   biosfn_set_single_palette_+ 0 6284 A   
biosfn_set_text_block_spec+ 0 68F1 A   biosfn_toggle_intensity     0 62D3 A   
bit8_clear                  0 921C A   bit9_clear                  0 9223 A   
bpp4_mode                   0 8FBD A   dispi_get_bank              0 9107 A   
dispi_get_bpp               0 907C A   dispi_get_enable            0 90E9 A   
dispi_get_id                0 900B A   dispi_get_virt_height       0 91C6 A   
dispi_get_virt_width        0 91B8 A   dispi_get_x_offset          0 915C A   
dispi_get_y_offset          0 917A A   dispi_set_bank_farcall_err+ 0 9147 A   
dispi_set_bank_farcall_get  0 9139 A   dispi_set_id                0 9019 A   
dispi_set_virt_width        0 91A5 A   dispi_set_x_offset          0 914C A   
dispi_set_y_offset          0 916A A   get_bpp_noinc               0 9093 A   
get_dac_16_page             0 6479 A   get_dac_palette_format      0 9BC3 A   
get_display_start           0 9B90 A   get_display_window          0 9B18 A   
get_logical_scan_line_leng+ 0 9B50 A   get_palette_loop            0 6333 A   
idiv_u                      0 65DF A   illegal_window              0 8F50 A   
init_bios_area              0 35C2 A   init_vga_card               0 3563 A   
int10_end                   0 01FB A   int10_group_10_unknown      0 6283 A   
int10_normal                0 01ED A   int10_test_0B               0 014A A   
int10_test_1001             0 6223 A   int10_test_1002             0 6229 A   
int10_test_1003             0 622F A   int10_test_1007             0 6236 A   
int10_test_1008             0 623D A   int10_test_1009             0 6244 A   
int10_test_1010             0 624B A   int10_test_1012             0 6252 A   
int10_test_1013             0 6259 A   int10_test_1015             0 6260 A   
int10_test_1017             0 6267 A   int10_test_1018             0 626E A   
int10_test_1019             0 6275 A   int10_test_101A             0 627C A   
int10_test_101B             0 01A3 A   int10_test_1103             0 0155 A   
int10_test_12               0 0160 A   int10_test_1A               0 013F A   
int10_test_4F               0 01B2 A   int10_test_BL30             0 0170 A   
int10_test_BL31             0 017B A   int10_test_BL32             0 0185 A   
int10_test_BL33             0 018F A   int10_test_BL34             0 0199 A   
int10_test_vbe_05           0 01C0 A   int10_test_vbe_06           0 01C9 A   
int10_test_vbe_07           0 01D2 A   int10_test_vbe_08           0 01DB A   
int10_test_vbe_0A           0 01E4 A   memcpyb_end                 0 7B55 A   
memcpyw_end                 0 7B85 A   memsetb_end                 0 7B02 A   
memsetw_end                 0 7B27 A   mode_ega_color              0 6B6B A   
msg_vbe_init                0 8EC9 A   msg_vga_init                0 357F A   
no_4bpp_1                   0 9B48 A   no_4bpp_2                   0 9B65 A   
no_actl_reg1                0 629D A   no_actl_reg2                0 631C A   
no_vbe_flag                 0 935F A   no_vbe_interface            0 9343 A   
no_vbe_mode                 0 983B A   read_dac_loop               0 641C A   
set_actl_normal             0 63E9 A   set_cga_palette_loop        0 59CB A   
set_dac_16_page             0 63E3 A   set_dac_loop                0 6396 A   
set_dac_mode                0 9BC0 A   set_dac_page                0 63D0 A   
set_dac_palette_format      0 9BAB A   set_display_start           0 9B82 A   
set_display_window          0 9B08 A   set_intensity_loop          0 599D A   
set_logical_scan_line_byte+ 0 9B37 A   set_logical_scan_line_pixe+ 0 9B4D A   
set_low_border              0 5997 A   set_normal_dac              0 9BBD A   
set_palette_loop            0 62B5 A   set_retcode                 0 6BBB A   
set_vert_res                0 6BB1 A   set_width_svga              0 9196 A   
set_xy_regs                 0 8FC9 A   vbe_03_ok                   0 9844 A   
vbe_05_failed               0 9B21 A   vbe_08_ok                   0 9BCF A   
vbe_08_unsupported          0 9BD3 A   vbe_biosfn_display_window_+ 0 9AF8 A   
vbe_biosfn_return_current_+ 0 9824 A   vbe_biosfn_return_protecte+ 0 9BD8 A   
vbe_biosfn_set_get_dac_pal+ 0 9BA0 A   vbe_biosfn_set_get_display+ 0 9B72 A   
vbe_biosfn_set_get_logical+ 0 9B25 A   vbe_display_info            0 934D A   
vbe_init                    0 931F A   vert_res_200                0 6BA7 A   
vert_res_350                0 6B9D A   vert_res_400                0 6B91 A   
vesa_pm_end                 0 900B A   vesa_pm_io_ports_table      0 8F12 A   
vesa_pm_set_display_start   0 8F55 A   vesa_pm_set_display_start1  0 8F64 A   
vesa_pm_set_display_window+ 0 8F29 A   vesa_pm_set_window          0 8F1E A   
vesa_pm_start               0 8F0A A   vesa_pm_unimplemented       0 9006 A   
vga_compat_end              0 92A9 A   vga_set_virt_width          0 9188 A   
vgabios_copyright           0 0052 A   vgabios_date                0 0044 A   
vgabios_end                 0 9C03 A   vgabios_entry_point         0 0003 A   
vgabios_init_func           0 0109 A   vgabios_int10_handler       0 0133 A   
vgabios_license             0 007E A   vgabios_name                0 0022 A   
vgabios_start               0 0000 A   vgabios_version             0 0038 A   
vgabios_website             0 00B3 A   

00000 errors
00000 warnings
